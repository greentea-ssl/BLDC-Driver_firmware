
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         000096d0  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00023e14  080116d0  080116d0  000216d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080354e4  080354e4  00050098  2**0
                  CONTENTS
  5 .ARM          00000008  080354e4  080354e4  000454e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080354ec  080354ec  00050098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080354ec  080354ec  000454ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080354f0  080354f0  000454f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000098  20000000  080354f4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000518  20000098  0803558c  00050098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b0  0803558c  000505b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa47  00000000  00000000  000500c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003baa  00000000  00000000  0006ab0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013a8  00000000  00000000  0006e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011a0  00000000  00000000  0006fa68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00025eb8  00000000  00000000  00070c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001296f  00000000  00000000  00096ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d9f57  00000000  00000000  000a942f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00183386  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005874  00000000  00000000  00183404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000098 	.word	0x20000098
 800801c:	00000000 	.word	0x00000000
 8008020:	080116b8 	.word	0x080116b8

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	2000009c 	.word	0x2000009c
 800803c:	080116b8 	.word	0x080116b8

08008040 <memchr>:
 8008040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008044:	2a10      	cmp	r2, #16
 8008046:	db2b      	blt.n	80080a0 <memchr+0x60>
 8008048:	f010 0f07 	tst.w	r0, #7
 800804c:	d008      	beq.n	8008060 <memchr+0x20>
 800804e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008052:	3a01      	subs	r2, #1
 8008054:	428b      	cmp	r3, r1
 8008056:	d02d      	beq.n	80080b4 <memchr+0x74>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	b342      	cbz	r2, 80080b0 <memchr+0x70>
 800805e:	d1f6      	bne.n	800804e <memchr+0xe>
 8008060:	b4f0      	push	{r4, r5, r6, r7}
 8008062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800806a:	f022 0407 	bic.w	r4, r2, #7
 800806e:	f07f 0700 	mvns.w	r7, #0
 8008072:	2300      	movs	r3, #0
 8008074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008078:	3c08      	subs	r4, #8
 800807a:	ea85 0501 	eor.w	r5, r5, r1
 800807e:	ea86 0601 	eor.w	r6, r6, r1
 8008082:	fa85 f547 	uadd8	r5, r5, r7
 8008086:	faa3 f587 	sel	r5, r3, r7
 800808a:	fa86 f647 	uadd8	r6, r6, r7
 800808e:	faa5 f687 	sel	r6, r5, r7
 8008092:	b98e      	cbnz	r6, 80080b8 <memchr+0x78>
 8008094:	d1ee      	bne.n	8008074 <memchr+0x34>
 8008096:	bcf0      	pop	{r4, r5, r6, r7}
 8008098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800809c:	f002 0207 	and.w	r2, r2, #7
 80080a0:	b132      	cbz	r2, 80080b0 <memchr+0x70>
 80080a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080a6:	3a01      	subs	r2, #1
 80080a8:	ea83 0301 	eor.w	r3, r3, r1
 80080ac:	b113      	cbz	r3, 80080b4 <memchr+0x74>
 80080ae:	d1f8      	bne.n	80080a2 <memchr+0x62>
 80080b0:	2000      	movs	r0, #0
 80080b2:	4770      	bx	lr
 80080b4:	3801      	subs	r0, #1
 80080b6:	4770      	bx	lr
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	bf06      	itte	eq
 80080bc:	4635      	moveq	r5, r6
 80080be:	3803      	subeq	r0, #3
 80080c0:	3807      	subne	r0, #7
 80080c2:	f015 0f01 	tst.w	r5, #1
 80080c6:	d107      	bne.n	80080d8 <memchr+0x98>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080ce:	bf02      	ittt	eq
 80080d0:	3001      	addeq	r0, #1
 80080d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080d6:	3001      	addeq	r0, #1
 80080d8:	bcf0      	pop	{r4, r5, r6, r7}
 80080da:	3801      	subs	r0, #1
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <__aeabi_drsub>:
 80080e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080e4:	e002      	b.n	80080ec <__adddf3>
 80080e6:	bf00      	nop

080080e8 <__aeabi_dsub>:
 80080e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080ec <__adddf3>:
 80080ec:	b530      	push	{r4, r5, lr}
 80080ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080f6:	ea94 0f05 	teq	r4, r5
 80080fa:	bf08      	it	eq
 80080fc:	ea90 0f02 	teqeq	r0, r2
 8008100:	bf1f      	itttt	ne
 8008102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008106:	ea55 0c02 	orrsne.w	ip, r5, r2
 800810a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800810e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008112:	f000 80e2 	beq.w	80082da <__adddf3+0x1ee>
 8008116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800811a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800811e:	bfb8      	it	lt
 8008120:	426d      	neglt	r5, r5
 8008122:	dd0c      	ble.n	800813e <__adddf3+0x52>
 8008124:	442c      	add	r4, r5
 8008126:	ea80 0202 	eor.w	r2, r0, r2
 800812a:	ea81 0303 	eor.w	r3, r1, r3
 800812e:	ea82 0000 	eor.w	r0, r2, r0
 8008132:	ea83 0101 	eor.w	r1, r3, r1
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	2d36      	cmp	r5, #54	; 0x36
 8008140:	bf88      	it	hi
 8008142:	bd30      	pophi	{r4, r5, pc}
 8008144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800814c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008154:	d002      	beq.n	800815c <__adddf3+0x70>
 8008156:	4240      	negs	r0, r0
 8008158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800815c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008168:	d002      	beq.n	8008170 <__adddf3+0x84>
 800816a:	4252      	negs	r2, r2
 800816c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008170:	ea94 0f05 	teq	r4, r5
 8008174:	f000 80a7 	beq.w	80082c6 <__adddf3+0x1da>
 8008178:	f1a4 0401 	sub.w	r4, r4, #1
 800817c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008180:	db0d      	blt.n	800819e <__adddf3+0xb2>
 8008182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008186:	fa22 f205 	lsr.w	r2, r2, r5
 800818a:	1880      	adds	r0, r0, r2
 800818c:	f141 0100 	adc.w	r1, r1, #0
 8008190:	fa03 f20e 	lsl.w	r2, r3, lr
 8008194:	1880      	adds	r0, r0, r2
 8008196:	fa43 f305 	asr.w	r3, r3, r5
 800819a:	4159      	adcs	r1, r3
 800819c:	e00e      	b.n	80081bc <__adddf3+0xd0>
 800819e:	f1a5 0520 	sub.w	r5, r5, #32
 80081a2:	f10e 0e20 	add.w	lr, lr, #32
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081ac:	bf28      	it	cs
 80081ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081b2:	fa43 f305 	asr.w	r3, r3, r5
 80081b6:	18c0      	adds	r0, r0, r3
 80081b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081c0:	d507      	bpl.n	80081d2 <__adddf3+0xe6>
 80081c2:	f04f 0e00 	mov.w	lr, #0
 80081c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80081d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081d6:	d31b      	bcc.n	8008210 <__adddf3+0x124>
 80081d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081dc:	d30c      	bcc.n	80081f8 <__adddf3+0x10c>
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081e8:	f104 0401 	add.w	r4, r4, #1
 80081ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081f4:	f080 809a 	bcs.w	800832c <__adddf3+0x240>
 80081f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081fc:	bf08      	it	eq
 80081fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008202:	f150 0000 	adcs.w	r0, r0, #0
 8008206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800820a:	ea41 0105 	orr.w	r1, r1, r5
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008214:	4140      	adcs	r0, r0
 8008216:	eb41 0101 	adc.w	r1, r1, r1
 800821a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800821e:	f1a4 0401 	sub.w	r4, r4, #1
 8008222:	d1e9      	bne.n	80081f8 <__adddf3+0x10c>
 8008224:	f091 0f00 	teq	r1, #0
 8008228:	bf04      	itt	eq
 800822a:	4601      	moveq	r1, r0
 800822c:	2000      	moveq	r0, #0
 800822e:	fab1 f381 	clz	r3, r1
 8008232:	bf08      	it	eq
 8008234:	3320      	addeq	r3, #32
 8008236:	f1a3 030b 	sub.w	r3, r3, #11
 800823a:	f1b3 0220 	subs.w	r2, r3, #32
 800823e:	da0c      	bge.n	800825a <__adddf3+0x16e>
 8008240:	320c      	adds	r2, #12
 8008242:	dd08      	ble.n	8008256 <__adddf3+0x16a>
 8008244:	f102 0c14 	add.w	ip, r2, #20
 8008248:	f1c2 020c 	rsb	r2, r2, #12
 800824c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008250:	fa21 f102 	lsr.w	r1, r1, r2
 8008254:	e00c      	b.n	8008270 <__adddf3+0x184>
 8008256:	f102 0214 	add.w	r2, r2, #20
 800825a:	bfd8      	it	le
 800825c:	f1c2 0c20 	rsble	ip, r2, #32
 8008260:	fa01 f102 	lsl.w	r1, r1, r2
 8008264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008268:	bfdc      	itt	le
 800826a:	ea41 010c 	orrle.w	r1, r1, ip
 800826e:	4090      	lslle	r0, r2
 8008270:	1ae4      	subs	r4, r4, r3
 8008272:	bfa2      	ittt	ge
 8008274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008278:	4329      	orrge	r1, r5
 800827a:	bd30      	popge	{r4, r5, pc}
 800827c:	ea6f 0404 	mvn.w	r4, r4
 8008280:	3c1f      	subs	r4, #31
 8008282:	da1c      	bge.n	80082be <__adddf3+0x1d2>
 8008284:	340c      	adds	r4, #12
 8008286:	dc0e      	bgt.n	80082a6 <__adddf3+0x1ba>
 8008288:	f104 0414 	add.w	r4, r4, #20
 800828c:	f1c4 0220 	rsb	r2, r4, #32
 8008290:	fa20 f004 	lsr.w	r0, r0, r4
 8008294:	fa01 f302 	lsl.w	r3, r1, r2
 8008298:	ea40 0003 	orr.w	r0, r0, r3
 800829c:	fa21 f304 	lsr.w	r3, r1, r4
 80082a0:	ea45 0103 	orr.w	r1, r5, r3
 80082a4:	bd30      	pop	{r4, r5, pc}
 80082a6:	f1c4 040c 	rsb	r4, r4, #12
 80082aa:	f1c4 0220 	rsb	r2, r4, #32
 80082ae:	fa20 f002 	lsr.w	r0, r0, r2
 80082b2:	fa01 f304 	lsl.w	r3, r1, r4
 80082b6:	ea40 0003 	orr.w	r0, r0, r3
 80082ba:	4629      	mov	r1, r5
 80082bc:	bd30      	pop	{r4, r5, pc}
 80082be:	fa21 f004 	lsr.w	r0, r1, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	bd30      	pop	{r4, r5, pc}
 80082c6:	f094 0f00 	teq	r4, #0
 80082ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082ce:	bf06      	itte	eq
 80082d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082d4:	3401      	addeq	r4, #1
 80082d6:	3d01      	subne	r5, #1
 80082d8:	e74e      	b.n	8008178 <__adddf3+0x8c>
 80082da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082de:	bf18      	it	ne
 80082e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082e4:	d029      	beq.n	800833a <__adddf3+0x24e>
 80082e6:	ea94 0f05 	teq	r4, r5
 80082ea:	bf08      	it	eq
 80082ec:	ea90 0f02 	teqeq	r0, r2
 80082f0:	d005      	beq.n	80082fe <__adddf3+0x212>
 80082f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80082f6:	bf04      	itt	eq
 80082f8:	4619      	moveq	r1, r3
 80082fa:	4610      	moveq	r0, r2
 80082fc:	bd30      	pop	{r4, r5, pc}
 80082fe:	ea91 0f03 	teq	r1, r3
 8008302:	bf1e      	ittt	ne
 8008304:	2100      	movne	r1, #0
 8008306:	2000      	movne	r0, #0
 8008308:	bd30      	popne	{r4, r5, pc}
 800830a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800830e:	d105      	bne.n	800831c <__adddf3+0x230>
 8008310:	0040      	lsls	r0, r0, #1
 8008312:	4149      	adcs	r1, r1
 8008314:	bf28      	it	cs
 8008316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008320:	bf3c      	itt	cc
 8008322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008326:	bd30      	popcc	{r4, r5, pc}
 8008328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800832c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800833e:	bf1a      	itte	ne
 8008340:	4619      	movne	r1, r3
 8008342:	4610      	movne	r0, r2
 8008344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008348:	bf1c      	itt	ne
 800834a:	460b      	movne	r3, r1
 800834c:	4602      	movne	r2, r0
 800834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008352:	bf06      	itte	eq
 8008354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008358:	ea91 0f03 	teqeq	r1, r3
 800835c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008360:	bd30      	pop	{r4, r5, pc}
 8008362:	bf00      	nop

08008364 <__aeabi_ui2d>:
 8008364:	f090 0f00 	teq	r0, #0
 8008368:	bf04      	itt	eq
 800836a:	2100      	moveq	r1, #0
 800836c:	4770      	bxeq	lr
 800836e:	b530      	push	{r4, r5, lr}
 8008370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008378:	f04f 0500 	mov.w	r5, #0
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	e750      	b.n	8008224 <__adddf3+0x138>
 8008382:	bf00      	nop

08008384 <__aeabi_i2d>:
 8008384:	f090 0f00 	teq	r0, #0
 8008388:	bf04      	itt	eq
 800838a:	2100      	moveq	r1, #0
 800838c:	4770      	bxeq	lr
 800838e:	b530      	push	{r4, r5, lr}
 8008390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800839c:	bf48      	it	mi
 800839e:	4240      	negmi	r0, r0
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	e73e      	b.n	8008224 <__adddf3+0x138>
 80083a6:	bf00      	nop

080083a8 <__aeabi_f2d>:
 80083a8:	0042      	lsls	r2, r0, #1
 80083aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80083b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083b6:	bf1f      	itttt	ne
 80083b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083c4:	4770      	bxne	lr
 80083c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083ca:	bf08      	it	eq
 80083cc:	4770      	bxeq	lr
 80083ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083d8:	4770      	bxeq	lr
 80083da:	b530      	push	{r4, r5, lr}
 80083dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083e8:	e71c      	b.n	8008224 <__adddf3+0x138>
 80083ea:	bf00      	nop

080083ec <__aeabi_ul2d>:
 80083ec:	ea50 0201 	orrs.w	r2, r0, r1
 80083f0:	bf08      	it	eq
 80083f2:	4770      	bxeq	lr
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	f04f 0500 	mov.w	r5, #0
 80083fa:	e00a      	b.n	8008412 <__aeabi_l2d+0x16>

080083fc <__aeabi_l2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800840a:	d502      	bpl.n	8008412 <__aeabi_l2d+0x16>
 800840c:	4240      	negs	r0, r0
 800840e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800841a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800841e:	f43f aed8 	beq.w	80081d2 <__adddf3+0xe6>
 8008422:	f04f 0203 	mov.w	r2, #3
 8008426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800842a:	bf18      	it	ne
 800842c:	3203      	addne	r2, #3
 800842e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008432:	bf18      	it	ne
 8008434:	3203      	addne	r2, #3
 8008436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800843a:	f1c2 0320 	rsb	r3, r2, #32
 800843e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008442:	fa20 f002 	lsr.w	r0, r0, r2
 8008446:	fa01 fe03 	lsl.w	lr, r1, r3
 800844a:	ea40 000e 	orr.w	r0, r0, lr
 800844e:	fa21 f102 	lsr.w	r1, r1, r2
 8008452:	4414      	add	r4, r2
 8008454:	e6bd      	b.n	80081d2 <__adddf3+0xe6>
 8008456:	bf00      	nop

08008458 <__aeabi_dmul>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800845e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008466:	bf1d      	ittte	ne
 8008468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800846c:	ea94 0f0c 	teqne	r4, ip
 8008470:	ea95 0f0c 	teqne	r5, ip
 8008474:	f000 f8de 	bleq	8008634 <__aeabi_dmul+0x1dc>
 8008478:	442c      	add	r4, r5
 800847a:	ea81 0603 	eor.w	r6, r1, r3
 800847e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800848a:	bf18      	it	ne
 800848c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	d038      	beq.n	800850c <__aeabi_dmul+0xb4>
 800849a:	fba0 ce02 	umull	ip, lr, r0, r2
 800849e:	f04f 0500 	mov.w	r5, #0
 80084a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084ae:	f04f 0600 	mov.w	r6, #0
 80084b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084b6:	f09c 0f00 	teq	ip, #0
 80084ba:	bf18      	it	ne
 80084bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084cc:	d204      	bcs.n	80084d8 <__aeabi_dmul+0x80>
 80084ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084d2:	416d      	adcs	r5, r5
 80084d4:	eb46 0606 	adc.w	r6, r6, r6
 80084d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084f0:	bf88      	it	hi
 80084f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084f6:	d81e      	bhi.n	8008536 <__aeabi_dmul+0xde>
 80084f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084fc:	bf08      	it	eq
 80084fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008502:	f150 0000 	adcs.w	r0, r0, #0
 8008506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008510:	ea46 0101 	orr.w	r1, r6, r1
 8008514:	ea40 0002 	orr.w	r0, r0, r2
 8008518:	ea81 0103 	eor.w	r1, r1, r3
 800851c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008520:	bfc2      	ittt	gt
 8008522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800852a:	bd70      	popgt	{r4, r5, r6, pc}
 800852c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008530:	f04f 0e00 	mov.w	lr, #0
 8008534:	3c01      	subs	r4, #1
 8008536:	f300 80ab 	bgt.w	8008690 <__aeabi_dmul+0x238>
 800853a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800853e:	bfde      	ittt	le
 8008540:	2000      	movle	r0, #0
 8008542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008546:	bd70      	pople	{r4, r5, r6, pc}
 8008548:	f1c4 0400 	rsb	r4, r4, #0
 800854c:	3c20      	subs	r4, #32
 800854e:	da35      	bge.n	80085bc <__aeabi_dmul+0x164>
 8008550:	340c      	adds	r4, #12
 8008552:	dc1b      	bgt.n	800858c <__aeabi_dmul+0x134>
 8008554:	f104 0414 	add.w	r4, r4, #20
 8008558:	f1c4 0520 	rsb	r5, r4, #32
 800855c:	fa00 f305 	lsl.w	r3, r0, r5
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f205 	lsl.w	r2, r1, r5
 8008568:	ea40 0002 	orr.w	r0, r0, r2
 800856c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008578:	fa21 f604 	lsr.w	r6, r1, r4
 800857c:	eb42 0106 	adc.w	r1, r2, r6
 8008580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008584:	bf08      	it	eq
 8008586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f1c4 040c 	rsb	r4, r4, #12
 8008590:	f1c4 0520 	rsb	r5, r4, #32
 8008594:	fa00 f304 	lsl.w	r3, r0, r4
 8008598:	fa20 f005 	lsr.w	r0, r0, r5
 800859c:	fa01 f204 	lsl.w	r2, r1, r4
 80085a0:	ea40 0002 	orr.w	r0, r0, r2
 80085a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085ac:	f141 0100 	adc.w	r1, r1, #0
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 0520 	rsb	r5, r4, #32
 80085c0:	fa00 f205 	lsl.w	r2, r0, r5
 80085c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085c8:	fa20 f304 	lsr.w	r3, r0, r4
 80085cc:	fa01 f205 	lsl.w	r2, r1, r5
 80085d0:	ea43 0302 	orr.w	r3, r3, r2
 80085d4:	fa21 f004 	lsr.w	r0, r1, r4
 80085d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085dc:	fa21 f204 	lsr.w	r2, r1, r4
 80085e0:	ea20 0002 	bic.w	r0, r0, r2
 80085e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085ec:	bf08      	it	eq
 80085ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	f094 0f00 	teq	r4, #0
 80085f8:	d10f      	bne.n	800861a <__aeabi_dmul+0x1c2>
 80085fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085fe:	0040      	lsls	r0, r0, #1
 8008600:	eb41 0101 	adc.w	r1, r1, r1
 8008604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008608:	bf08      	it	eq
 800860a:	3c01      	subeq	r4, #1
 800860c:	d0f7      	beq.n	80085fe <__aeabi_dmul+0x1a6>
 800860e:	ea41 0106 	orr.w	r1, r1, r6
 8008612:	f095 0f00 	teq	r5, #0
 8008616:	bf18      	it	ne
 8008618:	4770      	bxne	lr
 800861a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800861e:	0052      	lsls	r2, r2, #1
 8008620:	eb43 0303 	adc.w	r3, r3, r3
 8008624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008628:	bf08      	it	eq
 800862a:	3d01      	subeq	r5, #1
 800862c:	d0f7      	beq.n	800861e <__aeabi_dmul+0x1c6>
 800862e:	ea43 0306 	orr.w	r3, r3, r6
 8008632:	4770      	bx	lr
 8008634:	ea94 0f0c 	teq	r4, ip
 8008638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800863c:	bf18      	it	ne
 800863e:	ea95 0f0c 	teqne	r5, ip
 8008642:	d00c      	beq.n	800865e <__aeabi_dmul+0x206>
 8008644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008648:	bf18      	it	ne
 800864a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800864e:	d1d1      	bne.n	80085f4 <__aeabi_dmul+0x19c>
 8008650:	ea81 0103 	eor.w	r1, r1, r3
 8008654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008658:	f04f 0000 	mov.w	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008662:	bf06      	itte	eq
 8008664:	4610      	moveq	r0, r2
 8008666:	4619      	moveq	r1, r3
 8008668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800866c:	d019      	beq.n	80086a2 <__aeabi_dmul+0x24a>
 800866e:	ea94 0f0c 	teq	r4, ip
 8008672:	d102      	bne.n	800867a <__aeabi_dmul+0x222>
 8008674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008678:	d113      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800867a:	ea95 0f0c 	teq	r5, ip
 800867e:	d105      	bne.n	800868c <__aeabi_dmul+0x234>
 8008680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008684:	bf1c      	itt	ne
 8008686:	4610      	movne	r0, r2
 8008688:	4619      	movne	r1, r3
 800868a:	d10a      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800868c:	ea81 0103 	eor.w	r1, r1, r3
 8008690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869c:	f04f 0000 	mov.w	r0, #0
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086aa:	bd70      	pop	{r4, r5, r6, pc}

080086ac <__aeabi_ddiv>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ba:	bf1d      	ittte	ne
 80086bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086c0:	ea94 0f0c 	teqne	r4, ip
 80086c4:	ea95 0f0c 	teqne	r5, ip
 80086c8:	f000 f8a7 	bleq	800881a <__aeabi_ddiv+0x16e>
 80086cc:	eba4 0405 	sub.w	r4, r4, r5
 80086d0:	ea81 0e03 	eor.w	lr, r1, r3
 80086d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086dc:	f000 8088 	beq.w	80087f0 <__aeabi_ddiv+0x144>
 80086e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008704:	429d      	cmp	r5, r3
 8008706:	bf08      	it	eq
 8008708:	4296      	cmpeq	r6, r2
 800870a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800870e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008712:	d202      	bcs.n	800871a <__aeabi_ddiv+0x6e>
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	ea4f 0232 	mov.w	r2, r2, rrx
 800871a:	1ab6      	subs	r6, r6, r2
 800871c:	eb65 0503 	sbc.w	r5, r5, r3
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	ea4f 0232 	mov.w	r2, r2, rrx
 8008726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800872a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800872e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008736:	bf22      	ittt	cs
 8008738:	1ab6      	subcs	r6, r6, r2
 800873a:	4675      	movcs	r5, lr
 800873c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	ea4f 0232 	mov.w	r2, r2, rrx
 8008746:	ebb6 0e02 	subs.w	lr, r6, r2
 800874a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800874e:	bf22      	ittt	cs
 8008750:	1ab6      	subcs	r6, r6, r2
 8008752:	4675      	movcs	r5, lr
 8008754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	ea4f 0232 	mov.w	r2, r2, rrx
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008788:	ea55 0e06 	orrs.w	lr, r5, r6
 800878c:	d018      	beq.n	80087c0 <__aeabi_ddiv+0x114>
 800878e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800879a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800879e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087aa:	d1c0      	bne.n	800872e <__aeabi_ddiv+0x82>
 80087ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087b0:	d10b      	bne.n	80087ca <__aeabi_ddiv+0x11e>
 80087b2:	ea41 0100 	orr.w	r1, r1, r0
 80087b6:	f04f 0000 	mov.w	r0, #0
 80087ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087be:	e7b6      	b.n	800872e <__aeabi_ddiv+0x82>
 80087c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c4:	bf04      	itt	eq
 80087c6:	4301      	orreq	r1, r0
 80087c8:	2000      	moveq	r0, #0
 80087ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087ce:	bf88      	it	hi
 80087d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087d4:	f63f aeaf 	bhi.w	8008536 <__aeabi_dmul+0xde>
 80087d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087dc:	bf04      	itt	eq
 80087de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087e6:	f150 0000 	adcs.w	r0, r0, #0
 80087ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087fc:	bfc2      	ittt	gt
 80087fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008806:	bd70      	popgt	{r4, r5, r6, pc}
 8008808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800880c:	f04f 0e00 	mov.w	lr, #0
 8008810:	3c01      	subs	r4, #1
 8008812:	e690      	b.n	8008536 <__aeabi_dmul+0xde>
 8008814:	ea45 0e06 	orr.w	lr, r5, r6
 8008818:	e68d      	b.n	8008536 <__aeabi_dmul+0xde>
 800881a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	bf08      	it	eq
 8008824:	ea95 0f0c 	teqeq	r5, ip
 8008828:	f43f af3b 	beq.w	80086a2 <__aeabi_dmul+0x24a>
 800882c:	ea94 0f0c 	teq	r4, ip
 8008830:	d10a      	bne.n	8008848 <__aeabi_ddiv+0x19c>
 8008832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008836:	f47f af34 	bne.w	80086a2 <__aeabi_dmul+0x24a>
 800883a:	ea95 0f0c 	teq	r5, ip
 800883e:	f47f af25 	bne.w	800868c <__aeabi_dmul+0x234>
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	e72c      	b.n	80086a2 <__aeabi_dmul+0x24a>
 8008848:	ea95 0f0c 	teq	r5, ip
 800884c:	d106      	bne.n	800885c <__aeabi_ddiv+0x1b0>
 800884e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008852:	f43f aefd 	beq.w	8008650 <__aeabi_dmul+0x1f8>
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	e722      	b.n	80086a2 <__aeabi_dmul+0x24a>
 800885c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008860:	bf18      	it	ne
 8008862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008866:	f47f aec5 	bne.w	80085f4 <__aeabi_dmul+0x19c>
 800886a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800886e:	f47f af0d 	bne.w	800868c <__aeabi_dmul+0x234>
 8008872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008876:	f47f aeeb 	bne.w	8008650 <__aeabi_dmul+0x1f8>
 800887a:	e712      	b.n	80086a2 <__aeabi_dmul+0x24a>

0800887c <__gedf2>:
 800887c:	f04f 3cff 	mov.w	ip, #4294967295
 8008880:	e006      	b.n	8008890 <__cmpdf2+0x4>
 8008882:	bf00      	nop

08008884 <__ledf2>:
 8008884:	f04f 0c01 	mov.w	ip, #1
 8008888:	e002      	b.n	8008890 <__cmpdf2+0x4>
 800888a:	bf00      	nop

0800888c <__cmpdf2>:
 800888c:	f04f 0c01 	mov.w	ip, #1
 8008890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800889c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a0:	bf18      	it	ne
 80088a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088a6:	d01b      	beq.n	80088e0 <__cmpdf2+0x54>
 80088a8:	b001      	add	sp, #4
 80088aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088ae:	bf0c      	ite	eq
 80088b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088b4:	ea91 0f03 	teqne	r1, r3
 80088b8:	bf02      	ittt	eq
 80088ba:	ea90 0f02 	teqeq	r0, r2
 80088be:	2000      	moveq	r0, #0
 80088c0:	4770      	bxeq	lr
 80088c2:	f110 0f00 	cmn.w	r0, #0
 80088c6:	ea91 0f03 	teq	r1, r3
 80088ca:	bf58      	it	pl
 80088cc:	4299      	cmppl	r1, r3
 80088ce:	bf08      	it	eq
 80088d0:	4290      	cmpeq	r0, r2
 80088d2:	bf2c      	ite	cs
 80088d4:	17d8      	asrcs	r0, r3, #31
 80088d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088da:	f040 0001 	orr.w	r0, r0, #1
 80088de:	4770      	bx	lr
 80088e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088e8:	d102      	bne.n	80088f0 <__cmpdf2+0x64>
 80088ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088ee:	d107      	bne.n	8008900 <__cmpdf2+0x74>
 80088f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d1d6      	bne.n	80088a8 <__cmpdf2+0x1c>
 80088fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088fe:	d0d3      	beq.n	80088a8 <__cmpdf2+0x1c>
 8008900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <__aeabi_cdrcmple>:
 8008908:	4684      	mov	ip, r0
 800890a:	4610      	mov	r0, r2
 800890c:	4662      	mov	r2, ip
 800890e:	468c      	mov	ip, r1
 8008910:	4619      	mov	r1, r3
 8008912:	4663      	mov	r3, ip
 8008914:	e000      	b.n	8008918 <__aeabi_cdcmpeq>
 8008916:	bf00      	nop

08008918 <__aeabi_cdcmpeq>:
 8008918:	b501      	push	{r0, lr}
 800891a:	f7ff ffb7 	bl	800888c <__cmpdf2>
 800891e:	2800      	cmp	r0, #0
 8008920:	bf48      	it	mi
 8008922:	f110 0f00 	cmnmi.w	r0, #0
 8008926:	bd01      	pop	{r0, pc}

08008928 <__aeabi_dcmpeq>:
 8008928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800892c:	f7ff fff4 	bl	8008918 <__aeabi_cdcmpeq>
 8008930:	bf0c      	ite	eq
 8008932:	2001      	moveq	r0, #1
 8008934:	2000      	movne	r0, #0
 8008936:	f85d fb08 	ldr.w	pc, [sp], #8
 800893a:	bf00      	nop

0800893c <__aeabi_dcmplt>:
 800893c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008940:	f7ff ffea 	bl	8008918 <__aeabi_cdcmpeq>
 8008944:	bf34      	ite	cc
 8008946:	2001      	movcc	r0, #1
 8008948:	2000      	movcs	r0, #0
 800894a:	f85d fb08 	ldr.w	pc, [sp], #8
 800894e:	bf00      	nop

08008950 <__aeabi_dcmple>:
 8008950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008954:	f7ff ffe0 	bl	8008918 <__aeabi_cdcmpeq>
 8008958:	bf94      	ite	ls
 800895a:	2001      	movls	r0, #1
 800895c:	2000      	movhi	r0, #0
 800895e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008962:	bf00      	nop

08008964 <__aeabi_dcmpge>:
 8008964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008968:	f7ff ffce 	bl	8008908 <__aeabi_cdrcmple>
 800896c:	bf94      	ite	ls
 800896e:	2001      	movls	r0, #1
 8008970:	2000      	movhi	r0, #0
 8008972:	f85d fb08 	ldr.w	pc, [sp], #8
 8008976:	bf00      	nop

08008978 <__aeabi_dcmpgt>:
 8008978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800897c:	f7ff ffc4 	bl	8008908 <__aeabi_cdrcmple>
 8008980:	bf34      	ite	cc
 8008982:	2001      	movcc	r0, #1
 8008984:	2000      	movcs	r0, #0
 8008986:	f85d fb08 	ldr.w	pc, [sp], #8
 800898a:	bf00      	nop

0800898c <__aeabi_d2f>:
 800898c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008994:	bf24      	itt	cs
 8008996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800899a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800899e:	d90d      	bls.n	80089bc <__aeabi_d2f+0x30>
 80089a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80089a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80089a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80089ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80089b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80089b4:	bf08      	it	eq
 80089b6:	f020 0001 	biceq.w	r0, r0, #1
 80089ba:	4770      	bx	lr
 80089bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80089c0:	d121      	bne.n	8008a06 <__aeabi_d2f+0x7a>
 80089c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80089c6:	bfbc      	itt	lt
 80089c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80089cc:	4770      	bxlt	lr
 80089ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80089d6:	f1c2 0218 	rsb	r2, r2, #24
 80089da:	f1c2 0c20 	rsb	ip, r2, #32
 80089de:	fa10 f30c 	lsls.w	r3, r0, ip
 80089e2:	fa20 f002 	lsr.w	r0, r0, r2
 80089e6:	bf18      	it	ne
 80089e8:	f040 0001 	orrne.w	r0, r0, #1
 80089ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80089f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80089f8:	ea40 000c 	orr.w	r0, r0, ip
 80089fc:	fa23 f302 	lsr.w	r3, r3, r2
 8008a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a04:	e7cc      	b.n	80089a0 <__aeabi_d2f+0x14>
 8008a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a0a:	d107      	bne.n	8008a1c <__aeabi_d2f+0x90>
 8008a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a10:	bf1e      	ittt	ne
 8008a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a1a:	4770      	bxne	lr
 8008a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop

08008a2c <__aeabi_uldivmod>:
 8008a2c:	b953      	cbnz	r3, 8008a44 <__aeabi_uldivmod+0x18>
 8008a2e:	b94a      	cbnz	r2, 8008a44 <__aeabi_uldivmod+0x18>
 8008a30:	2900      	cmp	r1, #0
 8008a32:	bf08      	it	eq
 8008a34:	2800      	cmpeq	r0, #0
 8008a36:	bf1c      	itt	ne
 8008a38:	f04f 31ff 	movne.w	r1, #4294967295
 8008a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8008a40:	f000 b972 	b.w	8008d28 <__aeabi_idiv0>
 8008a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a4c:	f000 f806 	bl	8008a5c <__udivmoddi4>
 8008a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a58:	b004      	add	sp, #16
 8008a5a:	4770      	bx	lr

08008a5c <__udivmoddi4>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	9e08      	ldr	r6, [sp, #32]
 8008a62:	4604      	mov	r4, r0
 8008a64:	4688      	mov	r8, r1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d14b      	bne.n	8008b02 <__udivmoddi4+0xa6>
 8008a6a:	428a      	cmp	r2, r1
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	d967      	bls.n	8008b40 <__udivmoddi4+0xe4>
 8008a70:	fab2 f282 	clz	r2, r2
 8008a74:	b14a      	cbz	r2, 8008a8a <__udivmoddi4+0x2e>
 8008a76:	f1c2 0720 	rsb	r7, r2, #32
 8008a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8008a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8008a82:	4095      	lsls	r5, r2
 8008a84:	ea47 0803 	orr.w	r8, r7, r3
 8008a88:	4094      	lsls	r4, r2
 8008a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008a8e:	0c23      	lsrs	r3, r4, #16
 8008a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8008a94:	fa1f fc85 	uxth.w	ip, r5
 8008a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8008a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d909      	bls.n	8008abc <__udivmoddi4+0x60>
 8008aa8:	18eb      	adds	r3, r5, r3
 8008aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8008aae:	f080 811b 	bcs.w	8008ce8 <__udivmoddi4+0x28c>
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	f240 8118 	bls.w	8008ce8 <__udivmoddi4+0x28c>
 8008ab8:	3f02      	subs	r7, #2
 8008aba:	442b      	add	r3, r5
 8008abc:	1a5b      	subs	r3, r3, r1
 8008abe:	b2a4      	uxth	r4, r4
 8008ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8008ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8008ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8008ad0:	45a4      	cmp	ip, r4
 8008ad2:	d909      	bls.n	8008ae8 <__udivmoddi4+0x8c>
 8008ad4:	192c      	adds	r4, r5, r4
 8008ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ada:	f080 8107 	bcs.w	8008cec <__udivmoddi4+0x290>
 8008ade:	45a4      	cmp	ip, r4
 8008ae0:	f240 8104 	bls.w	8008cec <__udivmoddi4+0x290>
 8008ae4:	3802      	subs	r0, #2
 8008ae6:	442c      	add	r4, r5
 8008ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008aec:	eba4 040c 	sub.w	r4, r4, ip
 8008af0:	2700      	movs	r7, #0
 8008af2:	b11e      	cbz	r6, 8008afc <__udivmoddi4+0xa0>
 8008af4:	40d4      	lsrs	r4, r2
 8008af6:	2300      	movs	r3, #0
 8008af8:	e9c6 4300 	strd	r4, r3, [r6]
 8008afc:	4639      	mov	r1, r7
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	428b      	cmp	r3, r1
 8008b04:	d909      	bls.n	8008b1a <__udivmoddi4+0xbe>
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	f000 80eb 	beq.w	8008ce2 <__udivmoddi4+0x286>
 8008b0c:	2700      	movs	r7, #0
 8008b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8008b12:	4638      	mov	r0, r7
 8008b14:	4639      	mov	r1, r7
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	fab3 f783 	clz	r7, r3
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	d147      	bne.n	8008bb2 <__udivmoddi4+0x156>
 8008b22:	428b      	cmp	r3, r1
 8008b24:	d302      	bcc.n	8008b2c <__udivmoddi4+0xd0>
 8008b26:	4282      	cmp	r2, r0
 8008b28:	f200 80fa 	bhi.w	8008d20 <__udivmoddi4+0x2c4>
 8008b2c:	1a84      	subs	r4, r0, r2
 8008b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8008b32:	2001      	movs	r0, #1
 8008b34:	4698      	mov	r8, r3
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	d0e0      	beq.n	8008afc <__udivmoddi4+0xa0>
 8008b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8008b3e:	e7dd      	b.n	8008afc <__udivmoddi4+0xa0>
 8008b40:	b902      	cbnz	r2, 8008b44 <__udivmoddi4+0xe8>
 8008b42:	deff      	udf	#255	; 0xff
 8008b44:	fab2 f282 	clz	r2, r2
 8008b48:	2a00      	cmp	r2, #0
 8008b4a:	f040 808f 	bne.w	8008c6c <__udivmoddi4+0x210>
 8008b4e:	1b49      	subs	r1, r1, r5
 8008b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b54:	fa1f f885 	uxth.w	r8, r5
 8008b58:	2701      	movs	r7, #1
 8008b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8008b5e:	0c23      	lsrs	r3, r4, #16
 8008b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8008b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b68:	fb08 f10c 	mul.w	r1, r8, ip
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	d907      	bls.n	8008b80 <__udivmoddi4+0x124>
 8008b70:	18eb      	adds	r3, r5, r3
 8008b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008b76:	d202      	bcs.n	8008b7e <__udivmoddi4+0x122>
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	f200 80cd 	bhi.w	8008d18 <__udivmoddi4+0x2bc>
 8008b7e:	4684      	mov	ip, r0
 8008b80:	1a59      	subs	r1, r3, r1
 8008b82:	b2a3      	uxth	r3, r4
 8008b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8008b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8008b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b90:	fb08 f800 	mul.w	r8, r8, r0
 8008b94:	45a0      	cmp	r8, r4
 8008b96:	d907      	bls.n	8008ba8 <__udivmoddi4+0x14c>
 8008b98:	192c      	adds	r4, r5, r4
 8008b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b9e:	d202      	bcs.n	8008ba6 <__udivmoddi4+0x14a>
 8008ba0:	45a0      	cmp	r8, r4
 8008ba2:	f200 80b6 	bhi.w	8008d12 <__udivmoddi4+0x2b6>
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	eba4 0408 	sub.w	r4, r4, r8
 8008bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008bb0:	e79f      	b.n	8008af2 <__udivmoddi4+0x96>
 8008bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8008bb6:	40bb      	lsls	r3, r7
 8008bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8008bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8008bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8008bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8008bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008bd0:	4325      	orrs	r5, r4
 8008bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8008bd6:	0c2c      	lsrs	r4, r5, #16
 8008bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8008bdc:	fa1f fa8e 	uxth.w	sl, lr
 8008be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008be4:	fb09 f40a 	mul.w	r4, r9, sl
 8008be8:	429c      	cmp	r4, r3
 8008bea:	fa02 f207 	lsl.w	r2, r2, r7
 8008bee:	fa00 f107 	lsl.w	r1, r0, r7
 8008bf2:	d90b      	bls.n	8008c0c <__udivmoddi4+0x1b0>
 8008bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8008bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8008bfc:	f080 8087 	bcs.w	8008d0e <__udivmoddi4+0x2b2>
 8008c00:	429c      	cmp	r4, r3
 8008c02:	f240 8084 	bls.w	8008d0e <__udivmoddi4+0x2b2>
 8008c06:	f1a9 0902 	sub.w	r9, r9, #2
 8008c0a:	4473      	add	r3, lr
 8008c0c:	1b1b      	subs	r3, r3, r4
 8008c0e:	b2ad      	uxth	r5, r5
 8008c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c14:	fb08 3310 	mls	r3, r8, r0, r3
 8008c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008c20:	45a2      	cmp	sl, r4
 8008c22:	d908      	bls.n	8008c36 <__udivmoddi4+0x1da>
 8008c24:	eb1e 0404 	adds.w	r4, lr, r4
 8008c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2c:	d26b      	bcs.n	8008d06 <__udivmoddi4+0x2aa>
 8008c2e:	45a2      	cmp	sl, r4
 8008c30:	d969      	bls.n	8008d06 <__udivmoddi4+0x2aa>
 8008c32:	3802      	subs	r0, #2
 8008c34:	4474      	add	r4, lr
 8008c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8008c3e:	eba4 040a 	sub.w	r4, r4, sl
 8008c42:	454c      	cmp	r4, r9
 8008c44:	46c2      	mov	sl, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	d354      	bcc.n	8008cf4 <__udivmoddi4+0x298>
 8008c4a:	d051      	beq.n	8008cf0 <__udivmoddi4+0x294>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	d069      	beq.n	8008d24 <__udivmoddi4+0x2c8>
 8008c50:	ebb1 050a 	subs.w	r5, r1, sl
 8008c54:	eb64 0403 	sbc.w	r4, r4, r3
 8008c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008c5c:	40fd      	lsrs	r5, r7
 8008c5e:	40fc      	lsrs	r4, r7
 8008c60:	ea4c 0505 	orr.w	r5, ip, r5
 8008c64:	e9c6 5400 	strd	r5, r4, [r6]
 8008c68:	2700      	movs	r7, #0
 8008c6a:	e747      	b.n	8008afc <__udivmoddi4+0xa0>
 8008c6c:	f1c2 0320 	rsb	r3, r2, #32
 8008c70:	fa20 f703 	lsr.w	r7, r0, r3
 8008c74:	4095      	lsls	r5, r2
 8008c76:	fa01 f002 	lsl.w	r0, r1, r2
 8008c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8008c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c82:	4338      	orrs	r0, r7
 8008c84:	0c01      	lsrs	r1, r0, #16
 8008c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8008c8a:	fa1f f885 	uxth.w	r8, r5
 8008c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8008c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c96:	fb07 f308 	mul.w	r3, r7, r8
 8008c9a:	428b      	cmp	r3, r1
 8008c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8008ca0:	d907      	bls.n	8008cb2 <__udivmoddi4+0x256>
 8008ca2:	1869      	adds	r1, r5, r1
 8008ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8008ca8:	d22f      	bcs.n	8008d0a <__udivmoddi4+0x2ae>
 8008caa:	428b      	cmp	r3, r1
 8008cac:	d92d      	bls.n	8008d0a <__udivmoddi4+0x2ae>
 8008cae:	3f02      	subs	r7, #2
 8008cb0:	4429      	add	r1, r5
 8008cb2:	1acb      	subs	r3, r1, r3
 8008cb4:	b281      	uxth	r1, r0
 8008cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8008cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8008cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cc2:	fb00 f308 	mul.w	r3, r0, r8
 8008cc6:	428b      	cmp	r3, r1
 8008cc8:	d907      	bls.n	8008cda <__udivmoddi4+0x27e>
 8008cca:	1869      	adds	r1, r5, r1
 8008ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cd0:	d217      	bcs.n	8008d02 <__udivmoddi4+0x2a6>
 8008cd2:	428b      	cmp	r3, r1
 8008cd4:	d915      	bls.n	8008d02 <__udivmoddi4+0x2a6>
 8008cd6:	3802      	subs	r0, #2
 8008cd8:	4429      	add	r1, r5
 8008cda:	1ac9      	subs	r1, r1, r3
 8008cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008ce0:	e73b      	b.n	8008b5a <__udivmoddi4+0xfe>
 8008ce2:	4637      	mov	r7, r6
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	e709      	b.n	8008afc <__udivmoddi4+0xa0>
 8008ce8:	4607      	mov	r7, r0
 8008cea:	e6e7      	b.n	8008abc <__udivmoddi4+0x60>
 8008cec:	4618      	mov	r0, r3
 8008cee:	e6fb      	b.n	8008ae8 <__udivmoddi4+0x8c>
 8008cf0:	4541      	cmp	r1, r8
 8008cf2:	d2ab      	bcs.n	8008c4c <__udivmoddi4+0x1f0>
 8008cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8008cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8008cfc:	3801      	subs	r0, #1
 8008cfe:	4613      	mov	r3, r2
 8008d00:	e7a4      	b.n	8008c4c <__udivmoddi4+0x1f0>
 8008d02:	4660      	mov	r0, ip
 8008d04:	e7e9      	b.n	8008cda <__udivmoddi4+0x27e>
 8008d06:	4618      	mov	r0, r3
 8008d08:	e795      	b.n	8008c36 <__udivmoddi4+0x1da>
 8008d0a:	4667      	mov	r7, ip
 8008d0c:	e7d1      	b.n	8008cb2 <__udivmoddi4+0x256>
 8008d0e:	4681      	mov	r9, r0
 8008d10:	e77c      	b.n	8008c0c <__udivmoddi4+0x1b0>
 8008d12:	3802      	subs	r0, #2
 8008d14:	442c      	add	r4, r5
 8008d16:	e747      	b.n	8008ba8 <__udivmoddi4+0x14c>
 8008d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d1c:	442b      	add	r3, r5
 8008d1e:	e72f      	b.n	8008b80 <__udivmoddi4+0x124>
 8008d20:	4638      	mov	r0, r7
 8008d22:	e708      	b.n	8008b36 <__udivmoddi4+0xda>
 8008d24:	4637      	mov	r7, r6
 8008d26:	e6e9      	b.n	8008afc <__udivmoddi4+0xa0>

08008d28 <__aeabi_idiv0>:
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop

08008d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d30:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <HAL_Init+0x40>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <HAL_Init+0x40>)
 8008d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <HAL_Init+0x40>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <HAL_Init+0x40>)
 8008d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d48:	4b08      	ldr	r3, [pc, #32]	; (8008d6c <HAL_Init+0x40>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a07      	ldr	r2, [pc, #28]	; (8008d6c <HAL_Init+0x40>)
 8008d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d54:	2003      	movs	r0, #3
 8008d56:	f001 f96b 	bl	800a030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f000 f808 	bl	8008d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d60:	f007 f86c 	bl	800fe3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40023c00 	.word	0x40023c00

08008d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d78:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <HAL_InitTick+0x54>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <HAL_InitTick+0x58>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	4619      	mov	r1, r3
 8008d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 f983 	bl	800a09a <HAL_SYSTICK_Config>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e00e      	b.n	8008dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d80a      	bhi.n	8008dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008da4:	2200      	movs	r2, #0
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	f001 f94b 	bl	800a046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008db0:	4a06      	ldr	r2, [pc, #24]	; (8008dcc <HAL_InitTick+0x5c>)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e000      	b.n	8008dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	2000002c 	.word	0x2000002c
 8008dc8:	20000004 	.word	0x20000004
 8008dcc:	20000000 	.word	0x20000000

08008dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <HAL_IncTick+0x20>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <HAL_IncTick+0x24>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4413      	add	r3, r2
 8008de0:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <HAL_IncTick+0x24>)
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000004 	.word	0x20000004
 8008df4:	200001f0 	.word	0x200001f0

08008df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_GetTick+0x14>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	200001f0 	.word	0x200001f0

08008e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e18:	f7ff ffee 	bl	8008df8 <HAL_GetTick>
 8008e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d005      	beq.n	8008e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e2a:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <HAL_Delay+0x40>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e36:	bf00      	nop
 8008e38:	f7ff ffde 	bl	8008df8 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d8f7      	bhi.n	8008e38 <HAL_Delay+0x28>
  {
  }
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000004 	.word	0x20000004

08008e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e033      	b.n	8008ed2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f005 fb24 	bl	800e4c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d118      	bne.n	8008ec4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e9a:	f023 0302 	bic.w	r3, r3, #2
 8008e9e:	f043 0202 	orr.w	r2, r3, #2
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa5a 	bl	8009360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	f043 0201 	orr.w	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8008ec2:	e001      	b.n	8008ec8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <HAL_ADC_Start_DMA+0x1e>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e0cc      	b.n	8009094 <HAL_ADC_Start_DMA+0x1b8>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d018      	beq.n	8008f42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0201 	orr.w	r2, r2, #1
 8008f1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f20:	4b5e      	ldr	r3, [pc, #376]	; (800909c <HAL_ADC_Start_DMA+0x1c0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a5e      	ldr	r2, [pc, #376]	; (80090a0 <HAL_ADC_Start_DMA+0x1c4>)
 8008f26:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2a:	0c9a      	lsrs	r2, r3, #18
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f34:	e002      	b.n	8008f3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f9      	bne.n	8008f36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	f040 80a0 	bne.w	8009092 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f5a:	f023 0301 	bic.w	r3, r3, #1
 8008f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f90:	d106      	bne.n	8008fa0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f96:	f023 0206 	bic.w	r2, r3, #6
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8008f9e:	e002      	b.n	8008fa6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008fae:	4b3d      	ldr	r3, [pc, #244]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 8008fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	4a3c      	ldr	r2, [pc, #240]	; (80090a8 <HAL_ADC_Start_DMA+0x1cc>)
 8008fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	4a3b      	ldr	r2, [pc, #236]	; (80090ac <HAL_ADC_Start_DMA+0x1d0>)
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	4a3a      	ldr	r2, [pc, #232]	; (80090b0 <HAL_ADC_Start_DMA+0x1d4>)
 8008fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	334c      	adds	r3, #76	; 0x4c
 8008ffe:	4619      	mov	r1, r3
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f001 f904 	bl	800a210 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	2b00      	cmp	r3, #0
 8009012:	d12a      	bne.n	800906a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <HAL_ADC_Start_DMA+0x1d8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d015      	beq.n	800904a <HAL_ADC_Start_DMA+0x16e>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <HAL_ADC_Start_DMA+0x1dc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d105      	bne.n	8009034 <HAL_ADC_Start_DMA+0x158>
 8009028:	4b1e      	ldr	r3, [pc, #120]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f003 031f 	and.w	r3, r3, #31
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a20      	ldr	r2, [pc, #128]	; (80090bc <HAL_ADC_Start_DMA+0x1e0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d129      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
 800903e:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f003 031f 	and.w	r3, r3, #31
 8009046:	2b0f      	cmp	r3, #15
 8009048:	d823      	bhi.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d11c      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	e013      	b.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a11      	ldr	r2, [pc, #68]	; (80090b4 <HAL_ADC_Start_DMA+0x1d8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d10e      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d107      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009090:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	2000002c 	.word	0x2000002c
 80090a0:	431bde83 	.word	0x431bde83
 80090a4:	40012300 	.word	0x40012300
 80090a8:	08009559 	.word	0x08009559
 80090ac:	08009613 	.word	0x08009613
 80090b0:	0800962f 	.word	0x0800962f
 80090b4:	40012000 	.word	0x40012000
 80090b8:	40012100 	.word	0x40012100
 80090bc:	40012200 	.word	0x40012200

080090c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_ADC_ConfigChannel+0x1c>
 8009114:	2302      	movs	r3, #2
 8009116:	e113      	b.n	8009340 <HAL_ADC_ConfigChannel+0x244>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b09      	cmp	r3, #9
 8009126:	d925      	bls.n	8009174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68d9      	ldr	r1, [r3, #12]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	461a      	mov	r2, r3
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	3b1e      	subs	r3, #30
 800913e:	2207      	movs	r2, #7
 8009140:	fa02 f303 	lsl.w	r3, r2, r3
 8009144:	43da      	mvns	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	400a      	ands	r2, r1
 800914c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68d9      	ldr	r1, [r3, #12]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	4618      	mov	r0, r3
 8009160:	4603      	mov	r3, r0
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4403      	add	r3, r0
 8009166:	3b1e      	subs	r3, #30
 8009168:	409a      	lsls	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	e022      	b.n	80091ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6919      	ldr	r1, [r3, #16]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	4613      	mov	r3, r2
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	4413      	add	r3, r2
 8009188:	2207      	movs	r2, #7
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	43da      	mvns	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	400a      	ands	r2, r1
 8009196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6919      	ldr	r1, [r3, #16]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	4618      	mov	r0, r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4403      	add	r3, r0
 80091b0:	409a      	lsls	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d824      	bhi.n	800920c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	3b05      	subs	r3, #5
 80091d4:	221f      	movs	r2, #31
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	43da      	mvns	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	400a      	ands	r2, r1
 80091e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4618      	mov	r0, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	3b05      	subs	r3, #5
 80091fe:	fa00 f203 	lsl.w	r2, r0, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	635a      	str	r2, [r3, #52]	; 0x34
 800920a:	e04c      	b.n	80092a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b0c      	cmp	r3, #12
 8009212:	d824      	bhi.n	800925e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	3b23      	subs	r3, #35	; 0x23
 8009226:	221f      	movs	r2, #31
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	43da      	mvns	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	400a      	ands	r2, r1
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	4618      	mov	r0, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	3b23      	subs	r3, #35	; 0x23
 8009250:	fa00 f203 	lsl.w	r2, r0, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	631a      	str	r2, [r3, #48]	; 0x30
 800925c:	e023      	b.n	80092a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	3b41      	subs	r3, #65	; 0x41
 8009270:	221f      	movs	r2, #31
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
 8009276:	43da      	mvns	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	400a      	ands	r2, r1
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	4618      	mov	r0, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	3b41      	subs	r3, #65	; 0x41
 800929a:	fa00 f203 	lsl.w	r2, r0, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092a6:	4b29      	ldr	r3, [pc, #164]	; (800934c <HAL_ADC_ConfigChannel+0x250>)
 80092a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a28      	ldr	r2, [pc, #160]	; (8009350 <HAL_ADC_ConfigChannel+0x254>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d10f      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x1d8>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b12      	cmp	r3, #18
 80092ba:	d10b      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1d      	ldr	r2, [pc, #116]	; (8009350 <HAL_ADC_ConfigChannel+0x254>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d12b      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <HAL_ADC_ConfigChannel+0x258>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <HAL_ADC_ConfigChannel+0x1f4>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b11      	cmp	r3, #17
 80092ee:	d122      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <HAL_ADC_ConfigChannel+0x258>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d111      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009312:	4b11      	ldr	r3, [pc, #68]	; (8009358 <HAL_ADC_ConfigChannel+0x25c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a11      	ldr	r2, [pc, #68]	; (800935c <HAL_ADC_ConfigChannel+0x260>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	0c9a      	lsrs	r2, r3, #18
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009328:	e002      	b.n	8009330 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	3b01      	subs	r3, #1
 800932e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f9      	bne.n	800932a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40012300 	.word	0x40012300
 8009350:	40012000 	.word	0x40012000
 8009354:	10000012 	.word	0x10000012
 8009358:	2000002c 	.word	0x2000002c
 800935c:	431bde83 	.word	0x431bde83

08009360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009368:	4b79      	ldr	r3, [pc, #484]	; (8009550 <ADC_Init+0x1f0>)
 800936a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	431a      	orrs	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	021a      	lsls	r2, r3, #8
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80093b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6859      	ldr	r1, [r3, #4]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6899      	ldr	r1, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	4a58      	ldr	r2, [pc, #352]	; (8009554 <ADC_Init+0x1f4>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d022      	beq.n	800943e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6899      	ldr	r1, [r3, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6899      	ldr	r1, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	609a      	str	r2, [r3, #8]
 800943c:	e00f      	b.n	800945e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800944c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800945c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0202 	bic.w	r2, r2, #2
 800946c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6899      	ldr	r1, [r3, #8]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7e1b      	ldrb	r3, [r3, #24]
 8009478:	005a      	lsls	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01b      	beq.n	80094c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800949a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80094aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6859      	ldr	r1, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	3b01      	subs	r3, #1
 80094b8:	035a      	lsls	r2, r3, #13
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
 80094c2:	e007      	b.n	80094d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80094e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	051a      	lsls	r2, r3, #20
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6899      	ldr	r1, [r3, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009516:	025a      	lsls	r2, r3, #9
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800952e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6899      	ldr	r1, [r3, #8]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	029a      	lsls	r2, r3, #10
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	430a      	orrs	r2, r1
 8009542:	609a      	str	r2, [r3, #8]
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	40012300 	.word	0x40012300
 8009554:	0f000001 	.word	0x0f000001

08009558 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800956e:	2b00      	cmp	r3, #0
 8009570:	d13c      	bne.n	80095ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d12b      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009590:	2b00      	cmp	r3, #0
 8009592:	d127      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d119      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0220 	bic.w	r2, r2, #32
 80095be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d105      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	f043 0201 	orr.w	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fd6b 	bl	80090c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095ea:	e00e      	b.n	800960a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fd75 	bl	80090e8 <HAL_ADC_ErrorCallback>
}
 80095fe:	e004      	b.n	800960a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff fd57 	bl	80090d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2240      	movs	r2, #64	; 0x40
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	f043 0204 	orr.w	r2, r3, #4
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fd4a 	bl	80090e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e0ed      	b.n	800984a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d102      	bne.n	8009680 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f005 fab4 	bl	800ebe8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0202 	bic.w	r2, r2, #2
 800968e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009690:	f7ff fbb2 	bl	8008df8 <HAL_GetTick>
 8009694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009696:	e012      	b.n	80096be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009698:	f7ff fbae 	bl	8008df8 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b0a      	cmp	r3, #10
 80096a4:	d90b      	bls.n	80096be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2205      	movs	r2, #5
 80096b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e0c5      	b.n	800984a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096dc:	f7ff fb8c 	bl	8008df8 <HAL_GetTick>
 80096e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80096e2:	e012      	b.n	800970a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096e4:	f7ff fb88 	bl	8008df8 <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	2b0a      	cmp	r3, #10
 80096f0:	d90b      	bls.n	800970a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2205      	movs	r2, #5
 8009702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e09f      	b.n	800984a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0e5      	beq.n	80096e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7e1b      	ldrb	r3, [r3, #24]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d108      	bne.n	8009732 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	e007      	b.n	8009742 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	7e5b      	ldrb	r3, [r3, #25]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d108      	bne.n	800975c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	e007      	b.n	800976c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800976a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7e9b      	ldrb	r3, [r3, #26]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d108      	bne.n	8009786 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0220 	orr.w	r2, r2, #32
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e007      	b.n	8009796 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0220 	bic.w	r2, r2, #32
 8009794:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	7edb      	ldrb	r3, [r3, #27]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d108      	bne.n	80097b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0210 	bic.w	r2, r2, #16
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	e007      	b.n	80097c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0210 	orr.w	r2, r2, #16
 80097be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7f1b      	ldrb	r3, [r3, #28]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d108      	bne.n	80097da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0208 	orr.w	r2, r2, #8
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	e007      	b.n	80097ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0208 	bic.w	r2, r2, #8
 80097e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7f5b      	ldrb	r3, [r3, #29]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d108      	bne.n	8009804 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0204 	orr.w	r2, r2, #4
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e007      	b.n	8009814 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0204 	bic.w	r2, r2, #4
 8009812:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	ea42 0103 	orr.w	r1, r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	1e5a      	subs	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009852:	b480      	push	{r7}
 8009854:	b087      	sub	sp, #28
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009866:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d003      	beq.n	8009876 <HAL_CAN_GetRxMessage+0x24>
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	2b02      	cmp	r3, #2
 8009872:	f040 80f4 	bne.w	8009a5e <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10e      	bne.n	800989a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d116      	bne.n	80098b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e0e8      	b.n	8009a6c <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f003 0303 	and.w	r3, r3, #3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d107      	bne.n	80098b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e0d9      	b.n	8009a6c <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	331b      	adds	r3, #27
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	4413      	add	r3, r2
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0204 	and.w	r2, r3, #4
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10c      	bne.n	80098f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	331b      	adds	r3, #27
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	4413      	add	r3, r2
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	0d5b      	lsrs	r3, r3, #21
 80098e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e00b      	b.n	8009908 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	331b      	adds	r3, #27
 80098f8:	011b      	lsls	r3, r3, #4
 80098fa:	4413      	add	r3, r2
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	08db      	lsrs	r3, r3, #3
 8009900:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	331b      	adds	r3, #27
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	4413      	add	r3, r2
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	085b      	lsrs	r3, r3, #1
 8009918:	f003 0201 	and.w	r2, r3, #1
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	331b      	adds	r3, #27
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	4413      	add	r3, r2
 800992c:	3304      	adds	r3, #4
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 020f 	and.w	r2, r3, #15
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	331b      	adds	r3, #27
 8009940:	011b      	lsls	r3, r3, #4
 8009942:	4413      	add	r3, r2
 8009944:	3304      	adds	r3, #4
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	0a1b      	lsrs	r3, r3, #8
 800994a:	b2da      	uxtb	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	331b      	adds	r3, #27
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	4413      	add	r3, r2
 800995c:	3304      	adds	r3, #4
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	0c1b      	lsrs	r3, r3, #16
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4413      	add	r3, r2
 8009972:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	b2da      	uxtb	r2, r3
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	011b      	lsls	r3, r3, #4
 8009986:	4413      	add	r3, r2
 8009988:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	0a1a      	lsrs	r2, r3, #8
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	b2d2      	uxtb	r2, r2
 8009996:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	0c1a      	lsrs	r2, r3, #16
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	3302      	adds	r3, #2
 80099ae:	b2d2      	uxtb	r2, r2
 80099b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	0e1a      	lsrs	r2, r3, #24
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	3303      	adds	r3, #3
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	3304      	adds	r3, #4
 80099e0:	b2d2      	uxtb	r2, r2
 80099e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	0a1a      	lsrs	r2, r3, #8
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	3305      	adds	r3, #5
 80099fa:	b2d2      	uxtb	r2, r2
 80099fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	011b      	lsls	r3, r3, #4
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	0c1a      	lsrs	r2, r3, #16
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	3306      	adds	r3, #6
 8009a14:	b2d2      	uxtb	r2, r2
 8009a16:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	0e1a      	lsrs	r2, r3, #24
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	3307      	adds	r3, #7
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d108      	bne.n	8009a4a <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0220 	orr.w	r2, r2, #32
 8009a46:	60da      	str	r2, [r3, #12]
 8009a48:	e007      	b.n	8009a5a <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	691a      	ldr	r2, [r3, #16]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0220 	orr.w	r2, r2, #32
 8009a58:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e006      	b.n	8009a6c <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
  }
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08a      	sub	sp, #40	; 0x28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009a80:	2300      	movs	r3, #0
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d07c      	beq.n	8009bb8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d023      	beq.n	8009b10 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2201      	movs	r2, #1
 8009ace:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f005 f8dc 	bl	800ec98 <HAL_CAN_TxMailbox0CompleteCallback>
 8009ae0:	e016      	b.n	8009b10 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009af2:	627b      	str	r3, [r7, #36]	; 0x24
 8009af4:	e00c      	b.n	8009b10 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	f003 0308 	and.w	r3, r3, #8
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
 8009b08:	e002      	b.n	8009b10 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f965 	bl	8009dda <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d024      	beq.n	8009b64 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f005 f8c2 	bl	800ecb8 <HAL_CAN_TxMailbox1CompleteCallback>
 8009b34:	e016      	b.n	8009b64 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
 8009b48:	e00c      	b.n	8009b64 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5c:	e002      	b.n	8009b64 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f945 	bl	8009dee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d024      	beq.n	8009bb8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f005 f8a8 	bl	800ecd8 <HAL_CAN_TxMailbox2CompleteCallback>
 8009b88:	e016      	b.n	8009bb8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d004      	beq.n	8009b9e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9c:	e00c      	b.n	8009bb8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
 8009bb0:	e002      	b.n	8009bb8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f925 	bl	8009e02 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	f003 0308 	and.w	r3, r3, #8
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00c      	beq.n	8009bdc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f003 0310 	and.w	r3, r3, #16
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2210      	movs	r2, #16
 8009bda:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	f003 0304 	and.w	r3, r3, #4
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f003 0308 	and.w	r3, r3, #8
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2208      	movs	r2, #8
 8009bf6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f90c 	bl	8009e16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d009      	beq.n	8009c1c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f005 f86e 	bl	800ecf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00c      	beq.n	8009c40 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	f003 0320 	and.w	r3, r3, #32
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00b      	beq.n	8009c62 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2208      	movs	r2, #8
 8009c5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f8ee 	bl	8009e3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	f003 0310 	and.w	r3, r3, #16
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d009      	beq.n	8009c80 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f8d5 	bl	8009e2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	f003 0310 	and.w	r3, r3, #16
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d006      	beq.n	8009ca2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2210      	movs	r2, #16
 8009c9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f8d8 	bl	8009e52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	f003 0308 	and.w	r3, r3, #8
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d006      	beq.n	8009cc4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2208      	movs	r2, #8
 8009cbc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f8d1 	bl	8009e66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d075      	beq.n	8009dba <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d06c      	beq.n	8009db2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d008      	beq.n	8009d10 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	f043 0302 	orr.w	r3, r3, #2
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d008      	beq.n	8009d2c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	f043 0304 	orr.w	r3, r3, #4
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d03d      	beq.n	8009db2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d038      	beq.n	8009db2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d46:	2b30      	cmp	r3, #48	; 0x30
 8009d48:	d017      	beq.n	8009d7a <HAL_CAN_IRQHandler+0x302>
 8009d4a:	2b30      	cmp	r3, #48	; 0x30
 8009d4c:	d804      	bhi.n	8009d58 <HAL_CAN_IRQHandler+0x2e0>
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d009      	beq.n	8009d66 <HAL_CAN_IRQHandler+0x2ee>
 8009d52:	2b20      	cmp	r3, #32
 8009d54:	d00c      	beq.n	8009d70 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009d56:	e024      	b.n	8009da2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009d58:	2b50      	cmp	r3, #80	; 0x50
 8009d5a:	d018      	beq.n	8009d8e <HAL_CAN_IRQHandler+0x316>
 8009d5c:	2b60      	cmp	r3, #96	; 0x60
 8009d5e:	d01b      	beq.n	8009d98 <HAL_CAN_IRQHandler+0x320>
 8009d60:	2b40      	cmp	r3, #64	; 0x40
 8009d62:	d00f      	beq.n	8009d84 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009d64:	e01d      	b.n	8009da2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	f043 0308 	orr.w	r3, r3, #8
 8009d6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d6e:	e018      	b.n	8009da2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	f043 0310 	orr.w	r3, r3, #16
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d78:	e013      	b.n	8009da2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	f043 0320 	orr.w	r3, r3, #32
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d82:	e00e      	b.n	8009da2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d8c:	e009      	b.n	8009da2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d96:	e004      	b.n	8009da2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009da0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	699a      	ldr	r2, [r3, #24]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009db0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2204      	movs	r2, #4
 8009db8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d008      	beq.n	8009dd2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f854 	bl	8009e7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009dd2:	bf00      	nop
 8009dd4:	3728      	adds	r7, #40	; 0x28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
	...

08009e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ea0:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009eac:	4013      	ands	r3, r2
 8009eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ec2:	4a04      	ldr	r2, [pc, #16]	; (8009ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	60d3      	str	r3, [r2, #12]
}
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	e000ed00 	.word	0xe000ed00

08009ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009edc:	4b04      	ldr	r3, [pc, #16]	; (8009ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	0a1b      	lsrs	r3, r3, #8
 8009ee2:	f003 0307 	and.w	r3, r3, #7
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	e000ed00 	.word	0xe000ed00

08009ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	db0b      	blt.n	8009f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	f003 021f 	and.w	r2, r3, #31
 8009f0c:	4907      	ldr	r1, [pc, #28]	; (8009f2c <__NVIC_EnableIRQ+0x38>)
 8009f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f12:	095b      	lsrs	r3, r3, #5
 8009f14:	2001      	movs	r0, #1
 8009f16:	fa00 f202 	lsl.w	r2, r0, r2
 8009f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009f1e:	bf00      	nop
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	e000e100 	.word	0xe000e100

08009f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	6039      	str	r1, [r7, #0]
 8009f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	db0a      	blt.n	8009f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	490c      	ldr	r1, [pc, #48]	; (8009f7c <__NVIC_SetPriority+0x4c>)
 8009f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f4e:	0112      	lsls	r2, r2, #4
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	440b      	add	r3, r1
 8009f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f58:	e00a      	b.n	8009f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	4908      	ldr	r1, [pc, #32]	; (8009f80 <__NVIC_SetPriority+0x50>)
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	f003 030f 	and.w	r3, r3, #15
 8009f66:	3b04      	subs	r3, #4
 8009f68:	0112      	lsls	r2, r2, #4
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	761a      	strb	r2, [r3, #24]
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	e000e100 	.word	0xe000e100
 8009f80:	e000ed00 	.word	0xe000ed00

08009f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b089      	sub	sp, #36	; 0x24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f003 0307 	and.w	r3, r3, #7
 8009f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	f1c3 0307 	rsb	r3, r3, #7
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	bf28      	it	cs
 8009fa2:	2304      	movcs	r3, #4
 8009fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	2b06      	cmp	r3, #6
 8009fac:	d902      	bls.n	8009fb4 <NVIC_EncodePriority+0x30>
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	3b03      	subs	r3, #3
 8009fb2:	e000      	b.n	8009fb6 <NVIC_EncodePriority+0x32>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc2:	43da      	mvns	r2, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	401a      	ands	r2, r3
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd6:	43d9      	mvns	r1, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fdc:	4313      	orrs	r3, r2
         );
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3724      	adds	r7, #36	; 0x24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
	...

08009fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ffc:	d301      	bcc.n	800a002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009ffe:	2301      	movs	r3, #1
 800a000:	e00f      	b.n	800a022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a002:	4a0a      	ldr	r2, [pc, #40]	; (800a02c <SysTick_Config+0x40>)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3b01      	subs	r3, #1
 800a008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a00a:	210f      	movs	r1, #15
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295
 800a010:	f7ff ff8e 	bl	8009f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <SysTick_Config+0x40>)
 800a016:	2200      	movs	r2, #0
 800a018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a01a:	4b04      	ldr	r3, [pc, #16]	; (800a02c <SysTick_Config+0x40>)
 800a01c:	2207      	movs	r2, #7
 800a01e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	e000e010 	.word	0xe000e010

0800a030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7ff ff29 	bl	8009e90 <__NVIC_SetPriorityGrouping>
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a046:	b580      	push	{r7, lr}
 800a048:	b086      	sub	sp, #24
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	4603      	mov	r3, r0
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	607a      	str	r2, [r7, #4]
 800a052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a058:	f7ff ff3e 	bl	8009ed8 <__NVIC_GetPriorityGrouping>
 800a05c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	6978      	ldr	r0, [r7, #20]
 800a064:	f7ff ff8e 	bl	8009f84 <NVIC_EncodePriority>
 800a068:	4602      	mov	r2, r0
 800a06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff ff5d 	bl	8009f30 <__NVIC_SetPriority>
}
 800a076:	bf00      	nop
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	4603      	mov	r3, r0
 800a086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff ff31 	bl	8009ef4 <__NVIC_EnableIRQ>
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff ffa2 	bl	8009fec <SysTick_Config>
 800a0a8:	4603      	mov	r3, r0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a0c0:	f7fe fe9a 	bl	8008df8 <HAL_GetTick>
 800a0c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e099      	b.n	800a204 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f022 0201 	bic.w	r2, r2, #1
 800a0ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0f0:	e00f      	b.n	800a112 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a0f2:	f7fe fe81 	bl	8008df8 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	2b05      	cmp	r3, #5
 800a0fe:	d908      	bls.n	800a112 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2220      	movs	r2, #32
 800a104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2203      	movs	r2, #3
 800a10a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e078      	b.n	800a204 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e8      	bne.n	800a0f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4b38      	ldr	r3, [pc, #224]	; (800a20c <HAL_DMA_Init+0x158>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a13e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a14a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	4313      	orrs	r3, r2
 800a162:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d107      	bne.n	800a17c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a174:	4313      	orrs	r3, r2
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4313      	orrs	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f023 0307 	bic.w	r3, r3, #7
 800a192:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d117      	bne.n	800a1d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00e      	beq.n	800a1d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fa99 	bl	800a6f0 <DMA_CheckFifoParam>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d008      	beq.n	800a1d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2240      	movs	r2, #64	; 0x40
 800a1c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e016      	b.n	800a204 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa50 	bl	800a684 <DMA_CalcBaseAndBitshift>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ec:	223f      	movs	r2, #63	; 0x3f
 800a1ee:	409a      	lsls	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	f010803f 	.word	0xf010803f

0800a210 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a226:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <HAL_DMA_Start_IT+0x26>
 800a232:	2302      	movs	r3, #2
 800a234:	e048      	b.n	800a2c8 <HAL_DMA_Start_IT+0xb8>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b01      	cmp	r3, #1
 800a248:	d137      	bne.n	800a2ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2202      	movs	r2, #2
 800a24e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	68b9      	ldr	r1, [r7, #8]
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 f9e2 	bl	800a628 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a268:	223f      	movs	r2, #63	; 0x3f
 800a26a:	409a      	lsls	r2, r3
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0216 	orr.w	r2, r2, #22
 800a27e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	695a      	ldr	r2, [r3, #20]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a28e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0208 	orr.w	r2, r2, #8
 800a2a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0201 	orr.w	r2, r2, #1
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	e005      	b.n	800a2c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d004      	beq.n	800a2ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2280      	movs	r2, #128	; 0x80
 800a2e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e00c      	b.n	800a308 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0201 	bic.w	r2, r2, #1
 800a304:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a320:	4b92      	ldr	r3, [pc, #584]	; (800a56c <HAL_DMA_IRQHandler+0x258>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a92      	ldr	r2, [pc, #584]	; (800a570 <HAL_DMA_IRQHandler+0x25c>)
 800a326:	fba2 2303 	umull	r2, r3, r2, r3
 800a32a:	0a9b      	lsrs	r3, r3, #10
 800a32c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a332:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a33e:	2208      	movs	r2, #8
 800a340:	409a      	lsls	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	4013      	ands	r3, r2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d01a      	beq.n	800a380 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b00      	cmp	r3, #0
 800a356:	d013      	beq.n	800a380 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 0204 	bic.w	r2, r2, #4
 800a366:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a36c:	2208      	movs	r2, #8
 800a36e:	409a      	lsls	r2, r3
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a378:	f043 0201 	orr.w	r2, r3, #1
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a384:	2201      	movs	r2, #1
 800a386:	409a      	lsls	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4013      	ands	r3, r2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d012      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00b      	beq.n	800a3b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	409a      	lsls	r2, r3
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ae:	f043 0202 	orr.w	r2, r3, #2
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ba:	2204      	movs	r2, #4
 800a3bc:	409a      	lsls	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d012      	beq.n	800a3ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0302 	and.w	r3, r3, #2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d8:	2204      	movs	r2, #4
 800a3da:	409a      	lsls	r2, r3
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e4:	f043 0204 	orr.w	r2, r3, #4
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f0:	2210      	movs	r2, #16
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d043      	beq.n	800a484 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0308 	and.w	r3, r3, #8
 800a406:	2b00      	cmp	r3, #0
 800a408:	d03c      	beq.n	800a484 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a40e:	2210      	movs	r2, #16
 800a410:	409a      	lsls	r2, r3
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d018      	beq.n	800a456 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d108      	bne.n	800a444 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	d024      	beq.n	800a484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
 800a442:	e01f      	b.n	800a484 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01b      	beq.n	800a484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	4798      	blx	r3
 800a454:	e016      	b.n	800a484 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a460:	2b00      	cmp	r3, #0
 800a462:	d107      	bne.n	800a474 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 0208 	bic.w	r2, r2, #8
 800a472:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a488:	2220      	movs	r2, #32
 800a48a:	409a      	lsls	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4013      	ands	r3, r2
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 808e 	beq.w	800a5b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 8086 	beq.w	800a5b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	409a      	lsls	r2, r3
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	d136      	bne.n	800a52c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 0216 	bic.w	r2, r2, #22
 800a4cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	695a      	ldr	r2, [r3, #20]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d103      	bne.n	800a4ee <HAL_DMA_IRQHandler+0x1da>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d007      	beq.n	800a4fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 0208 	bic.w	r2, r2, #8
 800a4fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a502:	223f      	movs	r2, #63	; 0x3f
 800a504:	409a      	lsls	r2, r3
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d07d      	beq.n	800a61e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
        }
        return;
 800a52a:	e078      	b.n	800a61e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01c      	beq.n	800a574 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d108      	bne.n	800a55a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d030      	beq.n	800a5b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
 800a558:	e02b      	b.n	800a5b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d027      	beq.n	800a5b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	4798      	blx	r3
 800a56a:	e022      	b.n	800a5b2 <HAL_DMA_IRQHandler+0x29e>
 800a56c:	2000002c 	.word	0x2000002c
 800a570:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10f      	bne.n	800a5a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 0210 	bic.w	r2, r2, #16
 800a590:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d032      	beq.n	800a620 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d022      	beq.n	800a60c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2205      	movs	r2, #5
 800a5ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	60bb      	str	r3, [r7, #8]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d307      	bcc.n	800a5fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1f2      	bne.n	800a5de <HAL_DMA_IRQHandler+0x2ca>
 800a5f8:	e000      	b.n	800a5fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a5fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d005      	beq.n	800a620 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
 800a61c:	e000      	b.n	800a620 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a61e:	bf00      	nop
    }
  }
}
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop

0800a628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a644:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	2b40      	cmp	r3, #64	; 0x40
 800a654:	d108      	bne.n	800a668 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a666:	e007      	b.n	800a678 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	60da      	str	r2, [r3, #12]
}
 800a678:	bf00      	nop
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	3b10      	subs	r3, #16
 800a694:	4a14      	ldr	r2, [pc, #80]	; (800a6e8 <DMA_CalcBaseAndBitshift+0x64>)
 800a696:	fba2 2303 	umull	r2, r3, r2, r3
 800a69a:	091b      	lsrs	r3, r3, #4
 800a69c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a69e:	4a13      	ldr	r2, [pc, #76]	; (800a6ec <DMA_CalcBaseAndBitshift+0x68>)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d909      	bls.n	800a6c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a6ba:	f023 0303 	bic.w	r3, r3, #3
 800a6be:	1d1a      	adds	r2, r3, #4
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	659a      	str	r2, [r3, #88]	; 0x58
 800a6c4:	e007      	b.n	800a6d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a6ce:	f023 0303 	bic.w	r3, r3, #3
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	aaaaaaab 	.word	0xaaaaaaab
 800a6ec:	08011710 	.word	0x08011710

0800a6f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d11f      	bne.n	800a74a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d855      	bhi.n	800a7bc <DMA_CheckFifoParam+0xcc>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <DMA_CheckFifoParam+0x28>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a729 	.word	0x0800a729
 800a71c:	0800a73b 	.word	0x0800a73b
 800a720:	0800a729 	.word	0x0800a729
 800a724:	0800a7bd 	.word	0x0800a7bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d045      	beq.n	800a7c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a738:	e042      	b.n	800a7c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a742:	d13f      	bne.n	800a7c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a748:	e03c      	b.n	800a7c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a752:	d121      	bne.n	800a798 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b03      	cmp	r3, #3
 800a758:	d836      	bhi.n	800a7c8 <DMA_CheckFifoParam+0xd8>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <DMA_CheckFifoParam+0x70>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a771 	.word	0x0800a771
 800a764:	0800a777 	.word	0x0800a777
 800a768:	0800a771 	.word	0x0800a771
 800a76c:	0800a789 	.word	0x0800a789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
      break;
 800a774:	e02f      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d024      	beq.n	800a7cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a786:	e021      	b.n	800a7cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a790:	d11e      	bne.n	800a7d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a796:	e01b      	b.n	800a7d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d902      	bls.n	800a7a4 <DMA_CheckFifoParam+0xb4>
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d003      	beq.n	800a7aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a7a2:	e018      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a8:	e015      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00e      	beq.n	800a7d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ba:	e00b      	b.n	800a7d4 <DMA_CheckFifoParam+0xe4>
      break;
 800a7bc:	bf00      	nop
 800a7be:	e00a      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a7c0:	bf00      	nop
 800a7c2:	e008      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a7c4:	bf00      	nop
 800a7c6:	e006      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a7c8:	bf00      	nop
 800a7ca:	e004      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a7cc:	bf00      	nop
 800a7ce:	e002      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      break;   
 800a7d0:	bf00      	nop
 800a7d2:	e000      	b.n	800a7d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a7d4:	bf00      	nop
    }
  } 
  
  return status; 
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b089      	sub	sp, #36	; 0x24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61fb      	str	r3, [r7, #28]
 800a7fe:	e165      	b.n	800aacc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a800:	2201      	movs	r2, #1
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	fa02 f303 	lsl.w	r3, r2, r3
 800a808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4013      	ands	r3, r2
 800a812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	429a      	cmp	r2, r3
 800a81a:	f040 8154 	bne.w	800aac6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d003      	beq.n	800a82e <HAL_GPIO_Init+0x4a>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	2b12      	cmp	r3, #18
 800a82c:	d123      	bne.n	800a876 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	08da      	lsrs	r2, r3, #3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3208      	adds	r2, #8
 800a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	f003 0307 	and.w	r3, r3, #7
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	220f      	movs	r2, #15
 800a846:	fa02 f303 	lsl.w	r3, r2, r3
 800a84a:	43db      	mvns	r3, r3
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	4013      	ands	r3, r2
 800a850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	691a      	ldr	r2, [r3, #16]
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	4313      	orrs	r3, r2
 800a866:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	08da      	lsrs	r2, r3, #3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3208      	adds	r2, #8
 800a870:	69b9      	ldr	r1, [r7, #24]
 800a872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	2203      	movs	r2, #3
 800a882:	fa02 f303 	lsl.w	r3, r2, r3
 800a886:	43db      	mvns	r3, r3
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	4013      	ands	r3, r2
 800a88c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f003 0203 	and.w	r2, r3, #3
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	fa02 f303 	lsl.w	r3, r2, r3
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d00b      	beq.n	800a8ca <HAL_GPIO_Init+0xe6>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d007      	beq.n	800a8ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8be:	2b11      	cmp	r3, #17
 800a8c0:	d003      	beq.n	800a8ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b12      	cmp	r3, #18
 800a8c8:	d130      	bne.n	800a92c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	2203      	movs	r2, #3
 800a8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a900:	2201      	movs	r2, #1
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	fa02 f303 	lsl.w	r3, r2, r3
 800a908:	43db      	mvns	r3, r3
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	4013      	ands	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	091b      	lsrs	r3, r3, #4
 800a916:	f003 0201 	and.w	r2, r3, #1
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	fa02 f303 	lsl.w	r3, r2, r3
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	4313      	orrs	r3, r2
 800a924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	69ba      	ldr	r2, [r7, #24]
 800a92a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	2203      	movs	r2, #3
 800a938:	fa02 f303 	lsl.w	r3, r2, r3
 800a93c:	43db      	mvns	r3, r3
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	4013      	ands	r3, r2
 800a942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	689a      	ldr	r2, [r3, #8]
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	fa02 f303 	lsl.w	r3, r2, r3
 800a950:	69ba      	ldr	r2, [r7, #24]
 800a952:	4313      	orrs	r3, r2
 800a954:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 80ae 	beq.w	800aac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	4b5c      	ldr	r3, [pc, #368]	; (800aae0 <HAL_GPIO_Init+0x2fc>)
 800a970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a972:	4a5b      	ldr	r2, [pc, #364]	; (800aae0 <HAL_GPIO_Init+0x2fc>)
 800a974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a978:	6453      	str	r3, [r2, #68]	; 0x44
 800a97a:	4b59      	ldr	r3, [pc, #356]	; (800aae0 <HAL_GPIO_Init+0x2fc>)
 800a97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a986:	4a57      	ldr	r2, [pc, #348]	; (800aae4 <HAL_GPIO_Init+0x300>)
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	089b      	lsrs	r3, r3, #2
 800a98c:	3302      	adds	r3, #2
 800a98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f003 0303 	and.w	r3, r3, #3
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	220f      	movs	r2, #15
 800a99e:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a2:	43db      	mvns	r3, r3
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a4e      	ldr	r2, [pc, #312]	; (800aae8 <HAL_GPIO_Init+0x304>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d025      	beq.n	800a9fe <HAL_GPIO_Init+0x21a>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a4d      	ldr	r2, [pc, #308]	; (800aaec <HAL_GPIO_Init+0x308>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d01f      	beq.n	800a9fa <HAL_GPIO_Init+0x216>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a4c      	ldr	r2, [pc, #304]	; (800aaf0 <HAL_GPIO_Init+0x30c>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d019      	beq.n	800a9f6 <HAL_GPIO_Init+0x212>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a4b      	ldr	r2, [pc, #300]	; (800aaf4 <HAL_GPIO_Init+0x310>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d013      	beq.n	800a9f2 <HAL_GPIO_Init+0x20e>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a4a      	ldr	r2, [pc, #296]	; (800aaf8 <HAL_GPIO_Init+0x314>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d00d      	beq.n	800a9ee <HAL_GPIO_Init+0x20a>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a49      	ldr	r2, [pc, #292]	; (800aafc <HAL_GPIO_Init+0x318>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d007      	beq.n	800a9ea <HAL_GPIO_Init+0x206>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a48      	ldr	r2, [pc, #288]	; (800ab00 <HAL_GPIO_Init+0x31c>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d101      	bne.n	800a9e6 <HAL_GPIO_Init+0x202>
 800a9e2:	2306      	movs	r3, #6
 800a9e4:	e00c      	b.n	800aa00 <HAL_GPIO_Init+0x21c>
 800a9e6:	2307      	movs	r3, #7
 800a9e8:	e00a      	b.n	800aa00 <HAL_GPIO_Init+0x21c>
 800a9ea:	2305      	movs	r3, #5
 800a9ec:	e008      	b.n	800aa00 <HAL_GPIO_Init+0x21c>
 800a9ee:	2304      	movs	r3, #4
 800a9f0:	e006      	b.n	800aa00 <HAL_GPIO_Init+0x21c>
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e004      	b.n	800aa00 <HAL_GPIO_Init+0x21c>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e002      	b.n	800aa00 <HAL_GPIO_Init+0x21c>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <HAL_GPIO_Init+0x21c>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	f002 0203 	and.w	r2, r2, #3
 800aa06:	0092      	lsls	r2, r2, #2
 800aa08:	4093      	lsls	r3, r2
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa10:	4934      	ldr	r1, [pc, #208]	; (800aae4 <HAL_GPIO_Init+0x300>)
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	089b      	lsrs	r3, r3, #2
 800aa16:	3302      	adds	r3, #2
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aa1e:	4b39      	ldr	r3, [pc, #228]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	43db      	mvns	r3, r3
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aa42:	4a30      	ldr	r2, [pc, #192]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800aa48:	4b2e      	ldr	r3, [pc, #184]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	43db      	mvns	r3, r3
 800aa52:	69ba      	ldr	r2, [r7, #24]
 800aa54:	4013      	ands	r3, r2
 800aa56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aa6c:	4a25      	ldr	r2, [pc, #148]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aa72:	4b24      	ldr	r3, [pc, #144]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	43db      	mvns	r3, r3
 800aa7c:	69ba      	ldr	r2, [r7, #24]
 800aa7e:	4013      	ands	r3, r2
 800aa80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aa96:	4a1b      	ldr	r2, [pc, #108]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aa9c:	4b19      	ldr	r3, [pc, #100]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	43db      	mvns	r3, r3
 800aaa6:	69ba      	ldr	r2, [r7, #24]
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800aab8:	69ba      	ldr	r2, [r7, #24]
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aac0:	4a10      	ldr	r2, [pc, #64]	; (800ab04 <HAL_GPIO_Init+0x320>)
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	3301      	adds	r3, #1
 800aaca:	61fb      	str	r3, [r7, #28]
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	2b0f      	cmp	r3, #15
 800aad0:	f67f ae96 	bls.w	800a800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aad4:	bf00      	nop
 800aad6:	3724      	adds	r7, #36	; 0x24
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	40023800 	.word	0x40023800
 800aae4:	40013800 	.word	0x40013800
 800aae8:	40020000 	.word	0x40020000
 800aaec:	40020400 	.word	0x40020400
 800aaf0:	40020800 	.word	0x40020800
 800aaf4:	40020c00 	.word	0x40020c00
 800aaf8:	40021000 	.word	0x40021000
 800aafc:	40021400 	.word	0x40021400
 800ab00:	40021800 	.word	0x40021800
 800ab04:	40013c00 	.word	0x40013c00

0800ab08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691a      	ldr	r2, [r3, #16]
 800ab18:	887b      	ldrh	r3, [r7, #2]
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab20:	2301      	movs	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
 800ab24:	e001      	b.n	800ab2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	807b      	strh	r3, [r7, #2]
 800ab44:	4613      	mov	r3, r2
 800ab46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ab48:	787b      	ldrb	r3, [r7, #1]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab4e:	887a      	ldrh	r2, [r7, #2]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ab54:	e003      	b.n	800ab5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ab56:	887b      	ldrh	r3, [r7, #2]
 800ab58:	041a      	lsls	r2, r3, #16
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	619a      	str	r2, [r3, #24]
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e0ca      	b.n	800ad16 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab80:	4b67      	ldr	r3, [pc, #412]	; (800ad20 <HAL_RCC_ClockConfig+0x1b4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 030f 	and.w	r3, r3, #15
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d90c      	bls.n	800aba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab8e:	4b64      	ldr	r3, [pc, #400]	; (800ad20 <HAL_RCC_ClockConfig+0x1b4>)
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	b2d2      	uxtb	r2, r2
 800ab94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab96:	4b62      	ldr	r3, [pc, #392]	; (800ad20 <HAL_RCC_ClockConfig+0x1b4>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f003 030f 	and.w	r3, r3, #15
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d001      	beq.n	800aba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0b6      	b.n	800ad16 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d020      	beq.n	800abf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abc0:	4b58      	ldr	r3, [pc, #352]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	4a57      	ldr	r2, [pc, #348]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800abc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800abca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0308 	and.w	r3, r3, #8
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800abd8:	4b52      	ldr	r3, [pc, #328]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	4a51      	ldr	r2, [pc, #324]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800abde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800abe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abe4:	4b4f      	ldr	r3, [pc, #316]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	494c      	ldr	r1, [pc, #304]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d044      	beq.n	800ac8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d107      	bne.n	800ac1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac0a:	4b46      	ldr	r3, [pc, #280]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d119      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e07d      	b.n	800ad16 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d003      	beq.n	800ac2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d107      	bne.n	800ac3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac2a:	4b3e      	ldr	r3, [pc, #248]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d109      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e06d      	b.n	800ad16 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac3a:	4b3a      	ldr	r3, [pc, #232]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e065      	b.n	800ad16 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac4a:	4b36      	ldr	r3, [pc, #216]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f023 0203 	bic.w	r2, r3, #3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	4933      	ldr	r1, [pc, #204]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac5c:	f7fe f8cc 	bl	8008df8 <HAL_GetTick>
 800ac60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac62:	e00a      	b.n	800ac7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac64:	f7fe f8c8 	bl	8008df8 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d901      	bls.n	800ac7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e04d      	b.n	800ad16 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac7a:	4b2a      	ldr	r3, [pc, #168]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f003 020c 	and.w	r2, r3, #12
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d1eb      	bne.n	800ac64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ac8c:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <HAL_RCC_ClockConfig+0x1b4>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 030f 	and.w	r3, r3, #15
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d20c      	bcs.n	800acb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac9a:	4b21      	ldr	r3, [pc, #132]	; (800ad20 <HAL_RCC_ClockConfig+0x1b4>)
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	b2d2      	uxtb	r2, r2
 800aca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aca2:	4b1f      	ldr	r3, [pc, #124]	; (800ad20 <HAL_RCC_ClockConfig+0x1b4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 030f 	and.w	r3, r3, #15
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d001      	beq.n	800acb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e030      	b.n	800ad16 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 0304 	and.w	r3, r3, #4
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d008      	beq.n	800acd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acc0:	4b18      	ldr	r3, [pc, #96]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	4915      	ldr	r1, [pc, #84]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 0308 	and.w	r3, r3, #8
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d009      	beq.n	800acf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800acde:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	490d      	ldr	r1, [pc, #52]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800acee:	4313      	orrs	r3, r2
 800acf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800acf2:	f000 f851 	bl	800ad98 <HAL_RCC_GetSysClockFreq>
 800acf6:	4601      	mov	r1, r0
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <HAL_RCC_ClockConfig+0x1b8>)
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	091b      	lsrs	r3, r3, #4
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	4a09      	ldr	r2, [pc, #36]	; (800ad28 <HAL_RCC_ClockConfig+0x1bc>)
 800ad04:	5cd3      	ldrb	r3, [r2, r3]
 800ad06:	fa21 f303 	lsr.w	r3, r1, r3
 800ad0a:	4a08      	ldr	r2, [pc, #32]	; (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800ad0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f7fe f82e 	bl	8008d70 <HAL_InitTick>

  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	40023c00 	.word	0x40023c00
 800ad24:	40023800 	.word	0x40023800
 800ad28:	08035424 	.word	0x08035424
 800ad2c:	2000002c 	.word	0x2000002c

0800ad30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad34:	4b03      	ldr	r3, [pc, #12]	; (800ad44 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad36:	681b      	ldr	r3, [r3, #0]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	2000002c 	.word	0x2000002c

0800ad48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ad4c:	f7ff fff0 	bl	800ad30 <HAL_RCC_GetHCLKFreq>
 800ad50:	4601      	mov	r1, r0
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	0a9b      	lsrs	r3, r3, #10
 800ad58:	f003 0307 	and.w	r3, r3, #7
 800ad5c:	4a03      	ldr	r2, [pc, #12]	; (800ad6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad5e:	5cd3      	ldrb	r3, [r2, r3]
 800ad60:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	40023800 	.word	0x40023800
 800ad6c:	08035434 	.word	0x08035434

0800ad70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ad74:	f7ff ffdc 	bl	800ad30 <HAL_RCC_GetHCLKFreq>
 800ad78:	4601      	mov	r1, r0
 800ad7a:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	0b5b      	lsrs	r3, r3, #13
 800ad80:	f003 0307 	and.w	r3, r3, #7
 800ad84:	4a03      	ldr	r2, [pc, #12]	; (800ad94 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad86:	5cd3      	ldrb	r3, [r2, r3]
 800ad88:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	40023800 	.word	0x40023800
 800ad94:	08035434 	.word	0x08035434

0800ad98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800adae:	2300      	movs	r3, #0
 800adb0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800adb2:	4bc6      	ldr	r3, [pc, #792]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f003 030c 	and.w	r3, r3, #12
 800adba:	2b0c      	cmp	r3, #12
 800adbc:	f200 817e 	bhi.w	800b0bc <HAL_RCC_GetSysClockFreq+0x324>
 800adc0:	a201      	add	r2, pc, #4	; (adr r2, 800adc8 <HAL_RCC_GetSysClockFreq+0x30>)
 800adc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc6:	bf00      	nop
 800adc8:	0800adfd 	.word	0x0800adfd
 800adcc:	0800b0bd 	.word	0x0800b0bd
 800add0:	0800b0bd 	.word	0x0800b0bd
 800add4:	0800b0bd 	.word	0x0800b0bd
 800add8:	0800ae03 	.word	0x0800ae03
 800addc:	0800b0bd 	.word	0x0800b0bd
 800ade0:	0800b0bd 	.word	0x0800b0bd
 800ade4:	0800b0bd 	.word	0x0800b0bd
 800ade8:	0800ae09 	.word	0x0800ae09
 800adec:	0800b0bd 	.word	0x0800b0bd
 800adf0:	0800b0bd 	.word	0x0800b0bd
 800adf4:	0800b0bd 	.word	0x0800b0bd
 800adf8:	0800af65 	.word	0x0800af65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800adfc:	4bb4      	ldr	r3, [pc, #720]	; (800b0d0 <HAL_RCC_GetSysClockFreq+0x338>)
 800adfe:	613b      	str	r3, [r7, #16]
       break;
 800ae00:	e15f      	b.n	800b0c2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae02:	4bb4      	ldr	r3, [pc, #720]	; (800b0d4 <HAL_RCC_GetSysClockFreq+0x33c>)
 800ae04:	613b      	str	r3, [r7, #16]
      break;
 800ae06:	e15c      	b.n	800b0c2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae08:	4bb0      	ldr	r3, [pc, #704]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae10:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ae12:	4bae      	ldr	r3, [pc, #696]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d04a      	beq.n	800aeb4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae1e:	4bab      	ldr	r3, [pc, #684]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	099b      	lsrs	r3, r3, #6
 800ae24:	f04f 0400 	mov.w	r4, #0
 800ae28:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	ea03 0501 	and.w	r5, r3, r1
 800ae34:	ea04 0602 	and.w	r6, r4, r2
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4632      	mov	r2, r6
 800ae3c:	f04f 0300 	mov.w	r3, #0
 800ae40:	f04f 0400 	mov.w	r4, #0
 800ae44:	0154      	lsls	r4, r2, #5
 800ae46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ae4a:	014b      	lsls	r3, r1, #5
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4622      	mov	r2, r4
 800ae50:	1b49      	subs	r1, r1, r5
 800ae52:	eb62 0206 	sbc.w	r2, r2, r6
 800ae56:	f04f 0300 	mov.w	r3, #0
 800ae5a:	f04f 0400 	mov.w	r4, #0
 800ae5e:	0194      	lsls	r4, r2, #6
 800ae60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ae64:	018b      	lsls	r3, r1, #6
 800ae66:	1a5b      	subs	r3, r3, r1
 800ae68:	eb64 0402 	sbc.w	r4, r4, r2
 800ae6c:	f04f 0100 	mov.w	r1, #0
 800ae70:	f04f 0200 	mov.w	r2, #0
 800ae74:	00e2      	lsls	r2, r4, #3
 800ae76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ae7a:	00d9      	lsls	r1, r3, #3
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4614      	mov	r4, r2
 800ae80:	195b      	adds	r3, r3, r5
 800ae82:	eb44 0406 	adc.w	r4, r4, r6
 800ae86:	f04f 0100 	mov.w	r1, #0
 800ae8a:	f04f 0200 	mov.w	r2, #0
 800ae8e:	0262      	lsls	r2, r4, #9
 800ae90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800ae94:	0259      	lsls	r1, r3, #9
 800ae96:	460b      	mov	r3, r1
 800ae98:	4614      	mov	r4, r2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f04f 0400 	mov.w	r4, #0
 800aea4:	461a      	mov	r2, r3
 800aea6:	4623      	mov	r3, r4
 800aea8:	f7fd fdc0 	bl	8008a2c <__aeabi_uldivmod>
 800aeac:	4603      	mov	r3, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	e049      	b.n	800af48 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aeb4:	4b85      	ldr	r3, [pc, #532]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	099b      	lsrs	r3, r3, #6
 800aeba:	f04f 0400 	mov.w	r4, #0
 800aebe:	f240 11ff 	movw	r1, #511	; 0x1ff
 800aec2:	f04f 0200 	mov.w	r2, #0
 800aec6:	ea03 0501 	and.w	r5, r3, r1
 800aeca:	ea04 0602 	and.w	r6, r4, r2
 800aece:	4629      	mov	r1, r5
 800aed0:	4632      	mov	r2, r6
 800aed2:	f04f 0300 	mov.w	r3, #0
 800aed6:	f04f 0400 	mov.w	r4, #0
 800aeda:	0154      	lsls	r4, r2, #5
 800aedc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800aee0:	014b      	lsls	r3, r1, #5
 800aee2:	4619      	mov	r1, r3
 800aee4:	4622      	mov	r2, r4
 800aee6:	1b49      	subs	r1, r1, r5
 800aee8:	eb62 0206 	sbc.w	r2, r2, r6
 800aeec:	f04f 0300 	mov.w	r3, #0
 800aef0:	f04f 0400 	mov.w	r4, #0
 800aef4:	0194      	lsls	r4, r2, #6
 800aef6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800aefa:	018b      	lsls	r3, r1, #6
 800aefc:	1a5b      	subs	r3, r3, r1
 800aefe:	eb64 0402 	sbc.w	r4, r4, r2
 800af02:	f04f 0100 	mov.w	r1, #0
 800af06:	f04f 0200 	mov.w	r2, #0
 800af0a:	00e2      	lsls	r2, r4, #3
 800af0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800af10:	00d9      	lsls	r1, r3, #3
 800af12:	460b      	mov	r3, r1
 800af14:	4614      	mov	r4, r2
 800af16:	195b      	adds	r3, r3, r5
 800af18:	eb44 0406 	adc.w	r4, r4, r6
 800af1c:	f04f 0100 	mov.w	r1, #0
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	02a2      	lsls	r2, r4, #10
 800af26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800af2a:	0299      	lsls	r1, r3, #10
 800af2c:	460b      	mov	r3, r1
 800af2e:	4614      	mov	r4, r2
 800af30:	4618      	mov	r0, r3
 800af32:	4621      	mov	r1, r4
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f04f 0400 	mov.w	r4, #0
 800af3a:	461a      	mov	r2, r3
 800af3c:	4623      	mov	r3, r4
 800af3e:	f7fd fd75 	bl	8008a2c <__aeabi_uldivmod>
 800af42:	4603      	mov	r3, r0
 800af44:	460c      	mov	r4, r1
 800af46:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800af48:	4b60      	ldr	r3, [pc, #384]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	0c1b      	lsrs	r3, r3, #16
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	3301      	adds	r3, #1
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af60:	613b      	str	r3, [r7, #16]
      break;
 800af62:	e0ae      	b.n	800b0c2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af64:	4b59      	ldr	r3, [pc, #356]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af6c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af6e:	4b57      	ldr	r3, [pc, #348]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d04a      	beq.n	800b010 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af7a:	4b54      	ldr	r3, [pc, #336]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	099b      	lsrs	r3, r3, #6
 800af80:	f04f 0400 	mov.w	r4, #0
 800af84:	f240 11ff 	movw	r1, #511	; 0x1ff
 800af88:	f04f 0200 	mov.w	r2, #0
 800af8c:	ea03 0501 	and.w	r5, r3, r1
 800af90:	ea04 0602 	and.w	r6, r4, r2
 800af94:	4629      	mov	r1, r5
 800af96:	4632      	mov	r2, r6
 800af98:	f04f 0300 	mov.w	r3, #0
 800af9c:	f04f 0400 	mov.w	r4, #0
 800afa0:	0154      	lsls	r4, r2, #5
 800afa2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800afa6:	014b      	lsls	r3, r1, #5
 800afa8:	4619      	mov	r1, r3
 800afaa:	4622      	mov	r2, r4
 800afac:	1b49      	subs	r1, r1, r5
 800afae:	eb62 0206 	sbc.w	r2, r2, r6
 800afb2:	f04f 0300 	mov.w	r3, #0
 800afb6:	f04f 0400 	mov.w	r4, #0
 800afba:	0194      	lsls	r4, r2, #6
 800afbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800afc0:	018b      	lsls	r3, r1, #6
 800afc2:	1a5b      	subs	r3, r3, r1
 800afc4:	eb64 0402 	sbc.w	r4, r4, r2
 800afc8:	f04f 0100 	mov.w	r1, #0
 800afcc:	f04f 0200 	mov.w	r2, #0
 800afd0:	00e2      	lsls	r2, r4, #3
 800afd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800afd6:	00d9      	lsls	r1, r3, #3
 800afd8:	460b      	mov	r3, r1
 800afda:	4614      	mov	r4, r2
 800afdc:	195b      	adds	r3, r3, r5
 800afde:	eb44 0406 	adc.w	r4, r4, r6
 800afe2:	f04f 0100 	mov.w	r1, #0
 800afe6:	f04f 0200 	mov.w	r2, #0
 800afea:	0262      	lsls	r2, r4, #9
 800afec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800aff0:	0259      	lsls	r1, r3, #9
 800aff2:	460b      	mov	r3, r1
 800aff4:	4614      	mov	r4, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	4621      	mov	r1, r4
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f04f 0400 	mov.w	r4, #0
 800b000:	461a      	mov	r2, r3
 800b002:	4623      	mov	r3, r4
 800b004:	f7fd fd12 	bl	8008a2c <__aeabi_uldivmod>
 800b008:	4603      	mov	r3, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	e049      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b010:	4b2e      	ldr	r3, [pc, #184]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	099b      	lsrs	r3, r3, #6
 800b016:	f04f 0400 	mov.w	r4, #0
 800b01a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b01e:	f04f 0200 	mov.w	r2, #0
 800b022:	ea03 0501 	and.w	r5, r3, r1
 800b026:	ea04 0602 	and.w	r6, r4, r2
 800b02a:	4629      	mov	r1, r5
 800b02c:	4632      	mov	r2, r6
 800b02e:	f04f 0300 	mov.w	r3, #0
 800b032:	f04f 0400 	mov.w	r4, #0
 800b036:	0154      	lsls	r4, r2, #5
 800b038:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b03c:	014b      	lsls	r3, r1, #5
 800b03e:	4619      	mov	r1, r3
 800b040:	4622      	mov	r2, r4
 800b042:	1b49      	subs	r1, r1, r5
 800b044:	eb62 0206 	sbc.w	r2, r2, r6
 800b048:	f04f 0300 	mov.w	r3, #0
 800b04c:	f04f 0400 	mov.w	r4, #0
 800b050:	0194      	lsls	r4, r2, #6
 800b052:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b056:	018b      	lsls	r3, r1, #6
 800b058:	1a5b      	subs	r3, r3, r1
 800b05a:	eb64 0402 	sbc.w	r4, r4, r2
 800b05e:	f04f 0100 	mov.w	r1, #0
 800b062:	f04f 0200 	mov.w	r2, #0
 800b066:	00e2      	lsls	r2, r4, #3
 800b068:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b06c:	00d9      	lsls	r1, r3, #3
 800b06e:	460b      	mov	r3, r1
 800b070:	4614      	mov	r4, r2
 800b072:	195b      	adds	r3, r3, r5
 800b074:	eb44 0406 	adc.w	r4, r4, r6
 800b078:	f04f 0100 	mov.w	r1, #0
 800b07c:	f04f 0200 	mov.w	r2, #0
 800b080:	02a2      	lsls	r2, r4, #10
 800b082:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b086:	0299      	lsls	r1, r3, #10
 800b088:	460b      	mov	r3, r1
 800b08a:	4614      	mov	r4, r2
 800b08c:	4618      	mov	r0, r3
 800b08e:	4621      	mov	r1, r4
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f04f 0400 	mov.w	r4, #0
 800b096:	461a      	mov	r2, r3
 800b098:	4623      	mov	r3, r4
 800b09a:	f7fd fcc7 	bl	8008a2c <__aeabi_uldivmod>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <HAL_RCC_GetSysClockFreq+0x334>)
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	0f1b      	lsrs	r3, r3, #28
 800b0aa:	f003 0307 	and.w	r3, r3, #7
 800b0ae:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b8:	613b      	str	r3, [r7, #16]
      break;
 800b0ba:	e002      	b.n	800b0c2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b0bc:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <HAL_RCC_GetSysClockFreq+0x338>)
 800b0be:	613b      	str	r3, [r7, #16]
      break;
 800b0c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b0c2:	693b      	ldr	r3, [r7, #16]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	371c      	adds	r7, #28
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	00f42400 	.word	0x00f42400
 800b0d4:	007a1200 	.word	0x007a1200

0800b0d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 8083 	beq.w	800b1f8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b0f2:	4b95      	ldr	r3, [pc, #596]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 030c 	and.w	r3, r3, #12
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d019      	beq.n	800b132 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b0fe:	4b92      	ldr	r3, [pc, #584]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b106:	2b08      	cmp	r3, #8
 800b108:	d106      	bne.n	800b118 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b10a:	4b8f      	ldr	r3, [pc, #572]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b116:	d00c      	beq.n	800b132 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b118:	4b8b      	ldr	r3, [pc, #556]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b120:	2b0c      	cmp	r3, #12
 800b122:	d112      	bne.n	800b14a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b124:	4b88      	ldr	r3, [pc, #544]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b12c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b130:	d10b      	bne.n	800b14a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b132:	4b85      	ldr	r3, [pc, #532]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d05b      	beq.n	800b1f6 <HAL_RCC_OscConfig+0x11e>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d157      	bne.n	800b1f6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e216      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b152:	d106      	bne.n	800b162 <HAL_RCC_OscConfig+0x8a>
 800b154:	4b7c      	ldr	r3, [pc, #496]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a7b      	ldr	r2, [pc, #492]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b15a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	e01d      	b.n	800b19e <HAL_RCC_OscConfig+0xc6>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b16a:	d10c      	bne.n	800b186 <HAL_RCC_OscConfig+0xae>
 800b16c:	4b76      	ldr	r3, [pc, #472]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a75      	ldr	r2, [pc, #468]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	4b73      	ldr	r3, [pc, #460]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a72      	ldr	r2, [pc, #456]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b17e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	e00b      	b.n	800b19e <HAL_RCC_OscConfig+0xc6>
 800b186:	4b70      	ldr	r3, [pc, #448]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a6f      	ldr	r2, [pc, #444]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b18c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	4b6d      	ldr	r3, [pc, #436]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a6c      	ldr	r2, [pc, #432]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b19c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d013      	beq.n	800b1ce <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a6:	f7fd fe27 	bl	8008df8 <HAL_GetTick>
 800b1aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1ac:	e008      	b.n	800b1c0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b1ae:	f7fd fe23 	bl	8008df8 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	2b64      	cmp	r3, #100	; 0x64
 800b1ba:	d901      	bls.n	800b1c0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e1db      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1c0:	4b61      	ldr	r3, [pc, #388]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0f0      	beq.n	800b1ae <HAL_RCC_OscConfig+0xd6>
 800b1cc:	e014      	b.n	800b1f8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ce:	f7fd fe13 	bl	8008df8 <HAL_GetTick>
 800b1d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1d4:	e008      	b.n	800b1e8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b1d6:	f7fd fe0f 	bl	8008df8 <HAL_GetTick>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	2b64      	cmp	r3, #100	; 0x64
 800b1e2:	d901      	bls.n	800b1e8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e1c7      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1e8:	4b57      	ldr	r3, [pc, #348]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1f0      	bne.n	800b1d6 <HAL_RCC_OscConfig+0xfe>
 800b1f4:	e000      	b.n	800b1f8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d06f      	beq.n	800b2e4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b204:	4b50      	ldr	r3, [pc, #320]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f003 030c 	and.w	r3, r3, #12
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d017      	beq.n	800b240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b210:	4b4d      	ldr	r3, [pc, #308]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b218:	2b08      	cmp	r3, #8
 800b21a:	d105      	bne.n	800b228 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b21c:	4b4a      	ldr	r3, [pc, #296]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b228:	4b47      	ldr	r3, [pc, #284]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b230:	2b0c      	cmp	r3, #12
 800b232:	d11c      	bne.n	800b26e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b234:	4b44      	ldr	r3, [pc, #272]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d116      	bne.n	800b26e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b240:	4b41      	ldr	r3, [pc, #260]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d005      	beq.n	800b258 <HAL_RCC_OscConfig+0x180>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d001      	beq.n	800b258 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e18f      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b258:	4b3b      	ldr	r3, [pc, #236]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	00db      	lsls	r3, r3, #3
 800b266:	4938      	ldr	r1, [pc, #224]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b26c:	e03a      	b.n	800b2e4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d020      	beq.n	800b2b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b276:	4b35      	ldr	r3, [pc, #212]	; (800b34c <HAL_RCC_OscConfig+0x274>)
 800b278:	2201      	movs	r2, #1
 800b27a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b27c:	f7fd fdbc 	bl	8008df8 <HAL_GetTick>
 800b280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b282:	e008      	b.n	800b296 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b284:	f7fd fdb8 	bl	8008df8 <HAL_GetTick>
 800b288:	4602      	mov	r2, r0
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d901      	bls.n	800b296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b292:	2303      	movs	r3, #3
 800b294:	e170      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b296:	4b2c      	ldr	r3, [pc, #176]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 0302 	and.w	r3, r3, #2
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0f0      	beq.n	800b284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2a2:	4b29      	ldr	r3, [pc, #164]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	00db      	lsls	r3, r3, #3
 800b2b0:	4925      	ldr	r1, [pc, #148]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	600b      	str	r3, [r1, #0]
 800b2b6:	e015      	b.n	800b2e4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2b8:	4b24      	ldr	r3, [pc, #144]	; (800b34c <HAL_RCC_OscConfig+0x274>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2be:	f7fd fd9b 	bl	8008df8 <HAL_GetTick>
 800b2c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2c4:	e008      	b.n	800b2d8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b2c6:	f7fd fd97 	bl	8008df8 <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d901      	bls.n	800b2d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e14f      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2d8:	4b1b      	ldr	r3, [pc, #108]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1f0      	bne.n	800b2c6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0308 	and.w	r3, r3, #8
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d037      	beq.n	800b360 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	695b      	ldr	r3, [r3, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d016      	beq.n	800b326 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2f8:	4b15      	ldr	r3, [pc, #84]	; (800b350 <HAL_RCC_OscConfig+0x278>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2fe:	f7fd fd7b 	bl	8008df8 <HAL_GetTick>
 800b302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b304:	e008      	b.n	800b318 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b306:	f7fd fd77 	bl	8008df8 <HAL_GetTick>
 800b30a:	4602      	mov	r2, r0
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	2b02      	cmp	r3, #2
 800b312:	d901      	bls.n	800b318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b314:	2303      	movs	r3, #3
 800b316:	e12f      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b318:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <HAL_RCC_OscConfig+0x270>)
 800b31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0f0      	beq.n	800b306 <HAL_RCC_OscConfig+0x22e>
 800b324:	e01c      	b.n	800b360 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b326:	4b0a      	ldr	r3, [pc, #40]	; (800b350 <HAL_RCC_OscConfig+0x278>)
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b32c:	f7fd fd64 	bl	8008df8 <HAL_GetTick>
 800b330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b332:	e00f      	b.n	800b354 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b334:	f7fd fd60 	bl	8008df8 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d908      	bls.n	800b354 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e118      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
 800b346:	bf00      	nop
 800b348:	40023800 	.word	0x40023800
 800b34c:	42470000 	.word	0x42470000
 800b350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b354:	4b8a      	ldr	r3, [pc, #552]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e9      	bne.n	800b334 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0304 	and.w	r3, r3, #4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 8097 	beq.w	800b49c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b36e:	2300      	movs	r3, #0
 800b370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b372:	4b83      	ldr	r3, [pc, #524]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10f      	bne.n	800b39e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	4b7f      	ldr	r3, [pc, #508]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b386:	4a7e      	ldr	r2, [pc, #504]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b38c:	6413      	str	r3, [r2, #64]	; 0x40
 800b38e:	4b7c      	ldr	r3, [pc, #496]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b39a:	2301      	movs	r3, #1
 800b39c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b39e:	4b79      	ldr	r3, [pc, #484]	; (800b584 <HAL_RCC_OscConfig+0x4ac>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d118      	bne.n	800b3dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b3aa:	4b76      	ldr	r3, [pc, #472]	; (800b584 <HAL_RCC_OscConfig+0x4ac>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a75      	ldr	r2, [pc, #468]	; (800b584 <HAL_RCC_OscConfig+0x4ac>)
 800b3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3b6:	f7fd fd1f 	bl	8008df8 <HAL_GetTick>
 800b3ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3bc:	e008      	b.n	800b3d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3be:	f7fd fd1b 	bl	8008df8 <HAL_GetTick>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d901      	bls.n	800b3d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e0d3      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3d0:	4b6c      	ldr	r3, [pc, #432]	; (800b584 <HAL_RCC_OscConfig+0x4ac>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0f0      	beq.n	800b3be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d106      	bne.n	800b3f2 <HAL_RCC_OscConfig+0x31a>
 800b3e4:	4b66      	ldr	r3, [pc, #408]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e8:	4a65      	ldr	r2, [pc, #404]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b3ea:	f043 0301 	orr.w	r3, r3, #1
 800b3ee:	6713      	str	r3, [r2, #112]	; 0x70
 800b3f0:	e01c      	b.n	800b42c <HAL_RCC_OscConfig+0x354>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	2b05      	cmp	r3, #5
 800b3f8:	d10c      	bne.n	800b414 <HAL_RCC_OscConfig+0x33c>
 800b3fa:	4b61      	ldr	r3, [pc, #388]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fe:	4a60      	ldr	r2, [pc, #384]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b400:	f043 0304 	orr.w	r3, r3, #4
 800b404:	6713      	str	r3, [r2, #112]	; 0x70
 800b406:	4b5e      	ldr	r3, [pc, #376]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40a:	4a5d      	ldr	r2, [pc, #372]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b40c:	f043 0301 	orr.w	r3, r3, #1
 800b410:	6713      	str	r3, [r2, #112]	; 0x70
 800b412:	e00b      	b.n	800b42c <HAL_RCC_OscConfig+0x354>
 800b414:	4b5a      	ldr	r3, [pc, #360]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b418:	4a59      	ldr	r2, [pc, #356]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b41a:	f023 0301 	bic.w	r3, r3, #1
 800b41e:	6713      	str	r3, [r2, #112]	; 0x70
 800b420:	4b57      	ldr	r3, [pc, #348]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b424:	4a56      	ldr	r2, [pc, #344]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b426:	f023 0304 	bic.w	r3, r3, #4
 800b42a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d015      	beq.n	800b460 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b434:	f7fd fce0 	bl	8008df8 <HAL_GetTick>
 800b438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b43a:	e00a      	b.n	800b452 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b43c:	f7fd fcdc 	bl	8008df8 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	f241 3288 	movw	r2, #5000	; 0x1388
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d901      	bls.n	800b452 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e092      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b452:	4b4b      	ldr	r3, [pc, #300]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0ee      	beq.n	800b43c <HAL_RCC_OscConfig+0x364>
 800b45e:	e014      	b.n	800b48a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b460:	f7fd fcca 	bl	8008df8 <HAL_GetTick>
 800b464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b466:	e00a      	b.n	800b47e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b468:	f7fd fcc6 	bl	8008df8 <HAL_GetTick>
 800b46c:	4602      	mov	r2, r0
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	f241 3288 	movw	r2, #5000	; 0x1388
 800b476:	4293      	cmp	r3, r2
 800b478:	d901      	bls.n	800b47e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e07c      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b47e:	4b40      	ldr	r3, [pc, #256]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b482:	f003 0302 	and.w	r3, r3, #2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1ee      	bne.n	800b468 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d105      	bne.n	800b49c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b490:	4b3b      	ldr	r3, [pc, #236]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b494:	4a3a      	ldr	r2, [pc, #232]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b49a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d068      	beq.n	800b576 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b4a4:	4b36      	ldr	r3, [pc, #216]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	f003 030c 	and.w	r3, r3, #12
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d060      	beq.n	800b572 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d145      	bne.n	800b544 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4b8:	4b33      	ldr	r3, [pc, #204]	; (800b588 <HAL_RCC_OscConfig+0x4b0>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4be:	f7fd fc9b 	bl	8008df8 <HAL_GetTick>
 800b4c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4c4:	e008      	b.n	800b4d8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b4c6:	f7fd fc97 	bl	8008df8 <HAL_GetTick>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d901      	bls.n	800b4d8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e04f      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4d8:	4b29      	ldr	r3, [pc, #164]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1f0      	bne.n	800b4c6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	69da      	ldr	r2, [r3, #28]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	019b      	lsls	r3, r3, #6
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fa:	085b      	lsrs	r3, r3, #1
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	041b      	lsls	r3, r3, #16
 800b500:	431a      	orrs	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	061b      	lsls	r3, r3, #24
 800b508:	431a      	orrs	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50e:	071b      	lsls	r3, r3, #28
 800b510:	491b      	ldr	r1, [pc, #108]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b512:	4313      	orrs	r3, r2
 800b514:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b516:	4b1c      	ldr	r3, [pc, #112]	; (800b588 <HAL_RCC_OscConfig+0x4b0>)
 800b518:	2201      	movs	r2, #1
 800b51a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b51c:	f7fd fc6c 	bl	8008df8 <HAL_GetTick>
 800b520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b522:	e008      	b.n	800b536 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b524:	f7fd fc68 	bl	8008df8 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d901      	bls.n	800b536 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e020      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b536:	4b12      	ldr	r3, [pc, #72]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0f0      	beq.n	800b524 <HAL_RCC_OscConfig+0x44c>
 800b542:	e018      	b.n	800b576 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b544:	4b10      	ldr	r3, [pc, #64]	; (800b588 <HAL_RCC_OscConfig+0x4b0>)
 800b546:	2200      	movs	r2, #0
 800b548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b54a:	f7fd fc55 	bl	8008df8 <HAL_GetTick>
 800b54e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b550:	e008      	b.n	800b564 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b552:	f7fd fc51 	bl	8008df8 <HAL_GetTick>
 800b556:	4602      	mov	r2, r0
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d901      	bls.n	800b564 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e009      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b564:	4b06      	ldr	r3, [pc, #24]	; (800b580 <HAL_RCC_OscConfig+0x4a8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1f0      	bne.n	800b552 <HAL_RCC_OscConfig+0x47a>
 800b570:	e001      	b.n	800b576 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e000      	b.n	800b578 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	40023800 	.word	0x40023800
 800b584:	40007000 	.word	0x40007000
 800b588:	42470060 	.word	0x42470060

0800b58c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e056      	b.n	800b64c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d106      	bne.n	800b5be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f004 fa01 	bl	800f9c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	431a      	orrs	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	431a      	orrs	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	ea42 0103 	orr.w	r1, r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	430a      	orrs	r2, r1
 800b614:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	0c1b      	lsrs	r3, r3, #16
 800b61c:	f003 0104 	and.w	r1, r3, #4
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	430a      	orrs	r2, r1
 800b62a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	69da      	ldr	r2, [r3, #28]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b63a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08c      	sub	sp, #48	; 0x30
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
 800b660:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b662:	2301      	movs	r3, #1
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b672:	2b01      	cmp	r3, #1
 800b674:	d101      	bne.n	800b67a <HAL_SPI_TransmitReceive+0x26>
 800b676:	2302      	movs	r3, #2
 800b678:	e18a      	b.n	800b990 <HAL_SPI_TransmitReceive+0x33c>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b682:	f7fd fbb9 	bl	8008df8 <HAL_GetTick>
 800b686:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b698:	887b      	ldrh	r3, [r7, #2]
 800b69a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b69c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d00f      	beq.n	800b6c4 <HAL_SPI_TransmitReceive+0x70>
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6aa:	d107      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d103      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x68>
 800b6b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	d003      	beq.n	800b6c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6c2:	e15b      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d005      	beq.n	800b6d6 <HAL_SPI_TransmitReceive+0x82>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <HAL_SPI_TransmitReceive+0x82>
 800b6d0:	887b      	ldrh	r3, [r7, #2]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d103      	bne.n	800b6de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6dc:	e14e      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	d003      	beq.n	800b6f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	887a      	ldrh	r2, [r7, #2]
 800b702:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	887a      	ldrh	r2, [r7, #2]
 800b708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	887a      	ldrh	r2, [r7, #2]
 800b714:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	887a      	ldrh	r2, [r7, #2]
 800b71a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b732:	2b40      	cmp	r3, #64	; 0x40
 800b734:	d007      	beq.n	800b746 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b744:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b74e:	d178      	bne.n	800b842 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <HAL_SPI_TransmitReceive+0x10a>
 800b758:	8b7b      	ldrh	r3, [r7, #26]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d166      	bne.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b762:	881a      	ldrh	r2, [r3, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76e:	1c9a      	adds	r2, r3, #2
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b778:	b29b      	uxth	r3, r3
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b782:	e053      	b.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 0302 	and.w	r3, r3, #2
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d11b      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x176>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b796:	b29b      	uxth	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d016      	beq.n	800b7ca <HAL_SPI_TransmitReceive+0x176>
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d113      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	1c9a      	adds	r2, r3, #2
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d119      	bne.n	800b80c <HAL_SPI_TransmitReceive+0x1b8>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d014      	beq.n	800b80c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ec:	b292      	uxth	r2, r2
 800b7ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f4:	1c9a      	adds	r2, r3, #2
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	3b01      	subs	r3, #1
 800b802:	b29a      	uxth	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b808:	2301      	movs	r3, #1
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b80c:	f7fd faf4 	bl	8008df8 <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b818:	429a      	cmp	r2, r3
 800b81a:	d807      	bhi.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b822:	d003      	beq.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b82a:	e0a7      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b830:	b29b      	uxth	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1a6      	bne.n	800b784 <HAL_SPI_TransmitReceive+0x130>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1a1      	bne.n	800b784 <HAL_SPI_TransmitReceive+0x130>
 800b840:	e07c      	b.n	800b93c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <HAL_SPI_TransmitReceive+0x1fc>
 800b84a:	8b7b      	ldrh	r3, [r7, #26]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d16b      	bne.n	800b928 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	330c      	adds	r3, #12
 800b85a:	7812      	ldrb	r2, [r2, #0]
 800b85c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	b29a      	uxth	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b876:	e057      	b.n	800b928 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b02      	cmp	r3, #2
 800b884:	d11c      	bne.n	800b8c0 <HAL_SPI_TransmitReceive+0x26c>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d017      	beq.n	800b8c0 <HAL_SPI_TransmitReceive+0x26c>
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	2b01      	cmp	r3, #1
 800b894:	d114      	bne.n	800b8c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	330c      	adds	r3, #12
 800b8a0:	7812      	ldrb	r2, [r2, #0]
 800b8a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d119      	bne.n	800b902 <HAL_SPI_TransmitReceive+0x2ae>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d014      	beq.n	800b902 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8fe:	2301      	movs	r3, #1
 800b900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b902:	f7fd fa79 	bl	8008df8 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b90e:	429a      	cmp	r2, r3
 800b910:	d803      	bhi.n	800b91a <HAL_SPI_TransmitReceive+0x2c6>
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b918:	d102      	bne.n	800b920 <HAL_SPI_TransmitReceive+0x2cc>
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b926:	e029      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1a2      	bne.n	800b878 <HAL_SPI_TransmitReceive+0x224>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b936:	b29b      	uxth	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d19d      	bne.n	800b878 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 fb1b 	bl	800bf7c <SPI_EndRxTxTransaction>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2220      	movs	r2, #32
 800b956:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b958:	e010      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10b      	bne.n	800b97a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b962:	2300      	movs	r3, #0
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	e000      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b97a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b98c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b990:	4618      	mov	r0, r3
 800b992:	3730      	adds	r7, #48	; 0x30
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
 800b9a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d101      	bne.n	800b9b8 <HAL_SPI_TransmitReceive_IT+0x20>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e075      	b.n	800baa4 <HAL_SPI_TransmitReceive_IT+0x10c>
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b9ce:	7dbb      	ldrb	r3, [r7, #22]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d00d      	beq.n	800b9f0 <HAL_SPI_TransmitReceive_IT+0x58>
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9da:	d106      	bne.n	800b9ea <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <HAL_SPI_TransmitReceive_IT+0x52>
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	2b04      	cmp	r3, #4
 800b9e8:	d002      	beq.n	800b9f0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b9ee:	e054      	b.n	800ba9a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d005      	beq.n	800ba02 <HAL_SPI_TransmitReceive_IT+0x6a>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <HAL_SPI_TransmitReceive_IT+0x6a>
 800b9fc:	887b      	ldrh	r3, [r7, #2]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d102      	bne.n	800ba08 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba06:	e048      	b.n	800ba9a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	d003      	beq.n	800ba1c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2205      	movs	r2, #5
 800ba18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	887a      	ldrh	r2, [r7, #2]
 800ba2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	887a      	ldrh	r2, [r7, #2]
 800ba32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	887a      	ldrh	r2, [r7, #2]
 800ba3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	887a      	ldrh	r2, [r7, #2]
 800ba44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	4a17      	ldr	r2, [pc, #92]	; (800bab0 <HAL_SPI_TransmitReceive_IT+0x118>)
 800ba52:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4a17      	ldr	r2, [pc, #92]	; (800bab4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800ba58:	645a      	str	r2, [r3, #68]	; 0x44
 800ba5a:	e005      	b.n	800ba68 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4a16      	ldr	r2, [pc, #88]	; (800bab8 <HAL_SPI_TransmitReceive_IT+0x120>)
 800ba60:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	4a15      	ldr	r2, [pc, #84]	; (800babc <HAL_SPI_TransmitReceive_IT+0x124>)
 800ba66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800ba76:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba82:	2b40      	cmp	r3, #64	; 0x40
 800ba84:	d008      	beq.n	800ba98 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba94:	601a      	str	r2, [r3, #0]
 800ba96:	e000      	b.n	800ba9a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800ba98:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	0800bde9 	.word	0x0800bde9
 800bab4:	0800be49 	.word	0x0800be49
 800bab8:	0800bd25 	.word	0x0800bd25
 800babc:	0800bd89 	.word	0x0800bd89

0800bac0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	099b      	lsrs	r3, r3, #6
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10f      	bne.n	800bb04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00a      	beq.n	800bb04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	099b      	lsrs	r3, r3, #6
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d004      	beq.n	800bb04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
    return;
 800bb02:	e0d8      	b.n	800bcb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	085b      	lsrs	r3, r3, #1
 800bb08:	f003 0301 	and.w	r3, r3, #1
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00a      	beq.n	800bb26 <HAL_SPI_IRQHandler+0x66>
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	09db      	lsrs	r3, r3, #7
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	4798      	blx	r3
    return;
 800bb24:	e0c7      	b.n	800bcb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	095b      	lsrs	r3, r3, #5
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10c      	bne.n	800bb4c <HAL_SPI_IRQHandler+0x8c>
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	099b      	lsrs	r3, r3, #6
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d106      	bne.n	800bb4c <HAL_SPI_IRQHandler+0x8c>
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	0a1b      	lsrs	r3, r3, #8
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 80b5 	beq.w	800bcb6 <HAL_SPI_IRQHandler+0x1f6>
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	095b      	lsrs	r3, r3, #5
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 80ae 	beq.w	800bcb6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	099b      	lsrs	r3, r3, #6
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d023      	beq.n	800bbae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d011      	beq.n	800bb96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb76:	f043 0204 	orr.w	r2, r3, #4
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	617b      	str	r3, [r7, #20]
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	e00b      	b.n	800bbae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb96:	2300      	movs	r3, #0
 800bb98:	613b      	str	r3, [r7, #16]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	613b      	str	r3, [r7, #16]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	693b      	ldr	r3, [r7, #16]
        return;
 800bbac:	e083      	b.n	800bcb6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	095b      	lsrs	r3, r3, #5
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d014      	beq.n	800bbe4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbbe:	f043 0201 	orr.w	r2, r3, #1
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbe0:	601a      	str	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00c      	beq.n	800bc0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf4:	f043 0208 	orr.w	r2, r3, #8
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	60bb      	str	r3, [r7, #8]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	60bb      	str	r3, [r7, #8]
 800bc08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d050      	beq.n	800bcb4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	685a      	ldr	r2, [r3, #4]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d104      	bne.n	800bc3e <HAL_SPI_IRQHandler+0x17e>
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d034      	beq.n	800bca8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0203 	bic.w	r2, r2, #3
 800bc4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d011      	beq.n	800bc7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc5a:	4a18      	ldr	r2, [pc, #96]	; (800bcbc <HAL_SPI_IRQHandler+0x1fc>)
 800bc5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fb34 	bl	800a2d0 <HAL_DMA_Abort_IT>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d005      	beq.n	800bc7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d016      	beq.n	800bcb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc86:	4a0d      	ldr	r2, [pc, #52]	; (800bcbc <HAL_SPI_IRQHandler+0x1fc>)
 800bc88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fb1e 	bl	800a2d0 <HAL_DMA_Abort_IT>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bca6:	e003      	b.n	800bcb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 f81d 	bl	800bce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bcae:	e000      	b.n	800bcb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bcb0:	bf00      	nop
    return;
 800bcb2:	bf00      	nop
 800bcb4:	bf00      	nop
  }
}
 800bcb6:	3720      	adds	r7, #32
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	0800bcfd 	.word	0x0800bcfd

0800bcc0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff ffe6 	bl	800bce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd1c:	bf00      	nop
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f103 020c 	add.w	r2, r3, #12
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	7812      	ldrb	r2, [r2, #0]
 800bd3a:	b2d2      	uxtb	r2, r2
 800bd3c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10f      	bne.n	800bd80 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685a      	ldr	r2, [r3, #4]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bd6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f940 	bl	800c000 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	330c      	adds	r3, #12
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10f      	bne.n	800bde0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d102      	bne.n	800bde0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f910 	bl	800c000 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfa:	b292      	uxth	r2, r2
 800bdfc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be02:	1c9a      	adds	r2, r3, #2
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	3b01      	subs	r3, #1
 800be10:	b29a      	uxth	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10f      	bne.n	800be40 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be2e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be34:	b29b      	uxth	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d102      	bne.n	800be40 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f8e0 	bl	800c000 <SPI_CloseRxTx_ISR>
    }
  }
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be54:	881a      	ldrh	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	1c9a      	adds	r2, r3, #2
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	3b01      	subs	r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be78:	b29b      	uxth	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10f      	bne.n	800be9e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be8c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be92:	b29b      	uxth	r3, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d102      	bne.n	800be9e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f8b1 	bl	800c000 <SPI_CloseRxTx_ISR>
    }
  }
}
 800be9e:	bf00      	nop
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b084      	sub	sp, #16
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	603b      	str	r3, [r7, #0]
 800beb2:	4613      	mov	r3, r2
 800beb4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800beb6:	e04c      	b.n	800bf52 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebe:	d048      	beq.n	800bf52 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bec0:	f7fc ff9a 	bl	8008df8 <HAL_GetTick>
 800bec4:	4602      	mov	r2, r0
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d902      	bls.n	800bed6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d13d      	bne.n	800bf52 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bee4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800beee:	d111      	bne.n	800bf14 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bef8:	d004      	beq.n	800bf04 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf02:	d107      	bne.n	800bf14 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf1c:	d10f      	bne.n	800bf3e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e00f      	b.n	800bf72 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689a      	ldr	r2, [r3, #8]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	bf0c      	ite	eq
 800bf62:	2301      	moveq	r3, #1
 800bf64:	2300      	movne	r3, #0
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	461a      	mov	r2, r3
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d1a3      	bne.n	800beb8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bf88:	4b1b      	ldr	r3, [pc, #108]	; (800bff8 <SPI_EndRxTxTransaction+0x7c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a1b      	ldr	r2, [pc, #108]	; (800bffc <SPI_EndRxTxTransaction+0x80>)
 800bf8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf92:	0d5b      	lsrs	r3, r3, #21
 800bf94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf98:	fb02 f303 	mul.w	r3, r2, r3
 800bf9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfa6:	d112      	bne.n	800bfce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2180      	movs	r1, #128	; 0x80
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7ff ff77 	bl	800bea6 <SPI_WaitFlagStateUntilTimeout>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d016      	beq.n	800bfec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc2:	f043 0220 	orr.w	r2, r3, #32
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	e00f      	b.n	800bfee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfe4:	2b80      	cmp	r3, #128	; 0x80
 800bfe6:	d0f2      	beq.n	800bfce <SPI_EndRxTxTransaction+0x52>
 800bfe8:	e000      	b.n	800bfec <SPI_EndRxTxTransaction+0x70>
        break;
 800bfea:	bf00      	nop
  }

  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	2000002c 	.word	0x2000002c
 800bffc:	165e9f81 	.word	0x165e9f81

0800c000 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c008:	4b35      	ldr	r3, [pc, #212]	; (800c0e0 <SPI_CloseRxTx_ISR+0xe0>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a35      	ldr	r2, [pc, #212]	; (800c0e4 <SPI_CloseRxTx_ISR+0xe4>)
 800c00e:	fba2 2303 	umull	r2, r3, r2, r3
 800c012:	0a5b      	lsrs	r3, r3, #9
 800c014:	2264      	movs	r2, #100	; 0x64
 800c016:	fb02 f303 	mul.w	r3, r2, r3
 800c01a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c01c:	f7fc feec 	bl	8008df8 <HAL_GetTick>
 800c020:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f022 0220 	bic.w	r2, r2, #32
 800c030:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d106      	bne.n	800c046 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03c:	f043 0220 	orr.w	r2, r3, #32
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c044:	e009      	b.n	800c05a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	3b01      	subs	r3, #1
 800c04a:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0eb      	beq.n	800c032 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	2164      	movs	r1, #100	; 0x64
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff ff8c 	bl	800bf7c <SPI_EndRxTxTransaction>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06e:	f043 0220 	orr.w	r2, r3, #32
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c07e:	2300      	movs	r3, #0
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	60fb      	str	r3, [r7, #12]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d115      	bne.n	800c0c8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	d107      	bne.n	800c0b8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7ff fe05 	bl	800bcc0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c0b6:	e00e      	b.n	800c0d6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff fe07 	bl	800bcd4 <HAL_SPI_TxRxCpltCallback>
}
 800c0c6:	e006      	b.n	800c0d6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff fe09 	bl	800bce8 <HAL_SPI_ErrorCallback>
}
 800c0d6:	bf00      	nop
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	2000002c 	.word	0x2000002c
 800c0e4:	057619f1 	.word	0x057619f1

0800c0e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e01d      	b.n	800c136 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f004 f8a6 	bl	8010260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2202      	movs	r2, #2
 800c118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3304      	adds	r3, #4
 800c124:	4619      	mov	r1, r3
 800c126:	4610      	mov	r0, r2
 800c128:	f000 fc0a 	bl	800c940 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e01d      	b.n	800c18c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d106      	bne.n	800c16a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f815 	bl	800c194 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2202      	movs	r2, #2
 800c16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3304      	adds	r3, #4
 800c17a:	4619      	mov	r1, r3
 800c17c:	4610      	mov	r0, r2
 800c17e:	f000 fbdf 	bl	800c940 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b0c      	cmp	r3, #12
 800c1b6:	d841      	bhi.n	800c23c <HAL_TIM_PWM_Start_IT+0x94>
 800c1b8:	a201      	add	r2, pc, #4	; (adr r2, 800c1c0 <HAL_TIM_PWM_Start_IT+0x18>)
 800c1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1be:	bf00      	nop
 800c1c0:	0800c1f5 	.word	0x0800c1f5
 800c1c4:	0800c23d 	.word	0x0800c23d
 800c1c8:	0800c23d 	.word	0x0800c23d
 800c1cc:	0800c23d 	.word	0x0800c23d
 800c1d0:	0800c207 	.word	0x0800c207
 800c1d4:	0800c23d 	.word	0x0800c23d
 800c1d8:	0800c23d 	.word	0x0800c23d
 800c1dc:	0800c23d 	.word	0x0800c23d
 800c1e0:	0800c219 	.word	0x0800c219
 800c1e4:	0800c23d 	.word	0x0800c23d
 800c1e8:	0800c23d 	.word	0x0800c23d
 800c1ec:	0800c23d 	.word	0x0800c23d
 800c1f0:	0800c22b 	.word	0x0800c22b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f042 0202 	orr.w	r2, r2, #2
 800c202:	60da      	str	r2, [r3, #12]
      break;
 800c204:	e01b      	b.n	800c23e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68da      	ldr	r2, [r3, #12]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f042 0204 	orr.w	r2, r2, #4
 800c214:	60da      	str	r2, [r3, #12]
      break;
 800c216:	e012      	b.n	800c23e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68da      	ldr	r2, [r3, #12]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f042 0208 	orr.w	r2, r2, #8
 800c226:	60da      	str	r2, [r3, #12]
      break;
 800c228:	e009      	b.n	800c23e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68da      	ldr	r2, [r3, #12]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f042 0210 	orr.w	r2, r2, #16
 800c238:	60da      	str	r2, [r3, #12]
      break;
 800c23a:	e000      	b.n	800c23e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800c23c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2201      	movs	r2, #1
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fe64 	bl	800cf14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a15      	ldr	r2, [pc, #84]	; (800c2a8 <HAL_TIM_PWM_Start_IT+0x100>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d004      	beq.n	800c260 <HAL_TIM_PWM_Start_IT+0xb8>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a14      	ldr	r2, [pc, #80]	; (800c2ac <HAL_TIM_PWM_Start_IT+0x104>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d101      	bne.n	800c264 <HAL_TIM_PWM_Start_IT+0xbc>
 800c260:	2301      	movs	r3, #1
 800c262:	e000      	b.n	800c266 <HAL_TIM_PWM_Start_IT+0xbe>
 800c264:	2300      	movs	r3, #0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d007      	beq.n	800c27a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c278:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0307 	and.w	r3, r3, #7
 800c284:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b06      	cmp	r3, #6
 800c28a:	d007      	beq.n	800c29c <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f042 0201 	orr.w	r2, r2, #1
 800c29a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	40010000 	.word	0x40010000
 800c2ac:	40010400 	.word	0x40010400

0800c2b0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b0c      	cmp	r3, #12
 800c2be:	d841      	bhi.n	800c344 <HAL_TIM_PWM_Stop_IT+0x94>
 800c2c0:	a201      	add	r2, pc, #4	; (adr r2, 800c2c8 <HAL_TIM_PWM_Stop_IT+0x18>)
 800c2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c6:	bf00      	nop
 800c2c8:	0800c2fd 	.word	0x0800c2fd
 800c2cc:	0800c345 	.word	0x0800c345
 800c2d0:	0800c345 	.word	0x0800c345
 800c2d4:	0800c345 	.word	0x0800c345
 800c2d8:	0800c30f 	.word	0x0800c30f
 800c2dc:	0800c345 	.word	0x0800c345
 800c2e0:	0800c345 	.word	0x0800c345
 800c2e4:	0800c345 	.word	0x0800c345
 800c2e8:	0800c321 	.word	0x0800c321
 800c2ec:	0800c345 	.word	0x0800c345
 800c2f0:	0800c345 	.word	0x0800c345
 800c2f4:	0800c345 	.word	0x0800c345
 800c2f8:	0800c333 	.word	0x0800c333
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f022 0202 	bic.w	r2, r2, #2
 800c30a:	60da      	str	r2, [r3, #12]
      break;
 800c30c:	e01b      	b.n	800c346 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68da      	ldr	r2, [r3, #12]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f022 0204 	bic.w	r2, r2, #4
 800c31c:	60da      	str	r2, [r3, #12]
      break;
 800c31e:	e012      	b.n	800c346 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68da      	ldr	r2, [r3, #12]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f022 0208 	bic.w	r2, r2, #8
 800c32e:	60da      	str	r2, [r3, #12]
      break;
 800c330:	e009      	b.n	800c346 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68da      	ldr	r2, [r3, #12]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f022 0210 	bic.w	r2, r2, #16
 800c340:	60da      	str	r2, [r3, #12]
      break;
 800c342:	e000      	b.n	800c346 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800c344:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2200      	movs	r2, #0
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 fde0 	bl	800cf14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a20      	ldr	r2, [pc, #128]	; (800c3dc <HAL_TIM_PWM_Stop_IT+0x12c>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d004      	beq.n	800c368 <HAL_TIM_PWM_Stop_IT+0xb8>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a1f      	ldr	r2, [pc, #124]	; (800c3e0 <HAL_TIM_PWM_Stop_IT+0x130>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d101      	bne.n	800c36c <HAL_TIM_PWM_Stop_IT+0xbc>
 800c368:	2301      	movs	r3, #1
 800c36a:	e000      	b.n	800c36e <HAL_TIM_PWM_Stop_IT+0xbe>
 800c36c:	2300      	movs	r3, #0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d017      	beq.n	800c3a2 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6a1a      	ldr	r2, [r3, #32]
 800c378:	f241 1311 	movw	r3, #4369	; 0x1111
 800c37c:	4013      	ands	r3, r2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10f      	bne.n	800c3a2 <HAL_TIM_PWM_Stop_IT+0xf2>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6a1a      	ldr	r2, [r3, #32]
 800c388:	f240 4344 	movw	r3, #1092	; 0x444
 800c38c:	4013      	ands	r3, r2
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d107      	bne.n	800c3a2 <HAL_TIM_PWM_Stop_IT+0xf2>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c3a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	6a1a      	ldr	r2, [r3, #32]
 800c3a8:	f241 1311 	movw	r3, #4369	; 0x1111
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10f      	bne.n	800c3d2 <HAL_TIM_PWM_Stop_IT+0x122>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6a1a      	ldr	r2, [r3, #32]
 800c3b8:	f240 4344 	movw	r3, #1092	; 0x444
 800c3bc:	4013      	ands	r3, r2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d107      	bne.n	800c3d2 <HAL_TIM_PWM_Stop_IT+0x122>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f022 0201 	bic.w	r2, r2, #1
 800c3d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	40010000 	.word	0x40010000
 800c3e0:	40010400 	.word	0x40010400

0800c3e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	f003 0302 	and.w	r3, r3, #2
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d122      	bne.n	800c440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b02      	cmp	r3, #2
 800c406:	d11b      	bne.n	800c440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0202 	mvn.w	r2, #2
 800c410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	f003 0303 	and.w	r3, r3, #3
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fa6b 	bl	800c902 <HAL_TIM_IC_CaptureCallback>
 800c42c:	e005      	b.n	800c43a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fa5d 	bl	800c8ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fa6e 	bl	800c916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	f003 0304 	and.w	r3, r3, #4
 800c44a:	2b04      	cmp	r3, #4
 800c44c:	d122      	bne.n	800c494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f003 0304 	and.w	r3, r3, #4
 800c458:	2b04      	cmp	r3, #4
 800c45a:	d11b      	bne.n	800c494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f06f 0204 	mvn.w	r2, #4
 800c464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2202      	movs	r2, #2
 800c46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fa41 	bl	800c902 <HAL_TIM_IC_CaptureCallback>
 800c480:	e005      	b.n	800c48e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa33 	bl	800c8ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fa44 	bl	800c916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	f003 0308 	and.w	r3, r3, #8
 800c49e:	2b08      	cmp	r3, #8
 800c4a0:	d122      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f003 0308 	and.w	r3, r3, #8
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d11b      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f06f 0208 	mvn.w	r2, #8
 800c4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2204      	movs	r2, #4
 800c4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	f003 0303 	and.w	r3, r3, #3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa17 	bl	800c902 <HAL_TIM_IC_CaptureCallback>
 800c4d4:	e005      	b.n	800c4e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa09 	bl	800c8ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fa1a 	bl	800c916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b10      	cmp	r3, #16
 800c4f4:	d122      	bne.n	800c53c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	f003 0310 	and.w	r3, r3, #16
 800c500:	2b10      	cmp	r3, #16
 800c502:	d11b      	bne.n	800c53c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f06f 0210 	mvn.w	r2, #16
 800c50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2208      	movs	r2, #8
 800c512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f9ed 	bl	800c902 <HAL_TIM_IC_CaptureCallback>
 800c528:	e005      	b.n	800c536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f9df 	bl	800c8ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f9f0 	bl	800c916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b01      	cmp	r3, #1
 800c548:	d10e      	bne.n	800c568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b01      	cmp	r3, #1
 800c556:	d107      	bne.n	800c568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f06f 0201 	mvn.w	r2, #1
 800c560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f003 ff5a 	bl	801041c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c572:	2b80      	cmp	r3, #128	; 0x80
 800c574:	d10e      	bne.n	800c594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c580:	2b80      	cmp	r3, #128	; 0x80
 800c582:	d107      	bne.n	800c594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fe51 	bl	800d236 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59e:	2b40      	cmp	r3, #64	; 0x40
 800c5a0:	d10e      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ac:	2b40      	cmp	r3, #64	; 0x40
 800c5ae:	d107      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9b5 	bl	800c92a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f003 0320 	and.w	r3, r3, #32
 800c5ca:	2b20      	cmp	r3, #32
 800c5cc:	d10e      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f003 0320 	and.w	r3, r3, #32
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d107      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f06f 0220 	mvn.w	r2, #32
 800c5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fe1b 	bl	800d222 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c606:	2b01      	cmp	r3, #1
 800c608:	d101      	bne.n	800c60e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c60a:	2302      	movs	r3, #2
 800c60c:	e0b4      	b.n	800c778 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2202      	movs	r2, #2
 800c61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b0c      	cmp	r3, #12
 800c622:	f200 809f 	bhi.w	800c764 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c626:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62c:	0800c661 	.word	0x0800c661
 800c630:	0800c765 	.word	0x0800c765
 800c634:	0800c765 	.word	0x0800c765
 800c638:	0800c765 	.word	0x0800c765
 800c63c:	0800c6a1 	.word	0x0800c6a1
 800c640:	0800c765 	.word	0x0800c765
 800c644:	0800c765 	.word	0x0800c765
 800c648:	0800c765 	.word	0x0800c765
 800c64c:	0800c6e3 	.word	0x0800c6e3
 800c650:	0800c765 	.word	0x0800c765
 800c654:	0800c765 	.word	0x0800c765
 800c658:	0800c765 	.word	0x0800c765
 800c65c:	0800c723 	.word	0x0800c723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68b9      	ldr	r1, [r7, #8]
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fa0a 	bl	800ca80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	699a      	ldr	r2, [r3, #24]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f042 0208 	orr.w	r2, r2, #8
 800c67a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	699a      	ldr	r2, [r3, #24]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f022 0204 	bic.w	r2, r2, #4
 800c68a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6999      	ldr	r1, [r3, #24]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	691a      	ldr	r2, [r3, #16]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	430a      	orrs	r2, r1
 800c69c:	619a      	str	r2, [r3, #24]
      break;
 800c69e:	e062      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68b9      	ldr	r1, [r7, #8]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fa5a 	bl	800cb60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	699a      	ldr	r2, [r3, #24]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	699a      	ldr	r2, [r3, #24]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6999      	ldr	r1, [r3, #24]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	021a      	lsls	r2, r3, #8
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	619a      	str	r2, [r3, #24]
      break;
 800c6e0:	e041      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68b9      	ldr	r1, [r7, #8]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 faaf 	bl	800cc4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	69da      	ldr	r2, [r3, #28]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0208 	orr.w	r2, r2, #8
 800c6fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	69da      	ldr	r2, [r3, #28]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 0204 	bic.w	r2, r2, #4
 800c70c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	69d9      	ldr	r1, [r3, #28]
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	691a      	ldr	r2, [r3, #16]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	61da      	str	r2, [r3, #28]
      break;
 800c720:	e021      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68b9      	ldr	r1, [r7, #8]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 fb03 	bl	800cd34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	69da      	ldr	r2, [r3, #28]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c73c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	69da      	ldr	r2, [r3, #28]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c74c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	69d9      	ldr	r1, [r3, #28]
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	021a      	lsls	r2, r3, #8
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	430a      	orrs	r2, r1
 800c760:	61da      	str	r2, [r3, #28]
      break;
 800c762:	e000      	b.n	800c766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c764:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c790:	2b01      	cmp	r3, #1
 800c792:	d101      	bne.n	800c798 <HAL_TIM_ConfigClockSource+0x18>
 800c794:	2302      	movs	r3, #2
 800c796:	e0a6      	b.n	800c8e6 <HAL_TIM_ConfigClockSource+0x166>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c7b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b40      	cmp	r3, #64	; 0x40
 800c7ce:	d067      	beq.n	800c8a0 <HAL_TIM_ConfigClockSource+0x120>
 800c7d0:	2b40      	cmp	r3, #64	; 0x40
 800c7d2:	d80b      	bhi.n	800c7ec <HAL_TIM_ConfigClockSource+0x6c>
 800c7d4:	2b10      	cmp	r3, #16
 800c7d6:	d073      	beq.n	800c8c0 <HAL_TIM_ConfigClockSource+0x140>
 800c7d8:	2b10      	cmp	r3, #16
 800c7da:	d802      	bhi.n	800c7e2 <HAL_TIM_ConfigClockSource+0x62>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d06f      	beq.n	800c8c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c7e0:	e078      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c7e2:	2b20      	cmp	r3, #32
 800c7e4:	d06c      	beq.n	800c8c0 <HAL_TIM_ConfigClockSource+0x140>
 800c7e6:	2b30      	cmp	r3, #48	; 0x30
 800c7e8:	d06a      	beq.n	800c8c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c7ea:	e073      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c7ec:	2b70      	cmp	r3, #112	; 0x70
 800c7ee:	d00d      	beq.n	800c80c <HAL_TIM_ConfigClockSource+0x8c>
 800c7f0:	2b70      	cmp	r3, #112	; 0x70
 800c7f2:	d804      	bhi.n	800c7fe <HAL_TIM_ConfigClockSource+0x7e>
 800c7f4:	2b50      	cmp	r3, #80	; 0x50
 800c7f6:	d033      	beq.n	800c860 <HAL_TIM_ConfigClockSource+0xe0>
 800c7f8:	2b60      	cmp	r3, #96	; 0x60
 800c7fa:	d041      	beq.n	800c880 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c7fc:	e06a      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c7fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c802:	d066      	beq.n	800c8d2 <HAL_TIM_ConfigClockSource+0x152>
 800c804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c808:	d017      	beq.n	800c83a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c80a:	e063      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6818      	ldr	r0, [r3, #0]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	6899      	ldr	r1, [r3, #8]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f000 fb5a 	bl	800ced4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c82e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	609a      	str	r2, [r3, #8]
      break;
 800c838:	e04c      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6818      	ldr	r0, [r3, #0]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	6899      	ldr	r1, [r3, #8]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f000 fb43 	bl	800ced4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c85c:	609a      	str	r2, [r3, #8]
      break;
 800c85e:	e039      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6818      	ldr	r0, [r3, #0]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	6859      	ldr	r1, [r3, #4]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	461a      	mov	r2, r3
 800c86e:	f000 fab7 	bl	800cde0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2150      	movs	r1, #80	; 0x50
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fb10 	bl	800ce9e <TIM_ITRx_SetConfig>
      break;
 800c87e:	e029      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	6859      	ldr	r1, [r3, #4]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	461a      	mov	r2, r3
 800c88e:	f000 fad6 	bl	800ce3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2160      	movs	r1, #96	; 0x60
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 fb00 	bl	800ce9e <TIM_ITRx_SetConfig>
      break;
 800c89e:	e019      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	6859      	ldr	r1, [r3, #4]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	f000 fa97 	bl	800cde0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2140      	movs	r1, #64	; 0x40
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 faf0 	bl	800ce9e <TIM_ITRx_SetConfig>
      break;
 800c8be:	e009      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	f000 fae7 	bl	800ce9e <TIM_ITRx_SetConfig>
      break;
 800c8d0:	e000      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c8d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b083      	sub	sp, #12
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8f6:	bf00      	nop
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c902:	b480      	push	{r7}
 800c904:	b083      	sub	sp, #12
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c90a:	bf00      	nop
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c916:	b480      	push	{r7}
 800c918:	b083      	sub	sp, #12
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c932:	bf00      	nop
 800c934:	370c      	adds	r7, #12
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
	...

0800c940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a40      	ldr	r2, [pc, #256]	; (800ca54 <TIM_Base_SetConfig+0x114>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d013      	beq.n	800c980 <TIM_Base_SetConfig+0x40>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c95e:	d00f      	beq.n	800c980 <TIM_Base_SetConfig+0x40>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a3d      	ldr	r2, [pc, #244]	; (800ca58 <TIM_Base_SetConfig+0x118>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d00b      	beq.n	800c980 <TIM_Base_SetConfig+0x40>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a3c      	ldr	r2, [pc, #240]	; (800ca5c <TIM_Base_SetConfig+0x11c>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d007      	beq.n	800c980 <TIM_Base_SetConfig+0x40>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a3b      	ldr	r2, [pc, #236]	; (800ca60 <TIM_Base_SetConfig+0x120>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d003      	beq.n	800c980 <TIM_Base_SetConfig+0x40>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a3a      	ldr	r2, [pc, #232]	; (800ca64 <TIM_Base_SetConfig+0x124>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d108      	bne.n	800c992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a2f      	ldr	r2, [pc, #188]	; (800ca54 <TIM_Base_SetConfig+0x114>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d02b      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9a0:	d027      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a2c      	ldr	r2, [pc, #176]	; (800ca58 <TIM_Base_SetConfig+0x118>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d023      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a2b      	ldr	r2, [pc, #172]	; (800ca5c <TIM_Base_SetConfig+0x11c>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d01f      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a2a      	ldr	r2, [pc, #168]	; (800ca60 <TIM_Base_SetConfig+0x120>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d01b      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a29      	ldr	r2, [pc, #164]	; (800ca64 <TIM_Base_SetConfig+0x124>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d017      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a28      	ldr	r2, [pc, #160]	; (800ca68 <TIM_Base_SetConfig+0x128>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d013      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a27      	ldr	r2, [pc, #156]	; (800ca6c <TIM_Base_SetConfig+0x12c>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00f      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a26      	ldr	r2, [pc, #152]	; (800ca70 <TIM_Base_SetConfig+0x130>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d00b      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a25      	ldr	r2, [pc, #148]	; (800ca74 <TIM_Base_SetConfig+0x134>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d007      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a24      	ldr	r2, [pc, #144]	; (800ca78 <TIM_Base_SetConfig+0x138>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d003      	beq.n	800c9f2 <TIM_Base_SetConfig+0xb2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a23      	ldr	r2, [pc, #140]	; (800ca7c <TIM_Base_SetConfig+0x13c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d108      	bne.n	800ca04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	695b      	ldr	r3, [r3, #20]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a0a      	ldr	r2, [pc, #40]	; (800ca54 <TIM_Base_SetConfig+0x114>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d003      	beq.n	800ca38 <TIM_Base_SetConfig+0xf8>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a0c      	ldr	r2, [pc, #48]	; (800ca64 <TIM_Base_SetConfig+0x124>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d103      	bne.n	800ca40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	691a      	ldr	r2, [r3, #16]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	615a      	str	r2, [r3, #20]
}
 800ca46:	bf00      	nop
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	40010000 	.word	0x40010000
 800ca58:	40000400 	.word	0x40000400
 800ca5c:	40000800 	.word	0x40000800
 800ca60:	40000c00 	.word	0x40000c00
 800ca64:	40010400 	.word	0x40010400
 800ca68:	40014000 	.word	0x40014000
 800ca6c:	40014400 	.word	0x40014400
 800ca70:	40014800 	.word	0x40014800
 800ca74:	40001800 	.word	0x40001800
 800ca78:	40001c00 	.word	0x40001c00
 800ca7c:	40002000 	.word	0x40002000

0800ca80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	f023 0201 	bic.w	r2, r3, #1
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f023 0302 	bic.w	r3, r3, #2
 800cac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a20      	ldr	r2, [pc, #128]	; (800cb58 <TIM_OC1_SetConfig+0xd8>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d003      	beq.n	800cae4 <TIM_OC1_SetConfig+0x64>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a1f      	ldr	r2, [pc, #124]	; (800cb5c <TIM_OC1_SetConfig+0xdc>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d10c      	bne.n	800cafe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	f023 0308 	bic.w	r3, r3, #8
 800caea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	697a      	ldr	r2, [r7, #20]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f023 0304 	bic.w	r3, r3, #4
 800cafc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a15      	ldr	r2, [pc, #84]	; (800cb58 <TIM_OC1_SetConfig+0xd8>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d003      	beq.n	800cb0e <TIM_OC1_SetConfig+0x8e>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a14      	ldr	r2, [pc, #80]	; (800cb5c <TIM_OC1_SetConfig+0xdc>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d111      	bne.n	800cb32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	621a      	str	r2, [r3, #32]
}
 800cb4c:	bf00      	nop
 800cb4e:	371c      	adds	r7, #28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	40010000 	.word	0x40010000
 800cb5c:	40010400 	.word	0x40010400

0800cb60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b087      	sub	sp, #28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	f023 0210 	bic.w	r2, r3, #16
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	021b      	lsls	r3, r3, #8
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	f023 0320 	bic.w	r3, r3, #32
 800cbaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	011b      	lsls	r3, r3, #4
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a22      	ldr	r2, [pc, #136]	; (800cc44 <TIM_OC2_SetConfig+0xe4>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d003      	beq.n	800cbc8 <TIM_OC2_SetConfig+0x68>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a21      	ldr	r2, [pc, #132]	; (800cc48 <TIM_OC2_SetConfig+0xe8>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d10d      	bne.n	800cbe4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	011b      	lsls	r3, r3, #4
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a17      	ldr	r2, [pc, #92]	; (800cc44 <TIM_OC2_SetConfig+0xe4>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d003      	beq.n	800cbf4 <TIM_OC2_SetConfig+0x94>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a16      	ldr	r2, [pc, #88]	; (800cc48 <TIM_OC2_SetConfig+0xe8>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d113      	bne.n	800cc1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cbfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	699b      	ldr	r3, [r3, #24]
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	693a      	ldr	r2, [r7, #16]
 800cc20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	621a      	str	r2, [r3, #32]
}
 800cc36:	bf00      	nop
 800cc38:	371c      	adds	r7, #28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	40010000 	.word	0x40010000
 800cc48:	40010400 	.word	0x40010400

0800cc4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b087      	sub	sp, #28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	69db      	ldr	r3, [r3, #28]
 800cc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	021b      	lsls	r3, r3, #8
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a21      	ldr	r2, [pc, #132]	; (800cd2c <TIM_OC3_SetConfig+0xe0>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d003      	beq.n	800ccb2 <TIM_OC3_SetConfig+0x66>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a20      	ldr	r2, [pc, #128]	; (800cd30 <TIM_OC3_SetConfig+0xe4>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d10d      	bne.n	800ccce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	021b      	lsls	r3, r3, #8
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a16      	ldr	r2, [pc, #88]	; (800cd2c <TIM_OC3_SetConfig+0xe0>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d003      	beq.n	800ccde <TIM_OC3_SetConfig+0x92>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a15      	ldr	r2, [pc, #84]	; (800cd30 <TIM_OC3_SetConfig+0xe4>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d113      	bne.n	800cd06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	011b      	lsls	r3, r3, #4
 800ccf4:	693a      	ldr	r2, [r7, #16]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	699b      	ldr	r3, [r3, #24]
 800ccfe:	011b      	lsls	r3, r3, #4
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	685a      	ldr	r2, [r3, #4]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	621a      	str	r2, [r3, #32]
}
 800cd20:	bf00      	nop
 800cd22:	371c      	adds	r7, #28
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr
 800cd2c:	40010000 	.word	0x40010000
 800cd30:	40010400 	.word	0x40010400

0800cd34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	021b      	lsls	r3, r3, #8
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	031b      	lsls	r3, r3, #12
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a12      	ldr	r2, [pc, #72]	; (800cdd8 <TIM_OC4_SetConfig+0xa4>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d003      	beq.n	800cd9c <TIM_OC4_SetConfig+0x68>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a11      	ldr	r2, [pc, #68]	; (800cddc <TIM_OC4_SetConfig+0xa8>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d109      	bne.n	800cdb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cda2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	019b      	lsls	r3, r3, #6
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	685a      	ldr	r2, [r3, #4]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	621a      	str	r2, [r3, #32]
}
 800cdca:	bf00      	nop
 800cdcc:	371c      	adds	r7, #28
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	40010000 	.word	0x40010000
 800cddc:	40010400 	.word	0x40010400

0800cde0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6a1b      	ldr	r3, [r3, #32]
 800cdf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	f023 0201 	bic.w	r2, r3, #1
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	011b      	lsls	r3, r3, #4
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	f023 030a 	bic.w	r3, r3, #10
 800ce1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	693a      	ldr	r2, [r7, #16]
 800ce2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	697a      	ldr	r2, [r7, #20]
 800ce30:	621a      	str	r2, [r3, #32]
}
 800ce32:	bf00      	nop
 800ce34:	371c      	adds	r7, #28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr

0800ce3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce3e:	b480      	push	{r7}
 800ce40:	b087      	sub	sp, #28
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	60f8      	str	r0, [r7, #12]
 800ce46:	60b9      	str	r1, [r7, #8]
 800ce48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	f023 0210 	bic.w	r2, r3, #16
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6a1b      	ldr	r3, [r3, #32]
 800ce60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	031b      	lsls	r3, r3, #12
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	011b      	lsls	r3, r3, #4
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	621a      	str	r2, [r3, #32]
}
 800ce92:	bf00      	nop
 800ce94:	371c      	adds	r7, #28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce9e:	b480      	push	{r7}
 800cea0:	b085      	sub	sp, #20
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	f043 0307 	orr.w	r3, r3, #7
 800cec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	609a      	str	r2, [r3, #8]
}
 800cec8:	bf00      	nop
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ceee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	021a      	lsls	r2, r3, #8
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	431a      	orrs	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	4313      	orrs	r3, r2
 800cf00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	697a      	ldr	r2, [r7, #20]
 800cf06:	609a      	str	r2, [r3, #8]
}
 800cf08:	bf00      	nop
 800cf0a:	371c      	adds	r7, #28
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b087      	sub	sp, #28
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	f003 031f 	and.w	r3, r3, #31
 800cf26:	2201      	movs	r2, #1
 800cf28:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6a1a      	ldr	r2, [r3, #32]
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	43db      	mvns	r3, r3
 800cf36:	401a      	ands	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6a1a      	ldr	r2, [r3, #32]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f003 031f 	and.w	r3, r3, #31
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	621a      	str	r2, [r3, #32]
}
 800cf52:	bf00      	nop
 800cf54:	371c      	adds	r7, #28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b084      	sub	sp, #16
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d00d      	beq.n	800cf8a <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800cf6e:	2b08      	cmp	r3, #8
 800cf70:	d014      	beq.n	800cf9c <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d000      	beq.n	800cf78 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800cf76:	e01a      	b.n	800cfae <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	68da      	ldr	r2, [r3, #12]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f042 0202 	orr.w	r2, r2, #2
 800cf86:	60da      	str	r2, [r3, #12]
      break;
 800cf88:	e011      	b.n	800cfae <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68da      	ldr	r2, [r3, #12]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f042 0204 	orr.w	r2, r2, #4
 800cf98:	60da      	str	r2, [r3, #12]
      break;
 800cf9a:	e008      	b.n	800cfae <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68da      	ldr	r2, [r3, #12]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f042 0208 	orr.w	r2, r2, #8
 800cfaa:	60da      	str	r2, [r3, #12]
      break;
 800cfac:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	68da      	ldr	r2, [r3, #12]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cfbc:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2204      	movs	r2, #4
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 f93f 	bl	800d24a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	f003 0307 	and.w	r3, r3, #7
 800cfe6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b06      	cmp	r3, #6
 800cfec:	d007      	beq.n	800cffe <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f042 0201 	orr.w	r2, r2, #1
 800cffc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b04      	cmp	r3, #4
 800d016:	d00d      	beq.n	800d034 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d018:	2b08      	cmp	r3, #8
 800d01a:	d014      	beq.n	800d046 <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d000      	beq.n	800d022 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d020:	e01a      	b.n	800d058 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68da      	ldr	r2, [r3, #12]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f022 0202 	bic.w	r2, r2, #2
 800d030:	60da      	str	r2, [r3, #12]
      break;
 800d032:	e011      	b.n	800d058 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68da      	ldr	r2, [r3, #12]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0204 	bic.w	r2, r2, #4
 800d042:	60da      	str	r2, [r3, #12]
      break;
 800d044:	e008      	b.n	800d058 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68da      	ldr	r2, [r3, #12]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f022 0208 	bic.w	r2, r2, #8
 800d054:	60da      	str	r2, [r3, #12]
      break;
 800d056:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2200      	movs	r2, #0
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	4618      	mov	r0, r3
 800d062:	f000 f8f2 	bl	800d24a <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	6a1b      	ldr	r3, [r3, #32]
 800d06c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	f240 4344 	movw	r3, #1092	; 0x444
 800d074:	4013      	ands	r3, r2
 800d076:	2b00      	cmp	r3, #0
 800d078:	d107      	bne.n	800d08a <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68da      	ldr	r2, [r3, #12]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d088:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6a1a      	ldr	r2, [r3, #32]
 800d090:	f241 1311 	movw	r3, #4369	; 0x1111
 800d094:	4013      	ands	r3, r2
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10f      	bne.n	800d0ba <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6a1a      	ldr	r2, [r3, #32]
 800d0a0:	f240 4344 	movw	r3, #1092	; 0x444
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d107      	bne.n	800d0ba <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6a1a      	ldr	r2, [r3, #32]
 800d0c0:	f241 1311 	movw	r3, #4369	; 0x1111
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10f      	bne.n	800d0ea <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6a1a      	ldr	r2, [r3, #32]
 800d0d0:	f240 4344 	movw	r3, #1092	; 0x444
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d107      	bne.n	800d0ea <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f022 0201 	bic.w	r2, r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d104:	2b01      	cmp	r3, #1
 800d106:	d101      	bne.n	800d10c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d108:	2302      	movs	r3, #2
 800d10a:	e032      	b.n	800d172 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d144:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d17e:	b480      	push	{r7}
 800d180:	b085      	sub	sp, #20
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d188:	2300      	movs	r3, #0
 800d18a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d192:	2b01      	cmp	r3, #1
 800d194:	d101      	bne.n	800d19a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d196:	2302      	movs	r3, #2
 800d198:	e03d      	b.n	800d216 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	4313      	orrs	r3, r2
 800d202:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d222:	b480      	push	{r7}
 800d224:	b083      	sub	sp, #12
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d22a:	bf00      	nop
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d236:	b480      	push	{r7}
 800d238:	b083      	sub	sp, #12
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d23e:	bf00      	nop
 800d240:	370c      	adds	r7, #12
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b087      	sub	sp, #28
 800d24e:	af00      	add	r7, sp, #0
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	f003 031f 	and.w	r3, r3, #31
 800d25c:	2204      	movs	r2, #4
 800d25e:	fa02 f303 	lsl.w	r3, r2, r3
 800d262:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6a1a      	ldr	r2, [r3, #32]
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	43db      	mvns	r3, r3
 800d26c:	401a      	ands	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6a1a      	ldr	r2, [r3, #32]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	f003 031f 	and.w	r3, r3, #31
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	fa01 f303 	lsl.w	r3, r1, r3
 800d282:	431a      	orrs	r2, r3
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	621a      	str	r2, [r3, #32]
}
 800d288:	bf00      	nop
 800d28a:	371c      	adds	r7, #28
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e03f      	b.n	800d326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d106      	bne.n	800d2c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f003 f922 	bl	8010504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2224      	movs	r2, #36	; 0x24
 800d2c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	68da      	ldr	r2, [r3, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fa65 	bl	800d7a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	691a      	ldr	r2, [r3, #16]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d2ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	695a      	ldr	r2, [r3, #20]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d2fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d30c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2220      	movs	r2, #32
 800d318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2220      	movs	r2, #32
 800d320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
	...

0800d330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d350:	2300      	movs	r3, #0
 800d352:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d354:	2300      	movs	r3, #0
 800d356:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	f003 030f 	and.w	r3, r3, #15
 800d35e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10d      	bne.n	800d382 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	f003 0320 	and.w	r3, r3, #32
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d008      	beq.n	800d382 <HAL_UART_IRQHandler+0x52>
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	f003 0320 	and.w	r3, r3, #32
 800d376:	2b00      	cmp	r3, #0
 800d378:	d003      	beq.n	800d382 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f992 	bl	800d6a4 <UART_Receive_IT>
      return;
 800d380:	e0cc      	b.n	800d51c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 80ab 	beq.w	800d4e0 <HAL_UART_IRQHandler+0x1b0>
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f003 0301 	and.w	r3, r3, #1
 800d390:	2b00      	cmp	r3, #0
 800d392:	d105      	bne.n	800d3a0 <HAL_UART_IRQHandler+0x70>
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 80a0 	beq.w	800d4e0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00a      	beq.n	800d3c0 <HAL_UART_IRQHandler+0x90>
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d005      	beq.n	800d3c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b8:	f043 0201 	orr.w	r2, r3, #1
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	f003 0304 	and.w	r3, r3, #4
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00a      	beq.n	800d3e0 <HAL_UART_IRQHandler+0xb0>
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d8:	f043 0202 	orr.w	r2, r3, #2
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	f003 0302 	and.w	r3, r3, #2
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00a      	beq.n	800d400 <HAL_UART_IRQHandler+0xd0>
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	f003 0301 	and.w	r3, r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f8:	f043 0204 	orr.w	r2, r3, #4
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f003 0308 	and.w	r3, r3, #8
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00a      	beq.n	800d420 <HAL_UART_IRQHandler+0xf0>
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f003 0301 	and.w	r3, r3, #1
 800d410:	2b00      	cmp	r3, #0
 800d412:	d005      	beq.n	800d420 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d418:	f043 0208 	orr.w	r2, r3, #8
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d424:	2b00      	cmp	r3, #0
 800d426:	d078      	beq.n	800d51a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	f003 0320 	and.w	r3, r3, #32
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d007      	beq.n	800d442 <HAL_UART_IRQHandler+0x112>
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	f003 0320 	and.w	r3, r3, #32
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f931 	bl	800d6a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44c:	2b40      	cmp	r3, #64	; 0x40
 800d44e:	bf0c      	ite	eq
 800d450:	2301      	moveq	r3, #1
 800d452:	2300      	movne	r3, #0
 800d454:	b2db      	uxtb	r3, r3
 800d456:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45c:	f003 0308 	and.w	r3, r3, #8
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <HAL_UART_IRQHandler+0x13a>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d031      	beq.n	800d4ce <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f87a 	bl	800d564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d47a:	2b40      	cmp	r3, #64	; 0x40
 800d47c:	d123      	bne.n	800d4c6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	695a      	ldr	r2, [r3, #20]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d48c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d492:	2b00      	cmp	r3, #0
 800d494:	d013      	beq.n	800d4be <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49a:	4a22      	ldr	r2, [pc, #136]	; (800d524 <HAL_UART_IRQHandler+0x1f4>)
 800d49c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fc ff14 	bl	800a2d0 <HAL_DMA_Abort_IT>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d016      	beq.n	800d4dc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4bc:	e00e      	b.n	800d4dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f846 	bl	800d550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c4:	e00a      	b.n	800d4dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f842 	bl	800d550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4cc:	e006      	b.n	800d4dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f83e 	bl	800d550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d4da:	e01e      	b.n	800d51a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4dc:	bf00      	nop
    return;
 800d4de:	e01c      	b.n	800d51a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d008      	beq.n	800d4fc <HAL_UART_IRQHandler+0x1cc>
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f867 	bl	800d5c8 <UART_Transmit_IT>
    return;
 800d4fa:	e00f      	b.n	800d51c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00a      	beq.n	800d51c <HAL_UART_IRQHandler+0x1ec>
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d005      	beq.n	800d51c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f8af 	bl	800d674 <UART_EndTransmit_IT>
    return;
 800d516:	bf00      	nop
 800d518:	e000      	b.n	800d51c <HAL_UART_IRQHandler+0x1ec>
    return;
 800d51a:	bf00      	nop
  }
}
 800d51c:	3720      	adds	r7, #32
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	0800d5a1 	.word	0x0800d5a1

0800d528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68da      	ldr	r2, [r3, #12]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d57a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	695a      	ldr	r2, [r3, #20]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f022 0201 	bic.w	r2, r2, #1
 800d58a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2220      	movs	r2, #32
 800d590:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f7ff ffc8 	bl	800d550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5c0:	bf00      	nop
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	2b21      	cmp	r3, #33	; 0x21
 800d5da:	d144      	bne.n	800d666 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5e4:	d11a      	bne.n	800d61c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5fa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d105      	bne.n	800d610 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	1c9a      	adds	r2, r3, #2
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	621a      	str	r2, [r3, #32]
 800d60e:	e00e      	b.n	800d62e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6a1b      	ldr	r3, [r3, #32]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	621a      	str	r2, [r3, #32]
 800d61a:	e008      	b.n	800d62e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a1b      	ldr	r3, [r3, #32]
 800d620:	1c59      	adds	r1, r3, #1
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	6211      	str	r1, [r2, #32]
 800d626:	781a      	ldrb	r2, [r3, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d632:	b29b      	uxth	r3, r3
 800d634:	3b01      	subs	r3, #1
 800d636:	b29b      	uxth	r3, r3
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	4619      	mov	r1, r3
 800d63c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10f      	bne.n	800d662 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68da      	ldr	r2, [r3, #12]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d650:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68da      	ldr	r2, [r3, #12]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d660:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	e000      	b.n	800d668 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d666:	2302      	movs	r3, #2
  }
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3714      	adds	r7, #20
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d68a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2220      	movs	r2, #32
 800d690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ff47 	bl	800d528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b22      	cmp	r3, #34	; 0x22
 800d6b6:	d171      	bne.n	800d79c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6c0:	d123      	bne.n	800d70a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10e      	bne.n	800d6ee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e6:	1c9a      	adds	r2, r3, #2
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	629a      	str	r2, [r3, #40]	; 0x28
 800d6ec:	e029      	b.n	800d742 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d702:	1c5a      	adds	r2, r3, #1
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	629a      	str	r2, [r3, #40]	; 0x28
 800d708:	e01b      	b.n	800d742 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	6858      	ldr	r0, [r3, #4]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d71c:	1c59      	adds	r1, r3, #1
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	6291      	str	r1, [r2, #40]	; 0x28
 800d722:	b2c2      	uxtb	r2, r0
 800d724:	701a      	strb	r2, [r3, #0]
 800d726:	e00c      	b.n	800d742 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d734:	1c58      	adds	r0, r3, #1
 800d736:	6879      	ldr	r1, [r7, #4]
 800d738:	6288      	str	r0, [r1, #40]	; 0x28
 800d73a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d73e:	b2d2      	uxtb	r2, r2
 800d740:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d746:	b29b      	uxth	r3, r3
 800d748:	3b01      	subs	r3, #1
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	4619      	mov	r1, r3
 800d750:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d752:	2b00      	cmp	r3, #0
 800d754:	d120      	bne.n	800d798 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68da      	ldr	r2, [r3, #12]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f022 0220 	bic.w	r2, r2, #32
 800d764:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	68da      	ldr	r2, [r3, #12]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d774:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	695a      	ldr	r2, [r3, #20]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f022 0201 	bic.w	r2, r2, #1
 800d784:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2220      	movs	r2, #32
 800d78a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff fed4 	bl	800d53c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	e002      	b.n	800d79e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	e000      	b.n	800d79e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d79c:	2302      	movs	r3, #2
  }
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
	...

0800d7a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7a8:	b5b0      	push	{r4, r5, r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	68da      	ldr	r2, [r3, #12]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689a      	ldr	r2, [r3, #8]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	431a      	orrs	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	431a      	orrs	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	69db      	ldr	r3, [r3, #28]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d7e8:	f023 030c 	bic.w	r3, r3, #12
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	6812      	ldr	r2, [r2, #0]
 800d7f0:	68f9      	ldr	r1, [r7, #12]
 800d7f2:	430b      	orrs	r3, r1
 800d7f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	699a      	ldr	r2, [r3, #24]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	430a      	orrs	r2, r1
 800d80a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	69db      	ldr	r3, [r3, #28]
 800d810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d814:	f040 80e4 	bne.w	800d9e0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4aab      	ldr	r2, [pc, #684]	; (800dacc <UART_SetConfig+0x324>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d004      	beq.n	800d82c <UART_SetConfig+0x84>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4aaa      	ldr	r2, [pc, #680]	; (800dad0 <UART_SetConfig+0x328>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d16c      	bne.n	800d906 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d82c:	f7fd faa0 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800d830:	4602      	mov	r2, r0
 800d832:	4613      	mov	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4413      	add	r3, r2
 800d838:	009a      	lsls	r2, r3, #2
 800d83a:	441a      	add	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	fbb2 f3f3 	udiv	r3, r2, r3
 800d846:	4aa3      	ldr	r2, [pc, #652]	; (800dad4 <UART_SetConfig+0x32c>)
 800d848:	fba2 2303 	umull	r2, r3, r2, r3
 800d84c:	095b      	lsrs	r3, r3, #5
 800d84e:	011c      	lsls	r4, r3, #4
 800d850:	f7fd fa8e 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800d854:	4602      	mov	r2, r0
 800d856:	4613      	mov	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	009a      	lsls	r2, r3, #2
 800d85e:	441a      	add	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	005b      	lsls	r3, r3, #1
 800d866:	fbb2 f5f3 	udiv	r5, r2, r3
 800d86a:	f7fd fa81 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800d86e:	4602      	mov	r2, r0
 800d870:	4613      	mov	r3, r2
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	4413      	add	r3, r2
 800d876:	009a      	lsls	r2, r3, #2
 800d878:	441a      	add	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	fbb2 f3f3 	udiv	r3, r2, r3
 800d884:	4a93      	ldr	r2, [pc, #588]	; (800dad4 <UART_SetConfig+0x32c>)
 800d886:	fba2 2303 	umull	r2, r3, r2, r3
 800d88a:	095b      	lsrs	r3, r3, #5
 800d88c:	2264      	movs	r2, #100	; 0x64
 800d88e:	fb02 f303 	mul.w	r3, r2, r3
 800d892:	1aeb      	subs	r3, r5, r3
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	3332      	adds	r3, #50	; 0x32
 800d898:	4a8e      	ldr	r2, [pc, #568]	; (800dad4 <UART_SetConfig+0x32c>)
 800d89a:	fba2 2303 	umull	r2, r3, r2, r3
 800d89e:	095b      	lsrs	r3, r3, #5
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d8a6:	441c      	add	r4, r3
 800d8a8:	f7fd fa62 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	4413      	add	r3, r2
 800d8b4:	009a      	lsls	r2, r3, #2
 800d8b6:	441a      	add	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	005b      	lsls	r3, r3, #1
 800d8be:	fbb2 f5f3 	udiv	r5, r2, r3
 800d8c2:	f7fd fa55 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4413      	add	r3, r2
 800d8ce:	009a      	lsls	r2, r3, #2
 800d8d0:	441a      	add	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	005b      	lsls	r3, r3, #1
 800d8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8dc:	4a7d      	ldr	r2, [pc, #500]	; (800dad4 <UART_SetConfig+0x32c>)
 800d8de:	fba2 2303 	umull	r2, r3, r2, r3
 800d8e2:	095b      	lsrs	r3, r3, #5
 800d8e4:	2264      	movs	r2, #100	; 0x64
 800d8e6:	fb02 f303 	mul.w	r3, r2, r3
 800d8ea:	1aeb      	subs	r3, r5, r3
 800d8ec:	00db      	lsls	r3, r3, #3
 800d8ee:	3332      	adds	r3, #50	; 0x32
 800d8f0:	4a78      	ldr	r2, [pc, #480]	; (800dad4 <UART_SetConfig+0x32c>)
 800d8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f6:	095b      	lsrs	r3, r3, #5
 800d8f8:	f003 0207 	and.w	r2, r3, #7
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4422      	add	r2, r4
 800d902:	609a      	str	r2, [r3, #8]
 800d904:	e154      	b.n	800dbb0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d906:	f7fd fa1f 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800d90a:	4602      	mov	r2, r0
 800d90c:	4613      	mov	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4413      	add	r3, r2
 800d912:	009a      	lsls	r2, r3, #2
 800d914:	441a      	add	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	005b      	lsls	r3, r3, #1
 800d91c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d920:	4a6c      	ldr	r2, [pc, #432]	; (800dad4 <UART_SetConfig+0x32c>)
 800d922:	fba2 2303 	umull	r2, r3, r2, r3
 800d926:	095b      	lsrs	r3, r3, #5
 800d928:	011c      	lsls	r4, r3, #4
 800d92a:	f7fd fa0d 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800d92e:	4602      	mov	r2, r0
 800d930:	4613      	mov	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	4413      	add	r3, r2
 800d936:	009a      	lsls	r2, r3, #2
 800d938:	441a      	add	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	fbb2 f5f3 	udiv	r5, r2, r3
 800d944:	f7fd fa00 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800d948:	4602      	mov	r2, r0
 800d94a:	4613      	mov	r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	4413      	add	r3, r2
 800d950:	009a      	lsls	r2, r3, #2
 800d952:	441a      	add	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d95e:	4a5d      	ldr	r2, [pc, #372]	; (800dad4 <UART_SetConfig+0x32c>)
 800d960:	fba2 2303 	umull	r2, r3, r2, r3
 800d964:	095b      	lsrs	r3, r3, #5
 800d966:	2264      	movs	r2, #100	; 0x64
 800d968:	fb02 f303 	mul.w	r3, r2, r3
 800d96c:	1aeb      	subs	r3, r5, r3
 800d96e:	00db      	lsls	r3, r3, #3
 800d970:	3332      	adds	r3, #50	; 0x32
 800d972:	4a58      	ldr	r2, [pc, #352]	; (800dad4 <UART_SetConfig+0x32c>)
 800d974:	fba2 2303 	umull	r2, r3, r2, r3
 800d978:	095b      	lsrs	r3, r3, #5
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d980:	441c      	add	r4, r3
 800d982:	f7fd f9e1 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800d986:	4602      	mov	r2, r0
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009a      	lsls	r2, r3, #2
 800d990:	441a      	add	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	fbb2 f5f3 	udiv	r5, r2, r3
 800d99c:	f7fd f9d4 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	4413      	add	r3, r2
 800d9a8:	009a      	lsls	r2, r3, #2
 800d9aa:	441a      	add	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	005b      	lsls	r3, r3, #1
 800d9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b6:	4a47      	ldr	r2, [pc, #284]	; (800dad4 <UART_SetConfig+0x32c>)
 800d9b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9bc:	095b      	lsrs	r3, r3, #5
 800d9be:	2264      	movs	r2, #100	; 0x64
 800d9c0:	fb02 f303 	mul.w	r3, r2, r3
 800d9c4:	1aeb      	subs	r3, r5, r3
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	3332      	adds	r3, #50	; 0x32
 800d9ca:	4a42      	ldr	r2, [pc, #264]	; (800dad4 <UART_SetConfig+0x32c>)
 800d9cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d0:	095b      	lsrs	r3, r3, #5
 800d9d2:	f003 0207 	and.w	r2, r3, #7
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4422      	add	r2, r4
 800d9dc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800d9de:	e0e7      	b.n	800dbb0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a39      	ldr	r2, [pc, #228]	; (800dacc <UART_SetConfig+0x324>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d004      	beq.n	800d9f4 <UART_SetConfig+0x24c>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4a38      	ldr	r2, [pc, #224]	; (800dad0 <UART_SetConfig+0x328>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d171      	bne.n	800dad8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d9f4:	f7fd f9bc 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	009a      	lsls	r2, r3, #2
 800da02:	441a      	add	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da0e:	4a31      	ldr	r2, [pc, #196]	; (800dad4 <UART_SetConfig+0x32c>)
 800da10:	fba2 2303 	umull	r2, r3, r2, r3
 800da14:	095b      	lsrs	r3, r3, #5
 800da16:	011c      	lsls	r4, r3, #4
 800da18:	f7fd f9aa 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800da1c:	4602      	mov	r2, r0
 800da1e:	4613      	mov	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	009a      	lsls	r2, r3, #2
 800da26:	441a      	add	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	fbb2 f5f3 	udiv	r5, r2, r3
 800da32:	f7fd f99d 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800da36:	4602      	mov	r2, r0
 800da38:	4613      	mov	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4413      	add	r3, r2
 800da3e:	009a      	lsls	r2, r3, #2
 800da40:	441a      	add	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	fbb2 f3f3 	udiv	r3, r2, r3
 800da4c:	4a21      	ldr	r2, [pc, #132]	; (800dad4 <UART_SetConfig+0x32c>)
 800da4e:	fba2 2303 	umull	r2, r3, r2, r3
 800da52:	095b      	lsrs	r3, r3, #5
 800da54:	2264      	movs	r2, #100	; 0x64
 800da56:	fb02 f303 	mul.w	r3, r2, r3
 800da5a:	1aeb      	subs	r3, r5, r3
 800da5c:	011b      	lsls	r3, r3, #4
 800da5e:	3332      	adds	r3, #50	; 0x32
 800da60:	4a1c      	ldr	r2, [pc, #112]	; (800dad4 <UART_SetConfig+0x32c>)
 800da62:	fba2 2303 	umull	r2, r3, r2, r3
 800da66:	095b      	lsrs	r3, r3, #5
 800da68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da6c:	441c      	add	r4, r3
 800da6e:	f7fd f97f 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800da72:	4602      	mov	r2, r0
 800da74:	4613      	mov	r3, r2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4413      	add	r3, r2
 800da7a:	009a      	lsls	r2, r3, #2
 800da7c:	441a      	add	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	fbb2 f5f3 	udiv	r5, r2, r3
 800da88:	f7fd f972 	bl	800ad70 <HAL_RCC_GetPCLK2Freq>
 800da8c:	4602      	mov	r2, r0
 800da8e:	4613      	mov	r3, r2
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4413      	add	r3, r2
 800da94:	009a      	lsls	r2, r3, #2
 800da96:	441a      	add	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800daa2:	4a0c      	ldr	r2, [pc, #48]	; (800dad4 <UART_SetConfig+0x32c>)
 800daa4:	fba2 2303 	umull	r2, r3, r2, r3
 800daa8:	095b      	lsrs	r3, r3, #5
 800daaa:	2264      	movs	r2, #100	; 0x64
 800daac:	fb02 f303 	mul.w	r3, r2, r3
 800dab0:	1aeb      	subs	r3, r5, r3
 800dab2:	011b      	lsls	r3, r3, #4
 800dab4:	3332      	adds	r3, #50	; 0x32
 800dab6:	4a07      	ldr	r2, [pc, #28]	; (800dad4 <UART_SetConfig+0x32c>)
 800dab8:	fba2 2303 	umull	r2, r3, r2, r3
 800dabc:	095b      	lsrs	r3, r3, #5
 800dabe:	f003 020f 	and.w	r2, r3, #15
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4422      	add	r2, r4
 800dac8:	609a      	str	r2, [r3, #8]
 800daca:	e071      	b.n	800dbb0 <UART_SetConfig+0x408>
 800dacc:	40011000 	.word	0x40011000
 800dad0:	40011400 	.word	0x40011400
 800dad4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800dad8:	f7fd f936 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800dadc:	4602      	mov	r2, r0
 800dade:	4613      	mov	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4413      	add	r3, r2
 800dae4:	009a      	lsls	r2, r3, #2
 800dae6:	441a      	add	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf2:	4a31      	ldr	r2, [pc, #196]	; (800dbb8 <UART_SetConfig+0x410>)
 800daf4:	fba2 2303 	umull	r2, r3, r2, r3
 800daf8:	095b      	lsrs	r3, r3, #5
 800dafa:	011c      	lsls	r4, r3, #4
 800dafc:	f7fd f924 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800db00:	4602      	mov	r2, r0
 800db02:	4613      	mov	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	009a      	lsls	r2, r3, #2
 800db0a:	441a      	add	r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	fbb2 f5f3 	udiv	r5, r2, r3
 800db16:	f7fd f917 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4613      	mov	r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4413      	add	r3, r2
 800db22:	009a      	lsls	r2, r3, #2
 800db24:	441a      	add	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db30:	4a21      	ldr	r2, [pc, #132]	; (800dbb8 <UART_SetConfig+0x410>)
 800db32:	fba2 2303 	umull	r2, r3, r2, r3
 800db36:	095b      	lsrs	r3, r3, #5
 800db38:	2264      	movs	r2, #100	; 0x64
 800db3a:	fb02 f303 	mul.w	r3, r2, r3
 800db3e:	1aeb      	subs	r3, r5, r3
 800db40:	011b      	lsls	r3, r3, #4
 800db42:	3332      	adds	r3, #50	; 0x32
 800db44:	4a1c      	ldr	r2, [pc, #112]	; (800dbb8 <UART_SetConfig+0x410>)
 800db46:	fba2 2303 	umull	r2, r3, r2, r3
 800db4a:	095b      	lsrs	r3, r3, #5
 800db4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db50:	441c      	add	r4, r3
 800db52:	f7fd f8f9 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800db56:	4602      	mov	r2, r0
 800db58:	4613      	mov	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	009a      	lsls	r2, r3, #2
 800db60:	441a      	add	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	fbb2 f5f3 	udiv	r5, r2, r3
 800db6c:	f7fd f8ec 	bl	800ad48 <HAL_RCC_GetPCLK1Freq>
 800db70:	4602      	mov	r2, r0
 800db72:	4613      	mov	r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	009a      	lsls	r2, r3, #2
 800db7a:	441a      	add	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	fbb2 f3f3 	udiv	r3, r2, r3
 800db86:	4a0c      	ldr	r2, [pc, #48]	; (800dbb8 <UART_SetConfig+0x410>)
 800db88:	fba2 2303 	umull	r2, r3, r2, r3
 800db8c:	095b      	lsrs	r3, r3, #5
 800db8e:	2264      	movs	r2, #100	; 0x64
 800db90:	fb02 f303 	mul.w	r3, r2, r3
 800db94:	1aeb      	subs	r3, r5, r3
 800db96:	011b      	lsls	r3, r3, #4
 800db98:	3332      	adds	r3, #50	; 0x32
 800db9a:	4a07      	ldr	r2, [pc, #28]	; (800dbb8 <UART_SetConfig+0x410>)
 800db9c:	fba2 2303 	umull	r2, r3, r2, r3
 800dba0:	095b      	lsrs	r3, r3, #5
 800dba2:	f003 020f 	and.w	r2, r3, #15
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4422      	add	r2, r4
 800dbac:	609a      	str	r2, [r3, #8]
}
 800dbae:	e7ff      	b.n	800dbb0 <UART_SetConfig+0x408>
 800dbb0:	bf00      	nop
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bdb0      	pop	{r4, r5, r7, pc}
 800dbb8:	51eb851f 	.word	0x51eb851f
 800dbbc:	00000000 	.word	0x00000000

0800dbc0 <currentControl>:
}



inline void currentControl(void)
{
 800dbc0:	b5b0      	push	{r4, r5, r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	2140      	movs	r1, #64	; 0x40
 800dbca:	48bb      	ldr	r0, [pc, #748]	; (800deb8 <currentControl+0x2f8>)
 800dbcc:	f7fc ffb4 	bl	800ab38 <HAL_GPIO_WritePin>



	if(forced_commute_enable)
 800dbd0:	4bba      	ldr	r3, [pc, #744]	; (800debc <currentControl+0x2fc>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d076      	beq.n	800dcc8 <currentControl+0x108>
	{
		float _forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 800dbda:	4bb9      	ldr	r3, [pc, #740]	; (800dec0 <currentControl+0x300>)
 800dbdc:	edd3 7a00 	vldr	s15, [r3]
 800dbe0:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800dbe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbe8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800dbec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbf0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800dec4 <currentControl+0x304>
 800dbf4:	eeb0 0a66 	vmov.f32	s0, s13
 800dbf8:	f003 fc78 	bl	80114ec <fmodf>
 800dbfc:	ed87 0a01 	vstr	s0, [r7, #4]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 800dc00:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc0c:	d511      	bpl.n	800dc32 <currentControl+0x72>
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7fa fbca 	bl	80083a8 <__aeabi_f2d>
 800dc14:	a3a4      	add	r3, pc, #656	; (adr r3, 800dea8 <currentControl+0x2e8>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	f7fa fa67 	bl	80080ec <__adddf3>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	460c      	mov	r4, r1
 800dc22:	4618      	mov	r0, r3
 800dc24:	4621      	mov	r1, r4
 800dc26:	f7fa feb1 	bl	800898c <__aeabi_d2f>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4ba6      	ldr	r3, [pc, #664]	; (800dec8 <currentControl+0x308>)
 800dc2e:	601a      	str	r2, [r3, #0]
 800dc30:	e01f      	b.n	800dc72 <currentControl+0xb2>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7fa fbb8 	bl	80083a8 <__aeabi_f2d>
 800dc38:	a39b      	add	r3, pc, #620	; (adr r3, 800dea8 <currentControl+0x2e8>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	f7fa fe91 	bl	8008964 <__aeabi_dcmpge>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d011      	beq.n	800dc6c <currentControl+0xac>
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f7fa fbad 	bl	80083a8 <__aeabi_f2d>
 800dc4e:	a396      	add	r3, pc, #600	; (adr r3, 800dea8 <currentControl+0x2e8>)
 800dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc54:	f7fa fa48 	bl	80080e8 <__aeabi_dsub>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	460c      	mov	r4, r1
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	4621      	mov	r1, r4
 800dc60:	f7fa fe94 	bl	800898c <__aeabi_d2f>
 800dc64:	4602      	mov	r2, r0
 800dc66:	4b98      	ldr	r3, [pc, #608]	; (800dec8 <currentControl+0x308>)
 800dc68:	601a      	str	r2, [r3, #0]
 800dc6a:	e002      	b.n	800dc72 <currentControl+0xb2>
		else									forced_theta_re = _forced_theta_re;
 800dc6c:	4a96      	ldr	r2, [pc, #600]	; (800dec8 <currentControl+0x308>)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800dc72:	4b95      	ldr	r3, [pc, #596]	; (800dec8 <currentControl+0x308>)
 800dc74:	edd3 7a00 	vldr	s15, [r3]
 800dc78:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800decc <currentControl+0x30c>
 800dc7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc88:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800ded0 <currentControl+0x310>
 800dc8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc94:	ee17 3a90 	vmov	r3, s15
 800dc98:	4a8e      	ldr	r2, [pc, #568]	; (800ded4 <currentControl+0x314>)
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a8d      	ldr	r2, [pc, #564]	; (800ded8 <currentControl+0x318>)
 800dca2:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 800dca4:	4b88      	ldr	r3, [pc, #544]	; (800dec8 <currentControl+0x308>)
 800dca6:	edd3 7a00 	vldr	s15, [r3]
 800dcaa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800dedc <currentControl+0x31c>
 800dcae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcb6:	ee17 3a90 	vmov	r3, s15
 800dcba:	4a86      	ldr	r2, [pc, #536]	; (800ded4 <currentControl+0x314>)
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	4413      	add	r3, r2
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a87      	ldr	r2, [pc, #540]	; (800dee0 <currentControl+0x320>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	e001      	b.n	800dccc <currentControl+0x10c>
	}
	else
	{
		refreshEncoder();
 800dcc8:	f001 ff6e 	bl	800fba8 <refreshEncoder>
	}

	get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 800dccc:	4b85      	ldr	r3, [pc, #532]	; (800dee4 <currentControl+0x324>)
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	4b81      	ldr	r3, [pc, #516]	; (800ded8 <currentControl+0x318>)
 800dcd2:	edd3 7a00 	vldr	s15, [r3]
 800dcd6:	4b82      	ldr	r3, [pc, #520]	; (800dee0 <currentControl+0x320>)
 800dcd8:	ed93 7a00 	vldr	s14, [r3]
 800dcdc:	eef0 0a47 	vmov.f32	s1, s14
 800dce0:	eeb0 0a67 	vmov.f32	s0, s15
 800dce4:	4980      	ldr	r1, [pc, #512]	; (800dee8 <currentControl+0x328>)
 800dce6:	4881      	ldr	r0, [pc, #516]	; (800deec <currentControl+0x32c>)
 800dce8:	f000 fd48 	bl	800e77c <get_current_dq>


	if(theta_re < M_PI)
 800dcec:	4b80      	ldr	r3, [pc, #512]	; (800def0 <currentControl+0x330>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fa fb59 	bl	80083a8 <__aeabi_f2d>
 800dcf6:	a36e      	add	r3, pc, #440	; (adr r3, 800deb0 <currentControl+0x2f0>)
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	f7fa fe1e 	bl	800893c <__aeabi_dcmplt>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <currentControl+0x152>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800dd06:	2200      	movs	r2, #0
 800dd08:	2140      	movs	r1, #64	; 0x40
 800dd0a:	487a      	ldr	r0, [pc, #488]	; (800def4 <currentControl+0x334>)
 800dd0c:	f7fc ff14 	bl	800ab38 <HAL_GPIO_WritePin>
 800dd10:	e004      	b.n	800dd1c <currentControl+0x15c>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800dd12:	2201      	movs	r2, #1
 800dd14:	2140      	movs	r1, #64	; 0x40
 800dd16:	4877      	ldr	r0, [pc, #476]	; (800def4 <currentControl+0x334>)
 800dd18:	f7fc ff0e 	bl	800ab38 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(ACR_enable /*&& soundCount == -1*/)
 800dd1c:	4b76      	ldr	r3, [pc, #472]	; (800def8 <currentControl+0x338>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 815c 	beq.w	800dfe0 <currentControl+0x420>
	{

		if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 800dd28:	4b74      	ldr	r3, [pc, #464]	; (800defc <currentControl+0x33c>)
 800dd2a:	edd3 7a00 	vldr	s15, [r3]
 800dd2e:	eeb1 7a67 	vneg.f32	s14, s15
 800dd32:	4b73      	ldr	r3, [pc, #460]	; (800df00 <currentControl+0x340>)
 800dd34:	edd3 7a00 	vldr	s15, [r3]
 800dd38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd40:	dd08      	ble.n	800dd54 <currentControl+0x194>
 800dd42:	4b6e      	ldr	r3, [pc, #440]	; (800defc <currentControl+0x33c>)
 800dd44:	edd3 7a00 	vldr	s15, [r3]
 800dd48:	eef1 7a67 	vneg.f32	s15, s15
 800dd4c:	4b6d      	ldr	r3, [pc, #436]	; (800df04 <currentControl+0x344>)
 800dd4e:	edc3 7a00 	vstr	s15, [r3]
 800dd52:	e013      	b.n	800dd7c <currentControl+0x1bc>
		else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 800dd54:	4b6a      	ldr	r3, [pc, #424]	; (800df00 <currentControl+0x340>)
 800dd56:	ed93 7a00 	vldr	s14, [r3]
 800dd5a:	4b68      	ldr	r3, [pc, #416]	; (800defc <currentControl+0x33c>)
 800dd5c:	edd3 7a00 	vldr	s15, [r3]
 800dd60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd68:	dd04      	ble.n	800dd74 <currentControl+0x1b4>
 800dd6a:	4b64      	ldr	r3, [pc, #400]	; (800defc <currentControl+0x33c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a65      	ldr	r2, [pc, #404]	; (800df04 <currentControl+0x344>)
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	e003      	b.n	800dd7c <currentControl+0x1bc>
		else						_Id_ref = Id_ref;
 800dd74:	4b62      	ldr	r3, [pc, #392]	; (800df00 <currentControl+0x340>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a62      	ldr	r2, [pc, #392]	; (800df04 <currentControl+0x344>)
 800dd7a:	6013      	str	r3, [r2, #0]

		if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 800dd7c:	4b62      	ldr	r3, [pc, #392]	; (800df08 <currentControl+0x348>)
 800dd7e:	edd3 7a00 	vldr	s15, [r3]
 800dd82:	eeb1 7a67 	vneg.f32	s14, s15
 800dd86:	4b61      	ldr	r3, [pc, #388]	; (800df0c <currentControl+0x34c>)
 800dd88:	edd3 7a00 	vldr	s15, [r3]
 800dd8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd94:	dd08      	ble.n	800dda8 <currentControl+0x1e8>
 800dd96:	4b5c      	ldr	r3, [pc, #368]	; (800df08 <currentControl+0x348>)
 800dd98:	edd3 7a00 	vldr	s15, [r3]
 800dd9c:	eef1 7a67 	vneg.f32	s15, s15
 800dda0:	4b5b      	ldr	r3, [pc, #364]	; (800df10 <currentControl+0x350>)
 800dda2:	edc3 7a00 	vstr	s15, [r3]
 800dda6:	e013      	b.n	800ddd0 <currentControl+0x210>
		else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 800dda8:	4b58      	ldr	r3, [pc, #352]	; (800df0c <currentControl+0x34c>)
 800ddaa:	ed93 7a00 	vldr	s14, [r3]
 800ddae:	4b56      	ldr	r3, [pc, #344]	; (800df08 <currentControl+0x348>)
 800ddb0:	edd3 7a00 	vldr	s15, [r3]
 800ddb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	dd04      	ble.n	800ddc8 <currentControl+0x208>
 800ddbe:	4b52      	ldr	r3, [pc, #328]	; (800df08 <currentControl+0x348>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a53      	ldr	r2, [pc, #332]	; (800df10 <currentControl+0x350>)
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	e003      	b.n	800ddd0 <currentControl+0x210>
		else						_Iq_ref = Iq_ref;
 800ddc8:	4b50      	ldr	r3, [pc, #320]	; (800df0c <currentControl+0x34c>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a50      	ldr	r2, [pc, #320]	; (800df10 <currentControl+0x350>)
 800ddce:	6013      	str	r3, [r2, #0]


		Id_error = _Id_ref - Id;
 800ddd0:	4b4c      	ldr	r3, [pc, #304]	; (800df04 <currentControl+0x344>)
 800ddd2:	ed93 7a00 	vldr	s14, [r3]
 800ddd6:	4b45      	ldr	r3, [pc, #276]	; (800deec <currentControl+0x32c>)
 800ddd8:	edd3 7a00 	vldr	s15, [r3]
 800dddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dde0:	4b4c      	ldr	r3, [pc, #304]	; (800df14 <currentControl+0x354>)
 800dde2:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 800dde6:	4b4a      	ldr	r3, [pc, #296]	; (800df10 <currentControl+0x350>)
 800dde8:	ed93 7a00 	vldr	s14, [r3]
 800ddec:	4b3e      	ldr	r3, [pc, #248]	; (800dee8 <currentControl+0x328>)
 800ddee:	edd3 7a00 	vldr	s15, [r3]
 800ddf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddf6:	4b48      	ldr	r3, [pc, #288]	; (800df18 <currentControl+0x358>)
 800ddf8:	edc3 7a00 	vstr	s15, [r3]


		// integral
		Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 800ddfc:	4b45      	ldr	r3, [pc, #276]	; (800df14 <currentControl+0x354>)
 800ddfe:	ed93 7a00 	vldr	s14, [r3]
 800de02:	4b46      	ldr	r3, [pc, #280]	; (800df1c <currentControl+0x35c>)
 800de04:	edd3 7a00 	vldr	s15, [r3]
 800de08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de0c:	4b44      	ldr	r3, [pc, #272]	; (800df20 <currentControl+0x360>)
 800de0e:	edc3 7a00 	vstr	s15, [r3]
		if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 800de12:	4b43      	ldr	r3, [pc, #268]	; (800df20 <currentControl+0x360>)
 800de14:	edd3 7a00 	vldr	s15, [r3]
 800de18:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800df24 <currentControl+0x364>
 800de1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de24:	d503      	bpl.n	800de2e <currentControl+0x26e>
 800de26:	4b3e      	ldr	r3, [pc, #248]	; (800df20 <currentControl+0x360>)
 800de28:	4a3f      	ldr	r2, [pc, #252]	; (800df28 <currentControl+0x368>)
 800de2a:	601a      	str	r2, [r3, #0]
 800de2c:	e00c      	b.n	800de48 <currentControl+0x288>
		else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 800de2e:	4b3c      	ldr	r3, [pc, #240]	; (800df20 <currentControl+0x360>)
 800de30:	edd3 7a00 	vldr	s15, [r3]
 800de34:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800df2c <currentControl+0x36c>
 800de38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de40:	dd02      	ble.n	800de48 <currentControl+0x288>
 800de42:	4b37      	ldr	r3, [pc, #220]	; (800df20 <currentControl+0x360>)
 800de44:	4a3a      	ldr	r2, [pc, #232]	; (800df30 <currentControl+0x370>)
 800de46:	601a      	str	r2, [r3, #0]
		Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 800de48:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800df34 <currentControl+0x374>
 800de4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800de50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de54:	4b32      	ldr	r3, [pc, #200]	; (800df20 <currentControl+0x360>)
 800de56:	edd3 6a00 	vldr	s13, [r3]
 800de5a:	4b30      	ldr	r3, [pc, #192]	; (800df1c <currentControl+0x35c>)
 800de5c:	edd3 7a00 	vldr	s15, [r3]
 800de60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de68:	4b33      	ldr	r3, [pc, #204]	; (800df38 <currentControl+0x378>)
 800de6a:	edc3 7a00 	vstr	s15, [r3]
		Id_error_integ_temp2 = Id_error_integ_temp1;
 800de6e:	4b2c      	ldr	r3, [pc, #176]	; (800df20 <currentControl+0x360>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a2a      	ldr	r2, [pc, #168]	; (800df1c <currentControl+0x35c>)
 800de74:	6013      	str	r3, [r2, #0]

		Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 800de76:	4b28      	ldr	r3, [pc, #160]	; (800df18 <currentControl+0x358>)
 800de78:	ed93 7a00 	vldr	s14, [r3]
 800de7c:	4b2f      	ldr	r3, [pc, #188]	; (800df3c <currentControl+0x37c>)
 800de7e:	edd3 7a00 	vldr	s15, [r3]
 800de82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de86:	4b2e      	ldr	r3, [pc, #184]	; (800df40 <currentControl+0x380>)
 800de88:	edc3 7a00 	vstr	s15, [r3]
		if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 800de8c:	4b2c      	ldr	r3, [pc, #176]	; (800df40 <currentControl+0x380>)
 800de8e:	edd3 7a00 	vldr	s15, [r3]
 800de92:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800df24 <currentControl+0x364>
 800de96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9e:	d551      	bpl.n	800df44 <currentControl+0x384>
 800dea0:	4b27      	ldr	r3, [pc, #156]	; (800df40 <currentControl+0x380>)
 800dea2:	4a21      	ldr	r2, [pc, #132]	; (800df28 <currentControl+0x368>)
 800dea4:	601a      	str	r2, [r3, #0]
 800dea6:	e05a      	b.n	800df5e <currentControl+0x39e>
 800dea8:	54442d18 	.word	0x54442d18
 800deac:	401921fb 	.word	0x401921fb
 800deb0:	54442d18 	.word	0x54442d18
 800deb4:	400921fb 	.word	0x400921fb
 800deb8:	40020400 	.word	0x40020400
 800debc:	200001cc 	.word	0x200001cc
 800dec0:	200000e8 	.word	0x200000e8
 800dec4:	40c90fdb 	.word	0x40c90fdb
 800dec8:	200000ec 	.word	0x200000ec
 800decc:	3ea2f838 	.word	0x3ea2f838
 800ded0:	459c4000 	.word	0x459c4000
 800ded4:	08011750 	.word	0x08011750
 800ded8:	20000028 	.word	0x20000028
 800dedc:	44c6f195 	.word	0x44c6f195
 800dee0:	200001c8 	.word	0x200001c8
 800dee4:	20000178 	.word	0x20000178
 800dee8:	200000c4 	.word	0x200000c4
 800deec:	200000c0 	.word	0x200000c0
 800def0:	200001c4 	.word	0x200001c4
 800def4:	40020000 	.word	0x40020000
 800def8:	200000b4 	.word	0x200000b4
 800defc:	20000010 	.word	0x20000010
 800df00:	200000b8 	.word	0x200000b8
 800df04:	200001f4 	.word	0x200001f4
 800df08:	20000014 	.word	0x20000014
 800df0c:	200000bc 	.word	0x200000bc
 800df10:	200001f8 	.word	0x200001f8
 800df14:	200000c8 	.word	0x200000c8
 800df18:	200000cc 	.word	0x200000cc
 800df1c:	200000dc 	.word	0x200000dc
 800df20:	200000d8 	.word	0x200000d8
 800df24:	c9742400 	.word	0xc9742400
 800df28:	c9742400 	.word	0xc9742400
 800df2c:	49742400 	.word	0x49742400
 800df30:	49742400 	.word	0x49742400
 800df34:	38d1b717 	.word	0x38d1b717
 800df38:	200000d0 	.word	0x200000d0
 800df3c:	200000e4 	.word	0x200000e4
 800df40:	200000e0 	.word	0x200000e0
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 800df44:	4b54      	ldr	r3, [pc, #336]	; (800e098 <currentControl+0x4d8>)
 800df46:	edd3 7a00 	vldr	s15, [r3]
 800df4a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800e09c <currentControl+0x4dc>
 800df4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df56:	dd02      	ble.n	800df5e <currentControl+0x39e>
 800df58:	4b4f      	ldr	r3, [pc, #316]	; (800e098 <currentControl+0x4d8>)
 800df5a:	4a51      	ldr	r2, [pc, #324]	; (800e0a0 <currentControl+0x4e0>)
 800df5c:	601a      	str	r2, [r3, #0]
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 800df5e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800e0a4 <currentControl+0x4e4>
 800df62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df6a:	4b4b      	ldr	r3, [pc, #300]	; (800e098 <currentControl+0x4d8>)
 800df6c:	edd3 6a00 	vldr	s13, [r3]
 800df70:	4b4d      	ldr	r3, [pc, #308]	; (800e0a8 <currentControl+0x4e8>)
 800df72:	edd3 7a00 	vldr	s15, [r3]
 800df76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df7e:	4b4b      	ldr	r3, [pc, #300]	; (800e0ac <currentControl+0x4ec>)
 800df80:	edc3 7a00 	vstr	s15, [r3]
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
 800df84:	4b44      	ldr	r3, [pc, #272]	; (800e098 <currentControl+0x4d8>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a47      	ldr	r2, [pc, #284]	; (800e0a8 <currentControl+0x4e8>)
 800df8a:	6013      	str	r3, [r2, #0]


		Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 800df8c:	4b48      	ldr	r3, [pc, #288]	; (800e0b0 <currentControl+0x4f0>)
 800df8e:	ed93 7a00 	vldr	s14, [r3]
 800df92:	4b48      	ldr	r3, [pc, #288]	; (800e0b4 <currentControl+0x4f4>)
 800df94:	edd3 7a00 	vldr	s15, [r3]
 800df98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df9c:	4b46      	ldr	r3, [pc, #280]	; (800e0b8 <currentControl+0x4f8>)
 800df9e:	edd3 6a00 	vldr	s13, [r3]
 800dfa2:	4b46      	ldr	r3, [pc, #280]	; (800e0bc <currentControl+0x4fc>)
 800dfa4:	edd3 7a00 	vldr	s15, [r3]
 800dfa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfb0:	4b43      	ldr	r3, [pc, #268]	; (800e0c0 <currentControl+0x500>)
 800dfb2:	edc3 7a00 	vstr	s15, [r3]
		Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 800dfb6:	4b3e      	ldr	r3, [pc, #248]	; (800e0b0 <currentControl+0x4f0>)
 800dfb8:	ed93 7a00 	vldr	s14, [r3]
 800dfbc:	4b41      	ldr	r3, [pc, #260]	; (800e0c4 <currentControl+0x504>)
 800dfbe:	edd3 7a00 	vldr	s15, [r3]
 800dfc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfc6:	4b3c      	ldr	r3, [pc, #240]	; (800e0b8 <currentControl+0x4f8>)
 800dfc8:	edd3 6a00 	vldr	s13, [r3]
 800dfcc:	4b37      	ldr	r3, [pc, #220]	; (800e0ac <currentControl+0x4ec>)
 800dfce:	edd3 7a00 	vldr	s15, [r3]
 800dfd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfda:	4b3b      	ldr	r3, [pc, #236]	; (800e0c8 <currentControl+0x508>)
 800dfdc:	edc3 7a00 	vstr	s15, [r3]

	}

	if(soundCount < 66641)
 800dfe0:	4b3a      	ldr	r3, [pc, #232]	; (800e0cc <currentControl+0x50c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a3a      	ldr	r2, [pc, #232]	; (800e0d0 <currentControl+0x510>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	dc2f      	bgt.n	800e04a <currentControl+0x48a>
	{
		Vq_ref += soSound[soundCount++] / 127.0f * 3.0;
 800dfea:	4b38      	ldr	r3, [pc, #224]	; (800e0cc <currentControl+0x50c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	4936      	ldr	r1, [pc, #216]	; (800e0cc <currentControl+0x50c>)
 800dff2:	600a      	str	r2, [r1, #0]
 800dff4:	4a37      	ldr	r2, [pc, #220]	; (800e0d4 <currentControl+0x514>)
 800dff6:	56d3      	ldrsb	r3, [r2, r3]
 800dff8:	ee07 3a90 	vmov	s15, r3
 800dffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e000:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800e0d8 <currentControl+0x518>
 800e004:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e008:	ee16 0a90 	vmov	r0, s13
 800e00c:	f7fa f9cc 	bl	80083a8 <__aeabi_f2d>
 800e010:	f04f 0200 	mov.w	r2, #0
 800e014:	4b31      	ldr	r3, [pc, #196]	; (800e0dc <currentControl+0x51c>)
 800e016:	f7fa fa1f 	bl	8008458 <__aeabi_dmul>
 800e01a:	4603      	mov	r3, r0
 800e01c:	460c      	mov	r4, r1
 800e01e:	4625      	mov	r5, r4
 800e020:	461c      	mov	r4, r3
 800e022:	4b29      	ldr	r3, [pc, #164]	; (800e0c8 <currentControl+0x508>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4618      	mov	r0, r3
 800e028:	f7fa f9be 	bl	80083a8 <__aeabi_f2d>
 800e02c:	4602      	mov	r2, r0
 800e02e:	460b      	mov	r3, r1
 800e030:	4620      	mov	r0, r4
 800e032:	4629      	mov	r1, r5
 800e034:	f7fa f85a 	bl	80080ec <__adddf3>
 800e038:	4603      	mov	r3, r0
 800e03a:	460c      	mov	r4, r1
 800e03c:	4618      	mov	r0, r3
 800e03e:	4621      	mov	r1, r4
 800e040:	f7fa fca4 	bl	800898c <__aeabi_d2f>
 800e044:	4602      	mov	r2, r0
 800e046:	4b20      	ldr	r3, [pc, #128]	; (800e0c8 <currentControl+0x508>)
 800e048:	601a      	str	r2, [r3, #0]


	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e04a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e04e:	4824      	ldr	r0, [pc, #144]	; (800e0e0 <currentControl+0x520>)
 800e050:	f7fc fd5a 	bl	800ab08 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	setSVM_dq();
 800e054:	f001 f898 	bl	800f188 <setSVM_dq>

#endif



	if(!forced_commute_enable)
 800e058:	4b22      	ldr	r3, [pc, #136]	; (800e0e4 <currentControl+0x524>)
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <currentControl+0x4a6>
	{
		requestEncoder();
 800e062:	f001 fd81 	bl	800fb68 <requestEncoder>
	}


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 800e066:	4b20      	ldr	r3, [pc, #128]	; (800e0e8 <currentControl+0x528>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	3301      	adds	r3, #1
 800e06c:	4a1e      	ldr	r2, [pc, #120]	; (800e0e8 <currentControl+0x528>)
 800e06e:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 800e070:	4b1d      	ldr	r3, [pc, #116]	; (800e0e8 <currentControl+0x528>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b09      	cmp	r3, #9
 800e076:	dd05      	ble.n	800e084 <currentControl+0x4c4>
	{
		ASR_flg = 1;
 800e078:	4b1c      	ldr	r3, [pc, #112]	; (800e0ec <currentControl+0x52c>)
 800e07a:	2201      	movs	r2, #1
 800e07c:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 800e07e:	4b1a      	ldr	r3, [pc, #104]	; (800e0e8 <currentControl+0x528>)
 800e080:	2200      	movs	r2, #0
 800e082:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e084:	2200      	movs	r2, #0
 800e086:	2140      	movs	r1, #64	; 0x40
 800e088:	4819      	ldr	r0, [pc, #100]	; (800e0f0 <currentControl+0x530>)
 800e08a:	f7fc fd55 	bl	800ab38 <HAL_GPIO_WritePin>

	return;
 800e08e:	bf00      	nop
}
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bdb0      	pop	{r4, r5, r7, pc}
 800e096:	bf00      	nop
 800e098:	200000e0 	.word	0x200000e0
 800e09c:	49742400 	.word	0x49742400
 800e0a0:	49742400 	.word	0x49742400
 800e0a4:	38d1b717 	.word	0x38d1b717
 800e0a8:	200000e4 	.word	0x200000e4
 800e0ac:	200000d4 	.word	0x200000d4
 800e0b0:	20000008 	.word	0x20000008
 800e0b4:	200000c8 	.word	0x200000c8
 800e0b8:	2000000c 	.word	0x2000000c
 800e0bc:	200000d0 	.word	0x200000d0
 800e0c0:	20000170 	.word	0x20000170
 800e0c4:	200000cc 	.word	0x200000cc
 800e0c8:	20000174 	.word	0x20000174
 800e0cc:	200000f0 	.word	0x200000f0
 800e0d0:	00010450 	.word	0x00010450
 800e0d4:	08024fd0 	.word	0x08024fd0
 800e0d8:	42fe0000 	.word	0x42fe0000
 800e0dc:	40080000 	.word	0x40080000
 800e0e0:	40020000 	.word	0x40020000
 800e0e4:	200001cc 	.word	0x200001cc
 800e0e8:	20000100 	.word	0x20000100
 800e0ec:	200000fc 	.word	0x200000fc
 800e0f0:	40020400 	.word	0x40020400

0800e0f4 <ACR_Reset>:



inline void ACR_Reset()
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	af00      	add	r7, sp, #0

	Id_error_integ_temp1 = 0.0f;
 800e0f8:	4b14      	ldr	r3, [pc, #80]	; (800e14c <ACR_Reset+0x58>)
 800e0fa:	f04f 0200 	mov.w	r2, #0
 800e0fe:	601a      	str	r2, [r3, #0]
	Id_error_integ_temp2 = 0.0f;
 800e100:	4b13      	ldr	r3, [pc, #76]	; (800e150 <ACR_Reset+0x5c>)
 800e102:	f04f 0200 	mov.w	r2, #0
 800e106:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp1 = 0.0f;
 800e108:	4b12      	ldr	r3, [pc, #72]	; (800e154 <ACR_Reset+0x60>)
 800e10a:	f04f 0200 	mov.w	r2, #0
 800e10e:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp2 = 0.0f;
 800e110:	4b11      	ldr	r3, [pc, #68]	; (800e158 <ACR_Reset+0x64>)
 800e112:	f04f 0200 	mov.w	r2, #0
 800e116:	601a      	str	r2, [r3, #0]


	Id = Id_ref = 0.0f;
 800e118:	f04f 0300 	mov.w	r3, #0
 800e11c:	4a0f      	ldr	r2, [pc, #60]	; (800e15c <ACR_Reset+0x68>)
 800e11e:	6013      	str	r3, [r2, #0]
 800e120:	4a0f      	ldr	r2, [pc, #60]	; (800e160 <ACR_Reset+0x6c>)
 800e122:	6013      	str	r3, [r2, #0]
	Iq = Iq_ref = 0.0f;
 800e124:	f04f 0300 	mov.w	r3, #0
 800e128:	4a0e      	ldr	r2, [pc, #56]	; (800e164 <ACR_Reset+0x70>)
 800e12a:	6013      	str	r3, [r2, #0]
 800e12c:	4a0e      	ldr	r2, [pc, #56]	; (800e168 <ACR_Reset+0x74>)
 800e12e:	6013      	str	r3, [r2, #0]

	Vd_ref = 0.0f;
 800e130:	4b0e      	ldr	r3, [pc, #56]	; (800e16c <ACR_Reset+0x78>)
 800e132:	f04f 0200 	mov.w	r2, #0
 800e136:	601a      	str	r2, [r3, #0]
	Vq_ref = 0.0f;
 800e138:	4b0d      	ldr	r3, [pc, #52]	; (800e170 <ACR_Reset+0x7c>)
 800e13a:	f04f 0200 	mov.w	r2, #0
 800e13e:	601a      	str	r2, [r3, #0]

}
 800e140:	bf00      	nop
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	200000d8 	.word	0x200000d8
 800e150:	200000dc 	.word	0x200000dc
 800e154:	200000e0 	.word	0x200000e0
 800e158:	200000e4 	.word	0x200000e4
 800e15c:	200000b8 	.word	0x200000b8
 800e160:	200000c0 	.word	0x200000c0
 800e164:	200000bc 	.word	0x200000bc
 800e168:	200000c4 	.word	0x200000c4
 800e16c:	20000170 	.word	0x20000170
 800e170:	20000174 	.word	0x20000174

0800e174 <ASR_Reset>:
}



inline void ASR_Reset()
{
 800e174:	b480      	push	{r7}
 800e176:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 800e178:	4b0c      	ldr	r3, [pc, #48]	; (800e1ac <ASR_Reset+0x38>)
 800e17a:	f04f 0200 	mov.w	r2, #0
 800e17e:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 800e180:	4b0b      	ldr	r3, [pc, #44]	; (800e1b0 <ASR_Reset+0x3c>)
 800e182:	f04f 0200 	mov.w	r2, #0
 800e186:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 800e188:	4b0a      	ldr	r3, [pc, #40]	; (800e1b4 <ASR_Reset+0x40>)
 800e18a:	f04f 0200 	mov.w	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 800e190:	f04f 0300 	mov.w	r3, #0
 800e194:	4a08      	ldr	r2, [pc, #32]	; (800e1b8 <ASR_Reset+0x44>)
 800e196:	6013      	str	r3, [r2, #0]
 800e198:	4a08      	ldr	r2, [pc, #32]	; (800e1bc <ASR_Reset+0x48>)
 800e19a:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 800e19c:	4b08      	ldr	r3, [pc, #32]	; (800e1c0 <ASR_Reset+0x4c>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	601a      	str	r2, [r3, #0]

}
 800e1a2:	bf00      	nop
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr
 800e1ac:	20000108 	.word	0x20000108
 800e1b0:	2000010c 	.word	0x2000010c
 800e1b4:	20000110 	.word	0x20000110
 800e1b8:	200000f4 	.word	0x200000f4
 800e1bc:	20000104 	.word	0x20000104
 800e1c0:	200000f8 	.word	0x200000f8

0800e1c4 <DRV_Init>:
DRV_TypeDef drv8323;



void DRV_Init()
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	af00      	add	r7, sp, #0

	drv8323.NSS_GPIOx = SPI3_NSS_GPIO_Port;
 800e1c8:	4b07      	ldr	r3, [pc, #28]	; (800e1e8 <DRV_Init+0x24>)
 800e1ca:	4a08      	ldr	r2, [pc, #32]	; (800e1ec <DRV_Init+0x28>)
 800e1cc:	605a      	str	r2, [r3, #4]
	drv8323.NSS_GPIO_Pin = SPI3_NSS_Pin;
 800e1ce:	4b06      	ldr	r3, [pc, #24]	; (800e1e8 <DRV_Init+0x24>)
 800e1d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e1d4:	811a      	strh	r2, [r3, #8]
	drv8323.hspi = &hspi3;
 800e1d6:	4b04      	ldr	r3, [pc, #16]	; (800e1e8 <DRV_Init+0x24>)
 800e1d8:	4a05      	ldr	r2, [pc, #20]	; (800e1f0 <DRV_Init+0x2c>)
 800e1da:	601a      	str	r2, [r3, #0]



}
 800e1dc:	bf00      	nop
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	200001fc 	.word	0x200001fc
 800e1ec:	40020000 	.word	0x40020000
 800e1f0:	200004d0 	.word	0x200004d0

0800e1f4 <DRV_WriteData>:


void DRV_WriteData(DRV_TypeDef *hdrv, uint8_t addr, uint16_t data)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af02      	add	r7, sp, #8
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	70fb      	strb	r3, [r7, #3]
 800e200:	4613      	mov	r3, r2
 800e202:	803b      	strh	r3, [r7, #0]

	// MSB
	hdrv->txBuf[0] = (addr << 3) | (data >> 8);
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	b25a      	sxtb	r2, r3
 800e20a:	883b      	ldrh	r3, [r7, #0]
 800e20c:	0a1b      	lsrs	r3, r3, #8
 800e20e:	b29b      	uxth	r3, r3
 800e210:	b25b      	sxtb	r3, r3
 800e212:	4313      	orrs	r3, r2
 800e214:	b25b      	sxtb	r3, r3
 800e216:	b2da      	uxtb	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	729a      	strb	r2, [r3, #10]
	// LSB
	hdrv->txBuf[1] = data & 0xff;
 800e21c:	883b      	ldrh	r3, [r7, #0]
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	72da      	strb	r2, [r3, #11]

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6858      	ldr	r0, [r3, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	891b      	ldrh	r3, [r3, #8]
 800e22c:	2200      	movs	r2, #0
 800e22e:	4619      	mov	r1, r3
 800e230:	f7fc fc82 	bl	800ab38 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6818      	ldr	r0, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f103 010a 	add.w	r1, r3, #10
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f103 020c 	add.w	r2, r3, #12
 800e244:	2301      	movs	r3, #1
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	2302      	movs	r3, #2
 800e24a:	f7fd fa03 	bl	800b654 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6858      	ldr	r0, [r3, #4]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	891b      	ldrh	r3, [r3, #8]
 800e256:	2201      	movs	r2, #1
 800e258:	4619      	mov	r1, r3
 800e25a:	f7fc fc6d 	bl	800ab38 <HAL_GPIO_WritePin>

}
 800e25e:	bf00      	nop
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <DRV_ReadData>:



void DRV_ReadData(DRV_TypeDef *hdrv, uint8_t addr)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b084      	sub	sp, #16
 800e26a:	af02      	add	r7, sp, #8
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	460b      	mov	r3, r1
 800e270:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = 0x80 | (addr << 3);
 800e272:	78fb      	ldrb	r3, [r7, #3]
 800e274:	00db      	lsls	r3, r3, #3
 800e276:	b25b      	sxtb	r3, r3
 800e278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e27c:	b25b      	sxtb	r3, r3
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	729a      	strb	r2, [r3, #10]
	// LSB
	hdrv->txBuf[1] = 0x00;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	72da      	strb	r2, [r3, #11]

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6858      	ldr	r0, [r3, #4]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	891b      	ldrh	r3, [r3, #8]
 800e292:	2200      	movs	r2, #0
 800e294:	4619      	mov	r1, r3
 800e296:	f7fc fc4f 	bl	800ab38 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6818      	ldr	r0, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f103 010a 	add.w	r1, r3, #10
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f103 020c 	add.w	r2, r3, #12
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	f7fd f9d0 	bl	800b654 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6858      	ldr	r0, [r3, #4]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	891b      	ldrh	r3, [r3, #8]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	4619      	mov	r1, r3
 800e2c0:	f7fc fc3a 	bl	800ab38 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	f7fa fda3 	bl	8008e10 <HAL_Delay>

}
 800e2ca:	bf00      	nop
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
	...

0800e2d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800e2da:	463b      	mov	r3, r7
 800e2dc:	2200      	movs	r2, #0
 800e2de:	601a      	str	r2, [r3, #0]
 800e2e0:	605a      	str	r2, [r3, #4]
 800e2e2:	609a      	str	r2, [r3, #8]
 800e2e4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800e2e6:	4b22      	ldr	r3, [pc, #136]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e2e8:	4a22      	ldr	r2, [pc, #136]	; (800e374 <MX_ADC1_Init+0xa0>)
 800e2ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e2ec:	4b20      	ldr	r3, [pc, #128]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e2ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e2f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e2f4:	4b1e      	ldr	r3, [pc, #120]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800e2fa:	4b1d      	ldr	r3, [pc, #116]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e300:	4b1b      	ldr	r3, [pc, #108]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e302:	2201      	movs	r2, #1
 800e304:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e306:	4b1a      	ldr	r3, [pc, #104]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e30e:	4b18      	ldr	r3, [pc, #96]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e314:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800e316:	4b16      	ldr	r3, [pc, #88]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e318:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e31c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e31e:	4b14      	ldr	r3, [pc, #80]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e320:	2200      	movs	r2, #0
 800e322:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e324:	4b12      	ldr	r3, [pc, #72]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e326:	2201      	movs	r2, #1
 800e328:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e32a:	4b11      	ldr	r3, [pc, #68]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e332:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e334:	2200      	movs	r2, #0
 800e336:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e338:	480d      	ldr	r0, [pc, #52]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e33a:	f7fa fd8b 	bl	8008e54 <HAL_ADC_Init>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800e344:	f000 ff18 	bl	800f178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800e348:	2300      	movs	r3, #0
 800e34a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e34c:	2301      	movs	r3, #1
 800e34e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e350:	2300      	movs	r3, #0
 800e352:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e354:	463b      	mov	r3, r7
 800e356:	4619      	mov	r1, r3
 800e358:	4805      	ldr	r0, [pc, #20]	; (800e370 <MX_ADC1_Init+0x9c>)
 800e35a:	f7fa fecf 	bl	80090fc <HAL_ADC_ConfigChannel>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800e364:	f000 ff08 	bl	800f178 <Error_Handler>
  }

}
 800e368:	bf00      	nop
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	200002b4 	.word	0x200002b4
 800e374:	40012000 	.word	0x40012000

0800e378 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800e37e:	463b      	mov	r3, r7
 800e380:	2200      	movs	r2, #0
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	605a      	str	r2, [r3, #4]
 800e386:	609a      	str	r2, [r3, #8]
 800e388:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800e38a:	4b22      	ldr	r3, [pc, #136]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e38c:	4a22      	ldr	r2, [pc, #136]	; (800e418 <MX_ADC2_Init+0xa0>)
 800e38e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e390:	4b20      	ldr	r3, [pc, #128]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e392:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e396:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800e398:	4b1e      	ldr	r3, [pc, #120]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800e39e:	4b1d      	ldr	r3, [pc, #116]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800e3a4:	4b1b      	ldr	r3, [pc, #108]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e3aa:	4b1a      	ldr	r3, [pc, #104]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e3b2:	4b18      	ldr	r3, [pc, #96]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800e3ba:	4b16      	ldr	r3, [pc, #88]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3bc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e3c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e3c2:	4b14      	ldr	r3, [pc, #80]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800e3c8:	4b12      	ldr	r3, [pc, #72]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e3ce:	4b11      	ldr	r3, [pc, #68]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e3d6:	4b0f      	ldr	r3, [pc, #60]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3d8:	2201      	movs	r2, #1
 800e3da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800e3dc:	480d      	ldr	r0, [pc, #52]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3de:	f7fa fd39 	bl	8008e54 <HAL_ADC_Init>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800e3e8:	f000 fec6 	bl	800f178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800e3ec:	2304      	movs	r3, #4
 800e3ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e3f8:	463b      	mov	r3, r7
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4805      	ldr	r0, [pc, #20]	; (800e414 <MX_ADC2_Init+0x9c>)
 800e3fe:	f7fa fe7d 	bl	80090fc <HAL_ADC_ConfigChannel>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d001      	beq.n	800e40c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800e408:	f000 feb6 	bl	800f178 <Error_Handler>
  }

}
 800e40c:	bf00      	nop
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	2000020c 	.word	0x2000020c
 800e418:	40012100 	.word	0x40012100

0800e41c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800e422:	463b      	mov	r3, r7
 800e424:	2200      	movs	r2, #0
 800e426:	601a      	str	r2, [r3, #0]
 800e428:	605a      	str	r2, [r3, #4]
 800e42a:	609a      	str	r2, [r3, #8]
 800e42c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800e42e:	4b22      	ldr	r3, [pc, #136]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e430:	4a22      	ldr	r2, [pc, #136]	; (800e4bc <MX_ADC3_Init+0xa0>)
 800e432:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e434:	4b20      	ldr	r3, [pc, #128]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e43a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800e43c:	4b1e      	ldr	r3, [pc, #120]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e43e:	2200      	movs	r2, #0
 800e440:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800e442:	4b1d      	ldr	r3, [pc, #116]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e444:	2200      	movs	r2, #0
 800e446:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800e448:	4b1b      	ldr	r3, [pc, #108]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e44a:	2200      	movs	r2, #0
 800e44c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e44e:	4b1a      	ldr	r3, [pc, #104]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e450:	2200      	movs	r2, #0
 800e452:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e456:	4b18      	ldr	r3, [pc, #96]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e45c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800e45e:	4b16      	ldr	r3, [pc, #88]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e460:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e464:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e466:	4b14      	ldr	r3, [pc, #80]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e468:	2200      	movs	r2, #0
 800e46a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800e46c:	4b12      	ldr	r3, [pc, #72]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e46e:	2201      	movs	r2, #1
 800e470:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800e472:	4b11      	ldr	r3, [pc, #68]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e474:	2201      	movs	r2, #1
 800e476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e47a:	4b0f      	ldr	r3, [pc, #60]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e47c:	2201      	movs	r2, #1
 800e47e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800e480:	480d      	ldr	r0, [pc, #52]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e482:	f7fa fce7 	bl	8008e54 <HAL_ADC_Init>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800e48c:	f000 fe74 	bl	800f178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800e490:	2301      	movs	r3, #1
 800e492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e494:	2301      	movs	r3, #1
 800e496:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e498:	2300      	movs	r3, #0
 800e49a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800e49c:	463b      	mov	r3, r7
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4805      	ldr	r0, [pc, #20]	; (800e4b8 <MX_ADC3_Init+0x9c>)
 800e4a2:	f7fa fe2b 	bl	80090fc <HAL_ADC_ConfigChannel>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d001      	beq.n	800e4b0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800e4ac:	f000 fe64 	bl	800f178 <Error_Handler>
  }

}
 800e4b0:	bf00      	nop
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	200002fc 	.word	0x200002fc
 800e4bc:	40012200 	.word	0x40012200

0800e4c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b08e      	sub	sp, #56	; 0x38
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	605a      	str	r2, [r3, #4]
 800e4d2:	609a      	str	r2, [r3, #8]
 800e4d4:	60da      	str	r2, [r3, #12]
 800e4d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a9b      	ldr	r2, [pc, #620]	; (800e74c <HAL_ADC_MspInit+0x28c>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d172      	bne.n	800e5c8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	623b      	str	r3, [r7, #32]
 800e4e6:	4b9a      	ldr	r3, [pc, #616]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ea:	4a99      	ldr	r2, [pc, #612]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e4ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4f0:	6453      	str	r3, [r2, #68]	; 0x44
 800e4f2:	4b97      	ldr	r3, [pc, #604]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4fa:	623b      	str	r3, [r7, #32]
 800e4fc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e4fe:	2300      	movs	r3, #0
 800e500:	61fb      	str	r3, [r7, #28]
 800e502:	4b93      	ldr	r3, [pc, #588]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e506:	4a92      	ldr	r2, [pc, #584]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e508:	f043 0304 	orr.w	r3, r3, #4
 800e50c:	6313      	str	r3, [r2, #48]	; 0x30
 800e50e:	4b90      	ldr	r3, [pc, #576]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e512:	f003 0304 	and.w	r3, r3, #4
 800e516:	61fb      	str	r3, [r7, #28]
 800e518:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e51a:	2300      	movs	r3, #0
 800e51c:	61bb      	str	r3, [r7, #24]
 800e51e:	4b8c      	ldr	r3, [pc, #560]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e522:	4a8b      	ldr	r2, [pc, #556]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e524:	f043 0301 	orr.w	r3, r3, #1
 800e528:	6313      	str	r3, [r2, #48]	; 0x30
 800e52a:	4b89      	ldr	r3, [pc, #548]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52e:	f003 0301 	and.w	r3, r3, #1
 800e532:	61bb      	str	r3, [r7, #24]
 800e534:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e536:	2301      	movs	r3, #1
 800e538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e53a:	2303      	movs	r3, #3
 800e53c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e53e:	2300      	movs	r3, #0
 800e540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e546:	4619      	mov	r1, r3
 800e548:	4882      	ldr	r0, [pc, #520]	; (800e754 <HAL_ADC_MspInit+0x294>)
 800e54a:	f7fc f94b 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e54e:	2301      	movs	r3, #1
 800e550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e552:	2303      	movs	r3, #3
 800e554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e556:	2300      	movs	r3, #0
 800e558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e55a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e55e:	4619      	mov	r1, r3
 800e560:	487d      	ldr	r0, [pc, #500]	; (800e758 <HAL_ADC_MspInit+0x298>)
 800e562:	f7fc f93f 	bl	800a7e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800e566:	4b7d      	ldr	r3, [pc, #500]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e568:	4a7d      	ldr	r2, [pc, #500]	; (800e760 <HAL_ADC_MspInit+0x2a0>)
 800e56a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e56c:	4b7b      	ldr	r3, [pc, #492]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e56e:	2200      	movs	r2, #0
 800e570:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e572:	4b7a      	ldr	r3, [pc, #488]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e574:	2200      	movs	r2, #0
 800e576:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e578:	4b78      	ldr	r3, [pc, #480]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e57e:	4b77      	ldr	r3, [pc, #476]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e584:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e586:	4b75      	ldr	r3, [pc, #468]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e58c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e58e:	4b73      	ldr	r3, [pc, #460]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e594:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800e596:	4b71      	ldr	r3, [pc, #452]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e598:	2200      	movs	r2, #0
 800e59a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800e59c:	4b6f      	ldr	r3, [pc, #444]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e59e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e5a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e5a4:	4b6d      	ldr	r3, [pc, #436]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e5aa:	486c      	ldr	r0, [pc, #432]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e5ac:	f7fb fd82 	bl	800a0b4 <HAL_DMA_Init>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800e5b6:	f000 fddf 	bl	800f178 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a67      	ldr	r2, [pc, #412]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e5be:	639a      	str	r2, [r3, #56]	; 0x38
 800e5c0:	4a66      	ldr	r2, [pc, #408]	; (800e75c <HAL_ADC_MspInit+0x29c>)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800e5c6:	e0bc      	b.n	800e742 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a65      	ldr	r2, [pc, #404]	; (800e764 <HAL_ADC_MspInit+0x2a4>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d159      	bne.n	800e686 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	617b      	str	r3, [r7, #20]
 800e5d6:	4b5e      	ldr	r3, [pc, #376]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5da:	4a5d      	ldr	r2, [pc, #372]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e5dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e5e0:	6453      	str	r3, [r2, #68]	; 0x44
 800e5e2:	4b5b      	ldr	r3, [pc, #364]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5ea:	617b      	str	r3, [r7, #20]
 800e5ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	613b      	str	r3, [r7, #16]
 800e5f2:	4b57      	ldr	r3, [pc, #348]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f6:	4a56      	ldr	r2, [pc, #344]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e5f8:	f043 0301 	orr.w	r3, r3, #1
 800e5fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e5fe:	4b54      	ldr	r3, [pc, #336]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	613b      	str	r3, [r7, #16]
 800e608:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800e60a:	2310      	movs	r3, #16
 800e60c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e60e:	2303      	movs	r3, #3
 800e610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e612:	2300      	movs	r3, #0
 800e614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e61a:	4619      	mov	r1, r3
 800e61c:	484e      	ldr	r0, [pc, #312]	; (800e758 <HAL_ADC_MspInit+0x298>)
 800e61e:	f7fc f8e1 	bl	800a7e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e622:	4b51      	ldr	r3, [pc, #324]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e624:	4a51      	ldr	r2, [pc, #324]	; (800e76c <HAL_ADC_MspInit+0x2ac>)
 800e626:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e628:	4b4f      	ldr	r3, [pc, #316]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e62a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e62e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e630:	4b4d      	ldr	r3, [pc, #308]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e632:	2200      	movs	r2, #0
 800e634:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e636:	4b4c      	ldr	r3, [pc, #304]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e638:	2200      	movs	r2, #0
 800e63a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e63c:	4b4a      	ldr	r3, [pc, #296]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e63e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e642:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e644:	4b48      	ldr	r3, [pc, #288]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e64a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e64c:	4b46      	ldr	r3, [pc, #280]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e64e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e652:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800e654:	4b44      	ldr	r3, [pc, #272]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e656:	2200      	movs	r2, #0
 800e658:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800e65a:	4b43      	ldr	r3, [pc, #268]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e65c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e660:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e662:	4b41      	ldr	r3, [pc, #260]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e664:	2200      	movs	r2, #0
 800e666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e668:	483f      	ldr	r0, [pc, #252]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e66a:	f7fb fd23 	bl	800a0b4 <HAL_DMA_Init>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800e674:	f000 fd80 	bl	800f178 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4a3b      	ldr	r2, [pc, #236]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e67c:	639a      	str	r2, [r3, #56]	; 0x38
 800e67e:	4a3a      	ldr	r2, [pc, #232]	; (800e768 <HAL_ADC_MspInit+0x2a8>)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e684:	e05d      	b.n	800e742 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a39      	ldr	r2, [pc, #228]	; (800e770 <HAL_ADC_MspInit+0x2b0>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d158      	bne.n	800e742 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800e690:	2300      	movs	r3, #0
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	4b2e      	ldr	r3, [pc, #184]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e698:	4a2d      	ldr	r2, [pc, #180]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e69a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e69e:	6453      	str	r3, [r2, #68]	; 0x44
 800e6a0:	4b2b      	ldr	r3, [pc, #172]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6a8:	60fb      	str	r3, [r7, #12]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	60bb      	str	r3, [r7, #8]
 800e6b0:	4b27      	ldr	r3, [pc, #156]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b4:	4a26      	ldr	r2, [pc, #152]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e6b6:	f043 0301 	orr.w	r3, r3, #1
 800e6ba:	6313      	str	r3, [r2, #48]	; 0x30
 800e6bc:	4b24      	ldr	r3, [pc, #144]	; (800e750 <HAL_ADC_MspInit+0x290>)
 800e6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c0:	f003 0301 	and.w	r3, r3, #1
 800e6c4:	60bb      	str	r3, [r7, #8]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d8:	4619      	mov	r1, r3
 800e6da:	481f      	ldr	r0, [pc, #124]	; (800e758 <HAL_ADC_MspInit+0x298>)
 800e6dc:	f7fc f882 	bl	800a7e4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800e6e0:	4b24      	ldr	r3, [pc, #144]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e6e2:	4a25      	ldr	r2, [pc, #148]	; (800e778 <HAL_ADC_MspInit+0x2b8>)
 800e6e4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800e6e6:	4b23      	ldr	r3, [pc, #140]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e6e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e6ec:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e6ee:	4b21      	ldr	r3, [pc, #132]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800e6f4:	4b1f      	ldr	r3, [pc, #124]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800e6fa:	4b1e      	ldr	r3, [pc, #120]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e6fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e700:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e702:	4b1c      	ldr	r3, [pc, #112]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e708:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e70a:	4b1a      	ldr	r3, [pc, #104]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e70c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e710:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800e712:	4b18      	ldr	r3, [pc, #96]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e714:	2200      	movs	r2, #0
 800e716:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800e718:	4b16      	ldr	r3, [pc, #88]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e71a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e71e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e720:	4b14      	ldr	r3, [pc, #80]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e722:	2200      	movs	r2, #0
 800e724:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800e726:	4813      	ldr	r0, [pc, #76]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e728:	f7fb fcc4 	bl	800a0b4 <HAL_DMA_Init>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800e732:	f000 fd21 	bl	800f178 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a0e      	ldr	r2, [pc, #56]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e73a:	639a      	str	r2, [r3, #56]	; 0x38
 800e73c:	4a0d      	ldr	r2, [pc, #52]	; (800e774 <HAL_ADC_MspInit+0x2b4>)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e742:	bf00      	nop
 800e744:	3738      	adds	r7, #56	; 0x38
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	40012000 	.word	0x40012000
 800e750:	40023800 	.word	0x40023800
 800e754:	40020800 	.word	0x40020800
 800e758:	40020000 	.word	0x40020000
 800e75c:	20000344 	.word	0x20000344
 800e760:	40026410 	.word	0x40026410
 800e764:	40012100 	.word	0x40012100
 800e768:	200003a4 	.word	0x200003a4
 800e76c:	40026440 	.word	0x40026440
 800e770:	40012200 	.word	0x40012200
 800e774:	20000254 	.word	0x20000254
 800e778:	40026428 	.word	0x40026428

0800e77c <get_current_dq>:

}


void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b086      	sub	sp, #24
 800e780:	af00      	add	r7, sp, #0
 800e782:	6178      	str	r0, [r7, #20]
 800e784:	6139      	str	r1, [r7, #16]
 800e786:	60fa      	str	r2, [r7, #12]
 800e788:	ed87 0a02 	vstr	s0, [r7, #8]
 800e78c:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 800e790:	2202      	movs	r2, #2
 800e792:	49be      	ldr	r1, [pc, #760]	; (800ea8c <get_current_dq+0x310>)
 800e794:	48be      	ldr	r0, [pc, #760]	; (800ea90 <get_current_dq+0x314>)
 800e796:	f7fa fba1 	bl	8008edc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 800e79a:	2201      	movs	r2, #1
 800e79c:	49bd      	ldr	r1, [pc, #756]	; (800ea94 <get_current_dq+0x318>)
 800e79e:	48be      	ldr	r0, [pc, #760]	; (800ea98 <get_current_dq+0x31c>)
 800e7a0:	f7fa fb9c 	bl	8008edc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	49bd      	ldr	r1, [pc, #756]	; (800ea9c <get_current_dq+0x320>)
 800e7a8:	48bd      	ldr	r0, [pc, #756]	; (800eaa0 <get_current_dq+0x324>)
 800e7aa:	f7fa fb97 	bl	8008edc <HAL_ADC_Start_DMA>

#endif

#if _MEDF_ENABLE_

	AD_Iu_buf[pos_MEDF_I] = (int32_t)AD_Iu[0];
 800e7ae:	4bb7      	ldr	r3, [pc, #732]	; (800ea8c <get_current_dq+0x310>)
 800e7b0:	881b      	ldrh	r3, [r3, #0]
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	4bbb      	ldr	r3, [pc, #748]	; (800eaa4 <get_current_dq+0x328>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4abb      	ldr	r2, [pc, #748]	; (800eaa8 <get_current_dq+0x32c>)
 800e7bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iv_buf[pos_MEDF_I] = (int32_t)AD_Iv[0];
 800e7c0:	4bb4      	ldr	r3, [pc, #720]	; (800ea94 <get_current_dq+0x318>)
 800e7c2:	881b      	ldrh	r3, [r3, #0]
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	4bb7      	ldr	r3, [pc, #732]	; (800eaa4 <get_current_dq+0x328>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4611      	mov	r1, r2
 800e7cc:	4ab7      	ldr	r2, [pc, #732]	; (800eaac <get_current_dq+0x330>)
 800e7ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iw_buf[pos_MEDF_I] = (int32_t)AD_Iw[0];
 800e7d2:	4bb2      	ldr	r3, [pc, #712]	; (800ea9c <get_current_dq+0x320>)
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	4bb2      	ldr	r3, [pc, #712]	; (800eaa4 <get_current_dq+0x328>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4611      	mov	r1, r2
 800e7de:	4ab4      	ldr	r2, [pc, #720]	; (800eab0 <get_current_dq+0x334>)
 800e7e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	pos_MEDF_I += 1;
 800e7e4:	4baf      	ldr	r3, [pc, #700]	; (800eaa4 <get_current_dq+0x328>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	4aae      	ldr	r2, [pc, #696]	; (800eaa4 <get_current_dq+0x328>)
 800e7ec:	6013      	str	r3, [r2, #0]
	if(pos_MEDF_I >= N_MEDF_I)
 800e7ee:	4bad      	ldr	r3, [pc, #692]	; (800eaa4 <get_current_dq+0x328>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	dd02      	ble.n	800e7fc <get_current_dq+0x80>
	{
		pos_MEDF_I = 0;
 800e7f6:	4bab      	ldr	r3, [pc, #684]	; (800eaa4 <get_current_dq+0x328>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	601a      	str	r2, [r3, #0]
	}

	AD_Iu_MEDF = median3(AD_Iu_buf);
 800e7fc:	48aa      	ldr	r0, [pc, #680]	; (800eaa8 <get_current_dq+0x32c>)
 800e7fe:	f000 f979 	bl	800eaf4 <median3>
 800e802:	4602      	mov	r2, r0
 800e804:	4bab      	ldr	r3, [pc, #684]	; (800eab4 <get_current_dq+0x338>)
 800e806:	601a      	str	r2, [r3, #0]
	AD_Iv_MEDF = median3(AD_Iv_buf);
 800e808:	48a8      	ldr	r0, [pc, #672]	; (800eaac <get_current_dq+0x330>)
 800e80a:	f000 f973 	bl	800eaf4 <median3>
 800e80e:	4602      	mov	r2, r0
 800e810:	4ba9      	ldr	r3, [pc, #676]	; (800eab8 <get_current_dq+0x33c>)
 800e812:	601a      	str	r2, [r3, #0]
	AD_Iw_MEDF = median3(AD_Iw_buf);
 800e814:	48a6      	ldr	r0, [pc, #664]	; (800eab0 <get_current_dq+0x334>)
 800e816:	f000 f96d 	bl	800eaf4 <median3>
 800e81a:	4602      	mov	r2, r0
 800e81c:	4ba7      	ldr	r3, [pc, #668]	; (800eabc <get_current_dq+0x340>)
 800e81e:	601a      	str	r2, [r3, #0]

	V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - V_Iu_offset;
 800e820:	4ba4      	ldr	r3, [pc, #656]	; (800eab4 <get_current_dq+0x338>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	ee07 3a90 	vmov	s15, r3
 800e828:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e82c:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800eac0 <get_current_dq+0x344>
 800e830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e838:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800eac4 <get_current_dq+0x348>
 800e83c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e840:	4ba1      	ldr	r3, [pc, #644]	; (800eac8 <get_current_dq+0x34c>)
 800e842:	edd3 7a00 	vldr	s15, [r3]
 800e846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e84a:	4ba0      	ldr	r3, [pc, #640]	; (800eacc <get_current_dq+0x350>)
 800e84c:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - V_Iv_offset;
 800e850:	4b99      	ldr	r3, [pc, #612]	; (800eab8 <get_current_dq+0x33c>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	ee07 3a90 	vmov	s15, r3
 800e858:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e85c:	eddf 7a98 	vldr	s15, [pc, #608]	; 800eac0 <get_current_dq+0x344>
 800e860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e868:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800eac4 <get_current_dq+0x348>
 800e86c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e870:	4b97      	ldr	r3, [pc, #604]	; (800ead0 <get_current_dq+0x354>)
 800e872:	edd3 7a00 	vldr	s15, [r3]
 800e876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e87a:	4b96      	ldr	r3, [pc, #600]	; (800ead4 <get_current_dq+0x358>)
 800e87c:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - V_Iw_offset;
 800e880:	4b8e      	ldr	r3, [pc, #568]	; (800eabc <get_current_dq+0x340>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	ee07 3a90 	vmov	s15, r3
 800e888:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e88c:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800eac0 <get_current_dq+0x344>
 800e890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e898:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800eac4 <get_current_dq+0x348>
 800e89c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e8a0:	4b8d      	ldr	r3, [pc, #564]	; (800ead8 <get_current_dq+0x35c>)
 800e8a2:	edd3 7a00 	vldr	s15, [r3]
 800e8a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8aa:	4b8c      	ldr	r3, [pc, #560]	; (800eadc <get_current_dq+0x360>)
 800e8ac:	edc3 7a00 	vstr	s15, [r3]

#endif

	//Vdc = Vdc * 0.9 + 0.1 * (float)AD_Iu[1] / AD_Range * Vref_AD * Gain_Vdc_sense;

	switch(SVM_sector)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b05      	cmp	r3, #5
 800e8b4:	d874      	bhi.n	800e9a0 <get_current_dq+0x224>
 800e8b6:	a201      	add	r2, pc, #4	; (adr r2, 800e8bc <get_current_dq+0x140>)
 800e8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8bc:	0800e8d5 	.word	0x0800e8d5
 800e8c0:	0800e919 	.word	0x0800e919
 800e8c4:	0800e919 	.word	0x0800e919
 800e8c8:	0800e95d 	.word	0x0800e95d
 800e8cc:	0800e95d 	.word	0x0800e95d
 800e8d0:	0800e8d5 	.word	0x0800e8d5
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 800e8d4:	4b7f      	ldr	r3, [pc, #508]	; (800ead4 <get_current_dq+0x358>)
 800e8d6:	edd3 7a00 	vldr	s15, [r3]
 800e8da:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800e8de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e8e2:	4b7f      	ldr	r3, [pc, #508]	; (800eae0 <get_current_dq+0x364>)
 800e8e4:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 800e8e8:	4b7c      	ldr	r3, [pc, #496]	; (800eadc <get_current_dq+0x360>)
 800e8ea:	edd3 7a00 	vldr	s15, [r3]
 800e8ee:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800e8f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e8f6:	4b7b      	ldr	r3, [pc, #492]	; (800eae4 <get_current_dq+0x368>)
 800e8f8:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 800e8fc:	4b78      	ldr	r3, [pc, #480]	; (800eae0 <get_current_dq+0x364>)
 800e8fe:	edd3 7a00 	vldr	s15, [r3]
 800e902:	eeb1 7a67 	vneg.f32	s14, s15
 800e906:	4b77      	ldr	r3, [pc, #476]	; (800eae4 <get_current_dq+0x368>)
 800e908:	edd3 7a00 	vldr	s15, [r3]
 800e90c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e910:	4b75      	ldr	r3, [pc, #468]	; (800eae8 <get_current_dq+0x36c>)
 800e912:	edc3 7a00 	vstr	s15, [r3]
		break;
 800e916:	e043      	b.n	800e9a0 <get_current_dq+0x224>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 800e918:	4b70      	ldr	r3, [pc, #448]	; (800eadc <get_current_dq+0x360>)
 800e91a:	edd3 7a00 	vldr	s15, [r3]
 800e91e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800e922:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e926:	4b6f      	ldr	r3, [pc, #444]	; (800eae4 <get_current_dq+0x368>)
 800e928:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 800e92c:	4b67      	ldr	r3, [pc, #412]	; (800eacc <get_current_dq+0x350>)
 800e92e:	edd3 7a00 	vldr	s15, [r3]
 800e932:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800e936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e93a:	4b6b      	ldr	r3, [pc, #428]	; (800eae8 <get_current_dq+0x36c>)
 800e93c:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 800e940:	4b68      	ldr	r3, [pc, #416]	; (800eae4 <get_current_dq+0x368>)
 800e942:	edd3 7a00 	vldr	s15, [r3]
 800e946:	eeb1 7a67 	vneg.f32	s14, s15
 800e94a:	4b67      	ldr	r3, [pc, #412]	; (800eae8 <get_current_dq+0x36c>)
 800e94c:	edd3 7a00 	vldr	s15, [r3]
 800e950:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e954:	4b62      	ldr	r3, [pc, #392]	; (800eae0 <get_current_dq+0x364>)
 800e956:	edc3 7a00 	vstr	s15, [r3]
		break;
 800e95a:	e021      	b.n	800e9a0 <get_current_dq+0x224>

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 800e95c:	4b5b      	ldr	r3, [pc, #364]	; (800eacc <get_current_dq+0x350>)
 800e95e:	edd3 7a00 	vldr	s15, [r3]
 800e962:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800e966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e96a:	4b5f      	ldr	r3, [pc, #380]	; (800eae8 <get_current_dq+0x36c>)
 800e96c:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 800e970:	4b58      	ldr	r3, [pc, #352]	; (800ead4 <get_current_dq+0x358>)
 800e972:	edd3 7a00 	vldr	s15, [r3]
 800e976:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800e97a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e97e:	4b58      	ldr	r3, [pc, #352]	; (800eae0 <get_current_dq+0x364>)
 800e980:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 800e984:	4b58      	ldr	r3, [pc, #352]	; (800eae8 <get_current_dq+0x36c>)
 800e986:	edd3 7a00 	vldr	s15, [r3]
 800e98a:	eeb1 7a67 	vneg.f32	s14, s15
 800e98e:	4b54      	ldr	r3, [pc, #336]	; (800eae0 <get_current_dq+0x364>)
 800e990:	edd3 7a00 	vldr	s15, [r3]
 800e994:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e998:	4b52      	ldr	r3, [pc, #328]	; (800eae4 <get_current_dq+0x368>)
 800e99a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800e99e:	bf00      	nop
	}

	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800e9a0:	4b51      	ldr	r3, [pc, #324]	; (800eae8 <get_current_dq+0x36c>)
 800e9a2:	ed93 7a00 	vldr	s14, [r3]
 800e9a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9ae:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9b2:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800e9b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e9ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9be:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 800eaec <get_current_dq+0x370>
 800e9c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e9c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e9ca:	4b45      	ldr	r3, [pc, #276]	; (800eae0 <get_current_dq+0x364>)
 800e9cc:	edd3 7a00 	vldr	s15, [r3]
 800e9d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9dc:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800e9e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e9e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9e8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800eaec <get_current_dq+0x370>
 800e9ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e9f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e9f4:	4b3b      	ldr	r3, [pc, #236]	; (800eae4 <get_current_dq+0x368>)
 800e9f6:	edd3 7a00 	vldr	s15, [r3]
 800e9fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea02:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800eaf0 <get_current_dq+0x374>
 800ea06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800ea10:	4b35      	ldr	r3, [pc, #212]	; (800eae8 <get_current_dq+0x36c>)
 800ea12:	edd3 7a00 	vldr	s15, [r3]
 800ea16:	eeb1 7a67 	vneg.f32	s14, s15
 800ea1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea22:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea26:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ea2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ea2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea32:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800eaec <get_current_dq+0x370>
 800ea36:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ea3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ea3e:	4b28      	ldr	r3, [pc, #160]	; (800eae0 <get_current_dq+0x364>)
 800ea40:	edd3 7a00 	vldr	s15, [r3]
 800ea44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea50:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ea54:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ea58:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea5c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800eaec <get_current_dq+0x370>
 800ea60:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ea64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ea68:	4b1e      	ldr	r3, [pc, #120]	; (800eae4 <get_current_dq+0x368>)
 800ea6a:	edd3 7a00 	vldr	s15, [r3]
 800ea6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea76:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800eaf0 <get_current_dq+0x374>
 800ea7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	edc3 7a00 	vstr	s15, [r3]


	return;
 800ea84:	bf00      	nop

}
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	20000114 	.word	0x20000114
 800ea90:	200002b4 	.word	0x200002b4
 800ea94:	20000118 	.word	0x20000118
 800ea98:	2000020c 	.word	0x2000020c
 800ea9c:	2000011c 	.word	0x2000011c
 800eaa0:	200002fc 	.word	0x200002fc
 800eaa4:	20000138 	.word	0x20000138
 800eaa8:	2000013c 	.word	0x2000013c
 800eaac:	20000148 	.word	0x20000148
 800eab0:	20000154 	.word	0x20000154
 800eab4:	20000160 	.word	0x20000160
 800eab8:	20000164 	.word	0x20000164
 800eabc:	20000168 	.word	0x20000168
 800eac0:	00001000 	.word	0x00001000
 800eac4:	40533333 	.word	0x40533333
 800eac8:	20000018 	.word	0x20000018
 800eacc:	20000120 	.word	0x20000120
 800ead0:	2000001c 	.word	0x2000001c
 800ead4:	20000124 	.word	0x20000124
 800ead8:	20000020 	.word	0x20000020
 800eadc:	20000128 	.word	0x20000128
 800eae0:	20000130 	.word	0x20000130
 800eae4:	20000134 	.word	0x20000134
 800eae8:	2000012c 	.word	0x2000012c
 800eaec:	3f5ae148 	.word	0x3f5ae148
 800eaf0:	3f510625 	.word	0x3f510625

0800eaf4 <median3>:



extern int32_t median3(int32_t *buf)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3304      	adds	r3, #4
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	da17      	bge.n	800eb3a <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	3308      	adds	r3, #8
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	da02      	bge.n	800eb1e <median3+0x2a>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	e025      	b.n	800eb6a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	3308      	adds	r3, #8
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3304      	adds	r3, #4
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	da02      	bge.n	800eb34 <median3+0x40>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	e01a      	b.n	800eb6a <median3+0x76>
		else						return buf[1];
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	e017      	b.n	800eb6a <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3308      	adds	r3, #8
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3304      	adds	r3, #4
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	da02      	bge.n	800eb50 <median3+0x5c>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	e00c      	b.n	800eb6a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	3308      	adds	r3, #8
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3304      	adds	r3, #4
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	da02      	bge.n	800eb66 <median3+0x72>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	e001      	b.n	800eb6a <median3+0x76>
		else						return buf[0];
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
	...

0800eb78 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800eb7c:	4b18      	ldr	r3, [pc, #96]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800eb7e:	4a19      	ldr	r2, [pc, #100]	; (800ebe4 <MX_CAN1_Init+0x6c>)
 800eb80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800eb82:	4b17      	ldr	r3, [pc, #92]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800eb84:	2204      	movs	r2, #4
 800eb86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800eb88:	4b15      	ldr	r3, [pc, #84]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800eb8e:	4b14      	ldr	r3, [pc, #80]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800eb90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb94:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800eb96:	4b12      	ldr	r3, [pc, #72]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800eb98:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800eb9c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800eb9e:	4b10      	ldr	r3, [pc, #64]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800eba0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800eba4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800eba6:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800ebac:	4b0c      	ldr	r3, [pc, #48]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800ebb2:	4b0b      	ldr	r3, [pc, #44]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800ebb8:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800ebbe:	4b08      	ldr	r3, [pc, #32]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800ebc4:	4b06      	ldr	r3, [pc, #24]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800ebca:	4805      	ldr	r0, [pc, #20]	; (800ebe0 <MX_CAN1_Init+0x68>)
 800ebcc:	f7fa fd46 	bl	800965c <HAL_CAN_Init>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800ebd6:	f000 facf 	bl	800f178 <Error_Handler>
  }

}
 800ebda:	bf00      	nop
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	20000450 	.word	0x20000450
 800ebe4:	40006400 	.word	0x40006400

0800ebe8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b08a      	sub	sp, #40	; 0x28
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebf0:	f107 0314 	add.w	r3, r7, #20
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	601a      	str	r2, [r3, #0]
 800ebf8:	605a      	str	r2, [r3, #4]
 800ebfa:	609a      	str	r2, [r3, #8]
 800ebfc:	60da      	str	r2, [r3, #12]
 800ebfe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a21      	ldr	r2, [pc, #132]	; (800ec8c <HAL_CAN_MspInit+0xa4>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d13c      	bne.n	800ec84 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	613b      	str	r3, [r7, #16]
 800ec0e:	4b20      	ldr	r3, [pc, #128]	; (800ec90 <HAL_CAN_MspInit+0xa8>)
 800ec10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec12:	4a1f      	ldr	r2, [pc, #124]	; (800ec90 <HAL_CAN_MspInit+0xa8>)
 800ec14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ec18:	6413      	str	r3, [r2, #64]	; 0x40
 800ec1a:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <HAL_CAN_MspInit+0xa8>)
 800ec1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec22:	613b      	str	r3, [r7, #16]
 800ec24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec26:	2300      	movs	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
 800ec2a:	4b19      	ldr	r3, [pc, #100]	; (800ec90 <HAL_CAN_MspInit+0xa8>)
 800ec2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2e:	4a18      	ldr	r2, [pc, #96]	; (800ec90 <HAL_CAN_MspInit+0xa8>)
 800ec30:	f043 0301 	orr.w	r3, r3, #1
 800ec34:	6313      	str	r3, [r2, #48]	; 0x30
 800ec36:	4b16      	ldr	r3, [pc, #88]	; (800ec90 <HAL_CAN_MspInit+0xa8>)
 800ec38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3a:	f003 0301 	and.w	r3, r3, #1
 800ec3e:	60fb      	str	r3, [r7, #12]
 800ec40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ec46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec48:	2302      	movs	r3, #2
 800ec4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec50:	2303      	movs	r3, #3
 800ec52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ec54:	2309      	movs	r3, #9
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec58:	f107 0314 	add.w	r3, r7, #20
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	480d      	ldr	r0, [pc, #52]	; (800ec94 <HAL_CAN_MspInit+0xac>)
 800ec60:	f7fb fdc0 	bl	800a7e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800ec64:	2200      	movs	r2, #0
 800ec66:	2100      	movs	r1, #0
 800ec68:	2013      	movs	r0, #19
 800ec6a:	f7fb f9ec 	bl	800a046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800ec6e:	2013      	movs	r0, #19
 800ec70:	f7fb fa05 	bl	800a07e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800ec74:	2200      	movs	r2, #0
 800ec76:	2100      	movs	r1, #0
 800ec78:	2014      	movs	r0, #20
 800ec7a:	f7fb f9e4 	bl	800a046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800ec7e:	2014      	movs	r0, #20
 800ec80:	f7fb f9fd 	bl	800a07e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800ec84:	bf00      	nop
 800ec86:	3728      	adds	r7, #40	; 0x28
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	40006400 	.word	0x40006400
 800ec90:	40023800 	.word	0x40023800
 800ec94:	40020000 	.word	0x40020000

0800ec98 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800eca0:	2200      	movs	r2, #0
 800eca2:	2140      	movs	r1, #64	; 0x40
 800eca4:	4803      	ldr	r0, [pc, #12]	; (800ecb4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800eca6:	f7fb ff47 	bl	800ab38 <HAL_GPIO_WritePin>

}
 800ecaa:	bf00      	nop
 800ecac:	3708      	adds	r7, #8
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	40020400 	.word	0x40020400

0800ecb8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2140      	movs	r1, #64	; 0x40
 800ecc4:	4803      	ldr	r0, [pc, #12]	; (800ecd4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800ecc6:	f7fb ff37 	bl	800ab38 <HAL_GPIO_WritePin>

}
 800ecca:	bf00      	nop
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	40020400 	.word	0x40020400

0800ecd8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800ece0:	2200      	movs	r2, #0
 800ece2:	2140      	movs	r1, #64	; 0x40
 800ece4:	4803      	ldr	r0, [pc, #12]	; (800ecf4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800ece6:	f7fb ff27 	bl	800ab38 <HAL_GPIO_WritePin>

}
 800ecea:	bf00      	nop
 800ecec:	3708      	adds	r7, #8
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	40020400 	.word	0x40020400

0800ecf8 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800ed00:	4b16      	ldr	r3, [pc, #88]	; (800ed5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800ed02:	4a17      	ldr	r2, [pc, #92]	; (800ed60 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800ed04:	2100      	movs	r1, #0
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7fa fda3 	bl	8009852 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800ed0c:	4b15      	ldr	r3, [pc, #84]	; (800ed64 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800ed0e:	2201      	movs	r2, #1
 800ed10:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800ed12:	4b13      	ldr	r3, [pc, #76]	; (800ed60 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	089b      	lsrs	r3, r3, #2
 800ed18:	f003 0307 	and.w	r3, r3, #7
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d114      	bne.n	800ed4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800ed20:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800ed22:	691b      	ldr	r3, [r3, #16]
 800ed24:	2b04      	cmp	r3, #4
 800ed26:	d110      	bne.n	800ed4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800ed28:	4b0c      	ldr	r3, [pc, #48]	; (800ed5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800ed2e:	4b0b      	ldr	r3, [pc, #44]	; (800ed5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800ed30:	785b      	ldrb	r3, [r3, #1]
 800ed32:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800ed34:	4b09      	ldr	r3, [pc, #36]	; (800ed5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800ed36:	789b      	ldrb	r3, [r3, #2]
 800ed38:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800ed3a:	4b08      	ldr	r3, [pc, #32]	; (800ed5c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800ed3c:	78db      	ldrb	r3, [r3, #3]
 800ed3e:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	4a09      	ldr	r2, [pc, #36]	; (800ed68 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800ed44:	6013      	str	r3, [r2, #0]

		timeoutReset();
 800ed46:	f001 fb99 	bl	801047c <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	2140      	movs	r1, #64	; 0x40
 800ed4e:	4807      	ldr	r0, [pc, #28]	; (800ed6c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800ed50:	f7fb fef2 	bl	800ab38 <HAL_GPIO_WritePin>

}
 800ed54:	bf00      	nop
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	20000448 	.word	0x20000448
 800ed60:	2000042c 	.word	0x2000042c
 800ed64:	2000016c 	.word	0x2000016c
 800ed68:	200000f4 	.word	0x200000f4
 800ed6c:	40020000 	.word	0x40020000

0800ed70 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ed76:	2300      	movs	r3, #0
 800ed78:	607b      	str	r3, [r7, #4]
 800ed7a:	4b14      	ldr	r3, [pc, #80]	; (800edcc <MX_DMA_Init+0x5c>)
 800ed7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed7e:	4a13      	ldr	r2, [pc, #76]	; (800edcc <MX_DMA_Init+0x5c>)
 800ed80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ed84:	6313      	str	r3, [r2, #48]	; 0x30
 800ed86:	4b11      	ldr	r3, [pc, #68]	; (800edcc <MX_DMA_Init+0x5c>)
 800ed88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed8e:	607b      	str	r3, [r7, #4]
 800ed90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ed92:	2200      	movs	r2, #0
 800ed94:	2100      	movs	r1, #0
 800ed96:	2038      	movs	r0, #56	; 0x38
 800ed98:	f7fb f955 	bl	800a046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800ed9c:	2038      	movs	r0, #56	; 0x38
 800ed9e:	f7fb f96e 	bl	800a07e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800eda2:	2200      	movs	r2, #0
 800eda4:	2100      	movs	r1, #0
 800eda6:	2039      	movs	r0, #57	; 0x39
 800eda8:	f7fb f94d 	bl	800a046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800edac:	2039      	movs	r0, #57	; 0x39
 800edae:	f7fb f966 	bl	800a07e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800edb2:	2200      	movs	r2, #0
 800edb4:	2100      	movs	r1, #0
 800edb6:	203a      	movs	r0, #58	; 0x3a
 800edb8:	f7fb f945 	bl	800a046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800edbc:	203a      	movs	r0, #58	; 0x3a
 800edbe:	f7fb f95e 	bl	800a07e <HAL_NVIC_EnableIRQ>

}
 800edc2:	bf00      	nop
 800edc4:	3708      	adds	r7, #8
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	40023800 	.word	0x40023800

0800edd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b08a      	sub	sp, #40	; 0x28
 800edd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edd6:	f107 0314 	add.w	r3, r7, #20
 800edda:	2200      	movs	r2, #0
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	605a      	str	r2, [r3, #4]
 800ede0:	609a      	str	r2, [r3, #8]
 800ede2:	60da      	str	r2, [r3, #12]
 800ede4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ede6:	2300      	movs	r3, #0
 800ede8:	613b      	str	r3, [r7, #16]
 800edea:	4b45      	ldr	r3, [pc, #276]	; (800ef00 <MX_GPIO_Init+0x130>)
 800edec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edee:	4a44      	ldr	r2, [pc, #272]	; (800ef00 <MX_GPIO_Init+0x130>)
 800edf0:	f043 0304 	orr.w	r3, r3, #4
 800edf4:	6313      	str	r3, [r2, #48]	; 0x30
 800edf6:	4b42      	ldr	r3, [pc, #264]	; (800ef00 <MX_GPIO_Init+0x130>)
 800edf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfa:	f003 0304 	and.w	r3, r3, #4
 800edfe:	613b      	str	r3, [r7, #16]
 800ee00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ee02:	2300      	movs	r3, #0
 800ee04:	60fb      	str	r3, [r7, #12]
 800ee06:	4b3e      	ldr	r3, [pc, #248]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee0a:	4a3d      	ldr	r2, [pc, #244]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee10:	6313      	str	r3, [r2, #48]	; 0x30
 800ee12:	4b3b      	ldr	r3, [pc, #236]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60bb      	str	r3, [r7, #8]
 800ee22:	4b37      	ldr	r3, [pc, #220]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee26:	4a36      	ldr	r2, [pc, #216]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee28:	f043 0301 	orr.w	r3, r3, #1
 800ee2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ee2e:	4b34      	ldr	r3, [pc, #208]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee32:	f003 0301 	and.w	r3, r3, #1
 800ee36:	60bb      	str	r3, [r7, #8]
 800ee38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	607b      	str	r3, [r7, #4]
 800ee3e:	4b30      	ldr	r3, [pc, #192]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee42:	4a2f      	ldr	r2, [pc, #188]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee44:	f043 0302 	orr.w	r3, r3, #2
 800ee48:	6313      	str	r3, [r2, #48]	; 0x30
 800ee4a:	4b2d      	ldr	r3, [pc, #180]	; (800ef00 <MX_GPIO_Init+0x130>)
 800ee4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee4e:	f003 0302 	and.w	r3, r3, #2
 800ee52:	607b      	str	r3, [r7, #4]
 800ee54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 800ee56:	2200      	movs	r2, #0
 800ee58:	f248 6160 	movw	r1, #34400	; 0x8660
 800ee5c:	4829      	ldr	r0, [pc, #164]	; (800ef04 <MX_GPIO_Init+0x134>)
 800ee5e:	f7fb fe6b 	bl	800ab38 <HAL_GPIO_WritePin>
                          |SPI3_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 800ee62:	2200      	movs	r2, #0
 800ee64:	f241 0150 	movw	r1, #4176	; 0x1050
 800ee68:	4827      	ldr	r0, [pc, #156]	; (800ef08 <MX_GPIO_Init+0x138>)
 800ee6a:	f7fb fe65 	bl	800ab38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800ee6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ee74:	4b25      	ldr	r3, [pc, #148]	; (800ef0c <MX_GPIO_Init+0x13c>)
 800ee76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ee7c:	f107 0314 	add.w	r3, r7, #20
 800ee80:	4619      	mov	r1, r3
 800ee82:	4823      	ldr	r0, [pc, #140]	; (800ef10 <MX_GPIO_Init+0x140>)
 800ee84:	f7fb fcae 	bl	800a7e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 800ee88:	f248 6360 	movw	r3, #34400	; 0x8660
 800ee8c:	617b      	str	r3, [r7, #20]
                          |SPI3_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee92:	2300      	movs	r3, #0
 800ee94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee96:	2300      	movs	r3, #0
 800ee98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee9a:	f107 0314 	add.w	r3, r7, #20
 800ee9e:	4619      	mov	r1, r3
 800eea0:	4818      	ldr	r0, [pc, #96]	; (800ef04 <MX_GPIO_Init+0x134>)
 800eea2:	f7fb fc9f 	bl	800a7e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 800eea6:	f241 0350 	movw	r3, #4176	; 0x1050
 800eeaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eeac:	2301      	movs	r3, #1
 800eeae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eeb8:	f107 0314 	add.w	r3, r7, #20
 800eebc:	4619      	mov	r1, r3
 800eebe:	4812      	ldr	r0, [pc, #72]	; (800ef08 <MX_GPIO_Init+0x138>)
 800eec0:	f7fb fc90 	bl	800a7e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 800eec4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800eec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eeca:	2300      	movs	r3, #0
 800eecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eece:	2301      	movs	r3, #1
 800eed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eed2:	f107 0314 	add.w	r3, r7, #20
 800eed6:	4619      	mov	r1, r3
 800eed8:	480b      	ldr	r0, [pc, #44]	; (800ef08 <MX_GPIO_Init+0x138>)
 800eeda:	f7fb fc83 	bl	800a7e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 800eede:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eee4:	2300      	movs	r3, #0
 800eee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eee8:	2300      	movs	r3, #0
 800eeea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 800eeec:	f107 0314 	add.w	r3, r7, #20
 800eef0:	4619      	mov	r1, r3
 800eef2:	4804      	ldr	r0, [pc, #16]	; (800ef04 <MX_GPIO_Init+0x134>)
 800eef4:	f7fb fc76 	bl	800a7e4 <HAL_GPIO_Init>

}
 800eef8:	bf00      	nop
 800eefa:	3728      	adds	r7, #40	; 0x28
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	40023800 	.word	0x40023800
 800ef04:	40020000 	.word	0x40020000
 800ef08:	40020400 	.word	0x40020400
 800ef0c:	10210000 	.word	0x10210000
 800ef10:	40020800 	.word	0x40020800

0800ef14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800ef1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ef20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800ef24:	f003 0301 	and.w	r3, r3, #1
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d013      	beq.n	800ef54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800ef2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ef30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800ef34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00b      	beq.n	800ef54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800ef3c:	e000      	b.n	800ef40 <ITM_SendChar+0x2c>
    {
      __NOP();
 800ef3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800ef40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d0f9      	beq.n	800ef3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800ef4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	b2d2      	uxtb	r2, r2
 800ef52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800ef54:	687b      	ldr	r3, [r7, #4]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b086      	sub	sp, #24
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	60f8      	str	r0, [r7, #12]
 800ef6a:	60b9      	str	r1, [r7, #8]
 800ef6c:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800ef6e:	2300      	movs	r3, #0
 800ef70:	617b      	str	r3, [r7, #20]
 800ef72:	e009      	b.n	800ef88 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	1c5a      	adds	r2, r3, #1
 800ef78:	60ba      	str	r2, [r7, #8]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7ff ffc9 	bl	800ef14 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	3301      	adds	r3, #1
 800ef86:	617b      	str	r3, [r7, #20]
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	dbf1      	blt.n	800ef74 <_write+0x12>
  }
  return len;
 800ef90:	687b      	ldr	r3, [r7, #4]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3718      	adds	r7, #24
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
	...

0800ef9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800efa6:	f7f9 fec1 	bl	8008d2c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800efaa:	f000 f879 	bl	800f0a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800efae:	f7ff ff0f 	bl	800edd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800efb2:	f7ff fedd 	bl	800ed70 <MX_DMA_Init>
  MX_ADC1_Init();
 800efb6:	f7ff f98d 	bl	800e2d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800efba:	f7ff f9dd 	bl	800e378 <MX_ADC2_Init>
  MX_ADC3_Init();
 800efbe:	f7ff fa2d 	bl	800e41c <MX_ADC3_Init>
  MX_CAN1_Init();
 800efc2:	f7ff fdd9 	bl	800eb78 <MX_CAN1_Init>
  MX_SPI2_Init();
 800efc6:	f000 fc8d 	bl	800f8e4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800efca:	f000 fcc3 	bl	800f954 <MX_SPI3_Init>
  MX_TIM8_Init();
 800efce:	f001 f88f 	bl	80100f0 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800efd2:	f001 fa6d 	bl	80104b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DRV_Init();
 800efd6:	f7ff f8f5 	bl	800e1c4 <DRV_Init>



  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 800efda:	482b      	ldr	r0, [pc, #172]	; (800f088 <main+0xec>)
 800efdc:	f001 fbb2 	bl	8010744 <puts>



  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 800efe0:	2201      	movs	r2, #1
 800efe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800efe6:	4829      	ldr	r0, [pc, #164]	; (800f08c <main+0xf0>)
 800efe8:	f7fb fda6 	bl	800ab38 <HAL_GPIO_WritePin>


  printf("Hello SPI Gate Driver\n");
 800efec:	4828      	ldr	r0, [pc, #160]	; (800f090 <main+0xf4>)
 800efee:	f001 fba9 	bl	8010744 <puts>

  DRV_ReadData(&drv8323, 0x05);
 800eff2:	2105      	movs	r1, #5
 800eff4:	4827      	ldr	r0, [pc, #156]	; (800f094 <main+0xf8>)
 800eff6:	f7ff f936 	bl	800e266 <DRV_ReadData>

  printf("txData: 0x%04x\n", (drv8323.txBuf[0] << 8) | drv8323.txBuf[1]);
 800effa:	4b26      	ldr	r3, [pc, #152]	; (800f094 <main+0xf8>)
 800effc:	7a9b      	ldrb	r3, [r3, #10]
 800effe:	021b      	lsls	r3, r3, #8
 800f000:	4a24      	ldr	r2, [pc, #144]	; (800f094 <main+0xf8>)
 800f002:	7ad2      	ldrb	r2, [r2, #11]
 800f004:	4313      	orrs	r3, r2
 800f006:	4619      	mov	r1, r3
 800f008:	4823      	ldr	r0, [pc, #140]	; (800f098 <main+0xfc>)
 800f00a:	f001 fb27 	bl	801065c <iprintf>
  printf("rxData: 0x%04x\n", (drv8323.rxBuf[0] << 8) | drv8323.rxBuf[1]);
 800f00e:	4b21      	ldr	r3, [pc, #132]	; (800f094 <main+0xf8>)
 800f010:	7b1b      	ldrb	r3, [r3, #12]
 800f012:	021b      	lsls	r3, r3, #8
 800f014:	4a1f      	ldr	r2, [pc, #124]	; (800f094 <main+0xf8>)
 800f016:	7b52      	ldrb	r2, [r2, #13]
 800f018:	4313      	orrs	r3, r2
 800f01a:	4619      	mov	r1, r3
 800f01c:	481f      	ldr	r0, [pc, #124]	; (800f09c <main+0x100>)
 800f01e:	f001 fb1d 	bl	801065c <iprintf>


  DRV_WriteData(&drv8323, 0x05, 0b01110110111);
 800f022:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f026:	2105      	movs	r1, #5
 800f028:	481a      	ldr	r0, [pc, #104]	; (800f094 <main+0xf8>)
 800f02a:	f7ff f8e3 	bl	800e1f4 <DRV_WriteData>

  printf("txData: 0x%04x\n", (drv8323.txBuf[0] << 8) | drv8323.txBuf[1]);
 800f02e:	4b19      	ldr	r3, [pc, #100]	; (800f094 <main+0xf8>)
 800f030:	7a9b      	ldrb	r3, [r3, #10]
 800f032:	021b      	lsls	r3, r3, #8
 800f034:	4a17      	ldr	r2, [pc, #92]	; (800f094 <main+0xf8>)
 800f036:	7ad2      	ldrb	r2, [r2, #11]
 800f038:	4313      	orrs	r3, r2
 800f03a:	4619      	mov	r1, r3
 800f03c:	4816      	ldr	r0, [pc, #88]	; (800f098 <main+0xfc>)
 800f03e:	f001 fb0d 	bl	801065c <iprintf>
  printf("rxData: 0x%04x\n", (drv8323.rxBuf[0] << 8) | drv8323.rxBuf[1]);
 800f042:	4b14      	ldr	r3, [pc, #80]	; (800f094 <main+0xf8>)
 800f044:	7b1b      	ldrb	r3, [r3, #12]
 800f046:	021b      	lsls	r3, r3, #8
 800f048:	4a12      	ldr	r2, [pc, #72]	; (800f094 <main+0xf8>)
 800f04a:	7b52      	ldrb	r2, [r2, #13]
 800f04c:	4313      	orrs	r3, r2
 800f04e:	4619      	mov	r1, r3
 800f050:	4812      	ldr	r0, [pc, #72]	; (800f09c <main+0x100>)
 800f052:	f001 fb03 	bl	801065c <iprintf>


  DRV_ReadData(&drv8323, 0x05);
 800f056:	2105      	movs	r1, #5
 800f058:	480e      	ldr	r0, [pc, #56]	; (800f094 <main+0xf8>)
 800f05a:	f7ff f904 	bl	800e266 <DRV_ReadData>

  printf("txData: 0x%04x\n", (drv8323.txBuf[0] << 8) | drv8323.txBuf[1]);
 800f05e:	4b0d      	ldr	r3, [pc, #52]	; (800f094 <main+0xf8>)
 800f060:	7a9b      	ldrb	r3, [r3, #10]
 800f062:	021b      	lsls	r3, r3, #8
 800f064:	4a0b      	ldr	r2, [pc, #44]	; (800f094 <main+0xf8>)
 800f066:	7ad2      	ldrb	r2, [r2, #11]
 800f068:	4313      	orrs	r3, r2
 800f06a:	4619      	mov	r1, r3
 800f06c:	480a      	ldr	r0, [pc, #40]	; (800f098 <main+0xfc>)
 800f06e:	f001 faf5 	bl	801065c <iprintf>
  printf("rxData: 0x%04x\n", (drv8323.rxBuf[0] << 8) | drv8323.rxBuf[1]);
 800f072:	4b08      	ldr	r3, [pc, #32]	; (800f094 <main+0xf8>)
 800f074:	7b1b      	ldrb	r3, [r3, #12]
 800f076:	021b      	lsls	r3, r3, #8
 800f078:	4a06      	ldr	r2, [pc, #24]	; (800f094 <main+0xf8>)
 800f07a:	7b52      	ldrb	r2, [r2, #13]
 800f07c:	4313      	orrs	r3, r2
 800f07e:	4619      	mov	r1, r3
 800f080:	4806      	ldr	r0, [pc, #24]	; (800f09c <main+0x100>)
 800f082:	f001 faeb 	bl	801065c <iprintf>


  while(1);
 800f086:	e7fe      	b.n	800f086 <main+0xea>
 800f088:	080116d0 	.word	0x080116d0
 800f08c:	40020000 	.word	0x40020000
 800f090:	080116d8 	.word	0x080116d8
 800f094:	200001fc 	.word	0x200001fc
 800f098:	080116f0 	.word	0x080116f0
 800f09c:	08011700 	.word	0x08011700

0800f0a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b094      	sub	sp, #80	; 0x50
 800f0a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f0a6:	f107 031c 	add.w	r3, r7, #28
 800f0aa:	2234      	movs	r2, #52	; 0x34
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f001 facc 	bl	801064c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f0b4:	f107 0308 	add.w	r3, r7, #8
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	605a      	str	r2, [r3, #4]
 800f0be:	609a      	str	r2, [r3, #8]
 800f0c0:	60da      	str	r2, [r3, #12]
 800f0c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	607b      	str	r3, [r7, #4]
 800f0c8:	4b29      	ldr	r3, [pc, #164]	; (800f170 <SystemClock_Config+0xd0>)
 800f0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0cc:	4a28      	ldr	r2, [pc, #160]	; (800f170 <SystemClock_Config+0xd0>)
 800f0ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0d2:	6413      	str	r3, [r2, #64]	; 0x40
 800f0d4:	4b26      	ldr	r3, [pc, #152]	; (800f170 <SystemClock_Config+0xd0>)
 800f0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0dc:	607b      	str	r3, [r7, #4]
 800f0de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	603b      	str	r3, [r7, #0]
 800f0e4:	4b23      	ldr	r3, [pc, #140]	; (800f174 <SystemClock_Config+0xd4>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a22      	ldr	r2, [pc, #136]	; (800f174 <SystemClock_Config+0xd4>)
 800f0ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f0ee:	6013      	str	r3, [r2, #0]
 800f0f0:	4b20      	ldr	r3, [pc, #128]	; (800f174 <SystemClock_Config+0xd4>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f0f8:	603b      	str	r3, [r7, #0]
 800f0fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800f100:	2301      	movs	r3, #1
 800f102:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f104:	2310      	movs	r3, #16
 800f106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f108:	2302      	movs	r3, #2
 800f10a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800f10c:	2300      	movs	r3, #0
 800f10e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800f110:	2310      	movs	r3, #16
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 800f114:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f118:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f11a:	2302      	movs	r3, #2
 800f11c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800f11e:	2302      	movs	r3, #2
 800f120:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800f122:	2302      	movs	r3, #2
 800f124:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f126:	f107 031c 	add.w	r3, r7, #28
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fb ffd4 	bl	800b0d8 <HAL_RCC_OscConfig>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800f136:	f000 f81f 	bl	800f178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f13a:	230f      	movs	r3, #15
 800f13c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f13e:	2302      	movs	r3, #2
 800f140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f142:	2300      	movs	r3, #0
 800f144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f146:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f14a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f150:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f152:	f107 0308 	add.w	r3, r7, #8
 800f156:	2105      	movs	r1, #5
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fb fd07 	bl	800ab6c <HAL_RCC_ClockConfig>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800f164:	f000 f808 	bl	800f178 <Error_Handler>
  }
}
 800f168:	bf00      	nop
 800f16a:	3750      	adds	r7, #80	; 0x50
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	40023800 	.word	0x40023800
 800f174:	40007000 	.word	0x40007000

0800f178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f178:	b480      	push	{r7}
 800f17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f17c:	bf00      	nop
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
	...

0800f188 <setSVM_dq>:
volatile int sector_SVM = 0;



inline void setSVM_dq()
{
 800f188:	b5b0      	push	{r4, r5, r7, lr}
 800f18a:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 800f18c:	4bb8      	ldr	r3, [pc, #736]	; (800f470 <setSVM_dq+0x2e8>)
 800f18e:	ed93 7a00 	vldr	s14, [r3]
 800f192:	4bb8      	ldr	r3, [pc, #736]	; (800f474 <setSVM_dq+0x2ec>)
 800f194:	edd3 7a00 	vldr	s15, [r3]
 800f198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f19c:	4bb6      	ldr	r3, [pc, #728]	; (800f478 <setSVM_dq+0x2f0>)
 800f19e:	edd3 6a00 	vldr	s13, [r3]
 800f1a2:	4bb6      	ldr	r3, [pc, #728]	; (800f47c <setSVM_dq+0x2f4>)
 800f1a4:	edd3 7a00 	vldr	s15, [r3]
 800f1a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1b0:	4bb3      	ldr	r3, [pc, #716]	; (800f480 <setSVM_dq+0x2f8>)
 800f1b2:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 800f1b6:	4bae      	ldr	r3, [pc, #696]	; (800f470 <setSVM_dq+0x2e8>)
 800f1b8:	ed93 7a00 	vldr	s14, [r3]
 800f1bc:	4baf      	ldr	r3, [pc, #700]	; (800f47c <setSVM_dq+0x2f4>)
 800f1be:	edd3 7a00 	vldr	s15, [r3]
 800f1c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1c6:	4bac      	ldr	r3, [pc, #688]	; (800f478 <setSVM_dq+0x2f0>)
 800f1c8:	edd3 6a00 	vldr	s13, [r3]
 800f1cc:	4ba9      	ldr	r3, [pc, #676]	; (800f474 <setSVM_dq+0x2ec>)
 800f1ce:	edd3 7a00 	vldr	s15, [r3]
 800f1d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1da:	4baa      	ldr	r3, [pc, #680]	; (800f484 <setSVM_dq+0x2fc>)
 800f1dc:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 800f1e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f1e4:	4ba7      	ldr	r3, [pc, #668]	; (800f484 <setSVM_dq+0x2fc>)
 800f1e6:	edd3 7a00 	vldr	s15, [r3]
 800f1ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1ee:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800f488 <setSVM_dq+0x300>
 800f1f2:	4ba3      	ldr	r3, [pc, #652]	; (800f480 <setSVM_dq+0x2f8>)
 800f1f4:	edd3 7a00 	vldr	s15, [r3]
 800f1f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f200:	4ba2      	ldr	r3, [pc, #648]	; (800f48c <setSVM_dq+0x304>)
 800f202:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 800f206:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f20a:	4b9e      	ldr	r3, [pc, #632]	; (800f484 <setSVM_dq+0x2fc>)
 800f20c:	edd3 7a00 	vldr	s15, [r3]
 800f210:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f214:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800f490 <setSVM_dq+0x308>
 800f218:	4b99      	ldr	r3, [pc, #612]	; (800f480 <setSVM_dq+0x2f8>)
 800f21a:	edd3 7a00 	vldr	s15, [r3]
 800f21e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f222:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f226:	4b9b      	ldr	r3, [pc, #620]	; (800f494 <setSVM_dq+0x30c>)
 800f228:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 800f22c:	4b97      	ldr	r3, [pc, #604]	; (800f48c <setSVM_dq+0x304>)
 800f22e:	edd3 7a00 	vldr	s15, [r3]
 800f232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23a:	db1e      	blt.n	800f27a <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 800f23c:	4b95      	ldr	r3, [pc, #596]	; (800f494 <setSVM_dq+0x30c>)
 800f23e:	edd3 7a00 	vldr	s15, [r3]
 800f242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24a:	d803      	bhi.n	800f254 <setSVM_dq+0xcc>
 800f24c:	4b92      	ldr	r3, [pc, #584]	; (800f498 <setSVM_dq+0x310>)
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
 800f252:	e030      	b.n	800f2b6 <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 800f254:	4b8d      	ldr	r3, [pc, #564]	; (800f48c <setSVM_dq+0x304>)
 800f256:	ed93 7a00 	vldr	s14, [r3]
 800f25a:	4b8e      	ldr	r3, [pc, #568]	; (800f494 <setSVM_dq+0x30c>)
 800f25c:	edd3 7a00 	vldr	s15, [r3]
 800f260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f268:	db03      	blt.n	800f272 <setSVM_dq+0xea>
 800f26a:	4b8b      	ldr	r3, [pc, #556]	; (800f498 <setSVM_dq+0x310>)
 800f26c:	2201      	movs	r2, #1
 800f26e:	601a      	str	r2, [r3, #0]
 800f270:	e021      	b.n	800f2b6 <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 800f272:	4b89      	ldr	r3, [pc, #548]	; (800f498 <setSVM_dq+0x310>)
 800f274:	2202      	movs	r2, #2
 800f276:	601a      	str	r2, [r3, #0]
 800f278:	e01d      	b.n	800f2b6 <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 800f27a:	4b86      	ldr	r3, [pc, #536]	; (800f494 <setSVM_dq+0x30c>)
 800f27c:	edd3 7a00 	vldr	s15, [r3]
 800f280:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f288:	db03      	blt.n	800f292 <setSVM_dq+0x10a>
 800f28a:	4b83      	ldr	r3, [pc, #524]	; (800f498 <setSVM_dq+0x310>)
 800f28c:	2203      	movs	r2, #3
 800f28e:	601a      	str	r2, [r3, #0]
 800f290:	e011      	b.n	800f2b6 <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 800f292:	4b7e      	ldr	r3, [pc, #504]	; (800f48c <setSVM_dq+0x304>)
 800f294:	ed93 7a00 	vldr	s14, [r3]
 800f298:	4b7e      	ldr	r3, [pc, #504]	; (800f494 <setSVM_dq+0x30c>)
 800f29a:	edd3 7a00 	vldr	s15, [r3]
 800f29e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a6:	d803      	bhi.n	800f2b0 <setSVM_dq+0x128>
 800f2a8:	4b7b      	ldr	r3, [pc, #492]	; (800f498 <setSVM_dq+0x310>)
 800f2aa:	2204      	movs	r2, #4
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	e002      	b.n	800f2b6 <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 800f2b0:	4b79      	ldr	r3, [pc, #484]	; (800f498 <setSVM_dq+0x310>)
 800f2b2:	2205      	movs	r2, #5
 800f2b4:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 800f2b6:	4b78      	ldr	r3, [pc, #480]	; (800f498 <setSVM_dq+0x310>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a78      	ldr	r2, [pc, #480]	; (800f49c <setSVM_dq+0x314>)
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	4413      	add	r3, r2
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4a77      	ldr	r2, [pc, #476]	; (800f4a0 <setSVM_dq+0x318>)
 800f2c4:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 800f2c6:	4b74      	ldr	r3, [pc, #464]	; (800f498 <setSVM_dq+0x310>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a74      	ldr	r2, [pc, #464]	; (800f49c <setSVM_dq+0x314>)
 800f2cc:	00db      	lsls	r3, r3, #3
 800f2ce:	4413      	add	r3, r2
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a73      	ldr	r2, [pc, #460]	; (800f4a4 <setSVM_dq+0x31c>)
 800f2d6:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 800f2d8:	4b6f      	ldr	r3, [pc, #444]	; (800f498 <setSVM_dq+0x310>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	4a6f      	ldr	r2, [pc, #444]	; (800f49c <setSVM_dq+0x314>)
 800f2e0:	00db      	lsls	r3, r3, #3
 800f2e2:	4413      	add	r3, r2
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4a70      	ldr	r2, [pc, #448]	; (800f4a8 <setSVM_dq+0x320>)
 800f2e8:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 800f2ea:	4b6b      	ldr	r3, [pc, #428]	; (800f498 <setSVM_dq+0x310>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	4a6a      	ldr	r2, [pc, #424]	; (800f49c <setSVM_dq+0x314>)
 800f2f2:	00db      	lsls	r3, r3, #3
 800f2f4:	4413      	add	r3, r2
 800f2f6:	3304      	adds	r3, #4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4a6c      	ldr	r2, [pc, #432]	; (800f4ac <setSVM_dq+0x324>)
 800f2fc:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800f2fe:	4b6b      	ldr	r3, [pc, #428]	; (800f4ac <setSVM_dq+0x324>)
 800f300:	ed93 7a00 	vldr	s14, [r3]
 800f304:	4b5e      	ldr	r3, [pc, #376]	; (800f480 <setSVM_dq+0x2f8>)
 800f306:	edd3 7a00 	vldr	s15, [r3]
 800f30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f30e:	4b66      	ldr	r3, [pc, #408]	; (800f4a8 <setSVM_dq+0x320>)
 800f310:	edd3 6a00 	vldr	s13, [r3]
 800f314:	4b5b      	ldr	r3, [pc, #364]	; (800f484 <setSVM_dq+0x2fc>)
 800f316:	edd3 7a00 	vldr	s15, [r3]
 800f31a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f31e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f322:	4b5f      	ldr	r3, [pc, #380]	; (800f4a0 <setSVM_dq+0x318>)
 800f324:	ed93 7a00 	vldr	s14, [r3]
 800f328:	4b60      	ldr	r3, [pc, #384]	; (800f4ac <setSVM_dq+0x324>)
 800f32a:	edd3 7a00 	vldr	s15, [r3]
 800f32e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f332:	4b5c      	ldr	r3, [pc, #368]	; (800f4a4 <setSVM_dq+0x31c>)
 800f334:	ed93 6a00 	vldr	s12, [r3]
 800f338:	4b5b      	ldr	r3, [pc, #364]	; (800f4a8 <setSVM_dq+0x320>)
 800f33a:	edd3 7a00 	vldr	s15, [r3]
 800f33e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f342:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f346:	4b5a      	ldr	r3, [pc, #360]	; (800f4b0 <setSVM_dq+0x328>)
 800f348:	edd3 7a00 	vldr	s15, [r3]
 800f34c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f354:	4b57      	ldr	r3, [pc, #348]	; (800f4b4 <setSVM_dq+0x32c>)
 800f356:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800f35a:	4b52      	ldr	r3, [pc, #328]	; (800f4a4 <setSVM_dq+0x31c>)
 800f35c:	edd3 7a00 	vldr	s15, [r3]
 800f360:	eeb1 7a67 	vneg.f32	s14, s15
 800f364:	4b46      	ldr	r3, [pc, #280]	; (800f480 <setSVM_dq+0x2f8>)
 800f366:	edd3 7a00 	vldr	s15, [r3]
 800f36a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f36e:	4b4c      	ldr	r3, [pc, #304]	; (800f4a0 <setSVM_dq+0x318>)
 800f370:	edd3 6a00 	vldr	s13, [r3]
 800f374:	4b43      	ldr	r3, [pc, #268]	; (800f484 <setSVM_dq+0x2fc>)
 800f376:	edd3 7a00 	vldr	s15, [r3]
 800f37a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f37e:	ee77 6a27 	vadd.f32	s13, s14, s15
 800f382:	4b47      	ldr	r3, [pc, #284]	; (800f4a0 <setSVM_dq+0x318>)
 800f384:	ed93 7a00 	vldr	s14, [r3]
 800f388:	4b48      	ldr	r3, [pc, #288]	; (800f4ac <setSVM_dq+0x324>)
 800f38a:	edd3 7a00 	vldr	s15, [r3]
 800f38e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f392:	4b44      	ldr	r3, [pc, #272]	; (800f4a4 <setSVM_dq+0x31c>)
 800f394:	ed93 6a00 	vldr	s12, [r3]
 800f398:	4b43      	ldr	r3, [pc, #268]	; (800f4a8 <setSVM_dq+0x320>)
 800f39a:	edd3 7a00 	vldr	s15, [r3]
 800f39e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f3a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f3a6:	4b42      	ldr	r3, [pc, #264]	; (800f4b0 <setSVM_dq+0x328>)
 800f3a8:	edd3 7a00 	vldr	s15, [r3]
 800f3ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3b4:	4b40      	ldr	r3, [pc, #256]	; (800f4b8 <setSVM_dq+0x330>)
 800f3b6:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 800f3ba:	4b37      	ldr	r3, [pc, #220]	; (800f498 <setSVM_dq+0x310>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2b05      	cmp	r3, #5
 800f3c0:	f200 81e0 	bhi.w	800f784 <setSVM_dq+0x5fc>
 800f3c4:	a201      	add	r2, pc, #4	; (adr r2, 800f3cc <setSVM_dq+0x244>)
 800f3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ca:	bf00      	nop
 800f3cc:	0800f3e5 	.word	0x0800f3e5
 800f3d0:	0800f4c9 	.word	0x0800f4c9
 800f3d4:	0800f555 	.word	0x0800f555
 800f3d8:	0800f5e1 	.word	0x0800f5e1
 800f3dc:	0800f66d 	.word	0x0800f66d
 800f3e0:	0800f6f9 	.word	0x0800f6f9
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 800f3e4:	4b33      	ldr	r3, [pc, #204]	; (800f4b4 <setSVM_dq+0x32c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7f8 ffdd 	bl	80083a8 <__aeabi_f2d>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	4623      	mov	r3, r4
 800f3f6:	f04f 0000 	mov.w	r0, #0
 800f3fa:	4930      	ldr	r1, [pc, #192]	; (800f4bc <setSVM_dq+0x334>)
 800f3fc:	f7f8 fe74 	bl	80080e8 <__aeabi_dsub>
 800f400:	4603      	mov	r3, r0
 800f402:	460c      	mov	r4, r1
 800f404:	4625      	mov	r5, r4
 800f406:	461c      	mov	r4, r3
 800f408:	4b2b      	ldr	r3, [pc, #172]	; (800f4b8 <setSVM_dq+0x330>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7f8 ffcb 	bl	80083a8 <__aeabi_f2d>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	4620      	mov	r0, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	f7f8 fe65 	bl	80080e8 <__aeabi_dsub>
 800f41e:	4603      	mov	r3, r0
 800f420:	460c      	mov	r4, r1
 800f422:	4618      	mov	r0, r3
 800f424:	4621      	mov	r1, r4
 800f426:	f04f 0200 	mov.w	r2, #0
 800f42a:	4b25      	ldr	r3, [pc, #148]	; (800f4c0 <setSVM_dq+0x338>)
 800f42c:	f7f9 f814 	bl	8008458 <__aeabi_dmul>
 800f430:	4603      	mov	r3, r0
 800f432:	460c      	mov	r4, r1
 800f434:	4618      	mov	r0, r3
 800f436:	4621      	mov	r1, r4
 800f438:	f7f9 faa8 	bl	800898c <__aeabi_d2f>
 800f43c:	4602      	mov	r2, r0
 800f43e:	4b21      	ldr	r3, [pc, #132]	; (800f4c4 <setSVM_dq+0x33c>)
 800f440:	609a      	str	r2, [r3, #8]
 800f442:	4b20      	ldr	r3, [pc, #128]	; (800f4c4 <setSVM_dq+0x33c>)
 800f444:	ed93 7a02 	vldr	s14, [r3, #8]
 800f448:	4b1b      	ldr	r3, [pc, #108]	; (800f4b8 <setSVM_dq+0x330>)
 800f44a:	edd3 7a00 	vldr	s15, [r3]
 800f44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f452:	4b1c      	ldr	r3, [pc, #112]	; (800f4c4 <setSVM_dq+0x33c>)
 800f454:	edc3 7a01 	vstr	s15, [r3, #4]
 800f458:	4b1a      	ldr	r3, [pc, #104]	; (800f4c4 <setSVM_dq+0x33c>)
 800f45a:	ed93 7a01 	vldr	s14, [r3, #4]
 800f45e:	4b15      	ldr	r3, [pc, #84]	; (800f4b4 <setSVM_dq+0x32c>)
 800f460:	edd3 7a00 	vldr	s15, [r3]
 800f464:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f468:	4b16      	ldr	r3, [pc, #88]	; (800f4c4 <setSVM_dq+0x33c>)
 800f46a:	edc3 7a00 	vstr	s15, [r3]
 800f46e:	e189      	b.n	800f784 <setSVM_dq+0x5fc>
 800f470:	20000170 	.word	0x20000170
 800f474:	20000028 	.word	0x20000028
 800f478:	20000174 	.word	0x20000174
 800f47c:	200001c8 	.word	0x200001c8
 800f480:	2000017c 	.word	0x2000017c
 800f484:	20000180 	.word	0x20000180
 800f488:	00000000 	.word	0x00000000
 800f48c:	20000184 	.word	0x20000184
 800f490:	3f5db22d 	.word	0x3f5db22d
 800f494:	20000188 	.word	0x20000188
 800f498:	20000178 	.word	0x20000178
 800f49c:	08011718 	.word	0x08011718
 800f4a0:	2000018c 	.word	0x2000018c
 800f4a4:	20000190 	.word	0x20000190
 800f4a8:	20000194 	.word	0x20000194
 800f4ac:	20000198 	.word	0x20000198
 800f4b0:	20000024 	.word	0x20000024
 800f4b4:	2000019c 	.word	0x2000019c
 800f4b8:	200001a0 	.word	0x200001a0
 800f4bc:	3ff00000 	.word	0x3ff00000
 800f4c0:	3fe00000 	.word	0x3fe00000
 800f4c4:	200001a4 	.word	0x200001a4
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 800f4c8:	4bc3      	ldr	r3, [pc, #780]	; (800f7d8 <setSVM_dq+0x650>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f8 ff6b 	bl	80083a8 <__aeabi_f2d>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	460c      	mov	r4, r1
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	4623      	mov	r3, r4
 800f4da:	f04f 0000 	mov.w	r0, #0
 800f4de:	49bf      	ldr	r1, [pc, #764]	; (800f7dc <setSVM_dq+0x654>)
 800f4e0:	f7f8 fe02 	bl	80080e8 <__aeabi_dsub>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	460c      	mov	r4, r1
 800f4e8:	4625      	mov	r5, r4
 800f4ea:	461c      	mov	r4, r3
 800f4ec:	4bbc      	ldr	r3, [pc, #752]	; (800f7e0 <setSVM_dq+0x658>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7f8 ff59 	bl	80083a8 <__aeabi_f2d>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	f7f8 fdf3 	bl	80080e8 <__aeabi_dsub>
 800f502:	4603      	mov	r3, r0
 800f504:	460c      	mov	r4, r1
 800f506:	4618      	mov	r0, r3
 800f508:	4621      	mov	r1, r4
 800f50a:	f04f 0200 	mov.w	r2, #0
 800f50e:	4bb5      	ldr	r3, [pc, #724]	; (800f7e4 <setSVM_dq+0x65c>)
 800f510:	f7f8 ffa2 	bl	8008458 <__aeabi_dmul>
 800f514:	4603      	mov	r3, r0
 800f516:	460c      	mov	r4, r1
 800f518:	4618      	mov	r0, r3
 800f51a:	4621      	mov	r1, r4
 800f51c:	f7f9 fa36 	bl	800898c <__aeabi_d2f>
 800f520:	4602      	mov	r2, r0
 800f522:	4bb1      	ldr	r3, [pc, #708]	; (800f7e8 <setSVM_dq+0x660>)
 800f524:	609a      	str	r2, [r3, #8]
 800f526:	4bb0      	ldr	r3, [pc, #704]	; (800f7e8 <setSVM_dq+0x660>)
 800f528:	ed93 7a02 	vldr	s14, [r3, #8]
 800f52c:	4baa      	ldr	r3, [pc, #680]	; (800f7d8 <setSVM_dq+0x650>)
 800f52e:	edd3 7a00 	vldr	s15, [r3]
 800f532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f536:	4bac      	ldr	r3, [pc, #688]	; (800f7e8 <setSVM_dq+0x660>)
 800f538:	edc3 7a00 	vstr	s15, [r3]
 800f53c:	4baa      	ldr	r3, [pc, #680]	; (800f7e8 <setSVM_dq+0x660>)
 800f53e:	ed93 7a00 	vldr	s14, [r3]
 800f542:	4ba7      	ldr	r3, [pc, #668]	; (800f7e0 <setSVM_dq+0x658>)
 800f544:	edd3 7a00 	vldr	s15, [r3]
 800f548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f54c:	4ba6      	ldr	r3, [pc, #664]	; (800f7e8 <setSVM_dq+0x660>)
 800f54e:	edc3 7a01 	vstr	s15, [r3, #4]
 800f552:	e117      	b.n	800f784 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 800f554:	4ba0      	ldr	r3, [pc, #640]	; (800f7d8 <setSVM_dq+0x650>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4618      	mov	r0, r3
 800f55a:	f7f8 ff25 	bl	80083a8 <__aeabi_f2d>
 800f55e:	4603      	mov	r3, r0
 800f560:	460c      	mov	r4, r1
 800f562:	461a      	mov	r2, r3
 800f564:	4623      	mov	r3, r4
 800f566:	f04f 0000 	mov.w	r0, #0
 800f56a:	499c      	ldr	r1, [pc, #624]	; (800f7dc <setSVM_dq+0x654>)
 800f56c:	f7f8 fdbc 	bl	80080e8 <__aeabi_dsub>
 800f570:	4603      	mov	r3, r0
 800f572:	460c      	mov	r4, r1
 800f574:	4625      	mov	r5, r4
 800f576:	461c      	mov	r4, r3
 800f578:	4b99      	ldr	r3, [pc, #612]	; (800f7e0 <setSVM_dq+0x658>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7f8 ff13 	bl	80083a8 <__aeabi_f2d>
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f8 fdad 	bl	80080e8 <__aeabi_dsub>
 800f58e:	4603      	mov	r3, r0
 800f590:	460c      	mov	r4, r1
 800f592:	4618      	mov	r0, r3
 800f594:	4621      	mov	r1, r4
 800f596:	f04f 0200 	mov.w	r2, #0
 800f59a:	4b92      	ldr	r3, [pc, #584]	; (800f7e4 <setSVM_dq+0x65c>)
 800f59c:	f7f8 ff5c 	bl	8008458 <__aeabi_dmul>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	f7f9 f9f0 	bl	800898c <__aeabi_d2f>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	4b8e      	ldr	r3, [pc, #568]	; (800f7e8 <setSVM_dq+0x660>)
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	4b8d      	ldr	r3, [pc, #564]	; (800f7e8 <setSVM_dq+0x660>)
 800f5b4:	ed93 7a00 	vldr	s14, [r3]
 800f5b8:	4b89      	ldr	r3, [pc, #548]	; (800f7e0 <setSVM_dq+0x658>)
 800f5ba:	edd3 7a00 	vldr	s15, [r3]
 800f5be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5c2:	4b89      	ldr	r3, [pc, #548]	; (800f7e8 <setSVM_dq+0x660>)
 800f5c4:	edc3 7a02 	vstr	s15, [r3, #8]
 800f5c8:	4b87      	ldr	r3, [pc, #540]	; (800f7e8 <setSVM_dq+0x660>)
 800f5ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800f5ce:	4b82      	ldr	r3, [pc, #520]	; (800f7d8 <setSVM_dq+0x650>)
 800f5d0:	edd3 7a00 	vldr	s15, [r3]
 800f5d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5d8:	4b83      	ldr	r3, [pc, #524]	; (800f7e8 <setSVM_dq+0x660>)
 800f5da:	edc3 7a01 	vstr	s15, [r3, #4]
 800f5de:	e0d1      	b.n	800f784 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 800f5e0:	4b7d      	ldr	r3, [pc, #500]	; (800f7d8 <setSVM_dq+0x650>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7f8 fedf 	bl	80083a8 <__aeabi_f2d>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	4623      	mov	r3, r4
 800f5f2:	f04f 0000 	mov.w	r0, #0
 800f5f6:	4979      	ldr	r1, [pc, #484]	; (800f7dc <setSVM_dq+0x654>)
 800f5f8:	f7f8 fd76 	bl	80080e8 <__aeabi_dsub>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	460c      	mov	r4, r1
 800f600:	4625      	mov	r5, r4
 800f602:	461c      	mov	r4, r3
 800f604:	4b76      	ldr	r3, [pc, #472]	; (800f7e0 <setSVM_dq+0x658>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7f8 fecd 	bl	80083a8 <__aeabi_f2d>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4620      	mov	r0, r4
 800f614:	4629      	mov	r1, r5
 800f616:	f7f8 fd67 	bl	80080e8 <__aeabi_dsub>
 800f61a:	4603      	mov	r3, r0
 800f61c:	460c      	mov	r4, r1
 800f61e:	4618      	mov	r0, r3
 800f620:	4621      	mov	r1, r4
 800f622:	f04f 0200 	mov.w	r2, #0
 800f626:	4b6f      	ldr	r3, [pc, #444]	; (800f7e4 <setSVM_dq+0x65c>)
 800f628:	f7f8 ff16 	bl	8008458 <__aeabi_dmul>
 800f62c:	4603      	mov	r3, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	4618      	mov	r0, r3
 800f632:	4621      	mov	r1, r4
 800f634:	f7f9 f9aa 	bl	800898c <__aeabi_d2f>
 800f638:	4602      	mov	r2, r0
 800f63a:	4b6b      	ldr	r3, [pc, #428]	; (800f7e8 <setSVM_dq+0x660>)
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	4b6a      	ldr	r3, [pc, #424]	; (800f7e8 <setSVM_dq+0x660>)
 800f640:	ed93 7a00 	vldr	s14, [r3]
 800f644:	4b64      	ldr	r3, [pc, #400]	; (800f7d8 <setSVM_dq+0x650>)
 800f646:	edd3 7a00 	vldr	s15, [r3]
 800f64a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f64e:	4b66      	ldr	r3, [pc, #408]	; (800f7e8 <setSVM_dq+0x660>)
 800f650:	edc3 7a01 	vstr	s15, [r3, #4]
 800f654:	4b64      	ldr	r3, [pc, #400]	; (800f7e8 <setSVM_dq+0x660>)
 800f656:	ed93 7a01 	vldr	s14, [r3, #4]
 800f65a:	4b61      	ldr	r3, [pc, #388]	; (800f7e0 <setSVM_dq+0x658>)
 800f65c:	edd3 7a00 	vldr	s15, [r3]
 800f660:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f664:	4b60      	ldr	r3, [pc, #384]	; (800f7e8 <setSVM_dq+0x660>)
 800f666:	edc3 7a02 	vstr	s15, [r3, #8]
 800f66a:	e08b      	b.n	800f784 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 800f66c:	4b5a      	ldr	r3, [pc, #360]	; (800f7d8 <setSVM_dq+0x650>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4618      	mov	r0, r3
 800f672:	f7f8 fe99 	bl	80083a8 <__aeabi_f2d>
 800f676:	4603      	mov	r3, r0
 800f678:	460c      	mov	r4, r1
 800f67a:	461a      	mov	r2, r3
 800f67c:	4623      	mov	r3, r4
 800f67e:	f04f 0000 	mov.w	r0, #0
 800f682:	4956      	ldr	r1, [pc, #344]	; (800f7dc <setSVM_dq+0x654>)
 800f684:	f7f8 fd30 	bl	80080e8 <__aeabi_dsub>
 800f688:	4603      	mov	r3, r0
 800f68a:	460c      	mov	r4, r1
 800f68c:	4625      	mov	r5, r4
 800f68e:	461c      	mov	r4, r3
 800f690:	4b53      	ldr	r3, [pc, #332]	; (800f7e0 <setSVM_dq+0x658>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4618      	mov	r0, r3
 800f696:	f7f8 fe87 	bl	80083a8 <__aeabi_f2d>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	4620      	mov	r0, r4
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	f7f8 fd21 	bl	80080e8 <__aeabi_dsub>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	460c      	mov	r4, r1
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	f04f 0200 	mov.w	r2, #0
 800f6b2:	4b4c      	ldr	r3, [pc, #304]	; (800f7e4 <setSVM_dq+0x65c>)
 800f6b4:	f7f8 fed0 	bl	8008458 <__aeabi_dmul>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	4618      	mov	r0, r3
 800f6be:	4621      	mov	r1, r4
 800f6c0:	f7f9 f964 	bl	800898c <__aeabi_d2f>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	4b48      	ldr	r3, [pc, #288]	; (800f7e8 <setSVM_dq+0x660>)
 800f6c8:	605a      	str	r2, [r3, #4]
 800f6ca:	4b47      	ldr	r3, [pc, #284]	; (800f7e8 <setSVM_dq+0x660>)
 800f6cc:	ed93 7a01 	vldr	s14, [r3, #4]
 800f6d0:	4b43      	ldr	r3, [pc, #268]	; (800f7e0 <setSVM_dq+0x658>)
 800f6d2:	edd3 7a00 	vldr	s15, [r3]
 800f6d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6da:	4b43      	ldr	r3, [pc, #268]	; (800f7e8 <setSVM_dq+0x660>)
 800f6dc:	edc3 7a00 	vstr	s15, [r3]
 800f6e0:	4b41      	ldr	r3, [pc, #260]	; (800f7e8 <setSVM_dq+0x660>)
 800f6e2:	ed93 7a00 	vldr	s14, [r3]
 800f6e6:	4b3c      	ldr	r3, [pc, #240]	; (800f7d8 <setSVM_dq+0x650>)
 800f6e8:	edd3 7a00 	vldr	s15, [r3]
 800f6ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6f0:	4b3d      	ldr	r3, [pc, #244]	; (800f7e8 <setSVM_dq+0x660>)
 800f6f2:	edc3 7a02 	vstr	s15, [r3, #8]
 800f6f6:	e045      	b.n	800f784 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 800f6f8:	4b37      	ldr	r3, [pc, #220]	; (800f7d8 <setSVM_dq+0x650>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7f8 fe53 	bl	80083a8 <__aeabi_f2d>
 800f702:	4603      	mov	r3, r0
 800f704:	460c      	mov	r4, r1
 800f706:	461a      	mov	r2, r3
 800f708:	4623      	mov	r3, r4
 800f70a:	f04f 0000 	mov.w	r0, #0
 800f70e:	4933      	ldr	r1, [pc, #204]	; (800f7dc <setSVM_dq+0x654>)
 800f710:	f7f8 fcea 	bl	80080e8 <__aeabi_dsub>
 800f714:	4603      	mov	r3, r0
 800f716:	460c      	mov	r4, r1
 800f718:	4625      	mov	r5, r4
 800f71a:	461c      	mov	r4, r3
 800f71c:	4b30      	ldr	r3, [pc, #192]	; (800f7e0 <setSVM_dq+0x658>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4618      	mov	r0, r3
 800f722:	f7f8 fe41 	bl	80083a8 <__aeabi_f2d>
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	4620      	mov	r0, r4
 800f72c:	4629      	mov	r1, r5
 800f72e:	f7f8 fcdb 	bl	80080e8 <__aeabi_dsub>
 800f732:	4603      	mov	r3, r0
 800f734:	460c      	mov	r4, r1
 800f736:	4618      	mov	r0, r3
 800f738:	4621      	mov	r1, r4
 800f73a:	f04f 0200 	mov.w	r2, #0
 800f73e:	4b29      	ldr	r3, [pc, #164]	; (800f7e4 <setSVM_dq+0x65c>)
 800f740:	f7f8 fe8a 	bl	8008458 <__aeabi_dmul>
 800f744:	4603      	mov	r3, r0
 800f746:	460c      	mov	r4, r1
 800f748:	4618      	mov	r0, r3
 800f74a:	4621      	mov	r1, r4
 800f74c:	f7f9 f91e 	bl	800898c <__aeabi_d2f>
 800f750:	4602      	mov	r2, r0
 800f752:	4b25      	ldr	r3, [pc, #148]	; (800f7e8 <setSVM_dq+0x660>)
 800f754:	605a      	str	r2, [r3, #4]
 800f756:	4b24      	ldr	r3, [pc, #144]	; (800f7e8 <setSVM_dq+0x660>)
 800f758:	ed93 7a01 	vldr	s14, [r3, #4]
 800f75c:	4b1e      	ldr	r3, [pc, #120]	; (800f7d8 <setSVM_dq+0x650>)
 800f75e:	edd3 7a00 	vldr	s15, [r3]
 800f762:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f766:	4b20      	ldr	r3, [pc, #128]	; (800f7e8 <setSVM_dq+0x660>)
 800f768:	edc3 7a02 	vstr	s15, [r3, #8]
 800f76c:	4b1e      	ldr	r3, [pc, #120]	; (800f7e8 <setSVM_dq+0x660>)
 800f76e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f772:	4b1b      	ldr	r3, [pc, #108]	; (800f7e0 <setSVM_dq+0x658>)
 800f774:	edd3 7a00 	vldr	s15, [r3]
 800f778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f77c:	4b1a      	ldr	r3, [pc, #104]	; (800f7e8 <setSVM_dq+0x660>)
 800f77e:	edc3 7a00 	vstr	s15, [r3]
 800f782:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 800f784:	4b18      	ldr	r3, [pc, #96]	; (800f7e8 <setSVM_dq+0x660>)
 800f786:	edd3 7a00 	vldr	s15, [r3]
 800f78a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f78e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f796:	d503      	bpl.n	800f7a0 <setSVM_dq+0x618>
 800f798:	4b13      	ldr	r3, [pc, #76]	; (800f7e8 <setSVM_dq+0x660>)
 800f79a:	4a14      	ldr	r2, [pc, #80]	; (800f7ec <setSVM_dq+0x664>)
 800f79c:	601a      	str	r2, [r3, #0]
 800f79e:	e00d      	b.n	800f7bc <setSVM_dq+0x634>
 800f7a0:	4b11      	ldr	r3, [pc, #68]	; (800f7e8 <setSVM_dq+0x660>)
 800f7a2:	edd3 7a00 	vldr	s15, [r3]
 800f7a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b2:	dd03      	ble.n	800f7bc <setSVM_dq+0x634>
 800f7b4:	4b0c      	ldr	r3, [pc, #48]	; (800f7e8 <setSVM_dq+0x660>)
 800f7b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f7ba:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 800f7bc:	4b0a      	ldr	r3, [pc, #40]	; (800f7e8 <setSVM_dq+0x660>)
 800f7be:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f7c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ce:	d50f      	bpl.n	800f7f0 <setSVM_dq+0x668>
 800f7d0:	4b05      	ldr	r3, [pc, #20]	; (800f7e8 <setSVM_dq+0x660>)
 800f7d2:	4a06      	ldr	r2, [pc, #24]	; (800f7ec <setSVM_dq+0x664>)
 800f7d4:	605a      	str	r2, [r3, #4]
 800f7d6:	e019      	b.n	800f80c <setSVM_dq+0x684>
 800f7d8:	2000019c 	.word	0x2000019c
 800f7dc:	3ff00000 	.word	0x3ff00000
 800f7e0:	200001a0 	.word	0x200001a0
 800f7e4:	3fe00000 	.word	0x3fe00000
 800f7e8:	200001a4 	.word	0x200001a4
 800f7ec:	bf800000 	.word	0xbf800000
 800f7f0:	4b35      	ldr	r3, [pc, #212]	; (800f8c8 <setSVM_dq+0x740>)
 800f7f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f802:	dd03      	ble.n	800f80c <setSVM_dq+0x684>
 800f804:	4b30      	ldr	r3, [pc, #192]	; (800f8c8 <setSVM_dq+0x740>)
 800f806:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f80a:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 800f80c:	4b2e      	ldr	r3, [pc, #184]	; (800f8c8 <setSVM_dq+0x740>)
 800f80e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f812:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81e:	d503      	bpl.n	800f828 <setSVM_dq+0x6a0>
 800f820:	4b29      	ldr	r3, [pc, #164]	; (800f8c8 <setSVM_dq+0x740>)
 800f822:	4a2a      	ldr	r2, [pc, #168]	; (800f8cc <setSVM_dq+0x744>)
 800f824:	609a      	str	r2, [r3, #8]
 800f826:	e00d      	b.n	800f844 <setSVM_dq+0x6bc>
 800f828:	4b27      	ldr	r3, [pc, #156]	; (800f8c8 <setSVM_dq+0x740>)
 800f82a:	edd3 7a02 	vldr	s15, [r3, #8]
 800f82e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f832:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83a:	dd03      	ble.n	800f844 <setSVM_dq+0x6bc>
 800f83c:	4b22      	ldr	r3, [pc, #136]	; (800f8c8 <setSVM_dq+0x740>)
 800f83e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f842:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 800f844:	4b20      	ldr	r3, [pc, #128]	; (800f8c8 <setSVM_dq+0x740>)
 800f846:	edd3 7a00 	vldr	s15, [r3]
 800f84a:	4b21      	ldr	r3, [pc, #132]	; (800f8d0 <setSVM_dq+0x748>)
 800f84c:	edc3 7a00 	vstr	s15, [r3]
 800f850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f854:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f858:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800f8d4 <setSVM_dq+0x74c>
 800f85c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f860:	4b1d      	ldr	r3, [pc, #116]	; (800f8d8 <setSVM_dq+0x750>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f868:	ee17 2a90 	vmov	r2, s15
 800f86c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 800f86e:	4b16      	ldr	r3, [pc, #88]	; (800f8c8 <setSVM_dq+0x740>)
 800f870:	edd3 7a01 	vldr	s15, [r3, #4]
 800f874:	4b19      	ldr	r3, [pc, #100]	; (800f8dc <setSVM_dq+0x754>)
 800f876:	edc3 7a00 	vstr	s15, [r3]
 800f87a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f87e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f882:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800f8d4 <setSVM_dq+0x74c>
 800f886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f88a:	4b13      	ldr	r3, [pc, #76]	; (800f8d8 <setSVM_dq+0x750>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f892:	ee17 2a90 	vmov	r2, s15
 800f896:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 800f898:	4b0b      	ldr	r3, [pc, #44]	; (800f8c8 <setSVM_dq+0x740>)
 800f89a:	edd3 7a02 	vldr	s15, [r3, #8]
 800f89e:	4b10      	ldr	r3, [pc, #64]	; (800f8e0 <setSVM_dq+0x758>)
 800f8a0:	edc3 7a00 	vstr	s15, [r3]
 800f8a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f8a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8ac:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f8d4 <setSVM_dq+0x74c>
 800f8b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8b4:	4b08      	ldr	r3, [pc, #32]	; (800f8d8 <setSVM_dq+0x750>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8bc:	ee17 2a90 	vmov	r2, s15
 800f8c0:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 800f8c2:	bf00      	nop
}
 800f8c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	200001a4 	.word	0x200001a4
 800f8cc:	bf800000 	.word	0xbf800000
 800f8d0:	200001d4 	.word	0x200001d4
 800f8d4:	45fa0000 	.word	0x45fa0000
 800f8d8:	2000052c 	.word	0x2000052c
 800f8dc:	200001d8 	.word	0x200001d8
 800f8e0:	200001dc 	.word	0x200001dc

0800f8e4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800f8e8:	4b18      	ldr	r3, [pc, #96]	; (800f94c <MX_SPI2_Init+0x68>)
 800f8ea:	4a19      	ldr	r2, [pc, #100]	; (800f950 <MX_SPI2_Init+0x6c>)
 800f8ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800f8ee:	4b17      	ldr	r3, [pc, #92]	; (800f94c <MX_SPI2_Init+0x68>)
 800f8f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f8f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f8f6:	4b15      	ldr	r3, [pc, #84]	; (800f94c <MX_SPI2_Init+0x68>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800f8fc:	4b13      	ldr	r3, [pc, #76]	; (800f94c <MX_SPI2_Init+0x68>)
 800f8fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f902:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f904:	4b11      	ldr	r3, [pc, #68]	; (800f94c <MX_SPI2_Init+0x68>)
 800f906:	2200      	movs	r2, #0
 800f908:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f90a:	4b10      	ldr	r3, [pc, #64]	; (800f94c <MX_SPI2_Init+0x68>)
 800f90c:	2201      	movs	r2, #1
 800f90e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800f910:	4b0e      	ldr	r3, [pc, #56]	; (800f94c <MX_SPI2_Init+0x68>)
 800f912:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f916:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800f918:	4b0c      	ldr	r3, [pc, #48]	; (800f94c <MX_SPI2_Init+0x68>)
 800f91a:	2218      	movs	r2, #24
 800f91c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f91e:	4b0b      	ldr	r3, [pc, #44]	; (800f94c <MX_SPI2_Init+0x68>)
 800f920:	2200      	movs	r2, #0
 800f922:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800f924:	4b09      	ldr	r3, [pc, #36]	; (800f94c <MX_SPI2_Init+0x68>)
 800f926:	2200      	movs	r2, #0
 800f928:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f92a:	4b08      	ldr	r3, [pc, #32]	; (800f94c <MX_SPI2_Init+0x68>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800f930:	4b06      	ldr	r3, [pc, #24]	; (800f94c <MX_SPI2_Init+0x68>)
 800f932:	220a      	movs	r2, #10
 800f934:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800f936:	4805      	ldr	r0, [pc, #20]	; (800f94c <MX_SPI2_Init+0x68>)
 800f938:	f7fb fe28 	bl	800b58c <HAL_SPI_Init>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800f942:	f7ff fc19 	bl	800f178 <Error_Handler>
  }

}
 800f946:	bf00      	nop
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	20000478 	.word	0x20000478
 800f950:	40003800 	.word	0x40003800

0800f954 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800f958:	4b17      	ldr	r3, [pc, #92]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f95a:	4a18      	ldr	r2, [pc, #96]	; (800f9bc <MX_SPI3_Init+0x68>)
 800f95c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800f95e:	4b16      	ldr	r3, [pc, #88]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f960:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f964:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800f966:	4b14      	ldr	r3, [pc, #80]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f968:	2200      	movs	r2, #0
 800f96a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800f96c:	4b12      	ldr	r3, [pc, #72]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f96e:	2200      	movs	r2, #0
 800f970:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f972:	4b11      	ldr	r3, [pc, #68]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f974:	2200      	movs	r2, #0
 800f976:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f978:	4b0f      	ldr	r3, [pc, #60]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f97a:	2201      	movs	r2, #1
 800f97c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800f97e:	4b0e      	ldr	r3, [pc, #56]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f980:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f984:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800f986:	4b0c      	ldr	r3, [pc, #48]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f988:	2220      	movs	r2, #32
 800f98a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f98c:	4b0a      	ldr	r3, [pc, #40]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f98e:	2200      	movs	r2, #0
 800f990:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800f992:	4b09      	ldr	r3, [pc, #36]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f994:	2200      	movs	r2, #0
 800f996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f998:	4b07      	ldr	r3, [pc, #28]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800f99e:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f9a0:	220a      	movs	r2, #10
 800f9a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800f9a4:	4804      	ldr	r0, [pc, #16]	; (800f9b8 <MX_SPI3_Init+0x64>)
 800f9a6:	f7fb fdf1 	bl	800b58c <HAL_SPI_Init>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d001      	beq.n	800f9b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800f9b0:	f7ff fbe2 	bl	800f178 <Error_Handler>
  }

}
 800f9b4:	bf00      	nop
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	200004d0 	.word	0x200004d0
 800f9bc:	40003c00 	.word	0x40003c00

0800f9c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08e      	sub	sp, #56	; 0x38
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f9c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	601a      	str	r2, [r3, #0]
 800f9d0:	605a      	str	r2, [r3, #4]
 800f9d2:	609a      	str	r2, [r3, #8]
 800f9d4:	60da      	str	r2, [r3, #12]
 800f9d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a5d      	ldr	r2, [pc, #372]	; (800fb54 <HAL_SPI_MspInit+0x194>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d163      	bne.n	800faaa <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	623b      	str	r3, [r7, #32]
 800f9e6:	4b5c      	ldr	r3, [pc, #368]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800f9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ea:	4a5b      	ldr	r2, [pc, #364]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800f9ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f9f0:	6413      	str	r3, [r2, #64]	; 0x40
 800f9f2:	4b59      	ldr	r3, [pc, #356]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9fa:	623b      	str	r3, [r7, #32]
 800f9fc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f9fe:	2300      	movs	r3, #0
 800fa00:	61fb      	str	r3, [r7, #28]
 800fa02:	4b55      	ldr	r3, [pc, #340]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa06:	4a54      	ldr	r2, [pc, #336]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fa08:	f043 0304 	orr.w	r3, r3, #4
 800fa0c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa0e:	4b52      	ldr	r3, [pc, #328]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa12:	f003 0304 	and.w	r3, r3, #4
 800fa16:	61fb      	str	r3, [r7, #28]
 800fa18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	61bb      	str	r3, [r7, #24]
 800fa1e:	4b4e      	ldr	r3, [pc, #312]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa22:	4a4d      	ldr	r2, [pc, #308]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fa24:	f043 0302 	orr.w	r3, r3, #2
 800fa28:	6313      	str	r3, [r2, #48]	; 0x30
 800fa2a:	4b4b      	ldr	r3, [pc, #300]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa2e:	f003 0302 	and.w	r3, r3, #2
 800fa32:	61bb      	str	r3, [r7, #24]
 800fa34:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800fa36:	2302      	movs	r3, #2
 800fa38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa3a:	2302      	movs	r3, #2
 800fa3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa42:	2303      	movs	r3, #3
 800fa44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800fa46:	2307      	movs	r3, #7
 800fa48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fa4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa4e:	4619      	mov	r1, r3
 800fa50:	4842      	ldr	r0, [pc, #264]	; (800fb5c <HAL_SPI_MspInit+0x19c>)
 800fa52:	f7fa fec7 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800fa56:	2304      	movs	r3, #4
 800fa58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa62:	2303      	movs	r3, #3
 800fa64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800fa66:	2305      	movs	r3, #5
 800fa68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fa6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa6e:	4619      	mov	r1, r3
 800fa70:	483a      	ldr	r0, [pc, #232]	; (800fb5c <HAL_SPI_MspInit+0x19c>)
 800fa72:	f7fa feb7 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800fa76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa7c:	2302      	movs	r3, #2
 800fa7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa80:	2300      	movs	r3, #0
 800fa82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa84:	2303      	movs	r3, #3
 800fa86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800fa88:	2305      	movs	r3, #5
 800fa8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fa8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa90:	4619      	mov	r1, r3
 800fa92:	4833      	ldr	r0, [pc, #204]	; (800fb60 <HAL_SPI_MspInit+0x1a0>)
 800fa94:	f7fa fea6 	bl	800a7e4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800fa98:	2200      	movs	r2, #0
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	2024      	movs	r0, #36	; 0x24
 800fa9e:	f7fa fad2 	bl	800a046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800faa2:	2024      	movs	r0, #36	; 0x24
 800faa4:	f7fa faeb 	bl	800a07e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800faa8:	e04f      	b.n	800fb4a <HAL_SPI_MspInit+0x18a>
  else if(spiHandle->Instance==SPI3)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a2d      	ldr	r2, [pc, #180]	; (800fb64 <HAL_SPI_MspInit+0x1a4>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d14a      	bne.n	800fb4a <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800fab4:	2300      	movs	r3, #0
 800fab6:	617b      	str	r3, [r7, #20]
 800fab8:	4b27      	ldr	r3, [pc, #156]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800faba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fabc:	4a26      	ldr	r2, [pc, #152]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fabe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fac2:	6413      	str	r3, [r2, #64]	; 0x40
 800fac4:	4b24      	ldr	r3, [pc, #144]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800facc:	617b      	str	r3, [r7, #20]
 800face:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fad0:	2300      	movs	r3, #0
 800fad2:	613b      	str	r3, [r7, #16]
 800fad4:	4b20      	ldr	r3, [pc, #128]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad8:	4a1f      	ldr	r2, [pc, #124]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fada:	f043 0302 	orr.w	r3, r3, #2
 800fade:	6313      	str	r3, [r2, #48]	; 0x30
 800fae0:	4b1d      	ldr	r3, [pc, #116]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fae4:	f003 0302 	and.w	r3, r3, #2
 800fae8:	613b      	str	r3, [r7, #16]
 800faea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800faec:	2300      	movs	r3, #0
 800faee:	60fb      	str	r3, [r7, #12]
 800faf0:	4b19      	ldr	r3, [pc, #100]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800faf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faf4:	4a18      	ldr	r2, [pc, #96]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800faf6:	f043 0304 	orr.w	r3, r3, #4
 800fafa:	6313      	str	r3, [r2, #48]	; 0x30
 800fafc:	4b16      	ldr	r3, [pc, #88]	; (800fb58 <HAL_SPI_MspInit+0x198>)
 800fafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb00:	f003 0304 	and.w	r3, r3, #4
 800fb04:	60fb      	str	r3, [r7, #12]
 800fb06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800fb08:	2304      	movs	r3, #4
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb10:	2300      	movs	r3, #0
 800fb12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb14:	2303      	movs	r3, #3
 800fb16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800fb18:	2307      	movs	r3, #7
 800fb1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb20:	4619      	mov	r1, r3
 800fb22:	480f      	ldr	r0, [pc, #60]	; (800fb60 <HAL_SPI_MspInit+0x1a0>)
 800fb24:	f7fa fe5e 	bl	800a7e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800fb28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800fb2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb2e:	2302      	movs	r3, #2
 800fb30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb32:	2300      	movs	r3, #0
 800fb34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb36:	2303      	movs	r3, #3
 800fb38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800fb3a:	2306      	movs	r3, #6
 800fb3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fb3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb42:	4619      	mov	r1, r3
 800fb44:	4805      	ldr	r0, [pc, #20]	; (800fb5c <HAL_SPI_MspInit+0x19c>)
 800fb46:	f7fa fe4d 	bl	800a7e4 <HAL_GPIO_Init>
}
 800fb4a:	bf00      	nop
 800fb4c:	3738      	adds	r7, #56	; 0x38
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	40003800 	.word	0x40003800
 800fb58:	40023800 	.word	0x40023800
 800fb5c:	40020800 	.word	0x40020800
 800fb60:	40020400 	.word	0x40020400
 800fb64:	40003c00 	.word	0x40003c00

0800fb68 <requestEncoder>:




inline void requestEncoder()
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 800fb6c:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <requestEncoder+0x2c>)
 800fb6e:	22ff      	movs	r2, #255	; 0xff
 800fb70:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 800fb72:	4b08      	ldr	r3, [pc, #32]	; (800fb94 <requestEncoder+0x2c>)
 800fb74:	22ff      	movs	r2, #255	; 0xff
 800fb76:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fb7e:	4806      	ldr	r0, [pc, #24]	; (800fb98 <requestEncoder+0x30>)
 800fb80:	f7fa ffda 	bl	800ab38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 800fb84:	2301      	movs	r3, #1
 800fb86:	4a05      	ldr	r2, [pc, #20]	; (800fb9c <requestEncoder+0x34>)
 800fb88:	4902      	ldr	r1, [pc, #8]	; (800fb94 <requestEncoder+0x2c>)
 800fb8a:	4805      	ldr	r0, [pc, #20]	; (800fba0 <requestEncoder+0x38>)
 800fb8c:	f7fb ff04 	bl	800b998 <HAL_SPI_TransmitReceive_IT>


}
 800fb90:	bf00      	nop
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	200001b0 	.word	0x200001b0
 800fb98:	40020400 	.word	0x40020400
 800fb9c:	200001b4 	.word	0x200001b4
 800fba0:	20000478 	.word	0x20000478
 800fba4:	00000000 	.word	0x00000000

0800fba8 <refreshEncoder>:


inline int refreshEncoder()
{
 800fba8:	b5b0      	push	{r4, r5, r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0

	uint16_t angle_raw = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	81fb      	strh	r3, [r7, #14]
	float _theta;
	float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fbb8:	4891      	ldr	r0, [pc, #580]	; (800fe00 <refreshEncoder+0x258>)
 800fbba:	f7fa ffbd 	bl	800ab38 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 800fbbe:	4b91      	ldr	r3, [pc, #580]	; (800fe04 <refreshEncoder+0x25c>)
 800fbc0:	785b      	ldrb	r3, [r3, #1]
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	021b      	lsls	r3, r3, #8
 800fbc6:	b21b      	sxth	r3, r3
 800fbc8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800fbcc:	b21a      	sxth	r2, r3
 800fbce:	4b8d      	ldr	r3, [pc, #564]	; (800fe04 <refreshEncoder+0x25c>)
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	b21b      	sxth	r3, r3
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	b21b      	sxth	r3, r3
 800fbda:	81fb      	strh	r3, [r7, #14]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 800fbdc:	89fb      	ldrh	r3, [r7, #14]
 800fbde:	ee07 3a90 	vmov	s15, r3
 800fbe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fbe6:	eddf 6a88 	vldr	s13, [pc, #544]	; 800fe08 <refreshEncoder+0x260>
 800fbea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fbee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fbf2:	ee17 0a90 	vmov	r0, s15
 800fbf6:	f7f8 fbd7 	bl	80083a8 <__aeabi_f2d>
 800fbfa:	a37d      	add	r3, pc, #500	; (adr r3, 800fdf0 <refreshEncoder+0x248>)
 800fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc00:	f7f8 fc2a 	bl	8008458 <__aeabi_dmul>
 800fc04:	4603      	mov	r3, r0
 800fc06:	460c      	mov	r4, r1
 800fc08:	4625      	mov	r5, r4
 800fc0a:	461c      	mov	r4, r3
 800fc0c:	4b7f      	ldr	r3, [pc, #508]	; (800fe0c <refreshEncoder+0x264>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7f8 fbc9 	bl	80083a8 <__aeabi_f2d>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	4629      	mov	r1, r5
 800fc1e:	f7f8 fa65 	bl	80080ec <__adddf3>
 800fc22:	4603      	mov	r3, r0
 800fc24:	460c      	mov	r4, r1
 800fc26:	4618      	mov	r0, r3
 800fc28:	4621      	mov	r1, r4
 800fc2a:	f7f8 feaf 	bl	800898c <__aeabi_d2f>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	60bb      	str	r3, [r7, #8]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 800fc32:	edd7 7a02 	vldr	s15, [r7, #8]
 800fc36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3e:	d511      	bpl.n	800fc64 <refreshEncoder+0xbc>
 800fc40:	68b8      	ldr	r0, [r7, #8]
 800fc42:	f7f8 fbb1 	bl	80083a8 <__aeabi_f2d>
 800fc46:	a36c      	add	r3, pc, #432	; (adr r3, 800fdf8 <refreshEncoder+0x250>)
 800fc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4c:	f7f8 fa4e 	bl	80080ec <__adddf3>
 800fc50:	4603      	mov	r3, r0
 800fc52:	460c      	mov	r4, r1
 800fc54:	4618      	mov	r0, r3
 800fc56:	4621      	mov	r1, r4
 800fc58:	f7f8 fe98 	bl	800898c <__aeabi_d2f>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	4b6c      	ldr	r3, [pc, #432]	; (800fe10 <refreshEncoder+0x268>)
 800fc60:	601a      	str	r2, [r3, #0]
 800fc62:	e01f      	b.n	800fca4 <refreshEncoder+0xfc>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 800fc64:	68b8      	ldr	r0, [r7, #8]
 800fc66:	f7f8 fb9f 	bl	80083a8 <__aeabi_f2d>
 800fc6a:	a363      	add	r3, pc, #396	; (adr r3, 800fdf8 <refreshEncoder+0x250>)
 800fc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc70:	f7f8 fe78 	bl	8008964 <__aeabi_dcmpge>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d011      	beq.n	800fc9e <refreshEncoder+0xf6>
 800fc7a:	68b8      	ldr	r0, [r7, #8]
 800fc7c:	f7f8 fb94 	bl	80083a8 <__aeabi_f2d>
 800fc80:	a35d      	add	r3, pc, #372	; (adr r3, 800fdf8 <refreshEncoder+0x250>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	f7f8 fa2f 	bl	80080e8 <__aeabi_dsub>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	460c      	mov	r4, r1
 800fc8e:	4618      	mov	r0, r3
 800fc90:	4621      	mov	r1, r4
 800fc92:	f7f8 fe7b 	bl	800898c <__aeabi_d2f>
 800fc96:	4602      	mov	r2, r0
 800fc98:	4b5d      	ldr	r3, [pc, #372]	; (800fe10 <refreshEncoder+0x268>)
 800fc9a:	601a      	str	r2, [r3, #0]
 800fc9c:	e002      	b.n	800fca4 <refreshEncoder+0xfc>
	else						theta = _theta;
 800fc9e:	4a5c      	ldr	r2, [pc, #368]	; (800fe10 <refreshEncoder+0x268>)
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	6013      	str	r3, [r2, #0]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 800fca4:	89fb      	ldrh	r3, [r7, #14]
 800fca6:	ee07 3a90 	vmov	s15, r3
 800fcaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fcae:	eddf 6a56 	vldr	s13, [pc, #344]	; 800fe08 <refreshEncoder+0x260>
 800fcb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fcb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fcba:	ee17 0a90 	vmov	r0, s15
 800fcbe:	f7f8 fb73 	bl	80083a8 <__aeabi_f2d>
 800fcc2:	a34b      	add	r3, pc, #300	; (adr r3, 800fdf0 <refreshEncoder+0x248>)
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	f7f8 fbc6 	bl	8008458 <__aeabi_dmul>
 800fccc:	4603      	mov	r3, r0
 800fcce:	460c      	mov	r4, r1
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	f04f 0200 	mov.w	r2, #0
 800fcd8:	4b4e      	ldr	r3, [pc, #312]	; (800fe14 <refreshEncoder+0x26c>)
 800fcda:	f7f8 fbbd 	bl	8008458 <__aeabi_dmul>
 800fcde:	4603      	mov	r3, r0
 800fce0:	460c      	mov	r4, r1
 800fce2:	4618      	mov	r0, r3
 800fce4:	4621      	mov	r1, r4
 800fce6:	f04f 0200 	mov.w	r2, #0
 800fcea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fcee:	f7f8 fcdd 	bl	80086ac <__aeabi_ddiv>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	f7f8 fe47 	bl	800898c <__aeabi_d2f>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	eddf 0a45 	vldr	s1, [pc, #276]	; 800fe18 <refreshEncoder+0x270>
 800fd04:	ee00 3a10 	vmov	s0, r3
 800fd08:	f001 fbf0 	bl	80114ec <fmodf>
 800fd0c:	eeb0 7a40 	vmov.f32	s14, s0
 800fd10:	4b42      	ldr	r3, [pc, #264]	; (800fe1c <refreshEncoder+0x274>)
 800fd12:	edd3 7a00 	vldr	s15, [r3]
 800fd16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd1a:	edc7 7a01 	vstr	s15, [r7, #4]

	if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 800fd1e:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd2a:	d511      	bpl.n	800fd50 <refreshEncoder+0x1a8>
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7f8 fb3b 	bl	80083a8 <__aeabi_f2d>
 800fd32:	a331      	add	r3, pc, #196	; (adr r3, 800fdf8 <refreshEncoder+0x250>)
 800fd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd38:	f7f8 f9d8 	bl	80080ec <__adddf3>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	460c      	mov	r4, r1
 800fd40:	4618      	mov	r0, r3
 800fd42:	4621      	mov	r1, r4
 800fd44:	f7f8 fe22 	bl	800898c <__aeabi_d2f>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	4b35      	ldr	r3, [pc, #212]	; (800fe20 <refreshEncoder+0x278>)
 800fd4c:	601a      	str	r2, [r3, #0]
 800fd4e:	e01f      	b.n	800fd90 <refreshEncoder+0x1e8>
	else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7f8 fb29 	bl	80083a8 <__aeabi_f2d>
 800fd56:	a328      	add	r3, pc, #160	; (adr r3, 800fdf8 <refreshEncoder+0x250>)
 800fd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5c:	f7f8 fe02 	bl	8008964 <__aeabi_dcmpge>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d011      	beq.n	800fd8a <refreshEncoder+0x1e2>
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7f8 fb1e 	bl	80083a8 <__aeabi_f2d>
 800fd6c:	a322      	add	r3, pc, #136	; (adr r3, 800fdf8 <refreshEncoder+0x250>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	f7f8 f9b9 	bl	80080e8 <__aeabi_dsub>
 800fd76:	4603      	mov	r3, r0
 800fd78:	460c      	mov	r4, r1
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	f7f8 fe05 	bl	800898c <__aeabi_d2f>
 800fd82:	4602      	mov	r2, r0
 800fd84:	4b26      	ldr	r3, [pc, #152]	; (800fe20 <refreshEncoder+0x278>)
 800fd86:	601a      	str	r2, [r3, #0]
 800fd88:	e002      	b.n	800fd90 <refreshEncoder+0x1e8>
	else							theta_re = _theta_re;
 800fd8a:	4a25      	ldr	r2, [pc, #148]	; (800fe20 <refreshEncoder+0x278>)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6013      	str	r3, [r2, #0]

	cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800fd90:	4b23      	ldr	r3, [pc, #140]	; (800fe20 <refreshEncoder+0x278>)
 800fd92:	edd3 7a00 	vldr	s15, [r3]
 800fd96:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800fe24 <refreshEncoder+0x27c>
 800fd9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fda2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fda6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800fe28 <refreshEncoder+0x280>
 800fdaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdb2:	ee17 3a90 	vmov	r3, s15
 800fdb6:	4a1d      	ldr	r2, [pc, #116]	; (800fe2c <refreshEncoder+0x284>)
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4413      	add	r3, r2
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4a1c      	ldr	r2, [pc, #112]	; (800fe30 <refreshEncoder+0x288>)
 800fdc0:	6013      	str	r3, [r2, #0]
	sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 800fdc2:	4b17      	ldr	r3, [pc, #92]	; (800fe20 <refreshEncoder+0x278>)
 800fdc4:	edd3 7a00 	vldr	s15, [r3]
 800fdc8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fe34 <refreshEncoder+0x28c>
 800fdcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdd4:	ee17 3a90 	vmov	r3, s15
 800fdd8:	4a14      	ldr	r2, [pc, #80]	; (800fe2c <refreshEncoder+0x284>)
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	4413      	add	r3, r2
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4a15      	ldr	r2, [pc, #84]	; (800fe38 <refreshEncoder+0x290>)
 800fde2:	6013      	str	r3, [r2, #0]


	return 0;
 800fde4:	2300      	movs	r3, #0

}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bdb0      	pop	{r4, r5, r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	54442d18 	.word	0x54442d18
 800fdf4:	400921fb 	.word	0x400921fb
 800fdf8:	54442d18 	.word	0x54442d18
 800fdfc:	401921fb 	.word	0x401921fb
 800fe00:	40020400 	.word	0x40020400
 800fe04:	200001b4 	.word	0x200001b4
 800fe08:	46800000 	.word	0x46800000
 800fe0c:	200001b8 	.word	0x200001b8
 800fe10:	200001c0 	.word	0x200001c0
 800fe14:	40360000 	.word	0x40360000
 800fe18:	40c90fdb 	.word	0x40c90fdb
 800fe1c:	200001bc 	.word	0x200001bc
 800fe20:	200001c4 	.word	0x200001c4
 800fe24:	3ea2f838 	.word	0x3ea2f838
 800fe28:	459c4000 	.word	0x459c4000
 800fe2c:	08011750 	.word	0x08011750
 800fe30:	20000028 	.word	0x20000028
 800fe34:	44c6f195 	.word	0x44c6f195
 800fe38:	200001c8 	.word	0x200001c8

0800fe3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fe42:	2300      	movs	r3, #0
 800fe44:	607b      	str	r3, [r7, #4]
 800fe46:	4b10      	ldr	r3, [pc, #64]	; (800fe88 <HAL_MspInit+0x4c>)
 800fe48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe4a:	4a0f      	ldr	r2, [pc, #60]	; (800fe88 <HAL_MspInit+0x4c>)
 800fe4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe50:	6453      	str	r3, [r2, #68]	; 0x44
 800fe52:	4b0d      	ldr	r3, [pc, #52]	; (800fe88 <HAL_MspInit+0x4c>)
 800fe54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe5a:	607b      	str	r3, [r7, #4]
 800fe5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fe5e:	2300      	movs	r3, #0
 800fe60:	603b      	str	r3, [r7, #0]
 800fe62:	4b09      	ldr	r3, [pc, #36]	; (800fe88 <HAL_MspInit+0x4c>)
 800fe64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe66:	4a08      	ldr	r2, [pc, #32]	; (800fe88 <HAL_MspInit+0x4c>)
 800fe68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe6c:	6413      	str	r3, [r2, #64]	; 0x40
 800fe6e:	4b06      	ldr	r3, [pc, #24]	; (800fe88 <HAL_MspInit+0x4c>)
 800fe70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe76:	603b      	str	r3, [r7, #0]
 800fe78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800fe7a:	2007      	movs	r0, #7
 800fe7c:	f7fa f8d8 	bl	800a030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	40023800 	.word	0x40023800

0800fe8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800fe90:	bf00      	nop
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr

0800fe9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fe9a:	b480      	push	{r7}
 800fe9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fe9e:	e7fe      	b.n	800fe9e <HardFault_Handler+0x4>

0800fea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800fea0:	b480      	push	{r7}
 800fea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fea4:	e7fe      	b.n	800fea4 <MemManage_Handler+0x4>

0800fea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800fea6:	b480      	push	{r7}
 800fea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800feaa:	e7fe      	b.n	800feaa <BusFault_Handler+0x4>

0800feac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800feac:	b480      	push	{r7}
 800feae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800feb0:	e7fe      	b.n	800feb0 <UsageFault_Handler+0x4>

0800feb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800feb2:	b480      	push	{r7}
 800feb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800feb6:	bf00      	nop
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800fec0:	b480      	push	{r7}
 800fec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fec4:	bf00      	nop
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800fece:	b480      	push	{r7}
 800fed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800fed2:	bf00      	nop
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fee0:	f7f8 ff76 	bl	8008dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fee4:	bf00      	nop
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800feec:	4802      	ldr	r0, [pc, #8]	; (800fef8 <CAN1_TX_IRQHandler+0x10>)
 800feee:	f7f9 fdc3 	bl	8009a78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800fef2:	bf00      	nop
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	20000450 	.word	0x20000450

0800fefc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ff00:	4802      	ldr	r0, [pc, #8]	; (800ff0c <CAN1_RX0_IRQHandler+0x10>)
 800ff02:	f7f9 fdb9 	bl	8009a78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800ff06:	bf00      	nop
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	20000450 	.word	0x20000450

0800ff10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800ff14:	4802      	ldr	r0, [pc, #8]	; (800ff20 <SPI2_IRQHandler+0x10>)
 800ff16:	f7fb fdd3 	bl	800bac0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800ff1a:	bf00      	nop
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20000478 	.word	0x20000478

0800ff24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ff28:	4802      	ldr	r0, [pc, #8]	; (800ff34 <USART2_IRQHandler+0x10>)
 800ff2a:	f7fd fa01 	bl	800d330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ff2e:	bf00      	nop
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	2000056c 	.word	0x2000056c

0800ff38 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ff3c:	4802      	ldr	r0, [pc, #8]	; (800ff48 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800ff3e:	f7fc fa51 	bl	800c3e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800ff42:	bf00      	nop
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	2000052c 	.word	0x2000052c

0800ff4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ff50:	4802      	ldr	r0, [pc, #8]	; (800ff5c <DMA2_Stream0_IRQHandler+0x10>)
 800ff52:	f7fa f9df 	bl	800a314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800ff56:	bf00      	nop
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	20000344 	.word	0x20000344

0800ff60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800ff64:	4802      	ldr	r0, [pc, #8]	; (800ff70 <DMA2_Stream1_IRQHandler+0x10>)
 800ff66:	f7fa f9d5 	bl	800a314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800ff6a:	bf00      	nop
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	20000254 	.word	0x20000254

0800ff74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800ff78:	4802      	ldr	r0, [pc, #8]	; (800ff84 <DMA2_Stream2_IRQHandler+0x10>)
 800ff7a:	f7fa f9cb 	bl	800a314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ff7e:	bf00      	nop
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	200003a4 	.word	0x200003a4

0800ff88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ff94:	2300      	movs	r3, #0
 800ff96:	617b      	str	r3, [r7, #20]
 800ff98:	e00a      	b.n	800ffb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ff9a:	f3af 8000 	nop.w
 800ff9e:	4601      	mov	r1, r0
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	1c5a      	adds	r2, r3, #1
 800ffa4:	60ba      	str	r2, [r7, #8]
 800ffa6:	b2ca      	uxtb	r2, r1
 800ffa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	3301      	adds	r3, #1
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	dbf0      	blt.n	800ff9a <_read+0x12>
	}

return len;
 800ffb8:	687b      	ldr	r3, [r7, #4]
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3718      	adds	r7, #24
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}

0800ffc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 800ffc2:	b480      	push	{r7}
 800ffc4:	b083      	sub	sp, #12
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
	return -1;
 800ffca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	370c      	adds	r7, #12
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr

0800ffda <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ffda:	b480      	push	{r7}
 800ffdc:	b083      	sub	sp, #12
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ffea:	605a      	str	r2, [r3, #4]
	return 0;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	370c      	adds	r7, #12
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr

0800fffa <_isatty>:

int _isatty(int file)
{
 800fffa:	b480      	push	{r7}
 800fffc:	b083      	sub	sp, #12
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
	return 1;
 8010002:	2301      	movs	r3, #1
}
 8010004:	4618      	mov	r0, r3
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
	return 0;
 801001c:	2300      	movs	r3, #0
}
 801001e:	4618      	mov	r0, r3
 8010020:	3714      	adds	r7, #20
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
	...

0801002c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010034:	4b11      	ldr	r3, [pc, #68]	; (801007c <_sbrk+0x50>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d102      	bne.n	8010042 <_sbrk+0x16>
		heap_end = &end;
 801003c:	4b0f      	ldr	r3, [pc, #60]	; (801007c <_sbrk+0x50>)
 801003e:	4a10      	ldr	r2, [pc, #64]	; (8010080 <_sbrk+0x54>)
 8010040:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010042:	4b0e      	ldr	r3, [pc, #56]	; (801007c <_sbrk+0x50>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010048:	4b0c      	ldr	r3, [pc, #48]	; (801007c <_sbrk+0x50>)
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	4413      	add	r3, r2
 8010050:	466a      	mov	r2, sp
 8010052:	4293      	cmp	r3, r2
 8010054:	d907      	bls.n	8010066 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010056:	f000 facf 	bl	80105f8 <__errno>
 801005a:	4602      	mov	r2, r0
 801005c:	230c      	movs	r3, #12
 801005e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8010060:	f04f 33ff 	mov.w	r3, #4294967295
 8010064:	e006      	b.n	8010074 <_sbrk+0x48>
	}

	heap_end += incr;
 8010066:	4b05      	ldr	r3, [pc, #20]	; (801007c <_sbrk+0x50>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4413      	add	r3, r2
 801006e:	4a03      	ldr	r2, [pc, #12]	; (801007c <_sbrk+0x50>)
 8010070:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010072:	68fb      	ldr	r3, [r7, #12]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	200001d0 	.word	0x200001d0
 8010080:	200005b0 	.word	0x200005b0

08010084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010084:	b480      	push	{r7}
 8010086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010088:	4b16      	ldr	r3, [pc, #88]	; (80100e4 <SystemInit+0x60>)
 801008a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801008e:	4a15      	ldr	r2, [pc, #84]	; (80100e4 <SystemInit+0x60>)
 8010090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010098:	4b13      	ldr	r3, [pc, #76]	; (80100e8 <SystemInit+0x64>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a12      	ldr	r2, [pc, #72]	; (80100e8 <SystemInit+0x64>)
 801009e:	f043 0301 	orr.w	r3, r3, #1
 80100a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80100a4:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <SystemInit+0x64>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80100aa:	4b0f      	ldr	r3, [pc, #60]	; (80100e8 <SystemInit+0x64>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a0e      	ldr	r2, [pc, #56]	; (80100e8 <SystemInit+0x64>)
 80100b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80100b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80100b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80100ba:	4b0b      	ldr	r3, [pc, #44]	; (80100e8 <SystemInit+0x64>)
 80100bc:	4a0b      	ldr	r2, [pc, #44]	; (80100ec <SystemInit+0x68>)
 80100be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80100c0:	4b09      	ldr	r3, [pc, #36]	; (80100e8 <SystemInit+0x64>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4a08      	ldr	r2, [pc, #32]	; (80100e8 <SystemInit+0x64>)
 80100c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80100ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80100cc:	4b06      	ldr	r3, [pc, #24]	; (80100e8 <SystemInit+0x64>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80100d2:	4b04      	ldr	r3, [pc, #16]	; (80100e4 <SystemInit+0x60>)
 80100d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80100d8:	609a      	str	r2, [r3, #8]
#endif
}
 80100da:	bf00      	nop
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	e000ed00 	.word	0xe000ed00
 80100e8:	40023800 	.word	0x40023800
 80100ec:	24003010 	.word	0x24003010

080100f0 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b096      	sub	sp, #88	; 0x58
 80100f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80100f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80100fa:	2200      	movs	r2, #0
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	605a      	str	r2, [r3, #4]
 8010100:	609a      	str	r2, [r3, #8]
 8010102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010104:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010108:	2200      	movs	r2, #0
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801010e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	605a      	str	r2, [r3, #4]
 8010118:	609a      	str	r2, [r3, #8]
 801011a:	60da      	str	r2, [r3, #12]
 801011c:	611a      	str	r2, [r3, #16]
 801011e:	615a      	str	r2, [r3, #20]
 8010120:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010122:	1d3b      	adds	r3, r7, #4
 8010124:	2220      	movs	r2, #32
 8010126:	2100      	movs	r1, #0
 8010128:	4618      	mov	r0, r3
 801012a:	f000 fa8f 	bl	801064c <memset>

  htim8.Instance = TIM8;
 801012e:	4b4a      	ldr	r3, [pc, #296]	; (8010258 <MX_TIM8_Init+0x168>)
 8010130:	4a4a      	ldr	r2, [pc, #296]	; (801025c <MX_TIM8_Init+0x16c>)
 8010132:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8010134:	4b48      	ldr	r3, [pc, #288]	; (8010258 <MX_TIM8_Init+0x168>)
 8010136:	2200      	movs	r2, #0
 8010138:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 801013a:	4b47      	ldr	r3, [pc, #284]	; (8010258 <MX_TIM8_Init+0x168>)
 801013c:	2220      	movs	r2, #32
 801013e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8010140:	4b45      	ldr	r3, [pc, #276]	; (8010258 <MX_TIM8_Init+0x168>)
 8010142:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8010146:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010148:	4b43      	ldr	r3, [pc, #268]	; (8010258 <MX_TIM8_Init+0x168>)
 801014a:	2200      	movs	r2, #0
 801014c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801014e:	4b42      	ldr	r3, [pc, #264]	; (8010258 <MX_TIM8_Init+0x168>)
 8010150:	2200      	movs	r2, #0
 8010152:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010154:	4b40      	ldr	r3, [pc, #256]	; (8010258 <MX_TIM8_Init+0x168>)
 8010156:	2280      	movs	r2, #128	; 0x80
 8010158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801015a:	483f      	ldr	r0, [pc, #252]	; (8010258 <MX_TIM8_Init+0x168>)
 801015c:	f7fb ffc4 	bl	800c0e8 <HAL_TIM_Base_Init>
 8010160:	4603      	mov	r3, r0
 8010162:	2b00      	cmp	r3, #0
 8010164:	d001      	beq.n	801016a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8010166:	f7ff f807 	bl	800f178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801016a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801016e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8010170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010174:	4619      	mov	r1, r3
 8010176:	4838      	ldr	r0, [pc, #224]	; (8010258 <MX_TIM8_Init+0x168>)
 8010178:	f7fc fb02 	bl	800c780 <HAL_TIM_ConfigClockSource>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d001      	beq.n	8010186 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8010182:	f7fe fff9 	bl	800f178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8010186:	4834      	ldr	r0, [pc, #208]	; (8010258 <MX_TIM8_Init+0x168>)
 8010188:	f7fb ffd9 	bl	800c13e <HAL_TIM_PWM_Init>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8010192:	f7fe fff1 	bl	800f178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010196:	2320      	movs	r3, #32
 8010198:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801019a:	2300      	movs	r3, #0
 801019c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801019e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101a2:	4619      	mov	r1, r3
 80101a4:	482c      	ldr	r0, [pc, #176]	; (8010258 <MX_TIM8_Init+0x168>)
 80101a6:	f7fc ffa5 	bl	800d0f4 <HAL_TIMEx_MasterConfigSynchronization>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80101b0:	f7fe ffe2 	bl	800f178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80101b4:	2360      	movs	r3, #96	; 0x60
 80101b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 80101b8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80101bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80101be:	2300      	movs	r3, #0
 80101c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80101c2:	2300      	movs	r3, #0
 80101c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80101c6:	2300      	movs	r3, #0
 80101c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80101ca:	2300      	movs	r3, #0
 80101cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80101ce:	2300      	movs	r3, #0
 80101d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80101d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101d6:	2200      	movs	r2, #0
 80101d8:	4619      	mov	r1, r3
 80101da:	481f      	ldr	r0, [pc, #124]	; (8010258 <MX_TIM8_Init+0x168>)
 80101dc:	f7fc fa0a 	bl	800c5f4 <HAL_TIM_PWM_ConfigChannel>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80101e6:	f7fe ffc7 	bl	800f178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80101ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101ee:	2204      	movs	r2, #4
 80101f0:	4619      	mov	r1, r3
 80101f2:	4819      	ldr	r0, [pc, #100]	; (8010258 <MX_TIM8_Init+0x168>)
 80101f4:	f7fc f9fe 	bl	800c5f4 <HAL_TIM_PWM_ConfigChannel>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d001      	beq.n	8010202 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80101fe:	f7fe ffbb 	bl	800f178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8010202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010206:	2208      	movs	r2, #8
 8010208:	4619      	mov	r1, r3
 801020a:	4813      	ldr	r0, [pc, #76]	; (8010258 <MX_TIM8_Init+0x168>)
 801020c:	f7fc f9f2 	bl	800c5f4 <HAL_TIM_PWM_ConfigChannel>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8010216:	f7fe ffaf 	bl	800f178 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801021a:	2300      	movs	r3, #0
 801021c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801021e:	2300      	movs	r3, #0
 8010220:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8010222:	2300      	movs	r3, #0
 8010224:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 8010226:	2328      	movs	r3, #40	; 0x28
 8010228:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801022a:	2300      	movs	r3, #0
 801022c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 801022e:	2300      	movs	r3, #0
 8010230:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010232:	2300      	movs	r3, #0
 8010234:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8010236:	1d3b      	adds	r3, r7, #4
 8010238:	4619      	mov	r1, r3
 801023a:	4807      	ldr	r0, [pc, #28]	; (8010258 <MX_TIM8_Init+0x168>)
 801023c:	f7fc ff9f 	bl	800d17e <HAL_TIMEx_ConfigBreakDeadTime>
 8010240:	4603      	mov	r3, r0
 8010242:	2b00      	cmp	r3, #0
 8010244:	d001      	beq.n	801024a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8010246:	f7fe ff97 	bl	800f178 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 801024a:	4803      	ldr	r0, [pc, #12]	; (8010258 <MX_TIM8_Init+0x168>)
 801024c:	f000 f830 	bl	80102b0 <HAL_TIM_MspPostInit>

}
 8010250:	bf00      	nop
 8010252:	3758      	adds	r7, #88	; 0x58
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	2000052c 	.word	0x2000052c
 801025c:	40010400 	.word	0x40010400

08010260 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a0e      	ldr	r2, [pc, #56]	; (80102a8 <HAL_TIM_Base_MspInit+0x48>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d115      	bne.n	801029e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8010272:	2300      	movs	r3, #0
 8010274:	60fb      	str	r3, [r7, #12]
 8010276:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <HAL_TIM_Base_MspInit+0x4c>)
 8010278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801027a:	4a0c      	ldr	r2, [pc, #48]	; (80102ac <HAL_TIM_Base_MspInit+0x4c>)
 801027c:	f043 0302 	orr.w	r3, r3, #2
 8010280:	6453      	str	r3, [r2, #68]	; 0x44
 8010282:	4b0a      	ldr	r3, [pc, #40]	; (80102ac <HAL_TIM_Base_MspInit+0x4c>)
 8010284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010286:	f003 0302 	and.w	r3, r3, #2
 801028a:	60fb      	str	r3, [r7, #12]
 801028c:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 801028e:	2200      	movs	r2, #0
 8010290:	2100      	movs	r1, #0
 8010292:	202c      	movs	r0, #44	; 0x2c
 8010294:	f7f9 fed7 	bl	800a046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8010298:	202c      	movs	r0, #44	; 0x2c
 801029a:	f7f9 fef0 	bl	800a07e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801029e:	bf00      	nop
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	40010400 	.word	0x40010400
 80102ac:	40023800 	.word	0x40023800

080102b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08a      	sub	sp, #40	; 0x28
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102b8:	f107 0314 	add.w	r3, r7, #20
 80102bc:	2200      	movs	r2, #0
 80102be:	601a      	str	r2, [r3, #0]
 80102c0:	605a      	str	r2, [r3, #4]
 80102c2:	609a      	str	r2, [r3, #8]
 80102c4:	60da      	str	r2, [r3, #12]
 80102c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a30      	ldr	r2, [pc, #192]	; (8010390 <HAL_TIM_MspPostInit+0xe0>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d15a      	bne.n	8010388 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102d2:	2300      	movs	r3, #0
 80102d4:	613b      	str	r3, [r7, #16]
 80102d6:	4b2f      	ldr	r3, [pc, #188]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 80102d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102da:	4a2e      	ldr	r2, [pc, #184]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 80102dc:	f043 0301 	orr.w	r3, r3, #1
 80102e0:	6313      	str	r3, [r2, #48]	; 0x30
 80102e2:	4b2c      	ldr	r3, [pc, #176]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 80102e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102e6:	f003 0301 	and.w	r3, r3, #1
 80102ea:	613b      	str	r3, [r7, #16]
 80102ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80102ee:	2300      	movs	r3, #0
 80102f0:	60fb      	str	r3, [r7, #12]
 80102f2:	4b28      	ldr	r3, [pc, #160]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 80102f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102f6:	4a27      	ldr	r2, [pc, #156]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 80102f8:	f043 0302 	orr.w	r3, r3, #2
 80102fc:	6313      	str	r3, [r2, #48]	; 0x30
 80102fe:	4b25      	ldr	r3, [pc, #148]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 8010300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010302:	f003 0302 	and.w	r3, r3, #2
 8010306:	60fb      	str	r3, [r7, #12]
 8010308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801030a:	2300      	movs	r3, #0
 801030c:	60bb      	str	r3, [r7, #8]
 801030e:	4b21      	ldr	r3, [pc, #132]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 8010310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010312:	4a20      	ldr	r2, [pc, #128]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 8010314:	f043 0304 	orr.w	r3, r3, #4
 8010318:	6313      	str	r3, [r2, #48]	; 0x30
 801031a:	4b1e      	ldr	r3, [pc, #120]	; (8010394 <HAL_TIM_MspPostInit+0xe4>)
 801031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801031e:	f003 0304 	and.w	r3, r3, #4
 8010322:	60bb      	str	r3, [r7, #8]
 8010324:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010326:	2380      	movs	r3, #128	; 0x80
 8010328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801032a:	2302      	movs	r3, #2
 801032c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801032e:	2300      	movs	r3, #0
 8010330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010332:	2300      	movs	r3, #0
 8010334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010336:	2303      	movs	r3, #3
 8010338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801033a:	f107 0314 	add.w	r3, r7, #20
 801033e:	4619      	mov	r1, r3
 8010340:	4815      	ldr	r0, [pc, #84]	; (8010398 <HAL_TIM_MspPostInit+0xe8>)
 8010342:	f7fa fa4f 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010346:	2303      	movs	r3, #3
 8010348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801034a:	2302      	movs	r3, #2
 801034c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801034e:	2300      	movs	r3, #0
 8010350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010352:	2300      	movs	r3, #0
 8010354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010356:	2303      	movs	r3, #3
 8010358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801035a:	f107 0314 	add.w	r3, r7, #20
 801035e:	4619      	mov	r1, r3
 8010360:	480e      	ldr	r0, [pc, #56]	; (801039c <HAL_TIM_MspPostInit+0xec>)
 8010362:	f7fa fa3f 	bl	800a7e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8010366:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 801036a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801036c:	2302      	movs	r3, #2
 801036e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010370:	2300      	movs	r3, #0
 8010372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010374:	2300      	movs	r3, #0
 8010376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010378:	2303      	movs	r3, #3
 801037a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801037c:	f107 0314 	add.w	r3, r7, #20
 8010380:	4619      	mov	r1, r3
 8010382:	4807      	ldr	r0, [pc, #28]	; (80103a0 <HAL_TIM_MspPostInit+0xf0>)
 8010384:	f7fa fa2e 	bl	800a7e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8010388:	bf00      	nop
 801038a:	3728      	adds	r7, #40	; 0x28
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	40010400 	.word	0x40010400
 8010394:	40023800 	.word	0x40023800
 8010398:	40020000 	.word	0x40020000
 801039c:	40020400 	.word	0x40020400
 80103a0:	40020800 	.word	0x40020800

080103a4 <startPWM>:
}



inline void startPWM()
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	af00      	add	r7, sp, #0


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 80103a8:	2100      	movs	r1, #0
 80103aa:	480c      	ldr	r0, [pc, #48]	; (80103dc <startPWM+0x38>)
 80103ac:	f7fb fefc 	bl	800c1a8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 80103b0:	2104      	movs	r1, #4
 80103b2:	480a      	ldr	r0, [pc, #40]	; (80103dc <startPWM+0x38>)
 80103b4:	f7fb fef8 	bl	800c1a8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 80103b8:	2108      	movs	r1, #8
 80103ba:	4808      	ldr	r0, [pc, #32]	; (80103dc <startPWM+0x38>)
 80103bc:	f7fb fef4 	bl	800c1a8 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 80103c0:	2100      	movs	r1, #0
 80103c2:	4806      	ldr	r0, [pc, #24]	; (80103dc <startPWM+0x38>)
 80103c4:	f7fc fdcb 	bl	800cf5e <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 80103c8:	2104      	movs	r1, #4
 80103ca:	4804      	ldr	r0, [pc, #16]	; (80103dc <startPWM+0x38>)
 80103cc:	f7fc fdc7 	bl	800cf5e <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 80103d0:	2108      	movs	r1, #8
 80103d2:	4802      	ldr	r0, [pc, #8]	; (80103dc <startPWM+0x38>)
 80103d4:	f7fc fdc3 	bl	800cf5e <HAL_TIMEx_PWMN_Start_IT>

}
 80103d8:	bf00      	nop
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	2000052c 	.word	0x2000052c

080103e0 <stopPWM>:



inline void stopPWM()
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	af00      	add	r7, sp, #0

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80103e4:	2100      	movs	r1, #0
 80103e6:	480c      	ldr	r0, [pc, #48]	; (8010418 <stopPWM+0x38>)
 80103e8:	f7fb ff62 	bl	800c2b0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_2);
 80103ec:	2104      	movs	r1, #4
 80103ee:	480a      	ldr	r0, [pc, #40]	; (8010418 <stopPWM+0x38>)
 80103f0:	f7fb ff5e 	bl	800c2b0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_3);
 80103f4:	2108      	movs	r1, #8
 80103f6:	4808      	ldr	r0, [pc, #32]	; (8010418 <stopPWM+0x38>)
 80103f8:	f7fb ff5a 	bl	800c2b0 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_1);
 80103fc:	2100      	movs	r1, #0
 80103fe:	4806      	ldr	r0, [pc, #24]	; (8010418 <stopPWM+0x38>)
 8010400:	f7fc fe02 	bl	800d008 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_2);
 8010404:	2104      	movs	r1, #4
 8010406:	4804      	ldr	r0, [pc, #16]	; (8010418 <stopPWM+0x38>)
 8010408:	f7fc fdfe 	bl	800d008 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_3);
 801040c:	2108      	movs	r1, #8
 801040e:	4802      	ldr	r0, [pc, #8]	; (8010418 <stopPWM+0x38>)
 8010410:	f7fc fdfa 	bl	800d008 <HAL_TIMEx_PWMN_Stop_IT>

}
 8010414:	bf00      	nop
 8010416:	bd80      	pop	{r7, pc}
 8010418:	2000052c 	.word	0x2000052c

0801041c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a11      	ldr	r2, [pc, #68]	; (8010470 <HAL_TIM_PeriodElapsedCallback+0x54>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d11b      	bne.n	8010466 <HAL_TIM_PeriodElapsedCallback+0x4a>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f003 0310 	and.w	r3, r3, #16
 8010438:	2b10      	cmp	r3, #16
 801043a:	d014      	beq.n	8010466 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{

			currentControl();
 801043c:	f7fd fbc0 	bl	800dbc0 <currentControl>

			// timeout control
			if(timeoutCount < TIMEOUT_MS * PWM_FREQ / 1000)
 8010440:	4b0c      	ldr	r3, [pc, #48]	; (8010474 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010448:	d205      	bcs.n	8010456 <HAL_TIM_PeriodElapsedCallback+0x3a>
			{
				timeoutCount += 1;
 801044a:	4b0a      	ldr	r3, [pc, #40]	; (8010474 <HAL_TIM_PeriodElapsedCallback+0x58>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3301      	adds	r3, #1
 8010450:	4a08      	ldr	r2, [pc, #32]	; (8010474 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8010452:	6013      	str	r3, [r2, #0]
		}


	}

}
 8010454:	e007      	b.n	8010466 <HAL_TIM_PeriodElapsedCallback+0x4a>
				stopPWM();
 8010456:	f7ff ffc3 	bl	80103e0 <stopPWM>
				timeoutCount = 0;
 801045a:	4b06      	ldr	r3, [pc, #24]	; (8010474 <HAL_TIM_PeriodElapsedCallback+0x58>)
 801045c:	2200      	movs	r2, #0
 801045e:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 8010460:	4b05      	ldr	r3, [pc, #20]	; (8010478 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8010462:	2201      	movs	r2, #1
 8010464:	701a      	strb	r2, [r3, #0]
}
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	40010400 	.word	0x40010400
 8010474:	200001e0 	.word	0x200001e0
 8010478:	200001e4 	.word	0x200001e4

0801047c <timeoutReset>:


inline void timeoutReset()
{
 801047c:	b580      	push	{r7, lr}
 801047e:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8010480:	4b09      	ldr	r3, [pc, #36]	; (80104a8 <timeoutReset+0x2c>)
 8010482:	2200      	movs	r2, #0
 8010484:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 8010486:	4b09      	ldr	r3, [pc, #36]	; (80104ac <timeoutReset+0x30>)
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	b2db      	uxtb	r3, r3
 801048c:	2b01      	cmp	r3, #1
 801048e:	d108      	bne.n	80104a2 <timeoutReset+0x26>
	{
		timeoutState = 0;
 8010490:	4b06      	ldr	r3, [pc, #24]	; (80104ac <timeoutReset+0x30>)
 8010492:	2200      	movs	r2, #0
 8010494:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 8010496:	f7fd fe6d 	bl	800e174 <ASR_Reset>
		ACR_Reset();
 801049a:	f7fd fe2b 	bl	800e0f4 <ACR_Reset>
		startPWM();
 801049e:	f7ff ff81 	bl	80103a4 <startPWM>
	}
}
 80104a2:	bf00      	nop
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	200001e0 	.word	0x200001e0
 80104ac:	200001e4 	.word	0x200001e4

080104b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80104b4:	4b11      	ldr	r3, [pc, #68]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104b6:	4a12      	ldr	r2, [pc, #72]	; (8010500 <MX_USART2_UART_Init+0x50>)
 80104b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80104ba:	4b10      	ldr	r3, [pc, #64]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80104c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80104c2:	4b0e      	ldr	r3, [pc, #56]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104c4:	2200      	movs	r2, #0
 80104c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80104c8:	4b0c      	ldr	r3, [pc, #48]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80104ce:	4b0b      	ldr	r3, [pc, #44]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80104d4:	4b09      	ldr	r3, [pc, #36]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104d6:	220c      	movs	r2, #12
 80104d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80104da:	4b08      	ldr	r3, [pc, #32]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104dc:	2200      	movs	r2, #0
 80104de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80104e0:	4b06      	ldr	r3, [pc, #24]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80104e6:	4805      	ldr	r0, [pc, #20]	; (80104fc <MX_USART2_UART_Init+0x4c>)
 80104e8:	f7fc fed4 	bl	800d294 <HAL_UART_Init>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80104f2:	f7fe fe41 	bl	800f178 <Error_Handler>
  }

}
 80104f6:	bf00      	nop
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	2000056c 	.word	0x2000056c
 8010500:	40004400 	.word	0x40004400

08010504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08a      	sub	sp, #40	; 0x28
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801050c:	f107 0314 	add.w	r3, r7, #20
 8010510:	2200      	movs	r2, #0
 8010512:	601a      	str	r2, [r3, #0]
 8010514:	605a      	str	r2, [r3, #4]
 8010516:	609a      	str	r2, [r3, #8]
 8010518:	60da      	str	r2, [r3, #12]
 801051a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a1d      	ldr	r2, [pc, #116]	; (8010598 <HAL_UART_MspInit+0x94>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d133      	bne.n	801058e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010526:	2300      	movs	r3, #0
 8010528:	613b      	str	r3, [r7, #16]
 801052a:	4b1c      	ldr	r3, [pc, #112]	; (801059c <HAL_UART_MspInit+0x98>)
 801052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801052e:	4a1b      	ldr	r2, [pc, #108]	; (801059c <HAL_UART_MspInit+0x98>)
 8010530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010534:	6413      	str	r3, [r2, #64]	; 0x40
 8010536:	4b19      	ldr	r3, [pc, #100]	; (801059c <HAL_UART_MspInit+0x98>)
 8010538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801053a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801053e:	613b      	str	r3, [r7, #16]
 8010540:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010542:	2300      	movs	r3, #0
 8010544:	60fb      	str	r3, [r7, #12]
 8010546:	4b15      	ldr	r3, [pc, #84]	; (801059c <HAL_UART_MspInit+0x98>)
 8010548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801054a:	4a14      	ldr	r2, [pc, #80]	; (801059c <HAL_UART_MspInit+0x98>)
 801054c:	f043 0301 	orr.w	r3, r3, #1
 8010550:	6313      	str	r3, [r2, #48]	; 0x30
 8010552:	4b12      	ldr	r3, [pc, #72]	; (801059c <HAL_UART_MspInit+0x98>)
 8010554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	60fb      	str	r3, [r7, #12]
 801055c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801055e:	230c      	movs	r3, #12
 8010560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010562:	2302      	movs	r3, #2
 8010564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010566:	2301      	movs	r3, #1
 8010568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801056a:	2303      	movs	r3, #3
 801056c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801056e:	2307      	movs	r3, #7
 8010570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010572:	f107 0314 	add.w	r3, r7, #20
 8010576:	4619      	mov	r1, r3
 8010578:	4809      	ldr	r0, [pc, #36]	; (80105a0 <HAL_UART_MspInit+0x9c>)
 801057a:	f7fa f933 	bl	800a7e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801057e:	2200      	movs	r2, #0
 8010580:	2100      	movs	r1, #0
 8010582:	2026      	movs	r0, #38	; 0x26
 8010584:	f7f9 fd5f 	bl	800a046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8010588:	2026      	movs	r0, #38	; 0x26
 801058a:	f7f9 fd78 	bl	800a07e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801058e:	bf00      	nop
 8010590:	3728      	adds	r7, #40	; 0x28
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	40004400 	.word	0x40004400
 801059c:	40023800 	.word	0x40023800
 80105a0:	40020000 	.word	0x40020000

080105a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80105a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80105dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80105a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80105aa:	e003      	b.n	80105b4 <LoopCopyDataInit>

080105ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80105ac:	4b0c      	ldr	r3, [pc, #48]	; (80105e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80105ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80105b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80105b2:	3104      	adds	r1, #4

080105b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80105b4:	480b      	ldr	r0, [pc, #44]	; (80105e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80105b6:	4b0c      	ldr	r3, [pc, #48]	; (80105e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80105b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80105ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80105bc:	d3f6      	bcc.n	80105ac <CopyDataInit>
  ldr  r2, =_sbss
 80105be:	4a0b      	ldr	r2, [pc, #44]	; (80105ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80105c0:	e002      	b.n	80105c8 <LoopFillZerobss>

080105c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80105c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80105c4:	f842 3b04 	str.w	r3, [r2], #4

080105c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80105c8:	4b09      	ldr	r3, [pc, #36]	; (80105f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80105ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80105cc:	d3f9      	bcc.n	80105c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80105ce:	f7ff fd59 	bl	8010084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80105d2:	f000 f817 	bl	8010604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80105d6:	f7fe fce1 	bl	800ef9c <main>
  bx  lr    
 80105da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80105dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80105e0:	080354f4 	.word	0x080354f4
  ldr  r0, =_sdata
 80105e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80105e8:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80105ec:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80105f0:	200005b0 	.word	0x200005b0

080105f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80105f4:	e7fe      	b.n	80105f4 <ADC_IRQHandler>
	...

080105f8 <__errno>:
 80105f8:	4b01      	ldr	r3, [pc, #4]	; (8010600 <__errno+0x8>)
 80105fa:	6818      	ldr	r0, [r3, #0]
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop
 8010600:	20000030 	.word	0x20000030

08010604 <__libc_init_array>:
 8010604:	b570      	push	{r4, r5, r6, lr}
 8010606:	4e0d      	ldr	r6, [pc, #52]	; (801063c <__libc_init_array+0x38>)
 8010608:	4c0d      	ldr	r4, [pc, #52]	; (8010640 <__libc_init_array+0x3c>)
 801060a:	1ba4      	subs	r4, r4, r6
 801060c:	10a4      	asrs	r4, r4, #2
 801060e:	2500      	movs	r5, #0
 8010610:	42a5      	cmp	r5, r4
 8010612:	d109      	bne.n	8010628 <__libc_init_array+0x24>
 8010614:	4e0b      	ldr	r6, [pc, #44]	; (8010644 <__libc_init_array+0x40>)
 8010616:	4c0c      	ldr	r4, [pc, #48]	; (8010648 <__libc_init_array+0x44>)
 8010618:	f001 f84e 	bl	80116b8 <_init>
 801061c:	1ba4      	subs	r4, r4, r6
 801061e:	10a4      	asrs	r4, r4, #2
 8010620:	2500      	movs	r5, #0
 8010622:	42a5      	cmp	r5, r4
 8010624:	d105      	bne.n	8010632 <__libc_init_array+0x2e>
 8010626:	bd70      	pop	{r4, r5, r6, pc}
 8010628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801062c:	4798      	blx	r3
 801062e:	3501      	adds	r5, #1
 8010630:	e7ee      	b.n	8010610 <__libc_init_array+0xc>
 8010632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010636:	4798      	blx	r3
 8010638:	3501      	adds	r5, #1
 801063a:	e7f2      	b.n	8010622 <__libc_init_array+0x1e>
 801063c:	080354ec 	.word	0x080354ec
 8010640:	080354ec 	.word	0x080354ec
 8010644:	080354ec 	.word	0x080354ec
 8010648:	080354f0 	.word	0x080354f0

0801064c <memset>:
 801064c:	4402      	add	r2, r0
 801064e:	4603      	mov	r3, r0
 8010650:	4293      	cmp	r3, r2
 8010652:	d100      	bne.n	8010656 <memset+0xa>
 8010654:	4770      	bx	lr
 8010656:	f803 1b01 	strb.w	r1, [r3], #1
 801065a:	e7f9      	b.n	8010650 <memset+0x4>

0801065c <iprintf>:
 801065c:	b40f      	push	{r0, r1, r2, r3}
 801065e:	4b0a      	ldr	r3, [pc, #40]	; (8010688 <iprintf+0x2c>)
 8010660:	b513      	push	{r0, r1, r4, lr}
 8010662:	681c      	ldr	r4, [r3, #0]
 8010664:	b124      	cbz	r4, 8010670 <iprintf+0x14>
 8010666:	69a3      	ldr	r3, [r4, #24]
 8010668:	b913      	cbnz	r3, 8010670 <iprintf+0x14>
 801066a:	4620      	mov	r0, r4
 801066c:	f000 fa22 	bl	8010ab4 <__sinit>
 8010670:	ab05      	add	r3, sp, #20
 8010672:	9a04      	ldr	r2, [sp, #16]
 8010674:	68a1      	ldr	r1, [r4, #8]
 8010676:	9301      	str	r3, [sp, #4]
 8010678:	4620      	mov	r0, r4
 801067a:	f000 fbdb 	bl	8010e34 <_vfiprintf_r>
 801067e:	b002      	add	sp, #8
 8010680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010684:	b004      	add	sp, #16
 8010686:	4770      	bx	lr
 8010688:	20000030 	.word	0x20000030

0801068c <_puts_r>:
 801068c:	b570      	push	{r4, r5, r6, lr}
 801068e:	460e      	mov	r6, r1
 8010690:	4605      	mov	r5, r0
 8010692:	b118      	cbz	r0, 801069c <_puts_r+0x10>
 8010694:	6983      	ldr	r3, [r0, #24]
 8010696:	b90b      	cbnz	r3, 801069c <_puts_r+0x10>
 8010698:	f000 fa0c 	bl	8010ab4 <__sinit>
 801069c:	69ab      	ldr	r3, [r5, #24]
 801069e:	68ac      	ldr	r4, [r5, #8]
 80106a0:	b913      	cbnz	r3, 80106a8 <_puts_r+0x1c>
 80106a2:	4628      	mov	r0, r5
 80106a4:	f000 fa06 	bl	8010ab4 <__sinit>
 80106a8:	4b23      	ldr	r3, [pc, #140]	; (8010738 <_puts_r+0xac>)
 80106aa:	429c      	cmp	r4, r3
 80106ac:	d117      	bne.n	80106de <_puts_r+0x52>
 80106ae:	686c      	ldr	r4, [r5, #4]
 80106b0:	89a3      	ldrh	r3, [r4, #12]
 80106b2:	071b      	lsls	r3, r3, #28
 80106b4:	d51d      	bpl.n	80106f2 <_puts_r+0x66>
 80106b6:	6923      	ldr	r3, [r4, #16]
 80106b8:	b1db      	cbz	r3, 80106f2 <_puts_r+0x66>
 80106ba:	3e01      	subs	r6, #1
 80106bc:	68a3      	ldr	r3, [r4, #8]
 80106be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80106c2:	3b01      	subs	r3, #1
 80106c4:	60a3      	str	r3, [r4, #8]
 80106c6:	b9e9      	cbnz	r1, 8010704 <_puts_r+0x78>
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da2e      	bge.n	801072a <_puts_r+0x9e>
 80106cc:	4622      	mov	r2, r4
 80106ce:	210a      	movs	r1, #10
 80106d0:	4628      	mov	r0, r5
 80106d2:	f000 f83f 	bl	8010754 <__swbuf_r>
 80106d6:	3001      	adds	r0, #1
 80106d8:	d011      	beq.n	80106fe <_puts_r+0x72>
 80106da:	200a      	movs	r0, #10
 80106dc:	e011      	b.n	8010702 <_puts_r+0x76>
 80106de:	4b17      	ldr	r3, [pc, #92]	; (801073c <_puts_r+0xb0>)
 80106e0:	429c      	cmp	r4, r3
 80106e2:	d101      	bne.n	80106e8 <_puts_r+0x5c>
 80106e4:	68ac      	ldr	r4, [r5, #8]
 80106e6:	e7e3      	b.n	80106b0 <_puts_r+0x24>
 80106e8:	4b15      	ldr	r3, [pc, #84]	; (8010740 <_puts_r+0xb4>)
 80106ea:	429c      	cmp	r4, r3
 80106ec:	bf08      	it	eq
 80106ee:	68ec      	ldreq	r4, [r5, #12]
 80106f0:	e7de      	b.n	80106b0 <_puts_r+0x24>
 80106f2:	4621      	mov	r1, r4
 80106f4:	4628      	mov	r0, r5
 80106f6:	f000 f87f 	bl	80107f8 <__swsetup_r>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d0dd      	beq.n	80106ba <_puts_r+0x2e>
 80106fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	2b00      	cmp	r3, #0
 8010706:	da04      	bge.n	8010712 <_puts_r+0x86>
 8010708:	69a2      	ldr	r2, [r4, #24]
 801070a:	429a      	cmp	r2, r3
 801070c:	dc06      	bgt.n	801071c <_puts_r+0x90>
 801070e:	290a      	cmp	r1, #10
 8010710:	d004      	beq.n	801071c <_puts_r+0x90>
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	1c5a      	adds	r2, r3, #1
 8010716:	6022      	str	r2, [r4, #0]
 8010718:	7019      	strb	r1, [r3, #0]
 801071a:	e7cf      	b.n	80106bc <_puts_r+0x30>
 801071c:	4622      	mov	r2, r4
 801071e:	4628      	mov	r0, r5
 8010720:	f000 f818 	bl	8010754 <__swbuf_r>
 8010724:	3001      	adds	r0, #1
 8010726:	d1c9      	bne.n	80106bc <_puts_r+0x30>
 8010728:	e7e9      	b.n	80106fe <_puts_r+0x72>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	200a      	movs	r0, #10
 801072e:	1c5a      	adds	r2, r3, #1
 8010730:	6022      	str	r2, [r4, #0]
 8010732:	7018      	strb	r0, [r3, #0]
 8010734:	e7e5      	b.n	8010702 <_puts_r+0x76>
 8010736:	bf00      	nop
 8010738:	08035460 	.word	0x08035460
 801073c:	08035480 	.word	0x08035480
 8010740:	08035440 	.word	0x08035440

08010744 <puts>:
 8010744:	4b02      	ldr	r3, [pc, #8]	; (8010750 <puts+0xc>)
 8010746:	4601      	mov	r1, r0
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	f7ff bf9f 	b.w	801068c <_puts_r>
 801074e:	bf00      	nop
 8010750:	20000030 	.word	0x20000030

08010754 <__swbuf_r>:
 8010754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010756:	460e      	mov	r6, r1
 8010758:	4614      	mov	r4, r2
 801075a:	4605      	mov	r5, r0
 801075c:	b118      	cbz	r0, 8010766 <__swbuf_r+0x12>
 801075e:	6983      	ldr	r3, [r0, #24]
 8010760:	b90b      	cbnz	r3, 8010766 <__swbuf_r+0x12>
 8010762:	f000 f9a7 	bl	8010ab4 <__sinit>
 8010766:	4b21      	ldr	r3, [pc, #132]	; (80107ec <__swbuf_r+0x98>)
 8010768:	429c      	cmp	r4, r3
 801076a:	d12a      	bne.n	80107c2 <__swbuf_r+0x6e>
 801076c:	686c      	ldr	r4, [r5, #4]
 801076e:	69a3      	ldr	r3, [r4, #24]
 8010770:	60a3      	str	r3, [r4, #8]
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	071a      	lsls	r2, r3, #28
 8010776:	d52e      	bpl.n	80107d6 <__swbuf_r+0x82>
 8010778:	6923      	ldr	r3, [r4, #16]
 801077a:	b363      	cbz	r3, 80107d6 <__swbuf_r+0x82>
 801077c:	6923      	ldr	r3, [r4, #16]
 801077e:	6820      	ldr	r0, [r4, #0]
 8010780:	1ac0      	subs	r0, r0, r3
 8010782:	6963      	ldr	r3, [r4, #20]
 8010784:	b2f6      	uxtb	r6, r6
 8010786:	4283      	cmp	r3, r0
 8010788:	4637      	mov	r7, r6
 801078a:	dc04      	bgt.n	8010796 <__swbuf_r+0x42>
 801078c:	4621      	mov	r1, r4
 801078e:	4628      	mov	r0, r5
 8010790:	f000 f926 	bl	80109e0 <_fflush_r>
 8010794:	bb28      	cbnz	r0, 80107e2 <__swbuf_r+0x8e>
 8010796:	68a3      	ldr	r3, [r4, #8]
 8010798:	3b01      	subs	r3, #1
 801079a:	60a3      	str	r3, [r4, #8]
 801079c:	6823      	ldr	r3, [r4, #0]
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	6022      	str	r2, [r4, #0]
 80107a2:	701e      	strb	r6, [r3, #0]
 80107a4:	6963      	ldr	r3, [r4, #20]
 80107a6:	3001      	adds	r0, #1
 80107a8:	4283      	cmp	r3, r0
 80107aa:	d004      	beq.n	80107b6 <__swbuf_r+0x62>
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	07db      	lsls	r3, r3, #31
 80107b0:	d519      	bpl.n	80107e6 <__swbuf_r+0x92>
 80107b2:	2e0a      	cmp	r6, #10
 80107b4:	d117      	bne.n	80107e6 <__swbuf_r+0x92>
 80107b6:	4621      	mov	r1, r4
 80107b8:	4628      	mov	r0, r5
 80107ba:	f000 f911 	bl	80109e0 <_fflush_r>
 80107be:	b190      	cbz	r0, 80107e6 <__swbuf_r+0x92>
 80107c0:	e00f      	b.n	80107e2 <__swbuf_r+0x8e>
 80107c2:	4b0b      	ldr	r3, [pc, #44]	; (80107f0 <__swbuf_r+0x9c>)
 80107c4:	429c      	cmp	r4, r3
 80107c6:	d101      	bne.n	80107cc <__swbuf_r+0x78>
 80107c8:	68ac      	ldr	r4, [r5, #8]
 80107ca:	e7d0      	b.n	801076e <__swbuf_r+0x1a>
 80107cc:	4b09      	ldr	r3, [pc, #36]	; (80107f4 <__swbuf_r+0xa0>)
 80107ce:	429c      	cmp	r4, r3
 80107d0:	bf08      	it	eq
 80107d2:	68ec      	ldreq	r4, [r5, #12]
 80107d4:	e7cb      	b.n	801076e <__swbuf_r+0x1a>
 80107d6:	4621      	mov	r1, r4
 80107d8:	4628      	mov	r0, r5
 80107da:	f000 f80d 	bl	80107f8 <__swsetup_r>
 80107de:	2800      	cmp	r0, #0
 80107e0:	d0cc      	beq.n	801077c <__swbuf_r+0x28>
 80107e2:	f04f 37ff 	mov.w	r7, #4294967295
 80107e6:	4638      	mov	r0, r7
 80107e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ea:	bf00      	nop
 80107ec:	08035460 	.word	0x08035460
 80107f0:	08035480 	.word	0x08035480
 80107f4:	08035440 	.word	0x08035440

080107f8 <__swsetup_r>:
 80107f8:	4b32      	ldr	r3, [pc, #200]	; (80108c4 <__swsetup_r+0xcc>)
 80107fa:	b570      	push	{r4, r5, r6, lr}
 80107fc:	681d      	ldr	r5, [r3, #0]
 80107fe:	4606      	mov	r6, r0
 8010800:	460c      	mov	r4, r1
 8010802:	b125      	cbz	r5, 801080e <__swsetup_r+0x16>
 8010804:	69ab      	ldr	r3, [r5, #24]
 8010806:	b913      	cbnz	r3, 801080e <__swsetup_r+0x16>
 8010808:	4628      	mov	r0, r5
 801080a:	f000 f953 	bl	8010ab4 <__sinit>
 801080e:	4b2e      	ldr	r3, [pc, #184]	; (80108c8 <__swsetup_r+0xd0>)
 8010810:	429c      	cmp	r4, r3
 8010812:	d10f      	bne.n	8010834 <__swsetup_r+0x3c>
 8010814:	686c      	ldr	r4, [r5, #4]
 8010816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801081a:	b29a      	uxth	r2, r3
 801081c:	0715      	lsls	r5, r2, #28
 801081e:	d42c      	bmi.n	801087a <__swsetup_r+0x82>
 8010820:	06d0      	lsls	r0, r2, #27
 8010822:	d411      	bmi.n	8010848 <__swsetup_r+0x50>
 8010824:	2209      	movs	r2, #9
 8010826:	6032      	str	r2, [r6, #0]
 8010828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801082c:	81a3      	strh	r3, [r4, #12]
 801082e:	f04f 30ff 	mov.w	r0, #4294967295
 8010832:	e03e      	b.n	80108b2 <__swsetup_r+0xba>
 8010834:	4b25      	ldr	r3, [pc, #148]	; (80108cc <__swsetup_r+0xd4>)
 8010836:	429c      	cmp	r4, r3
 8010838:	d101      	bne.n	801083e <__swsetup_r+0x46>
 801083a:	68ac      	ldr	r4, [r5, #8]
 801083c:	e7eb      	b.n	8010816 <__swsetup_r+0x1e>
 801083e:	4b24      	ldr	r3, [pc, #144]	; (80108d0 <__swsetup_r+0xd8>)
 8010840:	429c      	cmp	r4, r3
 8010842:	bf08      	it	eq
 8010844:	68ec      	ldreq	r4, [r5, #12]
 8010846:	e7e6      	b.n	8010816 <__swsetup_r+0x1e>
 8010848:	0751      	lsls	r1, r2, #29
 801084a:	d512      	bpl.n	8010872 <__swsetup_r+0x7a>
 801084c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801084e:	b141      	cbz	r1, 8010862 <__swsetup_r+0x6a>
 8010850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010854:	4299      	cmp	r1, r3
 8010856:	d002      	beq.n	801085e <__swsetup_r+0x66>
 8010858:	4630      	mov	r0, r6
 801085a:	f000 fa19 	bl	8010c90 <_free_r>
 801085e:	2300      	movs	r3, #0
 8010860:	6363      	str	r3, [r4, #52]	; 0x34
 8010862:	89a3      	ldrh	r3, [r4, #12]
 8010864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010868:	81a3      	strh	r3, [r4, #12]
 801086a:	2300      	movs	r3, #0
 801086c:	6063      	str	r3, [r4, #4]
 801086e:	6923      	ldr	r3, [r4, #16]
 8010870:	6023      	str	r3, [r4, #0]
 8010872:	89a3      	ldrh	r3, [r4, #12]
 8010874:	f043 0308 	orr.w	r3, r3, #8
 8010878:	81a3      	strh	r3, [r4, #12]
 801087a:	6923      	ldr	r3, [r4, #16]
 801087c:	b94b      	cbnz	r3, 8010892 <__swsetup_r+0x9a>
 801087e:	89a3      	ldrh	r3, [r4, #12]
 8010880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010888:	d003      	beq.n	8010892 <__swsetup_r+0x9a>
 801088a:	4621      	mov	r1, r4
 801088c:	4630      	mov	r0, r6
 801088e:	f000 f9bf 	bl	8010c10 <__smakebuf_r>
 8010892:	89a2      	ldrh	r2, [r4, #12]
 8010894:	f012 0301 	ands.w	r3, r2, #1
 8010898:	d00c      	beq.n	80108b4 <__swsetup_r+0xbc>
 801089a:	2300      	movs	r3, #0
 801089c:	60a3      	str	r3, [r4, #8]
 801089e:	6963      	ldr	r3, [r4, #20]
 80108a0:	425b      	negs	r3, r3
 80108a2:	61a3      	str	r3, [r4, #24]
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	b953      	cbnz	r3, 80108be <__swsetup_r+0xc6>
 80108a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80108b0:	d1ba      	bne.n	8010828 <__swsetup_r+0x30>
 80108b2:	bd70      	pop	{r4, r5, r6, pc}
 80108b4:	0792      	lsls	r2, r2, #30
 80108b6:	bf58      	it	pl
 80108b8:	6963      	ldrpl	r3, [r4, #20]
 80108ba:	60a3      	str	r3, [r4, #8]
 80108bc:	e7f2      	b.n	80108a4 <__swsetup_r+0xac>
 80108be:	2000      	movs	r0, #0
 80108c0:	e7f7      	b.n	80108b2 <__swsetup_r+0xba>
 80108c2:	bf00      	nop
 80108c4:	20000030 	.word	0x20000030
 80108c8:	08035460 	.word	0x08035460
 80108cc:	08035480 	.word	0x08035480
 80108d0:	08035440 	.word	0x08035440

080108d4 <__sflush_r>:
 80108d4:	898a      	ldrh	r2, [r1, #12]
 80108d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108da:	4605      	mov	r5, r0
 80108dc:	0710      	lsls	r0, r2, #28
 80108de:	460c      	mov	r4, r1
 80108e0:	d458      	bmi.n	8010994 <__sflush_r+0xc0>
 80108e2:	684b      	ldr	r3, [r1, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	dc05      	bgt.n	80108f4 <__sflush_r+0x20>
 80108e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	dc02      	bgt.n	80108f4 <__sflush_r+0x20>
 80108ee:	2000      	movs	r0, #0
 80108f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f6:	2e00      	cmp	r6, #0
 80108f8:	d0f9      	beq.n	80108ee <__sflush_r+0x1a>
 80108fa:	2300      	movs	r3, #0
 80108fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010900:	682f      	ldr	r7, [r5, #0]
 8010902:	6a21      	ldr	r1, [r4, #32]
 8010904:	602b      	str	r3, [r5, #0]
 8010906:	d032      	beq.n	801096e <__sflush_r+0x9a>
 8010908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801090a:	89a3      	ldrh	r3, [r4, #12]
 801090c:	075a      	lsls	r2, r3, #29
 801090e:	d505      	bpl.n	801091c <__sflush_r+0x48>
 8010910:	6863      	ldr	r3, [r4, #4]
 8010912:	1ac0      	subs	r0, r0, r3
 8010914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010916:	b10b      	cbz	r3, 801091c <__sflush_r+0x48>
 8010918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801091a:	1ac0      	subs	r0, r0, r3
 801091c:	2300      	movs	r3, #0
 801091e:	4602      	mov	r2, r0
 8010920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010922:	6a21      	ldr	r1, [r4, #32]
 8010924:	4628      	mov	r0, r5
 8010926:	47b0      	blx	r6
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	89a3      	ldrh	r3, [r4, #12]
 801092c:	d106      	bne.n	801093c <__sflush_r+0x68>
 801092e:	6829      	ldr	r1, [r5, #0]
 8010930:	291d      	cmp	r1, #29
 8010932:	d848      	bhi.n	80109c6 <__sflush_r+0xf2>
 8010934:	4a29      	ldr	r2, [pc, #164]	; (80109dc <__sflush_r+0x108>)
 8010936:	40ca      	lsrs	r2, r1
 8010938:	07d6      	lsls	r6, r2, #31
 801093a:	d544      	bpl.n	80109c6 <__sflush_r+0xf2>
 801093c:	2200      	movs	r2, #0
 801093e:	6062      	str	r2, [r4, #4]
 8010940:	04d9      	lsls	r1, r3, #19
 8010942:	6922      	ldr	r2, [r4, #16]
 8010944:	6022      	str	r2, [r4, #0]
 8010946:	d504      	bpl.n	8010952 <__sflush_r+0x7e>
 8010948:	1c42      	adds	r2, r0, #1
 801094a:	d101      	bne.n	8010950 <__sflush_r+0x7c>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	b903      	cbnz	r3, 8010952 <__sflush_r+0x7e>
 8010950:	6560      	str	r0, [r4, #84]	; 0x54
 8010952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010954:	602f      	str	r7, [r5, #0]
 8010956:	2900      	cmp	r1, #0
 8010958:	d0c9      	beq.n	80108ee <__sflush_r+0x1a>
 801095a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801095e:	4299      	cmp	r1, r3
 8010960:	d002      	beq.n	8010968 <__sflush_r+0x94>
 8010962:	4628      	mov	r0, r5
 8010964:	f000 f994 	bl	8010c90 <_free_r>
 8010968:	2000      	movs	r0, #0
 801096a:	6360      	str	r0, [r4, #52]	; 0x34
 801096c:	e7c0      	b.n	80108f0 <__sflush_r+0x1c>
 801096e:	2301      	movs	r3, #1
 8010970:	4628      	mov	r0, r5
 8010972:	47b0      	blx	r6
 8010974:	1c41      	adds	r1, r0, #1
 8010976:	d1c8      	bne.n	801090a <__sflush_r+0x36>
 8010978:	682b      	ldr	r3, [r5, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d0c5      	beq.n	801090a <__sflush_r+0x36>
 801097e:	2b1d      	cmp	r3, #29
 8010980:	d001      	beq.n	8010986 <__sflush_r+0xb2>
 8010982:	2b16      	cmp	r3, #22
 8010984:	d101      	bne.n	801098a <__sflush_r+0xb6>
 8010986:	602f      	str	r7, [r5, #0]
 8010988:	e7b1      	b.n	80108ee <__sflush_r+0x1a>
 801098a:	89a3      	ldrh	r3, [r4, #12]
 801098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010990:	81a3      	strh	r3, [r4, #12]
 8010992:	e7ad      	b.n	80108f0 <__sflush_r+0x1c>
 8010994:	690f      	ldr	r7, [r1, #16]
 8010996:	2f00      	cmp	r7, #0
 8010998:	d0a9      	beq.n	80108ee <__sflush_r+0x1a>
 801099a:	0793      	lsls	r3, r2, #30
 801099c:	680e      	ldr	r6, [r1, #0]
 801099e:	bf08      	it	eq
 80109a0:	694b      	ldreq	r3, [r1, #20]
 80109a2:	600f      	str	r7, [r1, #0]
 80109a4:	bf18      	it	ne
 80109a6:	2300      	movne	r3, #0
 80109a8:	eba6 0807 	sub.w	r8, r6, r7
 80109ac:	608b      	str	r3, [r1, #8]
 80109ae:	f1b8 0f00 	cmp.w	r8, #0
 80109b2:	dd9c      	ble.n	80108ee <__sflush_r+0x1a>
 80109b4:	4643      	mov	r3, r8
 80109b6:	463a      	mov	r2, r7
 80109b8:	6a21      	ldr	r1, [r4, #32]
 80109ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109bc:	4628      	mov	r0, r5
 80109be:	47b0      	blx	r6
 80109c0:	2800      	cmp	r0, #0
 80109c2:	dc06      	bgt.n	80109d2 <__sflush_r+0xfe>
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ca:	81a3      	strh	r3, [r4, #12]
 80109cc:	f04f 30ff 	mov.w	r0, #4294967295
 80109d0:	e78e      	b.n	80108f0 <__sflush_r+0x1c>
 80109d2:	4407      	add	r7, r0
 80109d4:	eba8 0800 	sub.w	r8, r8, r0
 80109d8:	e7e9      	b.n	80109ae <__sflush_r+0xda>
 80109da:	bf00      	nop
 80109dc:	20400001 	.word	0x20400001

080109e0 <_fflush_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	690b      	ldr	r3, [r1, #16]
 80109e4:	4605      	mov	r5, r0
 80109e6:	460c      	mov	r4, r1
 80109e8:	b1db      	cbz	r3, 8010a22 <_fflush_r+0x42>
 80109ea:	b118      	cbz	r0, 80109f4 <_fflush_r+0x14>
 80109ec:	6983      	ldr	r3, [r0, #24]
 80109ee:	b90b      	cbnz	r3, 80109f4 <_fflush_r+0x14>
 80109f0:	f000 f860 	bl	8010ab4 <__sinit>
 80109f4:	4b0c      	ldr	r3, [pc, #48]	; (8010a28 <_fflush_r+0x48>)
 80109f6:	429c      	cmp	r4, r3
 80109f8:	d109      	bne.n	8010a0e <_fflush_r+0x2e>
 80109fa:	686c      	ldr	r4, [r5, #4]
 80109fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a00:	b17b      	cbz	r3, 8010a22 <_fflush_r+0x42>
 8010a02:	4621      	mov	r1, r4
 8010a04:	4628      	mov	r0, r5
 8010a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a0a:	f7ff bf63 	b.w	80108d4 <__sflush_r>
 8010a0e:	4b07      	ldr	r3, [pc, #28]	; (8010a2c <_fflush_r+0x4c>)
 8010a10:	429c      	cmp	r4, r3
 8010a12:	d101      	bne.n	8010a18 <_fflush_r+0x38>
 8010a14:	68ac      	ldr	r4, [r5, #8]
 8010a16:	e7f1      	b.n	80109fc <_fflush_r+0x1c>
 8010a18:	4b05      	ldr	r3, [pc, #20]	; (8010a30 <_fflush_r+0x50>)
 8010a1a:	429c      	cmp	r4, r3
 8010a1c:	bf08      	it	eq
 8010a1e:	68ec      	ldreq	r4, [r5, #12]
 8010a20:	e7ec      	b.n	80109fc <_fflush_r+0x1c>
 8010a22:	2000      	movs	r0, #0
 8010a24:	bd38      	pop	{r3, r4, r5, pc}
 8010a26:	bf00      	nop
 8010a28:	08035460 	.word	0x08035460
 8010a2c:	08035480 	.word	0x08035480
 8010a30:	08035440 	.word	0x08035440

08010a34 <std>:
 8010a34:	2300      	movs	r3, #0
 8010a36:	b510      	push	{r4, lr}
 8010a38:	4604      	mov	r4, r0
 8010a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8010a3e:	6083      	str	r3, [r0, #8]
 8010a40:	8181      	strh	r1, [r0, #12]
 8010a42:	6643      	str	r3, [r0, #100]	; 0x64
 8010a44:	81c2      	strh	r2, [r0, #14]
 8010a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a4a:	6183      	str	r3, [r0, #24]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	2208      	movs	r2, #8
 8010a50:	305c      	adds	r0, #92	; 0x5c
 8010a52:	f7ff fdfb 	bl	801064c <memset>
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <std+0x38>)
 8010a58:	6263      	str	r3, [r4, #36]	; 0x24
 8010a5a:	4b05      	ldr	r3, [pc, #20]	; (8010a70 <std+0x3c>)
 8010a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a5e:	4b05      	ldr	r3, [pc, #20]	; (8010a74 <std+0x40>)
 8010a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a62:	4b05      	ldr	r3, [pc, #20]	; (8010a78 <std+0x44>)
 8010a64:	6224      	str	r4, [r4, #32]
 8010a66:	6323      	str	r3, [r4, #48]	; 0x30
 8010a68:	bd10      	pop	{r4, pc}
 8010a6a:	bf00      	nop
 8010a6c:	08011391 	.word	0x08011391
 8010a70:	080113b3 	.word	0x080113b3
 8010a74:	080113eb 	.word	0x080113eb
 8010a78:	0801140f 	.word	0x0801140f

08010a7c <_cleanup_r>:
 8010a7c:	4901      	ldr	r1, [pc, #4]	; (8010a84 <_cleanup_r+0x8>)
 8010a7e:	f000 b885 	b.w	8010b8c <_fwalk_reent>
 8010a82:	bf00      	nop
 8010a84:	080109e1 	.word	0x080109e1

08010a88 <__sfmoreglue>:
 8010a88:	b570      	push	{r4, r5, r6, lr}
 8010a8a:	1e4a      	subs	r2, r1, #1
 8010a8c:	2568      	movs	r5, #104	; 0x68
 8010a8e:	4355      	muls	r5, r2
 8010a90:	460e      	mov	r6, r1
 8010a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a96:	f000 f949 	bl	8010d2c <_malloc_r>
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	b140      	cbz	r0, 8010ab0 <__sfmoreglue+0x28>
 8010a9e:	2100      	movs	r1, #0
 8010aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8010aa4:	300c      	adds	r0, #12
 8010aa6:	60a0      	str	r0, [r4, #8]
 8010aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010aac:	f7ff fdce 	bl	801064c <memset>
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	bd70      	pop	{r4, r5, r6, pc}

08010ab4 <__sinit>:
 8010ab4:	6983      	ldr	r3, [r0, #24]
 8010ab6:	b510      	push	{r4, lr}
 8010ab8:	4604      	mov	r4, r0
 8010aba:	bb33      	cbnz	r3, 8010b0a <__sinit+0x56>
 8010abc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010ac0:	6503      	str	r3, [r0, #80]	; 0x50
 8010ac2:	4b12      	ldr	r3, [pc, #72]	; (8010b0c <__sinit+0x58>)
 8010ac4:	4a12      	ldr	r2, [pc, #72]	; (8010b10 <__sinit+0x5c>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	6282      	str	r2, [r0, #40]	; 0x28
 8010aca:	4298      	cmp	r0, r3
 8010acc:	bf04      	itt	eq
 8010ace:	2301      	moveq	r3, #1
 8010ad0:	6183      	streq	r3, [r0, #24]
 8010ad2:	f000 f81f 	bl	8010b14 <__sfp>
 8010ad6:	6060      	str	r0, [r4, #4]
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 f81b 	bl	8010b14 <__sfp>
 8010ade:	60a0      	str	r0, [r4, #8]
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f000 f817 	bl	8010b14 <__sfp>
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	60e0      	str	r0, [r4, #12]
 8010aea:	2104      	movs	r1, #4
 8010aec:	6860      	ldr	r0, [r4, #4]
 8010aee:	f7ff ffa1 	bl	8010a34 <std>
 8010af2:	2201      	movs	r2, #1
 8010af4:	2109      	movs	r1, #9
 8010af6:	68a0      	ldr	r0, [r4, #8]
 8010af8:	f7ff ff9c 	bl	8010a34 <std>
 8010afc:	2202      	movs	r2, #2
 8010afe:	2112      	movs	r1, #18
 8010b00:	68e0      	ldr	r0, [r4, #12]
 8010b02:	f7ff ff97 	bl	8010a34 <std>
 8010b06:	2301      	movs	r3, #1
 8010b08:	61a3      	str	r3, [r4, #24]
 8010b0a:	bd10      	pop	{r4, pc}
 8010b0c:	0803543c 	.word	0x0803543c
 8010b10:	08010a7d 	.word	0x08010a7d

08010b14 <__sfp>:
 8010b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b16:	4b1b      	ldr	r3, [pc, #108]	; (8010b84 <__sfp+0x70>)
 8010b18:	681e      	ldr	r6, [r3, #0]
 8010b1a:	69b3      	ldr	r3, [r6, #24]
 8010b1c:	4607      	mov	r7, r0
 8010b1e:	b913      	cbnz	r3, 8010b26 <__sfp+0x12>
 8010b20:	4630      	mov	r0, r6
 8010b22:	f7ff ffc7 	bl	8010ab4 <__sinit>
 8010b26:	3648      	adds	r6, #72	; 0x48
 8010b28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	d503      	bpl.n	8010b38 <__sfp+0x24>
 8010b30:	6833      	ldr	r3, [r6, #0]
 8010b32:	b133      	cbz	r3, 8010b42 <__sfp+0x2e>
 8010b34:	6836      	ldr	r6, [r6, #0]
 8010b36:	e7f7      	b.n	8010b28 <__sfp+0x14>
 8010b38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b3c:	b16d      	cbz	r5, 8010b5a <__sfp+0x46>
 8010b3e:	3468      	adds	r4, #104	; 0x68
 8010b40:	e7f4      	b.n	8010b2c <__sfp+0x18>
 8010b42:	2104      	movs	r1, #4
 8010b44:	4638      	mov	r0, r7
 8010b46:	f7ff ff9f 	bl	8010a88 <__sfmoreglue>
 8010b4a:	6030      	str	r0, [r6, #0]
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d1f1      	bne.n	8010b34 <__sfp+0x20>
 8010b50:	230c      	movs	r3, #12
 8010b52:	603b      	str	r3, [r7, #0]
 8010b54:	4604      	mov	r4, r0
 8010b56:	4620      	mov	r0, r4
 8010b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b5a:	4b0b      	ldr	r3, [pc, #44]	; (8010b88 <__sfp+0x74>)
 8010b5c:	6665      	str	r5, [r4, #100]	; 0x64
 8010b5e:	e9c4 5500 	strd	r5, r5, [r4]
 8010b62:	60a5      	str	r5, [r4, #8]
 8010b64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010b68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010b6c:	2208      	movs	r2, #8
 8010b6e:	4629      	mov	r1, r5
 8010b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b74:	f7ff fd6a 	bl	801064c <memset>
 8010b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b80:	e7e9      	b.n	8010b56 <__sfp+0x42>
 8010b82:	bf00      	nop
 8010b84:	0803543c 	.word	0x0803543c
 8010b88:	ffff0001 	.word	0xffff0001

08010b8c <_fwalk_reent>:
 8010b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b90:	4680      	mov	r8, r0
 8010b92:	4689      	mov	r9, r1
 8010b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b98:	2600      	movs	r6, #0
 8010b9a:	b914      	cbnz	r4, 8010ba2 <_fwalk_reent+0x16>
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ba2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010ba6:	3f01      	subs	r7, #1
 8010ba8:	d501      	bpl.n	8010bae <_fwalk_reent+0x22>
 8010baa:	6824      	ldr	r4, [r4, #0]
 8010bac:	e7f5      	b.n	8010b9a <_fwalk_reent+0xe>
 8010bae:	89ab      	ldrh	r3, [r5, #12]
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d907      	bls.n	8010bc4 <_fwalk_reent+0x38>
 8010bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	d003      	beq.n	8010bc4 <_fwalk_reent+0x38>
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	4640      	mov	r0, r8
 8010bc0:	47c8      	blx	r9
 8010bc2:	4306      	orrs	r6, r0
 8010bc4:	3568      	adds	r5, #104	; 0x68
 8010bc6:	e7ee      	b.n	8010ba6 <_fwalk_reent+0x1a>

08010bc8 <__swhatbuf_r>:
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	460e      	mov	r6, r1
 8010bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bd0:	2900      	cmp	r1, #0
 8010bd2:	b096      	sub	sp, #88	; 0x58
 8010bd4:	4614      	mov	r4, r2
 8010bd6:	461d      	mov	r5, r3
 8010bd8:	da07      	bge.n	8010bea <__swhatbuf_r+0x22>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	602b      	str	r3, [r5, #0]
 8010bde:	89b3      	ldrh	r3, [r6, #12]
 8010be0:	061a      	lsls	r2, r3, #24
 8010be2:	d410      	bmi.n	8010c06 <__swhatbuf_r+0x3e>
 8010be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010be8:	e00e      	b.n	8010c08 <__swhatbuf_r+0x40>
 8010bea:	466a      	mov	r2, sp
 8010bec:	f000 fc36 	bl	801145c <_fstat_r>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	dbf2      	blt.n	8010bda <__swhatbuf_r+0x12>
 8010bf4:	9a01      	ldr	r2, [sp, #4]
 8010bf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010bfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010bfe:	425a      	negs	r2, r3
 8010c00:	415a      	adcs	r2, r3
 8010c02:	602a      	str	r2, [r5, #0]
 8010c04:	e7ee      	b.n	8010be4 <__swhatbuf_r+0x1c>
 8010c06:	2340      	movs	r3, #64	; 0x40
 8010c08:	2000      	movs	r0, #0
 8010c0a:	6023      	str	r3, [r4, #0]
 8010c0c:	b016      	add	sp, #88	; 0x58
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}

08010c10 <__smakebuf_r>:
 8010c10:	898b      	ldrh	r3, [r1, #12]
 8010c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c14:	079d      	lsls	r5, r3, #30
 8010c16:	4606      	mov	r6, r0
 8010c18:	460c      	mov	r4, r1
 8010c1a:	d507      	bpl.n	8010c2c <__smakebuf_r+0x1c>
 8010c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	6123      	str	r3, [r4, #16]
 8010c24:	2301      	movs	r3, #1
 8010c26:	6163      	str	r3, [r4, #20]
 8010c28:	b002      	add	sp, #8
 8010c2a:	bd70      	pop	{r4, r5, r6, pc}
 8010c2c:	ab01      	add	r3, sp, #4
 8010c2e:	466a      	mov	r2, sp
 8010c30:	f7ff ffca 	bl	8010bc8 <__swhatbuf_r>
 8010c34:	9900      	ldr	r1, [sp, #0]
 8010c36:	4605      	mov	r5, r0
 8010c38:	4630      	mov	r0, r6
 8010c3a:	f000 f877 	bl	8010d2c <_malloc_r>
 8010c3e:	b948      	cbnz	r0, 8010c54 <__smakebuf_r+0x44>
 8010c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c44:	059a      	lsls	r2, r3, #22
 8010c46:	d4ef      	bmi.n	8010c28 <__smakebuf_r+0x18>
 8010c48:	f023 0303 	bic.w	r3, r3, #3
 8010c4c:	f043 0302 	orr.w	r3, r3, #2
 8010c50:	81a3      	strh	r3, [r4, #12]
 8010c52:	e7e3      	b.n	8010c1c <__smakebuf_r+0xc>
 8010c54:	4b0d      	ldr	r3, [pc, #52]	; (8010c8c <__smakebuf_r+0x7c>)
 8010c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c58:	89a3      	ldrh	r3, [r4, #12]
 8010c5a:	6020      	str	r0, [r4, #0]
 8010c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c60:	81a3      	strh	r3, [r4, #12]
 8010c62:	9b00      	ldr	r3, [sp, #0]
 8010c64:	6163      	str	r3, [r4, #20]
 8010c66:	9b01      	ldr	r3, [sp, #4]
 8010c68:	6120      	str	r0, [r4, #16]
 8010c6a:	b15b      	cbz	r3, 8010c84 <__smakebuf_r+0x74>
 8010c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c70:	4630      	mov	r0, r6
 8010c72:	f000 fc05 	bl	8011480 <_isatty_r>
 8010c76:	b128      	cbz	r0, 8010c84 <__smakebuf_r+0x74>
 8010c78:	89a3      	ldrh	r3, [r4, #12]
 8010c7a:	f023 0303 	bic.w	r3, r3, #3
 8010c7e:	f043 0301 	orr.w	r3, r3, #1
 8010c82:	81a3      	strh	r3, [r4, #12]
 8010c84:	89a3      	ldrh	r3, [r4, #12]
 8010c86:	431d      	orrs	r5, r3
 8010c88:	81a5      	strh	r5, [r4, #12]
 8010c8a:	e7cd      	b.n	8010c28 <__smakebuf_r+0x18>
 8010c8c:	08010a7d 	.word	0x08010a7d

08010c90 <_free_r>:
 8010c90:	b538      	push	{r3, r4, r5, lr}
 8010c92:	4605      	mov	r5, r0
 8010c94:	2900      	cmp	r1, #0
 8010c96:	d045      	beq.n	8010d24 <_free_r+0x94>
 8010c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c9c:	1f0c      	subs	r4, r1, #4
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	bfb8      	it	lt
 8010ca2:	18e4      	addlt	r4, r4, r3
 8010ca4:	f000 fc0e 	bl	80114c4 <__malloc_lock>
 8010ca8:	4a1f      	ldr	r2, [pc, #124]	; (8010d28 <_free_r+0x98>)
 8010caa:	6813      	ldr	r3, [r2, #0]
 8010cac:	4610      	mov	r0, r2
 8010cae:	b933      	cbnz	r3, 8010cbe <_free_r+0x2e>
 8010cb0:	6063      	str	r3, [r4, #4]
 8010cb2:	6014      	str	r4, [r2, #0]
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cba:	f000 bc04 	b.w	80114c6 <__malloc_unlock>
 8010cbe:	42a3      	cmp	r3, r4
 8010cc0:	d90c      	bls.n	8010cdc <_free_r+0x4c>
 8010cc2:	6821      	ldr	r1, [r4, #0]
 8010cc4:	1862      	adds	r2, r4, r1
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	bf04      	itt	eq
 8010cca:	681a      	ldreq	r2, [r3, #0]
 8010ccc:	685b      	ldreq	r3, [r3, #4]
 8010cce:	6063      	str	r3, [r4, #4]
 8010cd0:	bf04      	itt	eq
 8010cd2:	1852      	addeq	r2, r2, r1
 8010cd4:	6022      	streq	r2, [r4, #0]
 8010cd6:	6004      	str	r4, [r0, #0]
 8010cd8:	e7ec      	b.n	8010cb4 <_free_r+0x24>
 8010cda:	4613      	mov	r3, r2
 8010cdc:	685a      	ldr	r2, [r3, #4]
 8010cde:	b10a      	cbz	r2, 8010ce4 <_free_r+0x54>
 8010ce0:	42a2      	cmp	r2, r4
 8010ce2:	d9fa      	bls.n	8010cda <_free_r+0x4a>
 8010ce4:	6819      	ldr	r1, [r3, #0]
 8010ce6:	1858      	adds	r0, r3, r1
 8010ce8:	42a0      	cmp	r0, r4
 8010cea:	d10b      	bne.n	8010d04 <_free_r+0x74>
 8010cec:	6820      	ldr	r0, [r4, #0]
 8010cee:	4401      	add	r1, r0
 8010cf0:	1858      	adds	r0, r3, r1
 8010cf2:	4282      	cmp	r2, r0
 8010cf4:	6019      	str	r1, [r3, #0]
 8010cf6:	d1dd      	bne.n	8010cb4 <_free_r+0x24>
 8010cf8:	6810      	ldr	r0, [r2, #0]
 8010cfa:	6852      	ldr	r2, [r2, #4]
 8010cfc:	605a      	str	r2, [r3, #4]
 8010cfe:	4401      	add	r1, r0
 8010d00:	6019      	str	r1, [r3, #0]
 8010d02:	e7d7      	b.n	8010cb4 <_free_r+0x24>
 8010d04:	d902      	bls.n	8010d0c <_free_r+0x7c>
 8010d06:	230c      	movs	r3, #12
 8010d08:	602b      	str	r3, [r5, #0]
 8010d0a:	e7d3      	b.n	8010cb4 <_free_r+0x24>
 8010d0c:	6820      	ldr	r0, [r4, #0]
 8010d0e:	1821      	adds	r1, r4, r0
 8010d10:	428a      	cmp	r2, r1
 8010d12:	bf04      	itt	eq
 8010d14:	6811      	ldreq	r1, [r2, #0]
 8010d16:	6852      	ldreq	r2, [r2, #4]
 8010d18:	6062      	str	r2, [r4, #4]
 8010d1a:	bf04      	itt	eq
 8010d1c:	1809      	addeq	r1, r1, r0
 8010d1e:	6021      	streq	r1, [r4, #0]
 8010d20:	605c      	str	r4, [r3, #4]
 8010d22:	e7c7      	b.n	8010cb4 <_free_r+0x24>
 8010d24:	bd38      	pop	{r3, r4, r5, pc}
 8010d26:	bf00      	nop
 8010d28:	200001e8 	.word	0x200001e8

08010d2c <_malloc_r>:
 8010d2c:	b570      	push	{r4, r5, r6, lr}
 8010d2e:	1ccd      	adds	r5, r1, #3
 8010d30:	f025 0503 	bic.w	r5, r5, #3
 8010d34:	3508      	adds	r5, #8
 8010d36:	2d0c      	cmp	r5, #12
 8010d38:	bf38      	it	cc
 8010d3a:	250c      	movcc	r5, #12
 8010d3c:	2d00      	cmp	r5, #0
 8010d3e:	4606      	mov	r6, r0
 8010d40:	db01      	blt.n	8010d46 <_malloc_r+0x1a>
 8010d42:	42a9      	cmp	r1, r5
 8010d44:	d903      	bls.n	8010d4e <_malloc_r+0x22>
 8010d46:	230c      	movs	r3, #12
 8010d48:	6033      	str	r3, [r6, #0]
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	bd70      	pop	{r4, r5, r6, pc}
 8010d4e:	f000 fbb9 	bl	80114c4 <__malloc_lock>
 8010d52:	4a21      	ldr	r2, [pc, #132]	; (8010dd8 <_malloc_r+0xac>)
 8010d54:	6814      	ldr	r4, [r2, #0]
 8010d56:	4621      	mov	r1, r4
 8010d58:	b991      	cbnz	r1, 8010d80 <_malloc_r+0x54>
 8010d5a:	4c20      	ldr	r4, [pc, #128]	; (8010ddc <_malloc_r+0xb0>)
 8010d5c:	6823      	ldr	r3, [r4, #0]
 8010d5e:	b91b      	cbnz	r3, 8010d68 <_malloc_r+0x3c>
 8010d60:	4630      	mov	r0, r6
 8010d62:	f000 fb05 	bl	8011370 <_sbrk_r>
 8010d66:	6020      	str	r0, [r4, #0]
 8010d68:	4629      	mov	r1, r5
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f000 fb00 	bl	8011370 <_sbrk_r>
 8010d70:	1c43      	adds	r3, r0, #1
 8010d72:	d124      	bne.n	8010dbe <_malloc_r+0x92>
 8010d74:	230c      	movs	r3, #12
 8010d76:	6033      	str	r3, [r6, #0]
 8010d78:	4630      	mov	r0, r6
 8010d7a:	f000 fba4 	bl	80114c6 <__malloc_unlock>
 8010d7e:	e7e4      	b.n	8010d4a <_malloc_r+0x1e>
 8010d80:	680b      	ldr	r3, [r1, #0]
 8010d82:	1b5b      	subs	r3, r3, r5
 8010d84:	d418      	bmi.n	8010db8 <_malloc_r+0x8c>
 8010d86:	2b0b      	cmp	r3, #11
 8010d88:	d90f      	bls.n	8010daa <_malloc_r+0x7e>
 8010d8a:	600b      	str	r3, [r1, #0]
 8010d8c:	50cd      	str	r5, [r1, r3]
 8010d8e:	18cc      	adds	r4, r1, r3
 8010d90:	4630      	mov	r0, r6
 8010d92:	f000 fb98 	bl	80114c6 <__malloc_unlock>
 8010d96:	f104 000b 	add.w	r0, r4, #11
 8010d9a:	1d23      	adds	r3, r4, #4
 8010d9c:	f020 0007 	bic.w	r0, r0, #7
 8010da0:	1ac3      	subs	r3, r0, r3
 8010da2:	d0d3      	beq.n	8010d4c <_malloc_r+0x20>
 8010da4:	425a      	negs	r2, r3
 8010da6:	50e2      	str	r2, [r4, r3]
 8010da8:	e7d0      	b.n	8010d4c <_malloc_r+0x20>
 8010daa:	428c      	cmp	r4, r1
 8010dac:	684b      	ldr	r3, [r1, #4]
 8010dae:	bf16      	itet	ne
 8010db0:	6063      	strne	r3, [r4, #4]
 8010db2:	6013      	streq	r3, [r2, #0]
 8010db4:	460c      	movne	r4, r1
 8010db6:	e7eb      	b.n	8010d90 <_malloc_r+0x64>
 8010db8:	460c      	mov	r4, r1
 8010dba:	6849      	ldr	r1, [r1, #4]
 8010dbc:	e7cc      	b.n	8010d58 <_malloc_r+0x2c>
 8010dbe:	1cc4      	adds	r4, r0, #3
 8010dc0:	f024 0403 	bic.w	r4, r4, #3
 8010dc4:	42a0      	cmp	r0, r4
 8010dc6:	d005      	beq.n	8010dd4 <_malloc_r+0xa8>
 8010dc8:	1a21      	subs	r1, r4, r0
 8010dca:	4630      	mov	r0, r6
 8010dcc:	f000 fad0 	bl	8011370 <_sbrk_r>
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	d0cf      	beq.n	8010d74 <_malloc_r+0x48>
 8010dd4:	6025      	str	r5, [r4, #0]
 8010dd6:	e7db      	b.n	8010d90 <_malloc_r+0x64>
 8010dd8:	200001e8 	.word	0x200001e8
 8010ddc:	200001ec 	.word	0x200001ec

08010de0 <__sfputc_r>:
 8010de0:	6893      	ldr	r3, [r2, #8]
 8010de2:	3b01      	subs	r3, #1
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	b410      	push	{r4}
 8010de8:	6093      	str	r3, [r2, #8]
 8010dea:	da08      	bge.n	8010dfe <__sfputc_r+0x1e>
 8010dec:	6994      	ldr	r4, [r2, #24]
 8010dee:	42a3      	cmp	r3, r4
 8010df0:	db01      	blt.n	8010df6 <__sfputc_r+0x16>
 8010df2:	290a      	cmp	r1, #10
 8010df4:	d103      	bne.n	8010dfe <__sfputc_r+0x1e>
 8010df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dfa:	f7ff bcab 	b.w	8010754 <__swbuf_r>
 8010dfe:	6813      	ldr	r3, [r2, #0]
 8010e00:	1c58      	adds	r0, r3, #1
 8010e02:	6010      	str	r0, [r2, #0]
 8010e04:	7019      	strb	r1, [r3, #0]
 8010e06:	4608      	mov	r0, r1
 8010e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <__sfputs_r>:
 8010e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e10:	4606      	mov	r6, r0
 8010e12:	460f      	mov	r7, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	18d5      	adds	r5, r2, r3
 8010e18:	42ac      	cmp	r4, r5
 8010e1a:	d101      	bne.n	8010e20 <__sfputs_r+0x12>
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	e007      	b.n	8010e30 <__sfputs_r+0x22>
 8010e20:	463a      	mov	r2, r7
 8010e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e26:	4630      	mov	r0, r6
 8010e28:	f7ff ffda 	bl	8010de0 <__sfputc_r>
 8010e2c:	1c43      	adds	r3, r0, #1
 8010e2e:	d1f3      	bne.n	8010e18 <__sfputs_r+0xa>
 8010e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e34 <_vfiprintf_r>:
 8010e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e38:	460c      	mov	r4, r1
 8010e3a:	b09d      	sub	sp, #116	; 0x74
 8010e3c:	4617      	mov	r7, r2
 8010e3e:	461d      	mov	r5, r3
 8010e40:	4606      	mov	r6, r0
 8010e42:	b118      	cbz	r0, 8010e4c <_vfiprintf_r+0x18>
 8010e44:	6983      	ldr	r3, [r0, #24]
 8010e46:	b90b      	cbnz	r3, 8010e4c <_vfiprintf_r+0x18>
 8010e48:	f7ff fe34 	bl	8010ab4 <__sinit>
 8010e4c:	4b7c      	ldr	r3, [pc, #496]	; (8011040 <_vfiprintf_r+0x20c>)
 8010e4e:	429c      	cmp	r4, r3
 8010e50:	d158      	bne.n	8010f04 <_vfiprintf_r+0xd0>
 8010e52:	6874      	ldr	r4, [r6, #4]
 8010e54:	89a3      	ldrh	r3, [r4, #12]
 8010e56:	0718      	lsls	r0, r3, #28
 8010e58:	d55e      	bpl.n	8010f18 <_vfiprintf_r+0xe4>
 8010e5a:	6923      	ldr	r3, [r4, #16]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d05b      	beq.n	8010f18 <_vfiprintf_r+0xe4>
 8010e60:	2300      	movs	r3, #0
 8010e62:	9309      	str	r3, [sp, #36]	; 0x24
 8010e64:	2320      	movs	r3, #32
 8010e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e6a:	2330      	movs	r3, #48	; 0x30
 8010e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e70:	9503      	str	r5, [sp, #12]
 8010e72:	f04f 0b01 	mov.w	fp, #1
 8010e76:	46b8      	mov	r8, r7
 8010e78:	4645      	mov	r5, r8
 8010e7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010e7e:	b10b      	cbz	r3, 8010e84 <_vfiprintf_r+0x50>
 8010e80:	2b25      	cmp	r3, #37	; 0x25
 8010e82:	d154      	bne.n	8010f2e <_vfiprintf_r+0xfa>
 8010e84:	ebb8 0a07 	subs.w	sl, r8, r7
 8010e88:	d00b      	beq.n	8010ea2 <_vfiprintf_r+0x6e>
 8010e8a:	4653      	mov	r3, sl
 8010e8c:	463a      	mov	r2, r7
 8010e8e:	4621      	mov	r1, r4
 8010e90:	4630      	mov	r0, r6
 8010e92:	f7ff ffbc 	bl	8010e0e <__sfputs_r>
 8010e96:	3001      	adds	r0, #1
 8010e98:	f000 80c2 	beq.w	8011020 <_vfiprintf_r+0x1ec>
 8010e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e9e:	4453      	add	r3, sl
 8010ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ea2:	f898 3000 	ldrb.w	r3, [r8]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f000 80ba 	beq.w	8011020 <_vfiprintf_r+0x1ec>
 8010eac:	2300      	movs	r3, #0
 8010eae:	f04f 32ff 	mov.w	r2, #4294967295
 8010eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010eb6:	9304      	str	r3, [sp, #16]
 8010eb8:	9307      	str	r3, [sp, #28]
 8010eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8010ec0:	46a8      	mov	r8, r5
 8010ec2:	2205      	movs	r2, #5
 8010ec4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010ec8:	485e      	ldr	r0, [pc, #376]	; (8011044 <_vfiprintf_r+0x210>)
 8010eca:	f7f7 f8b9 	bl	8008040 <memchr>
 8010ece:	9b04      	ldr	r3, [sp, #16]
 8010ed0:	bb78      	cbnz	r0, 8010f32 <_vfiprintf_r+0xfe>
 8010ed2:	06d9      	lsls	r1, r3, #27
 8010ed4:	bf44      	itt	mi
 8010ed6:	2220      	movmi	r2, #32
 8010ed8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010edc:	071a      	lsls	r2, r3, #28
 8010ede:	bf44      	itt	mi
 8010ee0:	222b      	movmi	r2, #43	; 0x2b
 8010ee2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010ee6:	782a      	ldrb	r2, [r5, #0]
 8010ee8:	2a2a      	cmp	r2, #42	; 0x2a
 8010eea:	d02a      	beq.n	8010f42 <_vfiprintf_r+0x10e>
 8010eec:	9a07      	ldr	r2, [sp, #28]
 8010eee:	46a8      	mov	r8, r5
 8010ef0:	2000      	movs	r0, #0
 8010ef2:	250a      	movs	r5, #10
 8010ef4:	4641      	mov	r1, r8
 8010ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010efa:	3b30      	subs	r3, #48	; 0x30
 8010efc:	2b09      	cmp	r3, #9
 8010efe:	d969      	bls.n	8010fd4 <_vfiprintf_r+0x1a0>
 8010f00:	b360      	cbz	r0, 8010f5c <_vfiprintf_r+0x128>
 8010f02:	e024      	b.n	8010f4e <_vfiprintf_r+0x11a>
 8010f04:	4b50      	ldr	r3, [pc, #320]	; (8011048 <_vfiprintf_r+0x214>)
 8010f06:	429c      	cmp	r4, r3
 8010f08:	d101      	bne.n	8010f0e <_vfiprintf_r+0xda>
 8010f0a:	68b4      	ldr	r4, [r6, #8]
 8010f0c:	e7a2      	b.n	8010e54 <_vfiprintf_r+0x20>
 8010f0e:	4b4f      	ldr	r3, [pc, #316]	; (801104c <_vfiprintf_r+0x218>)
 8010f10:	429c      	cmp	r4, r3
 8010f12:	bf08      	it	eq
 8010f14:	68f4      	ldreq	r4, [r6, #12]
 8010f16:	e79d      	b.n	8010e54 <_vfiprintf_r+0x20>
 8010f18:	4621      	mov	r1, r4
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f7ff fc6c 	bl	80107f8 <__swsetup_r>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d09d      	beq.n	8010e60 <_vfiprintf_r+0x2c>
 8010f24:	f04f 30ff 	mov.w	r0, #4294967295
 8010f28:	b01d      	add	sp, #116	; 0x74
 8010f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f2e:	46a8      	mov	r8, r5
 8010f30:	e7a2      	b.n	8010e78 <_vfiprintf_r+0x44>
 8010f32:	4a44      	ldr	r2, [pc, #272]	; (8011044 <_vfiprintf_r+0x210>)
 8010f34:	1a80      	subs	r0, r0, r2
 8010f36:	fa0b f000 	lsl.w	r0, fp, r0
 8010f3a:	4318      	orrs	r0, r3
 8010f3c:	9004      	str	r0, [sp, #16]
 8010f3e:	4645      	mov	r5, r8
 8010f40:	e7be      	b.n	8010ec0 <_vfiprintf_r+0x8c>
 8010f42:	9a03      	ldr	r2, [sp, #12]
 8010f44:	1d11      	adds	r1, r2, #4
 8010f46:	6812      	ldr	r2, [r2, #0]
 8010f48:	9103      	str	r1, [sp, #12]
 8010f4a:	2a00      	cmp	r2, #0
 8010f4c:	db01      	blt.n	8010f52 <_vfiprintf_r+0x11e>
 8010f4e:	9207      	str	r2, [sp, #28]
 8010f50:	e004      	b.n	8010f5c <_vfiprintf_r+0x128>
 8010f52:	4252      	negs	r2, r2
 8010f54:	f043 0302 	orr.w	r3, r3, #2
 8010f58:	9207      	str	r2, [sp, #28]
 8010f5a:	9304      	str	r3, [sp, #16]
 8010f5c:	f898 3000 	ldrb.w	r3, [r8]
 8010f60:	2b2e      	cmp	r3, #46	; 0x2e
 8010f62:	d10e      	bne.n	8010f82 <_vfiprintf_r+0x14e>
 8010f64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010f68:	2b2a      	cmp	r3, #42	; 0x2a
 8010f6a:	d138      	bne.n	8010fde <_vfiprintf_r+0x1aa>
 8010f6c:	9b03      	ldr	r3, [sp, #12]
 8010f6e:	1d1a      	adds	r2, r3, #4
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	9203      	str	r2, [sp, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	bfb8      	it	lt
 8010f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f7c:	f108 0802 	add.w	r8, r8, #2
 8010f80:	9305      	str	r3, [sp, #20]
 8010f82:	4d33      	ldr	r5, [pc, #204]	; (8011050 <_vfiprintf_r+0x21c>)
 8010f84:	f898 1000 	ldrb.w	r1, [r8]
 8010f88:	2203      	movs	r2, #3
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	f7f7 f858 	bl	8008040 <memchr>
 8010f90:	b140      	cbz	r0, 8010fa4 <_vfiprintf_r+0x170>
 8010f92:	2340      	movs	r3, #64	; 0x40
 8010f94:	1b40      	subs	r0, r0, r5
 8010f96:	fa03 f000 	lsl.w	r0, r3, r0
 8010f9a:	9b04      	ldr	r3, [sp, #16]
 8010f9c:	4303      	orrs	r3, r0
 8010f9e:	f108 0801 	add.w	r8, r8, #1
 8010fa2:	9304      	str	r3, [sp, #16]
 8010fa4:	f898 1000 	ldrb.w	r1, [r8]
 8010fa8:	482a      	ldr	r0, [pc, #168]	; (8011054 <_vfiprintf_r+0x220>)
 8010faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fae:	2206      	movs	r2, #6
 8010fb0:	f108 0701 	add.w	r7, r8, #1
 8010fb4:	f7f7 f844 	bl	8008040 <memchr>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	d037      	beq.n	801102c <_vfiprintf_r+0x1f8>
 8010fbc:	4b26      	ldr	r3, [pc, #152]	; (8011058 <_vfiprintf_r+0x224>)
 8010fbe:	bb1b      	cbnz	r3, 8011008 <_vfiprintf_r+0x1d4>
 8010fc0:	9b03      	ldr	r3, [sp, #12]
 8010fc2:	3307      	adds	r3, #7
 8010fc4:	f023 0307 	bic.w	r3, r3, #7
 8010fc8:	3308      	adds	r3, #8
 8010fca:	9303      	str	r3, [sp, #12]
 8010fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fce:	444b      	add	r3, r9
 8010fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8010fd2:	e750      	b.n	8010e76 <_vfiprintf_r+0x42>
 8010fd4:	fb05 3202 	mla	r2, r5, r2, r3
 8010fd8:	2001      	movs	r0, #1
 8010fda:	4688      	mov	r8, r1
 8010fdc:	e78a      	b.n	8010ef4 <_vfiprintf_r+0xc0>
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f108 0801 	add.w	r8, r8, #1
 8010fe4:	9305      	str	r3, [sp, #20]
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	250a      	movs	r5, #10
 8010fea:	4640      	mov	r0, r8
 8010fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ff0:	3a30      	subs	r2, #48	; 0x30
 8010ff2:	2a09      	cmp	r2, #9
 8010ff4:	d903      	bls.n	8010ffe <_vfiprintf_r+0x1ca>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d0c3      	beq.n	8010f82 <_vfiprintf_r+0x14e>
 8010ffa:	9105      	str	r1, [sp, #20]
 8010ffc:	e7c1      	b.n	8010f82 <_vfiprintf_r+0x14e>
 8010ffe:	fb05 2101 	mla	r1, r5, r1, r2
 8011002:	2301      	movs	r3, #1
 8011004:	4680      	mov	r8, r0
 8011006:	e7f0      	b.n	8010fea <_vfiprintf_r+0x1b6>
 8011008:	ab03      	add	r3, sp, #12
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	4622      	mov	r2, r4
 801100e:	4b13      	ldr	r3, [pc, #76]	; (801105c <_vfiprintf_r+0x228>)
 8011010:	a904      	add	r1, sp, #16
 8011012:	4630      	mov	r0, r6
 8011014:	f3af 8000 	nop.w
 8011018:	f1b0 3fff 	cmp.w	r0, #4294967295
 801101c:	4681      	mov	r9, r0
 801101e:	d1d5      	bne.n	8010fcc <_vfiprintf_r+0x198>
 8011020:	89a3      	ldrh	r3, [r4, #12]
 8011022:	065b      	lsls	r3, r3, #25
 8011024:	f53f af7e 	bmi.w	8010f24 <_vfiprintf_r+0xf0>
 8011028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801102a:	e77d      	b.n	8010f28 <_vfiprintf_r+0xf4>
 801102c:	ab03      	add	r3, sp, #12
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	4622      	mov	r2, r4
 8011032:	4b0a      	ldr	r3, [pc, #40]	; (801105c <_vfiprintf_r+0x228>)
 8011034:	a904      	add	r1, sp, #16
 8011036:	4630      	mov	r0, r6
 8011038:	f000 f888 	bl	801114c <_printf_i>
 801103c:	e7ec      	b.n	8011018 <_vfiprintf_r+0x1e4>
 801103e:	bf00      	nop
 8011040:	08035460 	.word	0x08035460
 8011044:	080354a0 	.word	0x080354a0
 8011048:	08035480 	.word	0x08035480
 801104c:	08035440 	.word	0x08035440
 8011050:	080354a6 	.word	0x080354a6
 8011054:	080354aa 	.word	0x080354aa
 8011058:	00000000 	.word	0x00000000
 801105c:	08010e0f 	.word	0x08010e0f

08011060 <_printf_common>:
 8011060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011064:	4691      	mov	r9, r2
 8011066:	461f      	mov	r7, r3
 8011068:	688a      	ldr	r2, [r1, #8]
 801106a:	690b      	ldr	r3, [r1, #16]
 801106c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011070:	4293      	cmp	r3, r2
 8011072:	bfb8      	it	lt
 8011074:	4613      	movlt	r3, r2
 8011076:	f8c9 3000 	str.w	r3, [r9]
 801107a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801107e:	4606      	mov	r6, r0
 8011080:	460c      	mov	r4, r1
 8011082:	b112      	cbz	r2, 801108a <_printf_common+0x2a>
 8011084:	3301      	adds	r3, #1
 8011086:	f8c9 3000 	str.w	r3, [r9]
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	0699      	lsls	r1, r3, #26
 801108e:	bf42      	ittt	mi
 8011090:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011094:	3302      	addmi	r3, #2
 8011096:	f8c9 3000 	strmi.w	r3, [r9]
 801109a:	6825      	ldr	r5, [r4, #0]
 801109c:	f015 0506 	ands.w	r5, r5, #6
 80110a0:	d107      	bne.n	80110b2 <_printf_common+0x52>
 80110a2:	f104 0a19 	add.w	sl, r4, #25
 80110a6:	68e3      	ldr	r3, [r4, #12]
 80110a8:	f8d9 2000 	ldr.w	r2, [r9]
 80110ac:	1a9b      	subs	r3, r3, r2
 80110ae:	42ab      	cmp	r3, r5
 80110b0:	dc28      	bgt.n	8011104 <_printf_common+0xa4>
 80110b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80110b6:	6822      	ldr	r2, [r4, #0]
 80110b8:	3300      	adds	r3, #0
 80110ba:	bf18      	it	ne
 80110bc:	2301      	movne	r3, #1
 80110be:	0692      	lsls	r2, r2, #26
 80110c0:	d42d      	bmi.n	801111e <_printf_common+0xbe>
 80110c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110c6:	4639      	mov	r1, r7
 80110c8:	4630      	mov	r0, r6
 80110ca:	47c0      	blx	r8
 80110cc:	3001      	adds	r0, #1
 80110ce:	d020      	beq.n	8011112 <_printf_common+0xb2>
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	68e5      	ldr	r5, [r4, #12]
 80110d4:	f8d9 2000 	ldr.w	r2, [r9]
 80110d8:	f003 0306 	and.w	r3, r3, #6
 80110dc:	2b04      	cmp	r3, #4
 80110de:	bf08      	it	eq
 80110e0:	1aad      	subeq	r5, r5, r2
 80110e2:	68a3      	ldr	r3, [r4, #8]
 80110e4:	6922      	ldr	r2, [r4, #16]
 80110e6:	bf0c      	ite	eq
 80110e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110ec:	2500      	movne	r5, #0
 80110ee:	4293      	cmp	r3, r2
 80110f0:	bfc4      	itt	gt
 80110f2:	1a9b      	subgt	r3, r3, r2
 80110f4:	18ed      	addgt	r5, r5, r3
 80110f6:	f04f 0900 	mov.w	r9, #0
 80110fa:	341a      	adds	r4, #26
 80110fc:	454d      	cmp	r5, r9
 80110fe:	d11a      	bne.n	8011136 <_printf_common+0xd6>
 8011100:	2000      	movs	r0, #0
 8011102:	e008      	b.n	8011116 <_printf_common+0xb6>
 8011104:	2301      	movs	r3, #1
 8011106:	4652      	mov	r2, sl
 8011108:	4639      	mov	r1, r7
 801110a:	4630      	mov	r0, r6
 801110c:	47c0      	blx	r8
 801110e:	3001      	adds	r0, #1
 8011110:	d103      	bne.n	801111a <_printf_common+0xba>
 8011112:	f04f 30ff 	mov.w	r0, #4294967295
 8011116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801111a:	3501      	adds	r5, #1
 801111c:	e7c3      	b.n	80110a6 <_printf_common+0x46>
 801111e:	18e1      	adds	r1, r4, r3
 8011120:	1c5a      	adds	r2, r3, #1
 8011122:	2030      	movs	r0, #48	; 0x30
 8011124:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011128:	4422      	add	r2, r4
 801112a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801112e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011132:	3302      	adds	r3, #2
 8011134:	e7c5      	b.n	80110c2 <_printf_common+0x62>
 8011136:	2301      	movs	r3, #1
 8011138:	4622      	mov	r2, r4
 801113a:	4639      	mov	r1, r7
 801113c:	4630      	mov	r0, r6
 801113e:	47c0      	blx	r8
 8011140:	3001      	adds	r0, #1
 8011142:	d0e6      	beq.n	8011112 <_printf_common+0xb2>
 8011144:	f109 0901 	add.w	r9, r9, #1
 8011148:	e7d8      	b.n	80110fc <_printf_common+0x9c>
	...

0801114c <_printf_i>:
 801114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011150:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011154:	460c      	mov	r4, r1
 8011156:	7e09      	ldrb	r1, [r1, #24]
 8011158:	b085      	sub	sp, #20
 801115a:	296e      	cmp	r1, #110	; 0x6e
 801115c:	4617      	mov	r7, r2
 801115e:	4606      	mov	r6, r0
 8011160:	4698      	mov	r8, r3
 8011162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011164:	f000 80b3 	beq.w	80112ce <_printf_i+0x182>
 8011168:	d822      	bhi.n	80111b0 <_printf_i+0x64>
 801116a:	2963      	cmp	r1, #99	; 0x63
 801116c:	d036      	beq.n	80111dc <_printf_i+0x90>
 801116e:	d80a      	bhi.n	8011186 <_printf_i+0x3a>
 8011170:	2900      	cmp	r1, #0
 8011172:	f000 80b9 	beq.w	80112e8 <_printf_i+0x19c>
 8011176:	2958      	cmp	r1, #88	; 0x58
 8011178:	f000 8083 	beq.w	8011282 <_printf_i+0x136>
 801117c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011180:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011184:	e032      	b.n	80111ec <_printf_i+0xa0>
 8011186:	2964      	cmp	r1, #100	; 0x64
 8011188:	d001      	beq.n	801118e <_printf_i+0x42>
 801118a:	2969      	cmp	r1, #105	; 0x69
 801118c:	d1f6      	bne.n	801117c <_printf_i+0x30>
 801118e:	6820      	ldr	r0, [r4, #0]
 8011190:	6813      	ldr	r3, [r2, #0]
 8011192:	0605      	lsls	r5, r0, #24
 8011194:	f103 0104 	add.w	r1, r3, #4
 8011198:	d52a      	bpl.n	80111f0 <_printf_i+0xa4>
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	6011      	str	r1, [r2, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	da03      	bge.n	80111aa <_printf_i+0x5e>
 80111a2:	222d      	movs	r2, #45	; 0x2d
 80111a4:	425b      	negs	r3, r3
 80111a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80111aa:	486f      	ldr	r0, [pc, #444]	; (8011368 <_printf_i+0x21c>)
 80111ac:	220a      	movs	r2, #10
 80111ae:	e039      	b.n	8011224 <_printf_i+0xd8>
 80111b0:	2973      	cmp	r1, #115	; 0x73
 80111b2:	f000 809d 	beq.w	80112f0 <_printf_i+0x1a4>
 80111b6:	d808      	bhi.n	80111ca <_printf_i+0x7e>
 80111b8:	296f      	cmp	r1, #111	; 0x6f
 80111ba:	d020      	beq.n	80111fe <_printf_i+0xb2>
 80111bc:	2970      	cmp	r1, #112	; 0x70
 80111be:	d1dd      	bne.n	801117c <_printf_i+0x30>
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	f043 0320 	orr.w	r3, r3, #32
 80111c6:	6023      	str	r3, [r4, #0]
 80111c8:	e003      	b.n	80111d2 <_printf_i+0x86>
 80111ca:	2975      	cmp	r1, #117	; 0x75
 80111cc:	d017      	beq.n	80111fe <_printf_i+0xb2>
 80111ce:	2978      	cmp	r1, #120	; 0x78
 80111d0:	d1d4      	bne.n	801117c <_printf_i+0x30>
 80111d2:	2378      	movs	r3, #120	; 0x78
 80111d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80111d8:	4864      	ldr	r0, [pc, #400]	; (801136c <_printf_i+0x220>)
 80111da:	e055      	b.n	8011288 <_printf_i+0x13c>
 80111dc:	6813      	ldr	r3, [r2, #0]
 80111de:	1d19      	adds	r1, r3, #4
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	6011      	str	r1, [r2, #0]
 80111e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111ec:	2301      	movs	r3, #1
 80111ee:	e08c      	b.n	801130a <_printf_i+0x1be>
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	6011      	str	r1, [r2, #0]
 80111f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80111f8:	bf18      	it	ne
 80111fa:	b21b      	sxthne	r3, r3
 80111fc:	e7cf      	b.n	801119e <_printf_i+0x52>
 80111fe:	6813      	ldr	r3, [r2, #0]
 8011200:	6825      	ldr	r5, [r4, #0]
 8011202:	1d18      	adds	r0, r3, #4
 8011204:	6010      	str	r0, [r2, #0]
 8011206:	0628      	lsls	r0, r5, #24
 8011208:	d501      	bpl.n	801120e <_printf_i+0xc2>
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	e002      	b.n	8011214 <_printf_i+0xc8>
 801120e:	0668      	lsls	r0, r5, #25
 8011210:	d5fb      	bpl.n	801120a <_printf_i+0xbe>
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	4854      	ldr	r0, [pc, #336]	; (8011368 <_printf_i+0x21c>)
 8011216:	296f      	cmp	r1, #111	; 0x6f
 8011218:	bf14      	ite	ne
 801121a:	220a      	movne	r2, #10
 801121c:	2208      	moveq	r2, #8
 801121e:	2100      	movs	r1, #0
 8011220:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011224:	6865      	ldr	r5, [r4, #4]
 8011226:	60a5      	str	r5, [r4, #8]
 8011228:	2d00      	cmp	r5, #0
 801122a:	f2c0 8095 	blt.w	8011358 <_printf_i+0x20c>
 801122e:	6821      	ldr	r1, [r4, #0]
 8011230:	f021 0104 	bic.w	r1, r1, #4
 8011234:	6021      	str	r1, [r4, #0]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d13d      	bne.n	80112b6 <_printf_i+0x16a>
 801123a:	2d00      	cmp	r5, #0
 801123c:	f040 808e 	bne.w	801135c <_printf_i+0x210>
 8011240:	4665      	mov	r5, ip
 8011242:	2a08      	cmp	r2, #8
 8011244:	d10b      	bne.n	801125e <_printf_i+0x112>
 8011246:	6823      	ldr	r3, [r4, #0]
 8011248:	07db      	lsls	r3, r3, #31
 801124a:	d508      	bpl.n	801125e <_printf_i+0x112>
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	6862      	ldr	r2, [r4, #4]
 8011250:	429a      	cmp	r2, r3
 8011252:	bfde      	ittt	le
 8011254:	2330      	movle	r3, #48	; 0x30
 8011256:	f805 3c01 	strble.w	r3, [r5, #-1]
 801125a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801125e:	ebac 0305 	sub.w	r3, ip, r5
 8011262:	6123      	str	r3, [r4, #16]
 8011264:	f8cd 8000 	str.w	r8, [sp]
 8011268:	463b      	mov	r3, r7
 801126a:	aa03      	add	r2, sp, #12
 801126c:	4621      	mov	r1, r4
 801126e:	4630      	mov	r0, r6
 8011270:	f7ff fef6 	bl	8011060 <_printf_common>
 8011274:	3001      	adds	r0, #1
 8011276:	d14d      	bne.n	8011314 <_printf_i+0x1c8>
 8011278:	f04f 30ff 	mov.w	r0, #4294967295
 801127c:	b005      	add	sp, #20
 801127e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011282:	4839      	ldr	r0, [pc, #228]	; (8011368 <_printf_i+0x21c>)
 8011284:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011288:	6813      	ldr	r3, [r2, #0]
 801128a:	6821      	ldr	r1, [r4, #0]
 801128c:	1d1d      	adds	r5, r3, #4
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	6015      	str	r5, [r2, #0]
 8011292:	060a      	lsls	r2, r1, #24
 8011294:	d50b      	bpl.n	80112ae <_printf_i+0x162>
 8011296:	07ca      	lsls	r2, r1, #31
 8011298:	bf44      	itt	mi
 801129a:	f041 0120 	orrmi.w	r1, r1, #32
 801129e:	6021      	strmi	r1, [r4, #0]
 80112a0:	b91b      	cbnz	r3, 80112aa <_printf_i+0x15e>
 80112a2:	6822      	ldr	r2, [r4, #0]
 80112a4:	f022 0220 	bic.w	r2, r2, #32
 80112a8:	6022      	str	r2, [r4, #0]
 80112aa:	2210      	movs	r2, #16
 80112ac:	e7b7      	b.n	801121e <_printf_i+0xd2>
 80112ae:	064d      	lsls	r5, r1, #25
 80112b0:	bf48      	it	mi
 80112b2:	b29b      	uxthmi	r3, r3
 80112b4:	e7ef      	b.n	8011296 <_printf_i+0x14a>
 80112b6:	4665      	mov	r5, ip
 80112b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80112bc:	fb02 3311 	mls	r3, r2, r1, r3
 80112c0:	5cc3      	ldrb	r3, [r0, r3]
 80112c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80112c6:	460b      	mov	r3, r1
 80112c8:	2900      	cmp	r1, #0
 80112ca:	d1f5      	bne.n	80112b8 <_printf_i+0x16c>
 80112cc:	e7b9      	b.n	8011242 <_printf_i+0xf6>
 80112ce:	6813      	ldr	r3, [r2, #0]
 80112d0:	6825      	ldr	r5, [r4, #0]
 80112d2:	6961      	ldr	r1, [r4, #20]
 80112d4:	1d18      	adds	r0, r3, #4
 80112d6:	6010      	str	r0, [r2, #0]
 80112d8:	0628      	lsls	r0, r5, #24
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	d501      	bpl.n	80112e2 <_printf_i+0x196>
 80112de:	6019      	str	r1, [r3, #0]
 80112e0:	e002      	b.n	80112e8 <_printf_i+0x19c>
 80112e2:	066a      	lsls	r2, r5, #25
 80112e4:	d5fb      	bpl.n	80112de <_printf_i+0x192>
 80112e6:	8019      	strh	r1, [r3, #0]
 80112e8:	2300      	movs	r3, #0
 80112ea:	6123      	str	r3, [r4, #16]
 80112ec:	4665      	mov	r5, ip
 80112ee:	e7b9      	b.n	8011264 <_printf_i+0x118>
 80112f0:	6813      	ldr	r3, [r2, #0]
 80112f2:	1d19      	adds	r1, r3, #4
 80112f4:	6011      	str	r1, [r2, #0]
 80112f6:	681d      	ldr	r5, [r3, #0]
 80112f8:	6862      	ldr	r2, [r4, #4]
 80112fa:	2100      	movs	r1, #0
 80112fc:	4628      	mov	r0, r5
 80112fe:	f7f6 fe9f 	bl	8008040 <memchr>
 8011302:	b108      	cbz	r0, 8011308 <_printf_i+0x1bc>
 8011304:	1b40      	subs	r0, r0, r5
 8011306:	6060      	str	r0, [r4, #4]
 8011308:	6863      	ldr	r3, [r4, #4]
 801130a:	6123      	str	r3, [r4, #16]
 801130c:	2300      	movs	r3, #0
 801130e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011312:	e7a7      	b.n	8011264 <_printf_i+0x118>
 8011314:	6923      	ldr	r3, [r4, #16]
 8011316:	462a      	mov	r2, r5
 8011318:	4639      	mov	r1, r7
 801131a:	4630      	mov	r0, r6
 801131c:	47c0      	blx	r8
 801131e:	3001      	adds	r0, #1
 8011320:	d0aa      	beq.n	8011278 <_printf_i+0x12c>
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	079b      	lsls	r3, r3, #30
 8011326:	d413      	bmi.n	8011350 <_printf_i+0x204>
 8011328:	68e0      	ldr	r0, [r4, #12]
 801132a:	9b03      	ldr	r3, [sp, #12]
 801132c:	4298      	cmp	r0, r3
 801132e:	bfb8      	it	lt
 8011330:	4618      	movlt	r0, r3
 8011332:	e7a3      	b.n	801127c <_printf_i+0x130>
 8011334:	2301      	movs	r3, #1
 8011336:	464a      	mov	r2, r9
 8011338:	4639      	mov	r1, r7
 801133a:	4630      	mov	r0, r6
 801133c:	47c0      	blx	r8
 801133e:	3001      	adds	r0, #1
 8011340:	d09a      	beq.n	8011278 <_printf_i+0x12c>
 8011342:	3501      	adds	r5, #1
 8011344:	68e3      	ldr	r3, [r4, #12]
 8011346:	9a03      	ldr	r2, [sp, #12]
 8011348:	1a9b      	subs	r3, r3, r2
 801134a:	42ab      	cmp	r3, r5
 801134c:	dcf2      	bgt.n	8011334 <_printf_i+0x1e8>
 801134e:	e7eb      	b.n	8011328 <_printf_i+0x1dc>
 8011350:	2500      	movs	r5, #0
 8011352:	f104 0919 	add.w	r9, r4, #25
 8011356:	e7f5      	b.n	8011344 <_printf_i+0x1f8>
 8011358:	2b00      	cmp	r3, #0
 801135a:	d1ac      	bne.n	80112b6 <_printf_i+0x16a>
 801135c:	7803      	ldrb	r3, [r0, #0]
 801135e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011362:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011366:	e76c      	b.n	8011242 <_printf_i+0xf6>
 8011368:	080354b1 	.word	0x080354b1
 801136c:	080354c2 	.word	0x080354c2

08011370 <_sbrk_r>:
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	4c06      	ldr	r4, [pc, #24]	; (801138c <_sbrk_r+0x1c>)
 8011374:	2300      	movs	r3, #0
 8011376:	4605      	mov	r5, r0
 8011378:	4608      	mov	r0, r1
 801137a:	6023      	str	r3, [r4, #0]
 801137c:	f7fe fe56 	bl	801002c <_sbrk>
 8011380:	1c43      	adds	r3, r0, #1
 8011382:	d102      	bne.n	801138a <_sbrk_r+0x1a>
 8011384:	6823      	ldr	r3, [r4, #0]
 8011386:	b103      	cbz	r3, 801138a <_sbrk_r+0x1a>
 8011388:	602b      	str	r3, [r5, #0]
 801138a:	bd38      	pop	{r3, r4, r5, pc}
 801138c:	200005ac 	.word	0x200005ac

08011390 <__sread>:
 8011390:	b510      	push	{r4, lr}
 8011392:	460c      	mov	r4, r1
 8011394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011398:	f000 f896 	bl	80114c8 <_read_r>
 801139c:	2800      	cmp	r0, #0
 801139e:	bfab      	itete	ge
 80113a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80113a2:	89a3      	ldrhlt	r3, [r4, #12]
 80113a4:	181b      	addge	r3, r3, r0
 80113a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80113aa:	bfac      	ite	ge
 80113ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80113ae:	81a3      	strhlt	r3, [r4, #12]
 80113b0:	bd10      	pop	{r4, pc}

080113b2 <__swrite>:
 80113b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b6:	461f      	mov	r7, r3
 80113b8:	898b      	ldrh	r3, [r1, #12]
 80113ba:	05db      	lsls	r3, r3, #23
 80113bc:	4605      	mov	r5, r0
 80113be:	460c      	mov	r4, r1
 80113c0:	4616      	mov	r6, r2
 80113c2:	d505      	bpl.n	80113d0 <__swrite+0x1e>
 80113c4:	2302      	movs	r3, #2
 80113c6:	2200      	movs	r2, #0
 80113c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113cc:	f000 f868 	bl	80114a0 <_lseek_r>
 80113d0:	89a3      	ldrh	r3, [r4, #12]
 80113d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113da:	81a3      	strh	r3, [r4, #12]
 80113dc:	4632      	mov	r2, r6
 80113de:	463b      	mov	r3, r7
 80113e0:	4628      	mov	r0, r5
 80113e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113e6:	f000 b817 	b.w	8011418 <_write_r>

080113ea <__sseek>:
 80113ea:	b510      	push	{r4, lr}
 80113ec:	460c      	mov	r4, r1
 80113ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113f2:	f000 f855 	bl	80114a0 <_lseek_r>
 80113f6:	1c43      	adds	r3, r0, #1
 80113f8:	89a3      	ldrh	r3, [r4, #12]
 80113fa:	bf15      	itete	ne
 80113fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80113fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011406:	81a3      	strheq	r3, [r4, #12]
 8011408:	bf18      	it	ne
 801140a:	81a3      	strhne	r3, [r4, #12]
 801140c:	bd10      	pop	{r4, pc}

0801140e <__sclose>:
 801140e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011412:	f000 b813 	b.w	801143c <_close_r>
	...

08011418 <_write_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	4c07      	ldr	r4, [pc, #28]	; (8011438 <_write_r+0x20>)
 801141c:	4605      	mov	r5, r0
 801141e:	4608      	mov	r0, r1
 8011420:	4611      	mov	r1, r2
 8011422:	2200      	movs	r2, #0
 8011424:	6022      	str	r2, [r4, #0]
 8011426:	461a      	mov	r2, r3
 8011428:	f7fd fd9b 	bl	800ef62 <_write>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d102      	bne.n	8011436 <_write_r+0x1e>
 8011430:	6823      	ldr	r3, [r4, #0]
 8011432:	b103      	cbz	r3, 8011436 <_write_r+0x1e>
 8011434:	602b      	str	r3, [r5, #0]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	200005ac 	.word	0x200005ac

0801143c <_close_r>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	4c06      	ldr	r4, [pc, #24]	; (8011458 <_close_r+0x1c>)
 8011440:	2300      	movs	r3, #0
 8011442:	4605      	mov	r5, r0
 8011444:	4608      	mov	r0, r1
 8011446:	6023      	str	r3, [r4, #0]
 8011448:	f7fe fdbb 	bl	800ffc2 <_close>
 801144c:	1c43      	adds	r3, r0, #1
 801144e:	d102      	bne.n	8011456 <_close_r+0x1a>
 8011450:	6823      	ldr	r3, [r4, #0]
 8011452:	b103      	cbz	r3, 8011456 <_close_r+0x1a>
 8011454:	602b      	str	r3, [r5, #0]
 8011456:	bd38      	pop	{r3, r4, r5, pc}
 8011458:	200005ac 	.word	0x200005ac

0801145c <_fstat_r>:
 801145c:	b538      	push	{r3, r4, r5, lr}
 801145e:	4c07      	ldr	r4, [pc, #28]	; (801147c <_fstat_r+0x20>)
 8011460:	2300      	movs	r3, #0
 8011462:	4605      	mov	r5, r0
 8011464:	4608      	mov	r0, r1
 8011466:	4611      	mov	r1, r2
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	f7fe fdb6 	bl	800ffda <_fstat>
 801146e:	1c43      	adds	r3, r0, #1
 8011470:	d102      	bne.n	8011478 <_fstat_r+0x1c>
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	b103      	cbz	r3, 8011478 <_fstat_r+0x1c>
 8011476:	602b      	str	r3, [r5, #0]
 8011478:	bd38      	pop	{r3, r4, r5, pc}
 801147a:	bf00      	nop
 801147c:	200005ac 	.word	0x200005ac

08011480 <_isatty_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	4c06      	ldr	r4, [pc, #24]	; (801149c <_isatty_r+0x1c>)
 8011484:	2300      	movs	r3, #0
 8011486:	4605      	mov	r5, r0
 8011488:	4608      	mov	r0, r1
 801148a:	6023      	str	r3, [r4, #0]
 801148c:	f7fe fdb5 	bl	800fffa <_isatty>
 8011490:	1c43      	adds	r3, r0, #1
 8011492:	d102      	bne.n	801149a <_isatty_r+0x1a>
 8011494:	6823      	ldr	r3, [r4, #0]
 8011496:	b103      	cbz	r3, 801149a <_isatty_r+0x1a>
 8011498:	602b      	str	r3, [r5, #0]
 801149a:	bd38      	pop	{r3, r4, r5, pc}
 801149c:	200005ac 	.word	0x200005ac

080114a0 <_lseek_r>:
 80114a0:	b538      	push	{r3, r4, r5, lr}
 80114a2:	4c07      	ldr	r4, [pc, #28]	; (80114c0 <_lseek_r+0x20>)
 80114a4:	4605      	mov	r5, r0
 80114a6:	4608      	mov	r0, r1
 80114a8:	4611      	mov	r1, r2
 80114aa:	2200      	movs	r2, #0
 80114ac:	6022      	str	r2, [r4, #0]
 80114ae:	461a      	mov	r2, r3
 80114b0:	f7fe fdae 	bl	8010010 <_lseek>
 80114b4:	1c43      	adds	r3, r0, #1
 80114b6:	d102      	bne.n	80114be <_lseek_r+0x1e>
 80114b8:	6823      	ldr	r3, [r4, #0]
 80114ba:	b103      	cbz	r3, 80114be <_lseek_r+0x1e>
 80114bc:	602b      	str	r3, [r5, #0]
 80114be:	bd38      	pop	{r3, r4, r5, pc}
 80114c0:	200005ac 	.word	0x200005ac

080114c4 <__malloc_lock>:
 80114c4:	4770      	bx	lr

080114c6 <__malloc_unlock>:
 80114c6:	4770      	bx	lr

080114c8 <_read_r>:
 80114c8:	b538      	push	{r3, r4, r5, lr}
 80114ca:	4c07      	ldr	r4, [pc, #28]	; (80114e8 <_read_r+0x20>)
 80114cc:	4605      	mov	r5, r0
 80114ce:	4608      	mov	r0, r1
 80114d0:	4611      	mov	r1, r2
 80114d2:	2200      	movs	r2, #0
 80114d4:	6022      	str	r2, [r4, #0]
 80114d6:	461a      	mov	r2, r3
 80114d8:	f7fe fd56 	bl	800ff88 <_read>
 80114dc:	1c43      	adds	r3, r0, #1
 80114de:	d102      	bne.n	80114e6 <_read_r+0x1e>
 80114e0:	6823      	ldr	r3, [r4, #0]
 80114e2:	b103      	cbz	r3, 80114e6 <_read_r+0x1e>
 80114e4:	602b      	str	r3, [r5, #0]
 80114e6:	bd38      	pop	{r3, r4, r5, pc}
 80114e8:	200005ac 	.word	0x200005ac

080114ec <fmodf>:
 80114ec:	b5d0      	push	{r4, r6, r7, lr}
 80114ee:	ed2d 8b02 	vpush	{d8}
 80114f2:	b08a      	sub	sp, #40	; 0x28
 80114f4:	eef0 8a40 	vmov.f32	s17, s0
 80114f8:	eeb0 8a60 	vmov.f32	s16, s1
 80114fc:	f000 f852 	bl	80115a4 <__ieee754_fmodf>
 8011500:	4b26      	ldr	r3, [pc, #152]	; (801159c <fmodf+0xb0>)
 8011502:	f993 4000 	ldrsb.w	r4, [r3]
 8011506:	1c63      	adds	r3, r4, #1
 8011508:	d035      	beq.n	8011576 <fmodf+0x8a>
 801150a:	eeb4 8a48 	vcmp.f32	s16, s16
 801150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011512:	d630      	bvs.n	8011576 <fmodf+0x8a>
 8011514:	eef4 8a68 	vcmp.f32	s17, s17
 8011518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801151c:	d62b      	bvs.n	8011576 <fmodf+0x8a>
 801151e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	d126      	bne.n	8011576 <fmodf+0x8a>
 8011528:	2301      	movs	r3, #1
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	4b1c      	ldr	r3, [pc, #112]	; (80115a0 <fmodf+0xb4>)
 801152e:	9301      	str	r3, [sp, #4]
 8011530:	ee18 0a90 	vmov	r0, s17
 8011534:	2300      	movs	r3, #0
 8011536:	9308      	str	r3, [sp, #32]
 8011538:	f7f6 ff36 	bl	80083a8 <__aeabi_f2d>
 801153c:	4606      	mov	r6, r0
 801153e:	460f      	mov	r7, r1
 8011540:	ee18 0a10 	vmov	r0, s16
 8011544:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011548:	f7f6 ff2e 	bl	80083a8 <__aeabi_f2d>
 801154c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011550:	b9ac      	cbnz	r4, 801157e <fmodf+0x92>
 8011552:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011556:	4668      	mov	r0, sp
 8011558:	f000 f8ac 	bl	80116b4 <matherr>
 801155c:	b1c8      	cbz	r0, 8011592 <fmodf+0xa6>
 801155e:	9b08      	ldr	r3, [sp, #32]
 8011560:	b11b      	cbz	r3, 801156a <fmodf+0x7e>
 8011562:	f7ff f849 	bl	80105f8 <__errno>
 8011566:	9b08      	ldr	r3, [sp, #32]
 8011568:	6003      	str	r3, [r0, #0]
 801156a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801156e:	f7f7 fa0d 	bl	800898c <__aeabi_d2f>
 8011572:	ee00 0a10 	vmov	s0, r0
 8011576:	b00a      	add	sp, #40	; 0x28
 8011578:	ecbd 8b02 	vpop	{d8}
 801157c:	bdd0      	pop	{r4, r6, r7, pc}
 801157e:	2200      	movs	r2, #0
 8011580:	2300      	movs	r3, #0
 8011582:	4610      	mov	r0, r2
 8011584:	4619      	mov	r1, r3
 8011586:	f7f7 f891 	bl	80086ac <__aeabi_ddiv>
 801158a:	2c02      	cmp	r4, #2
 801158c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011590:	d1e1      	bne.n	8011556 <fmodf+0x6a>
 8011592:	f7ff f831 	bl	80105f8 <__errno>
 8011596:	2321      	movs	r3, #33	; 0x21
 8011598:	6003      	str	r3, [r0, #0]
 801159a:	e7e0      	b.n	801155e <fmodf+0x72>
 801159c:	20000094 	.word	0x20000094
 80115a0:	080354d3 	.word	0x080354d3

080115a4 <__ieee754_fmodf>:
 80115a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a6:	ee10 6a90 	vmov	r6, s1
 80115aa:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80115ae:	ee10 3a10 	vmov	r3, s0
 80115b2:	d009      	beq.n	80115c8 <__ieee754_fmodf+0x24>
 80115b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80115b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80115bc:	ee10 7a10 	vmov	r7, s0
 80115c0:	da02      	bge.n	80115c8 <__ieee754_fmodf+0x24>
 80115c2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80115c6:	dd0a      	ble.n	80115de <__ieee754_fmodf+0x3a>
 80115c8:	ee07 3a90 	vmov	s15, r3
 80115cc:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80115d0:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 80115d4:	ee17 3a90 	vmov	r3, s15
 80115d8:	ee00 3a10 	vmov	s0, r3
 80115dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115de:	42a9      	cmp	r1, r5
 80115e0:	dbfa      	blt.n	80115d8 <__ieee754_fmodf+0x34>
 80115e2:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 80115e6:	d105      	bne.n	80115f4 <__ieee754_fmodf+0x50>
 80115e8:	4a30      	ldr	r2, [pc, #192]	; (80116ac <__ieee754_fmodf+0x108>)
 80115ea:	0fe3      	lsrs	r3, r4, #31
 80115ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	e7f1      	b.n	80115d8 <__ieee754_fmodf+0x34>
 80115f4:	4b2e      	ldr	r3, [pc, #184]	; (80116b0 <__ieee754_fmodf+0x10c>)
 80115f6:	4299      	cmp	r1, r3
 80115f8:	dc3e      	bgt.n	8011678 <__ieee754_fmodf+0xd4>
 80115fa:	020a      	lsls	r2, r1, #8
 80115fc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011600:	2a00      	cmp	r2, #0
 8011602:	dc36      	bgt.n	8011672 <__ieee754_fmodf+0xce>
 8011604:	429d      	cmp	r5, r3
 8011606:	dc3a      	bgt.n	801167e <__ieee754_fmodf+0xda>
 8011608:	022b      	lsls	r3, r5, #8
 801160a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 801160e:	005b      	lsls	r3, r3, #1
 8011610:	f102 32ff 	add.w	r2, r2, #4294967295
 8011614:	d5fb      	bpl.n	801160e <__ieee754_fmodf+0x6a>
 8011616:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801161a:	bfbb      	ittet	lt
 801161c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8011620:	1a1b      	sublt	r3, r3, r0
 8011622:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8011626:	4099      	lsllt	r1, r3
 8011628:	bfa8      	it	ge
 801162a:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 801162e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8011632:	bfb5      	itete	lt
 8011634:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8011638:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 801163c:	1a9b      	sublt	r3, r3, r2
 801163e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8011642:	bfb8      	it	lt
 8011644:	409d      	lsllt	r5, r3
 8011646:	1a80      	subs	r0, r0, r2
 8011648:	1b4b      	subs	r3, r1, r5
 801164a:	b9d8      	cbnz	r0, 8011684 <__ieee754_fmodf+0xe0>
 801164c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8011650:	bf28      	it	cs
 8011652:	460b      	movcs	r3, r1
 8011654:	2b00      	cmp	r3, #0
 8011656:	d0c7      	beq.n	80115e8 <__ieee754_fmodf+0x44>
 8011658:	4915      	ldr	r1, [pc, #84]	; (80116b0 <__ieee754_fmodf+0x10c>)
 801165a:	428b      	cmp	r3, r1
 801165c:	dd1a      	ble.n	8011694 <__ieee754_fmodf+0xf0>
 801165e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8011662:	db1a      	blt.n	801169a <__ieee754_fmodf+0xf6>
 8011664:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011668:	4323      	orrs	r3, r4
 801166a:	327f      	adds	r2, #127	; 0x7f
 801166c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011670:	e7b2      	b.n	80115d8 <__ieee754_fmodf+0x34>
 8011672:	3801      	subs	r0, #1
 8011674:	0052      	lsls	r2, r2, #1
 8011676:	e7c3      	b.n	8011600 <__ieee754_fmodf+0x5c>
 8011678:	15c8      	asrs	r0, r1, #23
 801167a:	387f      	subs	r0, #127	; 0x7f
 801167c:	e7c2      	b.n	8011604 <__ieee754_fmodf+0x60>
 801167e:	15ea      	asrs	r2, r5, #23
 8011680:	3a7f      	subs	r2, #127	; 0x7f
 8011682:	e7c8      	b.n	8011616 <__ieee754_fmodf+0x72>
 8011684:	2b00      	cmp	r3, #0
 8011686:	da02      	bge.n	801168e <__ieee754_fmodf+0xea>
 8011688:	0049      	lsls	r1, r1, #1
 801168a:	3801      	subs	r0, #1
 801168c:	e7dc      	b.n	8011648 <__ieee754_fmodf+0xa4>
 801168e:	d0ab      	beq.n	80115e8 <__ieee754_fmodf+0x44>
 8011690:	0059      	lsls	r1, r3, #1
 8011692:	e7fa      	b.n	801168a <__ieee754_fmodf+0xe6>
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	3a01      	subs	r2, #1
 8011698:	e7df      	b.n	801165a <__ieee754_fmodf+0xb6>
 801169a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801169e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80116a2:	3282      	adds	r2, #130	; 0x82
 80116a4:	4113      	asrs	r3, r2
 80116a6:	4323      	orrs	r3, r4
 80116a8:	e796      	b.n	80115d8 <__ieee754_fmodf+0x34>
 80116aa:	bf00      	nop
 80116ac:	080354dc 	.word	0x080354dc
 80116b0:	007fffff 	.word	0x007fffff

080116b4 <matherr>:
 80116b4:	2000      	movs	r0, #0
 80116b6:	4770      	bx	lr

080116b8 <_init>:
 80116b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ba:	bf00      	nop
 80116bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116be:	bc08      	pop	{r3}
 80116c0:	469e      	mov	lr, r3
 80116c2:	4770      	bx	lr

080116c4 <_fini>:
 80116c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c6:	bf00      	nop
 80116c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ca:	bc08      	pop	{r3}
 80116cc:	469e      	mov	lr, r3
 80116ce:	4770      	bx	lr
