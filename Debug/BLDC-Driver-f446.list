
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013bd0  0800af60  0800af60  0001af60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801eb30  0801eb30  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  0801eb30  0801eb30  0002eb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eb38  0801eb38  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eb38  0801eb38  0002eb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801eb3c  0801eb3c  0002eb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0801eb40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000218  0801ed58  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0801ed58  000306c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143c7  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d7e  00000000  00000000  0004460f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b8  00000000  00000000  00047390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  00048548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e85  00000000  00000000  00049578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea38  00000000  00000000  0006c3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d85bf  00000000  00000000  0007ae35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001533f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005548  00000000  00000000  00153470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af48 	.word	0x0800af48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800af48 	.word	0x0800af48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f001 fab5 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f007 f9f4 	bl	80083a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 facd 	bl	800258a <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f001 fa95 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000040 	.word	0x20000040
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20000370 	.word	0x20000370

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000370 	.word	0x20000370

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f004 ff14 	bl	8005efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fa5a 	bl	80015bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Start_DMA+0x1e>
 8001152:	2302      	movs	r3, #2
 8001154:	e0cc      	b.n	80012f0 <HAL_ADC_Start_DMA+0x1b8>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d018      	beq.n	800119e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <HAL_ADC_Start_DMA+0x1c0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a5e      	ldr	r2, [pc, #376]	; (80012fc <HAL_ADC_Start_DMA+0x1c4>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9a      	lsrs	r2, r3, #18
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001190:	e002      	b.n	8001198 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3b01      	subs	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 80a0 	bne.w	80012ee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ec:	d106      	bne.n	80011fc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f023 0206 	bic.w	r2, r3, #6
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
 80011fa:	e002      	b.n	8001202 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_ADC_Start_DMA+0x1c8>)
 800120c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <HAL_ADC_Start_DMA+0x1cc>)
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	4a3b      	ldr	r2, [pc, #236]	; (8001308 <HAL_ADC_Start_DMA+0x1d0>)
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a3a      	ldr	r2, [pc, #232]	; (800130c <HAL_ADC_Start_DMA+0x1d4>)
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800122e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800123e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800124e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	334c      	adds	r3, #76	; 0x4c
 800125a:	4619      	mov	r1, r3
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f001 fa4e 	bl	8002700 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d12a      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_ADC_Start_DMA+0x1d8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d015      	beq.n	80012a6 <HAL_ADC_Start_DMA+0x16e>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a25      	ldr	r2, [pc, #148]	; (8001314 <HAL_ADC_Start_DMA+0x1dc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d105      	bne.n	8001290 <HAL_ADC_Start_DMA+0x158>
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_ADC_Start_DMA+0x1c8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00a      	beq.n	80012a6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a20      	ldr	r2, [pc, #128]	; (8001318 <HAL_ADC_Start_DMA+0x1e0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d129      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_ADC_Start_DMA+0x1c8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d823      	bhi.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d11c      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	e013      	b.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_ADC_Start_DMA+0x1d8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d10e      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d107      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000040 	.word	0x20000040
 80012fc:	431bde83 	.word	0x431bde83
 8001300:	40012300 	.word	0x40012300
 8001304:	080017b5 	.word	0x080017b5
 8001308:	0800186f 	.word	0x0800186f
 800130c:	0800188b 	.word	0x0800188b
 8001310:	40012000 	.word	0x40012000
 8001314:	40012100 	.word	0x40012100
 8001318:	40012200 	.word	0x40012200

0800131c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1c>
 8001370:	2302      	movs	r3, #2
 8001372:	e113      	b.n	800159c <HAL_ADC_ConfigChannel+0x244>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b09      	cmp	r3, #9
 8001382:	d925      	bls.n	80013d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68d9      	ldr	r1, [r3, #12]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	3b1e      	subs	r3, #30
 800139a:	2207      	movs	r2, #7
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68d9      	ldr	r1, [r3, #12]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	4603      	mov	r3, r0
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4403      	add	r3, r0
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	409a      	lsls	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	e022      	b.n	8001416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6919      	ldr	r1, [r3, #16]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	2207      	movs	r2, #7
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	400a      	ands	r2, r1
 80013f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6919      	ldr	r1, [r3, #16]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	4603      	mov	r3, r0
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4403      	add	r3, r0
 800140c:	409a      	lsls	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b06      	cmp	r3, #6
 800141c:	d824      	bhi.n	8001468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b05      	subs	r3, #5
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b05      	subs	r3, #5
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	635a      	str	r2, [r3, #52]	; 0x34
 8001466:	e04c      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b0c      	cmp	r3, #12
 800146e:	d824      	bhi.n	80014ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b23      	subs	r3, #35	; 0x23
 8001482:	221f      	movs	r2, #31
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43da      	mvns	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	400a      	ands	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b23      	subs	r3, #35	; 0x23
 80014ac:	fa00 f203 	lsl.w	r2, r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
 80014b8:	e023      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b41      	subs	r3, #65	; 0x41
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b41      	subs	r3, #65	; 0x41
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_ADC_ConfigChannel+0x250>)
 8001504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a28      	ldr	r2, [pc, #160]	; (80015ac <HAL_ADC_ConfigChannel+0x254>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d10f      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1d8>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d10b      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_ADC_ConfigChannel+0x254>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x23a>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <HAL_ADC_ConfigChannel+0x258>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d003      	beq.n	800154c <HAL_ADC_ConfigChannel+0x1f4>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b11      	cmp	r3, #17
 800154a:	d122      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_ADC_ConfigChannel+0x258>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d111      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_ADC_ConfigChannel+0x25c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_ADC_ConfigChannel+0x260>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	0c9a      	lsrs	r2, r3, #18
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001584:	e002      	b.n	800158c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3b01      	subs	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40012300 	.word	0x40012300
 80015ac:	40012000 	.word	0x40012000
 80015b0:	10000012 	.word	0x10000012
 80015b4:	20000040 	.word	0x20000040
 80015b8:	431bde83 	.word	0x431bde83

080015bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c4:	4b79      	ldr	r3, [pc, #484]	; (80017ac <ADC_Init+0x1f0>)
 80015c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	431a      	orrs	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	021a      	lsls	r2, r3, #8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6899      	ldr	r1, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <ADC_Init+0x1f4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d022      	beq.n	800169a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6899      	ldr	r1, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	e00f      	b.n	80016ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0202 	bic.w	r2, r2, #2
 80016c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6899      	ldr	r1, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e1b      	ldrb	r3, [r3, #24]
 80016d4:	005a      	lsls	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	3b01      	subs	r3, #1
 8001714:	035a      	lsls	r2, r3, #13
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e007      	b.n	8001730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	3b01      	subs	r3, #1
 800174c:	051a      	lsls	r2, r3, #20
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6899      	ldr	r1, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001772:	025a      	lsls	r2, r3, #9
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	029a      	lsls	r2, r3, #10
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40012300 	.word	0x40012300
 80017b0:	0f000001 	.word	0x0f000001

080017b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d13c      	bne.n	8001848 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d12b      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d127      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001808:	2b00      	cmp	r3, #0
 800180a:	d119      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0220 	bic.w	r2, r2, #32
 800181a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7ff fd6b 	bl	800131c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001846:	e00e      	b.n	8001866 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fd75 	bl	8001344 <HAL_ADC_ErrorCallback>
}
 800185a:	e004      	b.n	8001866 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff fd57 	bl	8001330 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f043 0204 	orr.w	r2, r3, #4
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff fd4a 	bl	8001344 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0ed      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f004 feaa 	bl	8006630 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0202 	bic.w	r2, r2, #2
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff fbb2 	bl	8001054 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018f2:	e012      	b.n	800191a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f4:	f7ff fbae 	bl	8001054 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d90b      	bls.n	800191a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2205      	movs	r2, #5
 8001912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0c5      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e5      	bne.n	80018f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001938:	f7ff fb8c 	bl	8001054 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193e:	e012      	b.n	8001966 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001940:	f7ff fb88 	bl	8001054 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d90b      	bls.n	8001966 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2205      	movs	r2, #5
 800195e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e09f      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0e5      	beq.n	8001940 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e007      	b.n	800199e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e9b      	ldrb	r3, [r3, #26]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0220 	bic.w	r2, r2, #32
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7edb      	ldrb	r3, [r3, #27]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0210 	bic.w	r2, r2, #16
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e007      	b.n	8001a1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0210 	orr.w	r2, r2, #16
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0208 	orr.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e007      	b.n	8001a46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7f5b      	ldrb	r3, [r3, #29]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d108      	bne.n	8001a60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e007      	b.n	8001a70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	ea42 0103 	orr.w	r1, r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac8:	7cfb      	ldrb	r3, [r7, #19]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d003      	beq.n	8001ad6 <HAL_CAN_ConfigFilter+0x26>
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 80be 	bne.w	8001c52 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ad6:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <HAL_CAN_ConfigFilter+0x1bc>)
 8001ad8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001af0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	431a      	orrs	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2201      	movs	r2, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d123      	bne.n	8001b80 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3248      	adds	r2, #72	; 0x48
 8001b60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b76:	6979      	ldr	r1, [r7, #20]
 8001b78:	3348      	adds	r3, #72	; 0x48
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d122      	bne.n	8001bce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ba8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3248      	adds	r2, #72	; 0x48
 8001bae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc4:	6979      	ldr	r1, [r7, #20]
 8001bc6:	3348      	adds	r3, #72	; 0x48
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	401a      	ands	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001be8:	e007      	b.n	8001bfa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c14:	e007      	b.n	8001c26 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c44:	f023 0201 	bic.w	r2, r3, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e006      	b.n	8001c60 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40006400 	.word	0x40006400

08001c70 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d12e      	bne.n	8001ce2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f9da 	bl	8001054 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ca2:	e012      	b.n	8001cca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca4:	f7ff f9d6 	bl	8001054 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b0a      	cmp	r3, #10
 8001cb0:	d90b      	bls.n	8001cca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e012      	b.n	8001cf0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e5      	bne.n	8001ca4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e006      	b.n	8001cf0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d003      	beq.n	8001d1c <HAL_CAN_GetRxMessage+0x24>
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	f040 80f4 	bne.w	8001f04 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d116      	bne.n	8001d5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0e8      	b.n	8001f12 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0d9      	b.n	8001f12 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	331b      	adds	r3, #27
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0204 	and.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10c      	bne.n	8001d96 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	331b      	adds	r3, #27
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0d5b      	lsrs	r3, r3, #21
 8001d8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e00b      	b.n	8001dae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	331b      	adds	r3, #27
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	331b      	adds	r3, #27
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4413      	add	r3, r2
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	331b      	adds	r3, #27
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 020f 	and.w	r2, r3, #15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	331b      	adds	r3, #27
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4413      	add	r3, r2
 8001dea:	3304      	adds	r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	331b      	adds	r3, #27
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0a1a      	lsrs	r2, r3, #8
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0c1a      	lsrs	r2, r3, #16
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3302      	adds	r3, #2
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e1a      	lsrs	r2, r3, #24
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3304      	adds	r3, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0a1a      	lsrs	r2, r3, #8
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	3305      	adds	r3, #5
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0c1a      	lsrs	r2, r3, #16
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	3306      	adds	r3, #6
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0e1a      	lsrs	r2, r3, #24
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	3307      	adds	r3, #7
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0220 	orr.w	r2, r2, #32
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	e007      	b.n	8001f00 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e006      	b.n	8001f12 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
  }
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d002      	beq.n	8001f3c <HAL_CAN_ActivateNotification+0x1e>
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d109      	bne.n	8001f50 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6959      	ldr	r1, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e006      	b.n	8001f5e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b08a      	sub	sp, #40	; 0x28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07c      	beq.n	80020aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d023      	beq.n	8002002 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f005 f8f7 	bl	80071c0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fd2:	e016      	b.n	8002002 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	e00c      	b.n	8002002 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffa:	e002      	b.n	8002002 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f965 	bl	80022cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d024      	beq.n	8002056 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002014:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f005 f8dd 	bl	80071e0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002026:	e016      	b.n	8002056 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	e00c      	b.n	8002056 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	e002      	b.n	8002056 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f945 	bl	80022e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d024      	beq.n	80020aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002068:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 f8c3 	bl	8007200 <HAL_CAN_TxMailbox2CompleteCallback>
 800207a:	e016      	b.n	80020aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e00c      	b.n	80020aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	e002      	b.n	80020aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f925 	bl	80022f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2210      	movs	r2, #16
 80020cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2208      	movs	r2, #8
 80020e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f90c 	bl	8002308 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f005 f889 	bl	8007220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002128:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2210      	movs	r2, #16
 8002130:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8ee 	bl	8002330 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f8d5 	bl	800231c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2210      	movs	r2, #16
 800218c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8d8 	bl	8002344 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2208      	movs	r2, #8
 80021ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8d1 	bl	8002358 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d075      	beq.n	80022ac <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06c      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	2b00      	cmp	r3, #0
 8002226:	d03d      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d038      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002238:	2b30      	cmp	r3, #48	; 0x30
 800223a:	d017      	beq.n	800226c <HAL_CAN_IRQHandler+0x302>
 800223c:	2b30      	cmp	r3, #48	; 0x30
 800223e:	d804      	bhi.n	800224a <HAL_CAN_IRQHandler+0x2e0>
 8002240:	2b10      	cmp	r3, #16
 8002242:	d009      	beq.n	8002258 <HAL_CAN_IRQHandler+0x2ee>
 8002244:	2b20      	cmp	r3, #32
 8002246:	d00c      	beq.n	8002262 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002248:	e024      	b.n	8002294 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800224a:	2b50      	cmp	r3, #80	; 0x50
 800224c:	d018      	beq.n	8002280 <HAL_CAN_IRQHandler+0x316>
 800224e:	2b60      	cmp	r3, #96	; 0x60
 8002250:	d01b      	beq.n	800228a <HAL_CAN_IRQHandler+0x320>
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d00f      	beq.n	8002276 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002256:	e01d      	b.n	8002294 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002260:	e018      	b.n	8002294 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800226a:	e013      	b.n	8002294 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f043 0320 	orr.w	r3, r3, #32
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002274:	e00e      	b.n	8002294 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800227e:	e009      	b.n	8002294 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002288:	e004      	b.n	8002294 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002292:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2204      	movs	r2, #4
 80022aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f854 	bl	800236c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff29 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff3e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff8e 	bl	8002474 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff31 	bl	80023e4 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa2 	bl	80024dc <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7fe fd50 	bl	8001054 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e099      	b.n	80026f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e0:	e00f      	b.n	8002602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e2:	f7fe fd37 	bl	8001054 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d908      	bls.n	8002602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e078      	b.n	80026f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e8      	bne.n	80025e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_DMA_Init+0x158>)
 800261c:	4013      	ands	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4313      	orrs	r3, r2
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0307 	bic.w	r3, r3, #7
 8002682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b04      	cmp	r3, #4
 8002694:	d117      	bne.n	80026c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fa99 	bl	8002be0 <DMA_CheckFifoParam>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026c2:	2301      	movs	r3, #1
 80026c4:	e016      	b.n	80026f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa50 	bl	8002b74 <DMA_CalcBaseAndBitshift>
 80026d4:	4603      	mov	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	223f      	movs	r2, #63	; 0x3f
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	f010803f 	.word	0xf010803f

08002700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_DMA_Start_IT+0x26>
 8002722:	2302      	movs	r3, #2
 8002724:	e048      	b.n	80027b8 <HAL_DMA_Start_IT+0xb8>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d137      	bne.n	80027aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f9e2 	bl	8002b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0216 	orr.w	r2, r2, #22
 800276e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800277e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0208 	orr.w	r2, r2, #8
 8002796:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e005      	b.n	80027b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d004      	beq.n	80027de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e00c      	b.n	80027f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2205      	movs	r2, #5
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002810:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_DMA_IRQHandler+0x258>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a92      	ldr	r2, [pc, #584]	; (8002a60 <HAL_DMA_IRQHandler+0x25c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2208      	movs	r2, #8
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0204 	bic.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	2208      	movs	r2, #8
 800285e:	409a      	lsls	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d012      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2204      	movs	r2, #4
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2210      	movs	r2, #16
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d043      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03c      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2210      	movs	r2, #16
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d108      	bne.n	8002934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e01f      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
 8002944:	e016      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0208 	bic.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	2220      	movs	r2, #32
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 808e 	beq.w	8002aa2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8086 	beq.w	8002aa2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2220      	movs	r2, #32
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d136      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0216 	bic.w	r2, r2, #22
 80029bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_DMA_IRQHandler+0x1da>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	223f      	movs	r2, #63	; 0x3f
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07d      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
        }
        return;
 8002a1a:	e078      	b.n	8002b0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01c      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d108      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d030      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
 8002a48:	e02b      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
 8002a5a:	e022      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
 8002a5c:	20000040 	.word	0x20000040
 8002a60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0210 	bic.w	r2, r2, #16
 8002a80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d032      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d022      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d307      	bcc.n	8002aea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f2      	bne.n	8002ace <HAL_DMA_IRQHandler+0x2ca>
 8002ae8:	e000      	b.n	8002aec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002aea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
 8002b0c:	e000      	b.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b0e:	bf00      	nop
    }
  }
}
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d108      	bne.n	8002b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b56:	e007      	b.n	8002b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b10      	subs	r3, #16
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <DMA_CalcBaseAndBitshift+0x68>)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d909      	bls.n	8002bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb4:	e007      	b.n	8002bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	aaaaaaab 	.word	0xaaaaaaab
 8002bdc:	0800af70 	.word	0x0800af70

08002be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11f      	bne.n	8002c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d855      	bhi.n	8002cac <DMA_CheckFifoParam+0xcc>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <DMA_CheckFifoParam+0x28>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c2b 	.word	0x08002c2b
 8002c10:	08002c19 	.word	0x08002c19
 8002c14:	08002cad 	.word	0x08002cad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d045      	beq.n	8002cb0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e042      	b.n	8002cb0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c32:	d13f      	bne.n	8002cb4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e03c      	b.n	8002cb4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c42:	d121      	bne.n	8002c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d836      	bhi.n	8002cb8 <DMA_CheckFifoParam+0xd8>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <DMA_CheckFifoParam+0x70>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c67 	.word	0x08002c67
 8002c58:	08002c61 	.word	0x08002c61
 8002c5c:	08002c79 	.word	0x08002c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e02f      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d024      	beq.n	8002cbc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e021      	b.n	8002cbc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c80:	d11e      	bne.n	8002cc0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c86:	e01b      	b.n	8002cc0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d902      	bls.n	8002c94 <DMA_CheckFifoParam+0xb4>
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d003      	beq.n	8002c9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c92:	e018      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      break;
 8002c98:	e015      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00e      	beq.n	8002cc4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8002caa:	e00b      	b.n	8002cc4 <DMA_CheckFifoParam+0xe4>
      break;
 8002cac:	bf00      	nop
 8002cae:	e00a      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e008      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cb4:	bf00      	nop
 8002cb6:	e006      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cb8:	bf00      	nop
 8002cba:	e004      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc4:	bf00      	nop
    }
  } 
  
  return status; 
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e165      	b.n	8002fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 8154 	bne.w	8002fb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x4a>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d123      	bne.n	8002d66 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3208      	adds	r2, #8
 8002d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0203 	and.w	r2, r3, #3
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d00b      	beq.n	8002dba <HAL_GPIO_Init+0xe6>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dae:	2b11      	cmp	r3, #17
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b12      	cmp	r3, #18
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2203      	movs	r2, #3
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80ae 	beq.w	8002fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a5b      	ldr	r2, [pc, #364]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e76:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_GPIO_Init+0x300>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d025      	beq.n	8002eee <HAL_GPIO_Init+0x21a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4d      	ldr	r2, [pc, #308]	; (8002fdc <HAL_GPIO_Init+0x308>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_GPIO_Init+0x216>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4c      	ldr	r2, [pc, #304]	; (8002fe0 <HAL_GPIO_Init+0x30c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x212>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	; (8002fe4 <HAL_GPIO_Init+0x310>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x20e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <HAL_GPIO_Init+0x314>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x20a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a49      	ldr	r2, [pc, #292]	; (8002fec <HAL_GPIO_Init+0x318>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x206>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a48      	ldr	r2, [pc, #288]	; (8002ff0 <HAL_GPIO_Init+0x31c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x202>
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	e00c      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e00a      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002eda:	2305      	movs	r3, #5
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <HAL_GPIO_Init+0x300>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f32:	4a30      	ldr	r2, [pc, #192]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5c:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_GPIO_Init+0x320>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f ae96 	bls.w	8002cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	3724      	adds	r7, #36	; 0x24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020800 	.word	0x40020800
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40021400 	.word	0x40021400
 8002ff0:	40021800 	.word	0x40021800
 8002ff4:	40013c00 	.word	0x40013c00

08002ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
 8003004:	4613      	mov	r3, r2
 8003006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003008:	787b      	ldrb	r3, [r7, #1]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003014:	e003      	b.n	800301e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	619a      	str	r2, [r3, #24]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	401a      	ands	r2, r3
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	429a      	cmp	r2, r3
 8003042:	d104      	bne.n	800304e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	041a      	lsls	r2, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800304c:	e002      	b.n	8003054 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ca      	b.n	800320a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_ClockConfig+0x1b4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d90c      	bls.n	800309c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b64      	ldr	r3, [pc, #400]	; (8003214 <HAL_RCC_ClockConfig+0x1b4>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b62      	ldr	r3, [pc, #392]	; (8003214 <HAL_RCC_ClockConfig+0x1b4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0b6      	b.n	800320a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b4:	4b58      	ldr	r3, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a57      	ldr	r2, [pc, #348]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80030ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030cc:	4b52      	ldr	r3, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a51      	ldr	r2, [pc, #324]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80030d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	494c      	ldr	r1, [pc, #304]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d044      	beq.n	8003180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b46      	ldr	r3, [pc, #280]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d119      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07d      	b.n	800320a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	2b03      	cmp	r3, #3
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06d      	b.n	800320a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e065      	b.n	800320a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4933      	ldr	r1, [pc, #204]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003150:	f7fd ff80 	bl	8001054 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7fd ff7c 	bl	8001054 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e04d      	b.n	800320a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_ClockConfig+0x1b4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d20c      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_RCC_ClockConfig+0x1b4>)
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <HAL_RCC_ClockConfig+0x1b4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e030      	b.n	800320a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4915      	ldr	r1, [pc, #84]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	490d      	ldr	r1, [pc, #52]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031e6:	f000 f851 	bl	800328c <HAL_RCC_GetSysClockFreq>
 80031ea:	4601      	mov	r1, r0
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	5cd3      	ldrb	r3, [r2, r3]
 80031fa:	fa21 f303 	lsr.w	r3, r1, r3
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd fee2 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	0801e830 	.word	0x0801e830
 8003220:	20000040 	.word	0x20000040

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_GetHCLKFreq+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000040 	.word	0x20000040

0800323c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003240:	f7ff fff0 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003244:	4601      	mov	r1, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4a03      	ldr	r2, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	0801e840 	.word	0x0801e840

08003264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003268:	f7ff ffdc 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 800326c:	4601      	mov	r1, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0b5b      	lsrs	r3, r3, #13
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4a03      	ldr	r2, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	0801e840 	.word	0x0801e840

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a6:	4bc6      	ldr	r3, [pc, #792]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	f200 817e 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x324>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_RCC_GetSysClockFreq+0x30>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080035b1 	.word	0x080035b1
 80032c4:	080035b1 	.word	0x080035b1
 80032c8:	080035b1 	.word	0x080035b1
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	080035b1 	.word	0x080035b1
 80032d4:	080035b1 	.word	0x080035b1
 80032d8:	080035b1 	.word	0x080035b1
 80032dc:	080032fd 	.word	0x080032fd
 80032e0:	080035b1 	.word	0x080035b1
 80032e4:	080035b1 	.word	0x080035b1
 80032e8:	080035b1 	.word	0x080035b1
 80032ec:	08003459 	.word	0x08003459
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4bb4      	ldr	r3, [pc, #720]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80032f2:	613b      	str	r3, [r7, #16]
       break;
 80032f4:	e15f      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4bb4      	ldr	r3, [pc, #720]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80032f8:	613b      	str	r3, [r7, #16]
      break;
 80032fa:	e15c      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4bb0      	ldr	r3, [pc, #704]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003304:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4bae      	ldr	r3, [pc, #696]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04a      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4bab      	ldr	r3, [pc, #684]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	ea03 0501 	and.w	r5, r3, r1
 8003328:	ea04 0602 	and.w	r6, r4, r2
 800332c:	4629      	mov	r1, r5
 800332e:	4632      	mov	r2, r6
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	f04f 0400 	mov.w	r4, #0
 8003338:	0154      	lsls	r4, r2, #5
 800333a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800333e:	014b      	lsls	r3, r1, #5
 8003340:	4619      	mov	r1, r3
 8003342:	4622      	mov	r2, r4
 8003344:	1b49      	subs	r1, r1, r5
 8003346:	eb62 0206 	sbc.w	r2, r2, r6
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	0194      	lsls	r4, r2, #6
 8003354:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003358:	018b      	lsls	r3, r1, #6
 800335a:	1a5b      	subs	r3, r3, r1
 800335c:	eb64 0402 	sbc.w	r4, r4, r2
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	00e2      	lsls	r2, r4, #3
 800336a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800336e:	00d9      	lsls	r1, r3, #3
 8003370:	460b      	mov	r3, r1
 8003372:	4614      	mov	r4, r2
 8003374:	195b      	adds	r3, r3, r5
 8003376:	eb44 0406 	adc.w	r4, r4, r6
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	0262      	lsls	r2, r4, #9
 8003384:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003388:	0259      	lsls	r1, r3, #9
 800338a:	460b      	mov	r3, r1
 800338c:	4614      	mov	r4, r2
 800338e:	4618      	mov	r0, r3
 8003390:	4621      	mov	r1, r4
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f04f 0400 	mov.w	r4, #0
 8003398:	461a      	mov	r2, r3
 800339a:	4623      	mov	r3, r4
 800339c:	f7fd fc74 	bl	8000c88 <__aeabi_uldivmod>
 80033a0:	4603      	mov	r3, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e049      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a8:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	f04f 0400 	mov.w	r4, #0
 80033b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	ea03 0501 	and.w	r5, r3, r1
 80033be:	ea04 0602 	and.w	r6, r4, r2
 80033c2:	4629      	mov	r1, r5
 80033c4:	4632      	mov	r2, r6
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	0154      	lsls	r4, r2, #5
 80033d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033d4:	014b      	lsls	r3, r1, #5
 80033d6:	4619      	mov	r1, r3
 80033d8:	4622      	mov	r2, r4
 80033da:	1b49      	subs	r1, r1, r5
 80033dc:	eb62 0206 	sbc.w	r2, r2, r6
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	f04f 0400 	mov.w	r4, #0
 80033e8:	0194      	lsls	r4, r2, #6
 80033ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033ee:	018b      	lsls	r3, r1, #6
 80033f0:	1a5b      	subs	r3, r3, r1
 80033f2:	eb64 0402 	sbc.w	r4, r4, r2
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	00e2      	lsls	r2, r4, #3
 8003400:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003404:	00d9      	lsls	r1, r3, #3
 8003406:	460b      	mov	r3, r1
 8003408:	4614      	mov	r4, r2
 800340a:	195b      	adds	r3, r3, r5
 800340c:	eb44 0406 	adc.w	r4, r4, r6
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	02a2      	lsls	r2, r4, #10
 800341a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800341e:	0299      	lsls	r1, r3, #10
 8003420:	460b      	mov	r3, r1
 8003422:	4614      	mov	r4, r2
 8003424:	4618      	mov	r0, r3
 8003426:	4621      	mov	r1, r4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f04f 0400 	mov.w	r4, #0
 800342e:	461a      	mov	r2, r3
 8003430:	4623      	mov	r3, r4
 8003432:	f7fd fc29 	bl	8000c88 <__aeabi_uldivmod>
 8003436:	4603      	mov	r3, r0
 8003438:	460c      	mov	r4, r1
 800343a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800343c:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	3301      	adds	r3, #1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	613b      	str	r3, [r7, #16]
      break;
 8003456:	e0ae      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003460:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003462:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d04a      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b54      	ldr	r3, [pc, #336]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	f240 11ff 	movw	r1, #511	; 0x1ff
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	ea03 0501 	and.w	r5, r3, r1
 8003484:	ea04 0602 	and.w	r6, r4, r2
 8003488:	4629      	mov	r1, r5
 800348a:	4632      	mov	r2, r6
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	f04f 0400 	mov.w	r4, #0
 8003494:	0154      	lsls	r4, r2, #5
 8003496:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800349a:	014b      	lsls	r3, r1, #5
 800349c:	4619      	mov	r1, r3
 800349e:	4622      	mov	r2, r4
 80034a0:	1b49      	subs	r1, r1, r5
 80034a2:	eb62 0206 	sbc.w	r2, r2, r6
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	f04f 0400 	mov.w	r4, #0
 80034ae:	0194      	lsls	r4, r2, #6
 80034b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034b4:	018b      	lsls	r3, r1, #6
 80034b6:	1a5b      	subs	r3, r3, r1
 80034b8:	eb64 0402 	sbc.w	r4, r4, r2
 80034bc:	f04f 0100 	mov.w	r1, #0
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	00e2      	lsls	r2, r4, #3
 80034c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034ca:	00d9      	lsls	r1, r3, #3
 80034cc:	460b      	mov	r3, r1
 80034ce:	4614      	mov	r4, r2
 80034d0:	195b      	adds	r3, r3, r5
 80034d2:	eb44 0406 	adc.w	r4, r4, r6
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	0262      	lsls	r2, r4, #9
 80034e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034e4:	0259      	lsls	r1, r3, #9
 80034e6:	460b      	mov	r3, r1
 80034e8:	4614      	mov	r4, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	4621      	mov	r1, r4
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f04f 0400 	mov.w	r4, #0
 80034f4:	461a      	mov	r2, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	f7fd fbc6 	bl	8000c88 <__aeabi_uldivmod>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e049      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	f04f 0400 	mov.w	r4, #0
 800350e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	ea03 0501 	and.w	r5, r3, r1
 800351a:	ea04 0602 	and.w	r6, r4, r2
 800351e:	4629      	mov	r1, r5
 8003520:	4632      	mov	r2, r6
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f04f 0400 	mov.w	r4, #0
 800352a:	0154      	lsls	r4, r2, #5
 800352c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003530:	014b      	lsls	r3, r1, #5
 8003532:	4619      	mov	r1, r3
 8003534:	4622      	mov	r2, r4
 8003536:	1b49      	subs	r1, r1, r5
 8003538:	eb62 0206 	sbc.w	r2, r2, r6
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f04f 0400 	mov.w	r4, #0
 8003544:	0194      	lsls	r4, r2, #6
 8003546:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800354a:	018b      	lsls	r3, r1, #6
 800354c:	1a5b      	subs	r3, r3, r1
 800354e:	eb64 0402 	sbc.w	r4, r4, r2
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	00e2      	lsls	r2, r4, #3
 800355c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003560:	00d9      	lsls	r1, r3, #3
 8003562:	460b      	mov	r3, r1
 8003564:	4614      	mov	r4, r2
 8003566:	195b      	adds	r3, r3, r5
 8003568:	eb44 0406 	adc.w	r4, r4, r6
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	02a2      	lsls	r2, r4, #10
 8003576:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800357a:	0299      	lsls	r1, r3, #10
 800357c:	460b      	mov	r3, r1
 800357e:	4614      	mov	r4, r2
 8003580:	4618      	mov	r0, r3
 8003582:	4621      	mov	r1, r4
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f04f 0400 	mov.w	r4, #0
 800358a:	461a      	mov	r2, r3
 800358c:	4623      	mov	r3, r4
 800358e:	f7fd fb7b 	bl	8000c88 <__aeabi_uldivmod>
 8003592:	4603      	mov	r3, r0
 8003594:	460c      	mov	r4, r1
 8003596:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x334>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	0f1b      	lsrs	r3, r3, #28
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	613b      	str	r3, [r7, #16]
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x338>)
 80035b2:	613b      	str	r3, [r7, #16]
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	693b      	ldr	r3, [r7, #16]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200

080035cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8083 	beq.w	80036ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035e6:	4b95      	ldr	r3, [pc, #596]	; (800383c <HAL_RCC_OscConfig+0x270>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d019      	beq.n	8003626 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035f2:	4b92      	ldr	r3, [pc, #584]	; (800383c <HAL_RCC_OscConfig+0x270>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d106      	bne.n	800360c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035fe:	4b8f      	ldr	r3, [pc, #572]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360a:	d00c      	beq.n	8003626 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360c:	4b8b      	ldr	r3, [pc, #556]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d112      	bne.n	800363e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003618:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003624:	d10b      	bne.n	800363e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003626:	4b85      	ldr	r3, [pc, #532]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d05b      	beq.n	80036ea <HAL_RCC_OscConfig+0x11e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d157      	bne.n	80036ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e216      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x8a>
 8003648:	4b7c      	ldr	r3, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7b      	ldr	r2, [pc, #492]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e01d      	b.n	8003692 <HAL_RCC_OscConfig+0xc6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365e:	d10c      	bne.n	800367a <HAL_RCC_OscConfig+0xae>
 8003660:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b73      	ldr	r3, [pc, #460]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a72      	ldr	r2, [pc, #456]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e00b      	b.n	8003692 <HAL_RCC_OscConfig+0xc6>
 800367a:	4b70      	ldr	r3, [pc, #448]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6f      	ldr	r2, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6c      	ldr	r2, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800368c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d013      	beq.n	80036c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fd fcdb 	bl	8001054 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a2:	f7fd fcd7 	bl	8001054 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b64      	cmp	r3, #100	; 0x64
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1db      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b4:	4b61      	ldr	r3, [pc, #388]	; (800383c <HAL_RCC_OscConfig+0x270>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0xd6>
 80036c0:	e014      	b.n	80036ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fd fcc7 	bl	8001054 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ca:	f7fd fcc3 	bl	8001054 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b64      	cmp	r3, #100	; 0x64
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1c7      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036dc:	4b57      	ldr	r3, [pc, #348]	; (800383c <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0xfe>
 80036e8:	e000      	b.n	80036ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d06f      	beq.n	80037d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_OscConfig+0x270>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003704:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800370c:	2b08      	cmp	r3, #8
 800370e:	d105      	bne.n	800371c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003710:	4b4a      	ldr	r3, [pc, #296]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371c:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003724:	2b0c      	cmp	r3, #12
 8003726:	d11c      	bne.n	8003762 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003728:	4b44      	ldr	r3, [pc, #272]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d116      	bne.n	8003762 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x180>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e18f      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4938      	ldr	r1, [pc, #224]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003760:	e03a      	b.n	80037d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d020      	beq.n	80037ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376a:	4b35      	ldr	r3, [pc, #212]	; (8003840 <HAL_RCC_OscConfig+0x274>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fc70 	bl	8001054 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7fd fc6c 	bl	8001054 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e170      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4925      	ldr	r1, [pc, #148]	; (800383c <HAL_RCC_OscConfig+0x270>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
 80037aa:	e015      	b.n	80037d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x274>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fd fc4f 	bl	8001054 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ba:	f7fd fc4b 	bl	8001054 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e14f      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d037      	beq.n	8003854 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d016      	beq.n	800381a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ec:	4b15      	ldr	r3, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x278>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fd fc2f 	bl	8001054 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fd fc2b 	bl	8001054 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e12f      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x270>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x22e>
 8003818:	e01c      	b.n	8003854 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_OscConfig+0x278>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd fc18 	bl	8001054 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003826:	e00f      	b.n	8003848 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003828:	f7fd fc14 	bl	8001054 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d908      	bls.n	8003848 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e118      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	42470000 	.word	0x42470000
 8003844:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	4b8a      	ldr	r3, [pc, #552]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 800384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e9      	bne.n	8003828 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8097 	beq.w	8003990 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003866:	4b83      	ldr	r3, [pc, #524]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a7e      	ldr	r2, [pc, #504]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
 8003882:	4b7c      	ldr	r3, [pc, #496]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003892:	4b79      	ldr	r3, [pc, #484]	; (8003a78 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389e:	4b76      	ldr	r3, [pc, #472]	; (8003a78 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a75      	ldr	r2, [pc, #468]	; (8003a78 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7fd fbd3 	bl	8001054 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fd fbcf 	bl	8001054 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0d3      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_RCC_OscConfig+0x4ac>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x31a>
 80038d8:	4b66      	ldr	r3, [pc, #408]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	e01c      	b.n	8003920 <HAL_RCC_OscConfig+0x354>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b05      	cmp	r3, #5
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x33c>
 80038ee:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a60      	ldr	r2, [pc, #384]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	4b5e      	ldr	r3, [pc, #376]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	4a5d      	ldr	r2, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6713      	str	r3, [r2, #112]	; 0x70
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0x354>
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a59      	ldr	r2, [pc, #356]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
 8003914:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 800391a:	f023 0304 	bic.w	r3, r3, #4
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7fd fb94 	bl	8001054 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd fb90 	bl	8001054 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e092      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0ee      	beq.n	8003930 <HAL_RCC_OscConfig+0x364>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fd fb7e 	bl	8001054 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fd fb7a 	bl	8001054 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e07c      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003972:	4b40      	ldr	r3, [pc, #256]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ee      	bne.n	800395c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d068      	beq.n	8003a6a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d060      	beq.n	8003a66 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d145      	bne.n	8003a38 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <HAL_RCC_OscConfig+0x4b0>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd fb4f 	bl	8001054 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fd fb4b 	bl	8001054 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e04f      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	019b      	lsls	r3, r3, #6
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	071b      	lsls	r3, r3, #28
 8003a04:	491b      	ldr	r1, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_RCC_OscConfig+0x4b0>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fb20 	bl	8001054 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fd fb1c 	bl	8001054 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e020      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x44c>
 8003a36:	e018      	b.n	8003a6a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCC_OscConfig+0x4b0>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fb09 	bl	8001054 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd fb05 	bl	8001054 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e009      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_OscConfig+0x4a8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x47a>
 8003a64:	e001      	b.n	8003a6a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	42470060 	.word	0x42470060

08003a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e056      	b.n	8003b40 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f004 fbfb 	bl	80082a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	ea42 0103 	orr.w	r1, r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	f003 0104 	and.w	r1, r3, #4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_SPI_TransmitReceive_IT+0x20>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e075      	b.n	8003c54 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b76:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b7e:	7dbb      	ldrb	r3, [r7, #22]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d00d      	beq.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x58>
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8a:	d106      	bne.n	8003b9a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <HAL_SPI_TransmitReceive_IT+0x52>
 8003b94:	7dbb      	ldrb	r3, [r7, #22]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b9e:	e054      	b.n	8003c4a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bb6:	e048      	b.n	8003c4a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d003      	beq.n	8003bcc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	887a      	ldrh	r2, [r7, #2]
 8003bee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a17      	ldr	r2, [pc, #92]	; (8003c64 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
 8003c0a:	e005      	b.n	8003c18 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <HAL_SPI_TransmitReceive_IT+0x124>)
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003c26:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d008      	beq.n	8003c48 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e000      	b.n	8003c4a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003c48:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	08003f99 	.word	0x08003f99
 8003c64:	08003ff9 	.word	0x08003ff9
 8003c68:	08003ed5 	.word	0x08003ed5
 8003c6c:	08003f39 	.word	0x08003f39

08003c70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
    return;
 8003cb2:	e0d8      	b.n	8003e66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_SPI_IRQHandler+0x66>
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	09db      	lsrs	r3, r3, #7
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
    return;
 8003cd4:	e0c7      	b.n	8003e66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_SPI_IRQHandler+0x8c>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_SPI_IRQHandler+0x8c>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80b5 	beq.w	8003e66 <HAL_SPI_IRQHandler+0x1f6>
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80ae 	beq.w	8003e66 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d023      	beq.n	8003d5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d011      	beq.n	8003d46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0204 	orr.w	r2, r3, #4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	e00b      	b.n	8003d5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	693b      	ldr	r3, [r7, #16]
        return;
 8003d5c:	e083      	b.n	8003e66 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d014      	beq.n	8003d94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00c      	beq.n	8003dba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0208 	orr.w	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d050      	beq.n	8003e64 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d104      	bne.n	8003dee <HAL_SPI_IRQHandler+0x17e>
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d034      	beq.n	8003e58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0203 	bic.w	r2, r2, #3
 8003dfc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d011      	beq.n	8003e2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_SPI_IRQHandler+0x1fc>)
 8003e0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fcd4 	bl	80027c0 <HAL_DMA_Abort_IT>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <HAL_SPI_IRQHandler+0x1fc>)
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fcbe 	bl	80027c0 <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e56:	e003      	b.n	8003e60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f81d 	bl	8003e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e5e:	e000      	b.n	8003e62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e60:	bf00      	nop
    return;
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
  }
}
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	08003ead 	.word	0x08003ead

08003e70 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ffe6 	bl	8003e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f103 020c 	add.w	r2, r3, #12
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10f      	bne.n	8003f30 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f940 	bl	80041b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	7812      	ldrb	r2, [r2, #0]
 8003f4c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10f      	bne.n	8003f90 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f7e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f910 	bl	80041b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	b292      	uxth	r2, r2
 8003fac:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10f      	bne.n	8003ff0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fde:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8e0 	bl	80041b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	881a      	ldrh	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	1c9a      	adds	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800403c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8b1 	bl	80041b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004066:	e04c      	b.n	8004102 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d048      	beq.n	8004102 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004070:	f7fc fff0 	bl	8001054 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d902      	bls.n	8004086 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d13d      	bne.n	8004102 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409e:	d111      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a8:	d004      	beq.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d107      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040cc:	d10f      	bne.n	80040ee <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e00f      	b.n	8004122 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	bf0c      	ite	eq
 8004112:	2301      	moveq	r3, #1
 8004114:	2300      	movne	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	429a      	cmp	r2, r3
 800411e:	d1a3      	bne.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <SPI_EndRxTxTransaction+0x7c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <SPI_EndRxTxTransaction+0x80>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0d5b      	lsrs	r3, r3, #21
 8004144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004148:	fb02 f303 	mul.w	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004156:	d112      	bne.n	800417e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff ff77 	bl	8004056 <SPI_WaitFlagStateUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f043 0220 	orr.w	r2, r3, #32
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e00f      	b.n	800419e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3b01      	subs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d0f2      	beq.n	800417e <SPI_EndRxTxTransaction+0x52>
 8004198:	e000      	b.n	800419c <SPI_EndRxTxTransaction+0x70>
        break;
 800419a:	bf00      	nop
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000040 	.word	0x20000040
 80041ac:	165e9f81 	.word	0x165e9f81

080041b0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80041b8:	4b35      	ldr	r3, [pc, #212]	; (8004290 <SPI_CloseRxTx_ISR+0xe0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a35      	ldr	r2, [pc, #212]	; (8004294 <SPI_CloseRxTx_ISR+0xe4>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	0a5b      	lsrs	r3, r3, #9
 80041c4:	2264      	movs	r2, #100	; 0x64
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80041cc:	f7fc ff42 	bl	8001054 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0220 	bic.w	r2, r2, #32
 80041e0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041f4:	e009      	b.n	800420a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0eb      	beq.n	80041e2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	2164      	movs	r1, #100	; 0x64
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ff8c 	bl	800412c <SPI_EndRxTxTransaction>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	2b00      	cmp	r3, #0
 800424a:	d115      	bne.n	8004278 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b04      	cmp	r3, #4
 8004256:	d107      	bne.n	8004268 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fe05 	bl	8003e70 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004266:	e00e      	b.n	8004286 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fe07 	bl	8003e84 <HAL_SPI_TxRxCpltCallback>
}
 8004276:	e006      	b.n	8004286 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fe09 	bl	8003e98 <HAL_SPI_ErrorCallback>
}
 8004286:	bf00      	nop
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000040 	.word	0x20000040
 8004294:	057619f1 	.word	0x057619f1

08004298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e01d      	b.n	80042e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f004 fa32 	bl	8008728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 fb70 	bl	80049bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e01d      	b.n	800433c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f815 	bl	8004344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f000 fb45 	bl	80049bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d841      	bhi.n	80043ec <HAL_TIM_PWM_Start_IT+0x94>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <HAL_TIM_PWM_Start_IT+0x18>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043ed 	.word	0x080043ed
 8004378:	080043ed 	.word	0x080043ed
 800437c:	080043ed 	.word	0x080043ed
 8004380:	080043b7 	.word	0x080043b7
 8004384:	080043ed 	.word	0x080043ed
 8004388:	080043ed 	.word	0x080043ed
 800438c:	080043ed 	.word	0x080043ed
 8004390:	080043c9 	.word	0x080043c9
 8004394:	080043ed 	.word	0x080043ed
 8004398:	080043ed 	.word	0x080043ed
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043db 	.word	0x080043db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0202 	orr.w	r2, r2, #2
 80043b2:	60da      	str	r2, [r3, #12]
      break;
 80043b4:	e01b      	b.n	80043ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0204 	orr.w	r2, r2, #4
 80043c4:	60da      	str	r2, [r3, #12]
      break;
 80043c6:	e012      	b.n	80043ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0208 	orr.w	r2, r2, #8
 80043d6:	60da      	str	r2, [r3, #12]
      break;
 80043d8:	e009      	b.n	80043ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0210 	orr.w	r2, r2, #16
 80043e8:	60da      	str	r2, [r3, #12]
      break;
 80043ea:	e000      	b.n	80043ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80043ec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2201      	movs	r2, #1
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fdca 	bl	8004f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_TIM_PWM_Start_IT+0x100>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_TIM_PWM_Start_IT+0xb8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <HAL_TIM_PWM_Start_IT+0x104>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_TIM_PWM_Start_IT+0xbc>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_TIM_PWM_Start_IT+0xbe>
 8004414:	2300      	movs	r3, #0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b06      	cmp	r3, #6
 800443a:	d007      	beq.n	800444c <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0202 	mvn.w	r2, #2
 800448c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa6b 	bl	800497e <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa5d 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa6e 	bl	8004992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0204 	mvn.w	r2, #4
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa41 	bl	800497e <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa33 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fa44 	bl	8004992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b08      	cmp	r3, #8
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0208 	mvn.w	r2, #8
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2204      	movs	r2, #4
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa17 	bl	800497e <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa09 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fa1a 	bl	8004992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b10      	cmp	r3, #16
 8004570:	d122      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d11b      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2208      	movs	r2, #8
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9ed 	bl	800497e <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9df 	bl	800496a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9f0 	bl	8004992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10e      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0201 	mvn.w	r2, #1
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f002 fe56 	bl	8007290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d10e      	bne.n	8004610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d107      	bne.n	8004610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fddb 	bl	80051c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d10e      	bne.n	800463c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d107      	bne.n	800463c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f9b5 	bl	80049a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b20      	cmp	r3, #32
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b20      	cmp	r3, #32
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0220 	mvn.w	r2, #32
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fda5 	bl	80051b2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004686:	2302      	movs	r3, #2
 8004688:	e0b4      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	f200 809f 	bhi.w	80047e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080047e1 	.word	0x080047e1
 80046b0:	080047e1 	.word	0x080047e1
 80046b4:	080047e1 	.word	0x080047e1
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	080047e1 	.word	0x080047e1
 80046c0:	080047e1 	.word	0x080047e1
 80046c4:	080047e1 	.word	0x080047e1
 80046c8:	0800475f 	.word	0x0800475f
 80046cc:	080047e1 	.word	0x080047e1
 80046d0:	080047e1 	.word	0x080047e1
 80046d4:	080047e1 	.word	0x080047e1
 80046d8:	0800479f 	.word	0x0800479f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa0a 	bl	8004afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]
      break;
 800471a:	e062      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fa5a 	bl	8004bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      break;
 800475c:	e041      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 faaf 	bl	8004cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0204 	bic.w	r2, r2, #4
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
      break;
 800479c:	e021      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fb03 	bl	8004db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
      break;
 80047de:	e000      	b.n	80047e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80047e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIM_ConfigClockSource+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e0a6      	b.n	8004962 <HAL_TIM_ConfigClockSource+0x166>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d067      	beq.n	800491c <HAL_TIM_ConfigClockSource+0x120>
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d80b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x6c>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d073      	beq.n	800493c <HAL_TIM_ConfigClockSource+0x140>
 8004854:	2b10      	cmp	r3, #16
 8004856:	d802      	bhi.n	800485e <HAL_TIM_ConfigClockSource+0x62>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d06f      	beq.n	800493c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800485c:	e078      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800485e:	2b20      	cmp	r3, #32
 8004860:	d06c      	beq.n	800493c <HAL_TIM_ConfigClockSource+0x140>
 8004862:	2b30      	cmp	r3, #48	; 0x30
 8004864:	d06a      	beq.n	800493c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004866:	e073      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004868:	2b70      	cmp	r3, #112	; 0x70
 800486a:	d00d      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0x8c>
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d804      	bhi.n	800487a <HAL_TIM_ConfigClockSource+0x7e>
 8004870:	2b50      	cmp	r3, #80	; 0x50
 8004872:	d033      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0xe0>
 8004874:	2b60      	cmp	r3, #96	; 0x60
 8004876:	d041      	beq.n	80048fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004878:	e06a      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d066      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x152>
 8004880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004884:	d017      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004886:	e063      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6899      	ldr	r1, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f000 fb5a 	bl	8004f50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	609a      	str	r2, [r3, #8]
      break;
 80048b4:	e04c      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6899      	ldr	r1, [r3, #8]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f000 fb43 	bl	8004f50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d8:	609a      	str	r2, [r3, #8]
      break;
 80048da:	e039      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f000 fab7 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2150      	movs	r1, #80	; 0x50
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fb10 	bl	8004f1a <TIM_ITRx_SetConfig>
      break;
 80048fa:	e029      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	461a      	mov	r2, r3
 800490a:	f000 fad6 	bl	8004eba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2160      	movs	r1, #96	; 0x60
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fb00 	bl	8004f1a <TIM_ITRx_SetConfig>
      break;
 800491a:	e019      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	461a      	mov	r2, r3
 800492a:	f000 fa97 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	4618      	mov	r0, r3
 8004936:	f000 faf0 	bl	8004f1a <TIM_ITRx_SetConfig>
      break;
 800493a:	e009      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f000 fae7 	bl	8004f1a <TIM_ITRx_SetConfig>
      break;
 800494c:	e000      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800494e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a40      	ldr	r2, [pc, #256]	; (8004ad0 <TIM_Base_SetConfig+0x114>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049da:	d00f      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a3d      	ldr	r2, [pc, #244]	; (8004ad4 <TIM_Base_SetConfig+0x118>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00b      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a3c      	ldr	r2, [pc, #240]	; (8004ad8 <TIM_Base_SetConfig+0x11c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a3b      	ldr	r2, [pc, #236]	; (8004adc <TIM_Base_SetConfig+0x120>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a3a      	ldr	r2, [pc, #232]	; (8004ae0 <TIM_Base_SetConfig+0x124>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d108      	bne.n	8004a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2f      	ldr	r2, [pc, #188]	; (8004ad0 <TIM_Base_SetConfig+0x114>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d02b      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1c:	d027      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2c      	ldr	r2, [pc, #176]	; (8004ad4 <TIM_Base_SetConfig+0x118>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d023      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <TIM_Base_SetConfig+0x11c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01f      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	; (8004adc <TIM_Base_SetConfig+0x120>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01b      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <TIM_Base_SetConfig+0x124>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d017      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a28      	ldr	r2, [pc, #160]	; (8004ae4 <TIM_Base_SetConfig+0x128>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a27      	ldr	r2, [pc, #156]	; (8004ae8 <TIM_Base_SetConfig+0x12c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00f      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a26      	ldr	r2, [pc, #152]	; (8004aec <TIM_Base_SetConfig+0x130>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a25      	ldr	r2, [pc, #148]	; (8004af0 <TIM_Base_SetConfig+0x134>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a24      	ldr	r2, [pc, #144]	; (8004af4 <TIM_Base_SetConfig+0x138>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a23      	ldr	r2, [pc, #140]	; (8004af8 <TIM_Base_SetConfig+0x13c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d108      	bne.n	8004a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <TIM_Base_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0xf8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <TIM_Base_SetConfig+0x124>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d103      	bne.n	8004abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	615a      	str	r2, [r3, #20]
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	40010400 	.word	0x40010400
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800
 8004af0:	40001800 	.word	0x40001800
 8004af4:	40001c00 	.word	0x40001c00
 8004af8:	40002000 	.word	0x40002000

08004afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0302 	bic.w	r3, r3, #2
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <TIM_OC1_SetConfig+0xd8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_OC1_SetConfig+0x64>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <TIM_OC1_SetConfig+0xdc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10c      	bne.n	8004b7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0308 	bic.w	r3, r3, #8
 8004b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <TIM_OC1_SetConfig+0xd8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_OC1_SetConfig+0x8e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <TIM_OC1_SetConfig+0xdc>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d111      	bne.n	8004bae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40010400 	.word	0x40010400

08004bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0210 	bic.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0320 	bic.w	r3, r3, #32
 8004c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <TIM_OC2_SetConfig+0xe4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC2_SetConfig+0x68>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a21      	ldr	r2, [pc, #132]	; (8004cc4 <TIM_OC2_SetConfig+0xe8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10d      	bne.n	8004c60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <TIM_OC2_SetConfig+0xe4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_OC2_SetConfig+0x94>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <TIM_OC2_SetConfig+0xe8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d113      	bne.n	8004c98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0303 	bic.w	r3, r3, #3
 8004cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <TIM_OC3_SetConfig+0xe0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC3_SetConfig+0x66>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <TIM_OC3_SetConfig+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10d      	bne.n	8004d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <TIM_OC3_SetConfig+0xe0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_OC3_SetConfig+0x92>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <TIM_OC3_SetConfig+0xe4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d113      	bne.n	8004d82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40010400 	.word	0x40010400

08004db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	031b      	lsls	r3, r3, #12
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <TIM_OC4_SetConfig+0xa4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC4_SetConfig+0x68>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <TIM_OC4_SetConfig+0xa8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d109      	bne.n	8004e2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	019b      	lsls	r3, r3, #6
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40010400 	.word	0x40010400

08004e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 030a 	bic.w	r3, r3, #10
 8004e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0210 	bic.w	r2, r3, #16
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f043 0307 	orr.w	r3, r3, #7
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	609a      	str	r2, [r3, #8]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	609a      	str	r2, [r3, #8]
}
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1a      	ldr	r2, [r3, #32]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1a      	ldr	r2, [r3, #32]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d00d      	beq.n	8005006 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d014      	beq.n	8005018 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d000      	beq.n	8004ff4 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8004ff2:	e01a      	b.n	800502a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0202 	orr.w	r2, r2, #2
 8005002:	60da      	str	r2, [r3, #12]
      break;
 8005004:	e011      	b.n	800502a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0204 	orr.w	r2, r2, #4
 8005014:	60da      	str	r2, [r3, #12]
      break;
 8005016:	e008      	b.n	800502a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0208 	orr.w	r2, r2, #8
 8005026:	60da      	str	r2, [r3, #12]
      break;
 8005028:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005038:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2204      	movs	r2, #4
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f8c9 	bl	80051da <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005056:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b06      	cmp	r3, #6
 8005068:	d007      	beq.n	800507a <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005098:	2302      	movs	r3, #2
 800509a:	e032      	b.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005126:	2302      	movs	r3, #2
 8005128:	e03d      	b.n	80051a6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80051da:	b480      	push	{r7}
 80051dc:	b087      	sub	sp, #28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2204      	movs	r2, #4
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	401a      	ands	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	431a      	orrs	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e03f      	b.n	80052b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f003 fb38 	bl	80088c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb47 	bl	80058fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800527c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800528c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800529c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b088      	sub	sp, #32
 80052c2:	af02      	add	r7, sp, #8
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	f040 8083 	bne.w	80053e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Transmit+0x2e>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e07b      	b.n	80053e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Transmit+0x40>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e074      	b.n	80053e8 <HAL_UART_Transmit+0x12a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2221      	movs	r2, #33	; 0x21
 8005310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005314:	f7fb fe9e 	bl	8001054 <HAL_GetTick>
 8005318:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005326:	e042      	b.n	80053ae <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	d122      	bne.n	8005386 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2200      	movs	r2, #0
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f96a 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e046      	b.n	80053e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d103      	bne.n	800537e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3302      	adds	r3, #2
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	e017      	b.n	80053ae <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	3301      	adds	r3, #1
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	e013      	b.n	80053ae <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2200      	movs	r2, #0
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f947 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e023      	b.n	80053e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	60ba      	str	r2, [r7, #8]
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1b7      	bne.n	8005328 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f92e 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e00a      	b.n	80053e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
  }
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_UART_IRQHandler+0x52>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f9dc 	bl	80057f8 <UART_Receive_IT>
      return;
 8005440:	e0cc      	b.n	80055dc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80ab 	beq.w	80055a0 <HAL_UART_IRQHandler+0x1b0>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_UART_IRQHandler+0x70>
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80a0 	beq.w	80055a0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_UART_IRQHandler+0x90>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	f043 0201 	orr.w	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_UART_IRQHandler+0xb0>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005498:	f043 0202 	orr.w	r2, r3, #2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_UART_IRQHandler+0xd0>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b8:	f043 0204 	orr.w	r2, r3, #4
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_UART_IRQHandler+0xf0>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	f043 0208 	orr.w	r2, r3, #8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d078      	beq.n	80055da <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_UART_IRQHandler+0x112>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f97b 	bl	80057f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <HAL_UART_IRQHandler+0x13a>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d031      	beq.n	800558e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8c4 	bl	80056b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d123      	bne.n	8005586 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005552:	2b00      	cmp	r3, #0
 8005554:	d013      	beq.n	800557e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <HAL_UART_IRQHandler+0x1f4>)
 800555c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	4618      	mov	r0, r3
 8005564:	f7fd f92c 	bl	80027c0 <HAL_DMA_Abort_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d016      	beq.n	800559c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	e00e      	b.n	800559c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f846 	bl	8005610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00a      	b.n	800559c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f842 	bl	8005610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e006      	b.n	800559c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f83e 	bl	8005610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800559a:	e01e      	b.n	80055da <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	bf00      	nop
    return;
 800559e:	e01c      	b.n	80055da <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <HAL_UART_IRQHandler+0x1cc>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f8b1 	bl	800571c <UART_Transmit_IT>
    return;
 80055ba:	e00f      	b.n	80055dc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_UART_IRQHandler+0x1ec>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f8f9 	bl	80057c8 <UART_EndTransmit_IT>
    return;
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <HAL_UART_IRQHandler+0x1ec>
    return;
 80055da:	bf00      	nop
  }
}
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	080056f5 	.word	0x080056f5

080055e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	e02c      	b.n	8005690 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d028      	beq.n	8005690 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <UART_WaitOnFlagUntilTimeout+0x30>
 8005644:	f7fb fd06 	bl	8001054 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	429a      	cmp	r2, r3
 8005652:	d21d      	bcs.n	8005690 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005662:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e00f      	b.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	4013      	ands	r3, r2
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	429a      	cmp	r2, r3
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d0c3      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff ff7e 	bl	8005610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b21      	cmp	r3, #33	; 0x21
 800572e:	d144      	bne.n	80057ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	d11a      	bne.n	8005770 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800574e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	1c9a      	adds	r2, r3, #2
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]
 8005762:	e00e      	b.n	8005782 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]
 800576e:	e008      	b.n	8005782 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6211      	str	r1, [r2, #32]
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29b      	uxth	r3, r3
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4619      	mov	r1, r3
 8005790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e000      	b.n	80057bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff fefd 	bl	80055e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b22      	cmp	r3, #34	; 0x22
 800580a:	d171      	bne.n	80058f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005814:	d123      	bne.n	800585e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10e      	bne.n	8005842 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	; 0x28
 8005840:	e029      	b.n	8005896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	b29b      	uxth	r3, r3
 800584a:	b2db      	uxtb	r3, r3
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28
 800585c:	e01b      	b.n	8005896 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6858      	ldr	r0, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6291      	str	r1, [r2, #40]	; 0x28
 8005876:	b2c2      	uxtb	r2, r0
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e00c      	b.n	8005896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	1c58      	adds	r0, r3, #1
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	6288      	str	r0, [r1, #40]	; 0x28
 800588e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29b      	uxth	r3, r3
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4619      	mov	r1, r3
 80058a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d120      	bne.n	80058ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0220 	bic.w	r2, r2, #32
 80058b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fe8a 	bl	80055fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e002      	b.n	80058f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b5b0      	push	{r4, r5, r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800593c:	f023 030c 	bic.w	r3, r3, #12
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	430b      	orrs	r3, r1
 8005948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005968:	f040 80e4 	bne.w	8005b34 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4aab      	ldr	r2, [pc, #684]	; (8005c20 <UART_SetConfig+0x324>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <UART_SetConfig+0x84>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4aaa      	ldr	r2, [pc, #680]	; (8005c24 <UART_SetConfig+0x328>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d16c      	bne.n	8005a5a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005980:	f7fd fc70 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005984:	4602      	mov	r2, r0
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009a      	lsls	r2, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	fbb2 f3f3 	udiv	r3, r2, r3
 800599a:	4aa3      	ldr	r2, [pc, #652]	; (8005c28 <UART_SetConfig+0x32c>)
 800599c:	fba2 2303 	umull	r2, r3, r2, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	011c      	lsls	r4, r3, #4
 80059a4:	f7fd fc5e 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009a      	lsls	r2, r3, #2
 80059b2:	441a      	add	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80059be:	f7fd fc51 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 80059c2:	4602      	mov	r2, r0
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009a      	lsls	r2, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	4a93      	ldr	r2, [pc, #588]	; (8005c28 <UART_SetConfig+0x32c>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2264      	movs	r2, #100	; 0x64
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	1aeb      	subs	r3, r5, r3
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	3332      	adds	r3, #50	; 0x32
 80059ec:	4a8e      	ldr	r2, [pc, #568]	; (8005c28 <UART_SetConfig+0x32c>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059fa:	441c      	add	r4, r3
 80059fc:	f7fd fc32 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009a      	lsls	r2, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a16:	f7fd fc25 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009a      	lsls	r2, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	4a7d      	ldr	r2, [pc, #500]	; (8005c28 <UART_SetConfig+0x32c>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	2264      	movs	r2, #100	; 0x64
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	1aeb      	subs	r3, r5, r3
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	3332      	adds	r3, #50	; 0x32
 8005a44:	4a78      	ldr	r2, [pc, #480]	; (8005c28 <UART_SetConfig+0x32c>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	f003 0207 	and.w	r2, r3, #7
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4422      	add	r2, r4
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	e154      	b.n	8005d04 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a5a:	f7fd fbef 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009a      	lsls	r2, r3, #2
 8005a68:	441a      	add	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	4a6c      	ldr	r2, [pc, #432]	; (8005c28 <UART_SetConfig+0x32c>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	011c      	lsls	r4, r3, #4
 8005a7e:	f7fd fbdd 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009a      	lsls	r2, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a98:	f7fd fbd0 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009a      	lsls	r2, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	4a5d      	ldr	r2, [pc, #372]	; (8005c28 <UART_SetConfig+0x32c>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2264      	movs	r2, #100	; 0x64
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	1aeb      	subs	r3, r5, r3
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a58      	ldr	r2, [pc, #352]	; (8005c28 <UART_SetConfig+0x32c>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ad4:	441c      	add	r4, r3
 8005ad6:	f7fd fbb1 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005ada:	4602      	mov	r2, r0
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009a      	lsls	r2, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	fbb2 f5f3 	udiv	r5, r2, r3
 8005af0:	f7fd fba4 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009a      	lsls	r2, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	4a47      	ldr	r2, [pc, #284]	; (8005c28 <UART_SetConfig+0x32c>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	2264      	movs	r2, #100	; 0x64
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	1aeb      	subs	r3, r5, r3
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	3332      	adds	r3, #50	; 0x32
 8005b1e:	4a42      	ldr	r2, [pc, #264]	; (8005c28 <UART_SetConfig+0x32c>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	f003 0207 	and.w	r2, r3, #7
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4422      	add	r2, r4
 8005b30:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005b32:	e0e7      	b.n	8005d04 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a39      	ldr	r2, [pc, #228]	; (8005c20 <UART_SetConfig+0x324>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <UART_SetConfig+0x24c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a38      	ldr	r2, [pc, #224]	; (8005c24 <UART_SetConfig+0x328>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d171      	bne.n	8005c2c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005b48:	f7fd fb8c 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009a      	lsls	r2, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	4a31      	ldr	r2, [pc, #196]	; (8005c28 <UART_SetConfig+0x32c>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	011c      	lsls	r4, r3, #4
 8005b6c:	f7fd fb7a 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009a      	lsls	r2, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b86:	f7fd fb6d 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009a      	lsls	r2, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <UART_SetConfig+0x32c>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2264      	movs	r2, #100	; 0x64
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	1aeb      	subs	r3, r5, r3
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	3332      	adds	r3, #50	; 0x32
 8005bb4:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <UART_SetConfig+0x32c>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc0:	441c      	add	r4, r3
 8005bc2:	f7fd fb4f 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8005bdc:	f7fd fb42 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009a      	lsls	r2, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf6:	4a0c      	ldr	r2, [pc, #48]	; (8005c28 <UART_SetConfig+0x32c>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	2264      	movs	r2, #100	; 0x64
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
 8005c04:	1aeb      	subs	r3, r5, r3
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	3332      	adds	r3, #50	; 0x32
 8005c0a:	4a07      	ldr	r2, [pc, #28]	; (8005c28 <UART_SetConfig+0x32c>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 020f 	and.w	r2, r3, #15
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4422      	add	r2, r4
 8005c1c:	609a      	str	r2, [r3, #8]
 8005c1e:	e071      	b.n	8005d04 <UART_SetConfig+0x408>
 8005c20:	40011000 	.word	0x40011000
 8005c24:	40011400 	.word	0x40011400
 8005c28:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005c2c:	f7fd fb06 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005c30:	4602      	mov	r2, r0
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009a      	lsls	r2, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	4a31      	ldr	r2, [pc, #196]	; (8005d0c <UART_SetConfig+0x410>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	011c      	lsls	r4, r3, #4
 8005c50:	f7fd faf4 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009a      	lsls	r2, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c6a:	f7fd fae7 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <UART_SetConfig+0x410>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2264      	movs	r2, #100	; 0x64
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	1aeb      	subs	r3, r5, r3
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	3332      	adds	r3, #50	; 0x32
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <UART_SetConfig+0x410>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca4:	441c      	add	r4, r3
 8005ca6:	f7fd fac9 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009a      	lsls	r2, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	fbb2 f5f3 	udiv	r5, r2, r3
 8005cc0:	f7fd fabc 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009a      	lsls	r2, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <UART_SetConfig+0x410>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2264      	movs	r2, #100	; 0x64
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	1aeb      	subs	r3, r5, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a07      	ldr	r2, [pc, #28]	; (8005d0c <UART_SetConfig+0x410>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4422      	add	r2, r4
 8005d00:	609a      	str	r2, [r3, #8]
}
 8005d02:	e7ff      	b.n	8005d04 <UART_SetConfig+0x408>
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d0c:	51eb851f 	.word	0x51eb851f

08005d10 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005d16:	463b      	mov	r3, r7
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005d22:	4b22      	ldr	r3, [pc, #136]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d24:	4a22      	ldr	r2, [pc, #136]	; (8005db0 <MX_ADC1_Init+0xa0>)
 8005d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005d28:	4b20      	ldr	r3, [pc, #128]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005d30:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005d36:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005d4a:	4b18      	ldr	r3, [pc, #96]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8005d52:	4b16      	ldr	r3, [pc, #88]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d54:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005d58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d74:	480d      	ldr	r0, [pc, #52]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d76:	f7fb f99b 	bl	80010b0 <HAL_ADC_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8005d80:	f002 fa53 	bl	800822a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d90:	463b      	mov	r3, r7
 8005d92:	4619      	mov	r1, r3
 8005d94:	4805      	ldr	r0, [pc, #20]	; (8005dac <MX_ADC1_Init+0x9c>)
 8005d96:	f7fb fadf 	bl	8001358 <HAL_ADC_ConfigChannel>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005da0:	f002 fa43 	bl	800822a <Error_Handler>
  }

}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	2000041c 	.word	0x2000041c
 8005db0:	40012000 	.word	0x40012000

08005db4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005dba:	463b      	mov	r3, r7
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8005dc6:	4b22      	ldr	r3, [pc, #136]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005dc8:	4a22      	ldr	r2, [pc, #136]	; (8005e54 <MX_ADC2_Init+0xa0>)
 8005dca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005dcc:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dd2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005dd4:	4b1e      	ldr	r3, [pc, #120]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005dda:	4b1d      	ldr	r3, [pc, #116]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005df8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dfe:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005e0a:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e12:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e18:	480d      	ldr	r0, [pc, #52]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005e1a:	f7fb f949 	bl	80010b0 <HAL_ADC_Init>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8005e24:	f002 fa01 	bl	800822a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005e28:	2304      	movs	r3, #4
 8005e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e34:	463b      	mov	r3, r7
 8005e36:	4619      	mov	r1, r3
 8005e38:	4805      	ldr	r0, [pc, #20]	; (8005e50 <MX_ADC2_Init+0x9c>)
 8005e3a:	f7fb fa8d 	bl	8001358 <HAL_ADC_ConfigChannel>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8005e44:	f002 f9f1 	bl	800822a <Error_Handler>
  }

}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000374 	.word	0x20000374
 8005e54:	40012100 	.word	0x40012100

08005e58 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005e5e:	463b      	mov	r3, r7
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	609a      	str	r2, [r3, #8]
 8005e68:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e6c:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <MX_ADC3_Init+0xa0>)
 8005e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005e70:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005e78:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8005e7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005e92:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8005e9a:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005e9c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ea2:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005ebc:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005ebe:	f7fb f8f7 	bl	80010b0 <HAL_ADC_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8005ec8:	f002 f9af 	bl	800822a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005ed8:	463b      	mov	r3, r7
 8005eda:	4619      	mov	r1, r3
 8005edc:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <MX_ADC3_Init+0x9c>)
 8005ede:	f7fb fa3b 	bl	8001358 <HAL_ADC_ConfigChannel>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8005ee8:	f002 f99f 	bl	800822a <Error_Handler>
  }

}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000464 	.word	0x20000464
 8005ef8:	40012200 	.word	0x40012200

08005efc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	605a      	str	r2, [r3, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a8e      	ldr	r2, [pc, #568]	; (8006154 <HAL_ADC_MspInit+0x258>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d158      	bne.n	8005fd0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f1e:	2300      	movs	r3, #0
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	4b8d      	ldr	r3, [pc, #564]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	4a8c      	ldr	r2, [pc, #560]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2e:	4b8a      	ldr	r3, [pc, #552]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	4b86      	ldr	r3, [pc, #536]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	4a85      	ldr	r2, [pc, #532]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4a:	4b83      	ldr	r3, [pc, #524]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005f56:	2301      	movs	r3, #1
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f66:	4619      	mov	r1, r3
 8005f68:	487c      	ldr	r0, [pc, #496]	; (800615c <HAL_ADC_MspInit+0x260>)
 8005f6a:	f7fc feb3 	bl	8002cd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005f6e:	4b7c      	ldr	r3, [pc, #496]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005f70:	4a7c      	ldr	r2, [pc, #496]	; (8006164 <HAL_ADC_MspInit+0x268>)
 8005f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005f74:	4b7a      	ldr	r3, [pc, #488]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f7a:	4b79      	ldr	r3, [pc, #484]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f80:	4b77      	ldr	r3, [pc, #476]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f86:	4b76      	ldr	r3, [pc, #472]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f8e:	4b74      	ldr	r3, [pc, #464]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f96:	4b72      	ldr	r3, [pc, #456]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005f9e:	4b70      	ldr	r3, [pc, #448]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005fa4:	4b6e      	ldr	r3, [pc, #440]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005faa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fac:	4b6c      	ldr	r3, [pc, #432]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005fb2:	486b      	ldr	r0, [pc, #428]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005fb4:	f7fc faf6 	bl	80025a4 <HAL_DMA_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005fbe:	f002 f934 	bl	800822a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a66      	ldr	r2, [pc, #408]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8005fc8:	4a65      	ldr	r2, [pc, #404]	; (8006160 <HAL_ADC_MspInit+0x264>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8005fce:	e0bc      	b.n	800614a <HAL_ADC_MspInit+0x24e>
  else if(adcHandle->Instance==ADC2)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a64      	ldr	r2, [pc, #400]	; (8006168 <HAL_ADC_MspInit+0x26c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d159      	bne.n	800608e <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	4b5e      	ldr	r3, [pc, #376]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	4a5d      	ldr	r2, [pc, #372]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fea:	4b5b      	ldr	r3, [pc, #364]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	4b57      	ldr	r3, [pc, #348]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	4a56      	ldr	r2, [pc, #344]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	6313      	str	r3, [r2, #48]	; 0x30
 8006006:	4b54      	ldr	r3, [pc, #336]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006012:	2310      	movs	r3, #16
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006016:	2303      	movs	r3, #3
 8006018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601a:	2300      	movs	r3, #0
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800601e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006022:	4619      	mov	r1, r3
 8006024:	484d      	ldr	r0, [pc, #308]	; (800615c <HAL_ADC_MspInit+0x260>)
 8006026:	f7fc fe55 	bl	8002cd4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800602a:	4b50      	ldr	r3, [pc, #320]	; (800616c <HAL_ADC_MspInit+0x270>)
 800602c:	4a50      	ldr	r2, [pc, #320]	; (8006170 <HAL_ADC_MspInit+0x274>)
 800602e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006030:	4b4e      	ldr	r3, [pc, #312]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006036:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006038:	4b4c      	ldr	r3, [pc, #304]	; (800616c <HAL_ADC_MspInit+0x270>)
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800603e:	4b4b      	ldr	r3, [pc, #300]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006040:	2200      	movs	r2, #0
 8006042:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006044:	4b49      	ldr	r3, [pc, #292]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800604a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800604c:	4b47      	ldr	r3, [pc, #284]	; (800616c <HAL_ADC_MspInit+0x270>)
 800604e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006052:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006054:	4b45      	ldr	r3, [pc, #276]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800605a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800605c:	4b43      	ldr	r3, [pc, #268]	; (800616c <HAL_ADC_MspInit+0x270>)
 800605e:	2200      	movs	r2, #0
 8006060:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8006062:	4b42      	ldr	r3, [pc, #264]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006068:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800606a:	4b40      	ldr	r3, [pc, #256]	; (800616c <HAL_ADC_MspInit+0x270>)
 800606c:	2200      	movs	r2, #0
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006070:	483e      	ldr	r0, [pc, #248]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006072:	f7fc fa97 	bl	80025a4 <HAL_DMA_Init>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 800607c:	f002 f8d5 	bl	800822a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a3a      	ldr	r2, [pc, #232]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
 8006086:	4a39      	ldr	r2, [pc, #228]	; (800616c <HAL_ADC_MspInit+0x270>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800608c:	e05d      	b.n	800614a <HAL_ADC_MspInit+0x24e>
  else if(adcHandle->Instance==ADC3)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a38      	ldr	r2, [pc, #224]	; (8006174 <HAL_ADC_MspInit+0x278>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d158      	bne.n	800614a <HAL_ADC_MspInit+0x24e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	4b2e      	ldr	r3, [pc, #184]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	4a2d      	ldr	r2, [pc, #180]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 80060a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060a6:	6453      	str	r3, [r2, #68]	; 0x44
 80060a8:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	4b27      	ldr	r3, [pc, #156]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	4a26      	ldr	r2, [pc, #152]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6313      	str	r3, [r2, #48]	; 0x30
 80060c4:	4b24      	ldr	r3, [pc, #144]	; (8006158 <HAL_ADC_MspInit+0x25c>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80060d0:	2302      	movs	r3, #2
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060d4:	2303      	movs	r3, #3
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060e0:	4619      	mov	r1, r3
 80060e2:	481e      	ldr	r0, [pc, #120]	; (800615c <HAL_ADC_MspInit+0x260>)
 80060e4:	f7fc fdf6 	bl	8002cd4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80060e8:	4b23      	ldr	r3, [pc, #140]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 80060ea:	4a24      	ldr	r2, [pc, #144]	; (800617c <HAL_ADC_MspInit+0x280>)
 80060ec:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80060ee:	4b22      	ldr	r3, [pc, #136]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 80060f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80060f4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060f6:	4b20      	ldr	r3, [pc, #128]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80060fc:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 80060fe:	2200      	movs	r2, #0
 8006100:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006102:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 8006104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006108:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 800610c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006110:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006112:	4b19      	ldr	r3, [pc, #100]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 8006114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006118:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800611a:	4b17      	ldr	r3, [pc, #92]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 800611c:	2200      	movs	r2, #0
 800611e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 8006122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006126:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 800612a:	2200      	movs	r2, #0
 800612c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800612e:	4812      	ldr	r0, [pc, #72]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 8006130:	f7fc fa38 	bl	80025a4 <HAL_DMA_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_ADC_MspInit+0x242>
      Error_Handler();
 800613a:	f002 f876 	bl	800822a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a0d      	ldr	r2, [pc, #52]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
 8006144:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <HAL_ADC_MspInit+0x27c>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6393      	str	r3, [r2, #56]	; 0x38
}
 800614a:	bf00      	nop
 800614c:	3738      	adds	r7, #56	; 0x38
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40012000 	.word	0x40012000
 8006158:	40023800 	.word	0x40023800
 800615c:	40020000 	.word	0x40020000
 8006160:	200004ac 	.word	0x200004ac
 8006164:	40026410 	.word	0x40026410
 8006168:	40012100 	.word	0x40012100
 800616c:	2000050c 	.word	0x2000050c
 8006170:	40026440 	.word	0x40026440
 8006174:	40012200 	.word	0x40012200
 8006178:	200003bc 	.word	0x200003bc
 800617c:	40026428 	.word	0x40026428

08006180 <ADC_Init>:

/* USER CODE BEGIN 1 */


void ADC_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0

	  // ADC Starting
	  HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 8006184:	2201      	movs	r2, #1
 8006186:	4908      	ldr	r1, [pc, #32]	; (80061a8 <ADC_Init+0x28>)
 8006188:	4808      	ldr	r0, [pc, #32]	; (80061ac <ADC_Init+0x2c>)
 800618a:	f7fa ffd5 	bl	8001138 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 800618e:	2201      	movs	r2, #1
 8006190:	4907      	ldr	r1, [pc, #28]	; (80061b0 <ADC_Init+0x30>)
 8006192:	4808      	ldr	r0, [pc, #32]	; (80061b4 <ADC_Init+0x34>)
 8006194:	f7fa ffd0 	bl	8001138 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 8006198:	2201      	movs	r2, #1
 800619a:	4907      	ldr	r1, [pc, #28]	; (80061b8 <ADC_Init+0x38>)
 800619c:	4807      	ldr	r0, [pc, #28]	; (80061bc <ADC_Init+0x3c>)
 800619e:	f7fa ffcb 	bl	8001138 <HAL_ADC_Start_DMA>

}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000234 	.word	0x20000234
 80061ac:	2000041c 	.word	0x2000041c
 80061b0:	20000238 	.word	0x20000238
 80061b4:	20000374 	.word	0x20000374
 80061b8:	2000023c 	.word	0x2000023c
 80061bc:	20000464 	.word	0x20000464

080061c0 <get_current_dq>:


void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6178      	str	r0, [r7, #20]
 80061c8:	6139      	str	r1, [r7, #16]
 80061ca:	60fa      	str	r2, [r7, #12]
 80061cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80061d0:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 80061d4:	2201      	movs	r2, #1
 80061d6:	498f      	ldr	r1, [pc, #572]	; (8006414 <get_current_dq+0x254>)
 80061d8:	488f      	ldr	r0, [pc, #572]	; (8006418 <get_current_dq+0x258>)
 80061da:	f7fa ffad 	bl	8001138 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 80061de:	2201      	movs	r2, #1
 80061e0:	498e      	ldr	r1, [pc, #568]	; (800641c <get_current_dq+0x25c>)
 80061e2:	488f      	ldr	r0, [pc, #572]	; (8006420 <get_current_dq+0x260>)
 80061e4:	f7fa ffa8 	bl	8001138 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 80061e8:	2201      	movs	r2, #1
 80061ea:	498e      	ldr	r1, [pc, #568]	; (8006424 <get_current_dq+0x264>)
 80061ec:	488e      	ldr	r0, [pc, #568]	; (8006428 <get_current_dq+0x268>)
 80061ee:	f7fa ffa3 	bl	8001138 <HAL_ADC_Start_DMA>



	AD_Iu_buf[pos_MAF_I] = (int32_t)AD_Iu - ADI_Offset;
 80061f2:	4b88      	ldr	r3, [pc, #544]	; (8006414 <get_current_dq+0x254>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	4b8c      	ldr	r3, [pc, #560]	; (800642c <get_current_dq+0x26c>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4b8c      	ldr	r3, [pc, #560]	; (8006430 <get_current_dq+0x270>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	1a8a      	subs	r2, r1, r2
 8006202:	498c      	ldr	r1, [pc, #560]	; (8006434 <get_current_dq+0x274>)
 8006204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AD_Iv_buf[pos_MAF_I] = (int32_t)AD_Iv - ADI_Offset;
 8006208:	4b84      	ldr	r3, [pc, #528]	; (800641c <get_current_dq+0x25c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4619      	mov	r1, r3
 800620e:	4b87      	ldr	r3, [pc, #540]	; (800642c <get_current_dq+0x26c>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b87      	ldr	r3, [pc, #540]	; (8006430 <get_current_dq+0x270>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	1a8a      	subs	r2, r1, r2
 8006218:	4987      	ldr	r1, [pc, #540]	; (8006438 <get_current_dq+0x278>)
 800621a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AD_Iw_buf[pos_MAF_I] = (int32_t)AD_Iw - ADI_Offset;
 800621e:	4b81      	ldr	r3, [pc, #516]	; (8006424 <get_current_dq+0x264>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	4b81      	ldr	r3, [pc, #516]	; (800642c <get_current_dq+0x26c>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b81      	ldr	r3, [pc, #516]	; (8006430 <get_current_dq+0x270>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	1a8a      	subs	r2, r1, r2
 800622e:	4983      	ldr	r1, [pc, #524]	; (800643c <get_current_dq+0x27c>)
 8006230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	AD_Iu_MAF += AD_Iu_buf[pos_MAF_I];
 8006234:	4b7e      	ldr	r3, [pc, #504]	; (8006430 <get_current_dq+0x270>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a7e      	ldr	r2, [pc, #504]	; (8006434 <get_current_dq+0x274>)
 800623a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800623e:	4b80      	ldr	r3, [pc, #512]	; (8006440 <get_current_dq+0x280>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4413      	add	r3, r2
 8006244:	4a7e      	ldr	r2, [pc, #504]	; (8006440 <get_current_dq+0x280>)
 8006246:	6013      	str	r3, [r2, #0]
	AD_Iv_MAF += AD_Iv_buf[pos_MAF_I];
 8006248:	4b79      	ldr	r3, [pc, #484]	; (8006430 <get_current_dq+0x270>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a7a      	ldr	r2, [pc, #488]	; (8006438 <get_current_dq+0x278>)
 800624e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006252:	4b7c      	ldr	r3, [pc, #496]	; (8006444 <get_current_dq+0x284>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4413      	add	r3, r2
 8006258:	4a7a      	ldr	r2, [pc, #488]	; (8006444 <get_current_dq+0x284>)
 800625a:	6013      	str	r3, [r2, #0]
	AD_Iw_MAF += AD_Iw_buf[pos_MAF_I];
 800625c:	4b74      	ldr	r3, [pc, #464]	; (8006430 <get_current_dq+0x270>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a76      	ldr	r2, [pc, #472]	; (800643c <get_current_dq+0x27c>)
 8006262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006266:	4b78      	ldr	r3, [pc, #480]	; (8006448 <get_current_dq+0x288>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4413      	add	r3, r2
 800626c:	4a76      	ldr	r2, [pc, #472]	; (8006448 <get_current_dq+0x288>)
 800626e:	6013      	str	r3, [r2, #0]

	// Writing position Update
	pos_MAF_I += 1;
 8006270:	4b6f      	ldr	r3, [pc, #444]	; (8006430 <get_current_dq+0x270>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a6e      	ldr	r2, [pc, #440]	; (8006430 <get_current_dq+0x270>)
 8006278:	6013      	str	r3, [r2, #0]
	if(pos_MAF_I >= N_MAF_I)
 800627a:	4b6d      	ldr	r3, [pc, #436]	; (8006430 <get_current_dq+0x270>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b01      	cmp	r3, #1
 8006280:	dd02      	ble.n	8006288 <get_current_dq+0xc8>
	{
		pos_MAF_I = 0;
 8006282:	4b6b      	ldr	r3, [pc, #428]	; (8006430 <get_current_dq+0x270>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
	}

	V_Iu = (float)AD_Iu_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iu_offset;
 8006288:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <get_current_dq+0x280>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800644c <get_current_dq+0x28c>
 80062aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062ae:	4b68      	ldr	r3, [pc, #416]	; (8006450 <get_current_dq+0x290>)
 80062b0:	edd3 7a00 	vldr	s15, [r3]
 80062b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b8:	4b66      	ldr	r3, [pc, #408]	; (8006454 <get_current_dq+0x294>)
 80062ba:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iv_offset;
 80062be:	4b61      	ldr	r3, [pc, #388]	; (8006444 <get_current_dq+0x284>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062dc:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800644c <get_current_dq+0x28c>
 80062e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062e4:	4b5c      	ldr	r3, [pc, #368]	; (8006458 <get_current_dq+0x298>)
 80062e6:	edd3 7a00 	vldr	s15, [r3]
 80062ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ee:	4b5b      	ldr	r3, [pc, #364]	; (800645c <get_current_dq+0x29c>)
 80062f0:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iw_offset;
 80062f4:	4b54      	ldr	r3, [pc, #336]	; (8006448 <get_current_dq+0x288>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	ee07 3a90 	vmov	s15, r3
 80062fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800630e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006312:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800644c <get_current_dq+0x28c>
 8006316:	ee27 7a87 	vmul.f32	s14, s15, s14
 800631a:	4b51      	ldr	r3, [pc, #324]	; (8006460 <get_current_dq+0x2a0>)
 800631c:	edd3 7a00 	vldr	s15, [r3]
 8006320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006324:	4b4f      	ldr	r3, [pc, #316]	; (8006464 <get_current_dq+0x2a4>)
 8006326:	edc3 7a00 	vstr	s15, [r3]

	AD_Iu_MAF -= AD_Iu_buf[pos_MAF_I];
 800632a:	4b45      	ldr	r3, [pc, #276]	; (8006440 <get_current_dq+0x280>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b40      	ldr	r3, [pc, #256]	; (8006430 <get_current_dq+0x270>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4940      	ldr	r1, [pc, #256]	; (8006434 <get_current_dq+0x274>)
 8006334:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	4a41      	ldr	r2, [pc, #260]	; (8006440 <get_current_dq+0x280>)
 800633c:	6013      	str	r3, [r2, #0]
	AD_Iv_MAF -= AD_Iv_buf[pos_MAF_I];
 800633e:	4b41      	ldr	r3, [pc, #260]	; (8006444 <get_current_dq+0x284>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b3b      	ldr	r3, [pc, #236]	; (8006430 <get_current_dq+0x270>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	493c      	ldr	r1, [pc, #240]	; (8006438 <get_current_dq+0x278>)
 8006348:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	4a3d      	ldr	r2, [pc, #244]	; (8006444 <get_current_dq+0x284>)
 8006350:	6013      	str	r3, [r2, #0]
	AD_Iw_MAF -= AD_Iw_buf[pos_MAF_I];
 8006352:	4b3d      	ldr	r3, [pc, #244]	; (8006448 <get_current_dq+0x288>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b36      	ldr	r3, [pc, #216]	; (8006430 <get_current_dq+0x270>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4938      	ldr	r1, [pc, #224]	; (800643c <get_current_dq+0x27c>)
 800635c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	4a39      	ldr	r2, [pc, #228]	; (8006448 <get_current_dq+0x288>)
 8006364:	6013      	str	r3, [r2, #0]
	V_Iv = V_Iv * 0.9 + 0.1 * ((float)(ADI_Offset - (int32_t)AD_Iv) / AD_Range * Vref_AD - V_Iv_offset);
	V_Iw = V_Iw * 0.9 + 0.1 * ((float)(ADI_Offset - (int32_t)AD_Iw) / AD_Range * Vref_AD - V_Iw_offset);
	*/


	switch(SVM_sector)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b05      	cmp	r3, #5
 800636a:	f200 80a5 	bhi.w	80064b8 <get_current_dq+0x2f8>
 800636e:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <get_current_dq+0x1b4>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	0800638d 	.word	0x0800638d
 8006378:	080063d1 	.word	0x080063d1
 800637c:	080063d1 	.word	0x080063d1
 8006380:	08006475 	.word	0x08006475
 8006384:	08006475 	.word	0x08006475
 8006388:	0800638d 	.word	0x0800638d
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 800638c:	4b33      	ldr	r3, [pc, #204]	; (800645c <get_current_dq+0x29c>)
 800638e:	edd3 7a00 	vldr	s15, [r3]
 8006392:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800639a:	4b33      	ldr	r3, [pc, #204]	; (8006468 <get_current_dq+0x2a8>)
 800639c:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 80063a0:	4b30      	ldr	r3, [pc, #192]	; (8006464 <get_current_dq+0x2a4>)
 80063a2:	edd3 7a00 	vldr	s15, [r3]
 80063a6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80063aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ae:	4b2f      	ldr	r3, [pc, #188]	; (800646c <get_current_dq+0x2ac>)
 80063b0:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 80063b4:	4b2c      	ldr	r3, [pc, #176]	; (8006468 <get_current_dq+0x2a8>)
 80063b6:	edd3 7a00 	vldr	s15, [r3]
 80063ba:	eeb1 7a67 	vneg.f32	s14, s15
 80063be:	4b2b      	ldr	r3, [pc, #172]	; (800646c <get_current_dq+0x2ac>)
 80063c0:	edd3 7a00 	vldr	s15, [r3]
 80063c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c8:	4b29      	ldr	r3, [pc, #164]	; (8006470 <get_current_dq+0x2b0>)
 80063ca:	edc3 7a00 	vstr	s15, [r3]
		break;
 80063ce:	e073      	b.n	80064b8 <get_current_dq+0x2f8>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 80063d0:	4b24      	ldr	r3, [pc, #144]	; (8006464 <get_current_dq+0x2a4>)
 80063d2:	edd3 7a00 	vldr	s15, [r3]
 80063d6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80063da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063de:	4b23      	ldr	r3, [pc, #140]	; (800646c <get_current_dq+0x2ac>)
 80063e0:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 80063e4:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <get_current_dq+0x294>)
 80063e6:	edd3 7a00 	vldr	s15, [r3]
 80063ea:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80063ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063f2:	4b1f      	ldr	r3, [pc, #124]	; (8006470 <get_current_dq+0x2b0>)
 80063f4:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 80063f8:	4b1c      	ldr	r3, [pc, #112]	; (800646c <get_current_dq+0x2ac>)
 80063fa:	edd3 7a00 	vldr	s15, [r3]
 80063fe:	eeb1 7a67 	vneg.f32	s14, s15
 8006402:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <get_current_dq+0x2b0>)
 8006404:	edd3 7a00 	vldr	s15, [r3]
 8006408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800640c:	4b16      	ldr	r3, [pc, #88]	; (8006468 <get_current_dq+0x2a8>)
 800640e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006412:	e051      	b.n	80064b8 <get_current_dq+0x2f8>
 8006414:	20000234 	.word	0x20000234
 8006418:	2000041c 	.word	0x2000041c
 800641c:	20000238 	.word	0x20000238
 8006420:	20000374 	.word	0x20000374
 8006424:	2000023c 	.word	0x2000023c
 8006428:	20000464 	.word	0x20000464
 800642c:	20000008 	.word	0x20000008
 8006430:	20000258 	.word	0x20000258
 8006434:	2000025c 	.word	0x2000025c
 8006438:	20000264 	.word	0x20000264
 800643c:	2000026c 	.word	0x2000026c
 8006440:	20000274 	.word	0x20000274
 8006444:	20000278 	.word	0x20000278
 8006448:	2000027c 	.word	0x2000027c
 800644c:	40533333 	.word	0x40533333
 8006450:	2000000c 	.word	0x2000000c
 8006454:	20000240 	.word	0x20000240
 8006458:	20000010 	.word	0x20000010
 800645c:	20000244 	.word	0x20000244
 8006460:	20000014 	.word	0x20000014
 8006464:	20000248 	.word	0x20000248
 8006468:	20000250 	.word	0x20000250
 800646c:	20000254 	.word	0x20000254
 8006470:	2000024c 	.word	0x2000024c

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 8006474:	4b4b      	ldr	r3, [pc, #300]	; (80065a4 <get_current_dq+0x3e4>)
 8006476:	edd3 7a00 	vldr	s15, [r3]
 800647a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800647e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006482:	4b49      	ldr	r3, [pc, #292]	; (80065a8 <get_current_dq+0x3e8>)
 8006484:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 8006488:	4b48      	ldr	r3, [pc, #288]	; (80065ac <get_current_dq+0x3ec>)
 800648a:	edd3 7a00 	vldr	s15, [r3]
 800648e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006496:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <get_current_dq+0x3f0>)
 8006498:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 800649c:	4b42      	ldr	r3, [pc, #264]	; (80065a8 <get_current_dq+0x3e8>)
 800649e:	edd3 7a00 	vldr	s15, [r3]
 80064a2:	eeb1 7a67 	vneg.f32	s14, s15
 80064a6:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <get_current_dq+0x3f0>)
 80064a8:	edd3 7a00 	vldr	s15, [r3]
 80064ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b0:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <get_current_dq+0x3f4>)
 80064b2:	edc3 7a00 	vstr	s15, [r3]
		break;
 80064b6:	bf00      	nop
	}

	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <get_current_dq+0x3e8>)
 80064ba:	ed93 7a00 	vldr	s14, [r3]
 80064be:	edd7 7a02 	vldr	s15, [r7, #8]
 80064c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80064ca:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80064ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80064d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80064d6:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80065b8 <get_current_dq+0x3f8>
 80064da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80064de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80064e2:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <get_current_dq+0x3f0>)
 80064e4:	edd3 7a00 	vldr	s15, [r3]
 80064e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80064f4:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80064f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80064fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006500:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80065b8 <get_current_dq+0x3f8>
 8006504:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006508:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800650c:	4b29      	ldr	r3, [pc, #164]	; (80065b4 <get_current_dq+0x3f4>)
 800650e:	edd3 7a00 	vldr	s15, [r3]
 8006512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800651a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80065bc <get_current_dq+0x3fc>
 800651e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 8006528:	4b1f      	ldr	r3, [pc, #124]	; (80065a8 <get_current_dq+0x3e8>)
 800652a:	edd3 7a00 	vldr	s15, [r3]
 800652e:	eeb1 7a67 	vneg.f32	s14, s15
 8006532:	edd7 7a01 	vldr	s15, [r7, #4]
 8006536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800653a:	edd7 7a01 	vldr	s15, [r7, #4]
 800653e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006542:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006546:	edd7 7a02 	vldr	s15, [r7, #8]
 800654a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80065b8 <get_current_dq+0x3f8>
 800654e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006552:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006556:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <get_current_dq+0x3f0>)
 8006558:	edd3 7a00 	vldr	s15, [r3]
 800655c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006564:	edd7 7a01 	vldr	s15, [r7, #4]
 8006568:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800656c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006570:	edd7 7a02 	vldr	s15, [r7, #8]
 8006574:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80065b8 <get_current_dq+0x3f8>
 8006578:	ee67 7a86 	vmul.f32	s15, s15, s12
 800657c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <get_current_dq+0x3f4>)
 8006582:	edd3 7a00 	vldr	s15, [r3]
 8006586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800658a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800658e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80065bc <get_current_dq+0x3fc>
 8006592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	edc3 7a00 	vstr	s15, [r3]


	return;
 800659c:	bf00      	nop

}
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000240 	.word	0x20000240
 80065a8:	2000024c 	.word	0x2000024c
 80065ac:	20000244 	.word	0x20000244
 80065b0:	20000250 	.word	0x20000250
 80065b4:	20000254 	.word	0x20000254
 80065b8:	3f5ae148 	.word	0x3f5ae148
 80065bc:	3f510625 	.word	0x3f510625

080065c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80065c4:	4b18      	ldr	r3, [pc, #96]	; (8006628 <MX_CAN1_Init+0x68>)
 80065c6:	4a19      	ldr	r2, [pc, #100]	; (800662c <MX_CAN1_Init+0x6c>)
 80065c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <MX_CAN1_Init+0x68>)
 80065cc:	2204      	movs	r2, #4
 80065ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <MX_CAN1_Init+0x68>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <MX_CAN1_Init+0x68>)
 80065d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <MX_CAN1_Init+0x68>)
 80065e0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80065e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <MX_CAN1_Init+0x68>)
 80065e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80065ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <MX_CAN1_Init+0x68>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80065f4:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <MX_CAN1_Init+0x68>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <MX_CAN1_Init+0x68>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <MX_CAN1_Init+0x68>)
 8006602:	2200      	movs	r2, #0
 8006604:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <MX_CAN1_Init+0x68>)
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <MX_CAN1_Init+0x68>)
 800660e:	2200      	movs	r2, #0
 8006610:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006612:	4805      	ldr	r0, [pc, #20]	; (8006628 <MX_CAN1_Init+0x68>)
 8006614:	f7fb f950 	bl	80018b8 <HAL_CAN_Init>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800661e:	f001 fe04 	bl	800822a <Error_Handler>
  }

}
 8006622:	bf00      	nop
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	2000056c 	.word	0x2000056c
 800662c:	40006400 	.word	0x40006400

08006630 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006638:	f107 0314 	add.w	r3, r7, #20
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	609a      	str	r2, [r3, #8]
 8006644:	60da      	str	r2, [r3, #12]
 8006646:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <HAL_CAN_MspInit+0xa4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d13c      	bne.n	80066cc <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	4b20      	ldr	r3, [pc, #128]	; (80066d8 <HAL_CAN_MspInit+0xa8>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <HAL_CAN_MspInit+0xa8>)
 800665c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006660:	6413      	str	r3, [r2, #64]	; 0x40
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_CAN_MspInit+0xa8>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	4b19      	ldr	r3, [pc, #100]	; (80066d8 <HAL_CAN_MspInit+0xa8>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_CAN_MspInit+0xa8>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6313      	str	r3, [r2, #48]	; 0x30
 800667e:	4b16      	ldr	r3, [pc, #88]	; (80066d8 <HAL_CAN_MspInit+0xa8>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800668a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800668e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006690:	2302      	movs	r3, #2
 8006692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006698:	2303      	movs	r3, #3
 800669a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800669c:	2309      	movs	r3, #9
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	4619      	mov	r1, r3
 80066a6:	480d      	ldr	r0, [pc, #52]	; (80066dc <HAL_CAN_MspInit+0xac>)
 80066a8:	f7fc fb14 	bl	8002cd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80066ac:	2200      	movs	r2, #0
 80066ae:	2100      	movs	r1, #0
 80066b0:	2013      	movs	r0, #19
 80066b2:	f7fb ff40 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80066b6:	2013      	movs	r0, #19
 80066b8:	f7fb ff59 	bl	800256e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80066bc:	2200      	movs	r2, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	2014      	movs	r0, #20
 80066c2:	f7fb ff38 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80066c6:	2014      	movs	r0, #20
 80066c8:	f7fb ff51 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80066cc:	bf00      	nop
 80066ce:	3728      	adds	r7, #40	; 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40006400 	.word	0x40006400
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40020000 	.word	0x40020000

080066e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	4b14      	ldr	r3, [pc, #80]	; (800673c <MX_DMA_Init+0x5c>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	4a13      	ldr	r2, [pc, #76]	; (800673c <MX_DMA_Init+0x5c>)
 80066f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066f4:	6313      	str	r3, [r2, #48]	; 0x30
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <MX_DMA_Init+0x5c>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006702:	2200      	movs	r2, #0
 8006704:	2100      	movs	r1, #0
 8006706:	2038      	movs	r0, #56	; 0x38
 8006708:	f7fb ff15 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800670c:	2038      	movs	r0, #56	; 0x38
 800670e:	f7fb ff2e 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006712:	2200      	movs	r2, #0
 8006714:	2100      	movs	r1, #0
 8006716:	2039      	movs	r0, #57	; 0x39
 8006718:	f7fb ff0d 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800671c:	2039      	movs	r0, #57	; 0x39
 800671e:	f7fb ff26 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006722:	2200      	movs	r2, #0
 8006724:	2100      	movs	r1, #0
 8006726:	203a      	movs	r0, #58	; 0x3a
 8006728:	f7fb ff05 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800672c:	203a      	movs	r0, #58	; 0x3a
 800672e:	f7fb ff1e 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40023800 	.word	0x40023800

08006740 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006746:	f107 0314 	add.w	r3, r7, #20
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	609a      	str	r2, [r3, #8]
 8006752:	60da      	str	r2, [r3, #12]
 8006754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <MX_GPIO_Init+0x118>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	4a3e      	ldr	r2, [pc, #248]	; (8006858 <MX_GPIO_Init+0x118>)
 8006760:	f043 0304 	orr.w	r3, r3, #4
 8006764:	6313      	str	r3, [r2, #48]	; 0x30
 8006766:	4b3c      	ldr	r3, [pc, #240]	; (8006858 <MX_GPIO_Init+0x118>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4b38      	ldr	r3, [pc, #224]	; (8006858 <MX_GPIO_Init+0x118>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	4a37      	ldr	r2, [pc, #220]	; (8006858 <MX_GPIO_Init+0x118>)
 800677c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006780:	6313      	str	r3, [r2, #48]	; 0x30
 8006782:	4b35      	ldr	r3, [pc, #212]	; (8006858 <MX_GPIO_Init+0x118>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <MX_GPIO_Init+0x118>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	4a30      	ldr	r2, [pc, #192]	; (8006858 <MX_GPIO_Init+0x118>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6313      	str	r3, [r2, #48]	; 0x30
 800679e:	4b2e      	ldr	r3, [pc, #184]	; (8006858 <MX_GPIO_Init+0x118>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <MX_GPIO_Init+0x118>)
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	4a29      	ldr	r2, [pc, #164]	; (8006858 <MX_GPIO_Init+0x118>)
 80067b4:	f043 0302 	orr.w	r3, r3, #2
 80067b8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ba:	4b27      	ldr	r3, [pc, #156]	; (8006858 <MX_GPIO_Init+0x118>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 80067c6:	2200      	movs	r2, #0
 80067c8:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 80067cc:	4823      	ldr	r0, [pc, #140]	; (800685c <MX_GPIO_Init+0x11c>)
 80067ce:	f7fc fc13 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 80067d2:	2200      	movs	r2, #0
 80067d4:	f241 0150 	movw	r1, #4176	; 0x1050
 80067d8:	4821      	ldr	r0, [pc, #132]	; (8006860 <MX_GPIO_Init+0x120>)
 80067da:	f7fc fc0d 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80067de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80067e4:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <MX_GPIO_Init+0x124>)
 80067e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80067ec:	f107 0314 	add.w	r3, r7, #20
 80067f0:	4619      	mov	r1, r3
 80067f2:	481d      	ldr	r0, [pc, #116]	; (8006868 <MX_GPIO_Init+0x128>)
 80067f4:	f7fc fa6e 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 80067f8:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80067fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067fe:	2301      	movs	r3, #1
 8006800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006806:	2300      	movs	r3, #0
 8006808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800680a:	f107 0314 	add.w	r3, r7, #20
 800680e:	4619      	mov	r1, r3
 8006810:	4812      	ldr	r0, [pc, #72]	; (800685c <MX_GPIO_Init+0x11c>)
 8006812:	f7fc fa5f 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8006816:	f241 0350 	movw	r3, #4176	; 0x1050
 800681a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800681c:	2301      	movs	r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006824:	2300      	movs	r3, #0
 8006826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006828:	f107 0314 	add.w	r3, r7, #20
 800682c:	4619      	mov	r1, r3
 800682e:	480c      	ldr	r0, [pc, #48]	; (8006860 <MX_GPIO_Init+0x120>)
 8006830:	f7fc fa50 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 8006834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800683a:	2300      	movs	r3, #0
 800683c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800683e:	2300      	movs	r3, #0
 8006840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 8006842:	f107 0314 	add.w	r3, r7, #20
 8006846:	4619      	mov	r1, r3
 8006848:	4804      	ldr	r0, [pc, #16]	; (800685c <MX_GPIO_Init+0x11c>)
 800684a:	f7fc fa43 	bl	8002cd4 <HAL_GPIO_Init>

}
 800684e:	bf00      	nop
 8006850:	3728      	adds	r7, #40	; 0x28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
 800685c:	40020000 	.word	0x40020000
 8006860:	40020400 	.word	0x40020400
 8006864:	10210000 	.word	0x10210000
 8006868:	40020800 	.word	0x40020800
 800686c:	00000000 	.word	0x00000000

08006870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006874:	b088      	sub	sp, #32
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	60bb      	str	r3, [r7, #8]


	/********** for ASR ***********/

	int ASR_steps = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]

	float d_theta;

	float _omega_ref;

	float omega_error_integ_temp1 = 0.0f;
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	613b      	str	r3, [r7, #16]
	float omega_error_integ_temp2 = 0.0f;
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]

	float p_theta_error = 0.0f;
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006892:	f7fa fb79 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006896:	f000 fc27 	bl	80070e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800689a:	f7ff ff51 	bl	8006740 <MX_GPIO_Init>
  MX_DMA_Init();
 800689e:	f7ff ff1f 	bl	80066e0 <MX_DMA_Init>
  MX_CAN1_Init();
 80068a2:	f7ff fe8d 	bl	80065c0 <MX_CAN1_Init>
  MX_SPI2_Init();
 80068a6:	f001 fcc7 	bl	8008238 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80068aa:	f001 ffdf 	bl	800886c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80068ae:	f7ff fa2f 	bl	8005d10 <MX_ADC1_Init>
  MX_ADC2_Init();
 80068b2:	f7ff fa7f 	bl	8005db4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80068b6:	f7ff facf 	bl	8005e58 <MX_ADC3_Init>
  MX_TIM8_Init();
 80068ba:	f001 fe7d 	bl	80085b8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */


  ADC_Init();
 80068be:	f7ff fc5f 	bl	8006180 <ADC_Init>

  /********** CAN Setting **********/


  sFilterConfig.FilterBank = 0;
 80068c2:	4bb3      	ldr	r3, [pc, #716]	; (8006b90 <main+0x320>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80068c8:	4bb1      	ldr	r3, [pc, #708]	; (8006b90 <main+0x320>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80068ce:	4bb0      	ldr	r3, [pc, #704]	; (8006b90 <main+0x320>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80068d4:	4bae      	ldr	r3, [pc, #696]	; (8006b90 <main+0x320>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80068da:	4bad      	ldr	r3, [pc, #692]	; (8006b90 <main+0x320>)
 80068dc:	2200      	movs	r2, #0
 80068de:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80068e0:	4bab      	ldr	r3, [pc, #684]	; (8006b90 <main+0x320>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80068e6:	4baa      	ldr	r3, [pc, #680]	; (8006b90 <main+0x320>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80068ec:	4ba8      	ldr	r3, [pc, #672]	; (8006b90 <main+0x320>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80068f2:	4ba7      	ldr	r3, [pc, #668]	; (8006b90 <main+0x320>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80068f8:	4ba5      	ldr	r3, [pc, #660]	; (8006b90 <main+0x320>)
 80068fa:	220e      	movs	r2, #14
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 80068fe:	49a4      	ldr	r1, [pc, #656]	; (8006b90 <main+0x320>)
 8006900:	48a4      	ldr	r0, [pc, #656]	; (8006b94 <main+0x324>)
 8006902:	f7fb f8d5 	bl	8001ab0 <HAL_CAN_ConfigFilter>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <main+0xa0>
  {
	  Error_Handler();
 800690c:	f001 fc8d 	bl	800822a <Error_Handler>
  }

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8006910:	48a0      	ldr	r0, [pc, #640]	; (8006b94 <main+0x324>)
 8006912:	f7fb f9ad 	bl	8001c70 <HAL_CAN_Start>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <main+0xb0>
  {
	  Error_Handler();
 800691c:	f001 fc85 	bl	800822a <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8006920:	2103      	movs	r1, #3
 8006922:	489c      	ldr	r0, [pc, #624]	; (8006b94 <main+0x324>)
 8006924:	f7fb fafb 	bl	8001f1e <HAL_CAN_ActivateNotification>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <main+0xc2>
  {
	  Error_Handler();
 800692e:	f001 fc7c 	bl	800822a <Error_Handler>
  }




  UartPrintf(&huart2, "Hello world\n");
 8006932:	4999      	ldr	r1, [pc, #612]	; (8006b98 <main+0x328>)
 8006934:	4899      	ldr	r0, [pc, #612]	; (8006b9c <main+0x32c>)
 8006936:	f001 fc4d 	bl	80081d4 <UartPrintf>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 800693a:	2201      	movs	r2, #1
 800693c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006940:	4897      	ldr	r0, [pc, #604]	; (8006ba0 <main+0x330>)
 8006942:	f7fc fb59 	bl	8002ff8 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8006946:	2201      	movs	r2, #1
 8006948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800694c:	4894      	ldr	r0, [pc, #592]	; (8006ba0 <main+0x330>)
 800694e:	f7fc fb53 	bl	8002ff8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8006952:	200a      	movs	r0, #10
 8006954:	f7fa fb8a 	bl	800106c <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 8006958:	2200      	movs	r2, #0
 800695a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800695e:	4890      	ldr	r0, [pc, #576]	; (8006ba0 <main+0x330>)
 8006960:	f7fc fb4a 	bl	8002ff8 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8006964:	2200      	movs	r2, #0
 8006966:	2140      	movs	r1, #64	; 0x40
 8006968:	488d      	ldr	r0, [pc, #564]	; (8006ba0 <main+0x330>)
 800696a:	f7fc fb45 	bl	8002ff8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800696e:	2200      	movs	r2, #0
 8006970:	2110      	movs	r1, #16
 8006972:	488c      	ldr	r0, [pc, #560]	; (8006ba4 <main+0x334>)
 8006974:	f7fc fb40 	bl	8002ff8 <HAL_GPIO_WritePin>
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8006978:	4b8b      	ldr	r3, [pc, #556]	; (8006ba8 <main+0x338>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0201 	mvn.w	r2, #1
 8006980:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8006982:	4b89      	ldr	r3, [pc, #548]	; (8006ba8 <main+0x338>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	4b87      	ldr	r3, [pc, #540]	; (8006ba8 <main+0x338>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0201 	orr.w	r2, r2, #1
 8006990:	60da      	str	r2, [r3, #12]



  // 3phase PWM Starting
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8006992:	2100      	movs	r1, #0
 8006994:	4884      	ldr	r0, [pc, #528]	; (8006ba8 <main+0x338>)
 8006996:	f7fd fcdf 	bl	8004358 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 800699a:	2104      	movs	r1, #4
 800699c:	4882      	ldr	r0, [pc, #520]	; (8006ba8 <main+0x338>)
 800699e:	f7fd fcdb 	bl	8004358 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 80069a2:	2108      	movs	r1, #8
 80069a4:	4880      	ldr	r0, [pc, #512]	; (8006ba8 <main+0x338>)
 80069a6:	f7fd fcd7 	bl	8004358 <HAL_TIM_PWM_Start_IT>

  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 80069aa:	2100      	movs	r1, #0
 80069ac:	487e      	ldr	r0, [pc, #504]	; (8006ba8 <main+0x338>)
 80069ae:	f7fe fb14 	bl	8004fda <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 80069b2:	2104      	movs	r1, #4
 80069b4:	487c      	ldr	r0, [pc, #496]	; (8006ba8 <main+0x338>)
 80069b6:	f7fe fb10 	bl	8004fda <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 80069ba:	2108      	movs	r1, #8
 80069bc:	487a      	ldr	r0, [pc, #488]	; (8006ba8 <main+0x338>)
 80069be:	f7fe fb0c 	bl	8004fda <HAL_TIMEx_PWMN_Start_IT>



  // SPI Interrupt Setting
  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 80069c2:	4b7a      	ldr	r3, [pc, #488]	; (8006bac <main+0x33c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	4b78      	ldr	r3, [pc, #480]	; (8006bac <main+0x33c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80069d0:	605a      	str	r2, [r3, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ASR_flg == 1)
 80069d2:	4b77      	ldr	r3, [pc, #476]	; (8006bb0 <main+0x340>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d1fb      	bne.n	80069d2 <main+0x162>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 80069da:	2110      	movs	r1, #16
 80069dc:	4871      	ldr	r0, [pc, #452]	; (8006ba4 <main+0x334>)
 80069de:	f7fc fb24 	bl	800302a <HAL_GPIO_TogglePin>


		  if(forced_commute_state > 0)
 80069e2:	4b74      	ldr	r3, [pc, #464]	; (8006bb4 <main+0x344>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 81ea 	beq.w	8006dc2 <main+0x552>
		  {

			  switch(forced_commute_state)
 80069ee:	4b71      	ldr	r3, [pc, #452]	; (8006bb4 <main+0x344>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	f200 81e5 	bhi.w	8006dc6 <main+0x556>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <main+0x194>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a39 	.word	0x08006a39
 8006a0c:	08006b51 	.word	0x08006b51
 8006a10:	08006bd1 	.word	0x08006bd1
			  {
			  case 1:
				  if(forced_commute_count < 500)
 8006a14:	4b68      	ldr	r3, [pc, #416]	; (8006bb8 <main+0x348>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a1c:	d205      	bcs.n	8006a2a <main+0x1ba>
					  forced_commute_count += 1;
 8006a1e:	4b66      	ldr	r3, [pc, #408]	; (8006bb8 <main+0x348>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a64      	ldr	r2, [pc, #400]	; (8006bb8 <main+0x348>)
 8006a26:	6013      	str	r3, [r2, #0]
				  else
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 2;
				  }
				  break;
 8006a28:	e1ce      	b.n	8006dc8 <main+0x558>
					  forced_commute_count = 0;
 8006a2a:	4b63      	ldr	r3, [pc, #396]	; (8006bb8 <main+0x348>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 2;
 8006a30:	4b60      	ldr	r3, [pc, #384]	; (8006bb4 <main+0x344>)
 8006a32:	2202      	movs	r2, #2
 8006a34:	701a      	strb	r2, [r3, #0]
				  break;
 8006a36:	e1c7      	b.n	8006dc8 <main+0x558>

			  case 2:
				  if(forced_commute_count < FORCED_COMMUTE_STEPS)
 8006a38:	4b5f      	ldr	r3, [pc, #380]	; (8006bb8 <main+0x348>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a40:	d27f      	bcs.n	8006b42 <main+0x2d2>
				  {
#if _FC_DUMP_
					  sensedTheta_f[forced_commute_count] = theta;
#endif
					  sensed_theta_error = forced_theta - theta;
 8006a42:	4b5e      	ldr	r3, [pc, #376]	; (8006bbc <main+0x34c>)
 8006a44:	ed93 7a00 	vldr	s14, [r3]
 8006a48:	4b5d      	ldr	r3, [pc, #372]	; (8006bc0 <main+0x350>)
 8006a4a:	edd3 7a00 	vldr	s15, [r3]
 8006a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a52:	4b5c      	ldr	r3, [pc, #368]	; (8006bc4 <main+0x354>)
 8006a54:	edc3 7a00 	vstr	s15, [r3]
					  if(sensed_theta_error < -M_PI)		sensed_theta_error += 2.0f * M_PI;
 8006a58:	4b5a      	ldr	r3, [pc, #360]	; (8006bc4 <main+0x354>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7f9 fd93 	bl	8000588 <__aeabi_f2d>
 8006a62:	a345      	add	r3, pc, #276	; (adr r3, 8006b78 <main+0x308>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7fa f858 	bl	8000b1c <__aeabi_dcmplt>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d013      	beq.n	8006a9a <main+0x22a>
 8006a72:	4b54      	ldr	r3, [pc, #336]	; (8006bc4 <main+0x354>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7f9 fd86 	bl	8000588 <__aeabi_f2d>
 8006a7c:	a340      	add	r3, pc, #256	; (adr r3, 8006b80 <main+0x310>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fc23 	bl	80002cc <__adddf3>
 8006a86:	4603      	mov	r3, r0
 8006a88:	460c      	mov	r4, r1
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	f7fa f8ab 	bl	8000be8 <__aeabi_d2f>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b4b      	ldr	r3, [pc, #300]	; (8006bc4 <main+0x354>)
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	e01f      	b.n	8006ada <main+0x26a>
					  else if(sensed_theta_error > M_PI)	sensed_theta_error -= 2.0f * M_PI;
 8006a9a:	4b4a      	ldr	r3, [pc, #296]	; (8006bc4 <main+0x354>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7f9 fd72 	bl	8000588 <__aeabi_f2d>
 8006aa4:	a338      	add	r3, pc, #224	; (adr r3, 8006b88 <main+0x318>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7fa f855 	bl	8000b58 <__aeabi_dcmpgt>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d012      	beq.n	8006ada <main+0x26a>
 8006ab4:	4b43      	ldr	r3, [pc, #268]	; (8006bc4 <main+0x354>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7f9 fd65 	bl	8000588 <__aeabi_f2d>
 8006abe:	a330      	add	r3, pc, #192	; (adr r3, 8006b80 <main+0x310>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f7f9 fc00 	bl	80002c8 <__aeabi_dsub>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	4618      	mov	r0, r3
 8006ace:	4621      	mov	r1, r4
 8006ad0:	f7fa f88a 	bl	8000be8 <__aeabi_d2f>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <main+0x354>)
 8006ad8:	601a      	str	r2, [r3, #0]
					  sensed_theta_error_sum += sensed_theta_error;
 8006ada:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <main+0x354>)
 8006adc:	ed93 7a00 	vldr	s14, [r3]
 8006ae0:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <main+0x358>)
 8006ae2:	edd3 7a00 	vldr	s15, [r3]
 8006ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aea:	4b37      	ldr	r3, [pc, #220]	; (8006bc8 <main+0x358>)
 8006aec:	edc3 7a00 	vstr	s15, [r3]
					  forced_theta = forced_commute_count * 2.0f * M_PI / FORCED_COMMUTE_STEPS;
 8006af0:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <main+0x348>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	ee07 3a90 	vmov	s15, r3
 8006af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006b00:	ee17 0a90 	vmov	r0, s15
 8006b04:	f7f9 fd40 	bl	8000588 <__aeabi_f2d>
 8006b08:	a31f      	add	r3, pc, #124	; (adr r3, 8006b88 <main+0x318>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f7f9 fd93 	bl	8000638 <__aeabi_dmul>
 8006b12:	4603      	mov	r3, r0
 8006b14:	460c      	mov	r4, r1
 8006b16:	4618      	mov	r0, r3
 8006b18:	4621      	mov	r1, r4
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <main+0x35c>)
 8006b20:	f7f9 feb4 	bl	800088c <__aeabi_ddiv>
 8006b24:	4603      	mov	r3, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	4618      	mov	r0, r3
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	f7fa f85c 	bl	8000be8 <__aeabi_d2f>
 8006b30:	4602      	mov	r2, r0
 8006b32:	4b22      	ldr	r3, [pc, #136]	; (8006bbc <main+0x34c>)
 8006b34:	601a      	str	r2, [r3, #0]
					  forced_commute_count += 1;
 8006b36:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <main+0x348>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <main+0x348>)
 8006b3e:	6013      	str	r3, [r2, #0]
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 3;
					  break;
				  }
				  break;
 8006b40:	e142      	b.n	8006dc8 <main+0x558>
					  forced_commute_count = 0;
 8006b42:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <main+0x348>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 3;
 8006b48:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <main+0x344>)
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	701a      	strb	r2, [r3, #0]
					  break;
 8006b4e:	e13b      	b.n	8006dc8 <main+0x558>

			  case 3:
				  if(forced_commute_count < 500)
 8006b50:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <main+0x348>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006b58:	d205      	bcs.n	8006b66 <main+0x2f6>
					  forced_commute_count += 1;
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <main+0x348>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <main+0x348>)
 8006b62:	6013      	str	r3, [r2, #0]
				  else
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 4;
				  }
				  break;
 8006b64:	e130      	b.n	8006dc8 <main+0x558>
					  forced_commute_count = 0;
 8006b66:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <main+0x348>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 4;
 8006b6c:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <main+0x344>)
 8006b6e:	2204      	movs	r2, #4
 8006b70:	701a      	strb	r2, [r3, #0]
				  break;
 8006b72:	e129      	b.n	8006dc8 <main+0x558>
 8006b74:	f3af 8000 	nop.w
 8006b78:	54442d18 	.word	0x54442d18
 8006b7c:	c00921fb 	.word	0xc00921fb
 8006b80:	54442d18 	.word	0x54442d18
 8006b84:	401921fb 	.word	0x401921fb
 8006b88:	54442d18 	.word	0x54442d18
 8006b8c:	400921fb 	.word	0x400921fb
 8006b90:	20000594 	.word	0x20000594
 8006b94:	2000056c 	.word	0x2000056c
 8006b98:	0800af60 	.word	0x0800af60
 8006b9c:	2000067c 	.word	0x2000067c
 8006ba0:	40020000 	.word	0x40020000
 8006ba4:	40020400 	.word	0x40020400
 8006ba8:	2000063c 	.word	0x2000063c
 8006bac:	200005e4 	.word	0x200005e4
 8006bb0:	200002f4 	.word	0x200002f4
 8006bb4:	200002a4 	.word	0x200002a4
 8006bb8:	200002b4 	.word	0x200002b4
 8006bbc:	200002a8 	.word	0x200002a8
 8006bc0:	20000290 	.word	0x20000290
 8006bc4:	200005e0 	.word	0x200005e0
 8006bc8:	200002b8 	.word	0x200002b8
 8006bcc:	409f4000 	.word	0x409f4000

			  case 4:
				  if(forced_commute_count < FORCED_COMMUTE_STEPS)
 8006bd0:	4b9d      	ldr	r3, [pc, #628]	; (8006e48 <main+0x5d8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006bd8:	f080 8083 	bcs.w	8006ce2 <main+0x472>
				  {
#if _FC_DUMP_
					  sensedTheta_b[FORCED_COMMUTE_STEPS - forced_commute_count - 1] = theta;
#endif
					  sensed_theta_error = forced_theta - theta;
 8006bdc:	4b9b      	ldr	r3, [pc, #620]	; (8006e4c <main+0x5dc>)
 8006bde:	ed93 7a00 	vldr	s14, [r3]
 8006be2:	4b9b      	ldr	r3, [pc, #620]	; (8006e50 <main+0x5e0>)
 8006be4:	edd3 7a00 	vldr	s15, [r3]
 8006be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bec:	4b99      	ldr	r3, [pc, #612]	; (8006e54 <main+0x5e4>)
 8006bee:	edc3 7a00 	vstr	s15, [r3]
					  if(sensed_theta_error < -M_PI)		sensed_theta_error += 2.0f * M_PI;
 8006bf2:	4b98      	ldr	r3, [pc, #608]	; (8006e54 <main+0x5e4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7f9 fcc6 	bl	8000588 <__aeabi_f2d>
 8006bfc:	a38c      	add	r3, pc, #560	; (adr r3, 8006e30 <main+0x5c0>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f7f9 ff8b 	bl	8000b1c <__aeabi_dcmplt>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d013      	beq.n	8006c34 <main+0x3c4>
 8006c0c:	4b91      	ldr	r3, [pc, #580]	; (8006e54 <main+0x5e4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7f9 fcb9 	bl	8000588 <__aeabi_f2d>
 8006c16:	a388      	add	r3, pc, #544	; (adr r3, 8006e38 <main+0x5c8>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f7f9 fb56 	bl	80002cc <__adddf3>
 8006c20:	4603      	mov	r3, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	4618      	mov	r0, r3
 8006c26:	4621      	mov	r1, r4
 8006c28:	f7f9 ffde 	bl	8000be8 <__aeabi_d2f>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b89      	ldr	r3, [pc, #548]	; (8006e54 <main+0x5e4>)
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e01f      	b.n	8006c74 <main+0x404>
					  else if(sensed_theta_error > M_PI)	sensed_theta_error -= 2.0f * M_PI;
 8006c34:	4b87      	ldr	r3, [pc, #540]	; (8006e54 <main+0x5e4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7f9 fca5 	bl	8000588 <__aeabi_f2d>
 8006c3e:	a380      	add	r3, pc, #512	; (adr r3, 8006e40 <main+0x5d0>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 ff88 	bl	8000b58 <__aeabi_dcmpgt>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d012      	beq.n	8006c74 <main+0x404>
 8006c4e:	4b81      	ldr	r3, [pc, #516]	; (8006e54 <main+0x5e4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7f9 fc98 	bl	8000588 <__aeabi_f2d>
 8006c58:	a377      	add	r3, pc, #476	; (adr r3, 8006e38 <main+0x5c8>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fb33 	bl	80002c8 <__aeabi_dsub>
 8006c62:	4603      	mov	r3, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	4618      	mov	r0, r3
 8006c68:	4621      	mov	r1, r4
 8006c6a:	f7f9 ffbd 	bl	8000be8 <__aeabi_d2f>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	4b78      	ldr	r3, [pc, #480]	; (8006e54 <main+0x5e4>)
 8006c72:	601a      	str	r2, [r3, #0]
					  sensed_theta_error_sum += sensed_theta_error;
 8006c74:	4b77      	ldr	r3, [pc, #476]	; (8006e54 <main+0x5e4>)
 8006c76:	ed93 7a00 	vldr	s14, [r3]
 8006c7a:	4b77      	ldr	r3, [pc, #476]	; (8006e58 <main+0x5e8>)
 8006c7c:	edd3 7a00 	vldr	s15, [r3]
 8006c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c84:	4b74      	ldr	r3, [pc, #464]	; (8006e58 <main+0x5e8>)
 8006c86:	edc3 7a00 	vstr	s15, [r3]
					  forced_theta = (FORCED_COMMUTE_STEPS - forced_commute_count - 1) * 2.0f * M_PI / FORCED_COMMUTE_STEPS;
 8006c8a:	4b6f      	ldr	r3, [pc, #444]	; (8006e48 <main+0x5d8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 8006c92:	3307      	adds	r3, #7
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006ca0:	ee17 0a90 	vmov	r0, s15
 8006ca4:	f7f9 fc70 	bl	8000588 <__aeabi_f2d>
 8006ca8:	a365      	add	r3, pc, #404	; (adr r3, 8006e40 <main+0x5d0>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fcc3 	bl	8000638 <__aeabi_dmul>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	4621      	mov	r1, r4
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	4b67      	ldr	r3, [pc, #412]	; (8006e5c <main+0x5ec>)
 8006cc0:	f7f9 fde4 	bl	800088c <__aeabi_ddiv>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	4618      	mov	r0, r3
 8006cca:	4621      	mov	r1, r4
 8006ccc:	f7f9 ff8c 	bl	8000be8 <__aeabi_d2f>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	4b5e      	ldr	r3, [pc, #376]	; (8006e4c <main+0x5dc>)
 8006cd4:	601a      	str	r2, [r3, #0]
					  forced_commute_count += 1;
 8006cd6:	4b5c      	ldr	r3, [pc, #368]	; (8006e48 <main+0x5d8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	4a5a      	ldr	r2, [pc, #360]	; (8006e48 <main+0x5d8>)
 8006cde:	6013      	str	r3, [r2, #0]
					  else if(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
					  forced_commute_count = 0;
					  forced_commute_state = 0;
					  break;
				  }
				  break;
 8006ce0:	e072      	b.n	8006dc8 <main+0x558>
					  theta_re_offset = fmod(sensed_theta_error_sum * 0.5f / FORCED_COMMUTE_STEPS * POLES / 2, 2.0f * M_PI);
 8006ce2:	4b5d      	ldr	r3, [pc, #372]	; (8006e58 <main+0x5e8>)
 8006ce4:	edd3 7a00 	vldr	s15, [r3]
 8006ce8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006cec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cf0:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8006e60 <main+0x5f0>
 8006cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cf8:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8006cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d08:	ee16 0a90 	vmov	r0, s13
 8006d0c:	f7f9 fc3c 	bl	8000588 <__aeabi_f2d>
 8006d10:	4603      	mov	r3, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8006e38 <main+0x5c8>
 8006d18:	ec44 3b10 	vmov	d0, r3, r4
 8006d1c:	f003 feb8 	bl	800aa90 <fmod>
 8006d20:	ec54 3b10 	vmov	r3, r4, d0
 8006d24:	4618      	mov	r0, r3
 8006d26:	4621      	mov	r1, r4
 8006d28:	f7f9 ff5e 	bl	8000be8 <__aeabi_d2f>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	4b4d      	ldr	r3, [pc, #308]	; (8006e64 <main+0x5f4>)
 8006d30:	601a      	str	r2, [r3, #0]
					  if(theta_re_offset < -M_PI)		theta_re_offset += 2.0f * M_PI;
 8006d32:	4b4c      	ldr	r3, [pc, #304]	; (8006e64 <main+0x5f4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7f9 fc26 	bl	8000588 <__aeabi_f2d>
 8006d3c:	a33c      	add	r3, pc, #240	; (adr r3, 8006e30 <main+0x5c0>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 feeb 	bl	8000b1c <__aeabi_dcmplt>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d013      	beq.n	8006d74 <main+0x504>
 8006d4c:	4b45      	ldr	r3, [pc, #276]	; (8006e64 <main+0x5f4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7f9 fc19 	bl	8000588 <__aeabi_f2d>
 8006d56:	a338      	add	r3, pc, #224	; (adr r3, 8006e38 <main+0x5c8>)
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f7f9 fab6 	bl	80002cc <__adddf3>
 8006d60:	4603      	mov	r3, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	4618      	mov	r0, r3
 8006d66:	4621      	mov	r1, r4
 8006d68:	f7f9 ff3e 	bl	8000be8 <__aeabi_d2f>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	4b3d      	ldr	r3, [pc, #244]	; (8006e64 <main+0x5f4>)
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e01f      	b.n	8006db4 <main+0x544>
					  else if(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
 8006d74:	4b3b      	ldr	r3, [pc, #236]	; (8006e64 <main+0x5f4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7f9 fc05 	bl	8000588 <__aeabi_f2d>
 8006d7e:	a330      	add	r3, pc, #192	; (adr r3, 8006e40 <main+0x5d0>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fee8 	bl	8000b58 <__aeabi_dcmpgt>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d012      	beq.n	8006db4 <main+0x544>
 8006d8e:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <main+0x5f4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7f9 fbf8 	bl	8000588 <__aeabi_f2d>
 8006d98:	a327      	add	r3, pc, #156	; (adr r3, 8006e38 <main+0x5c8>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f7f9 fa93 	bl	80002c8 <__aeabi_dsub>
 8006da2:	4603      	mov	r3, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	4618      	mov	r0, r3
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7f9 ff1d 	bl	8000be8 <__aeabi_d2f>
 8006dae:	4602      	mov	r2, r0
 8006db0:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <main+0x5f4>)
 8006db2:	601a      	str	r2, [r3, #0]
					  forced_commute_count = 0;
 8006db4:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <main+0x5d8>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 0;
 8006dba:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <main+0x5f8>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
					  break;
 8006dc0:	e002      	b.n	8006dc8 <main+0x558>
			  }




		  }
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <main+0x558>
				  break;
 8006dc6:	bf00      	nop

#endif



		  if(ASR_steps <= 0)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dc03      	bgt.n	8006dd6 <main+0x566>
		  {
			  d_theta = 0.0f;
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	e009      	b.n	8006dea <main+0x57a>
		  }
		  else
		  {
			  d_theta = theta - p_theta;
 8006dd6:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <main+0x5e0>)
 8006dd8:	ed93 7a00 	vldr	s14, [r3]
 8006ddc:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <main+0x5fc>)
 8006dde:	edd3 7a00 	vldr	s15, [r3]
 8006de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006de6:	edc7 7a06 	vstr	s15, [r7, #24]
		  }
		  ASR_steps += 1;
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	3301      	adds	r3, #1
 8006dee:	61fb      	str	r3, [r7, #28]

		  p_theta = theta;
 8006df0:	4b17      	ldr	r3, [pc, #92]	; (8006e50 <main+0x5e0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <main+0x5fc>)
 8006df6:	6013      	str	r3, [r2, #0]

		  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 8006df8:	69b8      	ldr	r0, [r7, #24]
 8006dfa:	f7f9 fbc5 	bl	8000588 <__aeabi_f2d>
 8006dfe:	a30c      	add	r3, pc, #48	; (adr r3, 8006e30 <main+0x5c0>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f7f9 fe8a 	bl	8000b1c <__aeabi_dcmplt>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d030      	beq.n	8006e70 <main+0x600>
 8006e0e:	69b8      	ldr	r0, [r7, #24]
 8006e10:	f7f9 fbba 	bl	8000588 <__aeabi_f2d>
 8006e14:	a308      	add	r3, pc, #32	; (adr r3, 8006e38 <main+0x5c8>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fa57 	bl	80002cc <__adddf3>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	4618      	mov	r0, r3
 8006e24:	4621      	mov	r1, r4
 8006e26:	f7f9 fedf 	bl	8000be8 <__aeabi_d2f>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	e03a      	b.n	8006ea6 <main+0x636>
 8006e30:	54442d18 	.word	0x54442d18
 8006e34:	c00921fb 	.word	0xc00921fb
 8006e38:	54442d18 	.word	0x54442d18
 8006e3c:	401921fb 	.word	0x401921fb
 8006e40:	54442d18 	.word	0x54442d18
 8006e44:	400921fb 	.word	0x400921fb
 8006e48:	200002b4 	.word	0x200002b4
 8006e4c:	200002a8 	.word	0x200002a8
 8006e50:	20000290 	.word	0x20000290
 8006e54:	200005e0 	.word	0x200005e0
 8006e58:	200002b8 	.word	0x200002b8
 8006e5c:	409f4000 	.word	0x409f4000
 8006e60:	44fa0000 	.word	0x44fa0000
 8006e64:	20000018 	.word	0x20000018
 8006e68:	200002a4 	.word	0x200002a4
 8006e6c:	2000029c 	.word	0x2000029c
		  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 8006e70:	69b8      	ldr	r0, [r7, #24]
 8006e72:	f7f9 fb89 	bl	8000588 <__aeabi_f2d>
 8006e76:	a398      	add	r3, pc, #608	; (adr r3, 80070d8 <main+0x868>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f7f9 fe6c 	bl	8000b58 <__aeabi_dcmpgt>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00f      	beq.n	8006ea6 <main+0x636>
 8006e86:	69b8      	ldr	r0, [r7, #24]
 8006e88:	f7f9 fb7e 	bl	8000588 <__aeabi_f2d>
 8006e8c:	a394      	add	r3, pc, #592	; (adr r3, 80070e0 <main+0x870>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 fa19 	bl	80002c8 <__aeabi_dsub>
 8006e96:	4603      	mov	r3, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	f7f9 fea3 	bl	8000be8 <__aeabi_d2f>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	61bb      	str	r3, [r7, #24]

		  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 8006ea6:	4b7c      	ldr	r3, [pc, #496]	; (8007098 <main+0x828>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7f9 fb6c 	bl	8000588 <__aeabi_f2d>
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	4b79      	ldr	r3, [pc, #484]	; (800709c <main+0x82c>)
 8006eb6:	f7f9 fbbf 	bl	8000638 <__aeabi_dmul>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	4625      	mov	r5, r4
 8006ec0:	461c      	mov	r4, r3
 8006ec2:	69b8      	ldr	r0, [r7, #24]
 8006ec4:	f7f9 fb60 	bl	8000588 <__aeabi_f2d>
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	4b73      	ldr	r3, [pc, #460]	; (800709c <main+0x82c>)
 8006ece:	f7f9 fbb3 	bl	8000638 <__aeabi_dmul>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4690      	mov	r8, r2
 8006ed8:	4699      	mov	r9, r3
 8006eda:	4b71      	ldr	r3, [pc, #452]	; (80070a0 <main+0x830>)
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7f9 fb53 	bl	8000588 <__aeabi_f2d>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4649      	mov	r1, r9
 8006eea:	f7f9 fccf 	bl	800088c <__aeabi_ddiv>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7f9 f9e9 	bl	80002cc <__adddf3>
 8006efa:	4603      	mov	r3, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	4618      	mov	r0, r3
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7f9 fe71 	bl	8000be8 <__aeabi_d2f>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b63      	ldr	r3, [pc, #396]	; (8007098 <main+0x828>)
 8006f0a:	601a      	str	r2, [r3, #0]
		  /********** ASR (Auto Speed Regulator) **********/

#if _ASR_ENABLE_


		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 8006f0c:	4b65      	ldr	r3, [pc, #404]	; (80070a4 <main+0x834>)
 8006f0e:	edd3 7a00 	vldr	s15, [r3]
 8006f12:	eeb1 7a67 	vneg.f32	s14, s15
 8006f16:	4b64      	ldr	r3, [pc, #400]	; (80070a8 <main+0x838>)
 8006f18:	edd3 7a00 	vldr	s15, [r3]
 8006f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f24:	dd07      	ble.n	8006f36 <main+0x6c6>
 8006f26:	4b5f      	ldr	r3, [pc, #380]	; (80070a4 <main+0x834>)
 8006f28:	edd3 7a00 	vldr	s15, [r3]
 8006f2c:	eef1 7a67 	vneg.f32	s15, s15
 8006f30:	edc7 7a05 	vstr	s15, [r7, #20]
 8006f34:	e011      	b.n	8006f5a <main+0x6ea>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 8006f36:	4b5c      	ldr	r3, [pc, #368]	; (80070a8 <main+0x838>)
 8006f38:	ed93 7a00 	vldr	s14, [r3]
 8006f3c:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <main+0x834>)
 8006f3e:	edd3 7a00 	vldr	s15, [r3]
 8006f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4a:	dd03      	ble.n	8006f54 <main+0x6e4>
 8006f4c:	4b55      	ldr	r3, [pc, #340]	; (80070a4 <main+0x834>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	e002      	b.n	8006f5a <main+0x6ea>
		  else								_omega_ref = omega_ref;
 8006f54:	4b54      	ldr	r3, [pc, #336]	; (80070a8 <main+0x838>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	617b      	str	r3, [r7, #20]

		  omega_error = _omega_ref - omega;
 8006f5a:	4b4f      	ldr	r3, [pc, #316]	; (8007098 <main+0x828>)
 8006f5c:	edd3 7a00 	vldr	s15, [r3]
 8006f60:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f68:	4b50      	ldr	r3, [pc, #320]	; (80070ac <main+0x83c>)
 8006f6a:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 8006f6e:	4b4f      	ldr	r3, [pc, #316]	; (80070ac <main+0x83c>)
 8006f70:	edd3 7a00 	vldr	s15, [r3]
 8006f74:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f7c:	edc7 7a04 	vstr	s15, [r7, #16]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 8006f80:	6938      	ldr	r0, [r7, #16]
 8006f82:	f7f9 fb01 	bl	8000588 <__aeabi_f2d>
 8006f86:	4604      	mov	r4, r0
 8006f88:	460d      	mov	r5, r1
 8006f8a:	4b45      	ldr	r3, [pc, #276]	; (80070a0 <main+0x830>)
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7f9 fafb 	bl	8000588 <__aeabi_f2d>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	f04f 0000 	mov.w	r0, #0
 8006f9a:	4945      	ldr	r1, [pc, #276]	; (80070b0 <main+0x840>)
 8006f9c:	f7f9 fc76 	bl	800088c <__aeabi_ddiv>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 fdb8 	bl	8000b1c <__aeabi_dcmplt>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d008      	beq.n	8006fc4 <main+0x754>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 8006fb2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80070b4 <main+0x844>
 8006fb6:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 8006fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fbe:	edc7 7a04 	vstr	s15, [r7, #16]
 8006fc2:	e020      	b.n	8007006 <main+0x796>
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 8006fc4:	6938      	ldr	r0, [r7, #16]
 8006fc6:	f7f9 fadf 	bl	8000588 <__aeabi_f2d>
 8006fca:	4604      	mov	r4, r0
 8006fcc:	460d      	mov	r5, r1
 8006fce:	4b34      	ldr	r3, [pc, #208]	; (80070a0 <main+0x830>)
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7f9 fad9 	bl	8000588 <__aeabi_f2d>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	f04f 0000 	mov.w	r0, #0
 8006fde:	4936      	ldr	r1, [pc, #216]	; (80070b8 <main+0x848>)
 8006fe0:	f7f9 fc54 	bl	800088c <__aeabi_ddiv>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7f9 fdb4 	bl	8000b58 <__aeabi_dcmpgt>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <main+0x796>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 8006ff6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80070b4 <main+0x844>
 8006ffa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8006ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007002:	edc7 7a04 	vstr	s15, [r7, #16]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 8007006:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80070b4 <main+0x844>
 800700a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800700e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007012:	edd7 6a04 	vldr	s13, [r7, #16]
 8007016:	edd7 7a03 	vldr	s15, [r7, #12]
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <main+0x84c>)
 8007024:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	60fb      	str	r3, [r7, #12]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 800702c:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <main+0x850>)
 800702e:	ed93 7a00 	vldr	s14, [r3]
 8007032:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <main+0x83c>)
 8007034:	edd3 7a00 	vldr	s15, [r3]
 8007038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800703c:	4b21      	ldr	r3, [pc, #132]	; (80070c4 <main+0x854>)
 800703e:	edd3 6a00 	vldr	s13, [r3]
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <main+0x84c>)
 8007044:	edd3 7a00 	vldr	s15, [r3]
 8007048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800704c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007050:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <main+0x858>)
 8007052:	edc3 7a00 	vstr	s15, [r3]

		  Id_ref = 0.0f;
 8007056:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <main+0x85c>)
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
		  Iq_ref = KT * torque_ref;
 800705e:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <main+0x858>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7f9 fa90 	bl	8000588 <__aeabi_f2d>
 8007068:	a309      	add	r3, pc, #36	; (adr r3, 8007090 <main+0x820>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7f9 fae3 	bl	8000638 <__aeabi_dmul>
 8007072:	4603      	mov	r3, r0
 8007074:	460c      	mov	r4, r1
 8007076:	4618      	mov	r0, r3
 8007078:	4621      	mov	r1, r4
 800707a:	f7f9 fdb5 	bl	8000be8 <__aeabi_d2f>
 800707e:	4602      	mov	r2, r0
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <main+0x860>)
 8007082:	601a      	str	r2, [r3, #0]


		  /********** end of ASR **********/


		  ASR_flg = 0;
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <main+0x864>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 800708a:	e4a2      	b.n	80069d2 <main+0x162>
 800708c:	f3af 8000 	nop.w
 8007090:	8b6ec798 	.word	0x8b6ec798
 8007094:	3fd22b62 	.word	0x3fd22b62
 8007098:	200002a0 	.word	0x200002a0
 800709c:	3fe00000 	.word	0x3fe00000
 80070a0:	3a83126f 	.word	0x3a83126f
 80070a4:	2000003c 	.word	0x2000003c
 80070a8:	200002fc 	.word	0x200002fc
 80070ac:	20000300 	.word	0x20000300
 80070b0:	c0180000 	.word	0xc0180000
 80070b4:	3a83126f 	.word	0x3a83126f
 80070b8:	40180000 	.word	0x40180000
 80070bc:	20000304 	.word	0x20000304
 80070c0:	20000034 	.word	0x20000034
 80070c4:	20000038 	.word	0x20000038
 80070c8:	20000308 	.word	0x20000308
 80070cc:	200002dc 	.word	0x200002dc
 80070d0:	200002e0 	.word	0x200002e0
 80070d4:	200002f4 	.word	0x200002f4
 80070d8:	54442d18 	.word	0x54442d18
 80070dc:	400921fb 	.word	0x400921fb
 80070e0:	54442d18 	.word	0x54442d18
 80070e4:	401921fb 	.word	0x401921fb

080070e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b094      	sub	sp, #80	; 0x50
 80070ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80070ee:	f107 031c 	add.w	r3, r7, #28
 80070f2:	2234      	movs	r2, #52	; 0x34
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fc86 	bl	8008a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	605a      	str	r2, [r3, #4]
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	60da      	str	r2, [r3, #12]
 800710a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800710c:	2300      	movs	r3, #0
 800710e:	607b      	str	r3, [r7, #4]
 8007110:	4b29      	ldr	r3, [pc, #164]	; (80071b8 <SystemClock_Config+0xd0>)
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	4a28      	ldr	r2, [pc, #160]	; (80071b8 <SystemClock_Config+0xd0>)
 8007116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711a:	6413      	str	r3, [r2, #64]	; 0x40
 800711c:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <SystemClock_Config+0xd0>)
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007128:	2300      	movs	r3, #0
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	4b23      	ldr	r3, [pc, #140]	; (80071bc <SystemClock_Config+0xd4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a22      	ldr	r2, [pc, #136]	; (80071bc <SystemClock_Config+0xd4>)
 8007132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	4b20      	ldr	r3, [pc, #128]	; (80071bc <SystemClock_Config+0xd4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007144:	2302      	movs	r3, #2
 8007146:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007148:	2301      	movs	r3, #1
 800714a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800714c:	2310      	movs	r3, #16
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007150:	2302      	movs	r3, #2
 8007152:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007154:	2300      	movs	r3, #0
 8007156:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8007158:	2310      	movs	r3, #16
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 800715c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007160:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007162:	2302      	movs	r3, #2
 8007164:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007166:	2302      	movs	r3, #2
 8007168:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800716a:	2302      	movs	r3, #2
 800716c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800716e:	f107 031c 	add.w	r3, r7, #28
 8007172:	4618      	mov	r0, r3
 8007174:	f7fc fa2a 	bl	80035cc <HAL_RCC_OscConfig>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800717e:	f001 f854 	bl	800822a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007182:	230f      	movs	r3, #15
 8007184:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007186:	2302      	movs	r3, #2
 8007188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800718e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007198:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800719a:	f107 0308 	add.w	r3, r7, #8
 800719e:	2105      	movs	r1, #5
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fb ff5d 	bl	8003060 <HAL_RCC_ClockConfig>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80071ac:	f001 f83d 	bl	800822a <Error_Handler>
  }
}
 80071b0:	bf00      	nop
 80071b2:	3750      	adds	r7, #80	; 0x50
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40023800 	.word	0x40023800
 80071bc:	40007000 	.word	0x40007000

080071c0 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80071c8:	2200      	movs	r2, #0
 80071ca:	2140      	movs	r1, #64	; 0x40
 80071cc:	4803      	ldr	r0, [pc, #12]	; (80071dc <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80071ce:	f7fb ff13 	bl	8002ff8 <HAL_GPIO_WritePin>

}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40020400 	.word	0x40020400

080071e0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80071e8:	2200      	movs	r2, #0
 80071ea:	2140      	movs	r1, #64	; 0x40
 80071ec:	4803      	ldr	r0, [pc, #12]	; (80071fc <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80071ee:	f7fb ff03 	bl	8002ff8 <HAL_GPIO_WritePin>

}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40020400 	.word	0x40020400

08007200 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8007208:	2200      	movs	r2, #0
 800720a:	2140      	movs	r1, #64	; 0x40
 800720c:	4803      	ldr	r0, [pc, #12]	; (800721c <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800720e:	f7fb fef3 	bl	8002ff8 <HAL_GPIO_WritePin>

}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40020400 	.word	0x40020400

08007220 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 8007228:	4b14      	ldr	r3, [pc, #80]	; (800727c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fa fd62 	bl	8001cf8 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 8007234:	4b13      	ldr	r3, [pc, #76]	; (8007284 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]

#if _ASR_ENABLE_ && !_APR_ENABLE_
	if(can1RxHeader.StdId == 0x004 && can1RxHeader.DLC == 0x4)
 800723a:	4b11      	ldr	r3, [pc, #68]	; (8007280 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b04      	cmp	r3, #4
 8007240:	d112      	bne.n	8007268 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8007242:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b04      	cmp	r3, #4
 8007248:	d10e      	bne.n	8007268 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		controlRef.byte[0] = can1RxData[0];
 800724a:	4b0c      	ldr	r3, [pc, #48]	; (800727c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8007258:	789b      	ldrb	r3, [r3, #2]
 800725a:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800725c:	4b07      	ldr	r3, [pc, #28]	; (800727c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800725e:	78db      	ldrb	r3, [r3, #3]
 8007260:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a08      	ldr	r2, [pc, #32]	; (8007288 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8007266:	6013      	str	r3, [r2, #0]
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8007268:	2201      	movs	r2, #1
 800726a:	2140      	movs	r1, #64	; 0x40
 800726c:	4807      	ldr	r0, [pc, #28]	; (800728c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800726e:	f7fb fec3 	bl	8002ff8 <HAL_GPIO_WritePin>

}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	200005d8 	.word	0x200005d8
 8007280:	200005bc 	.word	0x200005bc
 8007284:	2000030c 	.word	0x2000030c
 8007288:	200002fc 	.word	0x200002fc
 800728c:	40020000 	.word	0x40020000

08007290 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a07      	ldr	r2, [pc, #28]	; (80072bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d108      	bne.n	80072b4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	2b10      	cmp	r3, #16
 80072ae:	d001      	beq.n	80072b4 <HAL_TIM_PeriodElapsedCallback+0x24>
		{

			currentControl();
 80072b0:	f000 f806 	bl	80072c0 <currentControl>
		}


	}

}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40010400 	.word	0x40010400

080072c0 <currentControl>:




inline static void currentControl(void)
{
 80072c0:	b5b0      	push	{r4, r5, r7, lr}
 80072c2:	af00      	add	r7, sp, #0
	static float Id_error_integ_temp2 = 0.0f;
	static float Iq_error_integ_temp1 = 0.0f;
	static float Iq_error_integ_temp2 = 0.0f;


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 80072c4:	2201      	movs	r2, #1
 80072c6:	2140      	movs	r1, #64	; 0x40
 80072c8:	48b7      	ldr	r0, [pc, #732]	; (80075a8 <currentControl+0x2e8>)
 80072ca:	f7fb fe95 	bl	8002ff8 <HAL_GPIO_WritePin>


	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80072ce:	2201      	movs	r2, #1
 80072d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072d4:	48b4      	ldr	r0, [pc, #720]	; (80075a8 <currentControl+0x2e8>)
 80072d6:	f7fb fe8f 	bl	8002ff8 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 80072da:	4bb4      	ldr	r3, [pc, #720]	; (80075ac <currentControl+0x2ec>)
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80072e6:	4ab1      	ldr	r2, [pc, #708]	; (80075ac <currentControl+0x2ec>)
 80072e8:	7812      	ldrb	r2, [r2, #0]
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	4313      	orrs	r3, r2
 80072ee:	461a      	mov	r2, r3
 80072f0:	4baf      	ldr	r3, [pc, #700]	; (80075b0 <currentControl+0x2f0>)
 80072f2:	601a      	str	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 80072f4:	4bae      	ldr	r3, [pc, #696]	; (80075b0 <currentControl+0x2f0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007300:	eddf 6aac 	vldr	s13, [pc, #688]	; 80075b4 <currentControl+0x2f4>
 8007304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007308:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800730c:	ee17 0a90 	vmov	r0, s15
 8007310:	f7f9 f93a 	bl	8000588 <__aeabi_f2d>
 8007314:	a3a0      	add	r3, pc, #640	; (adr r3, 8007598 <currentControl+0x2d8>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f9 f98d 	bl	8000638 <__aeabi_dmul>
 800731e:	4603      	mov	r3, r0
 8007320:	460c      	mov	r4, r1
 8007322:	4625      	mov	r5, r4
 8007324:	461c      	mov	r4, r3
 8007326:	4ba4      	ldr	r3, [pc, #656]	; (80075b8 <currentControl+0x2f8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4618      	mov	r0, r3
 800732c:	f7f9 f92c 	bl	8000588 <__aeabi_f2d>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f7f8 ffc8 	bl	80002cc <__adddf3>
 800733c:	4603      	mov	r3, r0
 800733e:	460c      	mov	r4, r1
 8007340:	4618      	mov	r0, r3
 8007342:	4621      	mov	r1, r4
 8007344:	f7f9 fc50 	bl	8000be8 <__aeabi_d2f>
 8007348:	4602      	mov	r2, r0
 800734a:	4b9c      	ldr	r3, [pc, #624]	; (80075bc <currentControl+0x2fc>)
 800734c:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 800734e:	4b9b      	ldr	r3, [pc, #620]	; (80075bc <currentControl+0x2fc>)
 8007350:	edd3 7a00 	vldr	s15, [r3]
 8007354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735c:	d513      	bpl.n	8007386 <currentControl+0xc6>
 800735e:	4b97      	ldr	r3, [pc, #604]	; (80075bc <currentControl+0x2fc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f7f9 f910 	bl	8000588 <__aeabi_f2d>
 8007368:	a38d      	add	r3, pc, #564	; (adr r3, 80075a0 <currentControl+0x2e0>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f8 ffad 	bl	80002cc <__adddf3>
 8007372:	4603      	mov	r3, r0
 8007374:	460c      	mov	r4, r1
 8007376:	4618      	mov	r0, r3
 8007378:	4621      	mov	r1, r4
 800737a:	f7f9 fc35 	bl	8000be8 <__aeabi_d2f>
 800737e:	4602      	mov	r2, r0
 8007380:	4b8f      	ldr	r3, [pc, #572]	; (80075c0 <currentControl+0x300>)
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e024      	b.n	80073d0 <currentControl+0x110>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 8007386:	4b8d      	ldr	r3, [pc, #564]	; (80075bc <currentControl+0x2fc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7f9 f8fc 	bl	8000588 <__aeabi_f2d>
 8007390:	a383      	add	r3, pc, #524	; (adr r3, 80075a0 <currentControl+0x2e0>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f9 fbd5 	bl	8000b44 <__aeabi_dcmpge>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d013      	beq.n	80073c8 <currentControl+0x108>
 80073a0:	4b86      	ldr	r3, [pc, #536]	; (80075bc <currentControl+0x2fc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7f9 f8ef 	bl	8000588 <__aeabi_f2d>
 80073aa:	a37d      	add	r3, pc, #500	; (adr r3, 80075a0 <currentControl+0x2e0>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f8 ff8a 	bl	80002c8 <__aeabi_dsub>
 80073b4:	4603      	mov	r3, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4618      	mov	r0, r3
 80073ba:	4621      	mov	r1, r4
 80073bc:	f7f9 fc14 	bl	8000be8 <__aeabi_d2f>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b7f      	ldr	r3, [pc, #508]	; (80075c0 <currentControl+0x300>)
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e003      	b.n	80073d0 <currentControl+0x110>
	else						theta = _theta;
 80073c8:	4b7c      	ldr	r3, [pc, #496]	; (80075bc <currentControl+0x2fc>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a7c      	ldr	r2, [pc, #496]	; (80075c0 <currentControl+0x300>)
 80073ce:	6013      	str	r3, [r2, #0]


	// calculate sin(theta_re), cos(theta_re)
	if(forced_commute_state > 0)
 80073d0:	4b7c      	ldr	r3, [pc, #496]	; (80075c4 <currentControl+0x304>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8082 	beq.w	80074e0 <currentControl+0x220>
	{

		_forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 80073dc:	4b7a      	ldr	r3, [pc, #488]	; (80075c8 <currentControl+0x308>)
 80073de:	edd3 7a00 	vldr	s15, [r3]
 80073e2:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80073e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80073ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80073f2:	eddf 0a76 	vldr	s1, [pc, #472]	; 80075cc <currentControl+0x30c>
 80073f6:	eeb0 0a66 	vmov.f32	s0, s13
 80073fa:	f003 fbad 	bl	800ab58 <fmodf>
 80073fe:	eef0 7a40 	vmov.f32	s15, s0
 8007402:	4b73      	ldr	r3, [pc, #460]	; (80075d0 <currentControl+0x310>)
 8007404:	edc3 7a00 	vstr	s15, [r3]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 8007408:	4b71      	ldr	r3, [pc, #452]	; (80075d0 <currentControl+0x310>)
 800740a:	edd3 7a00 	vldr	s15, [r3]
 800740e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007416:	d513      	bpl.n	8007440 <currentControl+0x180>
 8007418:	4b6d      	ldr	r3, [pc, #436]	; (80075d0 <currentControl+0x310>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f7f9 f8b3 	bl	8000588 <__aeabi_f2d>
 8007422:	a35f      	add	r3, pc, #380	; (adr r3, 80075a0 <currentControl+0x2e0>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f7f8 ff50 	bl	80002cc <__adddf3>
 800742c:	4603      	mov	r3, r0
 800742e:	460c      	mov	r4, r1
 8007430:	4618      	mov	r0, r3
 8007432:	4621      	mov	r1, r4
 8007434:	f7f9 fbd8 	bl	8000be8 <__aeabi_d2f>
 8007438:	4602      	mov	r2, r0
 800743a:	4b66      	ldr	r3, [pc, #408]	; (80075d4 <currentControl+0x314>)
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e024      	b.n	800748a <currentControl+0x1ca>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 8007440:	4b63      	ldr	r3, [pc, #396]	; (80075d0 <currentControl+0x310>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f7f9 f89f 	bl	8000588 <__aeabi_f2d>
 800744a:	a355      	add	r3, pc, #340	; (adr r3, 80075a0 <currentControl+0x2e0>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f7f9 fb78 	bl	8000b44 <__aeabi_dcmpge>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d013      	beq.n	8007482 <currentControl+0x1c2>
 800745a:	4b5d      	ldr	r3, [pc, #372]	; (80075d0 <currentControl+0x310>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f7f9 f892 	bl	8000588 <__aeabi_f2d>
 8007464:	a34e      	add	r3, pc, #312	; (adr r3, 80075a0 <currentControl+0x2e0>)
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f7f8 ff2d 	bl	80002c8 <__aeabi_dsub>
 800746e:	4603      	mov	r3, r0
 8007470:	460c      	mov	r4, r1
 8007472:	4618      	mov	r0, r3
 8007474:	4621      	mov	r1, r4
 8007476:	f7f9 fbb7 	bl	8000be8 <__aeabi_d2f>
 800747a:	4602      	mov	r2, r0
 800747c:	4b55      	ldr	r3, [pc, #340]	; (80075d4 <currentControl+0x314>)
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e003      	b.n	800748a <currentControl+0x1ca>
		else									forced_theta_re = _forced_theta_re;
 8007482:	4b53      	ldr	r3, [pc, #332]	; (80075d0 <currentControl+0x310>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a53      	ldr	r2, [pc, #332]	; (80075d4 <currentControl+0x314>)
 8007488:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800748a:	4b52      	ldr	r3, [pc, #328]	; (80075d4 <currentControl+0x314>)
 800748c:	edd3 7a00 	vldr	s15, [r3]
 8007490:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80075d8 <currentControl+0x318>
 8007494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007498:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800749c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074a0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80075dc <currentControl+0x31c>
 80074a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074ac:	ee17 3a90 	vmov	r3, s15
 80074b0:	4a4b      	ldr	r2, [pc, #300]	; (80075e0 <currentControl+0x320>)
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a4a      	ldr	r2, [pc, #296]	; (80075e4 <currentControl+0x324>)
 80074ba:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 80074bc:	4b45      	ldr	r3, [pc, #276]	; (80075d4 <currentControl+0x314>)
 80074be:	edd3 7a00 	vldr	s15, [r3]
 80074c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80075e8 <currentControl+0x328>
 80074c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074ce:	ee17 3a90 	vmov	r3, s15
 80074d2:	4a43      	ldr	r2, [pc, #268]	; (80075e0 <currentControl+0x320>)
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a44      	ldr	r2, [pc, #272]	; (80075ec <currentControl+0x32c>)
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e0de      	b.n	800769e <currentControl+0x3de>
	}
	else
	{

		_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 80074e0:	4b33      	ldr	r3, [pc, #204]	; (80075b0 <currentControl+0x2f0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074ec:	eddf 6a31 	vldr	s13, [pc, #196]	; 80075b4 <currentControl+0x2f4>
 80074f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80074f8:	ee17 0a90 	vmov	r0, s15
 80074fc:	f7f9 f844 	bl	8000588 <__aeabi_f2d>
 8007500:	a325      	add	r3, pc, #148	; (adr r3, 8007598 <currentControl+0x2d8>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 f897 	bl	8000638 <__aeabi_dmul>
 800750a:	4603      	mov	r3, r0
 800750c:	460c      	mov	r4, r1
 800750e:	4618      	mov	r0, r3
 8007510:	4621      	mov	r1, r4
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <currentControl+0x330>)
 8007518:	f7f9 f88e 	bl	8000638 <__aeabi_dmul>
 800751c:	4603      	mov	r3, r0
 800751e:	460c      	mov	r4, r1
 8007520:	4618      	mov	r0, r3
 8007522:	4621      	mov	r1, r4
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800752c:	f7f9 f9ae 	bl	800088c <__aeabi_ddiv>
 8007530:	4603      	mov	r3, r0
 8007532:	460c      	mov	r4, r1
 8007534:	4618      	mov	r0, r3
 8007536:	4621      	mov	r1, r4
 8007538:	f7f9 fb56 	bl	8000be8 <__aeabi_d2f>
 800753c:	4603      	mov	r3, r0
 800753e:	eddf 0a23 	vldr	s1, [pc, #140]	; 80075cc <currentControl+0x30c>
 8007542:	ee00 3a10 	vmov	s0, r3
 8007546:	f003 fb07 	bl	800ab58 <fmodf>
 800754a:	eeb0 7a40 	vmov.f32	s14, s0
 800754e:	4b29      	ldr	r3, [pc, #164]	; (80075f4 <currentControl+0x334>)
 8007550:	edd3 7a00 	vldr	s15, [r3]
 8007554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007558:	4b27      	ldr	r3, [pc, #156]	; (80075f8 <currentControl+0x338>)
 800755a:	edc3 7a00 	vstr	s15, [r3]

		if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 800755e:	4b26      	ldr	r3, [pc, #152]	; (80075f8 <currentControl+0x338>)
 8007560:	edd3 7a00 	vldr	s15, [r3]
 8007564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756c:	d548      	bpl.n	8007600 <currentControl+0x340>
 800756e:	4b22      	ldr	r3, [pc, #136]	; (80075f8 <currentControl+0x338>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f7f9 f808 	bl	8000588 <__aeabi_f2d>
 8007578:	a309      	add	r3, pc, #36	; (adr r3, 80075a0 <currentControl+0x2e0>)
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f7f8 fea5 	bl	80002cc <__adddf3>
 8007582:	4603      	mov	r3, r0
 8007584:	460c      	mov	r4, r1
 8007586:	4618      	mov	r0, r3
 8007588:	4621      	mov	r1, r4
 800758a:	f7f9 fb2d 	bl	8000be8 <__aeabi_d2f>
 800758e:	4602      	mov	r2, r0
 8007590:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <currentControl+0x33c>)
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e059      	b.n	800764a <currentControl+0x38a>
 8007596:	bf00      	nop
 8007598:	54442d18 	.word	0x54442d18
 800759c:	400921fb 	.word	0x400921fb
 80075a0:	54442d18 	.word	0x54442d18
 80075a4:	401921fb 	.word	0x401921fb
 80075a8:	40020400 	.word	0x40020400
 80075ac:	20000288 	.word	0x20000288
 80075b0:	2000028c 	.word	0x2000028c
 80075b4:	46800000 	.word	0x46800000
 80075b8:	20000280 	.word	0x20000280
 80075bc:	20000310 	.word	0x20000310
 80075c0:	20000290 	.word	0x20000290
 80075c4:	200002a4 	.word	0x200002a4
 80075c8:	200002a8 	.word	0x200002a8
 80075cc:	40c90fdb 	.word	0x40c90fdb
 80075d0:	200002ac 	.word	0x200002ac
 80075d4:	200002b0 	.word	0x200002b0
 80075d8:	3ea2f838 	.word	0x3ea2f838
 80075dc:	459c4000 	.word	0x459c4000
 80075e0:	0800af78 	.word	0x0800af78
 80075e4:	2000001c 	.word	0x2000001c
 80075e8:	44c6f195 	.word	0x44c6f195
 80075ec:	20000298 	.word	0x20000298
 80075f0:	40360000 	.word	0x40360000
 80075f4:	20000018 	.word	0x20000018
 80075f8:	20000314 	.word	0x20000314
 80075fc:	20000294 	.word	0x20000294
		else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8007600:	4bad      	ldr	r3, [pc, #692]	; (80078b8 <currentControl+0x5f8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f7f8 ffbf 	bl	8000588 <__aeabi_f2d>
 800760a:	a3a7      	add	r3, pc, #668	; (adr r3, 80078a8 <currentControl+0x5e8>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f9 fa98 	bl	8000b44 <__aeabi_dcmpge>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d013      	beq.n	8007642 <currentControl+0x382>
 800761a:	4ba7      	ldr	r3, [pc, #668]	; (80078b8 <currentControl+0x5f8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7f8 ffb2 	bl	8000588 <__aeabi_f2d>
 8007624:	a3a0      	add	r3, pc, #640	; (adr r3, 80078a8 <currentControl+0x5e8>)
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 fe4d 	bl	80002c8 <__aeabi_dsub>
 800762e:	4603      	mov	r3, r0
 8007630:	460c      	mov	r4, r1
 8007632:	4618      	mov	r0, r3
 8007634:	4621      	mov	r1, r4
 8007636:	f7f9 fad7 	bl	8000be8 <__aeabi_d2f>
 800763a:	4602      	mov	r2, r0
 800763c:	4b9f      	ldr	r3, [pc, #636]	; (80078bc <currentControl+0x5fc>)
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	e003      	b.n	800764a <currentControl+0x38a>
		else							theta_re = _theta_re;
 8007642:	4b9d      	ldr	r3, [pc, #628]	; (80078b8 <currentControl+0x5f8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a9d      	ldr	r2, [pc, #628]	; (80078bc <currentControl+0x5fc>)
 8007648:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800764a:	4b9c      	ldr	r3, [pc, #624]	; (80078bc <currentControl+0x5fc>)
 800764c:	edd3 7a00 	vldr	s15, [r3]
 8007650:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80078c0 <currentControl+0x600>
 8007654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007658:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800765c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007660:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80078c4 <currentControl+0x604>
 8007664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800766c:	ee17 3a90 	vmov	r3, s15
 8007670:	4a95      	ldr	r2, [pc, #596]	; (80078c8 <currentControl+0x608>)
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a94      	ldr	r2, [pc, #592]	; (80078cc <currentControl+0x60c>)
 800767a:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 800767c:	4b8f      	ldr	r3, [pc, #572]	; (80078bc <currentControl+0x5fc>)
 800767e:	edd3 7a00 	vldr	s15, [r3]
 8007682:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80078d0 <currentControl+0x610>
 8007686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800768a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800768e:	ee17 3a90 	vmov	r3, s15
 8007692:	4a8d      	ldr	r2, [pc, #564]	; (80078c8 <currentControl+0x608>)
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a8e      	ldr	r2, [pc, #568]	; (80078d4 <currentControl+0x614>)
 800769c:	6013      	str	r3, [r2, #0]
	}


	get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 800769e:	4b8e      	ldr	r3, [pc, #568]	; (80078d8 <currentControl+0x618>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	4b8a      	ldr	r3, [pc, #552]	; (80078cc <currentControl+0x60c>)
 80076a4:	edd3 7a00 	vldr	s15, [r3]
 80076a8:	4b8a      	ldr	r3, [pc, #552]	; (80078d4 <currentControl+0x614>)
 80076aa:	ed93 7a00 	vldr	s14, [r3]
 80076ae:	eef0 0a47 	vmov.f32	s1, s14
 80076b2:	eeb0 0a67 	vmov.f32	s0, s15
 80076b6:	4989      	ldr	r1, [pc, #548]	; (80078dc <currentControl+0x61c>)
 80076b8:	4889      	ldr	r0, [pc, #548]	; (80078e0 <currentControl+0x620>)
 80076ba:	f7fe fd81 	bl	80061c0 <get_current_dq>



	if(theta_re < M_PI)
 80076be:	4b7f      	ldr	r3, [pc, #508]	; (80078bc <currentControl+0x5fc>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7f8 ff60 	bl	8000588 <__aeabi_f2d>
 80076c8:	a379      	add	r3, pc, #484	; (adr r3, 80078b0 <currentControl+0x5f0>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f9 fa25 	bl	8000b1c <__aeabi_dcmplt>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <currentControl+0x424>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80076d8:	2200      	movs	r2, #0
 80076da:	2140      	movs	r1, #64	; 0x40
 80076dc:	4881      	ldr	r0, [pc, #516]	; (80078e4 <currentControl+0x624>)
 80076de:	f7fb fc8b 	bl	8002ff8 <HAL_GPIO_WritePin>
 80076e2:	e004      	b.n	80076ee <currentControl+0x42e>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 80076e4:	2201      	movs	r2, #1
 80076e6:	2140      	movs	r1, #64	; 0x40
 80076e8:	487e      	ldr	r0, [pc, #504]	; (80078e4 <currentControl+0x624>)
 80076ea:	f7fb fc85 	bl	8002ff8 <HAL_GPIO_WritePin>

	/********** ACR (Auto Current Regulator) **********/

#if _ACR_ENABLE_

	if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 80076ee:	4b7e      	ldr	r3, [pc, #504]	; (80078e8 <currentControl+0x628>)
 80076f0:	edd3 7a00 	vldr	s15, [r3]
 80076f4:	eeb1 7a67 	vneg.f32	s14, s15
 80076f8:	4b7c      	ldr	r3, [pc, #496]	; (80078ec <currentControl+0x62c>)
 80076fa:	edd3 7a00 	vldr	s15, [r3]
 80076fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007706:	dd08      	ble.n	800771a <currentControl+0x45a>
 8007708:	4b77      	ldr	r3, [pc, #476]	; (80078e8 <currentControl+0x628>)
 800770a:	edd3 7a00 	vldr	s15, [r3]
 800770e:	eef1 7a67 	vneg.f32	s15, s15
 8007712:	4b77      	ldr	r3, [pc, #476]	; (80078f0 <currentControl+0x630>)
 8007714:	edc3 7a00 	vstr	s15, [r3]
 8007718:	e013      	b.n	8007742 <currentControl+0x482>
	else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 800771a:	4b74      	ldr	r3, [pc, #464]	; (80078ec <currentControl+0x62c>)
 800771c:	ed93 7a00 	vldr	s14, [r3]
 8007720:	4b71      	ldr	r3, [pc, #452]	; (80078e8 <currentControl+0x628>)
 8007722:	edd3 7a00 	vldr	s15, [r3]
 8007726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772e:	dd04      	ble.n	800773a <currentControl+0x47a>
 8007730:	4b6d      	ldr	r3, [pc, #436]	; (80078e8 <currentControl+0x628>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a6e      	ldr	r2, [pc, #440]	; (80078f0 <currentControl+0x630>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	e003      	b.n	8007742 <currentControl+0x482>
	else						_Id_ref = Id_ref;
 800773a:	4b6c      	ldr	r3, [pc, #432]	; (80078ec <currentControl+0x62c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6c      	ldr	r2, [pc, #432]	; (80078f0 <currentControl+0x630>)
 8007740:	6013      	str	r3, [r2, #0]

	if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 8007742:	4b6c      	ldr	r3, [pc, #432]	; (80078f4 <currentControl+0x634>)
 8007744:	edd3 7a00 	vldr	s15, [r3]
 8007748:	eeb1 7a67 	vneg.f32	s14, s15
 800774c:	4b6a      	ldr	r3, [pc, #424]	; (80078f8 <currentControl+0x638>)
 800774e:	edd3 7a00 	vldr	s15, [r3]
 8007752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775a:	dd08      	ble.n	800776e <currentControl+0x4ae>
 800775c:	4b65      	ldr	r3, [pc, #404]	; (80078f4 <currentControl+0x634>)
 800775e:	edd3 7a00 	vldr	s15, [r3]
 8007762:	eef1 7a67 	vneg.f32	s15, s15
 8007766:	4b65      	ldr	r3, [pc, #404]	; (80078fc <currentControl+0x63c>)
 8007768:	edc3 7a00 	vstr	s15, [r3]
 800776c:	e013      	b.n	8007796 <currentControl+0x4d6>
	else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 800776e:	4b62      	ldr	r3, [pc, #392]	; (80078f8 <currentControl+0x638>)
 8007770:	ed93 7a00 	vldr	s14, [r3]
 8007774:	4b5f      	ldr	r3, [pc, #380]	; (80078f4 <currentControl+0x634>)
 8007776:	edd3 7a00 	vldr	s15, [r3]
 800777a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	dd04      	ble.n	800778e <currentControl+0x4ce>
 8007784:	4b5b      	ldr	r3, [pc, #364]	; (80078f4 <currentControl+0x634>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a5c      	ldr	r2, [pc, #368]	; (80078fc <currentControl+0x63c>)
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e003      	b.n	8007796 <currentControl+0x4d6>
	else						_Iq_ref = Iq_ref;
 800778e:	4b5a      	ldr	r3, [pc, #360]	; (80078f8 <currentControl+0x638>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a5a      	ldr	r2, [pc, #360]	; (80078fc <currentControl+0x63c>)
 8007794:	6013      	str	r3, [r2, #0]

	if(forced_commute_state > 0)
 8007796:	4b5a      	ldr	r3, [pc, #360]	; (8007900 <currentControl+0x640>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d014      	beq.n	80077ca <currentControl+0x50a>
	{
		Id_error = forced_I_gamma_ref - Id;
 80077a0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80077a4:	4b4e      	ldr	r3, [pc, #312]	; (80078e0 <currentControl+0x620>)
 80077a6:	edd3 7a00 	vldr	s15, [r3]
 80077aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077ae:	4b55      	ldr	r3, [pc, #340]	; (8007904 <currentControl+0x644>)
 80077b0:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = forced_I_delta_ref - Iq;
 80077b4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8007908 <currentControl+0x648>
 80077b8:	4b48      	ldr	r3, [pc, #288]	; (80078dc <currentControl+0x61c>)
 80077ba:	edd3 7a00 	vldr	s15, [r3]
 80077be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077c2:	4b52      	ldr	r3, [pc, #328]	; (800790c <currentControl+0x64c>)
 80077c4:	edc3 7a00 	vstr	s15, [r3]
 80077c8:	e015      	b.n	80077f6 <currentControl+0x536>
	}
	else
	{
		Id_error = _Id_ref - Id;
 80077ca:	4b49      	ldr	r3, [pc, #292]	; (80078f0 <currentControl+0x630>)
 80077cc:	ed93 7a00 	vldr	s14, [r3]
 80077d0:	4b43      	ldr	r3, [pc, #268]	; (80078e0 <currentControl+0x620>)
 80077d2:	edd3 7a00 	vldr	s15, [r3]
 80077d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077da:	4b4a      	ldr	r3, [pc, #296]	; (8007904 <currentControl+0x644>)
 80077dc:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 80077e0:	4b46      	ldr	r3, [pc, #280]	; (80078fc <currentControl+0x63c>)
 80077e2:	ed93 7a00 	vldr	s14, [r3]
 80077e6:	4b3d      	ldr	r3, [pc, #244]	; (80078dc <currentControl+0x61c>)
 80077e8:	edd3 7a00 	vldr	s15, [r3]
 80077ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077f0:	4b46      	ldr	r3, [pc, #280]	; (800790c <currentControl+0x64c>)
 80077f2:	edc3 7a00 	vstr	s15, [r3]
	}


	// integral
	Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 80077f6:	4b43      	ldr	r3, [pc, #268]	; (8007904 <currentControl+0x644>)
 80077f8:	ed93 7a00 	vldr	s14, [r3]
 80077fc:	4b44      	ldr	r3, [pc, #272]	; (8007910 <currentControl+0x650>)
 80077fe:	edd3 7a00 	vldr	s15, [r3]
 8007802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007806:	4b43      	ldr	r3, [pc, #268]	; (8007914 <currentControl+0x654>)
 8007808:	edc3 7a00 	vstr	s15, [r3]
	if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 800780c:	4b41      	ldr	r3, [pc, #260]	; (8007914 <currentControl+0x654>)
 800780e:	edd3 7a00 	vldr	s15, [r3]
 8007812:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007918 <currentControl+0x658>
 8007816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	d503      	bpl.n	8007828 <currentControl+0x568>
 8007820:	4b3c      	ldr	r3, [pc, #240]	; (8007914 <currentControl+0x654>)
 8007822:	4a3e      	ldr	r2, [pc, #248]	; (800791c <currentControl+0x65c>)
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e00c      	b.n	8007842 <currentControl+0x582>
	else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 8007828:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <currentControl+0x654>)
 800782a:	edd3 7a00 	vldr	s15, [r3]
 800782e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007920 <currentControl+0x660>
 8007832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783a:	dd02      	ble.n	8007842 <currentControl+0x582>
 800783c:	4b35      	ldr	r3, [pc, #212]	; (8007914 <currentControl+0x654>)
 800783e:	4a39      	ldr	r2, [pc, #228]	; (8007924 <currentControl+0x664>)
 8007840:	601a      	str	r2, [r3, #0]
	Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 8007842:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8007928 <currentControl+0x668>
 8007846:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800784a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800784e:	4b31      	ldr	r3, [pc, #196]	; (8007914 <currentControl+0x654>)
 8007850:	edd3 6a00 	vldr	s13, [r3]
 8007854:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <currentControl+0x650>)
 8007856:	edd3 7a00 	vldr	s15, [r3]
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007862:	4b32      	ldr	r3, [pc, #200]	; (800792c <currentControl+0x66c>)
 8007864:	edc3 7a00 	vstr	s15, [r3]
	Id_error_integ_temp2 = Id_error_integ_temp1;
 8007868:	4b2a      	ldr	r3, [pc, #168]	; (8007914 <currentControl+0x654>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a28      	ldr	r2, [pc, #160]	; (8007910 <currentControl+0x650>)
 800786e:	6013      	str	r3, [r2, #0]

	Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 8007870:	4b26      	ldr	r3, [pc, #152]	; (800790c <currentControl+0x64c>)
 8007872:	ed93 7a00 	vldr	s14, [r3]
 8007876:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <currentControl+0x670>)
 8007878:	edd3 7a00 	vldr	s15, [r3]
 800787c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007880:	4b2c      	ldr	r3, [pc, #176]	; (8007934 <currentControl+0x674>)
 8007882:	edc3 7a00 	vstr	s15, [r3]
	if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 8007886:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <currentControl+0x674>)
 8007888:	edd3 7a00 	vldr	s15, [r3]
 800788c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007918 <currentControl+0x658>
 8007890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007898:	d54e      	bpl.n	8007938 <currentControl+0x678>
 800789a:	4b26      	ldr	r3, [pc, #152]	; (8007934 <currentControl+0x674>)
 800789c:	4a1f      	ldr	r2, [pc, #124]	; (800791c <currentControl+0x65c>)
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e057      	b.n	8007952 <currentControl+0x692>
 80078a2:	bf00      	nop
 80078a4:	f3af 8000 	nop.w
 80078a8:	54442d18 	.word	0x54442d18
 80078ac:	401921fb 	.word	0x401921fb
 80078b0:	54442d18 	.word	0x54442d18
 80078b4:	400921fb 	.word	0x400921fb
 80078b8:	20000314 	.word	0x20000314
 80078bc:	20000294 	.word	0x20000294
 80078c0:	3ea2f838 	.word	0x3ea2f838
 80078c4:	459c4000 	.word	0x459c4000
 80078c8:	0800af78 	.word	0x0800af78
 80078cc:	2000001c 	.word	0x2000001c
 80078d0:	44c6f195 	.word	0x44c6f195
 80078d4:	20000298 	.word	0x20000298
 80078d8:	200002c4 	.word	0x200002c4
 80078dc:	200002d8 	.word	0x200002d8
 80078e0:	200002d4 	.word	0x200002d4
 80078e4:	40020000 	.word	0x40020000
 80078e8:	2000002c 	.word	0x2000002c
 80078ec:	200002dc 	.word	0x200002dc
 80078f0:	20000318 	.word	0x20000318
 80078f4:	20000030 	.word	0x20000030
 80078f8:	200002e0 	.word	0x200002e0
 80078fc:	2000031c 	.word	0x2000031c
 8007900:	200002a4 	.word	0x200002a4
 8007904:	200002e4 	.word	0x200002e4
 8007908:	00000000 	.word	0x00000000
 800790c:	200002e8 	.word	0x200002e8
 8007910:	20000320 	.word	0x20000320
 8007914:	20000324 	.word	0x20000324
 8007918:	c9742400 	.word	0xc9742400
 800791c:	c9742400 	.word	0xc9742400
 8007920:	49742400 	.word	0x49742400
 8007924:	49742400 	.word	0x49742400
 8007928:	38d1b717 	.word	0x38d1b717
 800792c:	200002ec 	.word	0x200002ec
 8007930:	20000328 	.word	0x20000328
 8007934:	2000032c 	.word	0x2000032c
	else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 8007938:	4b3c      	ldr	r3, [pc, #240]	; (8007a2c <currentControl+0x76c>)
 800793a:	edd3 7a00 	vldr	s15, [r3]
 800793e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007a30 <currentControl+0x770>
 8007942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794a:	dd02      	ble.n	8007952 <currentControl+0x692>
 800794c:	4b37      	ldr	r3, [pc, #220]	; (8007a2c <currentControl+0x76c>)
 800794e:	4a39      	ldr	r2, [pc, #228]	; (8007a34 <currentControl+0x774>)
 8007950:	601a      	str	r2, [r3, #0]
	Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 8007952:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8007a38 <currentControl+0x778>
 8007956:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800795a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800795e:	4b33      	ldr	r3, [pc, #204]	; (8007a2c <currentControl+0x76c>)
 8007960:	edd3 6a00 	vldr	s13, [r3]
 8007964:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <currentControl+0x77c>)
 8007966:	edd3 7a00 	vldr	s15, [r3]
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	4b33      	ldr	r3, [pc, #204]	; (8007a40 <currentControl+0x780>)
 8007974:	edc3 7a00 	vstr	s15, [r3]
	Iq_error_integ_temp2 = Iq_error_integ_temp1;
 8007978:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <currentControl+0x76c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a2f      	ldr	r2, [pc, #188]	; (8007a3c <currentControl+0x77c>)
 800797e:	6013      	str	r3, [r2, #0]


	Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 8007980:	4b30      	ldr	r3, [pc, #192]	; (8007a44 <currentControl+0x784>)
 8007982:	ed93 7a00 	vldr	s14, [r3]
 8007986:	4b30      	ldr	r3, [pc, #192]	; (8007a48 <currentControl+0x788>)
 8007988:	edd3 7a00 	vldr	s15, [r3]
 800798c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007990:	4b2e      	ldr	r3, [pc, #184]	; (8007a4c <currentControl+0x78c>)
 8007992:	edd3 6a00 	vldr	s13, [r3]
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <currentControl+0x790>)
 8007998:	edd3 7a00 	vldr	s15, [r3]
 800799c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079a4:	4b2b      	ldr	r3, [pc, #172]	; (8007a54 <currentControl+0x794>)
 80079a6:	edc3 7a00 	vstr	s15, [r3]
	Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 80079aa:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <currentControl+0x784>)
 80079ac:	ed93 7a00 	vldr	s14, [r3]
 80079b0:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <currentControl+0x798>)
 80079b2:	edd3 7a00 	vldr	s15, [r3]
 80079b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80079ba:	4b24      	ldr	r3, [pc, #144]	; (8007a4c <currentControl+0x78c>)
 80079bc:	edd3 6a00 	vldr	s13, [r3]
 80079c0:	4b1f      	ldr	r3, [pc, #124]	; (8007a40 <currentControl+0x780>)
 80079c2:	edd3 7a00 	vldr	s15, [r3]
 80079c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079ce:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <currentControl+0x79c>)
 80079d0:	edc3 7a00 	vstr	s15, [r3]
#endif

	/********* end of ACR **********/


	setSVM_dq();
 80079d4:	f000 f850 	bl	8007a78 <setSVM_dq>

#endif


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 80079d8:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <currentControl+0x7a0>)
 80079da:	22ff      	movs	r2, #255	; 0xff
 80079dc:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 80079de:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <currentControl+0x7a0>)
 80079e0:	22ff      	movs	r2, #255	; 0xff
 80079e2:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80079e4:	2200      	movs	r2, #0
 80079e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079ea:	481e      	ldr	r0, [pc, #120]	; (8007a64 <currentControl+0x7a4>)
 80079ec:	f7fb fb04 	bl	8002ff8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 80079f0:	2301      	movs	r3, #1
 80079f2:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <currentControl+0x7a8>)
 80079f4:	491a      	ldr	r1, [pc, #104]	; (8007a60 <currentControl+0x7a0>)
 80079f6:	481d      	ldr	r0, [pc, #116]	; (8007a6c <currentControl+0x7ac>)
 80079f8:	f7fc f8a6 	bl	8003b48 <HAL_SPI_TransmitReceive_IT>


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 80079fc:	4b1c      	ldr	r3, [pc, #112]	; (8007a70 <currentControl+0x7b0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <currentControl+0x7b0>)
 8007a04:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 8007a06:	4b1a      	ldr	r3, [pc, #104]	; (8007a70 <currentControl+0x7b0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	220a      	movs	r2, #10
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	db05      	blt.n	8007a1c <currentControl+0x75c>
	{
		ASR_flg = 1;
 8007a10:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <currentControl+0x7b4>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 8007a16:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <currentControl+0x7b0>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2140      	movs	r1, #64	; 0x40
 8007a20:	4810      	ldr	r0, [pc, #64]	; (8007a64 <currentControl+0x7a4>)
 8007a22:	f7fb fae9 	bl	8002ff8 <HAL_GPIO_WritePin>

	return;
 8007a26:	bf00      	nop
}
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	2000032c 	.word	0x2000032c
 8007a30:	49742400 	.word	0x49742400
 8007a34:	49742400 	.word	0x49742400
 8007a38:	38d1b717 	.word	0x38d1b717
 8007a3c:	20000328 	.word	0x20000328
 8007a40:	200002f0 	.word	0x200002f0
 8007a44:	20000024 	.word	0x20000024
 8007a48:	200002e4 	.word	0x200002e4
 8007a4c:	20000028 	.word	0x20000028
 8007a50:	200002ec 	.word	0x200002ec
 8007a54:	200002bc 	.word	0x200002bc
 8007a58:	200002e8 	.word	0x200002e8
 8007a5c:	200002c0 	.word	0x200002c0
 8007a60:	20000284 	.word	0x20000284
 8007a64:	40020400 	.word	0x40020400
 8007a68:	20000288 	.word	0x20000288
 8007a6c:	200005e4 	.word	0x200005e4
 8007a70:	200002f8 	.word	0x200002f8
 8007a74:	200002f4 	.word	0x200002f4

08007a78 <setSVM_dq>:


inline static void setSVM_dq()
{
 8007a78:	b5b0      	push	{r4, r5, r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 8007a7c:	4bb8      	ldr	r3, [pc, #736]	; (8007d60 <setSVM_dq+0x2e8>)
 8007a7e:	ed93 7a00 	vldr	s14, [r3]
 8007a82:	4bb8      	ldr	r3, [pc, #736]	; (8007d64 <setSVM_dq+0x2ec>)
 8007a84:	edd3 7a00 	vldr	s15, [r3]
 8007a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a8c:	4bb6      	ldr	r3, [pc, #728]	; (8007d68 <setSVM_dq+0x2f0>)
 8007a8e:	edd3 6a00 	vldr	s13, [r3]
 8007a92:	4bb6      	ldr	r3, [pc, #728]	; (8007d6c <setSVM_dq+0x2f4>)
 8007a94:	edd3 7a00 	vldr	s15, [r3]
 8007a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aa0:	4bb3      	ldr	r3, [pc, #716]	; (8007d70 <setSVM_dq+0x2f8>)
 8007aa2:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 8007aa6:	4bae      	ldr	r3, [pc, #696]	; (8007d60 <setSVM_dq+0x2e8>)
 8007aa8:	ed93 7a00 	vldr	s14, [r3]
 8007aac:	4baf      	ldr	r3, [pc, #700]	; (8007d6c <setSVM_dq+0x2f4>)
 8007aae:	edd3 7a00 	vldr	s15, [r3]
 8007ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ab6:	4bac      	ldr	r3, [pc, #688]	; (8007d68 <setSVM_dq+0x2f0>)
 8007ab8:	edd3 6a00 	vldr	s13, [r3]
 8007abc:	4ba9      	ldr	r3, [pc, #676]	; (8007d64 <setSVM_dq+0x2ec>)
 8007abe:	edd3 7a00 	vldr	s15, [r3]
 8007ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aca:	4baa      	ldr	r3, [pc, #680]	; (8007d74 <setSVM_dq+0x2fc>)
 8007acc:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 8007ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad4:	4ba7      	ldr	r3, [pc, #668]	; (8007d74 <setSVM_dq+0x2fc>)
 8007ad6:	edd3 7a00 	vldr	s15, [r3]
 8007ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ade:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8007d78 <setSVM_dq+0x300>
 8007ae2:	4ba3      	ldr	r3, [pc, #652]	; (8007d70 <setSVM_dq+0x2f8>)
 8007ae4:	edd3 7a00 	vldr	s15, [r3]
 8007ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007af0:	4ba2      	ldr	r3, [pc, #648]	; (8007d7c <setSVM_dq+0x304>)
 8007af2:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8007af6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007afa:	4b9e      	ldr	r3, [pc, #632]	; (8007d74 <setSVM_dq+0x2fc>)
 8007afc:	edd3 7a00 	vldr	s15, [r3]
 8007b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b04:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8007d80 <setSVM_dq+0x308>
 8007b08:	4b99      	ldr	r3, [pc, #612]	; (8007d70 <setSVM_dq+0x2f8>)
 8007b0a:	edd3 7a00 	vldr	s15, [r3]
 8007b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b16:	4b9b      	ldr	r3, [pc, #620]	; (8007d84 <setSVM_dq+0x30c>)
 8007b18:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8007b1c:	4b97      	ldr	r3, [pc, #604]	; (8007d7c <setSVM_dq+0x304>)
 8007b1e:	edd3 7a00 	vldr	s15, [r3]
 8007b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2a:	db1e      	blt.n	8007b6a <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8007b2c:	4b95      	ldr	r3, [pc, #596]	; (8007d84 <setSVM_dq+0x30c>)
 8007b2e:	edd3 7a00 	vldr	s15, [r3]
 8007b32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3a:	d803      	bhi.n	8007b44 <setSVM_dq+0xcc>
 8007b3c:	4b92      	ldr	r3, [pc, #584]	; (8007d88 <setSVM_dq+0x310>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e030      	b.n	8007ba6 <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8007b44:	4b8d      	ldr	r3, [pc, #564]	; (8007d7c <setSVM_dq+0x304>)
 8007b46:	ed93 7a00 	vldr	s14, [r3]
 8007b4a:	4b8e      	ldr	r3, [pc, #568]	; (8007d84 <setSVM_dq+0x30c>)
 8007b4c:	edd3 7a00 	vldr	s15, [r3]
 8007b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	db03      	blt.n	8007b62 <setSVM_dq+0xea>
 8007b5a:	4b8b      	ldr	r3, [pc, #556]	; (8007d88 <setSVM_dq+0x310>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e021      	b.n	8007ba6 <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 8007b62:	4b89      	ldr	r3, [pc, #548]	; (8007d88 <setSVM_dq+0x310>)
 8007b64:	2202      	movs	r2, #2
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	e01d      	b.n	8007ba6 <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 8007b6a:	4b86      	ldr	r3, [pc, #536]	; (8007d84 <setSVM_dq+0x30c>)
 8007b6c:	edd3 7a00 	vldr	s15, [r3]
 8007b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b78:	db03      	blt.n	8007b82 <setSVM_dq+0x10a>
 8007b7a:	4b83      	ldr	r3, [pc, #524]	; (8007d88 <setSVM_dq+0x310>)
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e011      	b.n	8007ba6 <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 8007b82:	4b7e      	ldr	r3, [pc, #504]	; (8007d7c <setSVM_dq+0x304>)
 8007b84:	ed93 7a00 	vldr	s14, [r3]
 8007b88:	4b7e      	ldr	r3, [pc, #504]	; (8007d84 <setSVM_dq+0x30c>)
 8007b8a:	edd3 7a00 	vldr	s15, [r3]
 8007b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	d803      	bhi.n	8007ba0 <setSVM_dq+0x128>
 8007b98:	4b7b      	ldr	r3, [pc, #492]	; (8007d88 <setSVM_dq+0x310>)
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 8007ba0:	4b79      	ldr	r3, [pc, #484]	; (8007d88 <setSVM_dq+0x310>)
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 8007ba6:	4b78      	ldr	r3, [pc, #480]	; (8007d88 <setSVM_dq+0x310>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a78      	ldr	r2, [pc, #480]	; (8007d8c <setSVM_dq+0x314>)
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	4413      	add	r3, r2
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a77      	ldr	r2, [pc, #476]	; (8007d90 <setSVM_dq+0x318>)
 8007bb4:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 8007bb6:	4b74      	ldr	r3, [pc, #464]	; (8007d88 <setSVM_dq+0x310>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a74      	ldr	r2, [pc, #464]	; (8007d8c <setSVM_dq+0x314>)
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a73      	ldr	r2, [pc, #460]	; (8007d94 <setSVM_dq+0x31c>)
 8007bc6:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 8007bc8:	4b6f      	ldr	r3, [pc, #444]	; (8007d88 <setSVM_dq+0x310>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	4a6f      	ldr	r2, [pc, #444]	; (8007d8c <setSVM_dq+0x314>)
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	4413      	add	r3, r2
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a70      	ldr	r2, [pc, #448]	; (8007d98 <setSVM_dq+0x320>)
 8007bd8:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 8007bda:	4b6b      	ldr	r3, [pc, #428]	; (8007d88 <setSVM_dq+0x310>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	4a6a      	ldr	r2, [pc, #424]	; (8007d8c <setSVM_dq+0x314>)
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	4413      	add	r3, r2
 8007be6:	3304      	adds	r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a6c      	ldr	r2, [pc, #432]	; (8007d9c <setSVM_dq+0x324>)
 8007bec:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8007bee:	4b6b      	ldr	r3, [pc, #428]	; (8007d9c <setSVM_dq+0x324>)
 8007bf0:	ed93 7a00 	vldr	s14, [r3]
 8007bf4:	4b5e      	ldr	r3, [pc, #376]	; (8007d70 <setSVM_dq+0x2f8>)
 8007bf6:	edd3 7a00 	vldr	s15, [r3]
 8007bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bfe:	4b66      	ldr	r3, [pc, #408]	; (8007d98 <setSVM_dq+0x320>)
 8007c00:	edd3 6a00 	vldr	s13, [r3]
 8007c04:	4b5b      	ldr	r3, [pc, #364]	; (8007d74 <setSVM_dq+0x2fc>)
 8007c06:	edd3 7a00 	vldr	s15, [r3]
 8007c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c0e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007c12:	4b5f      	ldr	r3, [pc, #380]	; (8007d90 <setSVM_dq+0x318>)
 8007c14:	ed93 7a00 	vldr	s14, [r3]
 8007c18:	4b60      	ldr	r3, [pc, #384]	; (8007d9c <setSVM_dq+0x324>)
 8007c1a:	edd3 7a00 	vldr	s15, [r3]
 8007c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c22:	4b5c      	ldr	r3, [pc, #368]	; (8007d94 <setSVM_dq+0x31c>)
 8007c24:	ed93 6a00 	vldr	s12, [r3]
 8007c28:	4b5b      	ldr	r3, [pc, #364]	; (8007d98 <setSVM_dq+0x320>)
 8007c2a:	edd3 7a00 	vldr	s15, [r3]
 8007c2e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007c32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c36:	4b5a      	ldr	r3, [pc, #360]	; (8007da0 <setSVM_dq+0x328>)
 8007c38:	edd3 7a00 	vldr	s15, [r3]
 8007c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c44:	4b57      	ldr	r3, [pc, #348]	; (8007da4 <setSVM_dq+0x32c>)
 8007c46:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8007c4a:	4b52      	ldr	r3, [pc, #328]	; (8007d94 <setSVM_dq+0x31c>)
 8007c4c:	edd3 7a00 	vldr	s15, [r3]
 8007c50:	eeb1 7a67 	vneg.f32	s14, s15
 8007c54:	4b46      	ldr	r3, [pc, #280]	; (8007d70 <setSVM_dq+0x2f8>)
 8007c56:	edd3 7a00 	vldr	s15, [r3]
 8007c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c5e:	4b4c      	ldr	r3, [pc, #304]	; (8007d90 <setSVM_dq+0x318>)
 8007c60:	edd3 6a00 	vldr	s13, [r3]
 8007c64:	4b43      	ldr	r3, [pc, #268]	; (8007d74 <setSVM_dq+0x2fc>)
 8007c66:	edd3 7a00 	vldr	s15, [r3]
 8007c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007c72:	4b47      	ldr	r3, [pc, #284]	; (8007d90 <setSVM_dq+0x318>)
 8007c74:	ed93 7a00 	vldr	s14, [r3]
 8007c78:	4b48      	ldr	r3, [pc, #288]	; (8007d9c <setSVM_dq+0x324>)
 8007c7a:	edd3 7a00 	vldr	s15, [r3]
 8007c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c82:	4b44      	ldr	r3, [pc, #272]	; (8007d94 <setSVM_dq+0x31c>)
 8007c84:	ed93 6a00 	vldr	s12, [r3]
 8007c88:	4b43      	ldr	r3, [pc, #268]	; (8007d98 <setSVM_dq+0x320>)
 8007c8a:	edd3 7a00 	vldr	s15, [r3]
 8007c8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007c92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c96:	4b42      	ldr	r3, [pc, #264]	; (8007da0 <setSVM_dq+0x328>)
 8007c98:	edd3 7a00 	vldr	s15, [r3]
 8007c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ca4:	4b40      	ldr	r3, [pc, #256]	; (8007da8 <setSVM_dq+0x330>)
 8007ca6:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 8007caa:	4b37      	ldr	r3, [pc, #220]	; (8007d88 <setSVM_dq+0x310>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	f200 81e0 	bhi.w	8008074 <setSVM_dq+0x5fc>
 8007cb4:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <setSVM_dq+0x244>)
 8007cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cba:	bf00      	nop
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007db9 	.word	0x08007db9
 8007cc4:	08007e45 	.word	0x08007e45
 8007cc8:	08007ed1 	.word	0x08007ed1
 8007ccc:	08007f5d 	.word	0x08007f5d
 8007cd0:	08007fe9 	.word	0x08007fe9
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8007cd4:	4b33      	ldr	r3, [pc, #204]	; (8007da4 <setSVM_dq+0x32c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7f8 fc55 	bl	8000588 <__aeabi_f2d>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4623      	mov	r3, r4
 8007ce6:	f04f 0000 	mov.w	r0, #0
 8007cea:	4930      	ldr	r1, [pc, #192]	; (8007dac <setSVM_dq+0x334>)
 8007cec:	f7f8 faec 	bl	80002c8 <__aeabi_dsub>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4625      	mov	r5, r4
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	4b2b      	ldr	r3, [pc, #172]	; (8007da8 <setSVM_dq+0x330>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7f8 fc43 	bl	8000588 <__aeabi_f2d>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 fadd 	bl	80002c8 <__aeabi_dsub>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	4618      	mov	r0, r3
 8007d14:	4621      	mov	r1, r4
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <setSVM_dq+0x338>)
 8007d1c:	f7f8 fc8c 	bl	8000638 <__aeabi_dmul>
 8007d20:	4603      	mov	r3, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	4618      	mov	r0, r3
 8007d26:	4621      	mov	r1, r4
 8007d28:	f7f8 ff5e 	bl	8000be8 <__aeabi_d2f>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <setSVM_dq+0x33c>)
 8007d30:	609a      	str	r2, [r3, #8]
 8007d32:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <setSVM_dq+0x33c>)
 8007d34:	ed93 7a02 	vldr	s14, [r3, #8]
 8007d38:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <setSVM_dq+0x330>)
 8007d3a:	edd3 7a00 	vldr	s15, [r3]
 8007d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d42:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <setSVM_dq+0x33c>)
 8007d44:	edc3 7a01 	vstr	s15, [r3, #4]
 8007d48:	4b1a      	ldr	r3, [pc, #104]	; (8007db4 <setSVM_dq+0x33c>)
 8007d4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8007d4e:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <setSVM_dq+0x32c>)
 8007d50:	edd3 7a00 	vldr	s15, [r3]
 8007d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d58:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <setSVM_dq+0x33c>)
 8007d5a:	edc3 7a00 	vstr	s15, [r3]
 8007d5e:	e189      	b.n	8008074 <setSVM_dq+0x5fc>
 8007d60:	200002bc 	.word	0x200002bc
 8007d64:	2000001c 	.word	0x2000001c
 8007d68:	200002c0 	.word	0x200002c0
 8007d6c:	20000298 	.word	0x20000298
 8007d70:	20000330 	.word	0x20000330
 8007d74:	20000334 	.word	0x20000334
 8007d78:	00000000 	.word	0x00000000
 8007d7c:	20000338 	.word	0x20000338
 8007d80:	3f5db22d 	.word	0x3f5db22d
 8007d84:	2000033c 	.word	0x2000033c
 8007d88:	200002c4 	.word	0x200002c4
 8007d8c:	0801e7f8 	.word	0x0801e7f8
 8007d90:	20000340 	.word	0x20000340
 8007d94:	20000344 	.word	0x20000344
 8007d98:	20000348 	.word	0x20000348
 8007d9c:	2000034c 	.word	0x2000034c
 8007da0:	20000020 	.word	0x20000020
 8007da4:	20000350 	.word	0x20000350
 8007da8:	20000354 	.word	0x20000354
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	3fe00000 	.word	0x3fe00000
 8007db4:	20000358 	.word	0x20000358
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 8007db8:	4bc3      	ldr	r3, [pc, #780]	; (80080c8 <setSVM_dq+0x650>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7f8 fbe3 	bl	8000588 <__aeabi_f2d>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4623      	mov	r3, r4
 8007dca:	f04f 0000 	mov.w	r0, #0
 8007dce:	49bf      	ldr	r1, [pc, #764]	; (80080cc <setSVM_dq+0x654>)
 8007dd0:	f7f8 fa7a 	bl	80002c8 <__aeabi_dsub>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	4625      	mov	r5, r4
 8007dda:	461c      	mov	r4, r3
 8007ddc:	4bbc      	ldr	r3, [pc, #752]	; (80080d0 <setSVM_dq+0x658>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7f8 fbd1 	bl	8000588 <__aeabi_f2d>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4620      	mov	r0, r4
 8007dec:	4629      	mov	r1, r5
 8007dee:	f7f8 fa6b 	bl	80002c8 <__aeabi_dsub>
 8007df2:	4603      	mov	r3, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	4618      	mov	r0, r3
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f04f 0200 	mov.w	r2, #0
 8007dfe:	4bb5      	ldr	r3, [pc, #724]	; (80080d4 <setSVM_dq+0x65c>)
 8007e00:	f7f8 fc1a 	bl	8000638 <__aeabi_dmul>
 8007e04:	4603      	mov	r3, r0
 8007e06:	460c      	mov	r4, r1
 8007e08:	4618      	mov	r0, r3
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	f7f8 feec 	bl	8000be8 <__aeabi_d2f>
 8007e10:	4602      	mov	r2, r0
 8007e12:	4bb1      	ldr	r3, [pc, #708]	; (80080d8 <setSVM_dq+0x660>)
 8007e14:	609a      	str	r2, [r3, #8]
 8007e16:	4bb0      	ldr	r3, [pc, #704]	; (80080d8 <setSVM_dq+0x660>)
 8007e18:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e1c:	4baa      	ldr	r3, [pc, #680]	; (80080c8 <setSVM_dq+0x650>)
 8007e1e:	edd3 7a00 	vldr	s15, [r3]
 8007e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e26:	4bac      	ldr	r3, [pc, #688]	; (80080d8 <setSVM_dq+0x660>)
 8007e28:	edc3 7a00 	vstr	s15, [r3]
 8007e2c:	4baa      	ldr	r3, [pc, #680]	; (80080d8 <setSVM_dq+0x660>)
 8007e2e:	ed93 7a00 	vldr	s14, [r3]
 8007e32:	4ba7      	ldr	r3, [pc, #668]	; (80080d0 <setSVM_dq+0x658>)
 8007e34:	edd3 7a00 	vldr	s15, [r3]
 8007e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e3c:	4ba6      	ldr	r3, [pc, #664]	; (80080d8 <setSVM_dq+0x660>)
 8007e3e:	edc3 7a01 	vstr	s15, [r3, #4]
 8007e42:	e117      	b.n	8008074 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8007e44:	4ba0      	ldr	r3, [pc, #640]	; (80080c8 <setSVM_dq+0x650>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7f8 fb9d 	bl	8000588 <__aeabi_f2d>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	461a      	mov	r2, r3
 8007e54:	4623      	mov	r3, r4
 8007e56:	f04f 0000 	mov.w	r0, #0
 8007e5a:	499c      	ldr	r1, [pc, #624]	; (80080cc <setSVM_dq+0x654>)
 8007e5c:	f7f8 fa34 	bl	80002c8 <__aeabi_dsub>
 8007e60:	4603      	mov	r3, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4625      	mov	r5, r4
 8007e66:	461c      	mov	r4, r3
 8007e68:	4b99      	ldr	r3, [pc, #612]	; (80080d0 <setSVM_dq+0x658>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f8 fb8b 	bl	8000588 <__aeabi_f2d>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4620      	mov	r0, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	f7f8 fa25 	bl	80002c8 <__aeabi_dsub>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	460c      	mov	r4, r1
 8007e82:	4618      	mov	r0, r3
 8007e84:	4621      	mov	r1, r4
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	4b92      	ldr	r3, [pc, #584]	; (80080d4 <setSVM_dq+0x65c>)
 8007e8c:	f7f8 fbd4 	bl	8000638 <__aeabi_dmul>
 8007e90:	4603      	mov	r3, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	4618      	mov	r0, r3
 8007e96:	4621      	mov	r1, r4
 8007e98:	f7f8 fea6 	bl	8000be8 <__aeabi_d2f>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	4b8e      	ldr	r3, [pc, #568]	; (80080d8 <setSVM_dq+0x660>)
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	4b8d      	ldr	r3, [pc, #564]	; (80080d8 <setSVM_dq+0x660>)
 8007ea4:	ed93 7a00 	vldr	s14, [r3]
 8007ea8:	4b89      	ldr	r3, [pc, #548]	; (80080d0 <setSVM_dq+0x658>)
 8007eaa:	edd3 7a00 	vldr	s15, [r3]
 8007eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007eb2:	4b89      	ldr	r3, [pc, #548]	; (80080d8 <setSVM_dq+0x660>)
 8007eb4:	edc3 7a02 	vstr	s15, [r3, #8]
 8007eb8:	4b87      	ldr	r3, [pc, #540]	; (80080d8 <setSVM_dq+0x660>)
 8007eba:	ed93 7a02 	vldr	s14, [r3, #8]
 8007ebe:	4b82      	ldr	r3, [pc, #520]	; (80080c8 <setSVM_dq+0x650>)
 8007ec0:	edd3 7a00 	vldr	s15, [r3]
 8007ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ec8:	4b83      	ldr	r3, [pc, #524]	; (80080d8 <setSVM_dq+0x660>)
 8007eca:	edc3 7a01 	vstr	s15, [r3, #4]
 8007ece:	e0d1      	b.n	8008074 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 8007ed0:	4b7d      	ldr	r3, [pc, #500]	; (80080c8 <setSVM_dq+0x650>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7f8 fb57 	bl	8000588 <__aeabi_f2d>
 8007eda:	4603      	mov	r3, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	4979      	ldr	r1, [pc, #484]	; (80080cc <setSVM_dq+0x654>)
 8007ee8:	f7f8 f9ee 	bl	80002c8 <__aeabi_dsub>
 8007eec:	4603      	mov	r3, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4625      	mov	r5, r4
 8007ef2:	461c      	mov	r4, r3
 8007ef4:	4b76      	ldr	r3, [pc, #472]	; (80080d0 <setSVM_dq+0x658>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7f8 fb45 	bl	8000588 <__aeabi_f2d>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	f7f8 f9df 	bl	80002c8 <__aeabi_dsub>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	4618      	mov	r0, r3
 8007f10:	4621      	mov	r1, r4
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	4b6f      	ldr	r3, [pc, #444]	; (80080d4 <setSVM_dq+0x65c>)
 8007f18:	f7f8 fb8e 	bl	8000638 <__aeabi_dmul>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	4618      	mov	r0, r3
 8007f22:	4621      	mov	r1, r4
 8007f24:	f7f8 fe60 	bl	8000be8 <__aeabi_d2f>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b6b      	ldr	r3, [pc, #428]	; (80080d8 <setSVM_dq+0x660>)
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	4b6a      	ldr	r3, [pc, #424]	; (80080d8 <setSVM_dq+0x660>)
 8007f30:	ed93 7a00 	vldr	s14, [r3]
 8007f34:	4b64      	ldr	r3, [pc, #400]	; (80080c8 <setSVM_dq+0x650>)
 8007f36:	edd3 7a00 	vldr	s15, [r3]
 8007f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f3e:	4b66      	ldr	r3, [pc, #408]	; (80080d8 <setSVM_dq+0x660>)
 8007f40:	edc3 7a01 	vstr	s15, [r3, #4]
 8007f44:	4b64      	ldr	r3, [pc, #400]	; (80080d8 <setSVM_dq+0x660>)
 8007f46:	ed93 7a01 	vldr	s14, [r3, #4]
 8007f4a:	4b61      	ldr	r3, [pc, #388]	; (80080d0 <setSVM_dq+0x658>)
 8007f4c:	edd3 7a00 	vldr	s15, [r3]
 8007f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f54:	4b60      	ldr	r3, [pc, #384]	; (80080d8 <setSVM_dq+0x660>)
 8007f56:	edc3 7a02 	vstr	s15, [r3, #8]
 8007f5a:	e08b      	b.n	8008074 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8007f5c:	4b5a      	ldr	r3, [pc, #360]	; (80080c8 <setSVM_dq+0x650>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7f8 fb11 	bl	8000588 <__aeabi_f2d>
 8007f66:	4603      	mov	r3, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4623      	mov	r3, r4
 8007f6e:	f04f 0000 	mov.w	r0, #0
 8007f72:	4956      	ldr	r1, [pc, #344]	; (80080cc <setSVM_dq+0x654>)
 8007f74:	f7f8 f9a8 	bl	80002c8 <__aeabi_dsub>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	4625      	mov	r5, r4
 8007f7e:	461c      	mov	r4, r3
 8007f80:	4b53      	ldr	r3, [pc, #332]	; (80080d0 <setSVM_dq+0x658>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7f8 faff 	bl	8000588 <__aeabi_f2d>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4629      	mov	r1, r5
 8007f92:	f7f8 f999 	bl	80002c8 <__aeabi_dsub>
 8007f96:	4603      	mov	r3, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	4b4c      	ldr	r3, [pc, #304]	; (80080d4 <setSVM_dq+0x65c>)
 8007fa4:	f7f8 fb48 	bl	8000638 <__aeabi_dmul>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4618      	mov	r0, r3
 8007fae:	4621      	mov	r1, r4
 8007fb0:	f7f8 fe1a 	bl	8000be8 <__aeabi_d2f>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	4b48      	ldr	r3, [pc, #288]	; (80080d8 <setSVM_dq+0x660>)
 8007fb8:	605a      	str	r2, [r3, #4]
 8007fba:	4b47      	ldr	r3, [pc, #284]	; (80080d8 <setSVM_dq+0x660>)
 8007fbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8007fc0:	4b43      	ldr	r3, [pc, #268]	; (80080d0 <setSVM_dq+0x658>)
 8007fc2:	edd3 7a00 	vldr	s15, [r3]
 8007fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fca:	4b43      	ldr	r3, [pc, #268]	; (80080d8 <setSVM_dq+0x660>)
 8007fcc:	edc3 7a00 	vstr	s15, [r3]
 8007fd0:	4b41      	ldr	r3, [pc, #260]	; (80080d8 <setSVM_dq+0x660>)
 8007fd2:	ed93 7a00 	vldr	s14, [r3]
 8007fd6:	4b3c      	ldr	r3, [pc, #240]	; (80080c8 <setSVM_dq+0x650>)
 8007fd8:	edd3 7a00 	vldr	s15, [r3]
 8007fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fe0:	4b3d      	ldr	r3, [pc, #244]	; (80080d8 <setSVM_dq+0x660>)
 8007fe2:	edc3 7a02 	vstr	s15, [r3, #8]
 8007fe6:	e045      	b.n	8008074 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8007fe8:	4b37      	ldr	r3, [pc, #220]	; (80080c8 <setSVM_dq+0x650>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f8 facb 	bl	8000588 <__aeabi_f2d>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	f04f 0000 	mov.w	r0, #0
 8007ffe:	4933      	ldr	r1, [pc, #204]	; (80080cc <setSVM_dq+0x654>)
 8008000:	f7f8 f962 	bl	80002c8 <__aeabi_dsub>
 8008004:	4603      	mov	r3, r0
 8008006:	460c      	mov	r4, r1
 8008008:	4625      	mov	r5, r4
 800800a:	461c      	mov	r4, r3
 800800c:	4b30      	ldr	r3, [pc, #192]	; (80080d0 <setSVM_dq+0x658>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f7f8 fab9 	bl	8000588 <__aeabi_f2d>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4620      	mov	r0, r4
 800801c:	4629      	mov	r1, r5
 800801e:	f7f8 f953 	bl	80002c8 <__aeabi_dsub>
 8008022:	4603      	mov	r3, r0
 8008024:	460c      	mov	r4, r1
 8008026:	4618      	mov	r0, r3
 8008028:	4621      	mov	r1, r4
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	4b29      	ldr	r3, [pc, #164]	; (80080d4 <setSVM_dq+0x65c>)
 8008030:	f7f8 fb02 	bl	8000638 <__aeabi_dmul>
 8008034:	4603      	mov	r3, r0
 8008036:	460c      	mov	r4, r1
 8008038:	4618      	mov	r0, r3
 800803a:	4621      	mov	r1, r4
 800803c:	f7f8 fdd4 	bl	8000be8 <__aeabi_d2f>
 8008040:	4602      	mov	r2, r0
 8008042:	4b25      	ldr	r3, [pc, #148]	; (80080d8 <setSVM_dq+0x660>)
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <setSVM_dq+0x660>)
 8008048:	ed93 7a01 	vldr	s14, [r3, #4]
 800804c:	4b1e      	ldr	r3, [pc, #120]	; (80080c8 <setSVM_dq+0x650>)
 800804e:	edd3 7a00 	vldr	s15, [r3]
 8008052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008056:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <setSVM_dq+0x660>)
 8008058:	edc3 7a02 	vstr	s15, [r3, #8]
 800805c:	4b1e      	ldr	r3, [pc, #120]	; (80080d8 <setSVM_dq+0x660>)
 800805e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008062:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <setSVM_dq+0x658>)
 8008064:	edd3 7a00 	vldr	s15, [r3]
 8008068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <setSVM_dq+0x660>)
 800806e:	edc3 7a00 	vstr	s15, [r3]
 8008072:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8008074:	4b18      	ldr	r3, [pc, #96]	; (80080d8 <setSVM_dq+0x660>)
 8008076:	edd3 7a00 	vldr	s15, [r3]
 800807a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800807e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008086:	d503      	bpl.n	8008090 <setSVM_dq+0x618>
 8008088:	4b13      	ldr	r3, [pc, #76]	; (80080d8 <setSVM_dq+0x660>)
 800808a:	4a14      	ldr	r2, [pc, #80]	; (80080dc <setSVM_dq+0x664>)
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e00d      	b.n	80080ac <setSVM_dq+0x634>
 8008090:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <setSVM_dq+0x660>)
 8008092:	edd3 7a00 	vldr	s15, [r3]
 8008096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800809a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800809e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a2:	dd03      	ble.n	80080ac <setSVM_dq+0x634>
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <setSVM_dq+0x660>)
 80080a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80080aa:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <setSVM_dq+0x660>)
 80080ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80080b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80080b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080be:	d50f      	bpl.n	80080e0 <setSVM_dq+0x668>
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <setSVM_dq+0x660>)
 80080c2:	4a06      	ldr	r2, [pc, #24]	; (80080dc <setSVM_dq+0x664>)
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	e019      	b.n	80080fc <setSVM_dq+0x684>
 80080c8:	20000350 	.word	0x20000350
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	20000354 	.word	0x20000354
 80080d4:	3fe00000 	.word	0x3fe00000
 80080d8:	20000358 	.word	0x20000358
 80080dc:	bf800000 	.word	0xbf800000
 80080e0:	4b35      	ldr	r3, [pc, #212]	; (80081b8 <setSVM_dq+0x740>)
 80080e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80080e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f2:	dd03      	ble.n	80080fc <setSVM_dq+0x684>
 80080f4:	4b30      	ldr	r3, [pc, #192]	; (80081b8 <setSVM_dq+0x740>)
 80080f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80080fa:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 80080fc:	4b2e      	ldr	r3, [pc, #184]	; (80081b8 <setSVM_dq+0x740>)
 80080fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8008102:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800810a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810e:	d503      	bpl.n	8008118 <setSVM_dq+0x6a0>
 8008110:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <setSVM_dq+0x740>)
 8008112:	4a2a      	ldr	r2, [pc, #168]	; (80081bc <setSVM_dq+0x744>)
 8008114:	609a      	str	r2, [r3, #8]
 8008116:	e00d      	b.n	8008134 <setSVM_dq+0x6bc>
 8008118:	4b27      	ldr	r3, [pc, #156]	; (80081b8 <setSVM_dq+0x740>)
 800811a:	edd3 7a02 	vldr	s15, [r3, #8]
 800811e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812a:	dd03      	ble.n	8008134 <setSVM_dq+0x6bc>
 800812c:	4b22      	ldr	r3, [pc, #136]	; (80081b8 <setSVM_dq+0x740>)
 800812e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008132:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 8008134:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <setSVM_dq+0x740>)
 8008136:	edd3 7a00 	vldr	s15, [r3]
 800813a:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <setSVM_dq+0x748>)
 800813c:	edc3 7a00 	vstr	s15, [r3]
 8008140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008148:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80081c4 <setSVM_dq+0x74c>
 800814c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008150:	4b1d      	ldr	r3, [pc, #116]	; (80081c8 <setSVM_dq+0x750>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008158:	ee17 2a90 	vmov	r2, s15
 800815c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 800815e:	4b16      	ldr	r3, [pc, #88]	; (80081b8 <setSVM_dq+0x740>)
 8008160:	edd3 7a01 	vldr	s15, [r3, #4]
 8008164:	4b19      	ldr	r3, [pc, #100]	; (80081cc <setSVM_dq+0x754>)
 8008166:	edc3 7a00 	vstr	s15, [r3]
 800816a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800816e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008172:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80081c4 <setSVM_dq+0x74c>
 8008176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <setSVM_dq+0x750>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008182:	ee17 2a90 	vmov	r2, s15
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 8008188:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <setSVM_dq+0x740>)
 800818a:	edd3 7a02 	vldr	s15, [r3, #8]
 800818e:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <setSVM_dq+0x758>)
 8008190:	edc3 7a00 	vstr	s15, [r3]
 8008194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800819c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80081c4 <setSVM_dq+0x74c>
 80081a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081a4:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <setSVM_dq+0x750>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ac:	ee17 2a90 	vmov	r2, s15
 80081b0:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 80081b2:	bf00      	nop
}
 80081b4:	bdb0      	pop	{r4, r5, r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000358 	.word	0x20000358
 80081bc:	bf800000 	.word	0xbf800000
 80081c0:	200002c8 	.word	0x200002c8
 80081c4:	45fa0000 	.word	0x45fa0000
 80081c8:	2000063c 	.word	0x2000063c
 80081cc:	200002cc 	.word	0x200002cc
 80081d0:	200002d0 	.word	0x200002d0

080081d4 <UartPrintf>:

}



inline static int32_t UartPrintf(UART_HandleTypeDef *huart, char *format, ...){
 80081d4:	b40e      	push	{r1, r2, r3}
 80081d6:	b580      	push	{r7, lr}
 80081d8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80081dc:	af00      	add	r7, sp, #0
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	6018      	str	r0, [r3, #0]
	int32_t TransStrLength;
	char TransStr[1024];

	va_list args;
	va_start(args, format);
 80081e2:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80081e6:	f107 0308 	add.w	r3, r7, #8
 80081ea:	601a      	str	r2, [r3, #0]
	TransStrLength = vsprintf(TransStr, format, args);
 80081ec:	f107 0308 	add.w	r3, r7, #8
 80081f0:	f107 000c 	add.w	r0, r7, #12
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 80081fa:	f001 f87f 	bl	80092fc <vsiprintf>
 80081fe:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	va_end(args);

	HAL_UART_Transmit(huart, (uint8_t*)TransStr, TransStrLength, 100);
 8008202:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8008206:	b29a      	uxth	r2, r3
 8008208:	f107 010c 	add.w	r1, r7, #12
 800820c:	1d38      	adds	r0, r7, #4
 800820e:	2364      	movs	r3, #100	; 0x64
 8008210:	6800      	ldr	r0, [r0, #0]
 8008212:	f7fd f854 	bl	80052be <HAL_UART_Transmit>

	return TransStrLength;
 8008216:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 800821a:	4618      	mov	r0, r3
 800821c:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8008220:	46bd      	mov	sp, r7
 8008222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008226:	b003      	add	sp, #12
 8008228:	4770      	bx	lr

0800822a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800822a:	b480      	push	{r7}
 800822c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800822e:	bf00      	nop
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800823c:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <MX_SPI2_Init+0x68>)
 800823e:	4a19      	ldr	r2, [pc, #100]	; (80082a4 <MX_SPI2_Init+0x6c>)
 8008240:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008242:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008248:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800824a:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <MX_SPI2_Init+0x68>)
 800824c:	2200      	movs	r2, #0
 800824e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8008250:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008256:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008258:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <MX_SPI2_Init+0x68>)
 800825a:	2200      	movs	r2, #0
 800825c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800825e:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008260:	2201      	movs	r2, #1
 8008262:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800826a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <MX_SPI2_Init+0x68>)
 800826e:	2218      	movs	r2, #24
 8008270:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008272:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008274:	2200      	movs	r2, #0
 8008276:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <MX_SPI2_Init+0x68>)
 800827a:	2200      	movs	r2, #0
 800827c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800827e:	4b08      	ldr	r3, [pc, #32]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008280:	2200      	movs	r2, #0
 8008282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008284:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <MX_SPI2_Init+0x68>)
 8008286:	220a      	movs	r2, #10
 8008288:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800828a:	4805      	ldr	r0, [pc, #20]	; (80082a0 <MX_SPI2_Init+0x68>)
 800828c:	f7fb fbf8 	bl	8003a80 <HAL_SPI_Init>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8008296:	f7ff ffc8 	bl	800822a <Error_Handler>
  }

}
 800829a:	bf00      	nop
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	200005e4 	.word	0x200005e4
 80082a4:	40003800 	.word	0x40003800

080082a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	605a      	str	r2, [r3, #4]
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a34      	ldr	r2, [pc, #208]	; (8008398 <HAL_SPI_MspInit+0xf0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d162      	bne.n	8008390 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	4b33      	ldr	r3, [pc, #204]	; (800839c <HAL_SPI_MspInit+0xf4>)
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	4a32      	ldr	r2, [pc, #200]	; (800839c <HAL_SPI_MspInit+0xf4>)
 80082d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082d8:	6413      	str	r3, [r2, #64]	; 0x40
 80082da:	4b30      	ldr	r3, [pc, #192]	; (800839c <HAL_SPI_MspInit+0xf4>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	4b2c      	ldr	r3, [pc, #176]	; (800839c <HAL_SPI_MspInit+0xf4>)
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	4a2b      	ldr	r2, [pc, #172]	; (800839c <HAL_SPI_MspInit+0xf4>)
 80082f0:	f043 0304 	orr.w	r3, r3, #4
 80082f4:	6313      	str	r3, [r2, #48]	; 0x30
 80082f6:	4b29      	ldr	r3, [pc, #164]	; (800839c <HAL_SPI_MspInit+0xf4>)
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	f003 0304 	and.w	r3, r3, #4
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008302:	2300      	movs	r3, #0
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	4b25      	ldr	r3, [pc, #148]	; (800839c <HAL_SPI_MspInit+0xf4>)
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	4a24      	ldr	r2, [pc, #144]	; (800839c <HAL_SPI_MspInit+0xf4>)
 800830c:	f043 0302 	orr.w	r3, r3, #2
 8008310:	6313      	str	r3, [r2, #48]	; 0x30
 8008312:	4b22      	ldr	r3, [pc, #136]	; (800839c <HAL_SPI_MspInit+0xf4>)
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	60bb      	str	r3, [r7, #8]
 800831c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800831e:	2302      	movs	r3, #2
 8008320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008322:	2302      	movs	r3, #2
 8008324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800832a:	2303      	movs	r3, #3
 800832c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800832e:	2307      	movs	r3, #7
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008332:	f107 0314 	add.w	r3, r7, #20
 8008336:	4619      	mov	r1, r3
 8008338:	4819      	ldr	r0, [pc, #100]	; (80083a0 <HAL_SPI_MspInit+0xf8>)
 800833a:	f7fa fccb 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800833e:	2304      	movs	r3, #4
 8008340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008342:	2302      	movs	r3, #2
 8008344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800834a:	2303      	movs	r3, #3
 800834c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800834e:	2305      	movs	r3, #5
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	4619      	mov	r1, r3
 8008358:	4811      	ldr	r0, [pc, #68]	; (80083a0 <HAL_SPI_MspInit+0xf8>)
 800835a:	f7fa fcbb 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800835e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008364:	2302      	movs	r3, #2
 8008366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800836c:	2303      	movs	r3, #3
 800836e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008370:	2305      	movs	r3, #5
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008374:	f107 0314 	add.w	r3, r7, #20
 8008378:	4619      	mov	r1, r3
 800837a:	480a      	ldr	r0, [pc, #40]	; (80083a4 <HAL_SPI_MspInit+0xfc>)
 800837c:	f7fa fcaa 	bl	8002cd4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008380:	2200      	movs	r2, #0
 8008382:	2100      	movs	r1, #0
 8008384:	2024      	movs	r0, #36	; 0x24
 8008386:	f7fa f8d6 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800838a:	2024      	movs	r0, #36	; 0x24
 800838c:	f7fa f8ef 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008390:	bf00      	nop
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40003800 	.word	0x40003800
 800839c:	40023800 	.word	0x40023800
 80083a0:	40020800 	.word	0x40020800
 80083a4:	40020400 	.word	0x40020400

080083a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083ae:	2300      	movs	r3, #0
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <HAL_MspInit+0x4c>)
 80083b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b6:	4a0f      	ldr	r2, [pc, #60]	; (80083f4 <HAL_MspInit+0x4c>)
 80083b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083bc:	6453      	str	r3, [r2, #68]	; 0x44
 80083be:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <HAL_MspInit+0x4c>)
 80083c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c6:	607b      	str	r3, [r7, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083ca:	2300      	movs	r3, #0
 80083cc:	603b      	str	r3, [r7, #0]
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <HAL_MspInit+0x4c>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <HAL_MspInit+0x4c>)
 80083d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d8:	6413      	str	r3, [r2, #64]	; 0x40
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <HAL_MspInit+0x4c>)
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80083e6:	2007      	movs	r0, #7
 80083e8:	f7fa f89a 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	40023800 	.word	0x40023800

080083f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80083fc:	bf00      	nop
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008406:	b480      	push	{r7}
 8008408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800840a:	e7fe      	b.n	800840a <HardFault_Handler+0x4>

0800840c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008410:	e7fe      	b.n	8008410 <MemManage_Handler+0x4>

08008412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008412:	b480      	push	{r7}
 8008414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008416:	e7fe      	b.n	8008416 <BusFault_Handler+0x4>

08008418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800841c:	e7fe      	b.n	800841c <UsageFault_Handler+0x4>

0800841e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800841e:	b480      	push	{r7}
 8008420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008422:	bf00      	nop
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800843a:	b480      	push	{r7}
 800843c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800843e:	bf00      	nop
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800844c:	f7f8 fdee 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008450:	bf00      	nop
 8008452:	bd80      	pop	{r7, pc}

08008454 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008458:	4802      	ldr	r0, [pc, #8]	; (8008464 <CAN1_TX_IRQHandler+0x10>)
 800845a:	f7f9 fd86 	bl	8001f6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800845e:	bf00      	nop
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	2000056c 	.word	0x2000056c

08008468 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800846c:	4802      	ldr	r0, [pc, #8]	; (8008478 <CAN1_RX0_IRQHandler+0x10>)
 800846e:	f7f9 fd7c 	bl	8001f6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8008472:	bf00      	nop
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	2000056c 	.word	0x2000056c

0800847c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008480:	4802      	ldr	r0, [pc, #8]	; (800848c <SPI2_IRQHandler+0x10>)
 8008482:	f7fb fbf5 	bl	8003c70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008486:	bf00      	nop
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200005e4 	.word	0x200005e4

08008490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008494:	4802      	ldr	r0, [pc, #8]	; (80084a0 <USART2_IRQHandler+0x10>)
 8008496:	f7fc ffab 	bl	80053f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800849a:	bf00      	nop
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	2000067c 	.word	0x2000067c

080084a4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80084a8:	4802      	ldr	r0, [pc, #8]	; (80084b4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80084aa:	f7fb ffd9 	bl	8004460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80084ae:	bf00      	nop
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	2000063c 	.word	0x2000063c

080084b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80084bc:	4802      	ldr	r0, [pc, #8]	; (80084c8 <DMA2_Stream0_IRQHandler+0x10>)
 80084be:	f7fa f9a1 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80084c2:	bf00      	nop
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200004ac 	.word	0x200004ac

080084cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80084d0:	4802      	ldr	r0, [pc, #8]	; (80084dc <DMA2_Stream1_IRQHandler+0x10>)
 80084d2:	f7fa f997 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80084d6:	bf00      	nop
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200003bc 	.word	0x200003bc

080084e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80084e4:	4802      	ldr	r0, [pc, #8]	; (80084f0 <DMA2_Stream2_IRQHandler+0x10>)
 80084e6:	f7fa f98d 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80084ea:	bf00      	nop
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	2000050c 	.word	0x2000050c

080084f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <_sbrk+0x50>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d102      	bne.n	800850a <_sbrk+0x16>
		heap_end = &end;
 8008504:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <_sbrk+0x50>)
 8008506:	4a10      	ldr	r2, [pc, #64]	; (8008548 <_sbrk+0x54>)
 8008508:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800850a:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <_sbrk+0x50>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008510:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <_sbrk+0x50>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4413      	add	r3, r2
 8008518:	466a      	mov	r2, sp
 800851a:	4293      	cmp	r3, r2
 800851c:	d907      	bls.n	800852e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800851e:	f000 fa49 	bl	80089b4 <__errno>
 8008522:	4602      	mov	r2, r0
 8008524:	230c      	movs	r3, #12
 8008526:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008528:	f04f 33ff 	mov.w	r3, #4294967295
 800852c:	e006      	b.n	800853c <_sbrk+0x48>
	}

	heap_end += incr;
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <_sbrk+0x50>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4413      	add	r3, r2
 8008536:	4a03      	ldr	r2, [pc, #12]	; (8008544 <_sbrk+0x50>)
 8008538:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800853a:	68fb      	ldr	r3, [r7, #12]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000364 	.word	0x20000364
 8008548:	200006c0 	.word	0x200006c0

0800854c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008550:	4b16      	ldr	r3, [pc, #88]	; (80085ac <SystemInit+0x60>)
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	4a15      	ldr	r2, [pc, #84]	; (80085ac <SystemInit+0x60>)
 8008558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800855c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008560:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <SystemInit+0x64>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a12      	ldr	r2, [pc, #72]	; (80085b0 <SystemInit+0x64>)
 8008566:	f043 0301 	orr.w	r3, r3, #1
 800856a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800856c:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <SystemInit+0x64>)
 800856e:	2200      	movs	r2, #0
 8008570:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008572:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <SystemInit+0x64>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a0e      	ldr	r2, [pc, #56]	; (80085b0 <SystemInit+0x64>)
 8008578:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800857c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008580:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008582:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <SystemInit+0x64>)
 8008584:	4a0b      	ldr	r2, [pc, #44]	; (80085b4 <SystemInit+0x68>)
 8008586:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <SystemInit+0x64>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a08      	ldr	r2, [pc, #32]	; (80085b0 <SystemInit+0x64>)
 800858e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008592:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <SystemInit+0x64>)
 8008596:	2200      	movs	r2, #0
 8008598:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800859a:	4b04      	ldr	r3, [pc, #16]	; (80085ac <SystemInit+0x60>)
 800859c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085a0:	609a      	str	r2, [r3, #8]
#endif
}
 80085a2:	bf00      	nop
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	e000ed00 	.word	0xe000ed00
 80085b0:	40023800 	.word	0x40023800
 80085b4:	24003010 	.word	0x24003010

080085b8 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b096      	sub	sp, #88	; 0x58
 80085bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	605a      	str	r2, [r3, #4]
 80085c8:	609a      	str	r2, [r3, #8]
 80085ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80085d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	605a      	str	r2, [r3, #4]
 80085e0:	609a      	str	r2, [r3, #8]
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	611a      	str	r2, [r3, #16]
 80085e6:	615a      	str	r2, [r3, #20]
 80085e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	2220      	movs	r2, #32
 80085ee:	2100      	movs	r1, #0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fa09 	bl	8008a08 <memset>

  htim8.Instance = TIM8;
 80085f6:	4b4a      	ldr	r3, [pc, #296]	; (8008720 <MX_TIM8_Init+0x168>)
 80085f8:	4a4a      	ldr	r2, [pc, #296]	; (8008724 <MX_TIM8_Init+0x16c>)
 80085fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80085fc:	4b48      	ldr	r3, [pc, #288]	; (8008720 <MX_TIM8_Init+0x168>)
 80085fe:	2200      	movs	r2, #0
 8008600:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8008602:	4b47      	ldr	r3, [pc, #284]	; (8008720 <MX_TIM8_Init+0x168>)
 8008604:	2220      	movs	r2, #32
 8008606:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8008608:	4b45      	ldr	r3, [pc, #276]	; (8008720 <MX_TIM8_Init+0x168>)
 800860a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800860e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008610:	4b43      	ldr	r3, [pc, #268]	; (8008720 <MX_TIM8_Init+0x168>)
 8008612:	2200      	movs	r2, #0
 8008614:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008616:	4b42      	ldr	r3, [pc, #264]	; (8008720 <MX_TIM8_Init+0x168>)
 8008618:	2200      	movs	r2, #0
 800861a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800861c:	4b40      	ldr	r3, [pc, #256]	; (8008720 <MX_TIM8_Init+0x168>)
 800861e:	2280      	movs	r2, #128	; 0x80
 8008620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008622:	483f      	ldr	r0, [pc, #252]	; (8008720 <MX_TIM8_Init+0x168>)
 8008624:	f7fb fe38 	bl	8004298 <HAL_TIM_Base_Init>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800862e:	f7ff fdfc 	bl	800822a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008636:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800863c:	4619      	mov	r1, r3
 800863e:	4838      	ldr	r0, [pc, #224]	; (8008720 <MX_TIM8_Init+0x168>)
 8008640:	f7fc f8dc 	bl	80047fc <HAL_TIM_ConfigClockSource>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800864a:	f7ff fdee 	bl	800822a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800864e:	4834      	ldr	r0, [pc, #208]	; (8008720 <MX_TIM8_Init+0x168>)
 8008650:	f7fb fe4d 	bl	80042ee <HAL_TIM_PWM_Init>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800865a:	f7ff fde6 	bl	800822a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800865e:	2320      	movs	r3, #32
 8008660:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008662:	2300      	movs	r3, #0
 8008664:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800866a:	4619      	mov	r1, r3
 800866c:	482c      	ldr	r0, [pc, #176]	; (8008720 <MX_TIM8_Init+0x168>)
 800866e:	f7fc fd09 	bl	8005084 <HAL_TIMEx_MasterConfigSynchronization>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8008678:	f7ff fdd7 	bl	800822a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800867c:	2360      	movs	r3, #96	; 0x60
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8008680:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008686:	2300      	movs	r3, #0
 8008688:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800868a:	2300      	movs	r3, #0
 800868c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800868e:	2300      	movs	r3, #0
 8008690:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008692:	2300      	movs	r3, #0
 8008694:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008696:	2300      	movs	r3, #0
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800869a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869e:	2200      	movs	r2, #0
 80086a0:	4619      	mov	r1, r3
 80086a2:	481f      	ldr	r0, [pc, #124]	; (8008720 <MX_TIM8_Init+0x168>)
 80086a4:	f7fb ffe4 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80086ae:	f7ff fdbc 	bl	800822a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80086b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086b6:	2204      	movs	r2, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4819      	ldr	r0, [pc, #100]	; (8008720 <MX_TIM8_Init+0x168>)
 80086bc:	f7fb ffd8 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80086c6:	f7ff fdb0 	bl	800822a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80086ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ce:	2208      	movs	r2, #8
 80086d0:	4619      	mov	r1, r3
 80086d2:	4813      	ldr	r0, [pc, #76]	; (8008720 <MX_TIM8_Init+0x168>)
 80086d4:	f7fb ffcc 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80086de:	f7ff fda4 	bl	800822a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 80086ee:	2328      	movs	r3, #40	; 0x28
 80086f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80086fe:	1d3b      	adds	r3, r7, #4
 8008700:	4619      	mov	r1, r3
 8008702:	4807      	ldr	r0, [pc, #28]	; (8008720 <MX_TIM8_Init+0x168>)
 8008704:	f7fc fd03 	bl	800510e <HAL_TIMEx_ConfigBreakDeadTime>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800870e:	f7ff fd8c 	bl	800822a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8008712:	4803      	ldr	r0, [pc, #12]	; (8008720 <MX_TIM8_Init+0x168>)
 8008714:	f000 f830 	bl	8008778 <HAL_TIM_MspPostInit>

}
 8008718:	bf00      	nop
 800871a:	3758      	adds	r7, #88	; 0x58
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	2000063c 	.word	0x2000063c
 8008724:	40010400 	.word	0x40010400

08008728 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a0e      	ldr	r2, [pc, #56]	; (8008770 <HAL_TIM_Base_MspInit+0x48>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d115      	bne.n	8008766 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <HAL_TIM_Base_MspInit+0x4c>)
 8008740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008742:	4a0c      	ldr	r2, [pc, #48]	; (8008774 <HAL_TIM_Base_MspInit+0x4c>)
 8008744:	f043 0302 	orr.w	r3, r3, #2
 8008748:	6453      	str	r3, [r2, #68]	; 0x44
 800874a:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <HAL_TIM_Base_MspInit+0x4c>)
 800874c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8008756:	2200      	movs	r2, #0
 8008758:	2100      	movs	r1, #0
 800875a:	202c      	movs	r0, #44	; 0x2c
 800875c:	f7f9 feeb 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8008760:	202c      	movs	r0, #44	; 0x2c
 8008762:	f7f9 ff04 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40010400 	.word	0x40010400
 8008774:	40023800 	.word	0x40023800

08008778 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	; 0x28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008780:	f107 0314 	add.w	r3, r7, #20
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	605a      	str	r2, [r3, #4]
 800878a:	609a      	str	r2, [r3, #8]
 800878c:	60da      	str	r2, [r3, #12]
 800878e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a30      	ldr	r2, [pc, #192]	; (8008858 <HAL_TIM_MspPostInit+0xe0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d15a      	bne.n	8008850 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800879a:	2300      	movs	r3, #0
 800879c:	613b      	str	r3, [r7, #16]
 800879e:	4b2f      	ldr	r3, [pc, #188]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	4a2e      	ldr	r2, [pc, #184]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087a4:	f043 0301 	orr.w	r3, r3, #1
 80087a8:	6313      	str	r3, [r2, #48]	; 0x30
 80087aa:	4b2c      	ldr	r3, [pc, #176]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	4b28      	ldr	r3, [pc, #160]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	4a27      	ldr	r2, [pc, #156]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087c0:	f043 0302 	orr.w	r3, r3, #2
 80087c4:	6313      	str	r3, [r2, #48]	; 0x30
 80087c6:	4b25      	ldr	r3, [pc, #148]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087d2:	2300      	movs	r3, #0
 80087d4:	60bb      	str	r3, [r7, #8]
 80087d6:	4b21      	ldr	r3, [pc, #132]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	4a20      	ldr	r2, [pc, #128]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087dc:	f043 0304 	orr.w	r3, r3, #4
 80087e0:	6313      	str	r3, [r2, #48]	; 0x30
 80087e2:	4b1e      	ldr	r3, [pc, #120]	; (800885c <HAL_TIM_MspPostInit+0xe4>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	60bb      	str	r3, [r7, #8]
 80087ec:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80087ee:	2380      	movs	r3, #128	; 0x80
 80087f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f2:	2302      	movs	r3, #2
 80087f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087fa:	2300      	movs	r3, #0
 80087fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80087fe:	2303      	movs	r3, #3
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008802:	f107 0314 	add.w	r3, r7, #20
 8008806:	4619      	mov	r1, r3
 8008808:	4815      	ldr	r0, [pc, #84]	; (8008860 <HAL_TIM_MspPostInit+0xe8>)
 800880a:	f7fa fa63 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800880e:	2303      	movs	r3, #3
 8008810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008812:	2302      	movs	r3, #2
 8008814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800881a:	2300      	movs	r3, #0
 800881c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800881e:	2303      	movs	r3, #3
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008822:	f107 0314 	add.w	r3, r7, #20
 8008826:	4619      	mov	r1, r3
 8008828:	480e      	ldr	r0, [pc, #56]	; (8008864 <HAL_TIM_MspPostInit+0xec>)
 800882a:	f7fa fa53 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800882e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8008832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008834:	2302      	movs	r3, #2
 8008836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008838:	2300      	movs	r3, #0
 800883a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800883c:	2300      	movs	r3, #0
 800883e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008840:	2303      	movs	r3, #3
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008844:	f107 0314 	add.w	r3, r7, #20
 8008848:	4619      	mov	r1, r3
 800884a:	4807      	ldr	r0, [pc, #28]	; (8008868 <HAL_TIM_MspPostInit+0xf0>)
 800884c:	f7fa fa42 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8008850:	bf00      	nop
 8008852:	3728      	adds	r7, #40	; 0x28
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	40010400 	.word	0x40010400
 800885c:	40023800 	.word	0x40023800
 8008860:	40020000 	.word	0x40020000
 8008864:	40020400 	.word	0x40020400
 8008868:	40020800 	.word	0x40020800

0800886c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008870:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 8008872:	4a12      	ldr	r2, [pc, #72]	; (80088bc <MX_USART2_UART_Init+0x50>)
 8008874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008876:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 8008878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800887c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800887e:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 8008880:	2200      	movs	r2, #0
 8008882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008884:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 8008886:	2200      	movs	r2, #0
 8008888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800888a:	4b0b      	ldr	r3, [pc, #44]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 800888c:	2200      	movs	r2, #0
 800888e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 8008892:	220c      	movs	r2, #12
 8008894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008896:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 8008898:	2200      	movs	r2, #0
 800889a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 800889e:	2200      	movs	r2, #0
 80088a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80088a2:	4805      	ldr	r0, [pc, #20]	; (80088b8 <MX_USART2_UART_Init+0x4c>)
 80088a4:	f7fc fcbe 	bl	8005224 <HAL_UART_Init>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80088ae:	f7ff fcbc 	bl	800822a <Error_Handler>
  }

}
 80088b2:	bf00      	nop
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	2000067c 	.word	0x2000067c
 80088bc:	40004400 	.word	0x40004400

080088c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08a      	sub	sp, #40	; 0x28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088c8:	f107 0314 	add.w	r3, r7, #20
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	605a      	str	r2, [r3, #4]
 80088d2:	609a      	str	r2, [r3, #8]
 80088d4:	60da      	str	r2, [r3, #12]
 80088d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1d      	ldr	r2, [pc, #116]	; (8008954 <HAL_UART_MspInit+0x94>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d133      	bne.n	800894a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80088e2:	2300      	movs	r3, #0
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	4b1c      	ldr	r3, [pc, #112]	; (8008958 <HAL_UART_MspInit+0x98>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	4a1b      	ldr	r2, [pc, #108]	; (8008958 <HAL_UART_MspInit+0x98>)
 80088ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f0:	6413      	str	r3, [r2, #64]	; 0x40
 80088f2:	4b19      	ldr	r3, [pc, #100]	; (8008958 <HAL_UART_MspInit+0x98>)
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	4b15      	ldr	r3, [pc, #84]	; (8008958 <HAL_UART_MspInit+0x98>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	4a14      	ldr	r2, [pc, #80]	; (8008958 <HAL_UART_MspInit+0x98>)
 8008908:	f043 0301 	orr.w	r3, r3, #1
 800890c:	6313      	str	r3, [r2, #48]	; 0x30
 800890e:	4b12      	ldr	r3, [pc, #72]	; (8008958 <HAL_UART_MspInit+0x98>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800891a:	230c      	movs	r3, #12
 800891c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800891e:	2302      	movs	r3, #2
 8008920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008922:	2301      	movs	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008926:	2303      	movs	r3, #3
 8008928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800892a:	2307      	movs	r3, #7
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800892e:	f107 0314 	add.w	r3, r7, #20
 8008932:	4619      	mov	r1, r3
 8008934:	4809      	ldr	r0, [pc, #36]	; (800895c <HAL_UART_MspInit+0x9c>)
 8008936:	f7fa f9cd 	bl	8002cd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	2026      	movs	r0, #38	; 0x26
 8008940:	f7f9 fdf9 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008944:	2026      	movs	r0, #38	; 0x26
 8008946:	f7f9 fe12 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800894a:	bf00      	nop
 800894c:	3728      	adds	r7, #40	; 0x28
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	40004400 	.word	0x40004400
 8008958:	40023800 	.word	0x40023800
 800895c:	40020000 	.word	0x40020000

08008960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008998 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008964:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008966:	e003      	b.n	8008970 <LoopCopyDataInit>

08008968 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008968:	4b0c      	ldr	r3, [pc, #48]	; (800899c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800896a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800896c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800896e:	3104      	adds	r1, #4

08008970 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008970:	480b      	ldr	r0, [pc, #44]	; (80089a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008972:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008974:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008976:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008978:	d3f6      	bcc.n	8008968 <CopyDataInit>
  ldr  r2, =_sbss
 800897a:	4a0b      	ldr	r2, [pc, #44]	; (80089a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800897c:	e002      	b.n	8008984 <LoopFillZerobss>

0800897e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800897e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008980:	f842 3b04 	str.w	r3, [r2], #4

08008984 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008984:	4b09      	ldr	r3, [pc, #36]	; (80089ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008986:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008988:	d3f9      	bcc.n	800897e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800898a:	f7ff fddf 	bl	800854c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800898e:	f000 f817 	bl	80089c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008992:	f7fd ff6d 	bl	8006870 <main>
  bx  lr    
 8008996:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008998:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 800899c:	0801eb40 	.word	0x0801eb40
  ldr  r0, =_sdata
 80089a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80089a4:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 80089a8:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 80089ac:	200006c0 	.word	0x200006c0

080089b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80089b0:	e7fe      	b.n	80089b0 <ADC_IRQHandler>
	...

080089b4 <__errno>:
 80089b4:	4b01      	ldr	r3, [pc, #4]	; (80089bc <__errno+0x8>)
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20000044 	.word	0x20000044

080089c0 <__libc_init_array>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	4e0d      	ldr	r6, [pc, #52]	; (80089f8 <__libc_init_array+0x38>)
 80089c4:	4c0d      	ldr	r4, [pc, #52]	; (80089fc <__libc_init_array+0x3c>)
 80089c6:	1ba4      	subs	r4, r4, r6
 80089c8:	10a4      	asrs	r4, r4, #2
 80089ca:	2500      	movs	r5, #0
 80089cc:	42a5      	cmp	r5, r4
 80089ce:	d109      	bne.n	80089e4 <__libc_init_array+0x24>
 80089d0:	4e0b      	ldr	r6, [pc, #44]	; (8008a00 <__libc_init_array+0x40>)
 80089d2:	4c0c      	ldr	r4, [pc, #48]	; (8008a04 <__libc_init_array+0x44>)
 80089d4:	f002 fab8 	bl	800af48 <_init>
 80089d8:	1ba4      	subs	r4, r4, r6
 80089da:	10a4      	asrs	r4, r4, #2
 80089dc:	2500      	movs	r5, #0
 80089de:	42a5      	cmp	r5, r4
 80089e0:	d105      	bne.n	80089ee <__libc_init_array+0x2e>
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089e8:	4798      	blx	r3
 80089ea:	3501      	adds	r5, #1
 80089ec:	e7ee      	b.n	80089cc <__libc_init_array+0xc>
 80089ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089f2:	4798      	blx	r3
 80089f4:	3501      	adds	r5, #1
 80089f6:	e7f2      	b.n	80089de <__libc_init_array+0x1e>
 80089f8:	0801eb38 	.word	0x0801eb38
 80089fc:	0801eb38 	.word	0x0801eb38
 8008a00:	0801eb38 	.word	0x0801eb38
 8008a04:	0801eb3c 	.word	0x0801eb3c

08008a08 <memset>:
 8008a08:	4402      	add	r2, r0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d100      	bne.n	8008a12 <memset+0xa>
 8008a10:	4770      	bx	lr
 8008a12:	f803 1b01 	strb.w	r1, [r3], #1
 8008a16:	e7f9      	b.n	8008a0c <memset+0x4>

08008a18 <__cvt>:
 8008a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a1c:	ec55 4b10 	vmov	r4, r5, d0
 8008a20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008a22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	460e      	mov	r6, r1
 8008a2a:	4691      	mov	r9, r2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	bfb8      	it	lt
 8008a30:	4622      	movlt	r2, r4
 8008a32:	462b      	mov	r3, r5
 8008a34:	f027 0720 	bic.w	r7, r7, #32
 8008a38:	bfbb      	ittet	lt
 8008a3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a3e:	461d      	movlt	r5, r3
 8008a40:	2300      	movge	r3, #0
 8008a42:	232d      	movlt	r3, #45	; 0x2d
 8008a44:	bfb8      	it	lt
 8008a46:	4614      	movlt	r4, r2
 8008a48:	2f46      	cmp	r7, #70	; 0x46
 8008a4a:	700b      	strb	r3, [r1, #0]
 8008a4c:	d004      	beq.n	8008a58 <__cvt+0x40>
 8008a4e:	2f45      	cmp	r7, #69	; 0x45
 8008a50:	d100      	bne.n	8008a54 <__cvt+0x3c>
 8008a52:	3601      	adds	r6, #1
 8008a54:	2102      	movs	r1, #2
 8008a56:	e000      	b.n	8008a5a <__cvt+0x42>
 8008a58:	2103      	movs	r1, #3
 8008a5a:	ab03      	add	r3, sp, #12
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	ab02      	add	r3, sp, #8
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4632      	mov	r2, r6
 8008a64:	4653      	mov	r3, sl
 8008a66:	ec45 4b10 	vmov	d0, r4, r5
 8008a6a:	f000 fcdd 	bl	8009428 <_dtoa_r>
 8008a6e:	2f47      	cmp	r7, #71	; 0x47
 8008a70:	4680      	mov	r8, r0
 8008a72:	d102      	bne.n	8008a7a <__cvt+0x62>
 8008a74:	f019 0f01 	tst.w	r9, #1
 8008a78:	d026      	beq.n	8008ac8 <__cvt+0xb0>
 8008a7a:	2f46      	cmp	r7, #70	; 0x46
 8008a7c:	eb08 0906 	add.w	r9, r8, r6
 8008a80:	d111      	bne.n	8008aa6 <__cvt+0x8e>
 8008a82:	f898 3000 	ldrb.w	r3, [r8]
 8008a86:	2b30      	cmp	r3, #48	; 0x30
 8008a88:	d10a      	bne.n	8008aa0 <__cvt+0x88>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f8 f839 	bl	8000b08 <__aeabi_dcmpeq>
 8008a96:	b918      	cbnz	r0, 8008aa0 <__cvt+0x88>
 8008a98:	f1c6 0601 	rsb	r6, r6, #1
 8008a9c:	f8ca 6000 	str.w	r6, [sl]
 8008aa0:	f8da 3000 	ldr.w	r3, [sl]
 8008aa4:	4499      	add	r9, r3
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	f7f8 f82b 	bl	8000b08 <__aeabi_dcmpeq>
 8008ab2:	b938      	cbnz	r0, 8008ac4 <__cvt+0xac>
 8008ab4:	2230      	movs	r2, #48	; 0x30
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	454b      	cmp	r3, r9
 8008aba:	d205      	bcs.n	8008ac8 <__cvt+0xb0>
 8008abc:	1c59      	adds	r1, r3, #1
 8008abe:	9103      	str	r1, [sp, #12]
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e7f8      	b.n	8008ab6 <__cvt+0x9e>
 8008ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008acc:	eba3 0308 	sub.w	r3, r3, r8
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	b004      	add	sp, #16
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ada <__exponent>:
 8008ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008adc:	2900      	cmp	r1, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	bfba      	itte	lt
 8008ae2:	4249      	neglt	r1, r1
 8008ae4:	232d      	movlt	r3, #45	; 0x2d
 8008ae6:	232b      	movge	r3, #43	; 0x2b
 8008ae8:	2909      	cmp	r1, #9
 8008aea:	f804 2b02 	strb.w	r2, [r4], #2
 8008aee:	7043      	strb	r3, [r0, #1]
 8008af0:	dd20      	ble.n	8008b34 <__exponent+0x5a>
 8008af2:	f10d 0307 	add.w	r3, sp, #7
 8008af6:	461f      	mov	r7, r3
 8008af8:	260a      	movs	r6, #10
 8008afa:	fb91 f5f6 	sdiv	r5, r1, r6
 8008afe:	fb06 1115 	mls	r1, r6, r5, r1
 8008b02:	3130      	adds	r1, #48	; 0x30
 8008b04:	2d09      	cmp	r5, #9
 8008b06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8008b0e:	4629      	mov	r1, r5
 8008b10:	dc09      	bgt.n	8008b26 <__exponent+0x4c>
 8008b12:	3130      	adds	r1, #48	; 0x30
 8008b14:	3b02      	subs	r3, #2
 8008b16:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b1a:	42bb      	cmp	r3, r7
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	d304      	bcc.n	8008b2a <__exponent+0x50>
 8008b20:	1a10      	subs	r0, r2, r0
 8008b22:	b003      	add	sp, #12
 8008b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b26:	4613      	mov	r3, r2
 8008b28:	e7e7      	b.n	8008afa <__exponent+0x20>
 8008b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b2e:	f804 2b01 	strb.w	r2, [r4], #1
 8008b32:	e7f2      	b.n	8008b1a <__exponent+0x40>
 8008b34:	2330      	movs	r3, #48	; 0x30
 8008b36:	4419      	add	r1, r3
 8008b38:	7083      	strb	r3, [r0, #2]
 8008b3a:	1d02      	adds	r2, r0, #4
 8008b3c:	70c1      	strb	r1, [r0, #3]
 8008b3e:	e7ef      	b.n	8008b20 <__exponent+0x46>

08008b40 <_printf_float>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	b08d      	sub	sp, #52	; 0x34
 8008b46:	460c      	mov	r4, r1
 8008b48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	461f      	mov	r7, r3
 8008b50:	4605      	mov	r5, r0
 8008b52:	f001 fa21 	bl	8009f98 <_localeconv_r>
 8008b56:	6803      	ldr	r3, [r0, #0]
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7f7 fb58 	bl	8000210 <strlen>
 8008b60:	2300      	movs	r3, #0
 8008b62:	930a      	str	r3, [sp, #40]	; 0x28
 8008b64:	f8d8 3000 	ldr.w	r3, [r8]
 8008b68:	9005      	str	r0, [sp, #20]
 8008b6a:	3307      	adds	r3, #7
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	f103 0208 	add.w	r2, r3, #8
 8008b74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b78:	f8d4 b000 	ldr.w	fp, [r4]
 8008b7c:	f8c8 2000 	str.w	r2, [r8]
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b96:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9a:	4ba7      	ldr	r3, [pc, #668]	; (8008e38 <_printf_float+0x2f8>)
 8008b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ba0:	f7f7 ffe4 	bl	8000b6c <__aeabi_dcmpun>
 8008ba4:	bb70      	cbnz	r0, 8008c04 <_printf_float+0xc4>
 8008ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8008baa:	4ba3      	ldr	r3, [pc, #652]	; (8008e38 <_printf_float+0x2f8>)
 8008bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bb0:	f7f7 ffbe 	bl	8000b30 <__aeabi_dcmple>
 8008bb4:	bb30      	cbnz	r0, 8008c04 <_printf_float+0xc4>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f7 ffad 	bl	8000b1c <__aeabi_dcmplt>
 8008bc2:	b110      	cbz	r0, 8008bca <_printf_float+0x8a>
 8008bc4:	232d      	movs	r3, #45	; 0x2d
 8008bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bca:	4a9c      	ldr	r2, [pc, #624]	; (8008e3c <_printf_float+0x2fc>)
 8008bcc:	4b9c      	ldr	r3, [pc, #624]	; (8008e40 <_printf_float+0x300>)
 8008bce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008bd2:	bf8c      	ite	hi
 8008bd4:	4690      	movhi	r8, r2
 8008bd6:	4698      	movls	r8, r3
 8008bd8:	2303      	movs	r3, #3
 8008bda:	f02b 0204 	bic.w	r2, fp, #4
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	9700      	str	r7, [sp, #0]
 8008be8:	4633      	mov	r3, r6
 8008bea:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bec:	4621      	mov	r1, r4
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f000 f9e6 	bl	8008fc0 <_printf_common>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f040 808d 	bne.w	8008d14 <_printf_float+0x1d4>
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfe:	b00d      	add	sp, #52	; 0x34
 8008c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f7f7 ffae 	bl	8000b6c <__aeabi_dcmpun>
 8008c10:	b110      	cbz	r0, 8008c18 <_printf_float+0xd8>
 8008c12:	4a8c      	ldr	r2, [pc, #560]	; (8008e44 <_printf_float+0x304>)
 8008c14:	4b8c      	ldr	r3, [pc, #560]	; (8008e48 <_printf_float+0x308>)
 8008c16:	e7da      	b.n	8008bce <_printf_float+0x8e>
 8008c18:	6861      	ldr	r1, [r4, #4]
 8008c1a:	1c4b      	adds	r3, r1, #1
 8008c1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008c20:	a80a      	add	r0, sp, #40	; 0x28
 8008c22:	d13e      	bne.n	8008ca2 <_printf_float+0x162>
 8008c24:	2306      	movs	r3, #6
 8008c26:	6063      	str	r3, [r4, #4]
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008c2e:	ab09      	add	r3, sp, #36	; 0x24
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	ec49 8b10 	vmov	d0, r8, r9
 8008c36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c3a:	6022      	str	r2, [r4, #0]
 8008c3c:	f8cd a004 	str.w	sl, [sp, #4]
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4628      	mov	r0, r5
 8008c44:	f7ff fee8 	bl	8008a18 <__cvt>
 8008c48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008c4c:	2b47      	cmp	r3, #71	; 0x47
 8008c4e:	4680      	mov	r8, r0
 8008c50:	d109      	bne.n	8008c66 <_printf_float+0x126>
 8008c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c54:	1cd8      	adds	r0, r3, #3
 8008c56:	db02      	blt.n	8008c5e <_printf_float+0x11e>
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	dd47      	ble.n	8008cee <_printf_float+0x1ae>
 8008c5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c62:	fa5f fa8a 	uxtb.w	sl, sl
 8008c66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c6c:	d824      	bhi.n	8008cb8 <_printf_float+0x178>
 8008c6e:	3901      	subs	r1, #1
 8008c70:	4652      	mov	r2, sl
 8008c72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c76:	9109      	str	r1, [sp, #36]	; 0x24
 8008c78:	f7ff ff2f 	bl	8008ada <__exponent>
 8008c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c7e:	1813      	adds	r3, r2, r0
 8008c80:	2a01      	cmp	r2, #1
 8008c82:	4681      	mov	r9, r0
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	dc02      	bgt.n	8008c8e <_printf_float+0x14e>
 8008c88:	6822      	ldr	r2, [r4, #0]
 8008c8a:	07d1      	lsls	r1, r2, #31
 8008c8c:	d501      	bpl.n	8008c92 <_printf_float+0x152>
 8008c8e:	3301      	adds	r3, #1
 8008c90:	6123      	str	r3, [r4, #16]
 8008c92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0a5      	beq.n	8008be6 <_printf_float+0xa6>
 8008c9a:	232d      	movs	r3, #45	; 0x2d
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca0:	e7a1      	b.n	8008be6 <_printf_float+0xa6>
 8008ca2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008ca6:	f000 8177 	beq.w	8008f98 <_printf_float+0x458>
 8008caa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008cae:	d1bb      	bne.n	8008c28 <_printf_float+0xe8>
 8008cb0:	2900      	cmp	r1, #0
 8008cb2:	d1b9      	bne.n	8008c28 <_printf_float+0xe8>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e7b6      	b.n	8008c26 <_printf_float+0xe6>
 8008cb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008cbc:	d119      	bne.n	8008cf2 <_printf_float+0x1b2>
 8008cbe:	2900      	cmp	r1, #0
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	dd0c      	ble.n	8008cde <_printf_float+0x19e>
 8008cc4:	6121      	str	r1, [r4, #16]
 8008cc6:	b913      	cbnz	r3, 8008cce <_printf_float+0x18e>
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	07d2      	lsls	r2, r2, #31
 8008ccc:	d502      	bpl.n	8008cd4 <_printf_float+0x194>
 8008cce:	3301      	adds	r3, #1
 8008cd0:	440b      	add	r3, r1
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8008cd8:	f04f 0900 	mov.w	r9, #0
 8008cdc:	e7d9      	b.n	8008c92 <_printf_float+0x152>
 8008cde:	b913      	cbnz	r3, 8008ce6 <_printf_float+0x1a6>
 8008ce0:	6822      	ldr	r2, [r4, #0]
 8008ce2:	07d0      	lsls	r0, r2, #31
 8008ce4:	d501      	bpl.n	8008cea <_printf_float+0x1aa>
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	e7f3      	b.n	8008cd2 <_printf_float+0x192>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e7f1      	b.n	8008cd2 <_printf_float+0x192>
 8008cee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008cf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	db05      	blt.n	8008d06 <_printf_float+0x1c6>
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	07d1      	lsls	r1, r2, #31
 8008d00:	d5e8      	bpl.n	8008cd4 <_printf_float+0x194>
 8008d02:	3301      	adds	r3, #1
 8008d04:	e7e5      	b.n	8008cd2 <_printf_float+0x192>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bfd4      	ite	le
 8008d0a:	f1c3 0302 	rsble	r3, r3, #2
 8008d0e:	2301      	movgt	r3, #1
 8008d10:	4413      	add	r3, r2
 8008d12:	e7de      	b.n	8008cd2 <_printf_float+0x192>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	055a      	lsls	r2, r3, #21
 8008d18:	d407      	bmi.n	8008d2a <_printf_float+0x1ea>
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b8      	blx	r7
 8008d24:	3001      	adds	r0, #1
 8008d26:	d12b      	bne.n	8008d80 <_printf_float+0x240>
 8008d28:	e767      	b.n	8008bfa <_printf_float+0xba>
 8008d2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008d2e:	f240 80dc 	bls.w	8008eea <_printf_float+0x3aa>
 8008d32:	2200      	movs	r2, #0
 8008d34:	2300      	movs	r3, #0
 8008d36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d3a:	f7f7 fee5 	bl	8000b08 <__aeabi_dcmpeq>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d033      	beq.n	8008daa <_printf_float+0x26a>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4a41      	ldr	r2, [pc, #260]	; (8008e4c <_printf_float+0x30c>)
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f af54 	beq.w	8008bfa <_printf_float+0xba>
 8008d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d56:	429a      	cmp	r2, r3
 8008d58:	db02      	blt.n	8008d60 <_printf_float+0x220>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	07d8      	lsls	r0, r3, #31
 8008d5e:	d50f      	bpl.n	8008d80 <_printf_float+0x240>
 8008d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f43f af45 	beq.w	8008bfa <_printf_float+0xba>
 8008d70:	f04f 0800 	mov.w	r8, #0
 8008d74:	f104 091a 	add.w	r9, r4, #26
 8008d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	4543      	cmp	r3, r8
 8008d7e:	dc09      	bgt.n	8008d94 <_printf_float+0x254>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	079b      	lsls	r3, r3, #30
 8008d84:	f100 8103 	bmi.w	8008f8e <_printf_float+0x44e>
 8008d88:	68e0      	ldr	r0, [r4, #12]
 8008d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	bfb8      	it	lt
 8008d90:	4618      	movlt	r0, r3
 8008d92:	e734      	b.n	8008bfe <_printf_float+0xbe>
 8008d94:	2301      	movs	r3, #1
 8008d96:	464a      	mov	r2, r9
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af2b 	beq.w	8008bfa <_printf_float+0xba>
 8008da4:	f108 0801 	add.w	r8, r8, #1
 8008da8:	e7e6      	b.n	8008d78 <_printf_float+0x238>
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc2b      	bgt.n	8008e08 <_printf_float+0x2c8>
 8008db0:	2301      	movs	r3, #1
 8008db2:	4a26      	ldr	r2, [pc, #152]	; (8008e4c <_printf_float+0x30c>)
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af1d 	beq.w	8008bfa <_printf_float+0xba>
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	b923      	cbnz	r3, 8008dce <_printf_float+0x28e>
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc6:	b913      	cbnz	r3, 8008dce <_printf_float+0x28e>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	07d9      	lsls	r1, r3, #31
 8008dcc:	d5d8      	bpl.n	8008d80 <_printf_float+0x240>
 8008dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47b8      	blx	r7
 8008dd8:	3001      	adds	r0, #1
 8008dda:	f43f af0e 	beq.w	8008bfa <_printf_float+0xba>
 8008dde:	f04f 0900 	mov.w	r9, #0
 8008de2:	f104 0a1a 	add.w	sl, r4, #26
 8008de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de8:	425b      	negs	r3, r3
 8008dea:	454b      	cmp	r3, r9
 8008dec:	dc01      	bgt.n	8008df2 <_printf_float+0x2b2>
 8008dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df0:	e794      	b.n	8008d1c <_printf_float+0x1dc>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4652      	mov	r2, sl
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b8      	blx	r7
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f43f aefc 	beq.w	8008bfa <_printf_float+0xba>
 8008e02:	f109 0901 	add.w	r9, r9, #1
 8008e06:	e7ee      	b.n	8008de6 <_printf_float+0x2a6>
 8008e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	bfa8      	it	ge
 8008e10:	461a      	movge	r2, r3
 8008e12:	2a00      	cmp	r2, #0
 8008e14:	4691      	mov	r9, r2
 8008e16:	dd07      	ble.n	8008e28 <_printf_float+0x2e8>
 8008e18:	4613      	mov	r3, r2
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b8      	blx	r7
 8008e22:	3001      	adds	r0, #1
 8008e24:	f43f aee9 	beq.w	8008bfa <_printf_float+0xba>
 8008e28:	f104 031a 	add.w	r3, r4, #26
 8008e2c:	f04f 0b00 	mov.w	fp, #0
 8008e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e34:	9306      	str	r3, [sp, #24]
 8008e36:	e015      	b.n	8008e64 <_printf_float+0x324>
 8008e38:	7fefffff 	.word	0x7fefffff
 8008e3c:	0801e84c 	.word	0x0801e84c
 8008e40:	0801e848 	.word	0x0801e848
 8008e44:	0801e854 	.word	0x0801e854
 8008e48:	0801e850 	.word	0x0801e850
 8008e4c:	0801e858 	.word	0x0801e858
 8008e50:	2301      	movs	r3, #1
 8008e52:	9a06      	ldr	r2, [sp, #24]
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f aecd 	beq.w	8008bfa <_printf_float+0xba>
 8008e60:	f10b 0b01 	add.w	fp, fp, #1
 8008e64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008e68:	ebaa 0309 	sub.w	r3, sl, r9
 8008e6c:	455b      	cmp	r3, fp
 8008e6e:	dcef      	bgt.n	8008e50 <_printf_float+0x310>
 8008e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e74:	429a      	cmp	r2, r3
 8008e76:	44d0      	add	r8, sl
 8008e78:	db15      	blt.n	8008ea6 <_printf_float+0x366>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	07da      	lsls	r2, r3, #31
 8008e7e:	d412      	bmi.n	8008ea6 <_printf_float+0x366>
 8008e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e84:	eba3 020a 	sub.w	r2, r3, sl
 8008e88:	eba3 0a01 	sub.w	sl, r3, r1
 8008e8c:	4592      	cmp	sl, r2
 8008e8e:	bfa8      	it	ge
 8008e90:	4692      	movge	sl, r2
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	dc0e      	bgt.n	8008eb6 <_printf_float+0x376>
 8008e98:	f04f 0800 	mov.w	r8, #0
 8008e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ea0:	f104 091a 	add.w	r9, r4, #26
 8008ea4:	e019      	b.n	8008eda <_printf_float+0x39a>
 8008ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d1e5      	bne.n	8008e80 <_printf_float+0x340>
 8008eb4:	e6a1      	b.n	8008bfa <_printf_float+0xba>
 8008eb6:	4653      	mov	r3, sl
 8008eb8:	4642      	mov	r2, r8
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d1e9      	bne.n	8008e98 <_printf_float+0x358>
 8008ec4:	e699      	b.n	8008bfa <_printf_float+0xba>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	464a      	mov	r2, r9
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f ae92 	beq.w	8008bfa <_printf_float+0xba>
 8008ed6:	f108 0801 	add.w	r8, r8, #1
 8008eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	eba3 030a 	sub.w	r3, r3, sl
 8008ee4:	4543      	cmp	r3, r8
 8008ee6:	dcee      	bgt.n	8008ec6 <_printf_float+0x386>
 8008ee8:	e74a      	b.n	8008d80 <_printf_float+0x240>
 8008eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eec:	2a01      	cmp	r2, #1
 8008eee:	dc01      	bgt.n	8008ef4 <_printf_float+0x3b4>
 8008ef0:	07db      	lsls	r3, r3, #31
 8008ef2:	d53a      	bpl.n	8008f6a <_printf_float+0x42a>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f ae7b 	beq.w	8008bfa <_printf_float+0xba>
 8008f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f108 0801 	add.w	r8, r8, #1
 8008f14:	f43f ae71 	beq.w	8008bfa <_printf_float+0xba>
 8008f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f24:	2300      	movs	r3, #0
 8008f26:	f7f7 fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8008f2a:	b9c8      	cbnz	r0, 8008f60 <_printf_float+0x420>
 8008f2c:	4653      	mov	r3, sl
 8008f2e:	4642      	mov	r2, r8
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	d10e      	bne.n	8008f58 <_printf_float+0x418>
 8008f3a:	e65e      	b.n	8008bfa <_printf_float+0xba>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	4652      	mov	r2, sl
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	f43f ae57 	beq.w	8008bfa <_printf_float+0xba>
 8008f4c:	f108 0801 	add.w	r8, r8, #1
 8008f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4543      	cmp	r3, r8
 8008f56:	dcf1      	bgt.n	8008f3c <_printf_float+0x3fc>
 8008f58:	464b      	mov	r3, r9
 8008f5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f5e:	e6de      	b.n	8008d1e <_printf_float+0x1de>
 8008f60:	f04f 0800 	mov.w	r8, #0
 8008f64:	f104 0a1a 	add.w	sl, r4, #26
 8008f68:	e7f2      	b.n	8008f50 <_printf_float+0x410>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7df      	b.n	8008f2e <_printf_float+0x3ee>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	464a      	mov	r2, r9
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f43f ae3e 	beq.w	8008bfa <_printf_float+0xba>
 8008f7e:	f108 0801 	add.w	r8, r8, #1
 8008f82:	68e3      	ldr	r3, [r4, #12]
 8008f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f86:	1a9b      	subs	r3, r3, r2
 8008f88:	4543      	cmp	r3, r8
 8008f8a:	dcf0      	bgt.n	8008f6e <_printf_float+0x42e>
 8008f8c:	e6fc      	b.n	8008d88 <_printf_float+0x248>
 8008f8e:	f04f 0800 	mov.w	r8, #0
 8008f92:	f104 0919 	add.w	r9, r4, #25
 8008f96:	e7f4      	b.n	8008f82 <_printf_float+0x442>
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	f43f ae8b 	beq.w	8008cb4 <_printf_float+0x174>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008fa4:	ab09      	add	r3, sp, #36	; 0x24
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	ec49 8b10 	vmov	d0, r8, r9
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	f8cd a004 	str.w	sl, [sp, #4]
 8008fb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7ff fd2e 	bl	8008a18 <__cvt>
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	e648      	b.n	8008c52 <_printf_float+0x112>

08008fc0 <_printf_common>:
 8008fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	4691      	mov	r9, r2
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	688a      	ldr	r2, [r1, #8]
 8008fca:	690b      	ldr	r3, [r1, #16]
 8008fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	bfb8      	it	lt
 8008fd4:	4613      	movlt	r3, r2
 8008fd6:	f8c9 3000 	str.w	r3, [r9]
 8008fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	b112      	cbz	r2, 8008fea <_printf_common+0x2a>
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	f8c9 3000 	str.w	r3, [r9]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	0699      	lsls	r1, r3, #26
 8008fee:	bf42      	ittt	mi
 8008ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ff4:	3302      	addmi	r3, #2
 8008ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8008ffa:	6825      	ldr	r5, [r4, #0]
 8008ffc:	f015 0506 	ands.w	r5, r5, #6
 8009000:	d107      	bne.n	8009012 <_printf_common+0x52>
 8009002:	f104 0a19 	add.w	sl, r4, #25
 8009006:	68e3      	ldr	r3, [r4, #12]
 8009008:	f8d9 2000 	ldr.w	r2, [r9]
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	42ab      	cmp	r3, r5
 8009010:	dc28      	bgt.n	8009064 <_printf_common+0xa4>
 8009012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	3300      	adds	r3, #0
 800901a:	bf18      	it	ne
 800901c:	2301      	movne	r3, #1
 800901e:	0692      	lsls	r2, r2, #26
 8009020:	d42d      	bmi.n	800907e <_printf_common+0xbe>
 8009022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009026:	4639      	mov	r1, r7
 8009028:	4630      	mov	r0, r6
 800902a:	47c0      	blx	r8
 800902c:	3001      	adds	r0, #1
 800902e:	d020      	beq.n	8009072 <_printf_common+0xb2>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	68e5      	ldr	r5, [r4, #12]
 8009034:	f8d9 2000 	ldr.w	r2, [r9]
 8009038:	f003 0306 	and.w	r3, r3, #6
 800903c:	2b04      	cmp	r3, #4
 800903e:	bf08      	it	eq
 8009040:	1aad      	subeq	r5, r5, r2
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	6922      	ldr	r2, [r4, #16]
 8009046:	bf0c      	ite	eq
 8009048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800904c:	2500      	movne	r5, #0
 800904e:	4293      	cmp	r3, r2
 8009050:	bfc4      	itt	gt
 8009052:	1a9b      	subgt	r3, r3, r2
 8009054:	18ed      	addgt	r5, r5, r3
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	341a      	adds	r4, #26
 800905c:	454d      	cmp	r5, r9
 800905e:	d11a      	bne.n	8009096 <_printf_common+0xd6>
 8009060:	2000      	movs	r0, #0
 8009062:	e008      	b.n	8009076 <_printf_common+0xb6>
 8009064:	2301      	movs	r3, #1
 8009066:	4652      	mov	r2, sl
 8009068:	4639      	mov	r1, r7
 800906a:	4630      	mov	r0, r6
 800906c:	47c0      	blx	r8
 800906e:	3001      	adds	r0, #1
 8009070:	d103      	bne.n	800907a <_printf_common+0xba>
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907a:	3501      	adds	r5, #1
 800907c:	e7c3      	b.n	8009006 <_printf_common+0x46>
 800907e:	18e1      	adds	r1, r4, r3
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	2030      	movs	r0, #48	; 0x30
 8009084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009088:	4422      	add	r2, r4
 800908a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800908e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009092:	3302      	adds	r3, #2
 8009094:	e7c5      	b.n	8009022 <_printf_common+0x62>
 8009096:	2301      	movs	r3, #1
 8009098:	4622      	mov	r2, r4
 800909a:	4639      	mov	r1, r7
 800909c:	4630      	mov	r0, r6
 800909e:	47c0      	blx	r8
 80090a0:	3001      	adds	r0, #1
 80090a2:	d0e6      	beq.n	8009072 <_printf_common+0xb2>
 80090a4:	f109 0901 	add.w	r9, r9, #1
 80090a8:	e7d8      	b.n	800905c <_printf_common+0x9c>
	...

080090ac <_printf_i>:
 80090ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80090b4:	460c      	mov	r4, r1
 80090b6:	7e09      	ldrb	r1, [r1, #24]
 80090b8:	b085      	sub	sp, #20
 80090ba:	296e      	cmp	r1, #110	; 0x6e
 80090bc:	4617      	mov	r7, r2
 80090be:	4606      	mov	r6, r0
 80090c0:	4698      	mov	r8, r3
 80090c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090c4:	f000 80b3 	beq.w	800922e <_printf_i+0x182>
 80090c8:	d822      	bhi.n	8009110 <_printf_i+0x64>
 80090ca:	2963      	cmp	r1, #99	; 0x63
 80090cc:	d036      	beq.n	800913c <_printf_i+0x90>
 80090ce:	d80a      	bhi.n	80090e6 <_printf_i+0x3a>
 80090d0:	2900      	cmp	r1, #0
 80090d2:	f000 80b9 	beq.w	8009248 <_printf_i+0x19c>
 80090d6:	2958      	cmp	r1, #88	; 0x58
 80090d8:	f000 8083 	beq.w	80091e2 <_printf_i+0x136>
 80090dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80090e4:	e032      	b.n	800914c <_printf_i+0xa0>
 80090e6:	2964      	cmp	r1, #100	; 0x64
 80090e8:	d001      	beq.n	80090ee <_printf_i+0x42>
 80090ea:	2969      	cmp	r1, #105	; 0x69
 80090ec:	d1f6      	bne.n	80090dc <_printf_i+0x30>
 80090ee:	6820      	ldr	r0, [r4, #0]
 80090f0:	6813      	ldr	r3, [r2, #0]
 80090f2:	0605      	lsls	r5, r0, #24
 80090f4:	f103 0104 	add.w	r1, r3, #4
 80090f8:	d52a      	bpl.n	8009150 <_printf_i+0xa4>
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6011      	str	r1, [r2, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da03      	bge.n	800910a <_printf_i+0x5e>
 8009102:	222d      	movs	r2, #45	; 0x2d
 8009104:	425b      	negs	r3, r3
 8009106:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800910a:	486f      	ldr	r0, [pc, #444]	; (80092c8 <_printf_i+0x21c>)
 800910c:	220a      	movs	r2, #10
 800910e:	e039      	b.n	8009184 <_printf_i+0xd8>
 8009110:	2973      	cmp	r1, #115	; 0x73
 8009112:	f000 809d 	beq.w	8009250 <_printf_i+0x1a4>
 8009116:	d808      	bhi.n	800912a <_printf_i+0x7e>
 8009118:	296f      	cmp	r1, #111	; 0x6f
 800911a:	d020      	beq.n	800915e <_printf_i+0xb2>
 800911c:	2970      	cmp	r1, #112	; 0x70
 800911e:	d1dd      	bne.n	80090dc <_printf_i+0x30>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	f043 0320 	orr.w	r3, r3, #32
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	e003      	b.n	8009132 <_printf_i+0x86>
 800912a:	2975      	cmp	r1, #117	; 0x75
 800912c:	d017      	beq.n	800915e <_printf_i+0xb2>
 800912e:	2978      	cmp	r1, #120	; 0x78
 8009130:	d1d4      	bne.n	80090dc <_printf_i+0x30>
 8009132:	2378      	movs	r3, #120	; 0x78
 8009134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009138:	4864      	ldr	r0, [pc, #400]	; (80092cc <_printf_i+0x220>)
 800913a:	e055      	b.n	80091e8 <_printf_i+0x13c>
 800913c:	6813      	ldr	r3, [r2, #0]
 800913e:	1d19      	adds	r1, r3, #4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6011      	str	r1, [r2, #0]
 8009144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800914c:	2301      	movs	r3, #1
 800914e:	e08c      	b.n	800926a <_printf_i+0x1be>
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6011      	str	r1, [r2, #0]
 8009154:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009158:	bf18      	it	ne
 800915a:	b21b      	sxthne	r3, r3
 800915c:	e7cf      	b.n	80090fe <_printf_i+0x52>
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	6825      	ldr	r5, [r4, #0]
 8009162:	1d18      	adds	r0, r3, #4
 8009164:	6010      	str	r0, [r2, #0]
 8009166:	0628      	lsls	r0, r5, #24
 8009168:	d501      	bpl.n	800916e <_printf_i+0xc2>
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	e002      	b.n	8009174 <_printf_i+0xc8>
 800916e:	0668      	lsls	r0, r5, #25
 8009170:	d5fb      	bpl.n	800916a <_printf_i+0xbe>
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	4854      	ldr	r0, [pc, #336]	; (80092c8 <_printf_i+0x21c>)
 8009176:	296f      	cmp	r1, #111	; 0x6f
 8009178:	bf14      	ite	ne
 800917a:	220a      	movne	r2, #10
 800917c:	2208      	moveq	r2, #8
 800917e:	2100      	movs	r1, #0
 8009180:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009184:	6865      	ldr	r5, [r4, #4]
 8009186:	60a5      	str	r5, [r4, #8]
 8009188:	2d00      	cmp	r5, #0
 800918a:	f2c0 8095 	blt.w	80092b8 <_printf_i+0x20c>
 800918e:	6821      	ldr	r1, [r4, #0]
 8009190:	f021 0104 	bic.w	r1, r1, #4
 8009194:	6021      	str	r1, [r4, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d13d      	bne.n	8009216 <_printf_i+0x16a>
 800919a:	2d00      	cmp	r5, #0
 800919c:	f040 808e 	bne.w	80092bc <_printf_i+0x210>
 80091a0:	4665      	mov	r5, ip
 80091a2:	2a08      	cmp	r2, #8
 80091a4:	d10b      	bne.n	80091be <_printf_i+0x112>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d508      	bpl.n	80091be <_printf_i+0x112>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	bfde      	ittt	le
 80091b4:	2330      	movle	r3, #48	; 0x30
 80091b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091be:	ebac 0305 	sub.w	r3, ip, r5
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	f8cd 8000 	str.w	r8, [sp]
 80091c8:	463b      	mov	r3, r7
 80091ca:	aa03      	add	r2, sp, #12
 80091cc:	4621      	mov	r1, r4
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff fef6 	bl	8008fc0 <_printf_common>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d14d      	bne.n	8009274 <_printf_i+0x1c8>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	b005      	add	sp, #20
 80091de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091e2:	4839      	ldr	r0, [pc, #228]	; (80092c8 <_printf_i+0x21c>)
 80091e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	6821      	ldr	r1, [r4, #0]
 80091ec:	1d1d      	adds	r5, r3, #4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6015      	str	r5, [r2, #0]
 80091f2:	060a      	lsls	r2, r1, #24
 80091f4:	d50b      	bpl.n	800920e <_printf_i+0x162>
 80091f6:	07ca      	lsls	r2, r1, #31
 80091f8:	bf44      	itt	mi
 80091fa:	f041 0120 	orrmi.w	r1, r1, #32
 80091fe:	6021      	strmi	r1, [r4, #0]
 8009200:	b91b      	cbnz	r3, 800920a <_printf_i+0x15e>
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	f022 0220 	bic.w	r2, r2, #32
 8009208:	6022      	str	r2, [r4, #0]
 800920a:	2210      	movs	r2, #16
 800920c:	e7b7      	b.n	800917e <_printf_i+0xd2>
 800920e:	064d      	lsls	r5, r1, #25
 8009210:	bf48      	it	mi
 8009212:	b29b      	uxthmi	r3, r3
 8009214:	e7ef      	b.n	80091f6 <_printf_i+0x14a>
 8009216:	4665      	mov	r5, ip
 8009218:	fbb3 f1f2 	udiv	r1, r3, r2
 800921c:	fb02 3311 	mls	r3, r2, r1, r3
 8009220:	5cc3      	ldrb	r3, [r0, r3]
 8009222:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009226:	460b      	mov	r3, r1
 8009228:	2900      	cmp	r1, #0
 800922a:	d1f5      	bne.n	8009218 <_printf_i+0x16c>
 800922c:	e7b9      	b.n	80091a2 <_printf_i+0xf6>
 800922e:	6813      	ldr	r3, [r2, #0]
 8009230:	6825      	ldr	r5, [r4, #0]
 8009232:	6961      	ldr	r1, [r4, #20]
 8009234:	1d18      	adds	r0, r3, #4
 8009236:	6010      	str	r0, [r2, #0]
 8009238:	0628      	lsls	r0, r5, #24
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	d501      	bpl.n	8009242 <_printf_i+0x196>
 800923e:	6019      	str	r1, [r3, #0]
 8009240:	e002      	b.n	8009248 <_printf_i+0x19c>
 8009242:	066a      	lsls	r2, r5, #25
 8009244:	d5fb      	bpl.n	800923e <_printf_i+0x192>
 8009246:	8019      	strh	r1, [r3, #0]
 8009248:	2300      	movs	r3, #0
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	4665      	mov	r5, ip
 800924e:	e7b9      	b.n	80091c4 <_printf_i+0x118>
 8009250:	6813      	ldr	r3, [r2, #0]
 8009252:	1d19      	adds	r1, r3, #4
 8009254:	6011      	str	r1, [r2, #0]
 8009256:	681d      	ldr	r5, [r3, #0]
 8009258:	6862      	ldr	r2, [r4, #4]
 800925a:	2100      	movs	r1, #0
 800925c:	4628      	mov	r0, r5
 800925e:	f7f6 ffdf 	bl	8000220 <memchr>
 8009262:	b108      	cbz	r0, 8009268 <_printf_i+0x1bc>
 8009264:	1b40      	subs	r0, r0, r5
 8009266:	6060      	str	r0, [r4, #4]
 8009268:	6863      	ldr	r3, [r4, #4]
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	2300      	movs	r3, #0
 800926e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009272:	e7a7      	b.n	80091c4 <_printf_i+0x118>
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	462a      	mov	r2, r5
 8009278:	4639      	mov	r1, r7
 800927a:	4630      	mov	r0, r6
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d0aa      	beq.n	80091d8 <_printf_i+0x12c>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	079b      	lsls	r3, r3, #30
 8009286:	d413      	bmi.n	80092b0 <_printf_i+0x204>
 8009288:	68e0      	ldr	r0, [r4, #12]
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	4298      	cmp	r0, r3
 800928e:	bfb8      	it	lt
 8009290:	4618      	movlt	r0, r3
 8009292:	e7a3      	b.n	80091dc <_printf_i+0x130>
 8009294:	2301      	movs	r3, #1
 8009296:	464a      	mov	r2, r9
 8009298:	4639      	mov	r1, r7
 800929a:	4630      	mov	r0, r6
 800929c:	47c0      	blx	r8
 800929e:	3001      	adds	r0, #1
 80092a0:	d09a      	beq.n	80091d8 <_printf_i+0x12c>
 80092a2:	3501      	adds	r5, #1
 80092a4:	68e3      	ldr	r3, [r4, #12]
 80092a6:	9a03      	ldr	r2, [sp, #12]
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	42ab      	cmp	r3, r5
 80092ac:	dcf2      	bgt.n	8009294 <_printf_i+0x1e8>
 80092ae:	e7eb      	b.n	8009288 <_printf_i+0x1dc>
 80092b0:	2500      	movs	r5, #0
 80092b2:	f104 0919 	add.w	r9, r4, #25
 80092b6:	e7f5      	b.n	80092a4 <_printf_i+0x1f8>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1ac      	bne.n	8009216 <_printf_i+0x16a>
 80092bc:	7803      	ldrb	r3, [r0, #0]
 80092be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c6:	e76c      	b.n	80091a2 <_printf_i+0xf6>
 80092c8:	0801e85a 	.word	0x0801e85a
 80092cc:	0801e86b 	.word	0x0801e86b

080092d0 <_vsiprintf_r>:
 80092d0:	b500      	push	{lr}
 80092d2:	b09b      	sub	sp, #108	; 0x6c
 80092d4:	9100      	str	r1, [sp, #0]
 80092d6:	9104      	str	r1, [sp, #16]
 80092d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092dc:	9105      	str	r1, [sp, #20]
 80092de:	9102      	str	r1, [sp, #8]
 80092e0:	4905      	ldr	r1, [pc, #20]	; (80092f8 <_vsiprintf_r+0x28>)
 80092e2:	9103      	str	r1, [sp, #12]
 80092e4:	4669      	mov	r1, sp
 80092e6:	f001 fa63 	bl	800a7b0 <_svfiprintf_r>
 80092ea:	9b00      	ldr	r3, [sp, #0]
 80092ec:	2200      	movs	r2, #0
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	b01b      	add	sp, #108	; 0x6c
 80092f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80092f6:	bf00      	nop
 80092f8:	ffff0208 	.word	0xffff0208

080092fc <vsiprintf>:
 80092fc:	4613      	mov	r3, r2
 80092fe:	460a      	mov	r2, r1
 8009300:	4601      	mov	r1, r0
 8009302:	4802      	ldr	r0, [pc, #8]	; (800930c <vsiprintf+0x10>)
 8009304:	6800      	ldr	r0, [r0, #0]
 8009306:	f7ff bfe3 	b.w	80092d0 <_vsiprintf_r>
 800930a:	bf00      	nop
 800930c:	20000044 	.word	0x20000044

08009310 <quorem>:
 8009310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	6903      	ldr	r3, [r0, #16]
 8009316:	690c      	ldr	r4, [r1, #16]
 8009318:	42a3      	cmp	r3, r4
 800931a:	4680      	mov	r8, r0
 800931c:	f2c0 8082 	blt.w	8009424 <quorem+0x114>
 8009320:	3c01      	subs	r4, #1
 8009322:	f101 0714 	add.w	r7, r1, #20
 8009326:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800932a:	f100 0614 	add.w	r6, r0, #20
 800932e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009332:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009336:	eb06 030c 	add.w	r3, r6, ip
 800933a:	3501      	adds	r5, #1
 800933c:	eb07 090c 	add.w	r9, r7, ip
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	fbb0 f5f5 	udiv	r5, r0, r5
 8009346:	b395      	cbz	r5, 80093ae <quorem+0x9e>
 8009348:	f04f 0a00 	mov.w	sl, #0
 800934c:	4638      	mov	r0, r7
 800934e:	46b6      	mov	lr, r6
 8009350:	46d3      	mov	fp, sl
 8009352:	f850 2b04 	ldr.w	r2, [r0], #4
 8009356:	b293      	uxth	r3, r2
 8009358:	fb05 a303 	mla	r3, r5, r3, sl
 800935c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009360:	b29b      	uxth	r3, r3
 8009362:	ebab 0303 	sub.w	r3, fp, r3
 8009366:	0c12      	lsrs	r2, r2, #16
 8009368:	f8de b000 	ldr.w	fp, [lr]
 800936c:	fb05 a202 	mla	r2, r5, r2, sl
 8009370:	fa13 f38b 	uxtah	r3, r3, fp
 8009374:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009378:	fa1f fb82 	uxth.w	fp, r2
 800937c:	f8de 2000 	ldr.w	r2, [lr]
 8009380:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009388:	b29b      	uxth	r3, r3
 800938a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800938e:	4581      	cmp	r9, r0
 8009390:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009394:	f84e 3b04 	str.w	r3, [lr], #4
 8009398:	d2db      	bcs.n	8009352 <quorem+0x42>
 800939a:	f856 300c 	ldr.w	r3, [r6, ip]
 800939e:	b933      	cbnz	r3, 80093ae <quorem+0x9e>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	3b04      	subs	r3, #4
 80093a4:	429e      	cmp	r6, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	d330      	bcc.n	800940c <quorem+0xfc>
 80093aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80093ae:	4640      	mov	r0, r8
 80093b0:	f001 f828 	bl	800a404 <__mcmp>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	db25      	blt.n	8009404 <quorem+0xf4>
 80093b8:	3501      	adds	r5, #1
 80093ba:	4630      	mov	r0, r6
 80093bc:	f04f 0c00 	mov.w	ip, #0
 80093c0:	f857 2b04 	ldr.w	r2, [r7], #4
 80093c4:	f8d0 e000 	ldr.w	lr, [r0]
 80093c8:	b293      	uxth	r3, r2
 80093ca:	ebac 0303 	sub.w	r3, ip, r3
 80093ce:	0c12      	lsrs	r2, r2, #16
 80093d0:	fa13 f38e 	uxtah	r3, r3, lr
 80093d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093dc:	b29b      	uxth	r3, r3
 80093de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e2:	45b9      	cmp	r9, r7
 80093e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093e8:	f840 3b04 	str.w	r3, [r0], #4
 80093ec:	d2e8      	bcs.n	80093c0 <quorem+0xb0>
 80093ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80093f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80093f6:	b92a      	cbnz	r2, 8009404 <quorem+0xf4>
 80093f8:	3b04      	subs	r3, #4
 80093fa:	429e      	cmp	r6, r3
 80093fc:	461a      	mov	r2, r3
 80093fe:	d30b      	bcc.n	8009418 <quorem+0x108>
 8009400:	f8c8 4010 	str.w	r4, [r8, #16]
 8009404:	4628      	mov	r0, r5
 8009406:	b003      	add	sp, #12
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	6812      	ldr	r2, [r2, #0]
 800940e:	3b04      	subs	r3, #4
 8009410:	2a00      	cmp	r2, #0
 8009412:	d1ca      	bne.n	80093aa <quorem+0x9a>
 8009414:	3c01      	subs	r4, #1
 8009416:	e7c5      	b.n	80093a4 <quorem+0x94>
 8009418:	6812      	ldr	r2, [r2, #0]
 800941a:	3b04      	subs	r3, #4
 800941c:	2a00      	cmp	r2, #0
 800941e:	d1ef      	bne.n	8009400 <quorem+0xf0>
 8009420:	3c01      	subs	r4, #1
 8009422:	e7ea      	b.n	80093fa <quorem+0xea>
 8009424:	2000      	movs	r0, #0
 8009426:	e7ee      	b.n	8009406 <quorem+0xf6>

08009428 <_dtoa_r>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ec57 6b10 	vmov	r6, r7, d0
 8009430:	b097      	sub	sp, #92	; 0x5c
 8009432:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009434:	9106      	str	r1, [sp, #24]
 8009436:	4604      	mov	r4, r0
 8009438:	920b      	str	r2, [sp, #44]	; 0x2c
 800943a:	9312      	str	r3, [sp, #72]	; 0x48
 800943c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009440:	e9cd 6700 	strd	r6, r7, [sp]
 8009444:	b93d      	cbnz	r5, 8009456 <_dtoa_r+0x2e>
 8009446:	2010      	movs	r0, #16
 8009448:	f000 fdb4 	bl	8009fb4 <malloc>
 800944c:	6260      	str	r0, [r4, #36]	; 0x24
 800944e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009452:	6005      	str	r5, [r0, #0]
 8009454:	60c5      	str	r5, [r0, #12]
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	6819      	ldr	r1, [r3, #0]
 800945a:	b151      	cbz	r1, 8009472 <_dtoa_r+0x4a>
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	604a      	str	r2, [r1, #4]
 8009460:	2301      	movs	r3, #1
 8009462:	4093      	lsls	r3, r2
 8009464:	608b      	str	r3, [r1, #8]
 8009466:	4620      	mov	r0, r4
 8009468:	f000 fdeb 	bl	800a042 <_Bfree>
 800946c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	1e3b      	subs	r3, r7, #0
 8009474:	bfbb      	ittet	lt
 8009476:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800947a:	9301      	strlt	r3, [sp, #4]
 800947c:	2300      	movge	r3, #0
 800947e:	2201      	movlt	r2, #1
 8009480:	bfac      	ite	ge
 8009482:	f8c8 3000 	strge.w	r3, [r8]
 8009486:	f8c8 2000 	strlt.w	r2, [r8]
 800948a:	4baf      	ldr	r3, [pc, #700]	; (8009748 <_dtoa_r+0x320>)
 800948c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009490:	ea33 0308 	bics.w	r3, r3, r8
 8009494:	d114      	bne.n	80094c0 <_dtoa_r+0x98>
 8009496:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009498:	f242 730f 	movw	r3, #9999	; 0x270f
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	b923      	cbnz	r3, 80094ac <_dtoa_r+0x84>
 80094a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f000 8542 	beq.w	8009f30 <_dtoa_r+0xb08>
 80094ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800975c <_dtoa_r+0x334>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 8544 	beq.w	8009f40 <_dtoa_r+0xb18>
 80094b8:	f10b 0303 	add.w	r3, fp, #3
 80094bc:	f000 bd3e 	b.w	8009f3c <_dtoa_r+0xb14>
 80094c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094c4:	2200      	movs	r2, #0
 80094c6:	2300      	movs	r3, #0
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 fb1c 	bl	8000b08 <__aeabi_dcmpeq>
 80094d0:	4681      	mov	r9, r0
 80094d2:	b168      	cbz	r0, 80094f0 <_dtoa_r+0xc8>
 80094d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094d6:	2301      	movs	r3, #1
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 8524 	beq.w	8009f2a <_dtoa_r+0xb02>
 80094e2:	4b9a      	ldr	r3, [pc, #616]	; (800974c <_dtoa_r+0x324>)
 80094e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	f000 bd28 	b.w	8009f40 <_dtoa_r+0xb18>
 80094f0:	aa14      	add	r2, sp, #80	; 0x50
 80094f2:	a915      	add	r1, sp, #84	; 0x54
 80094f4:	ec47 6b10 	vmov	d0, r6, r7
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fffa 	bl	800a4f2 <__d2b>
 80094fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009502:	9004      	str	r0, [sp, #16]
 8009504:	2d00      	cmp	r5, #0
 8009506:	d07c      	beq.n	8009602 <_dtoa_r+0x1da>
 8009508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800950c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009510:	46b2      	mov	sl, r6
 8009512:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800951a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800951e:	2200      	movs	r2, #0
 8009520:	4b8b      	ldr	r3, [pc, #556]	; (8009750 <_dtoa_r+0x328>)
 8009522:	4650      	mov	r0, sl
 8009524:	4659      	mov	r1, fp
 8009526:	f7f6 fecf 	bl	80002c8 <__aeabi_dsub>
 800952a:	a381      	add	r3, pc, #516	; (adr r3, 8009730 <_dtoa_r+0x308>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f7f7 f882 	bl	8000638 <__aeabi_dmul>
 8009534:	a380      	add	r3, pc, #512	; (adr r3, 8009738 <_dtoa_r+0x310>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f6 fec7 	bl	80002cc <__adddf3>
 800953e:	4606      	mov	r6, r0
 8009540:	4628      	mov	r0, r5
 8009542:	460f      	mov	r7, r1
 8009544:	f7f7 f80e 	bl	8000564 <__aeabi_i2d>
 8009548:	a37d      	add	r3, pc, #500	; (adr r3, 8009740 <_dtoa_r+0x318>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f7 f873 	bl	8000638 <__aeabi_dmul>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4630      	mov	r0, r6
 8009558:	4639      	mov	r1, r7
 800955a:	f7f6 feb7 	bl	80002cc <__adddf3>
 800955e:	4606      	mov	r6, r0
 8009560:	460f      	mov	r7, r1
 8009562:	f7f7 fb19 	bl	8000b98 <__aeabi_d2iz>
 8009566:	2200      	movs	r2, #0
 8009568:	4682      	mov	sl, r0
 800956a:	2300      	movs	r3, #0
 800956c:	4630      	mov	r0, r6
 800956e:	4639      	mov	r1, r7
 8009570:	f7f7 fad4 	bl	8000b1c <__aeabi_dcmplt>
 8009574:	b148      	cbz	r0, 800958a <_dtoa_r+0x162>
 8009576:	4650      	mov	r0, sl
 8009578:	f7f6 fff4 	bl	8000564 <__aeabi_i2d>
 800957c:	4632      	mov	r2, r6
 800957e:	463b      	mov	r3, r7
 8009580:	f7f7 fac2 	bl	8000b08 <__aeabi_dcmpeq>
 8009584:	b908      	cbnz	r0, 800958a <_dtoa_r+0x162>
 8009586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800958a:	f1ba 0f16 	cmp.w	sl, #22
 800958e:	d859      	bhi.n	8009644 <_dtoa_r+0x21c>
 8009590:	4970      	ldr	r1, [pc, #448]	; (8009754 <_dtoa_r+0x32c>)
 8009592:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800959a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800959e:	f7f7 fadb 	bl	8000b58 <__aeabi_dcmpgt>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d050      	beq.n	8009648 <_dtoa_r+0x220>
 80095a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095aa:	2300      	movs	r3, #0
 80095ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80095ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095b0:	1b5d      	subs	r5, r3, r5
 80095b2:	f1b5 0801 	subs.w	r8, r5, #1
 80095b6:	bf49      	itett	mi
 80095b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80095bc:	2300      	movpl	r3, #0
 80095be:	9305      	strmi	r3, [sp, #20]
 80095c0:	f04f 0800 	movmi.w	r8, #0
 80095c4:	bf58      	it	pl
 80095c6:	9305      	strpl	r3, [sp, #20]
 80095c8:	f1ba 0f00 	cmp.w	sl, #0
 80095cc:	db3e      	blt.n	800964c <_dtoa_r+0x224>
 80095ce:	2300      	movs	r3, #0
 80095d0:	44d0      	add	r8, sl
 80095d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80095d6:	9307      	str	r3, [sp, #28]
 80095d8:	9b06      	ldr	r3, [sp, #24]
 80095da:	2b09      	cmp	r3, #9
 80095dc:	f200 8090 	bhi.w	8009700 <_dtoa_r+0x2d8>
 80095e0:	2b05      	cmp	r3, #5
 80095e2:	bfc4      	itt	gt
 80095e4:	3b04      	subgt	r3, #4
 80095e6:	9306      	strgt	r3, [sp, #24]
 80095e8:	9b06      	ldr	r3, [sp, #24]
 80095ea:	f1a3 0302 	sub.w	r3, r3, #2
 80095ee:	bfcc      	ite	gt
 80095f0:	2500      	movgt	r5, #0
 80095f2:	2501      	movle	r5, #1
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	f200 808f 	bhi.w	8009718 <_dtoa_r+0x2f0>
 80095fa:	e8df f003 	tbb	[pc, r3]
 80095fe:	7f7d      	.short	0x7f7d
 8009600:	7131      	.short	0x7131
 8009602:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009606:	441d      	add	r5, r3
 8009608:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800960c:	2820      	cmp	r0, #32
 800960e:	dd13      	ble.n	8009638 <_dtoa_r+0x210>
 8009610:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	fa08 f800 	lsl.w	r8, r8, r0
 800961a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800961e:	fa23 f000 	lsr.w	r0, r3, r0
 8009622:	ea48 0000 	orr.w	r0, r8, r0
 8009626:	f7f6 ff8d 	bl	8000544 <__aeabi_ui2d>
 800962a:	2301      	movs	r3, #1
 800962c:	4682      	mov	sl, r0
 800962e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009632:	3d01      	subs	r5, #1
 8009634:	9313      	str	r3, [sp, #76]	; 0x4c
 8009636:	e772      	b.n	800951e <_dtoa_r+0xf6>
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	f1c0 0020 	rsb	r0, r0, #32
 800963e:	fa03 f000 	lsl.w	r0, r3, r0
 8009642:	e7f0      	b.n	8009626 <_dtoa_r+0x1fe>
 8009644:	2301      	movs	r3, #1
 8009646:	e7b1      	b.n	80095ac <_dtoa_r+0x184>
 8009648:	900f      	str	r0, [sp, #60]	; 0x3c
 800964a:	e7b0      	b.n	80095ae <_dtoa_r+0x186>
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	eba3 030a 	sub.w	r3, r3, sl
 8009652:	9305      	str	r3, [sp, #20]
 8009654:	f1ca 0300 	rsb	r3, sl, #0
 8009658:	9307      	str	r3, [sp, #28]
 800965a:	2300      	movs	r3, #0
 800965c:	930e      	str	r3, [sp, #56]	; 0x38
 800965e:	e7bb      	b.n	80095d8 <_dtoa_r+0x1b0>
 8009660:	2301      	movs	r3, #1
 8009662:	930a      	str	r3, [sp, #40]	; 0x28
 8009664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009666:	2b00      	cmp	r3, #0
 8009668:	dd59      	ble.n	800971e <_dtoa_r+0x2f6>
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	4699      	mov	r9, r3
 800966e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009670:	2200      	movs	r2, #0
 8009672:	6072      	str	r2, [r6, #4]
 8009674:	2204      	movs	r2, #4
 8009676:	f102 0014 	add.w	r0, r2, #20
 800967a:	4298      	cmp	r0, r3
 800967c:	6871      	ldr	r1, [r6, #4]
 800967e:	d953      	bls.n	8009728 <_dtoa_r+0x300>
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fcaa 	bl	8009fda <_Balloc>
 8009686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009688:	6030      	str	r0, [r6, #0]
 800968a:	f1b9 0f0e 	cmp.w	r9, #14
 800968e:	f8d3 b000 	ldr.w	fp, [r3]
 8009692:	f200 80e6 	bhi.w	8009862 <_dtoa_r+0x43a>
 8009696:	2d00      	cmp	r5, #0
 8009698:	f000 80e3 	beq.w	8009862 <_dtoa_r+0x43a>
 800969c:	ed9d 7b00 	vldr	d7, [sp]
 80096a0:	f1ba 0f00 	cmp.w	sl, #0
 80096a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80096a8:	dd74      	ble.n	8009794 <_dtoa_r+0x36c>
 80096aa:	4a2a      	ldr	r2, [pc, #168]	; (8009754 <_dtoa_r+0x32c>)
 80096ac:	f00a 030f 	and.w	r3, sl, #15
 80096b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096b4:	ed93 7b00 	vldr	d7, [r3]
 80096b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80096bc:	06f0      	lsls	r0, r6, #27
 80096be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80096c2:	d565      	bpl.n	8009790 <_dtoa_r+0x368>
 80096c4:	4b24      	ldr	r3, [pc, #144]	; (8009758 <_dtoa_r+0x330>)
 80096c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096ce:	f7f7 f8dd 	bl	800088c <__aeabi_ddiv>
 80096d2:	e9cd 0100 	strd	r0, r1, [sp]
 80096d6:	f006 060f 	and.w	r6, r6, #15
 80096da:	2503      	movs	r5, #3
 80096dc:	4f1e      	ldr	r7, [pc, #120]	; (8009758 <_dtoa_r+0x330>)
 80096de:	e04c      	b.n	800977a <_dtoa_r+0x352>
 80096e0:	2301      	movs	r3, #1
 80096e2:	930a      	str	r3, [sp, #40]	; 0x28
 80096e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e6:	4453      	add	r3, sl
 80096e8:	f103 0901 	add.w	r9, r3, #1
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	464b      	mov	r3, r9
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	bfb8      	it	lt
 80096f4:	2301      	movlt	r3, #1
 80096f6:	e7ba      	b.n	800966e <_dtoa_r+0x246>
 80096f8:	2300      	movs	r3, #0
 80096fa:	e7b2      	b.n	8009662 <_dtoa_r+0x23a>
 80096fc:	2300      	movs	r3, #0
 80096fe:	e7f0      	b.n	80096e2 <_dtoa_r+0x2ba>
 8009700:	2501      	movs	r5, #1
 8009702:	2300      	movs	r3, #0
 8009704:	9306      	str	r3, [sp, #24]
 8009706:	950a      	str	r5, [sp, #40]	; 0x28
 8009708:	f04f 33ff 	mov.w	r3, #4294967295
 800970c:	9302      	str	r3, [sp, #8]
 800970e:	4699      	mov	r9, r3
 8009710:	2200      	movs	r2, #0
 8009712:	2312      	movs	r3, #18
 8009714:	920b      	str	r2, [sp, #44]	; 0x2c
 8009716:	e7aa      	b.n	800966e <_dtoa_r+0x246>
 8009718:	2301      	movs	r3, #1
 800971a:	930a      	str	r3, [sp, #40]	; 0x28
 800971c:	e7f4      	b.n	8009708 <_dtoa_r+0x2e0>
 800971e:	2301      	movs	r3, #1
 8009720:	9302      	str	r3, [sp, #8]
 8009722:	4699      	mov	r9, r3
 8009724:	461a      	mov	r2, r3
 8009726:	e7f5      	b.n	8009714 <_dtoa_r+0x2ec>
 8009728:	3101      	adds	r1, #1
 800972a:	6071      	str	r1, [r6, #4]
 800972c:	0052      	lsls	r2, r2, #1
 800972e:	e7a2      	b.n	8009676 <_dtoa_r+0x24e>
 8009730:	636f4361 	.word	0x636f4361
 8009734:	3fd287a7 	.word	0x3fd287a7
 8009738:	8b60c8b3 	.word	0x8b60c8b3
 800973c:	3fc68a28 	.word	0x3fc68a28
 8009740:	509f79fb 	.word	0x509f79fb
 8009744:	3fd34413 	.word	0x3fd34413
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	0801e859 	.word	0x0801e859
 8009750:	3ff80000 	.word	0x3ff80000
 8009754:	0801e918 	.word	0x0801e918
 8009758:	0801e8f0 	.word	0x0801e8f0
 800975c:	0801e885 	.word	0x0801e885
 8009760:	07f1      	lsls	r1, r6, #31
 8009762:	d508      	bpl.n	8009776 <_dtoa_r+0x34e>
 8009764:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976c:	f7f6 ff64 	bl	8000638 <__aeabi_dmul>
 8009770:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009774:	3501      	adds	r5, #1
 8009776:	1076      	asrs	r6, r6, #1
 8009778:	3708      	adds	r7, #8
 800977a:	2e00      	cmp	r6, #0
 800977c:	d1f0      	bne.n	8009760 <_dtoa_r+0x338>
 800977e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009786:	f7f7 f881 	bl	800088c <__aeabi_ddiv>
 800978a:	e9cd 0100 	strd	r0, r1, [sp]
 800978e:	e01a      	b.n	80097c6 <_dtoa_r+0x39e>
 8009790:	2502      	movs	r5, #2
 8009792:	e7a3      	b.n	80096dc <_dtoa_r+0x2b4>
 8009794:	f000 80a0 	beq.w	80098d8 <_dtoa_r+0x4b0>
 8009798:	f1ca 0600 	rsb	r6, sl, #0
 800979c:	4b9f      	ldr	r3, [pc, #636]	; (8009a1c <_dtoa_r+0x5f4>)
 800979e:	4fa0      	ldr	r7, [pc, #640]	; (8009a20 <_dtoa_r+0x5f8>)
 80097a0:	f006 020f 	and.w	r2, r6, #15
 80097a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097b0:	f7f6 ff42 	bl	8000638 <__aeabi_dmul>
 80097b4:	e9cd 0100 	strd	r0, r1, [sp]
 80097b8:	1136      	asrs	r6, r6, #4
 80097ba:	2300      	movs	r3, #0
 80097bc:	2502      	movs	r5, #2
 80097be:	2e00      	cmp	r6, #0
 80097c0:	d17f      	bne.n	80098c2 <_dtoa_r+0x49a>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e1      	bne.n	800978a <_dtoa_r+0x362>
 80097c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8087 	beq.w	80098dc <_dtoa_r+0x4b4>
 80097ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097d2:	2200      	movs	r2, #0
 80097d4:	4b93      	ldr	r3, [pc, #588]	; (8009a24 <_dtoa_r+0x5fc>)
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f7 f99f 	bl	8000b1c <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d07c      	beq.n	80098dc <_dtoa_r+0x4b4>
 80097e2:	f1b9 0f00 	cmp.w	r9, #0
 80097e6:	d079      	beq.n	80098dc <_dtoa_r+0x4b4>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dd35      	ble.n	800985a <_dtoa_r+0x432>
 80097ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	4639      	mov	r1, r7
 80097f6:	2200      	movs	r2, #0
 80097f8:	4b8b      	ldr	r3, [pc, #556]	; (8009a28 <_dtoa_r+0x600>)
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7f6 ff1c 	bl	8000638 <__aeabi_dmul>
 8009800:	e9cd 0100 	strd	r0, r1, [sp]
 8009804:	9f02      	ldr	r7, [sp, #8]
 8009806:	3501      	adds	r5, #1
 8009808:	4628      	mov	r0, r5
 800980a:	f7f6 feab 	bl	8000564 <__aeabi_i2d>
 800980e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009812:	f7f6 ff11 	bl	8000638 <__aeabi_dmul>
 8009816:	2200      	movs	r2, #0
 8009818:	4b84      	ldr	r3, [pc, #528]	; (8009a2c <_dtoa_r+0x604>)
 800981a:	f7f6 fd57 	bl	80002cc <__adddf3>
 800981e:	4605      	mov	r5, r0
 8009820:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009824:	2f00      	cmp	r7, #0
 8009826:	d15d      	bne.n	80098e4 <_dtoa_r+0x4bc>
 8009828:	2200      	movs	r2, #0
 800982a:	4b81      	ldr	r3, [pc, #516]	; (8009a30 <_dtoa_r+0x608>)
 800982c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009830:	f7f6 fd4a 	bl	80002c8 <__aeabi_dsub>
 8009834:	462a      	mov	r2, r5
 8009836:	4633      	mov	r3, r6
 8009838:	e9cd 0100 	strd	r0, r1, [sp]
 800983c:	f7f7 f98c 	bl	8000b58 <__aeabi_dcmpgt>
 8009840:	2800      	cmp	r0, #0
 8009842:	f040 8288 	bne.w	8009d56 <_dtoa_r+0x92e>
 8009846:	462a      	mov	r2, r5
 8009848:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800984c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009850:	f7f7 f964 	bl	8000b1c <__aeabi_dcmplt>
 8009854:	2800      	cmp	r0, #0
 8009856:	f040 827c 	bne.w	8009d52 <_dtoa_r+0x92a>
 800985a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800985e:	e9cd 2300 	strd	r2, r3, [sp]
 8009862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009864:	2b00      	cmp	r3, #0
 8009866:	f2c0 8150 	blt.w	8009b0a <_dtoa_r+0x6e2>
 800986a:	f1ba 0f0e 	cmp.w	sl, #14
 800986e:	f300 814c 	bgt.w	8009b0a <_dtoa_r+0x6e2>
 8009872:	4b6a      	ldr	r3, [pc, #424]	; (8009a1c <_dtoa_r+0x5f4>)
 8009874:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009878:	ed93 7b00 	vldr	d7, [r3]
 800987c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800987e:	2b00      	cmp	r3, #0
 8009880:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009884:	f280 80d8 	bge.w	8009a38 <_dtoa_r+0x610>
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	f300 80d4 	bgt.w	8009a38 <_dtoa_r+0x610>
 8009890:	f040 825e 	bne.w	8009d50 <_dtoa_r+0x928>
 8009894:	2200      	movs	r2, #0
 8009896:	4b66      	ldr	r3, [pc, #408]	; (8009a30 <_dtoa_r+0x608>)
 8009898:	ec51 0b17 	vmov	r0, r1, d7
 800989c:	f7f6 fecc 	bl	8000638 <__aeabi_dmul>
 80098a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098a4:	f7f7 f94e 	bl	8000b44 <__aeabi_dcmpge>
 80098a8:	464f      	mov	r7, r9
 80098aa:	464e      	mov	r6, r9
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f040 8234 	bne.w	8009d1a <_dtoa_r+0x8f2>
 80098b2:	2331      	movs	r3, #49	; 0x31
 80098b4:	f10b 0501 	add.w	r5, fp, #1
 80098b8:	f88b 3000 	strb.w	r3, [fp]
 80098bc:	f10a 0a01 	add.w	sl, sl, #1
 80098c0:	e22f      	b.n	8009d22 <_dtoa_r+0x8fa>
 80098c2:	07f2      	lsls	r2, r6, #31
 80098c4:	d505      	bpl.n	80098d2 <_dtoa_r+0x4aa>
 80098c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ca:	f7f6 feb5 	bl	8000638 <__aeabi_dmul>
 80098ce:	3501      	adds	r5, #1
 80098d0:	2301      	movs	r3, #1
 80098d2:	1076      	asrs	r6, r6, #1
 80098d4:	3708      	adds	r7, #8
 80098d6:	e772      	b.n	80097be <_dtoa_r+0x396>
 80098d8:	2502      	movs	r5, #2
 80098da:	e774      	b.n	80097c6 <_dtoa_r+0x39e>
 80098dc:	f8cd a020 	str.w	sl, [sp, #32]
 80098e0:	464f      	mov	r7, r9
 80098e2:	e791      	b.n	8009808 <_dtoa_r+0x3e0>
 80098e4:	4b4d      	ldr	r3, [pc, #308]	; (8009a1c <_dtoa_r+0x5f4>)
 80098e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80098ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d047      	beq.n	8009984 <_dtoa_r+0x55c>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	2000      	movs	r0, #0
 80098fa:	494e      	ldr	r1, [pc, #312]	; (8009a34 <_dtoa_r+0x60c>)
 80098fc:	f7f6 ffc6 	bl	800088c <__aeabi_ddiv>
 8009900:	462a      	mov	r2, r5
 8009902:	4633      	mov	r3, r6
 8009904:	f7f6 fce0 	bl	80002c8 <__aeabi_dsub>
 8009908:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800990c:	465d      	mov	r5, fp
 800990e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009912:	f7f7 f941 	bl	8000b98 <__aeabi_d2iz>
 8009916:	4606      	mov	r6, r0
 8009918:	f7f6 fe24 	bl	8000564 <__aeabi_i2d>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009924:	f7f6 fcd0 	bl	80002c8 <__aeabi_dsub>
 8009928:	3630      	adds	r6, #48	; 0x30
 800992a:	f805 6b01 	strb.w	r6, [r5], #1
 800992e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009932:	e9cd 0100 	strd	r0, r1, [sp]
 8009936:	f7f7 f8f1 	bl	8000b1c <__aeabi_dcmplt>
 800993a:	2800      	cmp	r0, #0
 800993c:	d163      	bne.n	8009a06 <_dtoa_r+0x5de>
 800993e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009942:	2000      	movs	r0, #0
 8009944:	4937      	ldr	r1, [pc, #220]	; (8009a24 <_dtoa_r+0x5fc>)
 8009946:	f7f6 fcbf 	bl	80002c8 <__aeabi_dsub>
 800994a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800994e:	f7f7 f8e5 	bl	8000b1c <__aeabi_dcmplt>
 8009952:	2800      	cmp	r0, #0
 8009954:	f040 80b7 	bne.w	8009ac6 <_dtoa_r+0x69e>
 8009958:	eba5 030b 	sub.w	r3, r5, fp
 800995c:	429f      	cmp	r7, r3
 800995e:	f77f af7c 	ble.w	800985a <_dtoa_r+0x432>
 8009962:	2200      	movs	r2, #0
 8009964:	4b30      	ldr	r3, [pc, #192]	; (8009a28 <_dtoa_r+0x600>)
 8009966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800996a:	f7f6 fe65 	bl	8000638 <__aeabi_dmul>
 800996e:	2200      	movs	r2, #0
 8009970:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009974:	4b2c      	ldr	r3, [pc, #176]	; (8009a28 <_dtoa_r+0x600>)
 8009976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800997a:	f7f6 fe5d 	bl	8000638 <__aeabi_dmul>
 800997e:	e9cd 0100 	strd	r0, r1, [sp]
 8009982:	e7c4      	b.n	800990e <_dtoa_r+0x4e6>
 8009984:	462a      	mov	r2, r5
 8009986:	4633      	mov	r3, r6
 8009988:	f7f6 fe56 	bl	8000638 <__aeabi_dmul>
 800998c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009990:	eb0b 0507 	add.w	r5, fp, r7
 8009994:	465e      	mov	r6, fp
 8009996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800999a:	f7f7 f8fd 	bl	8000b98 <__aeabi_d2iz>
 800999e:	4607      	mov	r7, r0
 80099a0:	f7f6 fde0 	bl	8000564 <__aeabi_i2d>
 80099a4:	3730      	adds	r7, #48	; 0x30
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ae:	f7f6 fc8b 	bl	80002c8 <__aeabi_dsub>
 80099b2:	f806 7b01 	strb.w	r7, [r6], #1
 80099b6:	42ae      	cmp	r6, r5
 80099b8:	e9cd 0100 	strd	r0, r1, [sp]
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	d126      	bne.n	8009a10 <_dtoa_r+0x5e8>
 80099c2:	4b1c      	ldr	r3, [pc, #112]	; (8009a34 <_dtoa_r+0x60c>)
 80099c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099c8:	f7f6 fc80 	bl	80002cc <__adddf3>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099d4:	f7f7 f8c0 	bl	8000b58 <__aeabi_dcmpgt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d174      	bne.n	8009ac6 <_dtoa_r+0x69e>
 80099dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099e0:	2000      	movs	r0, #0
 80099e2:	4914      	ldr	r1, [pc, #80]	; (8009a34 <_dtoa_r+0x60c>)
 80099e4:	f7f6 fc70 	bl	80002c8 <__aeabi_dsub>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099f0:	f7f7 f894 	bl	8000b1c <__aeabi_dcmplt>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	f43f af30 	beq.w	800985a <_dtoa_r+0x432>
 80099fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099fe:	2b30      	cmp	r3, #48	; 0x30
 8009a00:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a04:	d002      	beq.n	8009a0c <_dtoa_r+0x5e4>
 8009a06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009a0a:	e04a      	b.n	8009aa2 <_dtoa_r+0x67a>
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	e7f4      	b.n	80099fa <_dtoa_r+0x5d2>
 8009a10:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <_dtoa_r+0x600>)
 8009a12:	f7f6 fe11 	bl	8000638 <__aeabi_dmul>
 8009a16:	e9cd 0100 	strd	r0, r1, [sp]
 8009a1a:	e7bc      	b.n	8009996 <_dtoa_r+0x56e>
 8009a1c:	0801e918 	.word	0x0801e918
 8009a20:	0801e8f0 	.word	0x0801e8f0
 8009a24:	3ff00000 	.word	0x3ff00000
 8009a28:	40240000 	.word	0x40240000
 8009a2c:	401c0000 	.word	0x401c0000
 8009a30:	40140000 	.word	0x40140000
 8009a34:	3fe00000 	.word	0x3fe00000
 8009a38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a3c:	465d      	mov	r5, fp
 8009a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a42:	4630      	mov	r0, r6
 8009a44:	4639      	mov	r1, r7
 8009a46:	f7f6 ff21 	bl	800088c <__aeabi_ddiv>
 8009a4a:	f7f7 f8a5 	bl	8000b98 <__aeabi_d2iz>
 8009a4e:	4680      	mov	r8, r0
 8009a50:	f7f6 fd88 	bl	8000564 <__aeabi_i2d>
 8009a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a58:	f7f6 fdee 	bl	8000638 <__aeabi_dmul>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009a68:	f7f6 fc2e 	bl	80002c8 <__aeabi_dsub>
 8009a6c:	f805 6b01 	strb.w	r6, [r5], #1
 8009a70:	eba5 060b 	sub.w	r6, r5, fp
 8009a74:	45b1      	cmp	r9, r6
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	d139      	bne.n	8009af0 <_dtoa_r+0x6c8>
 8009a7c:	f7f6 fc26 	bl	80002cc <__adddf3>
 8009a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	f7f7 f866 	bl	8000b58 <__aeabi_dcmpgt>
 8009a8c:	b9c8      	cbnz	r0, 8009ac2 <_dtoa_r+0x69a>
 8009a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a92:	4630      	mov	r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f7 f837 	bl	8000b08 <__aeabi_dcmpeq>
 8009a9a:	b110      	cbz	r0, 8009aa2 <_dtoa_r+0x67a>
 8009a9c:	f018 0f01 	tst.w	r8, #1
 8009aa0:	d10f      	bne.n	8009ac2 <_dtoa_r+0x69a>
 8009aa2:	9904      	ldr	r1, [sp, #16]
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 facc 	bl	800a042 <_Bfree>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aae:	702b      	strb	r3, [r5, #0]
 8009ab0:	f10a 0301 	add.w	r3, sl, #1
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8241 	beq.w	8009f40 <_dtoa_r+0xb18>
 8009abe:	601d      	str	r5, [r3, #0]
 8009ac0:	e23e      	b.n	8009f40 <_dtoa_r+0xb18>
 8009ac2:	f8cd a020 	str.w	sl, [sp, #32]
 8009ac6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009aca:	2a39      	cmp	r2, #57	; 0x39
 8009acc:	f105 33ff 	add.w	r3, r5, #4294967295
 8009ad0:	d108      	bne.n	8009ae4 <_dtoa_r+0x6bc>
 8009ad2:	459b      	cmp	fp, r3
 8009ad4:	d10a      	bne.n	8009aec <_dtoa_r+0x6c4>
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	9308      	str	r3, [sp, #32]
 8009adc:	2330      	movs	r3, #48	; 0x30
 8009ade:	f88b 3000 	strb.w	r3, [fp]
 8009ae2:	465b      	mov	r3, fp
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	e78c      	b.n	8009a06 <_dtoa_r+0x5de>
 8009aec:	461d      	mov	r5, r3
 8009aee:	e7ea      	b.n	8009ac6 <_dtoa_r+0x69e>
 8009af0:	2200      	movs	r2, #0
 8009af2:	4b9b      	ldr	r3, [pc, #620]	; (8009d60 <_dtoa_r+0x938>)
 8009af4:	f7f6 fda0 	bl	8000638 <__aeabi_dmul>
 8009af8:	2200      	movs	r2, #0
 8009afa:	2300      	movs	r3, #0
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	f7f7 f802 	bl	8000b08 <__aeabi_dcmpeq>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d09a      	beq.n	8009a3e <_dtoa_r+0x616>
 8009b08:	e7cb      	b.n	8009aa2 <_dtoa_r+0x67a>
 8009b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	f000 808b 	beq.w	8009c28 <_dtoa_r+0x800>
 8009b12:	9a06      	ldr	r2, [sp, #24]
 8009b14:	2a01      	cmp	r2, #1
 8009b16:	dc6e      	bgt.n	8009bf6 <_dtoa_r+0x7ce>
 8009b18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d067      	beq.n	8009bee <_dtoa_r+0x7c6>
 8009b1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b22:	9f07      	ldr	r7, [sp, #28]
 8009b24:	9d05      	ldr	r5, [sp, #20]
 8009b26:	9a05      	ldr	r2, [sp, #20]
 8009b28:	2101      	movs	r1, #1
 8009b2a:	441a      	add	r2, r3
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	9205      	str	r2, [sp, #20]
 8009b30:	4498      	add	r8, r3
 8009b32:	f000 fb26 	bl	800a182 <__i2b>
 8009b36:	4606      	mov	r6, r0
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	dd0c      	ble.n	8009b56 <_dtoa_r+0x72e>
 8009b3c:	f1b8 0f00 	cmp.w	r8, #0
 8009b40:	dd09      	ble.n	8009b56 <_dtoa_r+0x72e>
 8009b42:	4545      	cmp	r5, r8
 8009b44:	9a05      	ldr	r2, [sp, #20]
 8009b46:	462b      	mov	r3, r5
 8009b48:	bfa8      	it	ge
 8009b4a:	4643      	movge	r3, r8
 8009b4c:	1ad2      	subs	r2, r2, r3
 8009b4e:	9205      	str	r2, [sp, #20]
 8009b50:	1aed      	subs	r5, r5, r3
 8009b52:	eba8 0803 	sub.w	r8, r8, r3
 8009b56:	9b07      	ldr	r3, [sp, #28]
 8009b58:	b1eb      	cbz	r3, 8009b96 <_dtoa_r+0x76e>
 8009b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d067      	beq.n	8009c30 <_dtoa_r+0x808>
 8009b60:	b18f      	cbz	r7, 8009b86 <_dtoa_r+0x75e>
 8009b62:	4631      	mov	r1, r6
 8009b64:	463a      	mov	r2, r7
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 fbaa 	bl	800a2c0 <__pow5mult>
 8009b6c:	9a04      	ldr	r2, [sp, #16]
 8009b6e:	4601      	mov	r1, r0
 8009b70:	4606      	mov	r6, r0
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fb0e 	bl	800a194 <__multiply>
 8009b78:	9904      	ldr	r1, [sp, #16]
 8009b7a:	9008      	str	r0, [sp, #32]
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fa60 	bl	800a042 <_Bfree>
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	1bda      	subs	r2, r3, r7
 8009b8a:	d004      	beq.n	8009b96 <_dtoa_r+0x76e>
 8009b8c:	9904      	ldr	r1, [sp, #16]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 fb96 	bl	800a2c0 <__pow5mult>
 8009b94:	9004      	str	r0, [sp, #16]
 8009b96:	2101      	movs	r1, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 faf2 	bl	800a182 <__i2b>
 8009b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 81d0 	beq.w	8009f48 <_dtoa_r+0xb20>
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4601      	mov	r1, r0
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 fb87 	bl	800a2c0 <__pow5mult>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	dc40      	bgt.n	8009c3c <_dtoa_r+0x814>
 8009bba:	9b00      	ldr	r3, [sp, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d139      	bne.n	8009c34 <_dtoa_r+0x80c>
 8009bc0:	9b01      	ldr	r3, [sp, #4]
 8009bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d136      	bne.n	8009c38 <_dtoa_r+0x810>
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bd0:	0d1b      	lsrs	r3, r3, #20
 8009bd2:	051b      	lsls	r3, r3, #20
 8009bd4:	b12b      	cbz	r3, 8009be2 <_dtoa_r+0x7ba>
 8009bd6:	9b05      	ldr	r3, [sp, #20]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	f108 0801 	add.w	r8, r8, #1
 8009be0:	2301      	movs	r3, #1
 8009be2:	9307      	str	r3, [sp, #28]
 8009be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d12a      	bne.n	8009c40 <_dtoa_r+0x818>
 8009bea:	2001      	movs	r0, #1
 8009bec:	e030      	b.n	8009c50 <_dtoa_r+0x828>
 8009bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bf0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bf4:	e795      	b.n	8009b22 <_dtoa_r+0x6fa>
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	f109 37ff 	add.w	r7, r9, #4294967295
 8009bfc:	42bb      	cmp	r3, r7
 8009bfe:	bfbf      	itttt	lt
 8009c00:	9b07      	ldrlt	r3, [sp, #28]
 8009c02:	9707      	strlt	r7, [sp, #28]
 8009c04:	1afa      	sublt	r2, r7, r3
 8009c06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c08:	bfbb      	ittet	lt
 8009c0a:	189b      	addlt	r3, r3, r2
 8009c0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c0e:	1bdf      	subge	r7, r3, r7
 8009c10:	2700      	movlt	r7, #0
 8009c12:	f1b9 0f00 	cmp.w	r9, #0
 8009c16:	bfb5      	itete	lt
 8009c18:	9b05      	ldrlt	r3, [sp, #20]
 8009c1a:	9d05      	ldrge	r5, [sp, #20]
 8009c1c:	eba3 0509 	sublt.w	r5, r3, r9
 8009c20:	464b      	movge	r3, r9
 8009c22:	bfb8      	it	lt
 8009c24:	2300      	movlt	r3, #0
 8009c26:	e77e      	b.n	8009b26 <_dtoa_r+0x6fe>
 8009c28:	9f07      	ldr	r7, [sp, #28]
 8009c2a:	9d05      	ldr	r5, [sp, #20]
 8009c2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c2e:	e783      	b.n	8009b38 <_dtoa_r+0x710>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	e7ab      	b.n	8009b8c <_dtoa_r+0x764>
 8009c34:	2300      	movs	r3, #0
 8009c36:	e7d4      	b.n	8009be2 <_dtoa_r+0x7ba>
 8009c38:	9b00      	ldr	r3, [sp, #0]
 8009c3a:	e7d2      	b.n	8009be2 <_dtoa_r+0x7ba>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009c46:	6918      	ldr	r0, [r3, #16]
 8009c48:	f000 fa4d 	bl	800a0e6 <__hi0bits>
 8009c4c:	f1c0 0020 	rsb	r0, r0, #32
 8009c50:	4440      	add	r0, r8
 8009c52:	f010 001f 	ands.w	r0, r0, #31
 8009c56:	d047      	beq.n	8009ce8 <_dtoa_r+0x8c0>
 8009c58:	f1c0 0320 	rsb	r3, r0, #32
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	dd3b      	ble.n	8009cd8 <_dtoa_r+0x8b0>
 8009c60:	9b05      	ldr	r3, [sp, #20]
 8009c62:	f1c0 001c 	rsb	r0, r0, #28
 8009c66:	4403      	add	r3, r0
 8009c68:	9305      	str	r3, [sp, #20]
 8009c6a:	4405      	add	r5, r0
 8009c6c:	4480      	add	r8, r0
 8009c6e:	9b05      	ldr	r3, [sp, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dd05      	ble.n	8009c80 <_dtoa_r+0x858>
 8009c74:	461a      	mov	r2, r3
 8009c76:	9904      	ldr	r1, [sp, #16]
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f000 fb6f 	bl	800a35c <__lshift>
 8009c7e:	9004      	str	r0, [sp, #16]
 8009c80:	f1b8 0f00 	cmp.w	r8, #0
 8009c84:	dd05      	ble.n	8009c92 <_dtoa_r+0x86a>
 8009c86:	4639      	mov	r1, r7
 8009c88:	4642      	mov	r2, r8
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fb66 	bl	800a35c <__lshift>
 8009c90:	4607      	mov	r7, r0
 8009c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c94:	b353      	cbz	r3, 8009cec <_dtoa_r+0x8c4>
 8009c96:	4639      	mov	r1, r7
 8009c98:	9804      	ldr	r0, [sp, #16]
 8009c9a:	f000 fbb3 	bl	800a404 <__mcmp>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	da24      	bge.n	8009cec <_dtoa_r+0x8c4>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	220a      	movs	r2, #10
 8009ca6:	9904      	ldr	r1, [sp, #16]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 f9e1 	bl	800a070 <__multadd>
 8009cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb0:	9004      	str	r0, [sp, #16]
 8009cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 814d 	beq.w	8009f56 <_dtoa_r+0xb2e>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 f9d4 	bl	800a070 <__multadd>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	4606      	mov	r6, r0
 8009cce:	dc4f      	bgt.n	8009d70 <_dtoa_r+0x948>
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	dd4c      	ble.n	8009d70 <_dtoa_r+0x948>
 8009cd6:	e011      	b.n	8009cfc <_dtoa_r+0x8d4>
 8009cd8:	d0c9      	beq.n	8009c6e <_dtoa_r+0x846>
 8009cda:	9a05      	ldr	r2, [sp, #20]
 8009cdc:	331c      	adds	r3, #28
 8009cde:	441a      	add	r2, r3
 8009ce0:	9205      	str	r2, [sp, #20]
 8009ce2:	441d      	add	r5, r3
 8009ce4:	4498      	add	r8, r3
 8009ce6:	e7c2      	b.n	8009c6e <_dtoa_r+0x846>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	e7f6      	b.n	8009cda <_dtoa_r+0x8b2>
 8009cec:	f1b9 0f00 	cmp.w	r9, #0
 8009cf0:	dc38      	bgt.n	8009d64 <_dtoa_r+0x93c>
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	dd35      	ble.n	8009d64 <_dtoa_r+0x93c>
 8009cf8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cfc:	9b02      	ldr	r3, [sp, #8]
 8009cfe:	b963      	cbnz	r3, 8009d1a <_dtoa_r+0x8f2>
 8009d00:	4639      	mov	r1, r7
 8009d02:	2205      	movs	r2, #5
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 f9b3 	bl	800a070 <__multadd>
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	9804      	ldr	r0, [sp, #16]
 8009d10:	f000 fb78 	bl	800a404 <__mcmp>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f73f adcc 	bgt.w	80098b2 <_dtoa_r+0x48a>
 8009d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1c:	465d      	mov	r5, fp
 8009d1e:	ea6f 0a03 	mvn.w	sl, r3
 8009d22:	f04f 0900 	mov.w	r9, #0
 8009d26:	4639      	mov	r1, r7
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 f98a 	bl	800a042 <_Bfree>
 8009d2e:	2e00      	cmp	r6, #0
 8009d30:	f43f aeb7 	beq.w	8009aa2 <_dtoa_r+0x67a>
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	d005      	beq.n	8009d46 <_dtoa_r+0x91e>
 8009d3a:	45b1      	cmp	r9, r6
 8009d3c:	d003      	beq.n	8009d46 <_dtoa_r+0x91e>
 8009d3e:	4649      	mov	r1, r9
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 f97e 	bl	800a042 <_Bfree>
 8009d46:	4631      	mov	r1, r6
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 f97a 	bl	800a042 <_Bfree>
 8009d4e:	e6a8      	b.n	8009aa2 <_dtoa_r+0x67a>
 8009d50:	2700      	movs	r7, #0
 8009d52:	463e      	mov	r6, r7
 8009d54:	e7e1      	b.n	8009d1a <_dtoa_r+0x8f2>
 8009d56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d5a:	463e      	mov	r6, r7
 8009d5c:	e5a9      	b.n	80098b2 <_dtoa_r+0x48a>
 8009d5e:	bf00      	nop
 8009d60:	40240000 	.word	0x40240000
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80fa 	beq.w	8009f64 <_dtoa_r+0xb3c>
 8009d70:	2d00      	cmp	r5, #0
 8009d72:	dd05      	ble.n	8009d80 <_dtoa_r+0x958>
 8009d74:	4631      	mov	r1, r6
 8009d76:	462a      	mov	r2, r5
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 faef 	bl	800a35c <__lshift>
 8009d7e:	4606      	mov	r6, r0
 8009d80:	9b07      	ldr	r3, [sp, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d04c      	beq.n	8009e20 <_dtoa_r+0x9f8>
 8009d86:	6871      	ldr	r1, [r6, #4]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 f926 	bl	8009fda <_Balloc>
 8009d8e:	6932      	ldr	r2, [r6, #16]
 8009d90:	3202      	adds	r2, #2
 8009d92:	4605      	mov	r5, r0
 8009d94:	0092      	lsls	r2, r2, #2
 8009d96:	f106 010c 	add.w	r1, r6, #12
 8009d9a:	300c      	adds	r0, #12
 8009d9c:	f000 f912 	bl	8009fc4 <memcpy>
 8009da0:	2201      	movs	r2, #1
 8009da2:	4629      	mov	r1, r5
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 fad9 	bl	800a35c <__lshift>
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	f8cd b014 	str.w	fp, [sp, #20]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	46b1      	mov	r9, r6
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	4606      	mov	r6, r0
 8009dba:	4639      	mov	r1, r7
 8009dbc:	9804      	ldr	r0, [sp, #16]
 8009dbe:	f7ff faa7 	bl	8009310 <quorem>
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009dca:	9804      	ldr	r0, [sp, #16]
 8009dcc:	f000 fb1a 	bl	800a404 <__mcmp>
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	9000      	str	r0, [sp, #0]
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fb2e 	bl	800a438 <__mdiff>
 8009ddc:	68c3      	ldr	r3, [r0, #12]
 8009dde:	4602      	mov	r2, r0
 8009de0:	bb03      	cbnz	r3, 8009e24 <_dtoa_r+0x9fc>
 8009de2:	4601      	mov	r1, r0
 8009de4:	9008      	str	r0, [sp, #32]
 8009de6:	9804      	ldr	r0, [sp, #16]
 8009de8:	f000 fb0c 	bl	800a404 <__mcmp>
 8009dec:	9a08      	ldr	r2, [sp, #32]
 8009dee:	4603      	mov	r3, r0
 8009df0:	4611      	mov	r1, r2
 8009df2:	4620      	mov	r0, r4
 8009df4:	9308      	str	r3, [sp, #32]
 8009df6:	f000 f924 	bl	800a042 <_Bfree>
 8009dfa:	9b08      	ldr	r3, [sp, #32]
 8009dfc:	b9a3      	cbnz	r3, 8009e28 <_dtoa_r+0xa00>
 8009dfe:	9a06      	ldr	r2, [sp, #24]
 8009e00:	b992      	cbnz	r2, 8009e28 <_dtoa_r+0xa00>
 8009e02:	9a07      	ldr	r2, [sp, #28]
 8009e04:	b982      	cbnz	r2, 8009e28 <_dtoa_r+0xa00>
 8009e06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e0a:	d029      	beq.n	8009e60 <_dtoa_r+0xa38>
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	dd01      	ble.n	8009e16 <_dtoa_r+0x9ee>
 8009e12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009e16:	9b05      	ldr	r3, [sp, #20]
 8009e18:	1c5d      	adds	r5, r3, #1
 8009e1a:	f883 8000 	strb.w	r8, [r3]
 8009e1e:	e782      	b.n	8009d26 <_dtoa_r+0x8fe>
 8009e20:	4630      	mov	r0, r6
 8009e22:	e7c2      	b.n	8009daa <_dtoa_r+0x982>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e7e3      	b.n	8009df0 <_dtoa_r+0x9c8>
 8009e28:	9a00      	ldr	r2, [sp, #0]
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	db04      	blt.n	8009e38 <_dtoa_r+0xa10>
 8009e2e:	d125      	bne.n	8009e7c <_dtoa_r+0xa54>
 8009e30:	9a06      	ldr	r2, [sp, #24]
 8009e32:	bb1a      	cbnz	r2, 8009e7c <_dtoa_r+0xa54>
 8009e34:	9a07      	ldr	r2, [sp, #28]
 8009e36:	bb0a      	cbnz	r2, 8009e7c <_dtoa_r+0xa54>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	ddec      	ble.n	8009e16 <_dtoa_r+0x9ee>
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	9904      	ldr	r1, [sp, #16]
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 fa8b 	bl	800a35c <__lshift>
 8009e46:	4639      	mov	r1, r7
 8009e48:	9004      	str	r0, [sp, #16]
 8009e4a:	f000 fadb 	bl	800a404 <__mcmp>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	dc03      	bgt.n	8009e5a <_dtoa_r+0xa32>
 8009e52:	d1e0      	bne.n	8009e16 <_dtoa_r+0x9ee>
 8009e54:	f018 0f01 	tst.w	r8, #1
 8009e58:	d0dd      	beq.n	8009e16 <_dtoa_r+0x9ee>
 8009e5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e5e:	d1d8      	bne.n	8009e12 <_dtoa_r+0x9ea>
 8009e60:	9b05      	ldr	r3, [sp, #20]
 8009e62:	9a05      	ldr	r2, [sp, #20]
 8009e64:	1c5d      	adds	r5, r3, #1
 8009e66:	2339      	movs	r3, #57	; 0x39
 8009e68:	7013      	strb	r3, [r2, #0]
 8009e6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e6e:	2b39      	cmp	r3, #57	; 0x39
 8009e70:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e74:	d04f      	beq.n	8009f16 <_dtoa_r+0xaee>
 8009e76:	3301      	adds	r3, #1
 8009e78:	7013      	strb	r3, [r2, #0]
 8009e7a:	e754      	b.n	8009d26 <_dtoa_r+0x8fe>
 8009e7c:	9a05      	ldr	r2, [sp, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f102 0501 	add.w	r5, r2, #1
 8009e84:	dd06      	ble.n	8009e94 <_dtoa_r+0xa6c>
 8009e86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e8a:	d0e9      	beq.n	8009e60 <_dtoa_r+0xa38>
 8009e8c:	f108 0801 	add.w	r8, r8, #1
 8009e90:	9b05      	ldr	r3, [sp, #20]
 8009e92:	e7c2      	b.n	8009e1a <_dtoa_r+0x9f2>
 8009e94:	9a02      	ldr	r2, [sp, #8]
 8009e96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009e9a:	eba5 030b 	sub.w	r3, r5, fp
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d021      	beq.n	8009ee6 <_dtoa_r+0xabe>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	220a      	movs	r2, #10
 8009ea6:	9904      	ldr	r1, [sp, #16]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 f8e1 	bl	800a070 <__multadd>
 8009eae:	45b1      	cmp	r9, r6
 8009eb0:	9004      	str	r0, [sp, #16]
 8009eb2:	f04f 0300 	mov.w	r3, #0
 8009eb6:	f04f 020a 	mov.w	r2, #10
 8009eba:	4649      	mov	r1, r9
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	d105      	bne.n	8009ecc <_dtoa_r+0xaa4>
 8009ec0:	f000 f8d6 	bl	800a070 <__multadd>
 8009ec4:	4681      	mov	r9, r0
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	9505      	str	r5, [sp, #20]
 8009eca:	e776      	b.n	8009dba <_dtoa_r+0x992>
 8009ecc:	f000 f8d0 	bl	800a070 <__multadd>
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4681      	mov	r9, r0
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	220a      	movs	r2, #10
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 f8c9 	bl	800a070 <__multadd>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	e7f2      	b.n	8009ec8 <_dtoa_r+0xaa0>
 8009ee2:	f04f 0900 	mov.w	r9, #0
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	9904      	ldr	r1, [sp, #16]
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 fa36 	bl	800a35c <__lshift>
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	9004      	str	r0, [sp, #16]
 8009ef4:	f000 fa86 	bl	800a404 <__mcmp>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	dcb6      	bgt.n	8009e6a <_dtoa_r+0xa42>
 8009efc:	d102      	bne.n	8009f04 <_dtoa_r+0xadc>
 8009efe:	f018 0f01 	tst.w	r8, #1
 8009f02:	d1b2      	bne.n	8009e6a <_dtoa_r+0xa42>
 8009f04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f08:	2b30      	cmp	r3, #48	; 0x30
 8009f0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009f0e:	f47f af0a 	bne.w	8009d26 <_dtoa_r+0x8fe>
 8009f12:	4615      	mov	r5, r2
 8009f14:	e7f6      	b.n	8009f04 <_dtoa_r+0xadc>
 8009f16:	4593      	cmp	fp, r2
 8009f18:	d105      	bne.n	8009f26 <_dtoa_r+0xafe>
 8009f1a:	2331      	movs	r3, #49	; 0x31
 8009f1c:	f10a 0a01 	add.w	sl, sl, #1
 8009f20:	f88b 3000 	strb.w	r3, [fp]
 8009f24:	e6ff      	b.n	8009d26 <_dtoa_r+0x8fe>
 8009f26:	4615      	mov	r5, r2
 8009f28:	e79f      	b.n	8009e6a <_dtoa_r+0xa42>
 8009f2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009f90 <_dtoa_r+0xb68>
 8009f2e:	e007      	b.n	8009f40 <_dtoa_r+0xb18>
 8009f30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009f94 <_dtoa_r+0xb6c>
 8009f36:	b11b      	cbz	r3, 8009f40 <_dtoa_r+0xb18>
 8009f38:	f10b 0308 	add.w	r3, fp, #8
 8009f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	4658      	mov	r0, fp
 8009f42:	b017      	add	sp, #92	; 0x5c
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	9b06      	ldr	r3, [sp, #24]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	f77f ae35 	ble.w	8009bba <_dtoa_r+0x792>
 8009f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f52:	9307      	str	r3, [sp, #28]
 8009f54:	e649      	b.n	8009bea <_dtoa_r+0x7c2>
 8009f56:	9b02      	ldr	r3, [sp, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dc03      	bgt.n	8009f64 <_dtoa_r+0xb3c>
 8009f5c:	9b06      	ldr	r3, [sp, #24]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	f73f aecc 	bgt.w	8009cfc <_dtoa_r+0x8d4>
 8009f64:	465d      	mov	r5, fp
 8009f66:	4639      	mov	r1, r7
 8009f68:	9804      	ldr	r0, [sp, #16]
 8009f6a:	f7ff f9d1 	bl	8009310 <quorem>
 8009f6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f72:	f805 8b01 	strb.w	r8, [r5], #1
 8009f76:	9a02      	ldr	r2, [sp, #8]
 8009f78:	eba5 030b 	sub.w	r3, r5, fp
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	ddb0      	ble.n	8009ee2 <_dtoa_r+0xaba>
 8009f80:	2300      	movs	r3, #0
 8009f82:	220a      	movs	r2, #10
 8009f84:	9904      	ldr	r1, [sp, #16]
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 f872 	bl	800a070 <__multadd>
 8009f8c:	9004      	str	r0, [sp, #16]
 8009f8e:	e7ea      	b.n	8009f66 <_dtoa_r+0xb3e>
 8009f90:	0801e858 	.word	0x0801e858
 8009f94:	0801e87c 	.word	0x0801e87c

08009f98 <_localeconv_r>:
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <_localeconv_r+0x14>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6a18      	ldr	r0, [r3, #32]
 8009f9e:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <_localeconv_r+0x18>)
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	bf08      	it	eq
 8009fa4:	4618      	moveq	r0, r3
 8009fa6:	30f0      	adds	r0, #240	; 0xf0
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	20000044 	.word	0x20000044
 8009fb0:	200000a8 	.word	0x200000a8

08009fb4 <malloc>:
 8009fb4:	4b02      	ldr	r3, [pc, #8]	; (8009fc0 <malloc+0xc>)
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	f000 bb45 	b.w	800a648 <_malloc_r>
 8009fbe:	bf00      	nop
 8009fc0:	20000044 	.word	0x20000044

08009fc4 <memcpy>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	1e43      	subs	r3, r0, #1
 8009fc8:	440a      	add	r2, r1
 8009fca:	4291      	cmp	r1, r2
 8009fcc:	d100      	bne.n	8009fd0 <memcpy+0xc>
 8009fce:	bd10      	pop	{r4, pc}
 8009fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fd8:	e7f7      	b.n	8009fca <memcpy+0x6>

08009fda <_Balloc>:
 8009fda:	b570      	push	{r4, r5, r6, lr}
 8009fdc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fde:	4604      	mov	r4, r0
 8009fe0:	460e      	mov	r6, r1
 8009fe2:	b93d      	cbnz	r5, 8009ff4 <_Balloc+0x1a>
 8009fe4:	2010      	movs	r0, #16
 8009fe6:	f7ff ffe5 	bl	8009fb4 <malloc>
 8009fea:	6260      	str	r0, [r4, #36]	; 0x24
 8009fec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ff0:	6005      	str	r5, [r0, #0]
 8009ff2:	60c5      	str	r5, [r0, #12]
 8009ff4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009ff6:	68eb      	ldr	r3, [r5, #12]
 8009ff8:	b183      	cbz	r3, 800a01c <_Balloc+0x42>
 8009ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a002:	b9b8      	cbnz	r0, 800a034 <_Balloc+0x5a>
 800a004:	2101      	movs	r1, #1
 800a006:	fa01 f506 	lsl.w	r5, r1, r6
 800a00a:	1d6a      	adds	r2, r5, #5
 800a00c:	0092      	lsls	r2, r2, #2
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 fabe 	bl	800a590 <_calloc_r>
 800a014:	b160      	cbz	r0, 800a030 <_Balloc+0x56>
 800a016:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a01a:	e00e      	b.n	800a03a <_Balloc+0x60>
 800a01c:	2221      	movs	r2, #33	; 0x21
 800a01e:	2104      	movs	r1, #4
 800a020:	4620      	mov	r0, r4
 800a022:	f000 fab5 	bl	800a590 <_calloc_r>
 800a026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a028:	60e8      	str	r0, [r5, #12]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e4      	bne.n	8009ffa <_Balloc+0x20>
 800a030:	2000      	movs	r0, #0
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	6802      	ldr	r2, [r0, #0]
 800a036:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a03a:	2300      	movs	r3, #0
 800a03c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a040:	e7f7      	b.n	800a032 <_Balloc+0x58>

0800a042 <_Bfree>:
 800a042:	b570      	push	{r4, r5, r6, lr}
 800a044:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a046:	4606      	mov	r6, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	b93c      	cbnz	r4, 800a05c <_Bfree+0x1a>
 800a04c:	2010      	movs	r0, #16
 800a04e:	f7ff ffb1 	bl	8009fb4 <malloc>
 800a052:	6270      	str	r0, [r6, #36]	; 0x24
 800a054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a058:	6004      	str	r4, [r0, #0]
 800a05a:	60c4      	str	r4, [r0, #12]
 800a05c:	b13d      	cbz	r5, 800a06e <_Bfree+0x2c>
 800a05e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a060:	686a      	ldr	r2, [r5, #4]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a068:	6029      	str	r1, [r5, #0]
 800a06a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a06e:	bd70      	pop	{r4, r5, r6, pc}

0800a070 <__multadd>:
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	690d      	ldr	r5, [r1, #16]
 800a076:	461f      	mov	r7, r3
 800a078:	4606      	mov	r6, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	f101 0c14 	add.w	ip, r1, #20
 800a080:	2300      	movs	r3, #0
 800a082:	f8dc 0000 	ldr.w	r0, [ip]
 800a086:	b281      	uxth	r1, r0
 800a088:	fb02 7101 	mla	r1, r2, r1, r7
 800a08c:	0c0f      	lsrs	r7, r1, #16
 800a08e:	0c00      	lsrs	r0, r0, #16
 800a090:	fb02 7000 	mla	r0, r2, r0, r7
 800a094:	b289      	uxth	r1, r1
 800a096:	3301      	adds	r3, #1
 800a098:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a09c:	429d      	cmp	r5, r3
 800a09e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a0a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a0a6:	dcec      	bgt.n	800a082 <__multadd+0x12>
 800a0a8:	b1d7      	cbz	r7, 800a0e0 <__multadd+0x70>
 800a0aa:	68a3      	ldr	r3, [r4, #8]
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dc12      	bgt.n	800a0d6 <__multadd+0x66>
 800a0b0:	6861      	ldr	r1, [r4, #4]
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	3101      	adds	r1, #1
 800a0b6:	f7ff ff90 	bl	8009fda <_Balloc>
 800a0ba:	6922      	ldr	r2, [r4, #16]
 800a0bc:	3202      	adds	r2, #2
 800a0be:	f104 010c 	add.w	r1, r4, #12
 800a0c2:	4680      	mov	r8, r0
 800a0c4:	0092      	lsls	r2, r2, #2
 800a0c6:	300c      	adds	r0, #12
 800a0c8:	f7ff ff7c 	bl	8009fc4 <memcpy>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7ff ffb7 	bl	800a042 <_Bfree>
 800a0d4:	4644      	mov	r4, r8
 800a0d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0da:	3501      	adds	r5, #1
 800a0dc:	615f      	str	r7, [r3, #20]
 800a0de:	6125      	str	r5, [r4, #16]
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a0e6 <__hi0bits>:
 800a0e6:	0c02      	lsrs	r2, r0, #16
 800a0e8:	0412      	lsls	r2, r2, #16
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	b9b2      	cbnz	r2, 800a11c <__hi0bits+0x36>
 800a0ee:	0403      	lsls	r3, r0, #16
 800a0f0:	2010      	movs	r0, #16
 800a0f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a0f6:	bf04      	itt	eq
 800a0f8:	021b      	lsleq	r3, r3, #8
 800a0fa:	3008      	addeq	r0, #8
 800a0fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a100:	bf04      	itt	eq
 800a102:	011b      	lsleq	r3, r3, #4
 800a104:	3004      	addeq	r0, #4
 800a106:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a10a:	bf04      	itt	eq
 800a10c:	009b      	lsleq	r3, r3, #2
 800a10e:	3002      	addeq	r0, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	db06      	blt.n	800a122 <__hi0bits+0x3c>
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	d503      	bpl.n	800a120 <__hi0bits+0x3a>
 800a118:	3001      	adds	r0, #1
 800a11a:	4770      	bx	lr
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7e8      	b.n	800a0f2 <__hi0bits+0xc>
 800a120:	2020      	movs	r0, #32
 800a122:	4770      	bx	lr

0800a124 <__lo0bits>:
 800a124:	6803      	ldr	r3, [r0, #0]
 800a126:	f013 0207 	ands.w	r2, r3, #7
 800a12a:	4601      	mov	r1, r0
 800a12c:	d00b      	beq.n	800a146 <__lo0bits+0x22>
 800a12e:	07da      	lsls	r2, r3, #31
 800a130:	d423      	bmi.n	800a17a <__lo0bits+0x56>
 800a132:	0798      	lsls	r0, r3, #30
 800a134:	bf49      	itett	mi
 800a136:	085b      	lsrmi	r3, r3, #1
 800a138:	089b      	lsrpl	r3, r3, #2
 800a13a:	2001      	movmi	r0, #1
 800a13c:	600b      	strmi	r3, [r1, #0]
 800a13e:	bf5c      	itt	pl
 800a140:	600b      	strpl	r3, [r1, #0]
 800a142:	2002      	movpl	r0, #2
 800a144:	4770      	bx	lr
 800a146:	b298      	uxth	r0, r3
 800a148:	b9a8      	cbnz	r0, 800a176 <__lo0bits+0x52>
 800a14a:	0c1b      	lsrs	r3, r3, #16
 800a14c:	2010      	movs	r0, #16
 800a14e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a152:	bf04      	itt	eq
 800a154:	0a1b      	lsreq	r3, r3, #8
 800a156:	3008      	addeq	r0, #8
 800a158:	071a      	lsls	r2, r3, #28
 800a15a:	bf04      	itt	eq
 800a15c:	091b      	lsreq	r3, r3, #4
 800a15e:	3004      	addeq	r0, #4
 800a160:	079a      	lsls	r2, r3, #30
 800a162:	bf04      	itt	eq
 800a164:	089b      	lsreq	r3, r3, #2
 800a166:	3002      	addeq	r0, #2
 800a168:	07da      	lsls	r2, r3, #31
 800a16a:	d402      	bmi.n	800a172 <__lo0bits+0x4e>
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	d006      	beq.n	800a17e <__lo0bits+0x5a>
 800a170:	3001      	adds	r0, #1
 800a172:	600b      	str	r3, [r1, #0]
 800a174:	4770      	bx	lr
 800a176:	4610      	mov	r0, r2
 800a178:	e7e9      	b.n	800a14e <__lo0bits+0x2a>
 800a17a:	2000      	movs	r0, #0
 800a17c:	4770      	bx	lr
 800a17e:	2020      	movs	r0, #32
 800a180:	4770      	bx	lr

0800a182 <__i2b>:
 800a182:	b510      	push	{r4, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	2101      	movs	r1, #1
 800a188:	f7ff ff27 	bl	8009fda <_Balloc>
 800a18c:	2201      	movs	r2, #1
 800a18e:	6144      	str	r4, [r0, #20]
 800a190:	6102      	str	r2, [r0, #16]
 800a192:	bd10      	pop	{r4, pc}

0800a194 <__multiply>:
 800a194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	4614      	mov	r4, r2
 800a19a:	690a      	ldr	r2, [r1, #16]
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	bfb8      	it	lt
 800a1a2:	460b      	movlt	r3, r1
 800a1a4:	4688      	mov	r8, r1
 800a1a6:	bfbc      	itt	lt
 800a1a8:	46a0      	movlt	r8, r4
 800a1aa:	461c      	movlt	r4, r3
 800a1ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1bc:	eb07 0609 	add.w	r6, r7, r9
 800a1c0:	42b3      	cmp	r3, r6
 800a1c2:	bfb8      	it	lt
 800a1c4:	3101      	addlt	r1, #1
 800a1c6:	f7ff ff08 	bl	8009fda <_Balloc>
 800a1ca:	f100 0514 	add.w	r5, r0, #20
 800a1ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4573      	cmp	r3, lr
 800a1d8:	d316      	bcc.n	800a208 <__multiply+0x74>
 800a1da:	f104 0214 	add.w	r2, r4, #20
 800a1de:	f108 0114 	add.w	r1, r8, #20
 800a1e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a1e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	9b00      	ldr	r3, [sp, #0]
 800a1ee:	9201      	str	r2, [sp, #4]
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d80c      	bhi.n	800a20e <__multiply+0x7a>
 800a1f4:	2e00      	cmp	r6, #0
 800a1f6:	dd03      	ble.n	800a200 <__multiply+0x6c>
 800a1f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d05d      	beq.n	800a2bc <__multiply+0x128>
 800a200:	6106      	str	r6, [r0, #16]
 800a202:	b003      	add	sp, #12
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	f843 2b04 	str.w	r2, [r3], #4
 800a20c:	e7e3      	b.n	800a1d6 <__multiply+0x42>
 800a20e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a212:	f1bb 0f00 	cmp.w	fp, #0
 800a216:	d023      	beq.n	800a260 <__multiply+0xcc>
 800a218:	4689      	mov	r9, r1
 800a21a:	46ac      	mov	ip, r5
 800a21c:	f04f 0800 	mov.w	r8, #0
 800a220:	f859 4b04 	ldr.w	r4, [r9], #4
 800a224:	f8dc a000 	ldr.w	sl, [ip]
 800a228:	b2a3      	uxth	r3, r4
 800a22a:	fa1f fa8a 	uxth.w	sl, sl
 800a22e:	fb0b a303 	mla	r3, fp, r3, sl
 800a232:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a236:	f8dc 4000 	ldr.w	r4, [ip]
 800a23a:	4443      	add	r3, r8
 800a23c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a240:	fb0b 840a 	mla	r4, fp, sl, r8
 800a244:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a248:	46e2      	mov	sl, ip
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a250:	454f      	cmp	r7, r9
 800a252:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a256:	f84a 3b04 	str.w	r3, [sl], #4
 800a25a:	d82b      	bhi.n	800a2b4 <__multiply+0x120>
 800a25c:	f8cc 8004 	str.w	r8, [ip, #4]
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a266:	3204      	adds	r2, #4
 800a268:	f1ba 0f00 	cmp.w	sl, #0
 800a26c:	d020      	beq.n	800a2b0 <__multiply+0x11c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	4689      	mov	r9, r1
 800a272:	46a8      	mov	r8, r5
 800a274:	f04f 0b00 	mov.w	fp, #0
 800a278:	f8b9 c000 	ldrh.w	ip, [r9]
 800a27c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a280:	fb0a 440c 	mla	r4, sl, ip, r4
 800a284:	445c      	add	r4, fp
 800a286:	46c4      	mov	ip, r8
 800a288:	b29b      	uxth	r3, r3
 800a28a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a28e:	f84c 3b04 	str.w	r3, [ip], #4
 800a292:	f859 3b04 	ldr.w	r3, [r9], #4
 800a296:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a29a:	0c1b      	lsrs	r3, r3, #16
 800a29c:	fb0a b303 	mla	r3, sl, r3, fp
 800a2a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a2a4:	454f      	cmp	r7, r9
 800a2a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a2aa:	d805      	bhi.n	800a2b8 <__multiply+0x124>
 800a2ac:	f8c8 3004 	str.w	r3, [r8, #4]
 800a2b0:	3504      	adds	r5, #4
 800a2b2:	e79b      	b.n	800a1ec <__multiply+0x58>
 800a2b4:	46d4      	mov	ip, sl
 800a2b6:	e7b3      	b.n	800a220 <__multiply+0x8c>
 800a2b8:	46e0      	mov	r8, ip
 800a2ba:	e7dd      	b.n	800a278 <__multiply+0xe4>
 800a2bc:	3e01      	subs	r6, #1
 800a2be:	e799      	b.n	800a1f4 <__multiply+0x60>

0800a2c0 <__pow5mult>:
 800a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c4:	4615      	mov	r5, r2
 800a2c6:	f012 0203 	ands.w	r2, r2, #3
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460f      	mov	r7, r1
 800a2ce:	d007      	beq.n	800a2e0 <__pow5mult+0x20>
 800a2d0:	3a01      	subs	r2, #1
 800a2d2:	4c21      	ldr	r4, [pc, #132]	; (800a358 <__pow5mult+0x98>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2da:	f7ff fec9 	bl	800a070 <__multadd>
 800a2de:	4607      	mov	r7, r0
 800a2e0:	10ad      	asrs	r5, r5, #2
 800a2e2:	d035      	beq.n	800a350 <__pow5mult+0x90>
 800a2e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2e6:	b93c      	cbnz	r4, 800a2f8 <__pow5mult+0x38>
 800a2e8:	2010      	movs	r0, #16
 800a2ea:	f7ff fe63 	bl	8009fb4 <malloc>
 800a2ee:	6270      	str	r0, [r6, #36]	; 0x24
 800a2f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2f4:	6004      	str	r4, [r0, #0]
 800a2f6:	60c4      	str	r4, [r0, #12]
 800a2f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a300:	b94c      	cbnz	r4, 800a316 <__pow5mult+0x56>
 800a302:	f240 2171 	movw	r1, #625	; 0x271
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ff3b 	bl	800a182 <__i2b>
 800a30c:	2300      	movs	r3, #0
 800a30e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a312:	4604      	mov	r4, r0
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	07eb      	lsls	r3, r5, #31
 800a31c:	d50a      	bpl.n	800a334 <__pow5mult+0x74>
 800a31e:	4639      	mov	r1, r7
 800a320:	4622      	mov	r2, r4
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff ff36 	bl	800a194 <__multiply>
 800a328:	4639      	mov	r1, r7
 800a32a:	4681      	mov	r9, r0
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff fe88 	bl	800a042 <_Bfree>
 800a332:	464f      	mov	r7, r9
 800a334:	106d      	asrs	r5, r5, #1
 800a336:	d00b      	beq.n	800a350 <__pow5mult+0x90>
 800a338:	6820      	ldr	r0, [r4, #0]
 800a33a:	b938      	cbnz	r0, 800a34c <__pow5mult+0x8c>
 800a33c:	4622      	mov	r2, r4
 800a33e:	4621      	mov	r1, r4
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff ff27 	bl	800a194 <__multiply>
 800a346:	6020      	str	r0, [r4, #0]
 800a348:	f8c0 8000 	str.w	r8, [r0]
 800a34c:	4604      	mov	r4, r0
 800a34e:	e7e4      	b.n	800a31a <__pow5mult+0x5a>
 800a350:	4638      	mov	r0, r7
 800a352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a356:	bf00      	nop
 800a358:	0801e9e0 	.word	0x0801e9e0

0800a35c <__lshift>:
 800a35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	6849      	ldr	r1, [r1, #4]
 800a36a:	eb0a 0903 	add.w	r9, sl, r3
 800a36e:	68a3      	ldr	r3, [r4, #8]
 800a370:	4607      	mov	r7, r0
 800a372:	4616      	mov	r6, r2
 800a374:	f109 0501 	add.w	r5, r9, #1
 800a378:	42ab      	cmp	r3, r5
 800a37a:	db32      	blt.n	800a3e2 <__lshift+0x86>
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff fe2c 	bl	8009fda <_Balloc>
 800a382:	2300      	movs	r3, #0
 800a384:	4680      	mov	r8, r0
 800a386:	f100 0114 	add.w	r1, r0, #20
 800a38a:	461a      	mov	r2, r3
 800a38c:	4553      	cmp	r3, sl
 800a38e:	db2b      	blt.n	800a3e8 <__lshift+0x8c>
 800a390:	6920      	ldr	r0, [r4, #16]
 800a392:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a396:	f104 0314 	add.w	r3, r4, #20
 800a39a:	f016 021f 	ands.w	r2, r6, #31
 800a39e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3a6:	d025      	beq.n	800a3f4 <__lshift+0x98>
 800a3a8:	f1c2 0e20 	rsb	lr, r2, #32
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	681e      	ldr	r6, [r3, #0]
 800a3b0:	468a      	mov	sl, r1
 800a3b2:	4096      	lsls	r6, r2
 800a3b4:	4330      	orrs	r0, r6
 800a3b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a3ba:	f853 0b04 	ldr.w	r0, [r3], #4
 800a3be:	459c      	cmp	ip, r3
 800a3c0:	fa20 f00e 	lsr.w	r0, r0, lr
 800a3c4:	d814      	bhi.n	800a3f0 <__lshift+0x94>
 800a3c6:	6048      	str	r0, [r1, #4]
 800a3c8:	b108      	cbz	r0, 800a3ce <__lshift+0x72>
 800a3ca:	f109 0502 	add.w	r5, r9, #2
 800a3ce:	3d01      	subs	r5, #1
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f8c8 5010 	str.w	r5, [r8, #16]
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	f7ff fe33 	bl	800a042 <_Bfree>
 800a3dc:	4640      	mov	r0, r8
 800a3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e2:	3101      	adds	r1, #1
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	e7c7      	b.n	800a378 <__lshift+0x1c>
 800a3e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	e7cd      	b.n	800a38c <__lshift+0x30>
 800a3f0:	4651      	mov	r1, sl
 800a3f2:	e7dc      	b.n	800a3ae <__lshift+0x52>
 800a3f4:	3904      	subs	r1, #4
 800a3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3fe:	459c      	cmp	ip, r3
 800a400:	d8f9      	bhi.n	800a3f6 <__lshift+0x9a>
 800a402:	e7e4      	b.n	800a3ce <__lshift+0x72>

0800a404 <__mcmp>:
 800a404:	6903      	ldr	r3, [r0, #16]
 800a406:	690a      	ldr	r2, [r1, #16]
 800a408:	1a9b      	subs	r3, r3, r2
 800a40a:	b530      	push	{r4, r5, lr}
 800a40c:	d10c      	bne.n	800a428 <__mcmp+0x24>
 800a40e:	0092      	lsls	r2, r2, #2
 800a410:	3014      	adds	r0, #20
 800a412:	3114      	adds	r1, #20
 800a414:	1884      	adds	r4, r0, r2
 800a416:	4411      	add	r1, r2
 800a418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a41c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a420:	4295      	cmp	r5, r2
 800a422:	d003      	beq.n	800a42c <__mcmp+0x28>
 800a424:	d305      	bcc.n	800a432 <__mcmp+0x2e>
 800a426:	2301      	movs	r3, #1
 800a428:	4618      	mov	r0, r3
 800a42a:	bd30      	pop	{r4, r5, pc}
 800a42c:	42a0      	cmp	r0, r4
 800a42e:	d3f3      	bcc.n	800a418 <__mcmp+0x14>
 800a430:	e7fa      	b.n	800a428 <__mcmp+0x24>
 800a432:	f04f 33ff 	mov.w	r3, #4294967295
 800a436:	e7f7      	b.n	800a428 <__mcmp+0x24>

0800a438 <__mdiff>:
 800a438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a43c:	460d      	mov	r5, r1
 800a43e:	4607      	mov	r7, r0
 800a440:	4611      	mov	r1, r2
 800a442:	4628      	mov	r0, r5
 800a444:	4614      	mov	r4, r2
 800a446:	f7ff ffdd 	bl	800a404 <__mcmp>
 800a44a:	1e06      	subs	r6, r0, #0
 800a44c:	d108      	bne.n	800a460 <__mdiff+0x28>
 800a44e:	4631      	mov	r1, r6
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff fdc2 	bl	8009fda <_Balloc>
 800a456:	2301      	movs	r3, #1
 800a458:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	bfa4      	itt	ge
 800a462:	4623      	movge	r3, r4
 800a464:	462c      	movge	r4, r5
 800a466:	4638      	mov	r0, r7
 800a468:	6861      	ldr	r1, [r4, #4]
 800a46a:	bfa6      	itte	ge
 800a46c:	461d      	movge	r5, r3
 800a46e:	2600      	movge	r6, #0
 800a470:	2601      	movlt	r6, #1
 800a472:	f7ff fdb2 	bl	8009fda <_Balloc>
 800a476:	692b      	ldr	r3, [r5, #16]
 800a478:	60c6      	str	r6, [r0, #12]
 800a47a:	6926      	ldr	r6, [r4, #16]
 800a47c:	f105 0914 	add.w	r9, r5, #20
 800a480:	f104 0214 	add.w	r2, r4, #20
 800a484:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a488:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a48c:	f100 0514 	add.w	r5, r0, #20
 800a490:	f04f 0e00 	mov.w	lr, #0
 800a494:	f852 ab04 	ldr.w	sl, [r2], #4
 800a498:	f859 4b04 	ldr.w	r4, [r9], #4
 800a49c:	fa1e f18a 	uxtah	r1, lr, sl
 800a4a0:	b2a3      	uxth	r3, r4
 800a4a2:	1ac9      	subs	r1, r1, r3
 800a4a4:	0c23      	lsrs	r3, r4, #16
 800a4a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a4aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a4ae:	b289      	uxth	r1, r1
 800a4b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a4b4:	45c8      	cmp	r8, r9
 800a4b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a4ba:	4694      	mov	ip, r2
 800a4bc:	f845 3b04 	str.w	r3, [r5], #4
 800a4c0:	d8e8      	bhi.n	800a494 <__mdiff+0x5c>
 800a4c2:	45bc      	cmp	ip, r7
 800a4c4:	d304      	bcc.n	800a4d0 <__mdiff+0x98>
 800a4c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a4ca:	b183      	cbz	r3, 800a4ee <__mdiff+0xb6>
 800a4cc:	6106      	str	r6, [r0, #16]
 800a4ce:	e7c5      	b.n	800a45c <__mdiff+0x24>
 800a4d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a4d4:	fa1e f381 	uxtah	r3, lr, r1
 800a4d8:	141a      	asrs	r2, r3, #16
 800a4da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a4e8:	f845 3b04 	str.w	r3, [r5], #4
 800a4ec:	e7e9      	b.n	800a4c2 <__mdiff+0x8a>
 800a4ee:	3e01      	subs	r6, #1
 800a4f0:	e7e9      	b.n	800a4c6 <__mdiff+0x8e>

0800a4f2 <__d2b>:
 800a4f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4f6:	460e      	mov	r6, r1
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	ec59 8b10 	vmov	r8, r9, d0
 800a4fe:	4615      	mov	r5, r2
 800a500:	f7ff fd6b 	bl	8009fda <_Balloc>
 800a504:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a508:	4607      	mov	r7, r0
 800a50a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a50e:	bb34      	cbnz	r4, 800a55e <__d2b+0x6c>
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	f1b8 0300 	subs.w	r3, r8, #0
 800a516:	d027      	beq.n	800a568 <__d2b+0x76>
 800a518:	a802      	add	r0, sp, #8
 800a51a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a51e:	f7ff fe01 	bl	800a124 <__lo0bits>
 800a522:	9900      	ldr	r1, [sp, #0]
 800a524:	b1f0      	cbz	r0, 800a564 <__d2b+0x72>
 800a526:	9a01      	ldr	r2, [sp, #4]
 800a528:	f1c0 0320 	rsb	r3, r0, #32
 800a52c:	fa02 f303 	lsl.w	r3, r2, r3
 800a530:	430b      	orrs	r3, r1
 800a532:	40c2      	lsrs	r2, r0
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	9201      	str	r2, [sp, #4]
 800a538:	9b01      	ldr	r3, [sp, #4]
 800a53a:	61bb      	str	r3, [r7, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bf14      	ite	ne
 800a540:	2102      	movne	r1, #2
 800a542:	2101      	moveq	r1, #1
 800a544:	6139      	str	r1, [r7, #16]
 800a546:	b1c4      	cbz	r4, 800a57a <__d2b+0x88>
 800a548:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a54c:	4404      	add	r4, r0
 800a54e:	6034      	str	r4, [r6, #0]
 800a550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a554:	6028      	str	r0, [r5, #0]
 800a556:	4638      	mov	r0, r7
 800a558:	b003      	add	sp, #12
 800a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a55e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a562:	e7d5      	b.n	800a510 <__d2b+0x1e>
 800a564:	6179      	str	r1, [r7, #20]
 800a566:	e7e7      	b.n	800a538 <__d2b+0x46>
 800a568:	a801      	add	r0, sp, #4
 800a56a:	f7ff fddb 	bl	800a124 <__lo0bits>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	617b      	str	r3, [r7, #20]
 800a572:	2101      	movs	r1, #1
 800a574:	6139      	str	r1, [r7, #16]
 800a576:	3020      	adds	r0, #32
 800a578:	e7e5      	b.n	800a546 <__d2b+0x54>
 800a57a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a57e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a582:	6030      	str	r0, [r6, #0]
 800a584:	6918      	ldr	r0, [r3, #16]
 800a586:	f7ff fdae 	bl	800a0e6 <__hi0bits>
 800a58a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a58e:	e7e1      	b.n	800a554 <__d2b+0x62>

0800a590 <_calloc_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	fb02 f401 	mul.w	r4, r2, r1
 800a596:	4621      	mov	r1, r4
 800a598:	f000 f856 	bl	800a648 <_malloc_r>
 800a59c:	4605      	mov	r5, r0
 800a59e:	b118      	cbz	r0, 800a5a8 <_calloc_r+0x18>
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	f7fe fa30 	bl	8008a08 <memset>
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}

0800a5ac <_free_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	d045      	beq.n	800a640 <_free_r+0x94>
 800a5b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b8:	1f0c      	subs	r4, r1, #4
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	bfb8      	it	lt
 800a5be:	18e4      	addlt	r4, r4, r3
 800a5c0:	f000 fa29 	bl	800aa16 <__malloc_lock>
 800a5c4:	4a1f      	ldr	r2, [pc, #124]	; (800a644 <_free_r+0x98>)
 800a5c6:	6813      	ldr	r3, [r2, #0]
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	b933      	cbnz	r3, 800a5da <_free_r+0x2e>
 800a5cc:	6063      	str	r3, [r4, #4]
 800a5ce:	6014      	str	r4, [r2, #0]
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d6:	f000 ba1f 	b.w	800aa18 <__malloc_unlock>
 800a5da:	42a3      	cmp	r3, r4
 800a5dc:	d90c      	bls.n	800a5f8 <_free_r+0x4c>
 800a5de:	6821      	ldr	r1, [r4, #0]
 800a5e0:	1862      	adds	r2, r4, r1
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	bf04      	itt	eq
 800a5e6:	681a      	ldreq	r2, [r3, #0]
 800a5e8:	685b      	ldreq	r3, [r3, #4]
 800a5ea:	6063      	str	r3, [r4, #4]
 800a5ec:	bf04      	itt	eq
 800a5ee:	1852      	addeq	r2, r2, r1
 800a5f0:	6022      	streq	r2, [r4, #0]
 800a5f2:	6004      	str	r4, [r0, #0]
 800a5f4:	e7ec      	b.n	800a5d0 <_free_r+0x24>
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	b10a      	cbz	r2, 800a600 <_free_r+0x54>
 800a5fc:	42a2      	cmp	r2, r4
 800a5fe:	d9fa      	bls.n	800a5f6 <_free_r+0x4a>
 800a600:	6819      	ldr	r1, [r3, #0]
 800a602:	1858      	adds	r0, r3, r1
 800a604:	42a0      	cmp	r0, r4
 800a606:	d10b      	bne.n	800a620 <_free_r+0x74>
 800a608:	6820      	ldr	r0, [r4, #0]
 800a60a:	4401      	add	r1, r0
 800a60c:	1858      	adds	r0, r3, r1
 800a60e:	4282      	cmp	r2, r0
 800a610:	6019      	str	r1, [r3, #0]
 800a612:	d1dd      	bne.n	800a5d0 <_free_r+0x24>
 800a614:	6810      	ldr	r0, [r2, #0]
 800a616:	6852      	ldr	r2, [r2, #4]
 800a618:	605a      	str	r2, [r3, #4]
 800a61a:	4401      	add	r1, r0
 800a61c:	6019      	str	r1, [r3, #0]
 800a61e:	e7d7      	b.n	800a5d0 <_free_r+0x24>
 800a620:	d902      	bls.n	800a628 <_free_r+0x7c>
 800a622:	230c      	movs	r3, #12
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	e7d3      	b.n	800a5d0 <_free_r+0x24>
 800a628:	6820      	ldr	r0, [r4, #0]
 800a62a:	1821      	adds	r1, r4, r0
 800a62c:	428a      	cmp	r2, r1
 800a62e:	bf04      	itt	eq
 800a630:	6811      	ldreq	r1, [r2, #0]
 800a632:	6852      	ldreq	r2, [r2, #4]
 800a634:	6062      	str	r2, [r4, #4]
 800a636:	bf04      	itt	eq
 800a638:	1809      	addeq	r1, r1, r0
 800a63a:	6021      	streq	r1, [r4, #0]
 800a63c:	605c      	str	r4, [r3, #4]
 800a63e:	e7c7      	b.n	800a5d0 <_free_r+0x24>
 800a640:	bd38      	pop	{r3, r4, r5, pc}
 800a642:	bf00      	nop
 800a644:	20000368 	.word	0x20000368

0800a648 <_malloc_r>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	1ccd      	adds	r5, r1, #3
 800a64c:	f025 0503 	bic.w	r5, r5, #3
 800a650:	3508      	adds	r5, #8
 800a652:	2d0c      	cmp	r5, #12
 800a654:	bf38      	it	cc
 800a656:	250c      	movcc	r5, #12
 800a658:	2d00      	cmp	r5, #0
 800a65a:	4606      	mov	r6, r0
 800a65c:	db01      	blt.n	800a662 <_malloc_r+0x1a>
 800a65e:	42a9      	cmp	r1, r5
 800a660:	d903      	bls.n	800a66a <_malloc_r+0x22>
 800a662:	230c      	movs	r3, #12
 800a664:	6033      	str	r3, [r6, #0]
 800a666:	2000      	movs	r0, #0
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	f000 f9d4 	bl	800aa16 <__malloc_lock>
 800a66e:	4a21      	ldr	r2, [pc, #132]	; (800a6f4 <_malloc_r+0xac>)
 800a670:	6814      	ldr	r4, [r2, #0]
 800a672:	4621      	mov	r1, r4
 800a674:	b991      	cbnz	r1, 800a69c <_malloc_r+0x54>
 800a676:	4c20      	ldr	r4, [pc, #128]	; (800a6f8 <_malloc_r+0xb0>)
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	b91b      	cbnz	r3, 800a684 <_malloc_r+0x3c>
 800a67c:	4630      	mov	r0, r6
 800a67e:	f000 f98f 	bl	800a9a0 <_sbrk_r>
 800a682:	6020      	str	r0, [r4, #0]
 800a684:	4629      	mov	r1, r5
 800a686:	4630      	mov	r0, r6
 800a688:	f000 f98a 	bl	800a9a0 <_sbrk_r>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d124      	bne.n	800a6da <_malloc_r+0x92>
 800a690:	230c      	movs	r3, #12
 800a692:	6033      	str	r3, [r6, #0]
 800a694:	4630      	mov	r0, r6
 800a696:	f000 f9bf 	bl	800aa18 <__malloc_unlock>
 800a69a:	e7e4      	b.n	800a666 <_malloc_r+0x1e>
 800a69c:	680b      	ldr	r3, [r1, #0]
 800a69e:	1b5b      	subs	r3, r3, r5
 800a6a0:	d418      	bmi.n	800a6d4 <_malloc_r+0x8c>
 800a6a2:	2b0b      	cmp	r3, #11
 800a6a4:	d90f      	bls.n	800a6c6 <_malloc_r+0x7e>
 800a6a6:	600b      	str	r3, [r1, #0]
 800a6a8:	50cd      	str	r5, [r1, r3]
 800a6aa:	18cc      	adds	r4, r1, r3
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f000 f9b3 	bl	800aa18 <__malloc_unlock>
 800a6b2:	f104 000b 	add.w	r0, r4, #11
 800a6b6:	1d23      	adds	r3, r4, #4
 800a6b8:	f020 0007 	bic.w	r0, r0, #7
 800a6bc:	1ac3      	subs	r3, r0, r3
 800a6be:	d0d3      	beq.n	800a668 <_malloc_r+0x20>
 800a6c0:	425a      	negs	r2, r3
 800a6c2:	50e2      	str	r2, [r4, r3]
 800a6c4:	e7d0      	b.n	800a668 <_malloc_r+0x20>
 800a6c6:	428c      	cmp	r4, r1
 800a6c8:	684b      	ldr	r3, [r1, #4]
 800a6ca:	bf16      	itet	ne
 800a6cc:	6063      	strne	r3, [r4, #4]
 800a6ce:	6013      	streq	r3, [r2, #0]
 800a6d0:	460c      	movne	r4, r1
 800a6d2:	e7eb      	b.n	800a6ac <_malloc_r+0x64>
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	6849      	ldr	r1, [r1, #4]
 800a6d8:	e7cc      	b.n	800a674 <_malloc_r+0x2c>
 800a6da:	1cc4      	adds	r4, r0, #3
 800a6dc:	f024 0403 	bic.w	r4, r4, #3
 800a6e0:	42a0      	cmp	r0, r4
 800a6e2:	d005      	beq.n	800a6f0 <_malloc_r+0xa8>
 800a6e4:	1a21      	subs	r1, r4, r0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f000 f95a 	bl	800a9a0 <_sbrk_r>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	d0cf      	beq.n	800a690 <_malloc_r+0x48>
 800a6f0:	6025      	str	r5, [r4, #0]
 800a6f2:	e7db      	b.n	800a6ac <_malloc_r+0x64>
 800a6f4:	20000368 	.word	0x20000368
 800a6f8:	2000036c 	.word	0x2000036c

0800a6fc <__ssputs_r>:
 800a6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a700:	688e      	ldr	r6, [r1, #8]
 800a702:	429e      	cmp	r6, r3
 800a704:	4682      	mov	sl, r0
 800a706:	460c      	mov	r4, r1
 800a708:	4690      	mov	r8, r2
 800a70a:	4699      	mov	r9, r3
 800a70c:	d837      	bhi.n	800a77e <__ssputs_r+0x82>
 800a70e:	898a      	ldrh	r2, [r1, #12]
 800a710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a714:	d031      	beq.n	800a77a <__ssputs_r+0x7e>
 800a716:	6825      	ldr	r5, [r4, #0]
 800a718:	6909      	ldr	r1, [r1, #16]
 800a71a:	1a6f      	subs	r7, r5, r1
 800a71c:	6965      	ldr	r5, [r4, #20]
 800a71e:	2302      	movs	r3, #2
 800a720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a724:	fb95 f5f3 	sdiv	r5, r5, r3
 800a728:	f109 0301 	add.w	r3, r9, #1
 800a72c:	443b      	add	r3, r7
 800a72e:	429d      	cmp	r5, r3
 800a730:	bf38      	it	cc
 800a732:	461d      	movcc	r5, r3
 800a734:	0553      	lsls	r3, r2, #21
 800a736:	d530      	bpl.n	800a79a <__ssputs_r+0x9e>
 800a738:	4629      	mov	r1, r5
 800a73a:	f7ff ff85 	bl	800a648 <_malloc_r>
 800a73e:	4606      	mov	r6, r0
 800a740:	b950      	cbnz	r0, 800a758 <__ssputs_r+0x5c>
 800a742:	230c      	movs	r3, #12
 800a744:	f8ca 3000 	str.w	r3, [sl]
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a74e:	81a3      	strh	r3, [r4, #12]
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a758:	463a      	mov	r2, r7
 800a75a:	6921      	ldr	r1, [r4, #16]
 800a75c:	f7ff fc32 	bl	8009fc4 <memcpy>
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	6126      	str	r6, [r4, #16]
 800a76e:	6165      	str	r5, [r4, #20]
 800a770:	443e      	add	r6, r7
 800a772:	1bed      	subs	r5, r5, r7
 800a774:	6026      	str	r6, [r4, #0]
 800a776:	60a5      	str	r5, [r4, #8]
 800a778:	464e      	mov	r6, r9
 800a77a:	454e      	cmp	r6, r9
 800a77c:	d900      	bls.n	800a780 <__ssputs_r+0x84>
 800a77e:	464e      	mov	r6, r9
 800a780:	4632      	mov	r2, r6
 800a782:	4641      	mov	r1, r8
 800a784:	6820      	ldr	r0, [r4, #0]
 800a786:	f000 f92d 	bl	800a9e4 <memmove>
 800a78a:	68a3      	ldr	r3, [r4, #8]
 800a78c:	1b9b      	subs	r3, r3, r6
 800a78e:	60a3      	str	r3, [r4, #8]
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	441e      	add	r6, r3
 800a794:	6026      	str	r6, [r4, #0]
 800a796:	2000      	movs	r0, #0
 800a798:	e7dc      	b.n	800a754 <__ssputs_r+0x58>
 800a79a:	462a      	mov	r2, r5
 800a79c:	f000 f93d 	bl	800aa1a <_realloc_r>
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d1e2      	bne.n	800a76c <__ssputs_r+0x70>
 800a7a6:	6921      	ldr	r1, [r4, #16]
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	f7ff feff 	bl	800a5ac <_free_r>
 800a7ae:	e7c8      	b.n	800a742 <__ssputs_r+0x46>

0800a7b0 <_svfiprintf_r>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	461d      	mov	r5, r3
 800a7b6:	898b      	ldrh	r3, [r1, #12]
 800a7b8:	061f      	lsls	r7, r3, #24
 800a7ba:	b09d      	sub	sp, #116	; 0x74
 800a7bc:	4680      	mov	r8, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	4616      	mov	r6, r2
 800a7c2:	d50f      	bpl.n	800a7e4 <_svfiprintf_r+0x34>
 800a7c4:	690b      	ldr	r3, [r1, #16]
 800a7c6:	b96b      	cbnz	r3, 800a7e4 <_svfiprintf_r+0x34>
 800a7c8:	2140      	movs	r1, #64	; 0x40
 800a7ca:	f7ff ff3d 	bl	800a648 <_malloc_r>
 800a7ce:	6020      	str	r0, [r4, #0]
 800a7d0:	6120      	str	r0, [r4, #16]
 800a7d2:	b928      	cbnz	r0, 800a7e0 <_svfiprintf_r+0x30>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	f8c8 3000 	str.w	r3, [r8]
 800a7da:	f04f 30ff 	mov.w	r0, #4294967295
 800a7de:	e0c8      	b.n	800a972 <_svfiprintf_r+0x1c2>
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	6163      	str	r3, [r4, #20]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ee:	2330      	movs	r3, #48	; 0x30
 800a7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7f4:	9503      	str	r5, [sp, #12]
 800a7f6:	f04f 0b01 	mov.w	fp, #1
 800a7fa:	4637      	mov	r7, r6
 800a7fc:	463d      	mov	r5, r7
 800a7fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a802:	b10b      	cbz	r3, 800a808 <_svfiprintf_r+0x58>
 800a804:	2b25      	cmp	r3, #37	; 0x25
 800a806:	d13e      	bne.n	800a886 <_svfiprintf_r+0xd6>
 800a808:	ebb7 0a06 	subs.w	sl, r7, r6
 800a80c:	d00b      	beq.n	800a826 <_svfiprintf_r+0x76>
 800a80e:	4653      	mov	r3, sl
 800a810:	4632      	mov	r2, r6
 800a812:	4621      	mov	r1, r4
 800a814:	4640      	mov	r0, r8
 800a816:	f7ff ff71 	bl	800a6fc <__ssputs_r>
 800a81a:	3001      	adds	r0, #1
 800a81c:	f000 80a4 	beq.w	800a968 <_svfiprintf_r+0x1b8>
 800a820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a822:	4453      	add	r3, sl
 800a824:	9309      	str	r3, [sp, #36]	; 0x24
 800a826:	783b      	ldrb	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 809d 	beq.w	800a968 <_svfiprintf_r+0x1b8>
 800a82e:	2300      	movs	r3, #0
 800a830:	f04f 32ff 	mov.w	r2, #4294967295
 800a834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	9307      	str	r3, [sp, #28]
 800a83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a840:	931a      	str	r3, [sp, #104]	; 0x68
 800a842:	462f      	mov	r7, r5
 800a844:	2205      	movs	r2, #5
 800a846:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a84a:	4850      	ldr	r0, [pc, #320]	; (800a98c <_svfiprintf_r+0x1dc>)
 800a84c:	f7f5 fce8 	bl	8000220 <memchr>
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	b9d0      	cbnz	r0, 800a88a <_svfiprintf_r+0xda>
 800a854:	06d9      	lsls	r1, r3, #27
 800a856:	bf44      	itt	mi
 800a858:	2220      	movmi	r2, #32
 800a85a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a85e:	071a      	lsls	r2, r3, #28
 800a860:	bf44      	itt	mi
 800a862:	222b      	movmi	r2, #43	; 0x2b
 800a864:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a868:	782a      	ldrb	r2, [r5, #0]
 800a86a:	2a2a      	cmp	r2, #42	; 0x2a
 800a86c:	d015      	beq.n	800a89a <_svfiprintf_r+0xea>
 800a86e:	9a07      	ldr	r2, [sp, #28]
 800a870:	462f      	mov	r7, r5
 800a872:	2000      	movs	r0, #0
 800a874:	250a      	movs	r5, #10
 800a876:	4639      	mov	r1, r7
 800a878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a87c:	3b30      	subs	r3, #48	; 0x30
 800a87e:	2b09      	cmp	r3, #9
 800a880:	d94d      	bls.n	800a91e <_svfiprintf_r+0x16e>
 800a882:	b1b8      	cbz	r0, 800a8b4 <_svfiprintf_r+0x104>
 800a884:	e00f      	b.n	800a8a6 <_svfiprintf_r+0xf6>
 800a886:	462f      	mov	r7, r5
 800a888:	e7b8      	b.n	800a7fc <_svfiprintf_r+0x4c>
 800a88a:	4a40      	ldr	r2, [pc, #256]	; (800a98c <_svfiprintf_r+0x1dc>)
 800a88c:	1a80      	subs	r0, r0, r2
 800a88e:	fa0b f000 	lsl.w	r0, fp, r0
 800a892:	4318      	orrs	r0, r3
 800a894:	9004      	str	r0, [sp, #16]
 800a896:	463d      	mov	r5, r7
 800a898:	e7d3      	b.n	800a842 <_svfiprintf_r+0x92>
 800a89a:	9a03      	ldr	r2, [sp, #12]
 800a89c:	1d11      	adds	r1, r2, #4
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	9103      	str	r1, [sp, #12]
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	db01      	blt.n	800a8aa <_svfiprintf_r+0xfa>
 800a8a6:	9207      	str	r2, [sp, #28]
 800a8a8:	e004      	b.n	800a8b4 <_svfiprintf_r+0x104>
 800a8aa:	4252      	negs	r2, r2
 800a8ac:	f043 0302 	orr.w	r3, r3, #2
 800a8b0:	9207      	str	r2, [sp, #28]
 800a8b2:	9304      	str	r3, [sp, #16]
 800a8b4:	783b      	ldrb	r3, [r7, #0]
 800a8b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a8b8:	d10c      	bne.n	800a8d4 <_svfiprintf_r+0x124>
 800a8ba:	787b      	ldrb	r3, [r7, #1]
 800a8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8be:	d133      	bne.n	800a928 <_svfiprintf_r+0x178>
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	1d1a      	adds	r2, r3, #4
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	9203      	str	r2, [sp, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bfb8      	it	lt
 800a8cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8d0:	3702      	adds	r7, #2
 800a8d2:	9305      	str	r3, [sp, #20]
 800a8d4:	4d2e      	ldr	r5, [pc, #184]	; (800a990 <_svfiprintf_r+0x1e0>)
 800a8d6:	7839      	ldrb	r1, [r7, #0]
 800a8d8:	2203      	movs	r2, #3
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f7f5 fca0 	bl	8000220 <memchr>
 800a8e0:	b138      	cbz	r0, 800a8f2 <_svfiprintf_r+0x142>
 800a8e2:	2340      	movs	r3, #64	; 0x40
 800a8e4:	1b40      	subs	r0, r0, r5
 800a8e6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ea:	9b04      	ldr	r3, [sp, #16]
 800a8ec:	4303      	orrs	r3, r0
 800a8ee:	3701      	adds	r7, #1
 800a8f0:	9304      	str	r3, [sp, #16]
 800a8f2:	7839      	ldrb	r1, [r7, #0]
 800a8f4:	4827      	ldr	r0, [pc, #156]	; (800a994 <_svfiprintf_r+0x1e4>)
 800a8f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8fa:	2206      	movs	r2, #6
 800a8fc:	1c7e      	adds	r6, r7, #1
 800a8fe:	f7f5 fc8f 	bl	8000220 <memchr>
 800a902:	2800      	cmp	r0, #0
 800a904:	d038      	beq.n	800a978 <_svfiprintf_r+0x1c8>
 800a906:	4b24      	ldr	r3, [pc, #144]	; (800a998 <_svfiprintf_r+0x1e8>)
 800a908:	bb13      	cbnz	r3, 800a950 <_svfiprintf_r+0x1a0>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	3307      	adds	r3, #7
 800a90e:	f023 0307 	bic.w	r3, r3, #7
 800a912:	3308      	adds	r3, #8
 800a914:	9303      	str	r3, [sp, #12]
 800a916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a918:	444b      	add	r3, r9
 800a91a:	9309      	str	r3, [sp, #36]	; 0x24
 800a91c:	e76d      	b.n	800a7fa <_svfiprintf_r+0x4a>
 800a91e:	fb05 3202 	mla	r2, r5, r2, r3
 800a922:	2001      	movs	r0, #1
 800a924:	460f      	mov	r7, r1
 800a926:	e7a6      	b.n	800a876 <_svfiprintf_r+0xc6>
 800a928:	2300      	movs	r3, #0
 800a92a:	3701      	adds	r7, #1
 800a92c:	9305      	str	r3, [sp, #20]
 800a92e:	4619      	mov	r1, r3
 800a930:	250a      	movs	r5, #10
 800a932:	4638      	mov	r0, r7
 800a934:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a938:	3a30      	subs	r2, #48	; 0x30
 800a93a:	2a09      	cmp	r2, #9
 800a93c:	d903      	bls.n	800a946 <_svfiprintf_r+0x196>
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0c8      	beq.n	800a8d4 <_svfiprintf_r+0x124>
 800a942:	9105      	str	r1, [sp, #20]
 800a944:	e7c6      	b.n	800a8d4 <_svfiprintf_r+0x124>
 800a946:	fb05 2101 	mla	r1, r5, r1, r2
 800a94a:	2301      	movs	r3, #1
 800a94c:	4607      	mov	r7, r0
 800a94e:	e7f0      	b.n	800a932 <_svfiprintf_r+0x182>
 800a950:	ab03      	add	r3, sp, #12
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	4622      	mov	r2, r4
 800a956:	4b11      	ldr	r3, [pc, #68]	; (800a99c <_svfiprintf_r+0x1ec>)
 800a958:	a904      	add	r1, sp, #16
 800a95a:	4640      	mov	r0, r8
 800a95c:	f7fe f8f0 	bl	8008b40 <_printf_float>
 800a960:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a964:	4681      	mov	r9, r0
 800a966:	d1d6      	bne.n	800a916 <_svfiprintf_r+0x166>
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	065b      	lsls	r3, r3, #25
 800a96c:	f53f af35 	bmi.w	800a7da <_svfiprintf_r+0x2a>
 800a970:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a972:	b01d      	add	sp, #116	; 0x74
 800a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a978:	ab03      	add	r3, sp, #12
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	4622      	mov	r2, r4
 800a97e:	4b07      	ldr	r3, [pc, #28]	; (800a99c <_svfiprintf_r+0x1ec>)
 800a980:	a904      	add	r1, sp, #16
 800a982:	4640      	mov	r0, r8
 800a984:	f7fe fb92 	bl	80090ac <_printf_i>
 800a988:	e7ea      	b.n	800a960 <_svfiprintf_r+0x1b0>
 800a98a:	bf00      	nop
 800a98c:	0801e9ec 	.word	0x0801e9ec
 800a990:	0801e9f2 	.word	0x0801e9f2
 800a994:	0801e9f6 	.word	0x0801e9f6
 800a998:	08008b41 	.word	0x08008b41
 800a99c:	0800a6fd 	.word	0x0800a6fd

0800a9a0 <_sbrk_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4c06      	ldr	r4, [pc, #24]	; (800a9bc <_sbrk_r+0x1c>)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	6023      	str	r3, [r4, #0]
 800a9ac:	f7fd fda2 	bl	80084f4 <_sbrk>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_sbrk_r+0x1a>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_sbrk_r+0x1a>
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	200006bc 	.word	0x200006bc

0800a9c0 <__ascii_mbtowc>:
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	b901      	cbnz	r1, 800a9c6 <__ascii_mbtowc+0x6>
 800a9c4:	a901      	add	r1, sp, #4
 800a9c6:	b142      	cbz	r2, 800a9da <__ascii_mbtowc+0x1a>
 800a9c8:	b14b      	cbz	r3, 800a9de <__ascii_mbtowc+0x1e>
 800a9ca:	7813      	ldrb	r3, [r2, #0]
 800a9cc:	600b      	str	r3, [r1, #0]
 800a9ce:	7812      	ldrb	r2, [r2, #0]
 800a9d0:	1c10      	adds	r0, r2, #0
 800a9d2:	bf18      	it	ne
 800a9d4:	2001      	movne	r0, #1
 800a9d6:	b002      	add	sp, #8
 800a9d8:	4770      	bx	lr
 800a9da:	4610      	mov	r0, r2
 800a9dc:	e7fb      	b.n	800a9d6 <__ascii_mbtowc+0x16>
 800a9de:	f06f 0001 	mvn.w	r0, #1
 800a9e2:	e7f8      	b.n	800a9d6 <__ascii_mbtowc+0x16>

0800a9e4 <memmove>:
 800a9e4:	4288      	cmp	r0, r1
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	eb01 0302 	add.w	r3, r1, r2
 800a9ec:	d807      	bhi.n	800a9fe <memmove+0x1a>
 800a9ee:	1e42      	subs	r2, r0, #1
 800a9f0:	4299      	cmp	r1, r3
 800a9f2:	d00a      	beq.n	800aa0a <memmove+0x26>
 800a9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a9fc:	e7f8      	b.n	800a9f0 <memmove+0xc>
 800a9fe:	4283      	cmp	r3, r0
 800aa00:	d9f5      	bls.n	800a9ee <memmove+0xa>
 800aa02:	1881      	adds	r1, r0, r2
 800aa04:	1ad2      	subs	r2, r2, r3
 800aa06:	42d3      	cmn	r3, r2
 800aa08:	d100      	bne.n	800aa0c <memmove+0x28>
 800aa0a:	bd10      	pop	{r4, pc}
 800aa0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa10:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa14:	e7f7      	b.n	800aa06 <memmove+0x22>

0800aa16 <__malloc_lock>:
 800aa16:	4770      	bx	lr

0800aa18 <__malloc_unlock>:
 800aa18:	4770      	bx	lr

0800aa1a <_realloc_r>:
 800aa1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	4614      	mov	r4, r2
 800aa20:	460e      	mov	r6, r1
 800aa22:	b921      	cbnz	r1, 800aa2e <_realloc_r+0x14>
 800aa24:	4611      	mov	r1, r2
 800aa26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa2a:	f7ff be0d 	b.w	800a648 <_malloc_r>
 800aa2e:	b922      	cbnz	r2, 800aa3a <_realloc_r+0x20>
 800aa30:	f7ff fdbc 	bl	800a5ac <_free_r>
 800aa34:	4625      	mov	r5, r4
 800aa36:	4628      	mov	r0, r5
 800aa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa3a:	f000 f821 	bl	800aa80 <_malloc_usable_size_r>
 800aa3e:	42a0      	cmp	r0, r4
 800aa40:	d20f      	bcs.n	800aa62 <_realloc_r+0x48>
 800aa42:	4621      	mov	r1, r4
 800aa44:	4638      	mov	r0, r7
 800aa46:	f7ff fdff 	bl	800a648 <_malloc_r>
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d0f2      	beq.n	800aa36 <_realloc_r+0x1c>
 800aa50:	4631      	mov	r1, r6
 800aa52:	4622      	mov	r2, r4
 800aa54:	f7ff fab6 	bl	8009fc4 <memcpy>
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	f7ff fda6 	bl	800a5ac <_free_r>
 800aa60:	e7e9      	b.n	800aa36 <_realloc_r+0x1c>
 800aa62:	4635      	mov	r5, r6
 800aa64:	e7e7      	b.n	800aa36 <_realloc_r+0x1c>

0800aa66 <__ascii_wctomb>:
 800aa66:	b149      	cbz	r1, 800aa7c <__ascii_wctomb+0x16>
 800aa68:	2aff      	cmp	r2, #255	; 0xff
 800aa6a:	bf85      	ittet	hi
 800aa6c:	238a      	movhi	r3, #138	; 0x8a
 800aa6e:	6003      	strhi	r3, [r0, #0]
 800aa70:	700a      	strbls	r2, [r1, #0]
 800aa72:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa76:	bf98      	it	ls
 800aa78:	2001      	movls	r0, #1
 800aa7a:	4770      	bx	lr
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	4770      	bx	lr

0800aa80 <_malloc_usable_size_r>:
 800aa80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa84:	1f18      	subs	r0, r3, #4
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bfbc      	itt	lt
 800aa8a:	580b      	ldrlt	r3, [r1, r0]
 800aa8c:	18c0      	addlt	r0, r0, r3
 800aa8e:	4770      	bx	lr

0800aa90 <fmod>:
 800aa90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa94:	ed2d 8b02 	vpush	{d8}
 800aa98:	b08b      	sub	sp, #44	; 0x2c
 800aa9a:	ec55 4b10 	vmov	r4, r5, d0
 800aa9e:	ec57 6b11 	vmov	r6, r7, d1
 800aaa2:	f000 f8b5 	bl	800ac10 <__ieee754_fmod>
 800aaa6:	4b2a      	ldr	r3, [pc, #168]	; (800ab50 <fmod+0xc0>)
 800aaa8:	eeb0 8a40 	vmov.f32	s16, s0
 800aaac:	eef0 8a60 	vmov.f32	s17, s1
 800aab0:	f993 8000 	ldrsb.w	r8, [r3]
 800aab4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800aab8:	d030      	beq.n	800ab1c <fmod+0x8c>
 800aaba:	4632      	mov	r2, r6
 800aabc:	463b      	mov	r3, r7
 800aabe:	4630      	mov	r0, r6
 800aac0:	4639      	mov	r1, r7
 800aac2:	f7f6 f853 	bl	8000b6c <__aeabi_dcmpun>
 800aac6:	bb48      	cbnz	r0, 800ab1c <fmod+0x8c>
 800aac8:	4622      	mov	r2, r4
 800aaca:	462b      	mov	r3, r5
 800aacc:	4620      	mov	r0, r4
 800aace:	4629      	mov	r1, r5
 800aad0:	f7f6 f84c 	bl	8000b6c <__aeabi_dcmpun>
 800aad4:	4681      	mov	r9, r0
 800aad6:	bb08      	cbnz	r0, 800ab1c <fmod+0x8c>
 800aad8:	2200      	movs	r2, #0
 800aada:	2300      	movs	r3, #0
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	f7f6 f812 	bl	8000b08 <__aeabi_dcmpeq>
 800aae4:	b1d0      	cbz	r0, 800ab1c <fmod+0x8c>
 800aae6:	2301      	movs	r3, #1
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	4b1a      	ldr	r3, [pc, #104]	; (800ab54 <fmod+0xc4>)
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aaf2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aaf6:	f8cd 9020 	str.w	r9, [sp, #32]
 800aafa:	f1b8 0f00 	cmp.w	r8, #0
 800aafe:	d116      	bne.n	800ab2e <fmod+0x9e>
 800ab00:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ab04:	4668      	mov	r0, sp
 800ab06:	f000 fa1d 	bl	800af44 <matherr>
 800ab0a:	b1d8      	cbz	r0, 800ab44 <fmod+0xb4>
 800ab0c:	9b08      	ldr	r3, [sp, #32]
 800ab0e:	b11b      	cbz	r3, 800ab18 <fmod+0x88>
 800ab10:	f7fd ff50 	bl	80089b4 <__errno>
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	6003      	str	r3, [r0, #0]
 800ab18:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ab1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ab20:	eef0 0a68 	vmov.f32	s1, s17
 800ab24:	b00b      	add	sp, #44	; 0x2c
 800ab26:	ecbd 8b02 	vpop	{d8}
 800ab2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab2e:	2200      	movs	r2, #0
 800ab30:	2300      	movs	r3, #0
 800ab32:	4610      	mov	r0, r2
 800ab34:	4619      	mov	r1, r3
 800ab36:	f7f5 fea9 	bl	800088c <__aeabi_ddiv>
 800ab3a:	f1b8 0f02 	cmp.w	r8, #2
 800ab3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab42:	d1df      	bne.n	800ab04 <fmod+0x74>
 800ab44:	f7fd ff36 	bl	80089b4 <__errno>
 800ab48:	2321      	movs	r3, #33	; 0x21
 800ab4a:	6003      	str	r3, [r0, #0]
 800ab4c:	e7de      	b.n	800ab0c <fmod+0x7c>
 800ab4e:	bf00      	nop
 800ab50:	20000214 	.word	0x20000214
 800ab54:	0801eb08 	.word	0x0801eb08

0800ab58 <fmodf>:
 800ab58:	b5d0      	push	{r4, r6, r7, lr}
 800ab5a:	ed2d 8b02 	vpush	{d8}
 800ab5e:	b08a      	sub	sp, #40	; 0x28
 800ab60:	eef0 8a40 	vmov.f32	s17, s0
 800ab64:	eeb0 8a60 	vmov.f32	s16, s1
 800ab68:	f000 f964 	bl	800ae34 <__ieee754_fmodf>
 800ab6c:	4b26      	ldr	r3, [pc, #152]	; (800ac08 <fmodf+0xb0>)
 800ab6e:	f993 4000 	ldrsb.w	r4, [r3]
 800ab72:	1c63      	adds	r3, r4, #1
 800ab74:	d035      	beq.n	800abe2 <fmodf+0x8a>
 800ab76:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7e:	d630      	bvs.n	800abe2 <fmodf+0x8a>
 800ab80:	eef4 8a68 	vcmp.f32	s17, s17
 800ab84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab88:	d62b      	bvs.n	800abe2 <fmodf+0x8a>
 800ab8a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ab8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab92:	d126      	bne.n	800abe2 <fmodf+0x8a>
 800ab94:	2301      	movs	r3, #1
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <fmodf+0xb4>)
 800ab9a:	9301      	str	r3, [sp, #4]
 800ab9c:	ee18 0a90 	vmov	r0, s17
 800aba0:	2300      	movs	r3, #0
 800aba2:	9308      	str	r3, [sp, #32]
 800aba4:	f7f5 fcf0 	bl	8000588 <__aeabi_f2d>
 800aba8:	4606      	mov	r6, r0
 800abaa:	460f      	mov	r7, r1
 800abac:	ee18 0a10 	vmov	r0, s16
 800abb0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800abb4:	f7f5 fce8 	bl	8000588 <__aeabi_f2d>
 800abb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abbc:	b9ac      	cbnz	r4, 800abea <fmodf+0x92>
 800abbe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abc2:	4668      	mov	r0, sp
 800abc4:	f000 f9be 	bl	800af44 <matherr>
 800abc8:	b1c8      	cbz	r0, 800abfe <fmodf+0xa6>
 800abca:	9b08      	ldr	r3, [sp, #32]
 800abcc:	b11b      	cbz	r3, 800abd6 <fmodf+0x7e>
 800abce:	f7fd fef1 	bl	80089b4 <__errno>
 800abd2:	9b08      	ldr	r3, [sp, #32]
 800abd4:	6003      	str	r3, [r0, #0]
 800abd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abda:	f7f6 f805 	bl	8000be8 <__aeabi_d2f>
 800abde:	ee00 0a10 	vmov	s0, r0
 800abe2:	b00a      	add	sp, #40	; 0x28
 800abe4:	ecbd 8b02 	vpop	{d8}
 800abe8:	bdd0      	pop	{r4, r6, r7, pc}
 800abea:	2200      	movs	r2, #0
 800abec:	2300      	movs	r3, #0
 800abee:	4610      	mov	r0, r2
 800abf0:	4619      	mov	r1, r3
 800abf2:	f7f5 fe4b 	bl	800088c <__aeabi_ddiv>
 800abf6:	2c02      	cmp	r4, #2
 800abf8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abfc:	d1e1      	bne.n	800abc2 <fmodf+0x6a>
 800abfe:	f7fd fed9 	bl	80089b4 <__errno>
 800ac02:	2321      	movs	r3, #33	; 0x21
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	e7e0      	b.n	800abca <fmodf+0x72>
 800ac08:	20000214 	.word	0x20000214
 800ac0c:	0801eb0d 	.word	0x0801eb0d

0800ac10 <__ieee754_fmod>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	ec53 2b11 	vmov	r2, r3, d1
 800ac18:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800ac1c:	ea5e 0402 	orrs.w	r4, lr, r2
 800ac20:	ec51 0b10 	vmov	r0, r1, d0
 800ac24:	461e      	mov	r6, r3
 800ac26:	ee11 5a10 	vmov	r5, s2
 800ac2a:	4694      	mov	ip, r2
 800ac2c:	d00c      	beq.n	800ac48 <__ieee754_fmod+0x38>
 800ac2e:	4c7a      	ldr	r4, [pc, #488]	; (800ae18 <__ieee754_fmod+0x208>)
 800ac30:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ac34:	45a0      	cmp	r8, r4
 800ac36:	4689      	mov	r9, r1
 800ac38:	dc06      	bgt.n	800ac48 <__ieee754_fmod+0x38>
 800ac3a:	4254      	negs	r4, r2
 800ac3c:	4314      	orrs	r4, r2
 800ac3e:	4f77      	ldr	r7, [pc, #476]	; (800ae1c <__ieee754_fmod+0x20c>)
 800ac40:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800ac44:	42bc      	cmp	r4, r7
 800ac46:	d909      	bls.n	800ac5c <__ieee754_fmod+0x4c>
 800ac48:	f7f5 fcf6 	bl	8000638 <__aeabi_dmul>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	f7f5 fe1c 	bl	800088c <__aeabi_ddiv>
 800ac54:	ec41 0b10 	vmov	d0, r0, r1
 800ac58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5c:	45f0      	cmp	r8, lr
 800ac5e:	ee10 2a10 	vmov	r2, s0
 800ac62:	4607      	mov	r7, r0
 800ac64:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800ac68:	dc0a      	bgt.n	800ac80 <__ieee754_fmod+0x70>
 800ac6a:	dbf3      	blt.n	800ac54 <__ieee754_fmod+0x44>
 800ac6c:	42a8      	cmp	r0, r5
 800ac6e:	d3f1      	bcc.n	800ac54 <__ieee754_fmod+0x44>
 800ac70:	d106      	bne.n	800ac80 <__ieee754_fmod+0x70>
 800ac72:	496b      	ldr	r1, [pc, #428]	; (800ae20 <__ieee754_fmod+0x210>)
 800ac74:	0fe4      	lsrs	r4, r4, #31
 800ac76:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ac7a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac7e:	e7e9      	b.n	800ac54 <__ieee754_fmod+0x44>
 800ac80:	4b68      	ldr	r3, [pc, #416]	; (800ae24 <__ieee754_fmod+0x214>)
 800ac82:	4598      	cmp	r8, r3
 800ac84:	dc49      	bgt.n	800ad1a <__ieee754_fmod+0x10a>
 800ac86:	f1b8 0f00 	cmp.w	r8, #0
 800ac8a:	d13d      	bne.n	800ad08 <__ieee754_fmod+0xf8>
 800ac8c:	4866      	ldr	r0, [pc, #408]	; (800ae28 <__ieee754_fmod+0x218>)
 800ac8e:	4611      	mov	r1, r2
 800ac90:	2900      	cmp	r1, #0
 800ac92:	dc36      	bgt.n	800ad02 <__ieee754_fmod+0xf2>
 800ac94:	459e      	cmp	lr, r3
 800ac96:	dc51      	bgt.n	800ad3c <__ieee754_fmod+0x12c>
 800ac98:	f1be 0f00 	cmp.w	lr, #0
 800ac9c:	d145      	bne.n	800ad2a <__ieee754_fmod+0x11a>
 800ac9e:	4b62      	ldr	r3, [pc, #392]	; (800ae28 <__ieee754_fmod+0x218>)
 800aca0:	4629      	mov	r1, r5
 800aca2:	2900      	cmp	r1, #0
 800aca4:	dc3e      	bgt.n	800ad24 <__ieee754_fmod+0x114>
 800aca6:	4961      	ldr	r1, [pc, #388]	; (800ae2c <__ieee754_fmod+0x21c>)
 800aca8:	4288      	cmp	r0, r1
 800acaa:	db4c      	blt.n	800ad46 <__ieee754_fmod+0x136>
 800acac:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800acb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800acb4:	4a5d      	ldr	r2, [pc, #372]	; (800ae2c <__ieee754_fmod+0x21c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	db59      	blt.n	800ad6e <__ieee754_fmod+0x15e>
 800acba:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800acbe:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800acc2:	1ac0      	subs	r0, r0, r3
 800acc4:	1b8a      	subs	r2, r1, r6
 800acc6:	eba7 050c 	sub.w	r5, r7, ip
 800acca:	2800      	cmp	r0, #0
 800accc:	d166      	bne.n	800ad9c <__ieee754_fmod+0x18c>
 800acce:	4567      	cmp	r7, ip
 800acd0:	bf38      	it	cc
 800acd2:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	bfbc      	itt	lt
 800acda:	463d      	movlt	r5, r7
 800acdc:	460a      	movlt	r2, r1
 800acde:	ea52 0105 	orrs.w	r1, r2, r5
 800ace2:	d0c6      	beq.n	800ac72 <__ieee754_fmod+0x62>
 800ace4:	494f      	ldr	r1, [pc, #316]	; (800ae24 <__ieee754_fmod+0x214>)
 800ace6:	428a      	cmp	r2, r1
 800ace8:	dd6d      	ble.n	800adc6 <__ieee754_fmod+0x1b6>
 800acea:	4950      	ldr	r1, [pc, #320]	; (800ae2c <__ieee754_fmod+0x21c>)
 800acec:	428b      	cmp	r3, r1
 800acee:	db70      	blt.n	800add2 <__ieee754_fmod+0x1c2>
 800acf0:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800acf4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800acf8:	4314      	orrs	r4, r2
 800acfa:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800acfe:	4628      	mov	r0, r5
 800ad00:	e7a8      	b.n	800ac54 <__ieee754_fmod+0x44>
 800ad02:	3801      	subs	r0, #1
 800ad04:	0049      	lsls	r1, r1, #1
 800ad06:	e7c3      	b.n	800ac90 <__ieee754_fmod+0x80>
 800ad08:	4848      	ldr	r0, [pc, #288]	; (800ae2c <__ieee754_fmod+0x21c>)
 800ad0a:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800ad0e:	0049      	lsls	r1, r1, #1
 800ad10:	2900      	cmp	r1, #0
 800ad12:	f100 30ff 	add.w	r0, r0, #4294967295
 800ad16:	dcfa      	bgt.n	800ad0e <__ieee754_fmod+0xfe>
 800ad18:	e7bc      	b.n	800ac94 <__ieee754_fmod+0x84>
 800ad1a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800ad1e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800ad22:	e7b7      	b.n	800ac94 <__ieee754_fmod+0x84>
 800ad24:	3b01      	subs	r3, #1
 800ad26:	0049      	lsls	r1, r1, #1
 800ad28:	e7bb      	b.n	800aca2 <__ieee754_fmod+0x92>
 800ad2a:	4b40      	ldr	r3, [pc, #256]	; (800ae2c <__ieee754_fmod+0x21c>)
 800ad2c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800ad30:	0049      	lsls	r1, r1, #1
 800ad32:	2900      	cmp	r1, #0
 800ad34:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad38:	dcfa      	bgt.n	800ad30 <__ieee754_fmod+0x120>
 800ad3a:	e7b4      	b.n	800aca6 <__ieee754_fmod+0x96>
 800ad3c:	ea4f 532e 	mov.w	r3, lr, asr #20
 800ad40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad44:	e7af      	b.n	800aca6 <__ieee754_fmod+0x96>
 800ad46:	1a0f      	subs	r7, r1, r0
 800ad48:	2f1f      	cmp	r7, #31
 800ad4a:	dc0a      	bgt.n	800ad62 <__ieee754_fmod+0x152>
 800ad4c:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800ad50:	fa08 f807 	lsl.w	r8, r8, r7
 800ad54:	fa22 f101 	lsr.w	r1, r2, r1
 800ad58:	ea41 0108 	orr.w	r1, r1, r8
 800ad5c:	fa02 f707 	lsl.w	r7, r2, r7
 800ad60:	e7a8      	b.n	800acb4 <__ieee754_fmod+0xa4>
 800ad62:	4933      	ldr	r1, [pc, #204]	; (800ae30 <__ieee754_fmod+0x220>)
 800ad64:	1a09      	subs	r1, r1, r0
 800ad66:	fa02 f101 	lsl.w	r1, r2, r1
 800ad6a:	2700      	movs	r7, #0
 800ad6c:	e7a2      	b.n	800acb4 <__ieee754_fmod+0xa4>
 800ad6e:	eba2 0c03 	sub.w	ip, r2, r3
 800ad72:	f1bc 0f1f 	cmp.w	ip, #31
 800ad76:	dc0a      	bgt.n	800ad8e <__ieee754_fmod+0x17e>
 800ad78:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800ad7c:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ad80:	fa25 f606 	lsr.w	r6, r5, r6
 800ad84:	ea46 060e 	orr.w	r6, r6, lr
 800ad88:	fa05 fc0c 	lsl.w	ip, r5, ip
 800ad8c:	e799      	b.n	800acc2 <__ieee754_fmod+0xb2>
 800ad8e:	4e28      	ldr	r6, [pc, #160]	; (800ae30 <__ieee754_fmod+0x220>)
 800ad90:	1af6      	subs	r6, r6, r3
 800ad92:	fa05 f606 	lsl.w	r6, r5, r6
 800ad96:	f04f 0c00 	mov.w	ip, #0
 800ad9a:	e792      	b.n	800acc2 <__ieee754_fmod+0xb2>
 800ad9c:	4567      	cmp	r7, ip
 800ad9e:	bf38      	it	cc
 800ada0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	da05      	bge.n	800adb4 <__ieee754_fmod+0x1a4>
 800ada8:	0ffa      	lsrs	r2, r7, #31
 800adaa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800adae:	007f      	lsls	r7, r7, #1
 800adb0:	3801      	subs	r0, #1
 800adb2:	e787      	b.n	800acc4 <__ieee754_fmod+0xb4>
 800adb4:	ea52 0105 	orrs.w	r1, r2, r5
 800adb8:	f43f af5b 	beq.w	800ac72 <__ieee754_fmod+0x62>
 800adbc:	0fe9      	lsrs	r1, r5, #31
 800adbe:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800adc2:	006f      	lsls	r7, r5, #1
 800adc4:	e7f4      	b.n	800adb0 <__ieee754_fmod+0x1a0>
 800adc6:	0fe8      	lsrs	r0, r5, #31
 800adc8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800adcc:	006d      	lsls	r5, r5, #1
 800adce:	3b01      	subs	r3, #1
 800add0:	e789      	b.n	800ace6 <__ieee754_fmod+0xd6>
 800add2:	1ac9      	subs	r1, r1, r3
 800add4:	2914      	cmp	r1, #20
 800add6:	dc0a      	bgt.n	800adee <__ieee754_fmod+0x1de>
 800add8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800addc:	fa02 f303 	lsl.w	r3, r2, r3
 800ade0:	40cd      	lsrs	r5, r1
 800ade2:	432b      	orrs	r3, r5
 800ade4:	410a      	asrs	r2, r1
 800ade6:	ea42 0104 	orr.w	r1, r2, r4
 800adea:	4618      	mov	r0, r3
 800adec:	e732      	b.n	800ac54 <__ieee754_fmod+0x44>
 800adee:	291f      	cmp	r1, #31
 800adf0:	dc07      	bgt.n	800ae02 <__ieee754_fmod+0x1f2>
 800adf2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800adf6:	40cd      	lsrs	r5, r1
 800adf8:	fa02 f303 	lsl.w	r3, r2, r3
 800adfc:	432b      	orrs	r3, r5
 800adfe:	4622      	mov	r2, r4
 800ae00:	e7f1      	b.n	800ade6 <__ieee754_fmod+0x1d6>
 800ae02:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ae06:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ae0a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ae0e:	33e2      	adds	r3, #226	; 0xe2
 800ae10:	fa42 f303 	asr.w	r3, r2, r3
 800ae14:	e7f3      	b.n	800adfe <__ieee754_fmod+0x1ee>
 800ae16:	bf00      	nop
 800ae18:	7fefffff 	.word	0x7fefffff
 800ae1c:	7ff00000 	.word	0x7ff00000
 800ae20:	0801eb18 	.word	0x0801eb18
 800ae24:	000fffff 	.word	0x000fffff
 800ae28:	fffffbed 	.word	0xfffffbed
 800ae2c:	fffffc02 	.word	0xfffffc02
 800ae30:	fffffbe2 	.word	0xfffffbe2

0800ae34 <__ieee754_fmodf>:
 800ae34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae36:	ee10 6a90 	vmov	r6, s1
 800ae3a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800ae3e:	ee10 3a10 	vmov	r3, s0
 800ae42:	d009      	beq.n	800ae58 <__ieee754_fmodf+0x24>
 800ae44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ae4c:	ee10 7a10 	vmov	r7, s0
 800ae50:	da02      	bge.n	800ae58 <__ieee754_fmodf+0x24>
 800ae52:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ae56:	dd0a      	ble.n	800ae6e <__ieee754_fmodf+0x3a>
 800ae58:	ee07 3a90 	vmov	s15, r3
 800ae5c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800ae60:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 800ae64:	ee17 3a90 	vmov	r3, s15
 800ae68:	ee00 3a10 	vmov	s0, r3
 800ae6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae6e:	42a9      	cmp	r1, r5
 800ae70:	dbfa      	blt.n	800ae68 <__ieee754_fmodf+0x34>
 800ae72:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800ae76:	d105      	bne.n	800ae84 <__ieee754_fmodf+0x50>
 800ae78:	4a30      	ldr	r2, [pc, #192]	; (800af3c <__ieee754_fmodf+0x108>)
 800ae7a:	0fe3      	lsrs	r3, r4, #31
 800ae7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	e7f1      	b.n	800ae68 <__ieee754_fmodf+0x34>
 800ae84:	4b2e      	ldr	r3, [pc, #184]	; (800af40 <__ieee754_fmodf+0x10c>)
 800ae86:	4299      	cmp	r1, r3
 800ae88:	dc3e      	bgt.n	800af08 <__ieee754_fmodf+0xd4>
 800ae8a:	020a      	lsls	r2, r1, #8
 800ae8c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800ae90:	2a00      	cmp	r2, #0
 800ae92:	dc36      	bgt.n	800af02 <__ieee754_fmodf+0xce>
 800ae94:	429d      	cmp	r5, r3
 800ae96:	dc3a      	bgt.n	800af0e <__ieee754_fmodf+0xda>
 800ae98:	022b      	lsls	r3, r5, #8
 800ae9a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	f102 32ff 	add.w	r2, r2, #4294967295
 800aea4:	d5fb      	bpl.n	800ae9e <__ieee754_fmodf+0x6a>
 800aea6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800aeaa:	bfbb      	ittet	lt
 800aeac:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800aeb0:	1a1b      	sublt	r3, r3, r0
 800aeb2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800aeb6:	4099      	lsllt	r1, r3
 800aeb8:	bfa8      	it	ge
 800aeba:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 800aebe:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800aec2:	bfb5      	itete	lt
 800aec4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800aec8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800aecc:	1a9b      	sublt	r3, r3, r2
 800aece:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800aed2:	bfb8      	it	lt
 800aed4:	409d      	lsllt	r5, r3
 800aed6:	1a80      	subs	r0, r0, r2
 800aed8:	1b4b      	subs	r3, r1, r5
 800aeda:	b9d8      	cbnz	r0, 800af14 <__ieee754_fmodf+0xe0>
 800aedc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800aee0:	bf28      	it	cs
 800aee2:	460b      	movcs	r3, r1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0c7      	beq.n	800ae78 <__ieee754_fmodf+0x44>
 800aee8:	4915      	ldr	r1, [pc, #84]	; (800af40 <__ieee754_fmodf+0x10c>)
 800aeea:	428b      	cmp	r3, r1
 800aeec:	dd1a      	ble.n	800af24 <__ieee754_fmodf+0xf0>
 800aeee:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800aef2:	db1a      	blt.n	800af2a <__ieee754_fmodf+0xf6>
 800aef4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800aef8:	4323      	orrs	r3, r4
 800aefa:	327f      	adds	r2, #127	; 0x7f
 800aefc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af00:	e7b2      	b.n	800ae68 <__ieee754_fmodf+0x34>
 800af02:	3801      	subs	r0, #1
 800af04:	0052      	lsls	r2, r2, #1
 800af06:	e7c3      	b.n	800ae90 <__ieee754_fmodf+0x5c>
 800af08:	15c8      	asrs	r0, r1, #23
 800af0a:	387f      	subs	r0, #127	; 0x7f
 800af0c:	e7c2      	b.n	800ae94 <__ieee754_fmodf+0x60>
 800af0e:	15ea      	asrs	r2, r5, #23
 800af10:	3a7f      	subs	r2, #127	; 0x7f
 800af12:	e7c8      	b.n	800aea6 <__ieee754_fmodf+0x72>
 800af14:	2b00      	cmp	r3, #0
 800af16:	da02      	bge.n	800af1e <__ieee754_fmodf+0xea>
 800af18:	0049      	lsls	r1, r1, #1
 800af1a:	3801      	subs	r0, #1
 800af1c:	e7dc      	b.n	800aed8 <__ieee754_fmodf+0xa4>
 800af1e:	d0ab      	beq.n	800ae78 <__ieee754_fmodf+0x44>
 800af20:	0059      	lsls	r1, r3, #1
 800af22:	e7fa      	b.n	800af1a <__ieee754_fmodf+0xe6>
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	3a01      	subs	r2, #1
 800af28:	e7df      	b.n	800aeea <__ieee754_fmodf+0xb6>
 800af2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af32:	3282      	adds	r2, #130	; 0x82
 800af34:	4113      	asrs	r3, r2
 800af36:	4323      	orrs	r3, r4
 800af38:	e796      	b.n	800ae68 <__ieee754_fmodf+0x34>
 800af3a:	bf00      	nop
 800af3c:	0801eb28 	.word	0x0801eb28
 800af40:	007fffff 	.word	0x007fffff

0800af44 <matherr>:
 800af44:	2000      	movs	r0, #0
 800af46:	4770      	bx	lr

0800af48 <_init>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	bf00      	nop
 800af4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4e:	bc08      	pop	{r3}
 800af50:	469e      	mov	lr, r3
 800af52:	4770      	bx	lr

0800af54 <_fini>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	bf00      	nop
 800af58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5a:	bc08      	pop	{r3}
 800af5c:	469e      	mov	lr, r3
 800af5e:	4770      	bx	lr
