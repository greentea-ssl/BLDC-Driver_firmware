
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139a0  08009670  08009670  00019670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d010  0801d010  000300ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801d010  0801d010  0002d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d018  0801d018  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d018  0801d018  0002d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d01c  0801d01c  0002d01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0801d020  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  200000ac  0801d0cc  000300ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0801d0cc  00030554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014358  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d51  00000000  00000000  00044434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  00047188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00048330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024354  00000000  00000000  00049350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6de  00000000  00000000  0006d6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8ed4  00000000  00000000  0007cd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155c56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  00155cd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009658 	.word	0x08009658

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	08009658 	.word	0x08009658

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f001 fab5 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f007 f9e2 	bl	8008324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 facd 	bl	800252a <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f001 fa95 	bl	80024d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000040 	.word	0x20000040
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	20000000 	.word	0x20000000

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000204 	.word	0x20000204

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000204 	.word	0x20000204

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_Delay+0x40>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e033      	b.n	80010ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f004 ff14 	bl	8005e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	d118      	bne.n	80010c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001096:	f023 0302 	bic.w	r3, r3, #2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fa5a 	bl	800155c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_Start_DMA+0x1e>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e0cc      	b.n	8001290 <HAL_ADC_Start_DMA+0x1b8>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b01      	cmp	r3, #1
 800110a:	d018      	beq.n	800113e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <HAL_ADC_Start_DMA+0x1c0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a5e      	ldr	r2, [pc, #376]	; (800129c <HAL_ADC_Start_DMA+0x1c4>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9a      	lsrs	r2, r3, #18
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001130:	e002      	b.n	8001138 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3b01      	subs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	f040 80a0 	bne.w	800128e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	d106      	bne.n	800119c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f023 0206 	bic.w	r2, r3, #6
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
 800119a:	e002      	b.n	80011a2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_ADC_Start_DMA+0x1c8>)
 80011ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b2:	4a3c      	ldr	r2, [pc, #240]	; (80012a4 <HAL_ADC_Start_DMA+0x1cc>)
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <HAL_ADC_Start_DMA+0x1d0>)
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_ADC_Start_DMA+0x1d4>)
 80011c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	334c      	adds	r3, #76	; 0x4c
 80011fa:	4619      	mov	r1, r3
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f001 fa4e 	bl	80026a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	2b00      	cmp	r3, #0
 800120e:	d12a      	bne.n	8001266 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <HAL_ADC_Start_DMA+0x1d8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d015      	beq.n	8001246 <HAL_ADC_Start_DMA+0x16e>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <HAL_ADC_Start_DMA+0x1dc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d105      	bne.n	8001230 <HAL_ADC_Start_DMA+0x158>
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_ADC_Start_DMA+0x1c8>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 031f 	and.w	r3, r3, #31
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00a      	beq.n	8001246 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <HAL_ADC_Start_DMA+0x1e0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d129      	bne.n	800128e <HAL_ADC_Start_DMA+0x1b6>
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_ADC_Start_DMA+0x1c8>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2b0f      	cmp	r3, #15
 8001244:	d823      	bhi.n	800128e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d11c      	bne.n	800128e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	e013      	b.n	800128e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_ADC_Start_DMA+0x1d8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d10e      	bne.n	800128e <HAL_ADC_Start_DMA+0x1b6>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d107      	bne.n	800128e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800128c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000040 	.word	0x20000040
 800129c:	431bde83 	.word	0x431bde83
 80012a0:	40012300 	.word	0x40012300
 80012a4:	08001755 	.word	0x08001755
 80012a8:	0800180f 	.word	0x0800180f
 80012ac:	0800182b 	.word	0x0800182b
 80012b0:	40012000 	.word	0x40012000
 80012b4:	40012100 	.word	0x40012100
 80012b8:	40012200 	.word	0x40012200

080012bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1c>
 8001310:	2302      	movs	r3, #2
 8001312:	e113      	b.n	800153c <HAL_ADC_ConfigChannel+0x244>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d925      	bls.n	8001370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d9      	ldr	r1, [r3, #12]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3b1e      	subs	r3, #30
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	4603      	mov	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4403      	add	r3, r0
 8001362:	3b1e      	subs	r3, #30
 8001364:	409a      	lsls	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e022      	b.n	80013b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4403      	add	r3, r0
 80013ac:	409a      	lsls	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d824      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b05      	subs	r3, #5
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
 8001406:	e04c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d824      	bhi.n	800145a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43da      	mvns	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	400a      	ands	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b23      	subs	r3, #35	; 0x23
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	e023      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	; 0x41
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b41      	subs	r3, #65	; 0x41
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_ADC_ConfigChannel+0x250>)
 80014a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_ADC_ConfigChannel+0x254>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d10f      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1d8>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d10b      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_ADC_ConfigChannel+0x254>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12b      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23a>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <HAL_ADC_ConfigChannel+0x258>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d003      	beq.n	80014ec <HAL_ADC_ConfigChannel+0x1f4>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b11      	cmp	r3, #17
 80014ea:	d122      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_ADC_ConfigChannel+0x258>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d111      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_ADC_ConfigChannel+0x25c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_ADC_ConfigChannel+0x260>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9a      	lsrs	r2, r3, #18
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3b01      	subs	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40012300 	.word	0x40012300
 800154c:	40012000 	.word	0x40012000
 8001550:	10000012 	.word	0x10000012
 8001554:	20000040 	.word	0x20000040
 8001558:	431bde83 	.word	0x431bde83

0800155c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001564:	4b79      	ldr	r3, [pc, #484]	; (800174c <ADC_Init+0x1f0>)
 8001566:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	431a      	orrs	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	021a      	lsls	r2, r3, #8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6899      	ldr	r1, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	4a58      	ldr	r2, [pc, #352]	; (8001750 <ADC_Init+0x1f4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d022      	beq.n	800163a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001602:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6899      	ldr	r1, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6899      	ldr	r1, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	e00f      	b.n	800165a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001658:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0202 	bic.w	r2, r2, #2
 8001668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6899      	ldr	r1, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e1b      	ldrb	r3, [r3, #24]
 8001674:	005a      	lsls	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01b      	beq.n	80016c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001696:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	3b01      	subs	r3, #1
 80016b4:	035a      	lsls	r2, r3, #13
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	e007      	b.n	80016d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	051a      	lsls	r2, r3, #20
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001712:	025a      	lsls	r2, r3, #9
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800172a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6899      	ldr	r1, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	029a      	lsls	r2, r3, #10
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40012300 	.word	0x40012300
 8001750:	0f000001 	.word	0x0f000001

08001754 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800176a:	2b00      	cmp	r3, #0
 800176c:	d13c      	bne.n	80017e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12b      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800178c:	2b00      	cmp	r3, #0
 800178e:	d127      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d119      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0220 	bic.w	r2, r2, #32
 80017ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff fd6b 	bl	80012bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017e6:	e00e      	b.n	8001806 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7ff fd75 	bl	80012e4 <HAL_ADC_ErrorCallback>
}
 80017fa:	e004      	b.n	8001806 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff fd57 	bl	80012d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f043 0204 	orr.w	r2, r3, #4
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff fd4a 	bl	80012e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0ed      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f004 fc8a 	bl	8006190 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0202 	bic.w	r2, r2, #2
 800188a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff fbb2 	bl	8000ff4 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001892:	e012      	b.n	80018ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001894:	f7ff fbae 	bl	8000ff4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b0a      	cmp	r3, #10
 80018a0:	d90b      	bls.n	80018ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2205      	movs	r2, #5
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0c5      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e5      	bne.n	8001894 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff fb8c 	bl	8000ff4 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018de:	e012      	b.n	8001906 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e0:	f7ff fb88 	bl	8000ff4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d90b      	bls.n	8001906 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2205      	movs	r2, #5
 80018fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e09f      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0e5      	beq.n	80018e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7e1b      	ldrb	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7e5b      	ldrb	r3, [r3, #25]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001966:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e9b      	ldrb	r3, [r3, #26]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d108      	bne.n	8001982 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e007      	b.n	8001992 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0220 	bic.w	r2, r2, #32
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7edb      	ldrb	r3, [r3, #27]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0210 	bic.w	r2, r2, #16
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e007      	b.n	80019bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0210 	orr.w	r2, r2, #16
 80019ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7f1b      	ldrb	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0208 	orr.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0208 	bic.w	r2, r2, #8
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7f5b      	ldrb	r3, [r3, #29]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0204 	orr.w	r2, r2, #4
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e007      	b.n	8001a10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0204 	bic.w	r2, r2, #4
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	ea42 0103 	orr.w	r1, r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a68:	7cfb      	ldrb	r3, [r7, #19]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d003      	beq.n	8001a76 <HAL_CAN_ConfigFilter+0x26>
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	f040 80be 	bne.w	8001bf2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a76:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <HAL_CAN_ConfigFilter+0x1bc>)
 8001a78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d123      	bne.n	8001b20 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001afa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3248      	adds	r2, #72	; 0x48
 8001b00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b16:	6979      	ldr	r1, [r7, #20]
 8001b18:	3348      	adds	r3, #72	; 0x48
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d122      	bne.n	8001b6e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3248      	adds	r2, #72	; 0x48
 8001b4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b64:	6979      	ldr	r1, [r7, #20]
 8001b66:	3348      	adds	r3, #72	; 0x48
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b88:	e007      	b.n	8001b9a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	401a      	ands	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bb4:	e007      	b.n	8001bc6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001be4:	f023 0201 	bic.w	r2, r3, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e006      	b.n	8001c00 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40006400 	.word	0x40006400

08001c10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d12e      	bne.n	8001c82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f9da 	bl	8000ff4 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c42:	e012      	b.n	8001c6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c44:	f7ff f9d6 	bl	8000ff4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b0a      	cmp	r3, #10
 8001c50:	d90b      	bls.n	8001c6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2205      	movs	r2, #5
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e012      	b.n	8001c90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e5      	bne.n	8001c44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e006      	b.n	8001c90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d003      	beq.n	8001cbc <HAL_CAN_GetRxMessage+0x24>
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	f040 80f4 	bne.w	8001ea4 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d116      	bne.n	8001cfe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0e8      	b.n	8001eb2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0d9      	b.n	8001eb2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	331b      	adds	r3, #27
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0204 	and.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10c      	bne.n	8001d36 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	331b      	adds	r3, #27
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0d5b      	lsrs	r3, r3, #21
 8001d2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e00b      	b.n	8001d4e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	331b      	adds	r3, #27
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	331b      	adds	r3, #27
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	331b      	adds	r3, #27
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	331b      	adds	r3, #27
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	331b      	adds	r3, #27
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0a1a      	lsrs	r2, r3, #8
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0c1a      	lsrs	r2, r3, #16
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	3302      	adds	r3, #2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e1a      	lsrs	r2, r3, #24
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3303      	adds	r3, #3
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	3304      	adds	r3, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0a1a      	lsrs	r2, r3, #8
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	3305      	adds	r3, #5
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0c1a      	lsrs	r2, r3, #16
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3306      	adds	r3, #6
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0e1a      	lsrs	r2, r3, #24
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3307      	adds	r3, #7
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0220 	orr.w	r2, r2, #32
 8001e9e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e006      	b.n	8001eb2 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d002      	beq.n	8001edc <HAL_CAN_ActivateNotification+0x1e>
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d109      	bne.n	8001ef0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6959      	ldr	r1, [r3, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e006      	b.n	8001efe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b08a      	sub	sp, #40	; 0x28
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d07c      	beq.n	800204a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d023      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f004 feef 	bl	8006d50 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f72:	e016      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e00c      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e002      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f965 	bl	800226c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d024      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f004 fed5 	bl	8006d70 <HAL_CAN_TxMailbox1CompleteCallback>
 8001fc6:	e016      	b.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fda:	e00c      	b.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	e002      	b.n	8001ff6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f945 	bl	8002280 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d024      	beq.n	800204a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002008:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f004 febb 	bl	8006d90 <HAL_CAN_TxMailbox2CompleteCallback>
 800201a:	e016      	b.n	800204a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	e00c      	b.n	800204a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	e002      	b.n	800204a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f925 	bl	8002294 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00c      	beq.n	800206e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002064:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2210      	movs	r2, #16
 800206c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2208      	movs	r2, #8
 8002088:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f90c 	bl	80022a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f004 fe81 	bl	8006db0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00c      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2208      	movs	r2, #8
 80020ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8ee 	bl	80022d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8d5 	bl	80022bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2210      	movs	r2, #16
 800212c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8d8 	bl	80022e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2208      	movs	r2, #8
 800214e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8d1 	bl	80022f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d075      	beq.n	800224c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06c      	beq.n	8002244 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d03d      	beq.n	8002244 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d038      	beq.n	8002244 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d8:	2b30      	cmp	r3, #48	; 0x30
 80021da:	d017      	beq.n	800220c <HAL_CAN_IRQHandler+0x302>
 80021dc:	2b30      	cmp	r3, #48	; 0x30
 80021de:	d804      	bhi.n	80021ea <HAL_CAN_IRQHandler+0x2e0>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d009      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x2ee>
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d00c      	beq.n	8002202 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021e8:	e024      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80021ea:	2b50      	cmp	r3, #80	; 0x50
 80021ec:	d018      	beq.n	8002220 <HAL_CAN_IRQHandler+0x316>
 80021ee:	2b60      	cmp	r3, #96	; 0x60
 80021f0:	d01b      	beq.n	800222a <HAL_CAN_IRQHandler+0x320>
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d00f      	beq.n	8002216 <HAL_CAN_IRQHandler+0x30c>
            break;
 80021f6:	e01d      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002200:	e018      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f043 0310 	orr.w	r3, r3, #16
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800220a:	e013      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002214:	e00e      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800221e:	e009      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002228:	e004      	b.n	8002234 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002232:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002242:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f854 	bl	800230c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <__NVIC_EnableIRQ+0x38>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248c:	d301      	bcc.n	8002492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <SysTick_Config+0x40>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249a:	210f      	movs	r1, #15
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f7ff ff8e 	bl	80023c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <SysTick_Config+0x40>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SysTick_Config+0x40>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff29 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e8:	f7ff ff3e 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f7ff ff8e 	bl	8002414 <NVIC_EncodePriority>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff5d 	bl	80023c0 <__NVIC_SetPriority>
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff31 	bl	8002384 <__NVIC_EnableIRQ>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ffa2 	bl	800247c <SysTick_Config>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7fe fd50 	bl	8000ff4 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e099      	b.n	8002694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002580:	e00f      	b.n	80025a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002582:	f7fe fd37 	bl	8000ff4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b05      	cmp	r3, #5
 800258e:	d908      	bls.n	80025a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2203      	movs	r2, #3
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e078      	b.n	8002694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e8      	bne.n	8002582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <HAL_DMA_Init+0x158>)
 80025bc:	4013      	ands	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d107      	bne.n	800260c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4313      	orrs	r3, r2
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0307 	bic.w	r3, r3, #7
 8002622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b04      	cmp	r3, #4
 8002634:	d117      	bne.n	8002666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fa99 	bl	8002b80 <DMA_CheckFifoParam>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002662:	2301      	movs	r3, #1
 8002664:	e016      	b.n	8002694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa50 	bl	8002b14 <DMA_CalcBaseAndBitshift>
 8002674:	4603      	mov	r3, r0
 8002676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	223f      	movs	r2, #63	; 0x3f
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	f010803f 	.word	0xf010803f

080026a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_DMA_Start_IT+0x26>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e048      	b.n	8002758 <HAL_DMA_Start_IT+0xb8>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d137      	bne.n	800274a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f9e2 	bl	8002ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	223f      	movs	r2, #63	; 0x3f
 80026fa:	409a      	lsls	r2, r3
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0216 	orr.w	r2, r2, #22
 800270e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0208 	orr.w	r2, r2, #8
 8002736:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d004      	beq.n	800277e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00c      	b.n	8002798 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2205      	movs	r2, #5
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b0:	4b92      	ldr	r3, [pc, #584]	; (80029fc <HAL_DMA_IRQHandler+0x258>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a92      	ldr	r2, [pc, #584]	; (8002a00 <HAL_DMA_IRQHandler+0x25c>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a9b      	lsrs	r3, r3, #10
 80027bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2208      	movs	r2, #8
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01a      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2208      	movs	r2, #8
 80027fe:	409a      	lsls	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	2201      	movs	r2, #1
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2201      	movs	r2, #1
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	2204      	movs	r2, #4
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2204      	movs	r2, #4
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	f043 0204 	orr.w	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	2210      	movs	r2, #16
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d043      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03c      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2210      	movs	r2, #16
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
 80028d2:	e01f      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
 80028e4:	e016      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0208 	bic.w	r2, r2, #8
 8002902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2220      	movs	r2, #32
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 808e 	beq.w	8002a42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8086 	beq.w	8002a42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2220      	movs	r2, #32
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b05      	cmp	r3, #5
 800294c:	d136      	bne.n	80029bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0216 	bic.w	r2, r2, #22
 800295c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_DMA_IRQHandler+0x1da>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0208 	bic.w	r2, r2, #8
 800298c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	223f      	movs	r2, #63	; 0x3f
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d07d      	beq.n	8002aae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
        }
        return;
 80029ba:	e078      	b.n	8002aae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01c      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d108      	bne.n	80029ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d030      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e02b      	b.n	8002a42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d027      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e022      	b.n	8002a42 <HAL_DMA_IRQHandler+0x29e>
 80029fc:	20000040 	.word	0x20000040
 8002a00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0210 	bic.w	r2, r2, #16
 8002a20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d032      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d022      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2205      	movs	r2, #5
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3301      	adds	r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d307      	bcc.n	8002a8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f2      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x2ca>
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
 8002aac:	e000      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002aae:	bf00      	nop
    }
  }
}
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop

08002ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d108      	bne.n	8002af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002af6:	e007      	b.n	8002b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3b10      	subs	r3, #16
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <DMA_CalcBaseAndBitshift+0x64>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <DMA_CalcBaseAndBitshift+0x68>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d909      	bls.n	8002b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	659a      	str	r2, [r3, #88]	; 0x58
 8002b54:	e007      	b.n	8002b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	aaaaaaab 	.word	0xaaaaaaab
 8002b7c:	08009680 	.word	0x08009680

08002b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11f      	bne.n	8002bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d855      	bhi.n	8002c4c <DMA_CheckFifoParam+0xcc>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <DMA_CheckFifoParam+0x28>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002bcb 	.word	0x08002bcb
 8002bb0:	08002bb9 	.word	0x08002bb9
 8002bb4:	08002c4d 	.word	0x08002c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d045      	beq.n	8002c50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e042      	b.n	8002c50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bd2:	d13f      	bne.n	8002c54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e03c      	b.n	8002c54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be2:	d121      	bne.n	8002c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d836      	bhi.n	8002c58 <DMA_CheckFifoParam+0xd8>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <DMA_CheckFifoParam+0x70>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c07 	.word	0x08002c07
 8002bf8:	08002c01 	.word	0x08002c01
 8002bfc:	08002c19 	.word	0x08002c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e02f      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d024      	beq.n	8002c5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c16:	e021      	b.n	8002c5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c20:	d11e      	bne.n	8002c60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c26:	e01b      	b.n	8002c60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <DMA_CheckFifoParam+0xb4>
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d003      	beq.n	8002c3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c32:	e018      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e015      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e00b      	b.n	8002c64 <DMA_CheckFifoParam+0xe4>
      break;
 8002c4c:	bf00      	nop
 8002c4e:	e00a      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;
 8002c50:	bf00      	nop
 8002c52:	e008      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;
 8002c54:	bf00      	nop
 8002c56:	e006      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e004      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;
 8002c5c:	bf00      	nop
 8002c5e:	e002      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <DMA_CheckFifoParam+0xe6>
      break;
 8002c64:	bf00      	nop
    }
  } 
  
  return status; 
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e165      	b.n	8002f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c90:	2201      	movs	r2, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	f040 8154 	bne.w	8002f56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x4a>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b12      	cmp	r3, #18
 8002cbc:	d123      	bne.n	8002d06 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08da      	lsrs	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	69b9      	ldr	r1, [r7, #24]
 8002d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0203 	and.w	r2, r3, #3
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d00b      	beq.n	8002d5a <HAL_GPIO_Init+0xe6>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d4e:	2b11      	cmp	r3, #17
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80ae 	beq.w	8002f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b5c      	ldr	r3, [pc, #368]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4a5b      	ldr	r2, [pc, #364]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e16:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_GPIO_Init+0x300>)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_GPIO_Init+0x304>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d025      	beq.n	8002e8e <HAL_GPIO_Init+0x21a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_GPIO_Init+0x308>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01f      	beq.n	8002e8a <HAL_GPIO_Init+0x216>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_GPIO_Init+0x30c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d019      	beq.n	8002e86 <HAL_GPIO_Init+0x212>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_GPIO_Init+0x310>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	; (8002f88 <HAL_GPIO_Init+0x314>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_GPIO_Init+0x20a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a49      	ldr	r2, [pc, #292]	; (8002f8c <HAL_GPIO_Init+0x318>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <HAL_GPIO_Init+0x206>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a48      	ldr	r2, [pc, #288]	; (8002f90 <HAL_GPIO_Init+0x31c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_GPIO_Init+0x202>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x21c>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x21c>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x21c>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x21c>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x21c>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x21c>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x21c>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea0:	4934      	ldr	r1, [pc, #208]	; (8002f74 <HAL_GPIO_Init+0x300>)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed2:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <HAL_GPIO_Init+0x320>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	f67f ae96 	bls.w	8002c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	3724      	adds	r7, #36	; 0x24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40013800 	.word	0x40013800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40020800 	.word	0x40020800
 8002f84:	40020c00 	.word	0x40020c00
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40021400 	.word	0x40021400
 8002f90:	40021800 	.word	0x40021800
 8002f94:	40013c00 	.word	0x40013c00

08002f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa8:	787b      	ldrb	r3, [r7, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fb4:	e003      	b.n	8002fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	041a      	lsls	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	619a      	str	r2, [r3, #24]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	401a      	ands	r2, r3
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d104      	bne.n	8002fee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	041a      	lsls	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0ca      	b.n	80031aa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d90c      	bls.n	800303c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b64      	ldr	r3, [pc, #400]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b6      	b.n	80031aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a51      	ldr	r2, [pc, #324]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b4f      	ldr	r3, [pc, #316]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494c      	ldr	r1, [pc, #304]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d044      	beq.n	8003120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d119      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07d      	b.n	80031aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d003      	beq.n	80030be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b3e      	ldr	r3, [pc, #248]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06d      	b.n	80031aa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e065      	b.n	80031aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4933      	ldr	r1, [pc, #204]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fd ff80 	bl	8000ff4 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fd ff7c 	bl	8000ff4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04d      	b.n	80031aa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d20c      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e030      	b.n	80031aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4915      	ldr	r1, [pc, #84]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490d      	ldr	r1, [pc, #52]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f851 	bl	800322c <HAL_RCC_GetSysClockFreq>
 800318a:	4601      	mov	r1, r0
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	4a09      	ldr	r2, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	5cd3      	ldrb	r3, [r2, r3]
 800319a:	fa21 f303 	lsr.w	r3, r1, r3
 800319e:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fd fee2 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	0801cf40 	.word	0x0801cf40
 80031c0:	20000040 	.word	0x20000040

080031c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000040 	.word	0x20000040

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e0:	f7ff fff0 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 80031e4:	4601      	mov	r1, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0a9b      	lsrs	r3, r3, #10
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4a03      	ldr	r2, [pc, #12]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
 80031f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	0801cf50 	.word	0x0801cf50

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003208:	f7ff ffdc 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 800320c:	4601      	mov	r1, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0b5b      	lsrs	r3, r3, #13
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4a03      	ldr	r2, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	0801cf50 	.word	0x0801cf50

0800322c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003246:	4bc6      	ldr	r3, [pc, #792]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b0c      	cmp	r3, #12
 8003250:	f200 817e 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x324>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <HAL_RCC_GetSysClockFreq+0x30>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003291 	.word	0x08003291
 8003260:	08003551 	.word	0x08003551
 8003264:	08003551 	.word	0x08003551
 8003268:	08003551 	.word	0x08003551
 800326c:	08003297 	.word	0x08003297
 8003270:	08003551 	.word	0x08003551
 8003274:	08003551 	.word	0x08003551
 8003278:	08003551 	.word	0x08003551
 800327c:	0800329d 	.word	0x0800329d
 8003280:	08003551 	.word	0x08003551
 8003284:	08003551 	.word	0x08003551
 8003288:	08003551 	.word	0x08003551
 800328c:	080033f9 	.word	0x080033f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4bb4      	ldr	r3, [pc, #720]	; (8003564 <HAL_RCC_GetSysClockFreq+0x338>)
 8003292:	613b      	str	r3, [r7, #16]
       break;
 8003294:	e15f      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003296:	4bb4      	ldr	r3, [pc, #720]	; (8003568 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003298:	613b      	str	r3, [r7, #16]
      break;
 800329a:	e15c      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800329c:	4bb0      	ldr	r3, [pc, #704]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a6:	4bae      	ldr	r3, [pc, #696]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04a      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4bab      	ldr	r3, [pc, #684]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	f04f 0400 	mov.w	r4, #0
 80032bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	ea03 0501 	and.w	r5, r3, r1
 80032c8:	ea04 0602 	and.w	r6, r4, r2
 80032cc:	4629      	mov	r1, r5
 80032ce:	4632      	mov	r2, r6
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	f04f 0400 	mov.w	r4, #0
 80032d8:	0154      	lsls	r4, r2, #5
 80032da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032de:	014b      	lsls	r3, r1, #5
 80032e0:	4619      	mov	r1, r3
 80032e2:	4622      	mov	r2, r4
 80032e4:	1b49      	subs	r1, r1, r5
 80032e6:	eb62 0206 	sbc.w	r2, r2, r6
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	0194      	lsls	r4, r2, #6
 80032f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032f8:	018b      	lsls	r3, r1, #6
 80032fa:	1a5b      	subs	r3, r3, r1
 80032fc:	eb64 0402 	sbc.w	r4, r4, r2
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	00e2      	lsls	r2, r4, #3
 800330a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800330e:	00d9      	lsls	r1, r3, #3
 8003310:	460b      	mov	r3, r1
 8003312:	4614      	mov	r4, r2
 8003314:	195b      	adds	r3, r3, r5
 8003316:	eb44 0406 	adc.w	r4, r4, r6
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	0262      	lsls	r2, r4, #9
 8003324:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003328:	0259      	lsls	r1, r3, #9
 800332a:	460b      	mov	r3, r1
 800332c:	4614      	mov	r4, r2
 800332e:	4618      	mov	r0, r3
 8003330:	4621      	mov	r1, r4
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f04f 0400 	mov.w	r4, #0
 8003338:	461a      	mov	r2, r3
 800333a:	4623      	mov	r3, r4
 800333c:	f7fd fc74 	bl	8000c28 <__aeabi_uldivmod>
 8003340:	4603      	mov	r3, r0
 8003342:	460c      	mov	r4, r1
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e049      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003348:	4b85      	ldr	r3, [pc, #532]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	ea03 0501 	and.w	r5, r3, r1
 800335e:	ea04 0602 	and.w	r6, r4, r2
 8003362:	4629      	mov	r1, r5
 8003364:	4632      	mov	r2, r6
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	f04f 0400 	mov.w	r4, #0
 800336e:	0154      	lsls	r4, r2, #5
 8003370:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003374:	014b      	lsls	r3, r1, #5
 8003376:	4619      	mov	r1, r3
 8003378:	4622      	mov	r2, r4
 800337a:	1b49      	subs	r1, r1, r5
 800337c:	eb62 0206 	sbc.w	r2, r2, r6
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	f04f 0400 	mov.w	r4, #0
 8003388:	0194      	lsls	r4, r2, #6
 800338a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800338e:	018b      	lsls	r3, r1, #6
 8003390:	1a5b      	subs	r3, r3, r1
 8003392:	eb64 0402 	sbc.w	r4, r4, r2
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033a4:	00d9      	lsls	r1, r3, #3
 80033a6:	460b      	mov	r3, r1
 80033a8:	4614      	mov	r4, r2
 80033aa:	195b      	adds	r3, r3, r5
 80033ac:	eb44 0406 	adc.w	r4, r4, r6
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	02a2      	lsls	r2, r4, #10
 80033ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033be:	0299      	lsls	r1, r3, #10
 80033c0:	460b      	mov	r3, r1
 80033c2:	4614      	mov	r4, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	4621      	mov	r1, r4
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	461a      	mov	r2, r3
 80033d0:	4623      	mov	r3, r4
 80033d2:	f7fd fc29 	bl	8000c28 <__aeabi_uldivmod>
 80033d6:	4603      	mov	r3, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033dc:	4b60      	ldr	r3, [pc, #384]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	3301      	adds	r3, #1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	613b      	str	r3, [r7, #16]
      break;
 80033f6:	e0ae      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003400:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b57      	ldr	r3, [pc, #348]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d04a      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b54      	ldr	r3, [pc, #336]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	f04f 0400 	mov.w	r4, #0
 8003418:	f240 11ff 	movw	r1, #511	; 0x1ff
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	ea03 0501 	and.w	r5, r3, r1
 8003424:	ea04 0602 	and.w	r6, r4, r2
 8003428:	4629      	mov	r1, r5
 800342a:	4632      	mov	r2, r6
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	f04f 0400 	mov.w	r4, #0
 8003434:	0154      	lsls	r4, r2, #5
 8003436:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800343a:	014b      	lsls	r3, r1, #5
 800343c:	4619      	mov	r1, r3
 800343e:	4622      	mov	r2, r4
 8003440:	1b49      	subs	r1, r1, r5
 8003442:	eb62 0206 	sbc.w	r2, r2, r6
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f04f 0400 	mov.w	r4, #0
 800344e:	0194      	lsls	r4, r2, #6
 8003450:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003454:	018b      	lsls	r3, r1, #6
 8003456:	1a5b      	subs	r3, r3, r1
 8003458:	eb64 0402 	sbc.w	r4, r4, r2
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	00e2      	lsls	r2, r4, #3
 8003466:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800346a:	00d9      	lsls	r1, r3, #3
 800346c:	460b      	mov	r3, r1
 800346e:	4614      	mov	r4, r2
 8003470:	195b      	adds	r3, r3, r5
 8003472:	eb44 0406 	adc.w	r4, r4, r6
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	0262      	lsls	r2, r4, #9
 8003480:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003484:	0259      	lsls	r1, r3, #9
 8003486:	460b      	mov	r3, r1
 8003488:	4614      	mov	r4, r2
 800348a:	4618      	mov	r0, r3
 800348c:	4621      	mov	r1, r4
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f04f 0400 	mov.w	r4, #0
 8003494:	461a      	mov	r2, r3
 8003496:	4623      	mov	r3, r4
 8003498:	f7fd fbc6 	bl	8000c28 <__aeabi_uldivmod>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e049      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a4:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	f04f 0400 	mov.w	r4, #0
 80034ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	ea03 0501 	and.w	r5, r3, r1
 80034ba:	ea04 0602 	and.w	r6, r4, r2
 80034be:	4629      	mov	r1, r5
 80034c0:	4632      	mov	r2, r6
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	f04f 0400 	mov.w	r4, #0
 80034ca:	0154      	lsls	r4, r2, #5
 80034cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034d0:	014b      	lsls	r3, r1, #5
 80034d2:	4619      	mov	r1, r3
 80034d4:	4622      	mov	r2, r4
 80034d6:	1b49      	subs	r1, r1, r5
 80034d8:	eb62 0206 	sbc.w	r2, r2, r6
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	f04f 0400 	mov.w	r4, #0
 80034e4:	0194      	lsls	r4, r2, #6
 80034e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034ea:	018b      	lsls	r3, r1, #6
 80034ec:	1a5b      	subs	r3, r3, r1
 80034ee:	eb64 0402 	sbc.w	r4, r4, r2
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	00e2      	lsls	r2, r4, #3
 80034fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003500:	00d9      	lsls	r1, r3, #3
 8003502:	460b      	mov	r3, r1
 8003504:	4614      	mov	r4, r2
 8003506:	195b      	adds	r3, r3, r5
 8003508:	eb44 0406 	adc.w	r4, r4, r6
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	02a2      	lsls	r2, r4, #10
 8003516:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800351a:	0299      	lsls	r1, r3, #10
 800351c:	460b      	mov	r3, r1
 800351e:	4614      	mov	r4, r2
 8003520:	4618      	mov	r0, r3
 8003522:	4621      	mov	r1, r4
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f04f 0400 	mov.w	r4, #0
 800352a:	461a      	mov	r2, r3
 800352c:	4623      	mov	r3, r4
 800352e:	f7fd fb7b 	bl	8000c28 <__aeabi_uldivmod>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_GetSysClockFreq+0x334>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0f1b      	lsrs	r3, r3, #28
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	613b      	str	r3, [r7, #16]
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_RCC_GetSysClockFreq+0x338>)
 8003552:	613b      	str	r3, [r7, #16]
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	693b      	ldr	r3, [r7, #16]
}
 8003558:	4618      	mov	r0, r3
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8083 	beq.w	800368c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003586:	4b95      	ldr	r3, [pc, #596]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b04      	cmp	r3, #4
 8003590:	d019      	beq.n	80035c6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003592:	4b92      	ldr	r3, [pc, #584]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800359a:	2b08      	cmp	r3, #8
 800359c:	d106      	bne.n	80035ac <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800359e:	4b8f      	ldr	r3, [pc, #572]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035aa:	d00c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ac:	4b8b      	ldr	r3, [pc, #556]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d112      	bne.n	80035de <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b8:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c4:	d10b      	bne.n	80035de <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c6:	4b85      	ldr	r3, [pc, #532]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d05b      	beq.n	800368a <HAL_RCC_OscConfig+0x11e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d157      	bne.n	800368a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e216      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x8a>
 80035e8:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7b      	ldr	r2, [pc, #492]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	e01d      	b.n	8003632 <HAL_RCC_OscConfig+0xc6>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fe:	d10c      	bne.n	800361a <HAL_RCC_OscConfig+0xae>
 8003600:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a75      	ldr	r2, [pc, #468]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a72      	ldr	r2, [pc, #456]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e00b      	b.n	8003632 <HAL_RCC_OscConfig+0xc6>
 800361a:	4b70      	ldr	r3, [pc, #448]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6f      	ldr	r2, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b6d      	ldr	r3, [pc, #436]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6c      	ldr	r2, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 800362c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d013      	beq.n	8003662 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fd fcdb 	bl	8000ff4 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003642:	f7fd fcd7 	bl	8000ff4 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	; 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1db      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003654:	4b61      	ldr	r3, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0xd6>
 8003660:	e014      	b.n	800368c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fd fcc7 	bl	8000ff4 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366a:	f7fd fcc3 	bl	8000ff4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1c7      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367c:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0xfe>
 8003688:	e000      	b.n	800368c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d06f      	beq.n	8003778 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003698:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d017      	beq.n	80036d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036a4:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036b0:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036bc:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d11c      	bne.n	8003702 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c8:	4b44      	ldr	r3, [pc, #272]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d116      	bne.n	8003702 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d4:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_OscConfig+0x180>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e18f      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4938      	ldr	r1, [pc, #224]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003700:	e03a      	b.n	8003778 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370a:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <HAL_RCC_OscConfig+0x274>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fc70 	bl	8000ff4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003718:	f7fd fc6c 	bl	8000ff4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e170      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4925      	ldr	r1, [pc, #148]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
 800374a:	e015      	b.n	8003778 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x274>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fd fc4f 	bl	8000ff4 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375a:	f7fd fc4b 	bl	8000ff4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e14f      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d037      	beq.n	80037f4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378c:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x278>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fd fc2f 	bl	8000ff4 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379a:	f7fd fc2b 	bl	8000ff4 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e12f      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x270>)
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x22e>
 80037b8:	e01c      	b.n	80037f4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_RCC_OscConfig+0x278>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fd fc18 	bl	8000ff4 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c6:	e00f      	b.n	80037e8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c8:	f7fd fc14 	bl	8000ff4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d908      	bls.n	80037e8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e118      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	42470000 	.word	0x42470000
 80037e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	4b8a      	ldr	r3, [pc, #552]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e9      	bne.n	80037c8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8097 	beq.w	8003930 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b83      	ldr	r3, [pc, #524]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a7e      	ldr	r2, [pc, #504]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b79      	ldr	r3, [pc, #484]	; (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7fd fbd3 	bl	8000ff4 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003852:	f7fd fbcf 	bl	8000ff4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0d3      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x4ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x31a>
 8003878:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a65      	ldr	r2, [pc, #404]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	e01c      	b.n	80038c0 <HAL_RCC_OscConfig+0x354>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b05      	cmp	r3, #5
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x33c>
 800388e:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6713      	str	r3, [r2, #112]	; 0x70
 800389a:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a5d      	ldr	r2, [pc, #372]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0x354>
 80038a8:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a59      	ldr	r2, [pc, #356]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fb94 	bl	8000ff4 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd fb90 	bl	8000ff4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e092      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ee      	beq.n	80038d0 <HAL_RCC_OscConfig+0x364>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd fb7e 	bl	8000ff4 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fc:	f7fd fb7a 	bl	8000ff4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	; 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e07c      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003912:	4b40      	ldr	r3, [pc, #256]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ee      	bne.n	80038fc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	4a3a      	ldr	r2, [pc, #232]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d068      	beq.n	8003a0a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d060      	beq.n	8003a06 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d145      	bne.n	80039d8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394c:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCC_OscConfig+0x4b0>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fd fb4f 	bl	8000ff4 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395a:	f7fd fb4b 	bl	8000ff4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e04f      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	019b      	lsls	r3, r3, #6
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	3b01      	subs	r3, #1
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	071b      	lsls	r3, r3, #28
 80039a4:	491b      	ldr	r1, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_RCC_OscConfig+0x4b0>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd fb20 	bl	8000ff4 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fd fb1c 	bl	8000ff4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e020      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x44c>
 80039d6:	e018      	b.n	8003a0a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_RCC_OscConfig+0x4b0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7fd fb09 	bl	8000ff4 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fd fb05 	bl	8000ff4 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e009      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCC_OscConfig+0x4a8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <HAL_RCC_OscConfig+0x47a>
 8003a04:	e001      	b.n	8003a0a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42470060 	.word	0x42470060

08003a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e056      	b.n	8003ae0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f004 fbe9 	bl	8008224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	ea42 0103 	orr.w	r1, r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	f003 0104 	and.w	r1, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ace:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_SPI_TransmitReceive_IT+0x20>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e075      	b.n	8003bf4 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b1e:	7dbb      	ldrb	r3, [r7, #22]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d00d      	beq.n	8003b40 <HAL_SPI_TransmitReceive_IT+0x58>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d106      	bne.n	8003b3a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_TransmitReceive_IT+0x52>
 8003b34:	7dbb      	ldrb	r3, [r7, #22]
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b3e:	e054      	b.n	8003bea <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b4c:	887b      	ldrh	r3, [r7, #2]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b56:	e048      	b.n	8003bea <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d003      	beq.n	8003b6c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2205      	movs	r2, #5
 8003b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	887a      	ldrh	r2, [r7, #2]
 8003b82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a17      	ldr	r2, [pc, #92]	; (8003c00 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
 8003baa:	e005      	b.n	8003bb8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <HAL_SPI_TransmitReceive_IT+0x124>)
 8003bb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d008      	beq.n	8003be8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e000      	b.n	8003bea <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003be8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	08003f39 	.word	0x08003f39
 8003c04:	08003f99 	.word	0x08003f99
 8003c08:	08003e75 	.word	0x08003e75
 8003c0c:	08003ed9 	.word	0x08003ed9

08003c10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10f      	bne.n	8003c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
    return;
 8003c52:	e0d8      	b.n	8003e06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_SPI_IRQHandler+0x66>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	09db      	lsrs	r3, r3, #7
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
    return;
 8003c74:	e0c7      	b.n	8003e06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10c      	bne.n	8003c9c <HAL_SPI_IRQHandler+0x8c>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_SPI_IRQHandler+0x8c>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80b5 	beq.w	8003e06 <HAL_SPI_IRQHandler+0x1f6>
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80ae 	beq.w	8003e06 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d023      	beq.n	8003cfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d011      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	e00b      	b.n	8003cfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	693b      	ldr	r3, [r7, #16]
        return;
 8003cfc:	e083      	b.n	8003e06 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0208 	orr.w	r2, r3, #8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d050      	beq.n	8003e04 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_SPI_IRQHandler+0x17e>
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d034      	beq.n	8003df8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0203 	bic.w	r2, r2, #3
 8003d9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d011      	beq.n	8003dca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_SPI_IRQHandler+0x1fc>)
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fcd4 	bl	8002760 <HAL_DMA_Abort_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <HAL_SPI_IRQHandler+0x1fc>)
 8003dd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fcbe 	bl	8002760 <HAL_DMA_Abort_IT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003df6:	e003      	b.n	8003e00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f81d 	bl	8003e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003dfe:	e000      	b.n	8003e02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e00:	bf00      	nop
    return;
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
  }
}
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	08003e4d 	.word	0x08003e4d

08003e10 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff ffe6 	bl	8003e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f103 020c 	add.w	r2, r3, #12
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10f      	bne.n	8003ed0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ebe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f940 	bl	8004150 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10f      	bne.n	8003f30 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f910 	bl	8004150 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	1c9a      	adds	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10f      	bne.n	8003f90 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8e0 	bl	8004150 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fdc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8b1 	bl	8004150 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	e04c      	b.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d048      	beq.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004010:	f7fc fff0 	bl	8000ff4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d902      	bls.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403e:	d111      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004048:	d004      	beq.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d107      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d10f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e00f      	b.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1a3      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <SPI_EndRxTxTransaction+0x7c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <SPI_EndRxTxTransaction+0x80>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0d5b      	lsrs	r3, r3, #21
 80040e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040e8:	fb02 f303 	mul.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f6:	d112      	bne.n	800411e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff ff77 	bl	8003ff6 <SPI_WaitFlagStateUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e00f      	b.n	800413e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3b01      	subs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d0f2      	beq.n	800411e <SPI_EndRxTxTransaction+0x52>
 8004138:	e000      	b.n	800413c <SPI_EndRxTxTransaction+0x70>
        break;
 800413a:	bf00      	nop
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000040 	.word	0x20000040
 800414c:	165e9f81 	.word	0x165e9f81

08004150 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004158:	4b35      	ldr	r3, [pc, #212]	; (8004230 <SPI_CloseRxTx_ISR+0xe0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a35      	ldr	r2, [pc, #212]	; (8004234 <SPI_CloseRxTx_ISR+0xe4>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0a5b      	lsrs	r3, r3, #9
 8004164:	2264      	movs	r2, #100	; 0x64
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800416c:	f7fc ff42 	bl	8000ff4 <HAL_GetTick>
 8004170:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0220 	bic.w	r2, r2, #32
 8004180:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004194:	e009      	b.n	80041aa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3b01      	subs	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0eb      	beq.n	8004182 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	2164      	movs	r1, #100	; 0x64
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff8c 	bl	80040cc <SPI_EndRxTxTransaction>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d115      	bne.n	8004218 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d107      	bne.n	8004208 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fe05 	bl	8003e10 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004206:	e00e      	b.n	8004226 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fe07 	bl	8003e24 <HAL_SPI_TxRxCpltCallback>
}
 8004216:	e006      	b.n	8004226 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fe09 	bl	8003e38 <HAL_SPI_ErrorCallback>
}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000040 	.word	0x20000040
 8004234:	057619f1 	.word	0x057619f1

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e01d      	b.n	8004286 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f004 fa20 	bl	80086a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 fb70 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01d      	b.n	80042dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f815 	bl	80042e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f000 fb45 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b0c      	cmp	r3, #12
 8004306:	d841      	bhi.n	800438c <HAL_TIM_PWM_Start_IT+0x94>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <HAL_TIM_PWM_Start_IT+0x18>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004345 	.word	0x08004345
 8004314:	0800438d 	.word	0x0800438d
 8004318:	0800438d 	.word	0x0800438d
 800431c:	0800438d 	.word	0x0800438d
 8004320:	08004357 	.word	0x08004357
 8004324:	0800438d 	.word	0x0800438d
 8004328:	0800438d 	.word	0x0800438d
 800432c:	0800438d 	.word	0x0800438d
 8004330:	08004369 	.word	0x08004369
 8004334:	0800438d 	.word	0x0800438d
 8004338:	0800438d 	.word	0x0800438d
 800433c:	0800438d 	.word	0x0800438d
 8004340:	0800437b 	.word	0x0800437b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0202 	orr.w	r2, r2, #2
 8004352:	60da      	str	r2, [r3, #12]
      break;
 8004354:	e01b      	b.n	800438e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0204 	orr.w	r2, r2, #4
 8004364:	60da      	str	r2, [r3, #12]
      break;
 8004366:	e012      	b.n	800438e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	60da      	str	r2, [r3, #12]
      break;
 8004378:	e009      	b.n	800438e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0210 	orr.w	r2, r2, #16
 8004388:	60da      	str	r2, [r3, #12]
      break;
 800438a:	e000      	b.n	800438e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800438c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fdca 	bl	8004f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <HAL_TIM_PWM_Start_IT+0x100>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_PWM_Start_IT+0xb8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <HAL_TIM_PWM_Start_IT+0x104>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <HAL_TIM_PWM_Start_IT+0xbc>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_TIM_PWM_Start_IT+0xbe>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d007      	beq.n	80043ec <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40010400 	.word	0x40010400

08004400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0202 	mvn.w	r2, #2
 800442c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa6b 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa5d 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa6e 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0204 	mvn.w	r2, #4
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa41 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa33 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fa44 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0208 	mvn.w	r2, #8
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2204      	movs	r2, #4
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa17 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa09 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fa1a 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d122      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2208      	movs	r2, #8
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9ed 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9df 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f9f0 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0201 	mvn.w	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f002 fc4e 	bl	8006e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b80      	cmp	r3, #128	; 0x80
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fddb 	bl	8005166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f9b5 	bl	8004946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0220 	mvn.w	r2, #32
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fda5 	bl	8005152 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004626:	2302      	movs	r3, #2
 8004628:	e0b4      	b.n	8004794 <HAL_TIM_PWM_ConfigChannel+0x184>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	f200 809f 	bhi.w	8004780 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800467d 	.word	0x0800467d
 800464c:	08004781 	.word	0x08004781
 8004650:	08004781 	.word	0x08004781
 8004654:	08004781 	.word	0x08004781
 8004658:	080046bd 	.word	0x080046bd
 800465c:	08004781 	.word	0x08004781
 8004660:	08004781 	.word	0x08004781
 8004664:	08004781 	.word	0x08004781
 8004668:	080046ff 	.word	0x080046ff
 800466c:	08004781 	.word	0x08004781
 8004670:	08004781 	.word	0x08004781
 8004674:	08004781 	.word	0x08004781
 8004678:	0800473f 	.word	0x0800473f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fa0a 	bl	8004a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6999      	ldr	r1, [r3, #24]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	619a      	str	r2, [r3, #24]
      break;
 80046ba:	e062      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa5a 	bl	8004b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	619a      	str	r2, [r3, #24]
      break;
 80046fc:	e041      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 faaf 	bl	8004c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0208 	orr.w	r2, r2, #8
 8004718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0204 	bic.w	r2, r2, #4
 8004728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69d9      	ldr	r1, [r3, #28]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	61da      	str	r2, [r3, #28]
      break;
 800473c:	e021      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fb03 	bl	8004d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	021a      	lsls	r2, r3, #8
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	61da      	str	r2, [r3, #28]
      break;
 800477e:	e000      	b.n	8004782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004780:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIM_ConfigClockSource+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0a6      	b.n	8004902 <HAL_TIM_ConfigClockSource+0x166>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d067      	beq.n	80048bc <HAL_TIM_ConfigClockSource+0x120>
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d80b      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x6c>
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d073      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0x140>
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d802      	bhi.n	80047fe <HAL_TIM_ConfigClockSource+0x62>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d06f      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80047fc:	e078      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d06c      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0x140>
 8004802:	2b30      	cmp	r3, #48	; 0x30
 8004804:	d06a      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004806:	e073      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004808:	2b70      	cmp	r3, #112	; 0x70
 800480a:	d00d      	beq.n	8004828 <HAL_TIM_ConfigClockSource+0x8c>
 800480c:	2b70      	cmp	r3, #112	; 0x70
 800480e:	d804      	bhi.n	800481a <HAL_TIM_ConfigClockSource+0x7e>
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d033      	beq.n	800487c <HAL_TIM_ConfigClockSource+0xe0>
 8004814:	2b60      	cmp	r3, #96	; 0x60
 8004816:	d041      	beq.n	800489c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004818:	e06a      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481e:	d066      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x152>
 8004820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004824:	d017      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004826:	e063      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6899      	ldr	r1, [r3, #8]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f000 fb5a 	bl	8004ef0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800484a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]
      break;
 8004854:	e04c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f000 fb43 	bl	8004ef0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004878:	609a      	str	r2, [r3, #8]
      break;
 800487a:	e039      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	461a      	mov	r2, r3
 800488a:	f000 fab7 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2150      	movs	r1, #80	; 0x50
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fb10 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 800489a:	e029      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	461a      	mov	r2, r3
 80048aa:	f000 fad6 	bl	8004e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2160      	movs	r1, #96	; 0x60
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fb00 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 80048ba:	e019      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	461a      	mov	r2, r3
 80048ca:	f000 fa97 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2140      	movs	r1, #64	; 0x40
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 faf0 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 80048da:	e009      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 fae7 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 80048ec:	e000      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80048ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a40      	ldr	r2, [pc, #256]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d00f      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d108      	bne.n	80049ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d027      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d023      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d017      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <TIM_Base_SetConfig+0x128>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <TIM_Base_SetConfig+0x12c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <TIM_Base_SetConfig+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a25      	ldr	r2, [pc, #148]	; (8004a90 <TIM_Base_SetConfig+0x134>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <TIM_Base_SetConfig+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <TIM_Base_SetConfig+0x13c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800
 8004a90:	40001800 	.word	0x40001800
 8004a94:	40001c00 	.word	0x40001c00
 8004a98:	40002000 	.word	0x40002000

08004a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0302 	bic.w	r3, r3, #2
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <TIM_OC1_SetConfig+0xd8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC1_SetConfig+0x64>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <TIM_OC1_SetConfig+0xdc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0308 	bic.w	r3, r3, #8
 8004b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <TIM_OC1_SetConfig+0xd8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_OC1_SetConfig+0x8e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <TIM_OC1_SetConfig+0xdc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d111      	bne.n	8004b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40010400 	.word	0x40010400

08004b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0320 	bic.w	r3, r3, #32
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <TIM_OC2_SetConfig+0xe4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC2_SetConfig+0x68>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <TIM_OC2_SetConfig+0xe8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10d      	bne.n	8004c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <TIM_OC2_SetConfig+0xe4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC2_SetConfig+0x94>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <TIM_OC2_SetConfig+0xe8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d113      	bne.n	8004c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_OC3_SetConfig+0xe0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_OC3_SetConfig+0x66>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <TIM_OC3_SetConfig+0xe4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10d      	bne.n	8004cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <TIM_OC3_SetConfig+0xe0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC3_SetConfig+0x92>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <TIM_OC3_SetConfig+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400

08004d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	031b      	lsls	r3, r3, #12
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <TIM_OC4_SetConfig+0xa4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_OC4_SetConfig+0x68>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <TIM_OC4_SetConfig+0xa8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d109      	bne.n	8004dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40010400 	.word	0x40010400

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f043 0307 	orr.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2201      	movs	r2, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d00d      	beq.n	8004fa6 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d014      	beq.n	8004fb8 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d000      	beq.n	8004f94 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8004f92:	e01a      	b.n	8004fca <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0202 	orr.w	r2, r2, #2
 8004fa2:	60da      	str	r2, [r3, #12]
      break;
 8004fa4:	e011      	b.n	8004fca <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0204 	orr.w	r2, r2, #4
 8004fb4:	60da      	str	r2, [r3, #12]
      break;
 8004fb6:	e008      	b.n	8004fca <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	60da      	str	r2, [r3, #12]
      break;
 8004fc8:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2204      	movs	r2, #4
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f8c9 	bl	800517a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b06      	cmp	r3, #6
 8005008:	d007      	beq.n	800501a <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005038:	2302      	movs	r3, #2
 800503a:	e032      	b.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005074:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4313      	orrs	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e03d      	b.n	8005146 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2204      	movs	r2, #4
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	43db      	mvns	r3, r3
 800519c:	401a      	ands	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1a      	ldr	r2, [r3, #32]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e03f      	b.n	8005256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f003 fb26 	bl	800883c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2224      	movs	r2, #36	; 0x24
 80051f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fb47 	bl	800589c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b20      	cmp	r3, #32
 800527c:	f040 8083 	bne.w	8005386 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_UART_Transmit+0x2e>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e07b      	b.n	8005388 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_UART_Transmit+0x40>
 800529a:	2302      	movs	r3, #2
 800529c:	e074      	b.n	8005388 <HAL_UART_Transmit+0x12a>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2221      	movs	r2, #33	; 0x21
 80052b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80052b4:	f7fb fe9e 	bl	8000ff4 <HAL_GetTick>
 80052b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052c6:	e042      	b.n	800534e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	d122      	bne.n	8005326 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2200      	movs	r2, #0
 80052e8:	2180      	movs	r1, #128	; 0x80
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f96a 	bl	80055c4 <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e046      	b.n	8005388 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800530c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	3302      	adds	r3, #2
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	e017      	b.n	800534e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	3301      	adds	r3, #1
 8005322:	60bb      	str	r3, [r7, #8]
 8005324:	e013      	b.n	800534e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f947 	bl	80055c4 <UART_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e023      	b.n	8005388 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	60ba      	str	r2, [r7, #8]
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1b7      	bne.n	80052c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	2140      	movs	r1, #64	; 0x40
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f92e 	bl	80055c4 <UART_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e00a      	b.n	8005388 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	e000      	b.n	8005388 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10d      	bne.n	80053e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_UART_IRQHandler+0x52>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9dc 	bl	8005798 <UART_Receive_IT>
      return;
 80053e0:	e0cc      	b.n	800557c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80ab 	beq.w	8005540 <HAL_UART_IRQHandler+0x1b0>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <HAL_UART_IRQHandler+0x70>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a0 	beq.w	8005540 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_UART_IRQHandler+0x90>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_UART_IRQHandler+0xb0>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	f043 0202 	orr.w	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_UART_IRQHandler+0xd0>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_UART_IRQHandler+0xf0>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	f043 0208 	orr.w	r2, r3, #8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d078      	beq.n	800557a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_UART_IRQHandler+0x112>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f97b 	bl	8005798 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <HAL_UART_IRQHandler+0x13a>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d031      	beq.n	800552e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8c4 	bl	8005658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d123      	bne.n	8005526 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d013      	beq.n	800551e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	4a22      	ldr	r2, [pc, #136]	; (8005584 <HAL_UART_IRQHandler+0x1f4>)
 80054fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	4618      	mov	r0, r3
 8005504:	f7fd f92c 	bl	8002760 <HAL_DMA_Abort_IT>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	e00e      	b.n	800553c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f846 	bl	80055b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	e00a      	b.n	800553c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f842 	bl	80055b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	e006      	b.n	800553c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f83e 	bl	80055b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800553a:	e01e      	b.n	800557a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	bf00      	nop
    return;
 800553e:	e01c      	b.n	800557a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_UART_IRQHandler+0x1cc>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8b1 	bl	80056bc <UART_Transmit_IT>
    return;
 800555a:	e00f      	b.n	800557c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_UART_IRQHandler+0x1ec>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8f9 	bl	8005768 <UART_EndTransmit_IT>
    return;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <HAL_UART_IRQHandler+0x1ec>
    return;
 800557a:	bf00      	nop
  }
}
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	08005695 	.word	0x08005695

08005588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d4:	e02c      	b.n	8005630 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d028      	beq.n	8005630 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055e4:	f7fb fd06 	bl	8000ff4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d21d      	bcs.n	8005630 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005602:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e00f      	b.n	8005650 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4013      	ands	r3, r2
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	429a      	cmp	r2, r3
 800564c:	d0c3      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800566e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff ff7e 	bl	80055b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b21      	cmp	r3, #33	; 0x21
 80056ce:	d144      	bne.n	800575a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d8:	d11a      	bne.n	8005710 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	1c9a      	adds	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]
 8005702:	e00e      	b.n	8005722 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	621a      	str	r2, [r3, #32]
 800570e:	e008      	b.n	8005722 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	1c59      	adds	r1, r3, #1
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6211      	str	r1, [r2, #32]
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29b      	uxth	r3, r3
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4619      	mov	r1, r3
 8005730:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005744:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005754:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fefd 	bl	8005588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b22      	cmp	r3, #34	; 0x22
 80057aa:	d171      	bne.n	8005890 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	d123      	bne.n	80057fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10e      	bne.n	80057e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	1c9a      	adds	r2, r3, #2
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	629a      	str	r2, [r3, #40]	; 0x28
 80057e0:	e029      	b.n	8005836 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	629a      	str	r2, [r3, #40]	; 0x28
 80057fc:	e01b      	b.n	8005836 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6858      	ldr	r0, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	1c59      	adds	r1, r3, #1
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6291      	str	r1, [r2, #40]	; 0x28
 8005816:	b2c2      	uxtb	r2, r0
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e00c      	b.n	8005836 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b2da      	uxtb	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	1c58      	adds	r0, r3, #1
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	6288      	str	r0, [r1, #40]	; 0x28
 800582e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29b      	uxth	r3, r3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4619      	mov	r1, r3
 8005844:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005846:	2b00      	cmp	r3, #0
 8005848:	d120      	bne.n	800588c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0220 	bic.w	r2, r2, #32
 8005858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fe8a 	bl	800559c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e002      	b.n	8005892 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800589c:	b5b0      	push	{r4, r5, r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80058dc:	f023 030c 	bic.w	r3, r3, #12
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	68f9      	ldr	r1, [r7, #12]
 80058e6:	430b      	orrs	r3, r1
 80058e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005908:	f040 80e4 	bne.w	8005ad4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4aab      	ldr	r2, [pc, #684]	; (8005bc0 <UART_SetConfig+0x324>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <UART_SetConfig+0x84>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4aaa      	ldr	r2, [pc, #680]	; (8005bc4 <UART_SetConfig+0x328>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d16c      	bne.n	80059fa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005920:	f7fd fc70 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005924:	4602      	mov	r2, r0
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009a      	lsls	r2, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	4aa3      	ldr	r2, [pc, #652]	; (8005bc8 <UART_SetConfig+0x32c>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	011c      	lsls	r4, r3, #4
 8005944:	f7fd fc5e 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005948:	4602      	mov	r2, r0
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009a      	lsls	r2, r3, #2
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fbb2 f5f3 	udiv	r5, r2, r3
 800595e:	f7fd fc51 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005962:	4602      	mov	r2, r0
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009a      	lsls	r2, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	4a93      	ldr	r2, [pc, #588]	; (8005bc8 <UART_SetConfig+0x32c>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	2264      	movs	r2, #100	; 0x64
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	1aeb      	subs	r3, r5, r3
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	3332      	adds	r3, #50	; 0x32
 800598c:	4a8e      	ldr	r2, [pc, #568]	; (8005bc8 <UART_SetConfig+0x32c>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800599a:	441c      	add	r4, r3
 800599c:	f7fd fc32 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009a      	lsls	r2, r3, #2
 80059aa:	441a      	add	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80059b6:	f7fd fc25 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 80059ba:	4602      	mov	r2, r0
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009a      	lsls	r2, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	4a7d      	ldr	r2, [pc, #500]	; (8005bc8 <UART_SetConfig+0x32c>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	2264      	movs	r2, #100	; 0x64
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	1aeb      	subs	r3, r5, r3
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	3332      	adds	r3, #50	; 0x32
 80059e4:	4a78      	ldr	r2, [pc, #480]	; (8005bc8 <UART_SetConfig+0x32c>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	f003 0207 	and.w	r2, r3, #7
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4422      	add	r2, r4
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	e154      	b.n	8005ca4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80059fa:	f7fd fbef 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 80059fe:	4602      	mov	r2, r0
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009a      	lsls	r2, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	4a6c      	ldr	r2, [pc, #432]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	011c      	lsls	r4, r3, #4
 8005a1e:	f7fd fbdd 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009a      	lsls	r2, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a38:	f7fd fbd0 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009a      	lsls	r2, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	4a5d      	ldr	r2, [pc, #372]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	2264      	movs	r2, #100	; 0x64
 8005a5c:	fb02 f303 	mul.w	r3, r2, r3
 8005a60:	1aeb      	subs	r3, r5, r3
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3332      	adds	r3, #50	; 0x32
 8005a66:	4a58      	ldr	r2, [pc, #352]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005a68:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a74:	441c      	add	r4, r3
 8005a76:	f7fd fbb1 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009a      	lsls	r2, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a90:	f7fd fba4 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009a      	lsls	r2, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	4a47      	ldr	r2, [pc, #284]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	2264      	movs	r2, #100	; 0x64
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	1aeb      	subs	r3, r5, r3
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	3332      	adds	r3, #50	; 0x32
 8005abe:	4a42      	ldr	r2, [pc, #264]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	f003 0207 	and.w	r2, r3, #7
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4422      	add	r2, r4
 8005ad0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005ad2:	e0e7      	b.n	8005ca4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a39      	ldr	r2, [pc, #228]	; (8005bc0 <UART_SetConfig+0x324>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <UART_SetConfig+0x24c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a38      	ldr	r2, [pc, #224]	; (8005bc4 <UART_SetConfig+0x328>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d171      	bne.n	8005bcc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005ae8:	f7fd fb8c 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009a      	lsls	r2, r3, #2
 8005af6:	441a      	add	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	4a31      	ldr	r2, [pc, #196]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	011c      	lsls	r4, r3, #4
 8005b0c:	f7fd fb7a 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009a      	lsls	r2, r3, #2
 8005b1a:	441a      	add	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b26:	f7fd fb6d 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009a      	lsls	r2, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	2264      	movs	r2, #100	; 0x64
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	1aeb      	subs	r3, r5, r3
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	3332      	adds	r3, #50	; 0x32
 8005b54:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b60:	441c      	add	r4, r3
 8005b62:	f7fd fb4f 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009a      	lsls	r2, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b7c:	f7fd fb42 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009a      	lsls	r2, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	2264      	movs	r2, #100	; 0x64
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	1aeb      	subs	r3, r5, r3
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	3332      	adds	r3, #50	; 0x32
 8005baa:	4a07      	ldr	r2, [pc, #28]	; (8005bc8 <UART_SetConfig+0x32c>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f003 020f 	and.w	r2, r3, #15
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4422      	add	r2, r4
 8005bbc:	609a      	str	r2, [r3, #8]
 8005bbe:	e071      	b.n	8005ca4 <UART_SetConfig+0x408>
 8005bc0:	40011000 	.word	0x40011000
 8005bc4:	40011400 	.word	0x40011400
 8005bc8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005bcc:	f7fd fb06 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009a      	lsls	r2, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	4a31      	ldr	r2, [pc, #196]	; (8005cac <UART_SetConfig+0x410>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	011c      	lsls	r4, r3, #4
 8005bf0:	f7fd faf4 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009a      	lsls	r2, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c0a:	f7fd fae7 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009a      	lsls	r2, r3, #2
 8005c18:	441a      	add	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <UART_SetConfig+0x410>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	2264      	movs	r2, #100	; 0x64
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	1aeb      	subs	r3, r5, r3
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	3332      	adds	r3, #50	; 0x32
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <UART_SetConfig+0x410>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c44:	441c      	add	r4, r3
 8005c46:	f7fd fac9 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009a      	lsls	r2, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c60:	f7fd fabc 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009a      	lsls	r2, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <UART_SetConfig+0x410>)
 8005c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	2264      	movs	r2, #100	; 0x64
 8005c84:	fb02 f303 	mul.w	r3, r2, r3
 8005c88:	1aeb      	subs	r3, r5, r3
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	3332      	adds	r3, #50	; 0x32
 8005c8e:	4a07      	ldr	r2, [pc, #28]	; (8005cac <UART_SetConfig+0x410>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f003 020f 	and.w	r2, r3, #15
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4422      	add	r2, r4
 8005ca0:	609a      	str	r2, [r3, #8]
}
 8005ca2:	e7ff      	b.n	8005ca4 <UART_SetConfig+0x408>
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bdb0      	pop	{r4, r5, r7, pc}
 8005cac:	51eb851f 	.word	0x51eb851f

08005cb0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	609a      	str	r2, [r3, #8]
 8005cc0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cc4:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <MX_ADC1_Init+0xa0>)
 8005cc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005cc8:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005cd0:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005cea:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cf4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005cfa:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005d00:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d14:	480d      	ldr	r0, [pc, #52]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005d16:	f7fb f99b 	bl	8001050 <HAL_ADC_Init>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8005d20:	f002 fa41 	bl	80081a6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d30:	463b      	mov	r3, r7
 8005d32:	4619      	mov	r1, r3
 8005d34:	4805      	ldr	r0, [pc, #20]	; (8005d4c <MX_ADC1_Init+0x9c>)
 8005d36:	f7fb fadf 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005d40:	f002 fa31 	bl	80081a6 <Error_Handler>
  }

}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	200002b0 	.word	0x200002b0
 8005d50:	40012000 	.word	0x40012000

08005d54 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8005d66:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d68:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <MX_ADC2_Init+0xa0>)
 8005d6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005d6c:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005d80:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005d8e:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8005d96:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005d98:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005da4:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005db8:	480d      	ldr	r0, [pc, #52]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005dba:	f7fb f949 	bl	8001050 <HAL_ADC_Init>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8005dc4:	f002 f9ef 	bl	80081a6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005dc8:	2304      	movs	r3, #4
 8005dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4805      	ldr	r0, [pc, #20]	; (8005df0 <MX_ADC2_Init+0x9c>)
 8005dda:	f7fb fa8d 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8005de4:	f002 f9df 	bl	80081a6 <Error_Handler>
  }

}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000208 	.word	0x20000208
 8005df4:	40012100 	.word	0x40012100

08005df8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005dfe:	463b      	mov	r3, r7
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e0c:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <MX_ADC3_Init+0xa0>)
 8005e0e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e16:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005e18:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e3c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005e40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005e48:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005e4e:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e56:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005e5c:	480d      	ldr	r0, [pc, #52]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e5e:	f7fb f8f7 	bl	8001050 <HAL_ADC_Init>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8005e68:	f002 f99d 	bl	80081a6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e70:	2301      	movs	r3, #1
 8005e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005e78:	463b      	mov	r3, r7
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4805      	ldr	r0, [pc, #20]	; (8005e94 <MX_ADC3_Init+0x9c>)
 8005e7e:	f7fb fa3b 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8005e88:	f002 f98d 	bl	80081a6 <Error_Handler>
  }

}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	200002f8 	.word	0x200002f8
 8005e98:	40012200 	.word	0x40012200

08005e9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	609a      	str	r2, [r3, #8]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a8e      	ldr	r2, [pc, #568]	; (80060f4 <HAL_ADC_MspInit+0x258>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d158      	bne.n	8005f70 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	4b8d      	ldr	r3, [pc, #564]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	4a8c      	ldr	r2, [pc, #560]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ece:	4b8a      	ldr	r3, [pc, #552]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	623b      	str	r3, [r7, #32]
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	4b86      	ldr	r3, [pc, #536]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	4a85      	ldr	r2, [pc, #532]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eea:	4b83      	ldr	r3, [pc, #524]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	61fb      	str	r3, [r7, #28]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005efa:	2303      	movs	r3, #3
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f06:	4619      	mov	r1, r3
 8005f08:	487c      	ldr	r0, [pc, #496]	; (80060fc <HAL_ADC_MspInit+0x260>)
 8005f0a:	f7fc feb3 	bl	8002c74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005f0e:	4b7c      	ldr	r3, [pc, #496]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f10:	4a7c      	ldr	r2, [pc, #496]	; (8006104 <HAL_ADC_MspInit+0x268>)
 8005f12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005f14:	4b7a      	ldr	r3, [pc, #488]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f1a:	4b79      	ldr	r3, [pc, #484]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f20:	4b77      	ldr	r3, [pc, #476]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f26:	4b76      	ldr	r3, [pc, #472]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f2e:	4b74      	ldr	r3, [pc, #464]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f36:	4b72      	ldr	r3, [pc, #456]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005f3e:	4b70      	ldr	r3, [pc, #448]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005f44:	4b6e      	ldr	r3, [pc, #440]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f4c:	4b6c      	ldr	r3, [pc, #432]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f52:	486b      	ldr	r0, [pc, #428]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f54:	f7fc faf6 	bl	8002544 <HAL_DMA_Init>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005f5e:	f002 f922 	bl	80081a6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a66      	ldr	r2, [pc, #408]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
 8005f68:	4a65      	ldr	r2, [pc, #404]	; (8006100 <HAL_ADC_MspInit+0x264>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8005f6e:	e0bc      	b.n	80060ea <HAL_ADC_MspInit+0x24e>
  else if(adcHandle->Instance==ADC2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a64      	ldr	r2, [pc, #400]	; (8006108 <HAL_ADC_MspInit+0x26c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d159      	bne.n	800602e <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	4b5e      	ldr	r3, [pc, #376]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f88:	6453      	str	r3, [r2, #68]	; 0x44
 8005f8a:	4b5b      	ldr	r3, [pc, #364]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	4b57      	ldr	r3, [pc, #348]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	4a56      	ldr	r2, [pc, #344]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa6:	4b54      	ldr	r3, [pc, #336]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005fb2:	2310      	movs	r3, #16
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	484d      	ldr	r0, [pc, #308]	; (80060fc <HAL_ADC_MspInit+0x260>)
 8005fc6:	f7fc fe55 	bl	8002c74 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005fca:	4b50      	ldr	r3, [pc, #320]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005fcc:	4a50      	ldr	r2, [pc, #320]	; (8006110 <HAL_ADC_MspInit+0x274>)
 8005fce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005fd0:	4b4e      	ldr	r3, [pc, #312]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fd6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fd8:	4b4c      	ldr	r3, [pc, #304]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fde:	4b4b      	ldr	r3, [pc, #300]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005fe4:	4b49      	ldr	r3, [pc, #292]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fea:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005fec:	4b47      	ldr	r3, [pc, #284]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ff4:	4b45      	ldr	r3, [pc, #276]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ffa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005ffc:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_ADC_MspInit+0x270>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8006002:	4b42      	ldr	r3, [pc, #264]	; (800610c <HAL_ADC_MspInit+0x270>)
 8006004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006008:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800600a:	4b40      	ldr	r3, [pc, #256]	; (800610c <HAL_ADC_MspInit+0x270>)
 800600c:	2200      	movs	r2, #0
 800600e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006010:	483e      	ldr	r0, [pc, #248]	; (800610c <HAL_ADC_MspInit+0x270>)
 8006012:	f7fc fa97 	bl	8002544 <HAL_DMA_Init>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 800601c:	f002 f8c3 	bl	80081a6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3a      	ldr	r2, [pc, #232]	; (800610c <HAL_ADC_MspInit+0x270>)
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
 8006026:	4a39      	ldr	r2, [pc, #228]	; (800610c <HAL_ADC_MspInit+0x270>)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800602c:	e05d      	b.n	80060ea <HAL_ADC_MspInit+0x24e>
  else if(adcHandle->Instance==ADC3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a38      	ldr	r2, [pc, #224]	; (8006114 <HAL_ADC_MspInit+0x278>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d158      	bne.n	80060ea <HAL_ADC_MspInit+0x24e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 800603e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006040:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8006042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006046:	6453      	str	r3, [r2, #68]	; 0x44
 8006048:	4b2b      	ldr	r3, [pc, #172]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 800604a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	4a26      	ldr	r2, [pc, #152]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6313      	str	r3, [r2, #48]	; 0x30
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <HAL_ADC_MspInit+0x25c>)
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006070:	2302      	movs	r3, #2
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006074:	2303      	movs	r3, #3
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006078:	2300      	movs	r3, #0
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800607c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006080:	4619      	mov	r1, r3
 8006082:	481e      	ldr	r0, [pc, #120]	; (80060fc <HAL_ADC_MspInit+0x260>)
 8006084:	f7fc fdf6 	bl	8002c74 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006088:	4b23      	ldr	r3, [pc, #140]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 800608a:	4a24      	ldr	r2, [pc, #144]	; (800611c <HAL_ADC_MspInit+0x280>)
 800608c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800608e:	4b22      	ldr	r3, [pc, #136]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 8006090:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006094:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006096:	4b20      	ldr	r3, [pc, #128]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 8006098:	2200      	movs	r2, #0
 800609a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 800609e:	2200      	movs	r2, #0
 80060a0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060a8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80060aa:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060b8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80060ba:	4b17      	ldr	r3, [pc, #92]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060bc:	2200      	movs	r2, #0
 80060be:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80060c0:	4b15      	ldr	r3, [pc, #84]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060c6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060c8:	4b13      	ldr	r3, [pc, #76]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80060ce:	4812      	ldr	r0, [pc, #72]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060d0:	f7fc fa38 	bl	8002544 <HAL_DMA_Init>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_ADC_MspInit+0x242>
      Error_Handler();
 80060da:	f002 f864 	bl	80081a6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38
 80060e4:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <HAL_ADC_MspInit+0x27c>)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80060ea:	bf00      	nop
 80060ec:	3738      	adds	r7, #56	; 0x38
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40012000 	.word	0x40012000
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40020000 	.word	0x40020000
 8006100:	20000340 	.word	0x20000340
 8006104:	40026410 	.word	0x40026410
 8006108:	40012100 	.word	0x40012100
 800610c:	200003a0 	.word	0x200003a0
 8006110:	40026440 	.word	0x40026440
 8006114:	40012200 	.word	0x40012200
 8006118:	20000250 	.word	0x20000250
 800611c:	40026428 	.word	0x40026428

08006120 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8006124:	4b18      	ldr	r3, [pc, #96]	; (8006188 <MX_CAN1_Init+0x68>)
 8006126:	4a19      	ldr	r2, [pc, #100]	; (800618c <MX_CAN1_Init+0x6c>)
 8006128:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800612a:	4b17      	ldr	r3, [pc, #92]	; (8006188 <MX_CAN1_Init+0x68>)
 800612c:	2204      	movs	r2, #4
 800612e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006130:	4b15      	ldr	r3, [pc, #84]	; (8006188 <MX_CAN1_Init+0x68>)
 8006132:	2200      	movs	r2, #0
 8006134:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <MX_CAN1_Init+0x68>)
 8006138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800613c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800613e:	4b12      	ldr	r3, [pc, #72]	; (8006188 <MX_CAN1_Init+0x68>)
 8006140:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8006144:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8006146:	4b10      	ldr	r3, [pc, #64]	; (8006188 <MX_CAN1_Init+0x68>)
 8006148:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800614c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800614e:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <MX_CAN1_Init+0x68>)
 8006150:	2200      	movs	r2, #0
 8006152:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <MX_CAN1_Init+0x68>)
 8006156:	2200      	movs	r2, #0
 8006158:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <MX_CAN1_Init+0x68>)
 800615c:	2200      	movs	r2, #0
 800615e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <MX_CAN1_Init+0x68>)
 8006162:	2200      	movs	r2, #0
 8006164:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <MX_CAN1_Init+0x68>)
 8006168:	2200      	movs	r2, #0
 800616a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <MX_CAN1_Init+0x68>)
 800616e:	2200      	movs	r2, #0
 8006170:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <MX_CAN1_Init+0x68>)
 8006174:	f7fb fb70 	bl	8001858 <HAL_CAN_Init>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800617e:	f002 f812 	bl	80081a6 <Error_Handler>
  }

}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000400 	.word	0x20000400
 800618c:	40006400 	.word	0x40006400

08006190 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a21      	ldr	r2, [pc, #132]	; (8006234 <HAL_CAN_MspInit+0xa4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d13c      	bne.n	800622c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	4b20      	ldr	r3, [pc, #128]	; (8006238 <HAL_CAN_MspInit+0xa8>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <HAL_CAN_MspInit+0xa8>)
 80061bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061c0:	6413      	str	r3, [r2, #64]	; 0x40
 80061c2:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <HAL_CAN_MspInit+0xa8>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	4b19      	ldr	r3, [pc, #100]	; (8006238 <HAL_CAN_MspInit+0xa8>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_CAN_MspInit+0xa8>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	6313      	str	r3, [r2, #48]	; 0x30
 80061de:	4b16      	ldr	r3, [pc, #88]	; (8006238 <HAL_CAN_MspInit+0xa8>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80061ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80061ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f0:	2302      	movs	r3, #2
 80061f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f8:	2303      	movs	r3, #3
 80061fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80061fc:	2309      	movs	r3, #9
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	4619      	mov	r1, r3
 8006206:	480d      	ldr	r0, [pc, #52]	; (800623c <HAL_CAN_MspInit+0xac>)
 8006208:	f7fc fd34 	bl	8002c74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800620c:	2200      	movs	r2, #0
 800620e:	2100      	movs	r1, #0
 8006210:	2013      	movs	r0, #19
 8006212:	f7fc f960 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8006216:	2013      	movs	r0, #19
 8006218:	f7fc f979 	bl	800250e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	2014      	movs	r0, #20
 8006222:	f7fc f958 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006226:	2014      	movs	r0, #20
 8006228:	f7fc f971 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800622c:	bf00      	nop
 800622e:	3728      	adds	r7, #40	; 0x28
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40006400 	.word	0x40006400
 8006238:	40023800 	.word	0x40023800
 800623c:	40020000 	.word	0x40020000

08006240 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006246:	2300      	movs	r3, #0
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <MX_DMA_Init+0x5c>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <MX_DMA_Init+0x5c>)
 8006250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006254:	6313      	str	r3, [r2, #48]	; 0x30
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <MX_DMA_Init+0x5c>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006262:	2200      	movs	r2, #0
 8006264:	2100      	movs	r1, #0
 8006266:	2038      	movs	r0, #56	; 0x38
 8006268:	f7fc f935 	bl	80024d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800626c:	2038      	movs	r0, #56	; 0x38
 800626e:	f7fc f94e 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006272:	2200      	movs	r2, #0
 8006274:	2100      	movs	r1, #0
 8006276:	2039      	movs	r0, #57	; 0x39
 8006278:	f7fc f92d 	bl	80024d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800627c:	2039      	movs	r0, #57	; 0x39
 800627e:	f7fc f946 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006282:	2200      	movs	r2, #0
 8006284:	2100      	movs	r1, #0
 8006286:	203a      	movs	r0, #58	; 0x3a
 8006288:	f7fc f925 	bl	80024d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800628c:	203a      	movs	r0, #58	; 0x3a
 800628e:	f7fc f93e 	bl	800250e <HAL_NVIC_EnableIRQ>

}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800

080062a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	609a      	str	r2, [r3, #8]
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	4b3f      	ldr	r3, [pc, #252]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	4a3e      	ldr	r2, [pc, #248]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062c0:	f043 0304 	orr.w	r3, r3, #4
 80062c4:	6313      	str	r3, [r2, #48]	; 0x30
 80062c6:	4b3c      	ldr	r3, [pc, #240]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e0:	6313      	str	r3, [r2, #48]	; 0x30
 80062e2:	4b35      	ldr	r3, [pc, #212]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <MX_GPIO_Init+0x118>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6313      	str	r3, [r2, #48]	; 0x30
 80062fe:	4b2e      	ldr	r3, [pc, #184]	; (80063b8 <MX_GPIO_Init+0x118>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	60bb      	str	r3, [r7, #8]
 8006308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800630a:	2300      	movs	r3, #0
 800630c:	607b      	str	r3, [r7, #4]
 800630e:	4b2a      	ldr	r3, [pc, #168]	; (80063b8 <MX_GPIO_Init+0x118>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	4a29      	ldr	r2, [pc, #164]	; (80063b8 <MX_GPIO_Init+0x118>)
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	6313      	str	r3, [r2, #48]	; 0x30
 800631a:	4b27      	ldr	r3, [pc, #156]	; (80063b8 <MX_GPIO_Init+0x118>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 8006326:	2200      	movs	r2, #0
 8006328:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 800632c:	4823      	ldr	r0, [pc, #140]	; (80063bc <MX_GPIO_Init+0x11c>)
 800632e:	f7fc fe33 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 8006332:	2200      	movs	r2, #0
 8006334:	f241 0150 	movw	r1, #4176	; 0x1050
 8006338:	4821      	ldr	r0, [pc, #132]	; (80063c0 <MX_GPIO_Init+0x120>)
 800633a:	f7fc fe2d 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800633e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006344:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <MX_GPIO_Init+0x124>)
 8006346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006348:	2300      	movs	r3, #0
 800634a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	4619      	mov	r1, r3
 8006352:	481d      	ldr	r0, [pc, #116]	; (80063c8 <MX_GPIO_Init+0x128>)
 8006354:	f7fc fc8e 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 8006358:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800635c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800635e:	2301      	movs	r3, #1
 8006360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006366:	2300      	movs	r3, #0
 8006368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800636a:	f107 0314 	add.w	r3, r7, #20
 800636e:	4619      	mov	r1, r3
 8006370:	4812      	ldr	r0, [pc, #72]	; (80063bc <MX_GPIO_Init+0x11c>)
 8006372:	f7fc fc7f 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8006376:	f241 0350 	movw	r3, #4176	; 0x1050
 800637a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800637c:	2301      	movs	r3, #1
 800637e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006380:	2300      	movs	r3, #0
 8006382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006384:	2300      	movs	r3, #0
 8006386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006388:	f107 0314 	add.w	r3, r7, #20
 800638c:	4619      	mov	r1, r3
 800638e:	480c      	ldr	r0, [pc, #48]	; (80063c0 <MX_GPIO_Init+0x120>)
 8006390:	f7fc fc70 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 8006394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 80063a2:	f107 0314 	add.w	r3, r7, #20
 80063a6:	4619      	mov	r1, r3
 80063a8:	4804      	ldr	r0, [pc, #16]	; (80063bc <MX_GPIO_Init+0x11c>)
 80063aa:	f7fc fc63 	bl	8002c74 <HAL_GPIO_Init>

}
 80063ae:	bf00      	nop
 80063b0:	3728      	adds	r7, #40	; 0x28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40023800 	.word	0x40023800
 80063bc:	40020000 	.word	0x40020000
 80063c0:	40020400 	.word	0x40020400
 80063c4:	10210000 	.word	0x10210000
 80063c8:	40020800 	.word	0x40020800
 80063cc:	00000000 	.word	0x00000000

080063d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063d4:	b088      	sub	sp, #32
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	60bb      	str	r3, [r7, #8]


	/********** for ASR ***********/

	int ASR_steps = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	61fb      	str	r3, [r7, #28]

	float d_theta;

	float _omega_ref;

	float omega_error_integ_temp1 = 0.0f;
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]
	float omega_error_integ_temp2 = 0.0f;
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]

	float p_theta_error = 0.0f;
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063f2:	f7fa fd99 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063f6:	f000 fc3f 	bl	8006c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063fa:	f7ff ff51 	bl	80062a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80063fe:	f7ff ff1f 	bl	8006240 <MX_DMA_Init>
  MX_CAN1_Init();
 8006402:	f7ff fe8d 	bl	8006120 <MX_CAN1_Init>
  MX_SPI2_Init();
 8006406:	f001 fed5 	bl	80081b4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800640a:	f002 f9ed 	bl	80087e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800640e:	f7ff fc4f 	bl	8005cb0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006412:	f7ff fc9f 	bl	8005d54 <MX_ADC2_Init>
  MX_ADC3_Init();
 8006416:	f7ff fcef 	bl	8005df8 <MX_ADC3_Init>
  MX_TIM8_Init();
 800641a:	f002 f88b 	bl	8008534 <MX_TIM8_Init>


  /********** CAN Setting **********/


  sFilterConfig.FilterBank = 0;
 800641e:	4bb6      	ldr	r3, [pc, #728]	; (80066f8 <main+0x328>)
 8006420:	2200      	movs	r2, #0
 8006422:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006424:	4bb4      	ldr	r3, [pc, #720]	; (80066f8 <main+0x328>)
 8006426:	2200      	movs	r2, #0
 8006428:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800642a:	4bb3      	ldr	r3, [pc, #716]	; (80066f8 <main+0x328>)
 800642c:	2201      	movs	r2, #1
 800642e:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8006430:	4bb1      	ldr	r3, [pc, #708]	; (80066f8 <main+0x328>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8006436:	4bb0      	ldr	r3, [pc, #704]	; (80066f8 <main+0x328>)
 8006438:	2200      	movs	r2, #0
 800643a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800643c:	4bae      	ldr	r3, [pc, #696]	; (80066f8 <main+0x328>)
 800643e:	2200      	movs	r2, #0
 8006440:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8006442:	4bad      	ldr	r3, [pc, #692]	; (80066f8 <main+0x328>)
 8006444:	2200      	movs	r2, #0
 8006446:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006448:	4bab      	ldr	r3, [pc, #684]	; (80066f8 <main+0x328>)
 800644a:	2200      	movs	r2, #0
 800644c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800644e:	4baa      	ldr	r3, [pc, #680]	; (80066f8 <main+0x328>)
 8006450:	2201      	movs	r2, #1
 8006452:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8006454:	4ba8      	ldr	r3, [pc, #672]	; (80066f8 <main+0x328>)
 8006456:	220e      	movs	r2, #14
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800645a:	49a7      	ldr	r1, [pc, #668]	; (80066f8 <main+0x328>)
 800645c:	48a7      	ldr	r0, [pc, #668]	; (80066fc <main+0x32c>)
 800645e:	f7fb faf7 	bl	8001a50 <HAL_CAN_ConfigFilter>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <main+0x9c>
  {
	  Error_Handler();
 8006468:	f001 fe9d 	bl	80081a6 <Error_Handler>
  }

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800646c:	48a3      	ldr	r0, [pc, #652]	; (80066fc <main+0x32c>)
 800646e:	f7fb fbcf 	bl	8001c10 <HAL_CAN_Start>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <main+0xac>
  {
	  Error_Handler();
 8006478:	f001 fe95 	bl	80081a6 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800647c:	2103      	movs	r1, #3
 800647e:	489f      	ldr	r0, [pc, #636]	; (80066fc <main+0x32c>)
 8006480:	f7fb fd1d 	bl	8001ebe <HAL_CAN_ActivateNotification>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <main+0xbe>
  {
	  Error_Handler();
 800648a:	f001 fe8c 	bl	80081a6 <Error_Handler>





  UartPrintf(&huart2, "Hello world\n");
 800648e:	499c      	ldr	r1, [pc, #624]	; (8006700 <main+0x330>)
 8006490:	489c      	ldr	r0, [pc, #624]	; (8006704 <main+0x334>)
 8006492:	f001 fe5d 	bl	8008150 <UartPrintf>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 8006496:	2201      	movs	r2, #1
 8006498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800649c:	489a      	ldr	r0, [pc, #616]	; (8006708 <main+0x338>)
 800649e:	f7fc fd7b 	bl	8002f98 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 80064a2:	2201      	movs	r2, #1
 80064a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064a8:	4897      	ldr	r0, [pc, #604]	; (8006708 <main+0x338>)
 80064aa:	f7fc fd75 	bl	8002f98 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80064ae:	200a      	movs	r0, #10
 80064b0:	f7fa fdac 	bl	800100c <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 80064b4:	2200      	movs	r2, #0
 80064b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064ba:	4893      	ldr	r0, [pc, #588]	; (8006708 <main+0x338>)
 80064bc:	f7fc fd6c 	bl	8002f98 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80064c0:	2200      	movs	r2, #0
 80064c2:	2140      	movs	r1, #64	; 0x40
 80064c4:	4890      	ldr	r0, [pc, #576]	; (8006708 <main+0x338>)
 80064c6:	f7fc fd67 	bl	8002f98 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80064ca:	2200      	movs	r2, #0
 80064cc:	2110      	movs	r1, #16
 80064ce:	488f      	ldr	r0, [pc, #572]	; (800670c <main+0x33c>)
 80064d0:	f7fc fd62 	bl	8002f98 <HAL_GPIO_WritePin>



  // ADC Starting
  HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 80064d4:	2201      	movs	r2, #1
 80064d6:	498e      	ldr	r1, [pc, #568]	; (8006710 <main+0x340>)
 80064d8:	488e      	ldr	r0, [pc, #568]	; (8006714 <main+0x344>)
 80064da:	f7fa fdfd 	bl	80010d8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 80064de:	2201      	movs	r2, #1
 80064e0:	498d      	ldr	r1, [pc, #564]	; (8006718 <main+0x348>)
 80064e2:	488e      	ldr	r0, [pc, #568]	; (800671c <main+0x34c>)
 80064e4:	f7fa fdf8 	bl	80010d8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 80064e8:	2201      	movs	r2, #1
 80064ea:	498d      	ldr	r1, [pc, #564]	; (8006720 <main+0x350>)
 80064ec:	488d      	ldr	r0, [pc, #564]	; (8006724 <main+0x354>)
 80064ee:	f7fa fdf3 	bl	80010d8 <HAL_ADC_Start_DMA>
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 80064f2:	4b8d      	ldr	r3, [pc, #564]	; (8006728 <main+0x358>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f06f 0201 	mvn.w	r2, #1
 80064fa:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 80064fc:	4b8a      	ldr	r3, [pc, #552]	; (8006728 <main+0x358>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	4b89      	ldr	r3, [pc, #548]	; (8006728 <main+0x358>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	60da      	str	r2, [r3, #12]



  // 3phase PWM Starting
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 800650c:	2100      	movs	r1, #0
 800650e:	4886      	ldr	r0, [pc, #536]	; (8006728 <main+0x358>)
 8006510:	f7fd fef2 	bl	80042f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8006514:	2104      	movs	r1, #4
 8006516:	4884      	ldr	r0, [pc, #528]	; (8006728 <main+0x358>)
 8006518:	f7fd feee 	bl	80042f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 800651c:	2108      	movs	r1, #8
 800651e:	4882      	ldr	r0, [pc, #520]	; (8006728 <main+0x358>)
 8006520:	f7fd feea 	bl	80042f8 <HAL_TIM_PWM_Start_IT>

  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 8006524:	2100      	movs	r1, #0
 8006526:	4880      	ldr	r0, [pc, #512]	; (8006728 <main+0x358>)
 8006528:	f7fe fd27 	bl	8004f7a <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 800652c:	2104      	movs	r1, #4
 800652e:	487e      	ldr	r0, [pc, #504]	; (8006728 <main+0x358>)
 8006530:	f7fe fd23 	bl	8004f7a <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 8006534:	2108      	movs	r1, #8
 8006536:	487c      	ldr	r0, [pc, #496]	; (8006728 <main+0x358>)
 8006538:	f7fe fd1f 	bl	8004f7a <HAL_TIMEx_PWMN_Start_IT>



  // SPI Interrupt Setting
  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 800653c:	4b7b      	ldr	r3, [pc, #492]	; (800672c <main+0x35c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	4b7a      	ldr	r3, [pc, #488]	; (800672c <main+0x35c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800654a:	605a      	str	r2, [r3, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ASR_flg == 1)
 800654c:	4b78      	ldr	r3, [pc, #480]	; (8006730 <main+0x360>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d1fb      	bne.n	800654c <main+0x17c>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 8006554:	2110      	movs	r1, #16
 8006556:	486d      	ldr	r0, [pc, #436]	; (800670c <main+0x33c>)
 8006558:	f7fc fd37 	bl	8002fca <HAL_GPIO_TogglePin>


		  if(forced_commute_state > 0)
 800655c:	4b75      	ldr	r3, [pc, #468]	; (8006734 <main+0x364>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 81f4 	beq.w	8006950 <main+0x580>
		  {

			  switch(forced_commute_state)
 8006568:	4b72      	ldr	r3, [pc, #456]	; (8006734 <main+0x364>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	2b03      	cmp	r3, #3
 8006572:	f200 81ef 	bhi.w	8006954 <main+0x584>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <main+0x1ac>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	0800658d 	.word	0x0800658d
 8006580:	080065b1 	.word	0x080065b1
 8006584:	080066c9 	.word	0x080066c9
 8006588:	0800675f 	.word	0x0800675f
			  {
			  case 1:
				  if(forced_commute_count < 500)
 800658c:	4b6a      	ldr	r3, [pc, #424]	; (8006738 <main+0x368>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006594:	d205      	bcs.n	80065a2 <main+0x1d2>
					  forced_commute_count += 1;
 8006596:	4b68      	ldr	r3, [pc, #416]	; (8006738 <main+0x368>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3301      	adds	r3, #1
 800659c:	4a66      	ldr	r2, [pc, #408]	; (8006738 <main+0x368>)
 800659e:	6013      	str	r3, [r2, #0]
				  else
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 2;
				  }
				  break;
 80065a0:	e1d9      	b.n	8006956 <main+0x586>
					  forced_commute_count = 0;
 80065a2:	4b65      	ldr	r3, [pc, #404]	; (8006738 <main+0x368>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 2;
 80065a8:	4b62      	ldr	r3, [pc, #392]	; (8006734 <main+0x364>)
 80065aa:	2202      	movs	r2, #2
 80065ac:	701a      	strb	r2, [r3, #0]
				  break;
 80065ae:	e1d2      	b.n	8006956 <main+0x586>

			  case 2:
				  if(forced_commute_count < FORCED_COMMUTE_STEPS)
 80065b0:	4b61      	ldr	r3, [pc, #388]	; (8006738 <main+0x368>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80065b8:	d27f      	bcs.n	80066ba <main+0x2ea>
				  {
#if _FC_DUMP_
					  sensedTheta_f[forced_commute_count] = theta;
#endif
					  sensed_theta_error = forced_theta - theta;
 80065ba:	4b60      	ldr	r3, [pc, #384]	; (800673c <main+0x36c>)
 80065bc:	ed93 7a00 	vldr	s14, [r3]
 80065c0:	4b5f      	ldr	r3, [pc, #380]	; (8006740 <main+0x370>)
 80065c2:	edd3 7a00 	vldr	s15, [r3]
 80065c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065ca:	4b5e      	ldr	r3, [pc, #376]	; (8006744 <main+0x374>)
 80065cc:	edc3 7a00 	vstr	s15, [r3]
					  if(sensed_theta_error < -M_PI)		sensed_theta_error += 2.0f * M_PI;
 80065d0:	4b5c      	ldr	r3, [pc, #368]	; (8006744 <main+0x374>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7f9 ffcf 	bl	8000578 <__aeabi_f2d>
 80065da:	a341      	add	r3, pc, #260	; (adr r3, 80066e0 <main+0x310>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f7fa fa94 	bl	8000b0c <__aeabi_dcmplt>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d013      	beq.n	8006612 <main+0x242>
 80065ea:	4b56      	ldr	r3, [pc, #344]	; (8006744 <main+0x374>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7f9 ffc2 	bl	8000578 <__aeabi_f2d>
 80065f4:	a33c      	add	r3, pc, #240	; (adr r3, 80066e8 <main+0x318>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7f9 fe5f 	bl	80002bc <__adddf3>
 80065fe:	4603      	mov	r3, r0
 8006600:	460c      	mov	r4, r1
 8006602:	4618      	mov	r0, r3
 8006604:	4621      	mov	r1, r4
 8006606:	f7fa fabf 	bl	8000b88 <__aeabi_d2f>
 800660a:	4602      	mov	r2, r0
 800660c:	4b4d      	ldr	r3, [pc, #308]	; (8006744 <main+0x374>)
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e01f      	b.n	8006652 <main+0x282>
					  else if(sensed_theta_error > M_PI)	sensed_theta_error -= 2.0f * M_PI;
 8006612:	4b4c      	ldr	r3, [pc, #304]	; (8006744 <main+0x374>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7f9 ffae 	bl	8000578 <__aeabi_f2d>
 800661c:	a334      	add	r3, pc, #208	; (adr r3, 80066f0 <main+0x320>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f7fa fa91 	bl	8000b48 <__aeabi_dcmpgt>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d012      	beq.n	8006652 <main+0x282>
 800662c:	4b45      	ldr	r3, [pc, #276]	; (8006744 <main+0x374>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f7f9 ffa1 	bl	8000578 <__aeabi_f2d>
 8006636:	a32c      	add	r3, pc, #176	; (adr r3, 80066e8 <main+0x318>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 fe3c 	bl	80002b8 <__aeabi_dsub>
 8006640:	4603      	mov	r3, r0
 8006642:	460c      	mov	r4, r1
 8006644:	4618      	mov	r0, r3
 8006646:	4621      	mov	r1, r4
 8006648:	f7fa fa9e 	bl	8000b88 <__aeabi_d2f>
 800664c:	4602      	mov	r2, r0
 800664e:	4b3d      	ldr	r3, [pc, #244]	; (8006744 <main+0x374>)
 8006650:	601a      	str	r2, [r3, #0]
					  sensed_theta_error_sum += sensed_theta_error;
 8006652:	4b3c      	ldr	r3, [pc, #240]	; (8006744 <main+0x374>)
 8006654:	ed93 7a00 	vldr	s14, [r3]
 8006658:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <main+0x378>)
 800665a:	edd3 7a00 	vldr	s15, [r3]
 800665e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006662:	4b39      	ldr	r3, [pc, #228]	; (8006748 <main+0x378>)
 8006664:	edc3 7a00 	vstr	s15, [r3]
					  forced_theta = forced_commute_count * 2.0f * M_PI / FORCED_COMMUTE_STEPS;
 8006668:	4b33      	ldr	r3, [pc, #204]	; (8006738 <main+0x368>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006678:	ee17 0a90 	vmov	r0, s15
 800667c:	f7f9 ff7c 	bl	8000578 <__aeabi_f2d>
 8006680:	a31b      	add	r3, pc, #108	; (adr r3, 80066f0 <main+0x320>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 ffcf 	bl	8000628 <__aeabi_dmul>
 800668a:	4603      	mov	r3, r0
 800668c:	460c      	mov	r4, r1
 800668e:	4618      	mov	r0, r3
 8006690:	4621      	mov	r1, r4
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	4b2d      	ldr	r3, [pc, #180]	; (800674c <main+0x37c>)
 8006698:	f7fa f8f0 	bl	800087c <__aeabi_ddiv>
 800669c:	4603      	mov	r3, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	4618      	mov	r0, r3
 80066a2:	4621      	mov	r1, r4
 80066a4:	f7fa fa70 	bl	8000b88 <__aeabi_d2f>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <main+0x36c>)
 80066ac:	601a      	str	r2, [r3, #0]
					  forced_commute_count += 1;
 80066ae:	4b22      	ldr	r3, [pc, #136]	; (8006738 <main+0x368>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	4a20      	ldr	r2, [pc, #128]	; (8006738 <main+0x368>)
 80066b6:	6013      	str	r3, [r2, #0]
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 3;
					  break;
				  }
				  break;
 80066b8:	e14d      	b.n	8006956 <main+0x586>
					  forced_commute_count = 0;
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <main+0x368>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 3;
 80066c0:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <main+0x364>)
 80066c2:	2203      	movs	r2, #3
 80066c4:	701a      	strb	r2, [r3, #0]
					  break;
 80066c6:	e146      	b.n	8006956 <main+0x586>

			  case 3:
				  if(forced_commute_count < 500)
 80066c8:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <main+0x368>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80066d0:	d23e      	bcs.n	8006750 <main+0x380>
					  forced_commute_count += 1;
 80066d2:	4b19      	ldr	r3, [pc, #100]	; (8006738 <main+0x368>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	4a17      	ldr	r2, [pc, #92]	; (8006738 <main+0x368>)
 80066da:	6013      	str	r3, [r2, #0]
				  else
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 4;
				  }
				  break;
 80066dc:	e13b      	b.n	8006956 <main+0x586>
 80066de:	bf00      	nop
 80066e0:	54442d18 	.word	0x54442d18
 80066e4:	c00921fb 	.word	0xc00921fb
 80066e8:	54442d18 	.word	0x54442d18
 80066ec:	401921fb 	.word	0x401921fb
 80066f0:	54442d18 	.word	0x54442d18
 80066f4:	400921fb 	.word	0x400921fb
 80066f8:	20000428 	.word	0x20000428
 80066fc:	20000400 	.word	0x20000400
 8006700:	08009670 	.word	0x08009670
 8006704:	20000510 	.word	0x20000510
 8006708:	40020000 	.word	0x40020000
 800670c:	40020400 	.word	0x40020400
 8006710:	20000104 	.word	0x20000104
 8006714:	200002b0 	.word	0x200002b0
 8006718:	20000108 	.word	0x20000108
 800671c:	20000208 	.word	0x20000208
 8006720:	2000010c 	.word	0x2000010c
 8006724:	200002f8 	.word	0x200002f8
 8006728:	200004d0 	.word	0x200004d0
 800672c:	20000478 	.word	0x20000478
 8006730:	20000160 	.word	0x20000160
 8006734:	200000ec 	.word	0x200000ec
 8006738:	200000fc 	.word	0x200000fc
 800673c:	200000f0 	.word	0x200000f0
 8006740:	200000d8 	.word	0x200000d8
 8006744:	20000474 	.word	0x20000474
 8006748:	20000100 	.word	0x20000100
 800674c:	409f4000 	.word	0x409f4000
					  forced_commute_count = 0;
 8006750:	4ba1      	ldr	r3, [pc, #644]	; (80069d8 <main+0x608>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 4;
 8006756:	4ba1      	ldr	r3, [pc, #644]	; (80069dc <main+0x60c>)
 8006758:	2204      	movs	r2, #4
 800675a:	701a      	strb	r2, [r3, #0]
				  break;
 800675c:	e0fb      	b.n	8006956 <main+0x586>

			  case 4:
				  if(forced_commute_count < FORCED_COMMUTE_STEPS)
 800675e:	4b9e      	ldr	r3, [pc, #632]	; (80069d8 <main+0x608>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006766:	f080 8083 	bcs.w	8006870 <main+0x4a0>
				  {
#if _FC_DUMP_
					  sensedTheta_b[FORCED_COMMUTE_STEPS - forced_commute_count - 1] = theta;
#endif
					  sensed_theta_error = forced_theta - theta;
 800676a:	4b9d      	ldr	r3, [pc, #628]	; (80069e0 <main+0x610>)
 800676c:	ed93 7a00 	vldr	s14, [r3]
 8006770:	4b9c      	ldr	r3, [pc, #624]	; (80069e4 <main+0x614>)
 8006772:	edd3 7a00 	vldr	s15, [r3]
 8006776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800677a:	4b9b      	ldr	r3, [pc, #620]	; (80069e8 <main+0x618>)
 800677c:	edc3 7a00 	vstr	s15, [r3]
					  if(sensed_theta_error < -M_PI)		sensed_theta_error += 2.0f * M_PI;
 8006780:	4b99      	ldr	r3, [pc, #612]	; (80069e8 <main+0x618>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f7f9 fef7 	bl	8000578 <__aeabi_f2d>
 800678a:	a38d      	add	r3, pc, #564	; (adr r3, 80069c0 <main+0x5f0>)
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f7fa f9bc 	bl	8000b0c <__aeabi_dcmplt>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d013      	beq.n	80067c2 <main+0x3f2>
 800679a:	4b93      	ldr	r3, [pc, #588]	; (80069e8 <main+0x618>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7f9 feea 	bl	8000578 <__aeabi_f2d>
 80067a4:	a388      	add	r3, pc, #544	; (adr r3, 80069c8 <main+0x5f8>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7f9 fd87 	bl	80002bc <__adddf3>
 80067ae:	4603      	mov	r3, r0
 80067b0:	460c      	mov	r4, r1
 80067b2:	4618      	mov	r0, r3
 80067b4:	4621      	mov	r1, r4
 80067b6:	f7fa f9e7 	bl	8000b88 <__aeabi_d2f>
 80067ba:	4602      	mov	r2, r0
 80067bc:	4b8a      	ldr	r3, [pc, #552]	; (80069e8 <main+0x618>)
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e01f      	b.n	8006802 <main+0x432>
					  else if(sensed_theta_error > M_PI)	sensed_theta_error -= 2.0f * M_PI;
 80067c2:	4b89      	ldr	r3, [pc, #548]	; (80069e8 <main+0x618>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7f9 fed6 	bl	8000578 <__aeabi_f2d>
 80067cc:	a380      	add	r3, pc, #512	; (adr r3, 80069d0 <main+0x600>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7fa f9b9 	bl	8000b48 <__aeabi_dcmpgt>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d012      	beq.n	8006802 <main+0x432>
 80067dc:	4b82      	ldr	r3, [pc, #520]	; (80069e8 <main+0x618>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7f9 fec9 	bl	8000578 <__aeabi_f2d>
 80067e6:	a378      	add	r3, pc, #480	; (adr r3, 80069c8 <main+0x5f8>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 fd64 	bl	80002b8 <__aeabi_dsub>
 80067f0:	4603      	mov	r3, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	4618      	mov	r0, r3
 80067f6:	4621      	mov	r1, r4
 80067f8:	f7fa f9c6 	bl	8000b88 <__aeabi_d2f>
 80067fc:	4602      	mov	r2, r0
 80067fe:	4b7a      	ldr	r3, [pc, #488]	; (80069e8 <main+0x618>)
 8006800:	601a      	str	r2, [r3, #0]
					  sensed_theta_error_sum += sensed_theta_error;
 8006802:	4b79      	ldr	r3, [pc, #484]	; (80069e8 <main+0x618>)
 8006804:	ed93 7a00 	vldr	s14, [r3]
 8006808:	4b78      	ldr	r3, [pc, #480]	; (80069ec <main+0x61c>)
 800680a:	edd3 7a00 	vldr	s15, [r3]
 800680e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006812:	4b76      	ldr	r3, [pc, #472]	; (80069ec <main+0x61c>)
 8006814:	edc3 7a00 	vstr	s15, [r3]
					  forced_theta = (FORCED_COMMUTE_STEPS - forced_commute_count - 1) * 2.0f * M_PI / FORCED_COMMUTE_STEPS;
 8006818:	4b6f      	ldr	r3, [pc, #444]	; (80069d8 <main+0x608>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 8006820:	3307      	adds	r3, #7
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800682e:	ee17 0a90 	vmov	r0, s15
 8006832:	f7f9 fea1 	bl	8000578 <__aeabi_f2d>
 8006836:	a366      	add	r3, pc, #408	; (adr r3, 80069d0 <main+0x600>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f7f9 fef4 	bl	8000628 <__aeabi_dmul>
 8006840:	4603      	mov	r3, r0
 8006842:	460c      	mov	r4, r1
 8006844:	4618      	mov	r0, r3
 8006846:	4621      	mov	r1, r4
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	4b68      	ldr	r3, [pc, #416]	; (80069f0 <main+0x620>)
 800684e:	f7fa f815 	bl	800087c <__aeabi_ddiv>
 8006852:	4603      	mov	r3, r0
 8006854:	460c      	mov	r4, r1
 8006856:	4618      	mov	r0, r3
 8006858:	4621      	mov	r1, r4
 800685a:	f7fa f995 	bl	8000b88 <__aeabi_d2f>
 800685e:	4602      	mov	r2, r0
 8006860:	4b5f      	ldr	r3, [pc, #380]	; (80069e0 <main+0x610>)
 8006862:	601a      	str	r2, [r3, #0]
					  forced_commute_count += 1;
 8006864:	4b5c      	ldr	r3, [pc, #368]	; (80069d8 <main+0x608>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	4a5b      	ldr	r2, [pc, #364]	; (80069d8 <main+0x608>)
 800686c:	6013      	str	r3, [r2, #0]
					  else if(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
					  forced_commute_count = 0;
					  forced_commute_state = 0;
					  break;
				  }
				  break;
 800686e:	e072      	b.n	8006956 <main+0x586>
					  theta_re_offset = fmod(sensed_theta_error_sum * 0.5f / FORCED_COMMUTE_STEPS * POLES / 2, 2.0f * M_PI);
 8006870:	4b5e      	ldr	r3, [pc, #376]	; (80069ec <main+0x61c>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800687a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800687e:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80069f4 <main+0x624>
 8006882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006886:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800688a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800688e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006892:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006896:	ee16 0a90 	vmov	r0, s13
 800689a:	f7f9 fe6d 	bl	8000578 <__aeabi_f2d>
 800689e:	4603      	mov	r3, r0
 80068a0:	460c      	mov	r4, r1
 80068a2:	ed9f 1b49 	vldr	d1, [pc, #292]	; 80069c8 <main+0x5f8>
 80068a6:	ec44 3b10 	vmov	d0, r3, r4
 80068aa:	f002 fc79 	bl	80091a0 <fmod>
 80068ae:	ec54 3b10 	vmov	r3, r4, d0
 80068b2:	4618      	mov	r0, r3
 80068b4:	4621      	mov	r1, r4
 80068b6:	f7fa f967 	bl	8000b88 <__aeabi_d2f>
 80068ba:	4602      	mov	r2, r0
 80068bc:	4b4e      	ldr	r3, [pc, #312]	; (80069f8 <main+0x628>)
 80068be:	601a      	str	r2, [r3, #0]
					  if(theta_re_offset < -M_PI)		theta_re_offset += 2.0f * M_PI;
 80068c0:	4b4d      	ldr	r3, [pc, #308]	; (80069f8 <main+0x628>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7f9 fe57 	bl	8000578 <__aeabi_f2d>
 80068ca:	a33d      	add	r3, pc, #244	; (adr r3, 80069c0 <main+0x5f0>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7fa f91c 	bl	8000b0c <__aeabi_dcmplt>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d013      	beq.n	8006902 <main+0x532>
 80068da:	4b47      	ldr	r3, [pc, #284]	; (80069f8 <main+0x628>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7f9 fe4a 	bl	8000578 <__aeabi_f2d>
 80068e4:	a338      	add	r3, pc, #224	; (adr r3, 80069c8 <main+0x5f8>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f7f9 fce7 	bl	80002bc <__adddf3>
 80068ee:	4603      	mov	r3, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	4618      	mov	r0, r3
 80068f4:	4621      	mov	r1, r4
 80068f6:	f7fa f947 	bl	8000b88 <__aeabi_d2f>
 80068fa:	4602      	mov	r2, r0
 80068fc:	4b3e      	ldr	r3, [pc, #248]	; (80069f8 <main+0x628>)
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e01f      	b.n	8006942 <main+0x572>
					  else if(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
 8006902:	4b3d      	ldr	r3, [pc, #244]	; (80069f8 <main+0x628>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7f9 fe36 	bl	8000578 <__aeabi_f2d>
 800690c:	a330      	add	r3, pc, #192	; (adr r3, 80069d0 <main+0x600>)
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f7fa f919 	bl	8000b48 <__aeabi_dcmpgt>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d012      	beq.n	8006942 <main+0x572>
 800691c:	4b36      	ldr	r3, [pc, #216]	; (80069f8 <main+0x628>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f7f9 fe29 	bl	8000578 <__aeabi_f2d>
 8006926:	a328      	add	r3, pc, #160	; (adr r3, 80069c8 <main+0x5f8>)
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f7f9 fcc4 	bl	80002b8 <__aeabi_dsub>
 8006930:	4603      	mov	r3, r0
 8006932:	460c      	mov	r4, r1
 8006934:	4618      	mov	r0, r3
 8006936:	4621      	mov	r1, r4
 8006938:	f7fa f926 	bl	8000b88 <__aeabi_d2f>
 800693c:	4602      	mov	r2, r0
 800693e:	4b2e      	ldr	r3, [pc, #184]	; (80069f8 <main+0x628>)
 8006940:	601a      	str	r2, [r3, #0]
					  forced_commute_count = 0;
 8006942:	4b25      	ldr	r3, [pc, #148]	; (80069d8 <main+0x608>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 0;
 8006948:	4b24      	ldr	r3, [pc, #144]	; (80069dc <main+0x60c>)
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
					  break;
 800694e:	e002      	b.n	8006956 <main+0x586>
			  }




		  }
 8006950:	bf00      	nop
 8006952:	e000      	b.n	8006956 <main+0x586>
				  break;
 8006954:	bf00      	nop

#endif



		  if(ASR_steps <= 0)
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dc03      	bgt.n	8006964 <main+0x594>
		  {
			  d_theta = 0.0f;
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e009      	b.n	8006978 <main+0x5a8>
		  }
		  else
		  {
			  d_theta = theta - p_theta;
 8006964:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <main+0x614>)
 8006966:	ed93 7a00 	vldr	s14, [r3]
 800696a:	4b24      	ldr	r3, [pc, #144]	; (80069fc <main+0x62c>)
 800696c:	edd3 7a00 	vldr	s15, [r3]
 8006970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006974:	edc7 7a06 	vstr	s15, [r7, #24]
		  }
		  ASR_steps += 1;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	3301      	adds	r3, #1
 800697c:	61fb      	str	r3, [r7, #28]

		  p_theta = theta;
 800697e:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <main+0x614>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <main+0x62c>)
 8006984:	6013      	str	r3, [r2, #0]

		  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 8006986:	69b8      	ldr	r0, [r7, #24]
 8006988:	f7f9 fdf6 	bl	8000578 <__aeabi_f2d>
 800698c:	a30c      	add	r3, pc, #48	; (adr r3, 80069c0 <main+0x5f0>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f7fa f8bb 	bl	8000b0c <__aeabi_dcmplt>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d031      	beq.n	8006a00 <main+0x630>
 800699c:	69b8      	ldr	r0, [r7, #24]
 800699e:	f7f9 fdeb 	bl	8000578 <__aeabi_f2d>
 80069a2:	a309      	add	r3, pc, #36	; (adr r3, 80069c8 <main+0x5f8>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f7f9 fc88 	bl	80002bc <__adddf3>
 80069ac:	4603      	mov	r3, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	4618      	mov	r0, r3
 80069b2:	4621      	mov	r1, r4
 80069b4:	f7fa f8e8 	bl	8000b88 <__aeabi_d2f>
 80069b8:	4603      	mov	r3, r0
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e03b      	b.n	8006a36 <main+0x666>
 80069be:	bf00      	nop
 80069c0:	54442d18 	.word	0x54442d18
 80069c4:	c00921fb 	.word	0xc00921fb
 80069c8:	54442d18 	.word	0x54442d18
 80069cc:	401921fb 	.word	0x401921fb
 80069d0:	54442d18 	.word	0x54442d18
 80069d4:	400921fb 	.word	0x400921fb
 80069d8:	200000fc 	.word	0x200000fc
 80069dc:	200000ec 	.word	0x200000ec
 80069e0:	200000f0 	.word	0x200000f0
 80069e4:	200000d8 	.word	0x200000d8
 80069e8:	20000474 	.word	0x20000474
 80069ec:	20000100 	.word	0x20000100
 80069f0:	409f4000 	.word	0x409f4000
 80069f4:	44fa0000 	.word	0x44fa0000
 80069f8:	20000008 	.word	0x20000008
 80069fc:	200000e4 	.word	0x200000e4
		  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 8006a00:	69b8      	ldr	r0, [r7, #24]
 8006a02:	f7f9 fdb9 	bl	8000578 <__aeabi_f2d>
 8006a06:	a398      	add	r3, pc, #608	; (adr r3, 8006c68 <main+0x898>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f7fa f89c 	bl	8000b48 <__aeabi_dcmpgt>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00f      	beq.n	8006a36 <main+0x666>
 8006a16:	69b8      	ldr	r0, [r7, #24]
 8006a18:	f7f9 fdae 	bl	8000578 <__aeabi_f2d>
 8006a1c:	a394      	add	r3, pc, #592	; (adr r3, 8006c70 <main+0x8a0>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fc49 	bl	80002b8 <__aeabi_dsub>
 8006a26:	4603      	mov	r3, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	f7fa f8ab 	bl	8000b88 <__aeabi_d2f>
 8006a32:	4603      	mov	r3, r0
 8006a34:	61bb      	str	r3, [r7, #24]

		  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 8006a36:	4b7c      	ldr	r3, [pc, #496]	; (8006c28 <main+0x858>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7f9 fd9c 	bl	8000578 <__aeabi_f2d>
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	4b79      	ldr	r3, [pc, #484]	; (8006c2c <main+0x85c>)
 8006a46:	f7f9 fdef 	bl	8000628 <__aeabi_dmul>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	4625      	mov	r5, r4
 8006a50:	461c      	mov	r4, r3
 8006a52:	69b8      	ldr	r0, [r7, #24]
 8006a54:	f7f9 fd90 	bl	8000578 <__aeabi_f2d>
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	4b73      	ldr	r3, [pc, #460]	; (8006c2c <main+0x85c>)
 8006a5e:	f7f9 fde3 	bl	8000628 <__aeabi_dmul>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4690      	mov	r8, r2
 8006a68:	4699      	mov	r9, r3
 8006a6a:	4b71      	ldr	r3, [pc, #452]	; (8006c30 <main+0x860>)
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7f9 fd83 	bl	8000578 <__aeabi_f2d>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4640      	mov	r0, r8
 8006a78:	4649      	mov	r1, r9
 8006a7a:	f7f9 feff 	bl	800087c <__aeabi_ddiv>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fc19 	bl	80002bc <__adddf3>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	4618      	mov	r0, r3
 8006a90:	4621      	mov	r1, r4
 8006a92:	f7fa f879 	bl	8000b88 <__aeabi_d2f>
 8006a96:	4602      	mov	r2, r0
 8006a98:	4b63      	ldr	r3, [pc, #396]	; (8006c28 <main+0x858>)
 8006a9a:	601a      	str	r2, [r3, #0]
		  /********** ASR (Auto Speed Regulator) **********/

#if _ASR_ENABLE_


		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 8006a9c:	4b65      	ldr	r3, [pc, #404]	; (8006c34 <main+0x864>)
 8006a9e:	edd3 7a00 	vldr	s15, [r3]
 8006aa2:	eeb1 7a67 	vneg.f32	s14, s15
 8006aa6:	4b64      	ldr	r3, [pc, #400]	; (8006c38 <main+0x868>)
 8006aa8:	edd3 7a00 	vldr	s15, [r3]
 8006aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	dd07      	ble.n	8006ac6 <main+0x6f6>
 8006ab6:	4b5f      	ldr	r3, [pc, #380]	; (8006c34 <main+0x864>)
 8006ab8:	edd3 7a00 	vldr	s15, [r3]
 8006abc:	eef1 7a67 	vneg.f32	s15, s15
 8006ac0:	edc7 7a05 	vstr	s15, [r7, #20]
 8006ac4:	e011      	b.n	8006aea <main+0x71a>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 8006ac6:	4b5c      	ldr	r3, [pc, #368]	; (8006c38 <main+0x868>)
 8006ac8:	ed93 7a00 	vldr	s14, [r3]
 8006acc:	4b59      	ldr	r3, [pc, #356]	; (8006c34 <main+0x864>)
 8006ace:	edd3 7a00 	vldr	s15, [r3]
 8006ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ada:	dd03      	ble.n	8006ae4 <main+0x714>
 8006adc:	4b55      	ldr	r3, [pc, #340]	; (8006c34 <main+0x864>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e002      	b.n	8006aea <main+0x71a>
		  else								_omega_ref = omega_ref;
 8006ae4:	4b54      	ldr	r3, [pc, #336]	; (8006c38 <main+0x868>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	617b      	str	r3, [r7, #20]

		  omega_error = _omega_ref - omega;
 8006aea:	4b4f      	ldr	r3, [pc, #316]	; (8006c28 <main+0x858>)
 8006aec:	edd3 7a00 	vldr	s15, [r3]
 8006af0:	ed97 7a05 	vldr	s14, [r7, #20]
 8006af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af8:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <main+0x86c>)
 8006afa:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 8006afe:	4b4f      	ldr	r3, [pc, #316]	; (8006c3c <main+0x86c>)
 8006b00:	edd3 7a00 	vldr	s15, [r3]
 8006b04:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b0c:	edc7 7a04 	vstr	s15, [r7, #16]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 8006b10:	6938      	ldr	r0, [r7, #16]
 8006b12:	f7f9 fd31 	bl	8000578 <__aeabi_f2d>
 8006b16:	4604      	mov	r4, r0
 8006b18:	460d      	mov	r5, r1
 8006b1a:	4b45      	ldr	r3, [pc, #276]	; (8006c30 <main+0x860>)
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7f9 fd2b 	bl	8000578 <__aeabi_f2d>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	f04f 0000 	mov.w	r0, #0
 8006b2a:	4945      	ldr	r1, [pc, #276]	; (8006c40 <main+0x870>)
 8006b2c:	f7f9 fea6 	bl	800087c <__aeabi_ddiv>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4620      	mov	r0, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7f9 ffe8 	bl	8000b0c <__aeabi_dcmplt>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <main+0x784>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 8006b42:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006c44 <main+0x874>
 8006b46:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 8006b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b4e:	edc7 7a04 	vstr	s15, [r7, #16]
 8006b52:	e020      	b.n	8006b96 <main+0x7c6>
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 8006b54:	6938      	ldr	r0, [r7, #16]
 8006b56:	f7f9 fd0f 	bl	8000578 <__aeabi_f2d>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	460d      	mov	r5, r1
 8006b5e:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <main+0x860>)
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7f9 fd09 	bl	8000578 <__aeabi_f2d>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	f04f 0000 	mov.w	r0, #0
 8006b6e:	4936      	ldr	r1, [pc, #216]	; (8006c48 <main+0x878>)
 8006b70:	f7f9 fe84 	bl	800087c <__aeabi_ddiv>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 ffe4 	bl	8000b48 <__aeabi_dcmpgt>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <main+0x7c6>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 8006b86:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006c44 <main+0x874>
 8006b8a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8006b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b92:	edc7 7a04 	vstr	s15, [r7, #16]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 8006b96:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006c44 <main+0x874>
 8006b9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ba2:	edd7 6a04 	vldr	s13, [r7, #16]
 8006ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb2:	4b26      	ldr	r3, [pc, #152]	; (8006c4c <main+0x87c>)
 8006bb4:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	60fb      	str	r3, [r7, #12]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 8006bbc:	4b24      	ldr	r3, [pc, #144]	; (8006c50 <main+0x880>)
 8006bbe:	ed93 7a00 	vldr	s14, [r3]
 8006bc2:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <main+0x86c>)
 8006bc4:	edd3 7a00 	vldr	s15, [r3]
 8006bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bcc:	4b21      	ldr	r3, [pc, #132]	; (8006c54 <main+0x884>)
 8006bce:	edd3 6a00 	vldr	s13, [r3]
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <main+0x87c>)
 8006bd4:	edd3 7a00 	vldr	s15, [r3]
 8006bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006be0:	4b1d      	ldr	r3, [pc, #116]	; (8006c58 <main+0x888>)
 8006be2:	edc3 7a00 	vstr	s15, [r3]

		  Id_ref = 0.0f;
 8006be6:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <main+0x88c>)
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
		  Iq_ref = KT * torque_ref;
 8006bee:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <main+0x888>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7f9 fcc0 	bl	8000578 <__aeabi_f2d>
 8006bf8:	a309      	add	r3, pc, #36	; (adr r3, 8006c20 <main+0x850>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fd13 	bl	8000628 <__aeabi_dmul>
 8006c02:	4603      	mov	r3, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	4618      	mov	r0, r3
 8006c08:	4621      	mov	r1, r4
 8006c0a:	f7f9 ffbd 	bl	8000b88 <__aeabi_d2f>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <main+0x890>)
 8006c12:	601a      	str	r2, [r3, #0]


		  /********** end of ASR **********/


		  ASR_flg = 0;
 8006c14:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <main+0x894>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 8006c1a:	e497      	b.n	800654c <main+0x17c>
 8006c1c:	f3af 8000 	nop.w
 8006c20:	8b6ec798 	.word	0x8b6ec798
 8006c24:	3fd22b62 	.word	0x3fd22b62
 8006c28:	200000e8 	.word	0x200000e8
 8006c2c:	3fe00000 	.word	0x3fe00000
 8006c30:	3a83126f 	.word	0x3a83126f
 8006c34:	2000003c 	.word	0x2000003c
 8006c38:	20000168 	.word	0x20000168
 8006c3c:	2000016c 	.word	0x2000016c
 8006c40:	c0180000 	.word	0xc0180000
 8006c44:	3a83126f 	.word	0x3a83126f
 8006c48:	40180000 	.word	0x40180000
 8006c4c:	20000170 	.word	0x20000170
 8006c50:	20000034 	.word	0x20000034
 8006c54:	20000038 	.word	0x20000038
 8006c58:	20000174 	.word	0x20000174
 8006c5c:	20000148 	.word	0x20000148
 8006c60:	2000014c 	.word	0x2000014c
 8006c64:	20000160 	.word	0x20000160
 8006c68:	54442d18 	.word	0x54442d18
 8006c6c:	400921fb 	.word	0x400921fb
 8006c70:	54442d18 	.word	0x54442d18
 8006c74:	401921fb 	.word	0x401921fb

08006c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b094      	sub	sp, #80	; 0x50
 8006c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c7e:	f107 031c 	add.w	r3, r7, #28
 8006c82:	2234      	movs	r2, #52	; 0x34
 8006c84:	2100      	movs	r1, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 fe7c 	bl	8008984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c8c:	f107 0308 	add.w	r3, r7, #8
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	609a      	str	r2, [r3, #8]
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <SystemClock_Config+0xd0>)
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	4a28      	ldr	r2, [pc, #160]	; (8006d48 <SystemClock_Config+0xd0>)
 8006ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006caa:	6413      	str	r3, [r2, #64]	; 0x40
 8006cac:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <SystemClock_Config+0xd0>)
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <SystemClock_Config+0xd4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <SystemClock_Config+0xd4>)
 8006cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <SystemClock_Config+0xd4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006cdc:	2310      	movs	r3, #16
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006ce8:	2310      	movs	r3, #16
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8006cec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006cf0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cfe:	f107 031c 	add.w	r3, r7, #28
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fc fc32 	bl	800356c <HAL_RCC_OscConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006d0e:	f001 fa4a 	bl	80081a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d12:	230f      	movs	r3, #15
 8006d14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d16:	2302      	movs	r3, #2
 8006d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006d1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	2105      	movs	r1, #5
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fc f965 	bl	8003000 <HAL_RCC_ClockConfig>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8006d3c:	f001 fa33 	bl	80081a6 <Error_Handler>
  }
}
 8006d40:	bf00      	nop
 8006d42:	3750      	adds	r7, #80	; 0x50
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	40007000 	.word	0x40007000

08006d50 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2140      	movs	r1, #64	; 0x40
 8006d5c:	4803      	ldr	r0, [pc, #12]	; (8006d6c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8006d5e:	f7fc f91b 	bl	8002f98 <HAL_GPIO_WritePin>

}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40020400 	.word	0x40020400

08006d70 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2140      	movs	r1, #64	; 0x40
 8006d7c:	4803      	ldr	r0, [pc, #12]	; (8006d8c <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8006d7e:	f7fc f90b 	bl	8002f98 <HAL_GPIO_WritePin>

}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40020400 	.word	0x40020400

08006d90 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2140      	movs	r1, #64	; 0x40
 8006d9c:	4803      	ldr	r0, [pc, #12]	; (8006dac <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8006d9e:	f7fc f8fb 	bl	8002f98 <HAL_GPIO_WritePin>

}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40020400 	.word	0x40020400

08006db0 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 8006db8:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006dba:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fa ff6a 	bl	8001c98 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 8006dc4:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	701a      	strb	r2, [r3, #0]

#if _ASR_ENABLE_ && !_APR_ENABLE_
	if(can1RxHeader.StdId == 0x004 && can1RxHeader.DLC == 0x4)
 8006dca:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d112      	bne.n	8006df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d10e      	bne.n	8006df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		controlRef.byte[0] = can1RxData[0];
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006de8:	789b      	ldrb	r3, [r3, #2]
 8006dea:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006dee:	78db      	ldrb	r3, [r3, #3]
 8006df0:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a08      	ldr	r2, [pc, #32]	; (8006e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8006df6:	6013      	str	r3, [r2, #0]
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8006df8:	2201      	movs	r2, #1
 8006dfa:	2140      	movs	r1, #64	; 0x40
 8006dfc:	4807      	ldr	r0, [pc, #28]	; (8006e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8006dfe:	f7fc f8cb 	bl	8002f98 <HAL_GPIO_WritePin>

}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2000046c 	.word	0x2000046c
 8006e10:	20000450 	.word	0x20000450
 8006e14:	20000178 	.word	0x20000178
 8006e18:	20000168 	.word	0x20000168
 8006e1c:	40020000 	.word	0x40020000

08006e20 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a07      	ldr	r2, [pc, #28]	; (8006e4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <HAL_TIM_PeriodElapsedCallback+0x24>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b10      	cmp	r3, #16
 8006e3e:	d001      	beq.n	8006e44 <HAL_TIM_PeriodElapsedCallback+0x24>
		{

			currentControl();
 8006e40:	f000 f806 	bl	8006e50 <currentControl>
		}


	}

}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40010400 	.word	0x40010400

08006e50 <currentControl>:




inline static void currentControl(void)
{
 8006e50:	b5b0      	push	{r4, r5, r7, lr}
 8006e52:	af00      	add	r7, sp, #0
	static float Id_error_integ_temp2 = 0.0f;
	static float Iq_error_integ_temp1 = 0.0f;
	static float Iq_error_integ_temp2 = 0.0f;


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 8006e54:	2201      	movs	r2, #1
 8006e56:	2140      	movs	r1, #64	; 0x40
 8006e58:	48bf      	ldr	r0, [pc, #764]	; (8007158 <currentControl+0x308>)
 8006e5a:	f7fc f89d 	bl	8002f98 <HAL_GPIO_WritePin>
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 8006e5e:	2201      	movs	r2, #1
 8006e60:	49be      	ldr	r1, [pc, #760]	; (800715c <currentControl+0x30c>)
 8006e62:	48bf      	ldr	r0, [pc, #764]	; (8007160 <currentControl+0x310>)
 8006e64:	f7fa f938 	bl	80010d8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 8006e68:	2201      	movs	r2, #1
 8006e6a:	49be      	ldr	r1, [pc, #760]	; (8007164 <currentControl+0x314>)
 8006e6c:	48be      	ldr	r0, [pc, #760]	; (8007168 <currentControl+0x318>)
 8006e6e:	f7fa f933 	bl	80010d8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 8006e72:	2201      	movs	r2, #1
 8006e74:	49bd      	ldr	r1, [pc, #756]	; (800716c <currentControl+0x31c>)
 8006e76:	48be      	ldr	r0, [pc, #760]	; (8007170 <currentControl+0x320>)
 8006e78:	f7fa f92e 	bl	80010d8 <HAL_ADC_Start_DMA>


	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e82:	48b5      	ldr	r0, [pc, #724]	; (8007158 <currentControl+0x308>)
 8006e84:	f7fc f888 	bl	8002f98 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 8006e88:	4bba      	ldr	r3, [pc, #744]	; (8007174 <currentControl+0x324>)
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006e94:	4ab7      	ldr	r2, [pc, #732]	; (8007174 <currentControl+0x324>)
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4bb6      	ldr	r3, [pc, #728]	; (8007178 <currentControl+0x328>)
 8006ea0:	601a      	str	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 8006ea2:	4bb5      	ldr	r3, [pc, #724]	; (8007178 <currentControl+0x328>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006eae:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800717c <currentControl+0x32c>
 8006eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006eba:	ee17 0a90 	vmov	r0, s15
 8006ebe:	f7f9 fb5b 	bl	8000578 <__aeabi_f2d>
 8006ec2:	a3a1      	add	r3, pc, #644	; (adr r3, 8007148 <currentControl+0x2f8>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f7f9 fbae 	bl	8000628 <__aeabi_dmul>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	4625      	mov	r5, r4
 8006ed2:	461c      	mov	r4, r3
 8006ed4:	4baa      	ldr	r3, [pc, #680]	; (8007180 <currentControl+0x330>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7f9 fb4d 	bl	8000578 <__aeabi_f2d>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f7f9 f9e9 	bl	80002bc <__adddf3>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	4618      	mov	r0, r3
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	f7f9 fe49 	bl	8000b88 <__aeabi_d2f>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	4ba2      	ldr	r3, [pc, #648]	; (8007184 <currentControl+0x334>)
 8006efa:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 8006efc:	4ba1      	ldr	r3, [pc, #644]	; (8007184 <currentControl+0x334>)
 8006efe:	edd3 7a00 	vldr	s15, [r3]
 8006f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0a:	d513      	bpl.n	8006f34 <currentControl+0xe4>
 8006f0c:	4b9d      	ldr	r3, [pc, #628]	; (8007184 <currentControl+0x334>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7f9 fb31 	bl	8000578 <__aeabi_f2d>
 8006f16:	a38e      	add	r3, pc, #568	; (adr r3, 8007150 <currentControl+0x300>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 f9ce 	bl	80002bc <__adddf3>
 8006f20:	4603      	mov	r3, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	4618      	mov	r0, r3
 8006f26:	4621      	mov	r1, r4
 8006f28:	f7f9 fe2e 	bl	8000b88 <__aeabi_d2f>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b96      	ldr	r3, [pc, #600]	; (8007188 <currentControl+0x338>)
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e024      	b.n	8006f7e <currentControl+0x12e>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 8006f34:	4b93      	ldr	r3, [pc, #588]	; (8007184 <currentControl+0x334>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7f9 fb1d 	bl	8000578 <__aeabi_f2d>
 8006f3e:	a384      	add	r3, pc, #528	; (adr r3, 8007150 <currentControl+0x300>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f7f9 fdf6 	bl	8000b34 <__aeabi_dcmpge>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d013      	beq.n	8006f76 <currentControl+0x126>
 8006f4e:	4b8d      	ldr	r3, [pc, #564]	; (8007184 <currentControl+0x334>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7f9 fb10 	bl	8000578 <__aeabi_f2d>
 8006f58:	a37d      	add	r3, pc, #500	; (adr r3, 8007150 <currentControl+0x300>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f9ab 	bl	80002b8 <__aeabi_dsub>
 8006f62:	4603      	mov	r3, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	4618      	mov	r0, r3
 8006f68:	4621      	mov	r1, r4
 8006f6a:	f7f9 fe0d 	bl	8000b88 <__aeabi_d2f>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4b85      	ldr	r3, [pc, #532]	; (8007188 <currentControl+0x338>)
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e003      	b.n	8006f7e <currentControl+0x12e>
	else						theta = _theta;
 8006f76:	4b83      	ldr	r3, [pc, #524]	; (8007184 <currentControl+0x334>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a83      	ldr	r2, [pc, #524]	; (8007188 <currentControl+0x338>)
 8006f7c:	6013      	str	r3, [r2, #0]


	// calculate sin(theta_re), cos(theta_re)
	if(forced_commute_state > 0)
 8006f7e:	4b83      	ldr	r3, [pc, #524]	; (800718c <currentControl+0x33c>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8082 	beq.w	800708e <currentControl+0x23e>
	{

		_forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 8006f8a:	4b81      	ldr	r3, [pc, #516]	; (8007190 <currentControl+0x340>)
 8006f8c:	edd3 7a00 	vldr	s15, [r3]
 8006f90:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8006f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006f9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fa0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8007194 <currentControl+0x344>
 8006fa4:	eeb0 0a66 	vmov.f32	s0, s13
 8006fa8:	f002 f95e 	bl	8009268 <fmodf>
 8006fac:	eef0 7a40 	vmov.f32	s15, s0
 8006fb0:	4b79      	ldr	r3, [pc, #484]	; (8007198 <currentControl+0x348>)
 8006fb2:	edc3 7a00 	vstr	s15, [r3]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 8006fb6:	4b78      	ldr	r3, [pc, #480]	; (8007198 <currentControl+0x348>)
 8006fb8:	edd3 7a00 	vldr	s15, [r3]
 8006fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc4:	d513      	bpl.n	8006fee <currentControl+0x19e>
 8006fc6:	4b74      	ldr	r3, [pc, #464]	; (8007198 <currentControl+0x348>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7f9 fad4 	bl	8000578 <__aeabi_f2d>
 8006fd0:	a35f      	add	r3, pc, #380	; (adr r3, 8007150 <currentControl+0x300>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 f971 	bl	80002bc <__adddf3>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	f7f9 fdd1 	bl	8000b88 <__aeabi_d2f>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	4b6c      	ldr	r3, [pc, #432]	; (800719c <currentControl+0x34c>)
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	e024      	b.n	8007038 <currentControl+0x1e8>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 8006fee:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <currentControl+0x348>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7f9 fac0 	bl	8000578 <__aeabi_f2d>
 8006ff8:	a355      	add	r3, pc, #340	; (adr r3, 8007150 <currentControl+0x300>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fd99 	bl	8000b34 <__aeabi_dcmpge>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d013      	beq.n	8007030 <currentControl+0x1e0>
 8007008:	4b63      	ldr	r3, [pc, #396]	; (8007198 <currentControl+0x348>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f7f9 fab3 	bl	8000578 <__aeabi_f2d>
 8007012:	a34f      	add	r3, pc, #316	; (adr r3, 8007150 <currentControl+0x300>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 f94e 	bl	80002b8 <__aeabi_dsub>
 800701c:	4603      	mov	r3, r0
 800701e:	460c      	mov	r4, r1
 8007020:	4618      	mov	r0, r3
 8007022:	4621      	mov	r1, r4
 8007024:	f7f9 fdb0 	bl	8000b88 <__aeabi_d2f>
 8007028:	4602      	mov	r2, r0
 800702a:	4b5c      	ldr	r3, [pc, #368]	; (800719c <currentControl+0x34c>)
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e003      	b.n	8007038 <currentControl+0x1e8>
		else									forced_theta_re = _forced_theta_re;
 8007030:	4b59      	ldr	r3, [pc, #356]	; (8007198 <currentControl+0x348>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a59      	ldr	r2, [pc, #356]	; (800719c <currentControl+0x34c>)
 8007036:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 8007038:	4b58      	ldr	r3, [pc, #352]	; (800719c <currentControl+0x34c>)
 800703a:	edd3 7a00 	vldr	s15, [r3]
 800703e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80071a0 <currentControl+0x350>
 8007042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800704a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800704e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80071a4 <currentControl+0x354>
 8007052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800705a:	ee17 3a90 	vmov	r3, s15
 800705e:	4a52      	ldr	r2, [pc, #328]	; (80071a8 <currentControl+0x358>)
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a51      	ldr	r2, [pc, #324]	; (80071ac <currentControl+0x35c>)
 8007068:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 800706a:	4b4c      	ldr	r3, [pc, #304]	; (800719c <currentControl+0x34c>)
 800706c:	edd3 7a00 	vldr	s15, [r3]
 8007070:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80071b0 <currentControl+0x360>
 8007074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800707c:	ee17 3a90 	vmov	r3, s15
 8007080:	4a49      	ldr	r2, [pc, #292]	; (80071a8 <currentControl+0x358>)
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a4a      	ldr	r2, [pc, #296]	; (80071b4 <currentControl+0x364>)
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e0eb      	b.n	8007266 <currentControl+0x416>
	}
	else
	{

		_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 800708e:	4b3a      	ldr	r3, [pc, #232]	; (8007178 <currentControl+0x328>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800709a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800717c <currentControl+0x32c>
 800709e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80070a6:	ee17 0a90 	vmov	r0, s15
 80070aa:	f7f9 fa65 	bl	8000578 <__aeabi_f2d>
 80070ae:	a326      	add	r3, pc, #152	; (adr r3, 8007148 <currentControl+0x2f8>)
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	f7f9 fab8 	bl	8000628 <__aeabi_dmul>
 80070b8:	4603      	mov	r3, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	4618      	mov	r0, r3
 80070be:	4621      	mov	r1, r4
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	4b3c      	ldr	r3, [pc, #240]	; (80071b8 <currentControl+0x368>)
 80070c6:	f7f9 faaf 	bl	8000628 <__aeabi_dmul>
 80070ca:	4603      	mov	r3, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	4618      	mov	r0, r3
 80070d0:	4621      	mov	r1, r4
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070da:	f7f9 fbcf 	bl	800087c <__aeabi_ddiv>
 80070de:	4603      	mov	r3, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	4618      	mov	r0, r3
 80070e4:	4621      	mov	r1, r4
 80070e6:	f7f9 fd4f 	bl	8000b88 <__aeabi_d2f>
 80070ea:	4603      	mov	r3, r0
 80070ec:	eddf 0a29 	vldr	s1, [pc, #164]	; 8007194 <currentControl+0x344>
 80070f0:	ee00 3a10 	vmov	s0, r3
 80070f4:	f002 f8b8 	bl	8009268 <fmodf>
 80070f8:	eeb0 7a40 	vmov.f32	s14, s0
 80070fc:	4b2f      	ldr	r3, [pc, #188]	; (80071bc <currentControl+0x36c>)
 80070fe:	edd3 7a00 	vldr	s15, [r3]
 8007102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007106:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <currentControl+0x370>)
 8007108:	edc3 7a00 	vstr	s15, [r3]

		if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 800710c:	4b2c      	ldr	r3, [pc, #176]	; (80071c0 <currentControl+0x370>)
 800710e:	edd3 7a00 	vldr	s15, [r3]
 8007112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711a:	d555      	bpl.n	80071c8 <currentControl+0x378>
 800711c:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <currentControl+0x370>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f7f9 fa29 	bl	8000578 <__aeabi_f2d>
 8007126:	a30a      	add	r3, pc, #40	; (adr r3, 8007150 <currentControl+0x300>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f7f9 f8c6 	bl	80002bc <__adddf3>
 8007130:	4603      	mov	r3, r0
 8007132:	460c      	mov	r4, r1
 8007134:	4618      	mov	r0, r3
 8007136:	4621      	mov	r1, r4
 8007138:	f7f9 fd26 	bl	8000b88 <__aeabi_d2f>
 800713c:	4602      	mov	r2, r0
 800713e:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <currentControl+0x374>)
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e066      	b.n	8007212 <currentControl+0x3c2>
 8007144:	f3af 8000 	nop.w
 8007148:	54442d18 	.word	0x54442d18
 800714c:	400921fb 	.word	0x400921fb
 8007150:	54442d18 	.word	0x54442d18
 8007154:	401921fb 	.word	0x401921fb
 8007158:	40020400 	.word	0x40020400
 800715c:	20000104 	.word	0x20000104
 8007160:	200002b0 	.word	0x200002b0
 8007164:	20000108 	.word	0x20000108
 8007168:	20000208 	.word	0x20000208
 800716c:	2000010c 	.word	0x2000010c
 8007170:	200002f8 	.word	0x200002f8
 8007174:	200000d0 	.word	0x200000d0
 8007178:	200000d4 	.word	0x200000d4
 800717c:	46800000 	.word	0x46800000
 8007180:	200000c8 	.word	0x200000c8
 8007184:	2000017c 	.word	0x2000017c
 8007188:	200000d8 	.word	0x200000d8
 800718c:	200000ec 	.word	0x200000ec
 8007190:	200000f0 	.word	0x200000f0
 8007194:	40c90fdb 	.word	0x40c90fdb
 8007198:	200000f4 	.word	0x200000f4
 800719c:	200000f8 	.word	0x200000f8
 80071a0:	3ea2f838 	.word	0x3ea2f838
 80071a4:	459c4000 	.word	0x459c4000
 80071a8:	08009688 	.word	0x08009688
 80071ac:	2000000c 	.word	0x2000000c
 80071b0:	44c6f195 	.word	0x44c6f195
 80071b4:	200000e0 	.word	0x200000e0
 80071b8:	40360000 	.word	0x40360000
 80071bc:	20000008 	.word	0x20000008
 80071c0:	20000180 	.word	0x20000180
 80071c4:	200000dc 	.word	0x200000dc
		else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 80071c8:	4bb3      	ldr	r3, [pc, #716]	; (8007498 <currentControl+0x648>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7f9 f9d3 	bl	8000578 <__aeabi_f2d>
 80071d2:	a3af      	add	r3, pc, #700	; (adr r3, 8007490 <currentControl+0x640>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 fcac 	bl	8000b34 <__aeabi_dcmpge>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d013      	beq.n	800720a <currentControl+0x3ba>
 80071e2:	4bad      	ldr	r3, [pc, #692]	; (8007498 <currentControl+0x648>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 f9c6 	bl	8000578 <__aeabi_f2d>
 80071ec:	a3a8      	add	r3, pc, #672	; (adr r3, 8007490 <currentControl+0x640>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 f861 	bl	80002b8 <__aeabi_dsub>
 80071f6:	4603      	mov	r3, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	4618      	mov	r0, r3
 80071fc:	4621      	mov	r1, r4
 80071fe:	f7f9 fcc3 	bl	8000b88 <__aeabi_d2f>
 8007202:	4602      	mov	r2, r0
 8007204:	4ba5      	ldr	r3, [pc, #660]	; (800749c <currentControl+0x64c>)
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	e003      	b.n	8007212 <currentControl+0x3c2>
		else							theta_re = _theta_re;
 800720a:	4ba3      	ldr	r3, [pc, #652]	; (8007498 <currentControl+0x648>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4aa3      	ldr	r2, [pc, #652]	; (800749c <currentControl+0x64c>)
 8007210:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 8007212:	4ba2      	ldr	r3, [pc, #648]	; (800749c <currentControl+0x64c>)
 8007214:	edd3 7a00 	vldr	s15, [r3]
 8007218:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80074a0 <currentControl+0x650>
 800721c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007220:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007228:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80074a4 <currentControl+0x654>
 800722c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007234:	ee17 3a90 	vmov	r3, s15
 8007238:	4a9b      	ldr	r2, [pc, #620]	; (80074a8 <currentControl+0x658>)
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a9a      	ldr	r2, [pc, #616]	; (80074ac <currentControl+0x65c>)
 8007242:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 8007244:	4b95      	ldr	r3, [pc, #596]	; (800749c <currentControl+0x64c>)
 8007246:	edd3 7a00 	vldr	s15, [r3]
 800724a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80074b0 <currentControl+0x660>
 800724e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007256:	ee17 3a90 	vmov	r3, s15
 800725a:	4a93      	ldr	r2, [pc, #588]	; (80074a8 <currentControl+0x658>)
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a94      	ldr	r2, [pc, #592]	; (80074b4 <currentControl+0x664>)
 8007264:	6013      	str	r3, [r2, #0]
	}



	AD_Iu_buf[pos_MAF_I] = (int32_t)AD_Iu - ADI_Offset;
 8007266:	4b94      	ldr	r3, [pc, #592]	; (80074b8 <currentControl+0x668>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4619      	mov	r1, r3
 800726c:	4b93      	ldr	r3, [pc, #588]	; (80074bc <currentControl+0x66c>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4b93      	ldr	r3, [pc, #588]	; (80074c0 <currentControl+0x670>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	1a8a      	subs	r2, r1, r2
 8007276:	4993      	ldr	r1, [pc, #588]	; (80074c4 <currentControl+0x674>)
 8007278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AD_Iv_buf[pos_MAF_I] = (int32_t)AD_Iv - ADI_Offset;
 800727c:	4b92      	ldr	r3, [pc, #584]	; (80074c8 <currentControl+0x678>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4619      	mov	r1, r3
 8007282:	4b8e      	ldr	r3, [pc, #568]	; (80074bc <currentControl+0x66c>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b8e      	ldr	r3, [pc, #568]	; (80074c0 <currentControl+0x670>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1a8a      	subs	r2, r1, r2
 800728c:	498f      	ldr	r1, [pc, #572]	; (80074cc <currentControl+0x67c>)
 800728e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AD_Iw_buf[pos_MAF_I] = (int32_t)AD_Iw - ADI_Offset;
 8007292:	4b8f      	ldr	r3, [pc, #572]	; (80074d0 <currentControl+0x680>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4619      	mov	r1, r3
 8007298:	4b88      	ldr	r3, [pc, #544]	; (80074bc <currentControl+0x66c>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4b88      	ldr	r3, [pc, #544]	; (80074c0 <currentControl+0x670>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	1a8a      	subs	r2, r1, r2
 80072a2:	498c      	ldr	r1, [pc, #560]	; (80074d4 <currentControl+0x684>)
 80072a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	AD_Iu_MAF += AD_Iu_buf[pos_MAF_I];
 80072a8:	4b85      	ldr	r3, [pc, #532]	; (80074c0 <currentControl+0x670>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a85      	ldr	r2, [pc, #532]	; (80074c4 <currentControl+0x674>)
 80072ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072b2:	4b89      	ldr	r3, [pc, #548]	; (80074d8 <currentControl+0x688>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4413      	add	r3, r2
 80072b8:	4a87      	ldr	r2, [pc, #540]	; (80074d8 <currentControl+0x688>)
 80072ba:	6013      	str	r3, [r2, #0]
	AD_Iv_MAF += AD_Iv_buf[pos_MAF_I];
 80072bc:	4b80      	ldr	r3, [pc, #512]	; (80074c0 <currentControl+0x670>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a82      	ldr	r2, [pc, #520]	; (80074cc <currentControl+0x67c>)
 80072c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072c6:	4b85      	ldr	r3, [pc, #532]	; (80074dc <currentControl+0x68c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4413      	add	r3, r2
 80072cc:	4a83      	ldr	r2, [pc, #524]	; (80074dc <currentControl+0x68c>)
 80072ce:	6013      	str	r3, [r2, #0]
	AD_Iw_MAF += AD_Iw_buf[pos_MAF_I];
 80072d0:	4b7b      	ldr	r3, [pc, #492]	; (80074c0 <currentControl+0x670>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a7f      	ldr	r2, [pc, #508]	; (80074d4 <currentControl+0x684>)
 80072d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072da:	4b81      	ldr	r3, [pc, #516]	; (80074e0 <currentControl+0x690>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4413      	add	r3, r2
 80072e0:	4a7f      	ldr	r2, [pc, #508]	; (80074e0 <currentControl+0x690>)
 80072e2:	6013      	str	r3, [r2, #0]

	// Writing position Update
	pos_MAF_I += 1;
 80072e4:	4b76      	ldr	r3, [pc, #472]	; (80074c0 <currentControl+0x670>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3301      	adds	r3, #1
 80072ea:	4a75      	ldr	r2, [pc, #468]	; (80074c0 <currentControl+0x670>)
 80072ec:	6013      	str	r3, [r2, #0]
	if(pos_MAF_I >= N_MAF_I)
 80072ee:	4b74      	ldr	r3, [pc, #464]	; (80074c0 <currentControl+0x670>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	dd02      	ble.n	80072fc <currentControl+0x4ac>
	{
		pos_MAF_I = 0;
 80072f6:	4b72      	ldr	r3, [pc, #456]	; (80074c0 <currentControl+0x670>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
	}

	V_Iu = (float)AD_Iu_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iu_offset;
 80072fc:	4b76      	ldr	r3, [pc, #472]	; (80074d8 <currentControl+0x688>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	ee07 3a90 	vmov	s15, r3
 8007304:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80074e4 <currentControl+0x694>
 800731e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007322:	4b71      	ldr	r3, [pc, #452]	; (80074e8 <currentControl+0x698>)
 8007324:	edd3 7a00 	vldr	s15, [r3]
 8007328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800732c:	4b6f      	ldr	r3, [pc, #444]	; (80074ec <currentControl+0x69c>)
 800732e:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iv_offset;
 8007332:	4b6a      	ldr	r3, [pc, #424]	; (80074dc <currentControl+0x68c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800733e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800734c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007350:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80074e4 <currentControl+0x694>
 8007354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007358:	4b65      	ldr	r3, [pc, #404]	; (80074f0 <currentControl+0x6a0>)
 800735a:	edd3 7a00 	vldr	s15, [r3]
 800735e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007362:	4b64      	ldr	r3, [pc, #400]	; (80074f4 <currentControl+0x6a4>)
 8007364:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iw_offset;
 8007368:	4b5d      	ldr	r3, [pc, #372]	; (80074e0 <currentControl+0x690>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007386:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80074e4 <currentControl+0x694>
 800738a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800738e:	4b5a      	ldr	r3, [pc, #360]	; (80074f8 <currentControl+0x6a8>)
 8007390:	edd3 7a00 	vldr	s15, [r3]
 8007394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007398:	4b58      	ldr	r3, [pc, #352]	; (80074fc <currentControl+0x6ac>)
 800739a:	edc3 7a00 	vstr	s15, [r3]

	AD_Iu_MAF -= AD_Iu_buf[pos_MAF_I];
 800739e:	4b4e      	ldr	r3, [pc, #312]	; (80074d8 <currentControl+0x688>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b47      	ldr	r3, [pc, #284]	; (80074c0 <currentControl+0x670>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4947      	ldr	r1, [pc, #284]	; (80074c4 <currentControl+0x674>)
 80073a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	4a4a      	ldr	r2, [pc, #296]	; (80074d8 <currentControl+0x688>)
 80073b0:	6013      	str	r3, [r2, #0]
	AD_Iv_MAF -= AD_Iv_buf[pos_MAF_I];
 80073b2:	4b4a      	ldr	r3, [pc, #296]	; (80074dc <currentControl+0x68c>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b42      	ldr	r3, [pc, #264]	; (80074c0 <currentControl+0x670>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4944      	ldr	r1, [pc, #272]	; (80074cc <currentControl+0x67c>)
 80073bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	4a46      	ldr	r2, [pc, #280]	; (80074dc <currentControl+0x68c>)
 80073c4:	6013      	str	r3, [r2, #0]
	AD_Iw_MAF -= AD_Iw_buf[pos_MAF_I];
 80073c6:	4b46      	ldr	r3, [pc, #280]	; (80074e0 <currentControl+0x690>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <currentControl+0x670>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4941      	ldr	r1, [pc, #260]	; (80074d4 <currentControl+0x684>)
 80073d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	4a42      	ldr	r2, [pc, #264]	; (80074e0 <currentControl+0x690>)
 80073d8:	6013      	str	r3, [r2, #0]
	V_Iv = V_Iv * 0.9 + 0.1 * ((float)(ADI_Offset - (int32_t)AD_Iv) / AD_Range * Vref_AD - V_Iv_offset);
	V_Iw = V_Iw * 0.9 + 0.1 * ((float)(ADI_Offset - (int32_t)AD_Iw) / AD_Range * Vref_AD - V_Iw_offset);
	*/


	switch(sector_SVM)
 80073da:	4b49      	ldr	r3, [pc, #292]	; (8007500 <currentControl+0x6b0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b05      	cmp	r3, #5
 80073e0:	f200 80b8 	bhi.w	8007554 <currentControl+0x704>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <currentControl+0x59c>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007405 	.word	0x08007405
 80073f0:	08007449 	.word	0x08007449
 80073f4:	08007449 	.word	0x08007449
 80073f8:	08007511 	.word	0x08007511
 80073fc:	08007511 	.word	0x08007511
 8007400:	08007405 	.word	0x08007405
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 8007404:	4b3b      	ldr	r3, [pc, #236]	; (80074f4 <currentControl+0x6a4>)
 8007406:	edd3 7a00 	vldr	s15, [r3]
 800740a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800740e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007412:	4b3c      	ldr	r3, [pc, #240]	; (8007504 <currentControl+0x6b4>)
 8007414:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 8007418:	4b38      	ldr	r3, [pc, #224]	; (80074fc <currentControl+0x6ac>)
 800741a:	edd3 7a00 	vldr	s15, [r3]
 800741e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8007422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007426:	4b38      	ldr	r3, [pc, #224]	; (8007508 <currentControl+0x6b8>)
 8007428:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 800742c:	4b35      	ldr	r3, [pc, #212]	; (8007504 <currentControl+0x6b4>)
 800742e:	edd3 7a00 	vldr	s15, [r3]
 8007432:	eeb1 7a67 	vneg.f32	s14, s15
 8007436:	4b34      	ldr	r3, [pc, #208]	; (8007508 <currentControl+0x6b8>)
 8007438:	edd3 7a00 	vldr	s15, [r3]
 800743c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007440:	4b32      	ldr	r3, [pc, #200]	; (800750c <currentControl+0x6bc>)
 8007442:	edc3 7a00 	vstr	s15, [r3]
		break;
 8007446:	e085      	b.n	8007554 <currentControl+0x704>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 8007448:	4b2c      	ldr	r3, [pc, #176]	; (80074fc <currentControl+0x6ac>)
 800744a:	edd3 7a00 	vldr	s15, [r3]
 800744e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8007452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007456:	4b2c      	ldr	r3, [pc, #176]	; (8007508 <currentControl+0x6b8>)
 8007458:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 800745c:	4b23      	ldr	r3, [pc, #140]	; (80074ec <currentControl+0x69c>)
 800745e:	edd3 7a00 	vldr	s15, [r3]
 8007462:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8007466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800746a:	4b28      	ldr	r3, [pc, #160]	; (800750c <currentControl+0x6bc>)
 800746c:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 8007470:	4b25      	ldr	r3, [pc, #148]	; (8007508 <currentControl+0x6b8>)
 8007472:	edd3 7a00 	vldr	s15, [r3]
 8007476:	eeb1 7a67 	vneg.f32	s14, s15
 800747a:	4b24      	ldr	r3, [pc, #144]	; (800750c <currentControl+0x6bc>)
 800747c:	edd3 7a00 	vldr	s15, [r3]
 8007480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007484:	4b1f      	ldr	r3, [pc, #124]	; (8007504 <currentControl+0x6b4>)
 8007486:	edc3 7a00 	vstr	s15, [r3]
		break;
 800748a:	e063      	b.n	8007554 <currentControl+0x704>
 800748c:	f3af 8000 	nop.w
 8007490:	54442d18 	.word	0x54442d18
 8007494:	401921fb 	.word	0x401921fb
 8007498:	20000180 	.word	0x20000180
 800749c:	200000dc 	.word	0x200000dc
 80074a0:	3ea2f838 	.word	0x3ea2f838
 80074a4:	459c4000 	.word	0x459c4000
 80074a8:	08009688 	.word	0x08009688
 80074ac:	2000000c 	.word	0x2000000c
 80074b0:	44c6f195 	.word	0x44c6f195
 80074b4:	200000e0 	.word	0x200000e0
 80074b8:	20000104 	.word	0x20000104
 80074bc:	20000010 	.word	0x20000010
 80074c0:	20000184 	.word	0x20000184
 80074c4:	20000188 	.word	0x20000188
 80074c8:	20000108 	.word	0x20000108
 80074cc:	20000190 	.word	0x20000190
 80074d0:	2000010c 	.word	0x2000010c
 80074d4:	20000198 	.word	0x20000198
 80074d8:	200001a0 	.word	0x200001a0
 80074dc:	200001a4 	.word	0x200001a4
 80074e0:	200001a8 	.word	0x200001a8
 80074e4:	40533333 	.word	0x40533333
 80074e8:	20000014 	.word	0x20000014
 80074ec:	20000110 	.word	0x20000110
 80074f0:	20000018 	.word	0x20000018
 80074f4:	20000114 	.word	0x20000114
 80074f8:	2000001c 	.word	0x2000001c
 80074fc:	20000118 	.word	0x20000118
 8007500:	20000124 	.word	0x20000124
 8007504:	20000140 	.word	0x20000140
 8007508:	20000144 	.word	0x20000144
 800750c:	2000013c 	.word	0x2000013c

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 8007510:	4bab      	ldr	r3, [pc, #684]	; (80077c0 <currentControl+0x970>)
 8007512:	edd3 7a00 	vldr	s15, [r3]
 8007516:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800751a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800751e:	4ba9      	ldr	r3, [pc, #676]	; (80077c4 <currentControl+0x974>)
 8007520:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 8007524:	4ba8      	ldr	r3, [pc, #672]	; (80077c8 <currentControl+0x978>)
 8007526:	edd3 7a00 	vldr	s15, [r3]
 800752a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800752e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007532:	4ba6      	ldr	r3, [pc, #664]	; (80077cc <currentControl+0x97c>)
 8007534:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 8007538:	4ba2      	ldr	r3, [pc, #648]	; (80077c4 <currentControl+0x974>)
 800753a:	edd3 7a00 	vldr	s15, [r3]
 800753e:	eeb1 7a67 	vneg.f32	s14, s15
 8007542:	4ba2      	ldr	r3, [pc, #648]	; (80077cc <currentControl+0x97c>)
 8007544:	edd3 7a00 	vldr	s15, [r3]
 8007548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800754c:	4ba0      	ldr	r3, [pc, #640]	; (80077d0 <currentControl+0x980>)
 800754e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8007552:	bf00      	nop
	}

	Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 8007554:	4b9b      	ldr	r3, [pc, #620]	; (80077c4 <currentControl+0x974>)
 8007556:	ed93 7a00 	vldr	s14, [r3]
 800755a:	4b9e      	ldr	r3, [pc, #632]	; (80077d4 <currentControl+0x984>)
 800755c:	edd3 7a00 	vldr	s15, [r3]
 8007560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007564:	4b9b      	ldr	r3, [pc, #620]	; (80077d4 <currentControl+0x984>)
 8007566:	edd3 7a00 	vldr	s15, [r3]
 800756a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800756e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007572:	4b99      	ldr	r3, [pc, #612]	; (80077d8 <currentControl+0x988>)
 8007574:	edd3 7a00 	vldr	s15, [r3]
 8007578:	ed9f 6a98 	vldr	s12, [pc, #608]	; 80077dc <currentControl+0x98c>
 800757c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007580:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007584:	4b91      	ldr	r3, [pc, #580]	; (80077cc <currentControl+0x97c>)
 8007586:	edd3 7a00 	vldr	s15, [r3]
 800758a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800758e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007592:	4b90      	ldr	r3, [pc, #576]	; (80077d4 <currentControl+0x984>)
 8007594:	edd3 7a00 	vldr	s15, [r3]
 8007598:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800759c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80075a0:	4b8d      	ldr	r3, [pc, #564]	; (80077d8 <currentControl+0x988>)
 80075a2:	edd3 7a00 	vldr	s15, [r3]
 80075a6:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 80077dc <currentControl+0x98c>
 80075aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80075ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80075b2:	4b87      	ldr	r3, [pc, #540]	; (80077d0 <currentControl+0x980>)
 80075b4:	edd3 7a00 	vldr	s15, [r3]
 80075b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075c0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80077e0 <currentControl+0x990>
 80075c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075c8:	4b86      	ldr	r3, [pc, #536]	; (80077e4 <currentControl+0x994>)
 80075ca:	edc3 7a00 	vstr	s15, [r3]
	Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 80075ce:	4b7d      	ldr	r3, [pc, #500]	; (80077c4 <currentControl+0x974>)
 80075d0:	edd3 7a00 	vldr	s15, [r3]
 80075d4:	eeb1 7a67 	vneg.f32	s14, s15
 80075d8:	4b7f      	ldr	r3, [pc, #508]	; (80077d8 <currentControl+0x988>)
 80075da:	edd3 7a00 	vldr	s15, [r3]
 80075de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075e2:	4b7d      	ldr	r3, [pc, #500]	; (80077d8 <currentControl+0x988>)
 80075e4:	edd3 7a00 	vldr	s15, [r3]
 80075e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80075ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80075f0:	4b78      	ldr	r3, [pc, #480]	; (80077d4 <currentControl+0x984>)
 80075f2:	edd3 7a00 	vldr	s15, [r3]
 80075f6:	ed9f 6a79 	vldr	s12, [pc, #484]	; 80077dc <currentControl+0x98c>
 80075fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80075fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007602:	4b72      	ldr	r3, [pc, #456]	; (80077cc <currentControl+0x97c>)
 8007604:	edd3 7a00 	vldr	s15, [r3]
 8007608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800760c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007610:	4b71      	ldr	r3, [pc, #452]	; (80077d8 <currentControl+0x988>)
 8007612:	edd3 7a00 	vldr	s15, [r3]
 8007616:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800761a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800761e:	4b6d      	ldr	r3, [pc, #436]	; (80077d4 <currentControl+0x984>)
 8007620:	edd3 7a00 	vldr	s15, [r3]
 8007624:	ed9f 6a6d 	vldr	s12, [pc, #436]	; 80077dc <currentControl+0x98c>
 8007628:	ee67 7a86 	vmul.f32	s15, s15, s12
 800762c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007630:	4b67      	ldr	r3, [pc, #412]	; (80077d0 <currentControl+0x980>)
 8007632:	edd3 7a00 	vldr	s15, [r3]
 8007636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800763a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800763e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80077e0 <currentControl+0x990>
 8007642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007646:	4b68      	ldr	r3, [pc, #416]	; (80077e8 <currentControl+0x998>)
 8007648:	edc3 7a00 	vstr	s15, [r3]


	if(theta_re < M_PI)
 800764c:	4b67      	ldr	r3, [pc, #412]	; (80077ec <currentControl+0x99c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f7f8 ff91 	bl	8000578 <__aeabi_f2d>
 8007656:	a358      	add	r3, pc, #352	; (adr r3, 80077b8 <currentControl+0x968>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f9 fa56 	bl	8000b0c <__aeabi_dcmplt>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <currentControl+0x822>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8007666:	2200      	movs	r2, #0
 8007668:	2140      	movs	r1, #64	; 0x40
 800766a:	4861      	ldr	r0, [pc, #388]	; (80077f0 <currentControl+0x9a0>)
 800766c:	f7fb fc94 	bl	8002f98 <HAL_GPIO_WritePin>
 8007670:	e004      	b.n	800767c <currentControl+0x82c>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8007672:	2201      	movs	r2, #1
 8007674:	2140      	movs	r1, #64	; 0x40
 8007676:	485e      	ldr	r0, [pc, #376]	; (80077f0 <currentControl+0x9a0>)
 8007678:	f7fb fc8e 	bl	8002f98 <HAL_GPIO_WritePin>

	/********** ACR (Auto Current Regulator) **********/

#if _ACR_ENABLE_

	if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 800767c:	4b5d      	ldr	r3, [pc, #372]	; (80077f4 <currentControl+0x9a4>)
 800767e:	edd3 7a00 	vldr	s15, [r3]
 8007682:	eeb1 7a67 	vneg.f32	s14, s15
 8007686:	4b5c      	ldr	r3, [pc, #368]	; (80077f8 <currentControl+0x9a8>)
 8007688:	edd3 7a00 	vldr	s15, [r3]
 800768c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007694:	dd08      	ble.n	80076a8 <currentControl+0x858>
 8007696:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <currentControl+0x9a4>)
 8007698:	edd3 7a00 	vldr	s15, [r3]
 800769c:	eef1 7a67 	vneg.f32	s15, s15
 80076a0:	4b56      	ldr	r3, [pc, #344]	; (80077fc <currentControl+0x9ac>)
 80076a2:	edc3 7a00 	vstr	s15, [r3]
 80076a6:	e013      	b.n	80076d0 <currentControl+0x880>
	else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 80076a8:	4b53      	ldr	r3, [pc, #332]	; (80077f8 <currentControl+0x9a8>)
 80076aa:	ed93 7a00 	vldr	s14, [r3]
 80076ae:	4b51      	ldr	r3, [pc, #324]	; (80077f4 <currentControl+0x9a4>)
 80076b0:	edd3 7a00 	vldr	s15, [r3]
 80076b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076bc:	dd04      	ble.n	80076c8 <currentControl+0x878>
 80076be:	4b4d      	ldr	r3, [pc, #308]	; (80077f4 <currentControl+0x9a4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a4e      	ldr	r2, [pc, #312]	; (80077fc <currentControl+0x9ac>)
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e003      	b.n	80076d0 <currentControl+0x880>
	else						_Id_ref = Id_ref;
 80076c8:	4b4b      	ldr	r3, [pc, #300]	; (80077f8 <currentControl+0x9a8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a4b      	ldr	r2, [pc, #300]	; (80077fc <currentControl+0x9ac>)
 80076ce:	6013      	str	r3, [r2, #0]

	if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 80076d0:	4b4b      	ldr	r3, [pc, #300]	; (8007800 <currentControl+0x9b0>)
 80076d2:	edd3 7a00 	vldr	s15, [r3]
 80076d6:	eeb1 7a67 	vneg.f32	s14, s15
 80076da:	4b4a      	ldr	r3, [pc, #296]	; (8007804 <currentControl+0x9b4>)
 80076dc:	edd3 7a00 	vldr	s15, [r3]
 80076e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	dd08      	ble.n	80076fc <currentControl+0x8ac>
 80076ea:	4b45      	ldr	r3, [pc, #276]	; (8007800 <currentControl+0x9b0>)
 80076ec:	edd3 7a00 	vldr	s15, [r3]
 80076f0:	eef1 7a67 	vneg.f32	s15, s15
 80076f4:	4b44      	ldr	r3, [pc, #272]	; (8007808 <currentControl+0x9b8>)
 80076f6:	edc3 7a00 	vstr	s15, [r3]
 80076fa:	e013      	b.n	8007724 <currentControl+0x8d4>
	else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 80076fc:	4b41      	ldr	r3, [pc, #260]	; (8007804 <currentControl+0x9b4>)
 80076fe:	ed93 7a00 	vldr	s14, [r3]
 8007702:	4b3f      	ldr	r3, [pc, #252]	; (8007800 <currentControl+0x9b0>)
 8007704:	edd3 7a00 	vldr	s15, [r3]
 8007708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007710:	dd04      	ble.n	800771c <currentControl+0x8cc>
 8007712:	4b3b      	ldr	r3, [pc, #236]	; (8007800 <currentControl+0x9b0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a3c      	ldr	r2, [pc, #240]	; (8007808 <currentControl+0x9b8>)
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	e003      	b.n	8007724 <currentControl+0x8d4>
	else						_Iq_ref = Iq_ref;
 800771c:	4b39      	ldr	r3, [pc, #228]	; (8007804 <currentControl+0x9b4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a39      	ldr	r2, [pc, #228]	; (8007808 <currentControl+0x9b8>)
 8007722:	6013      	str	r3, [r2, #0]

	if(forced_commute_state > 0)
 8007724:	4b39      	ldr	r3, [pc, #228]	; (800780c <currentControl+0x9bc>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d014      	beq.n	8007758 <currentControl+0x908>
	{
		Id_error = forced_I_gamma_ref - Id;
 800772e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007732:	4b2c      	ldr	r3, [pc, #176]	; (80077e4 <currentControl+0x994>)
 8007734:	edd3 7a00 	vldr	s15, [r3]
 8007738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800773c:	4b34      	ldr	r3, [pc, #208]	; (8007810 <currentControl+0x9c0>)
 800773e:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = forced_I_delta_ref - Iq;
 8007742:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007814 <currentControl+0x9c4>
 8007746:	4b28      	ldr	r3, [pc, #160]	; (80077e8 <currentControl+0x998>)
 8007748:	edd3 7a00 	vldr	s15, [r3]
 800774c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007750:	4b31      	ldr	r3, [pc, #196]	; (8007818 <currentControl+0x9c8>)
 8007752:	edc3 7a00 	vstr	s15, [r3]
 8007756:	e015      	b.n	8007784 <currentControl+0x934>
	}
	else
	{
		Id_error = _Id_ref - Id;
 8007758:	4b28      	ldr	r3, [pc, #160]	; (80077fc <currentControl+0x9ac>)
 800775a:	ed93 7a00 	vldr	s14, [r3]
 800775e:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <currentControl+0x994>)
 8007760:	edd3 7a00 	vldr	s15, [r3]
 8007764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007768:	4b29      	ldr	r3, [pc, #164]	; (8007810 <currentControl+0x9c0>)
 800776a:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 800776e:	4b26      	ldr	r3, [pc, #152]	; (8007808 <currentControl+0x9b8>)
 8007770:	ed93 7a00 	vldr	s14, [r3]
 8007774:	4b1c      	ldr	r3, [pc, #112]	; (80077e8 <currentControl+0x998>)
 8007776:	edd3 7a00 	vldr	s15, [r3]
 800777a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800777e:	4b26      	ldr	r3, [pc, #152]	; (8007818 <currentControl+0x9c8>)
 8007780:	edc3 7a00 	vstr	s15, [r3]
	}


	// integral
	Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 8007784:	4b22      	ldr	r3, [pc, #136]	; (8007810 <currentControl+0x9c0>)
 8007786:	ed93 7a00 	vldr	s14, [r3]
 800778a:	4b24      	ldr	r3, [pc, #144]	; (800781c <currentControl+0x9cc>)
 800778c:	edd3 7a00 	vldr	s15, [r3]
 8007790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007794:	4b22      	ldr	r3, [pc, #136]	; (8007820 <currentControl+0x9d0>)
 8007796:	edc3 7a00 	vstr	s15, [r3]
	if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 800779a:	4b21      	ldr	r3, [pc, #132]	; (8007820 <currentControl+0x9d0>)
 800779c:	edd3 7a00 	vldr	s15, [r3]
 80077a0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007824 <currentControl+0x9d4>
 80077a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ac:	d53e      	bpl.n	800782c <currentControl+0x9dc>
 80077ae:	4b1c      	ldr	r3, [pc, #112]	; (8007820 <currentControl+0x9d0>)
 80077b0:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <currentControl+0x9d8>)
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	e047      	b.n	8007846 <currentControl+0x9f6>
 80077b6:	bf00      	nop
 80077b8:	54442d18 	.word	0x54442d18
 80077bc:	400921fb 	.word	0x400921fb
 80077c0:	20000110 	.word	0x20000110
 80077c4:	2000013c 	.word	0x2000013c
 80077c8:	20000114 	.word	0x20000114
 80077cc:	20000140 	.word	0x20000140
 80077d0:	20000144 	.word	0x20000144
 80077d4:	2000000c 	.word	0x2000000c
 80077d8:	200000e0 	.word	0x200000e0
 80077dc:	3f5ae148 	.word	0x3f5ae148
 80077e0:	3f510625 	.word	0x3f510625
 80077e4:	20000134 	.word	0x20000134
 80077e8:	20000138 	.word	0x20000138
 80077ec:	200000dc 	.word	0x200000dc
 80077f0:	40020000 	.word	0x40020000
 80077f4:	2000002c 	.word	0x2000002c
 80077f8:	20000148 	.word	0x20000148
 80077fc:	200001ac 	.word	0x200001ac
 8007800:	20000030 	.word	0x20000030
 8007804:	2000014c 	.word	0x2000014c
 8007808:	200001b0 	.word	0x200001b0
 800780c:	200000ec 	.word	0x200000ec
 8007810:	20000150 	.word	0x20000150
 8007814:	00000000 	.word	0x00000000
 8007818:	20000154 	.word	0x20000154
 800781c:	200001b4 	.word	0x200001b4
 8007820:	200001b8 	.word	0x200001b8
 8007824:	c9742400 	.word	0xc9742400
 8007828:	c9742400 	.word	0xc9742400
	else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 800782c:	4b5a      	ldr	r3, [pc, #360]	; (8007998 <currentControl+0xb48>)
 800782e:	edd3 7a00 	vldr	s15, [r3]
 8007832:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800799c <currentControl+0xb4c>
 8007836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783e:	dd02      	ble.n	8007846 <currentControl+0x9f6>
 8007840:	4b55      	ldr	r3, [pc, #340]	; (8007998 <currentControl+0xb48>)
 8007842:	4a57      	ldr	r2, [pc, #348]	; (80079a0 <currentControl+0xb50>)
 8007844:	601a      	str	r2, [r3, #0]
	Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 8007846:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80079a4 <currentControl+0xb54>
 800784a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800784e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007852:	4b51      	ldr	r3, [pc, #324]	; (8007998 <currentControl+0xb48>)
 8007854:	edd3 6a00 	vldr	s13, [r3]
 8007858:	4b53      	ldr	r3, [pc, #332]	; (80079a8 <currentControl+0xb58>)
 800785a:	edd3 7a00 	vldr	s15, [r3]
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007866:	4b51      	ldr	r3, [pc, #324]	; (80079ac <currentControl+0xb5c>)
 8007868:	edc3 7a00 	vstr	s15, [r3]
	Id_error_integ_temp2 = Id_error_integ_temp1;
 800786c:	4b4a      	ldr	r3, [pc, #296]	; (8007998 <currentControl+0xb48>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a4d      	ldr	r2, [pc, #308]	; (80079a8 <currentControl+0xb58>)
 8007872:	6013      	str	r3, [r2, #0]

	Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 8007874:	4b4e      	ldr	r3, [pc, #312]	; (80079b0 <currentControl+0xb60>)
 8007876:	ed93 7a00 	vldr	s14, [r3]
 800787a:	4b4e      	ldr	r3, [pc, #312]	; (80079b4 <currentControl+0xb64>)
 800787c:	edd3 7a00 	vldr	s15, [r3]
 8007880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007884:	4b4c      	ldr	r3, [pc, #304]	; (80079b8 <currentControl+0xb68>)
 8007886:	edc3 7a00 	vstr	s15, [r3]
	if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 800788a:	4b4b      	ldr	r3, [pc, #300]	; (80079b8 <currentControl+0xb68>)
 800788c:	edd3 7a00 	vldr	s15, [r3]
 8007890:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80079bc <currentControl+0xb6c>
 8007894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789c:	d503      	bpl.n	80078a6 <currentControl+0xa56>
 800789e:	4b46      	ldr	r3, [pc, #280]	; (80079b8 <currentControl+0xb68>)
 80078a0:	4a47      	ldr	r2, [pc, #284]	; (80079c0 <currentControl+0xb70>)
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	e00c      	b.n	80078c0 <currentControl+0xa70>
	else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 80078a6:	4b44      	ldr	r3, [pc, #272]	; (80079b8 <currentControl+0xb68>)
 80078a8:	edd3 7a00 	vldr	s15, [r3]
 80078ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800799c <currentControl+0xb4c>
 80078b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b8:	dd02      	ble.n	80078c0 <currentControl+0xa70>
 80078ba:	4b3f      	ldr	r3, [pc, #252]	; (80079b8 <currentControl+0xb68>)
 80078bc:	4a38      	ldr	r2, [pc, #224]	; (80079a0 <currentControl+0xb50>)
 80078be:	601a      	str	r2, [r3, #0]
	Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 80078c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80079a4 <currentControl+0xb54>
 80078c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80078c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078cc:	4b3a      	ldr	r3, [pc, #232]	; (80079b8 <currentControl+0xb68>)
 80078ce:	edd3 6a00 	vldr	s13, [r3]
 80078d2:	4b38      	ldr	r3, [pc, #224]	; (80079b4 <currentControl+0xb64>)
 80078d4:	edd3 7a00 	vldr	s15, [r3]
 80078d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e0:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <currentControl+0xb74>)
 80078e2:	edc3 7a00 	vstr	s15, [r3]
	Iq_error_integ_temp2 = Iq_error_integ_temp1;
 80078e6:	4b34      	ldr	r3, [pc, #208]	; (80079b8 <currentControl+0xb68>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a32      	ldr	r2, [pc, #200]	; (80079b4 <currentControl+0xb64>)
 80078ec:	6013      	str	r3, [r2, #0]


	Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 80078ee:	4b36      	ldr	r3, [pc, #216]	; (80079c8 <currentControl+0xb78>)
 80078f0:	ed93 7a00 	vldr	s14, [r3]
 80078f4:	4b35      	ldr	r3, [pc, #212]	; (80079cc <currentControl+0xb7c>)
 80078f6:	edd3 7a00 	vldr	s15, [r3]
 80078fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078fe:	4b34      	ldr	r3, [pc, #208]	; (80079d0 <currentControl+0xb80>)
 8007900:	edd3 6a00 	vldr	s13, [r3]
 8007904:	4b29      	ldr	r3, [pc, #164]	; (80079ac <currentControl+0xb5c>)
 8007906:	edd3 7a00 	vldr	s15, [r3]
 800790a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800790e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007912:	4b30      	ldr	r3, [pc, #192]	; (80079d4 <currentControl+0xb84>)
 8007914:	edc3 7a00 	vstr	s15, [r3]
	Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 8007918:	4b2b      	ldr	r3, [pc, #172]	; (80079c8 <currentControl+0xb78>)
 800791a:	ed93 7a00 	vldr	s14, [r3]
 800791e:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <currentControl+0xb60>)
 8007920:	edd3 7a00 	vldr	s15, [r3]
 8007924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007928:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <currentControl+0xb80>)
 800792a:	edd3 6a00 	vldr	s13, [r3]
 800792e:	4b25      	ldr	r3, [pc, #148]	; (80079c4 <currentControl+0xb74>)
 8007930:	edd3 7a00 	vldr	s15, [r3]
 8007934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800793c:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <currentControl+0xb88>)
 800793e:	edc3 7a00 	vstr	s15, [r3]
#endif

	/********* end of ACR **********/


	setSVM_dq();
 8007942:	f000 f857 	bl	80079f4 <setSVM_dq>

#endif


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 8007946:	4b25      	ldr	r3, [pc, #148]	; (80079dc <currentControl+0xb8c>)
 8007948:	22ff      	movs	r2, #255	; 0xff
 800794a:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 800794c:	4b23      	ldr	r3, [pc, #140]	; (80079dc <currentControl+0xb8c>)
 800794e:	22ff      	movs	r2, #255	; 0xff
 8007950:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8007952:	2200      	movs	r2, #0
 8007954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007958:	4821      	ldr	r0, [pc, #132]	; (80079e0 <currentControl+0xb90>)
 800795a:	f7fb fb1d 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 800795e:	2301      	movs	r3, #1
 8007960:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <currentControl+0xb94>)
 8007962:	491e      	ldr	r1, [pc, #120]	; (80079dc <currentControl+0xb8c>)
 8007964:	4820      	ldr	r0, [pc, #128]	; (80079e8 <currentControl+0xb98>)
 8007966:	f7fc f8bf 	bl	8003ae8 <HAL_SPI_TransmitReceive_IT>


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 800796a:	4b20      	ldr	r3, [pc, #128]	; (80079ec <currentControl+0xb9c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3301      	adds	r3, #1
 8007970:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <currentControl+0xb9c>)
 8007972:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 8007974:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <currentControl+0xb9c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	220a      	movs	r2, #10
 800797a:	4293      	cmp	r3, r2
 800797c:	db05      	blt.n	800798a <currentControl+0xb3a>
	{
		ASR_flg = 1;
 800797e:	4b1c      	ldr	r3, [pc, #112]	; (80079f0 <currentControl+0xba0>)
 8007980:	2201      	movs	r2, #1
 8007982:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 8007984:	4b19      	ldr	r3, [pc, #100]	; (80079ec <currentControl+0xb9c>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800798a:	2200      	movs	r2, #0
 800798c:	2140      	movs	r1, #64	; 0x40
 800798e:	4814      	ldr	r0, [pc, #80]	; (80079e0 <currentControl+0xb90>)
 8007990:	f7fb fb02 	bl	8002f98 <HAL_GPIO_WritePin>

	return;
 8007994:	bf00      	nop
}
 8007996:	bdb0      	pop	{r4, r5, r7, pc}
 8007998:	200001b8 	.word	0x200001b8
 800799c:	49742400 	.word	0x49742400
 80079a0:	49742400 	.word	0x49742400
 80079a4:	38d1b717 	.word	0x38d1b717
 80079a8:	200001b4 	.word	0x200001b4
 80079ac:	20000158 	.word	0x20000158
 80079b0:	20000154 	.word	0x20000154
 80079b4:	200001bc 	.word	0x200001bc
 80079b8:	200001c0 	.word	0x200001c0
 80079bc:	c9742400 	.word	0xc9742400
 80079c0:	c9742400 	.word	0xc9742400
 80079c4:	2000015c 	.word	0x2000015c
 80079c8:	20000024 	.word	0x20000024
 80079cc:	20000150 	.word	0x20000150
 80079d0:	20000028 	.word	0x20000028
 80079d4:	2000011c 	.word	0x2000011c
 80079d8:	20000120 	.word	0x20000120
 80079dc:	200000cc 	.word	0x200000cc
 80079e0:	40020400 	.word	0x40020400
 80079e4:	200000d0 	.word	0x200000d0
 80079e8:	20000478 	.word	0x20000478
 80079ec:	20000164 	.word	0x20000164
 80079f0:	20000160 	.word	0x20000160

080079f4 <setSVM_dq>:


inline static void setSVM_dq()
{
 80079f4:	b5b0      	push	{r4, r5, r7, lr}
 80079f6:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 80079f8:	4bb8      	ldr	r3, [pc, #736]	; (8007cdc <setSVM_dq+0x2e8>)
 80079fa:	ed93 7a00 	vldr	s14, [r3]
 80079fe:	4bb8      	ldr	r3, [pc, #736]	; (8007ce0 <setSVM_dq+0x2ec>)
 8007a00:	edd3 7a00 	vldr	s15, [r3]
 8007a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a08:	4bb6      	ldr	r3, [pc, #728]	; (8007ce4 <setSVM_dq+0x2f0>)
 8007a0a:	edd3 6a00 	vldr	s13, [r3]
 8007a0e:	4bb6      	ldr	r3, [pc, #728]	; (8007ce8 <setSVM_dq+0x2f4>)
 8007a10:	edd3 7a00 	vldr	s15, [r3]
 8007a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a1c:	4bb3      	ldr	r3, [pc, #716]	; (8007cec <setSVM_dq+0x2f8>)
 8007a1e:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 8007a22:	4bae      	ldr	r3, [pc, #696]	; (8007cdc <setSVM_dq+0x2e8>)
 8007a24:	ed93 7a00 	vldr	s14, [r3]
 8007a28:	4baf      	ldr	r3, [pc, #700]	; (8007ce8 <setSVM_dq+0x2f4>)
 8007a2a:	edd3 7a00 	vldr	s15, [r3]
 8007a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a32:	4bac      	ldr	r3, [pc, #688]	; (8007ce4 <setSVM_dq+0x2f0>)
 8007a34:	edd3 6a00 	vldr	s13, [r3]
 8007a38:	4ba9      	ldr	r3, [pc, #676]	; (8007ce0 <setSVM_dq+0x2ec>)
 8007a3a:	edd3 7a00 	vldr	s15, [r3]
 8007a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a46:	4baa      	ldr	r3, [pc, #680]	; (8007cf0 <setSVM_dq+0x2fc>)
 8007a48:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 8007a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a50:	4ba7      	ldr	r3, [pc, #668]	; (8007cf0 <setSVM_dq+0x2fc>)
 8007a52:	edd3 7a00 	vldr	s15, [r3]
 8007a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a5a:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8007cf4 <setSVM_dq+0x300>
 8007a5e:	4ba3      	ldr	r3, [pc, #652]	; (8007cec <setSVM_dq+0x2f8>)
 8007a60:	edd3 7a00 	vldr	s15, [r3]
 8007a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a6c:	4ba2      	ldr	r3, [pc, #648]	; (8007cf8 <setSVM_dq+0x304>)
 8007a6e:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8007a72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a76:	4b9e      	ldr	r3, [pc, #632]	; (8007cf0 <setSVM_dq+0x2fc>)
 8007a78:	edd3 7a00 	vldr	s15, [r3]
 8007a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a80:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8007cfc <setSVM_dq+0x308>
 8007a84:	4b99      	ldr	r3, [pc, #612]	; (8007cec <setSVM_dq+0x2f8>)
 8007a86:	edd3 7a00 	vldr	s15, [r3]
 8007a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a92:	4b9b      	ldr	r3, [pc, #620]	; (8007d00 <setSVM_dq+0x30c>)
 8007a94:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8007a98:	4b97      	ldr	r3, [pc, #604]	; (8007cf8 <setSVM_dq+0x304>)
 8007a9a:	edd3 7a00 	vldr	s15, [r3]
 8007a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa6:	db1e      	blt.n	8007ae6 <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8007aa8:	4b95      	ldr	r3, [pc, #596]	; (8007d00 <setSVM_dq+0x30c>)
 8007aaa:	edd3 7a00 	vldr	s15, [r3]
 8007aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab6:	d803      	bhi.n	8007ac0 <setSVM_dq+0xcc>
 8007ab8:	4b92      	ldr	r3, [pc, #584]	; (8007d04 <setSVM_dq+0x310>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e030      	b.n	8007b22 <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8007ac0:	4b8d      	ldr	r3, [pc, #564]	; (8007cf8 <setSVM_dq+0x304>)
 8007ac2:	ed93 7a00 	vldr	s14, [r3]
 8007ac6:	4b8e      	ldr	r3, [pc, #568]	; (8007d00 <setSVM_dq+0x30c>)
 8007ac8:	edd3 7a00 	vldr	s15, [r3]
 8007acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad4:	db03      	blt.n	8007ade <setSVM_dq+0xea>
 8007ad6:	4b8b      	ldr	r3, [pc, #556]	; (8007d04 <setSVM_dq+0x310>)
 8007ad8:	2201      	movs	r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e021      	b.n	8007b22 <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 8007ade:	4b89      	ldr	r3, [pc, #548]	; (8007d04 <setSVM_dq+0x310>)
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	e01d      	b.n	8007b22 <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 8007ae6:	4b86      	ldr	r3, [pc, #536]	; (8007d00 <setSVM_dq+0x30c>)
 8007ae8:	edd3 7a00 	vldr	s15, [r3]
 8007aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af4:	db03      	blt.n	8007afe <setSVM_dq+0x10a>
 8007af6:	4b83      	ldr	r3, [pc, #524]	; (8007d04 <setSVM_dq+0x310>)
 8007af8:	2203      	movs	r2, #3
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e011      	b.n	8007b22 <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 8007afe:	4b7e      	ldr	r3, [pc, #504]	; (8007cf8 <setSVM_dq+0x304>)
 8007b00:	ed93 7a00 	vldr	s14, [r3]
 8007b04:	4b7e      	ldr	r3, [pc, #504]	; (8007d00 <setSVM_dq+0x30c>)
 8007b06:	edd3 7a00 	vldr	s15, [r3]
 8007b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	d803      	bhi.n	8007b1c <setSVM_dq+0x128>
 8007b14:	4b7b      	ldr	r3, [pc, #492]	; (8007d04 <setSVM_dq+0x310>)
 8007b16:	2204      	movs	r2, #4
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 8007b1c:	4b79      	ldr	r3, [pc, #484]	; (8007d04 <setSVM_dq+0x310>)
 8007b1e:	2205      	movs	r2, #5
 8007b20:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 8007b22:	4b78      	ldr	r3, [pc, #480]	; (8007d04 <setSVM_dq+0x310>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a78      	ldr	r2, [pc, #480]	; (8007d08 <setSVM_dq+0x314>)
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a77      	ldr	r2, [pc, #476]	; (8007d0c <setSVM_dq+0x318>)
 8007b30:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 8007b32:	4b74      	ldr	r3, [pc, #464]	; (8007d04 <setSVM_dq+0x310>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a74      	ldr	r2, [pc, #464]	; (8007d08 <setSVM_dq+0x314>)
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	4413      	add	r3, r2
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a73      	ldr	r2, [pc, #460]	; (8007d10 <setSVM_dq+0x31c>)
 8007b42:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 8007b44:	4b6f      	ldr	r3, [pc, #444]	; (8007d04 <setSVM_dq+0x310>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	4a6f      	ldr	r2, [pc, #444]	; (8007d08 <setSVM_dq+0x314>)
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a70      	ldr	r2, [pc, #448]	; (8007d14 <setSVM_dq+0x320>)
 8007b54:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 8007b56:	4b6b      	ldr	r3, [pc, #428]	; (8007d04 <setSVM_dq+0x310>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	4a6a      	ldr	r2, [pc, #424]	; (8007d08 <setSVM_dq+0x314>)
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	4413      	add	r3, r2
 8007b62:	3304      	adds	r3, #4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a6c      	ldr	r2, [pc, #432]	; (8007d18 <setSVM_dq+0x324>)
 8007b68:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8007b6a:	4b6b      	ldr	r3, [pc, #428]	; (8007d18 <setSVM_dq+0x324>)
 8007b6c:	ed93 7a00 	vldr	s14, [r3]
 8007b70:	4b5e      	ldr	r3, [pc, #376]	; (8007cec <setSVM_dq+0x2f8>)
 8007b72:	edd3 7a00 	vldr	s15, [r3]
 8007b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b7a:	4b66      	ldr	r3, [pc, #408]	; (8007d14 <setSVM_dq+0x320>)
 8007b7c:	edd3 6a00 	vldr	s13, [r3]
 8007b80:	4b5b      	ldr	r3, [pc, #364]	; (8007cf0 <setSVM_dq+0x2fc>)
 8007b82:	edd3 7a00 	vldr	s15, [r3]
 8007b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b8e:	4b5f      	ldr	r3, [pc, #380]	; (8007d0c <setSVM_dq+0x318>)
 8007b90:	ed93 7a00 	vldr	s14, [r3]
 8007b94:	4b60      	ldr	r3, [pc, #384]	; (8007d18 <setSVM_dq+0x324>)
 8007b96:	edd3 7a00 	vldr	s15, [r3]
 8007b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b9e:	4b5c      	ldr	r3, [pc, #368]	; (8007d10 <setSVM_dq+0x31c>)
 8007ba0:	ed93 6a00 	vldr	s12, [r3]
 8007ba4:	4b5b      	ldr	r3, [pc, #364]	; (8007d14 <setSVM_dq+0x320>)
 8007ba6:	edd3 7a00 	vldr	s15, [r3]
 8007baa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007bae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bb2:	4b5a      	ldr	r3, [pc, #360]	; (8007d1c <setSVM_dq+0x328>)
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc0:	4b57      	ldr	r3, [pc, #348]	; (8007d20 <setSVM_dq+0x32c>)
 8007bc2:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8007bc6:	4b52      	ldr	r3, [pc, #328]	; (8007d10 <setSVM_dq+0x31c>)
 8007bc8:	edd3 7a00 	vldr	s15, [r3]
 8007bcc:	eeb1 7a67 	vneg.f32	s14, s15
 8007bd0:	4b46      	ldr	r3, [pc, #280]	; (8007cec <setSVM_dq+0x2f8>)
 8007bd2:	edd3 7a00 	vldr	s15, [r3]
 8007bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bda:	4b4c      	ldr	r3, [pc, #304]	; (8007d0c <setSVM_dq+0x318>)
 8007bdc:	edd3 6a00 	vldr	s13, [r3]
 8007be0:	4b43      	ldr	r3, [pc, #268]	; (8007cf0 <setSVM_dq+0x2fc>)
 8007be2:	edd3 7a00 	vldr	s15, [r3]
 8007be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bea:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007bee:	4b47      	ldr	r3, [pc, #284]	; (8007d0c <setSVM_dq+0x318>)
 8007bf0:	ed93 7a00 	vldr	s14, [r3]
 8007bf4:	4b48      	ldr	r3, [pc, #288]	; (8007d18 <setSVM_dq+0x324>)
 8007bf6:	edd3 7a00 	vldr	s15, [r3]
 8007bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bfe:	4b44      	ldr	r3, [pc, #272]	; (8007d10 <setSVM_dq+0x31c>)
 8007c00:	ed93 6a00 	vldr	s12, [r3]
 8007c04:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <setSVM_dq+0x320>)
 8007c06:	edd3 7a00 	vldr	s15, [r3]
 8007c0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007c0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c12:	4b42      	ldr	r3, [pc, #264]	; (8007d1c <setSVM_dq+0x328>)
 8007c14:	edd3 7a00 	vldr	s15, [r3]
 8007c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c20:	4b40      	ldr	r3, [pc, #256]	; (8007d24 <setSVM_dq+0x330>)
 8007c22:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 8007c26:	4b37      	ldr	r3, [pc, #220]	; (8007d04 <setSVM_dq+0x310>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	f200 81e0 	bhi.w	8007ff0 <setSVM_dq+0x5fc>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <setSVM_dq+0x244>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	08007d35 	.word	0x08007d35
 8007c40:	08007dc1 	.word	0x08007dc1
 8007c44:	08007e4d 	.word	0x08007e4d
 8007c48:	08007ed9 	.word	0x08007ed9
 8007c4c:	08007f65 	.word	0x08007f65
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8007c50:	4b33      	ldr	r3, [pc, #204]	; (8007d20 <setSVM_dq+0x32c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7f8 fc8f 	bl	8000578 <__aeabi_f2d>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4623      	mov	r3, r4
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	4930      	ldr	r1, [pc, #192]	; (8007d28 <setSVM_dq+0x334>)
 8007c68:	f7f8 fb26 	bl	80002b8 <__aeabi_dsub>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	4625      	mov	r5, r4
 8007c72:	461c      	mov	r4, r3
 8007c74:	4b2b      	ldr	r3, [pc, #172]	; (8007d24 <setSVM_dq+0x330>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7f8 fc7d 	bl	8000578 <__aeabi_f2d>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4620      	mov	r0, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 fb17 	bl	80002b8 <__aeabi_dsub>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	4618      	mov	r0, r3
 8007c90:	4621      	mov	r1, r4
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <setSVM_dq+0x338>)
 8007c98:	f7f8 fcc6 	bl	8000628 <__aeabi_dmul>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	f7f8 ff70 	bl	8000b88 <__aeabi_d2f>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <setSVM_dq+0x33c>)
 8007cac:	609a      	str	r2, [r3, #8]
 8007cae:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <setSVM_dq+0x33c>)
 8007cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8007cb4:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <setSVM_dq+0x330>)
 8007cb6:	edd3 7a00 	vldr	s15, [r3]
 8007cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <setSVM_dq+0x33c>)
 8007cc0:	edc3 7a01 	vstr	s15, [r3, #4]
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <setSVM_dq+0x33c>)
 8007cc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <setSVM_dq+0x32c>)
 8007ccc:	edd3 7a00 	vldr	s15, [r3]
 8007cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <setSVM_dq+0x33c>)
 8007cd6:	edc3 7a00 	vstr	s15, [r3]
 8007cda:	e189      	b.n	8007ff0 <setSVM_dq+0x5fc>
 8007cdc:	2000011c 	.word	0x2000011c
 8007ce0:	2000000c 	.word	0x2000000c
 8007ce4:	20000120 	.word	0x20000120
 8007ce8:	200000e0 	.word	0x200000e0
 8007cec:	200001c4 	.word	0x200001c4
 8007cf0:	200001c8 	.word	0x200001c8
 8007cf4:	00000000 	.word	0x00000000
 8007cf8:	200001cc 	.word	0x200001cc
 8007cfc:	3f5db22d 	.word	0x3f5db22d
 8007d00:	200001d0 	.word	0x200001d0
 8007d04:	20000124 	.word	0x20000124
 8007d08:	0801cf08 	.word	0x0801cf08
 8007d0c:	200001d4 	.word	0x200001d4
 8007d10:	200001d8 	.word	0x200001d8
 8007d14:	200001dc 	.word	0x200001dc
 8007d18:	200001e0 	.word	0x200001e0
 8007d1c:	20000020 	.word	0x20000020
 8007d20:	200001e4 	.word	0x200001e4
 8007d24:	200001e8 	.word	0x200001e8
 8007d28:	3ff00000 	.word	0x3ff00000
 8007d2c:	3fe00000 	.word	0x3fe00000
 8007d30:	200001ec 	.word	0x200001ec
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 8007d34:	4bc3      	ldr	r3, [pc, #780]	; (8008044 <setSVM_dq+0x650>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7f8 fc1d 	bl	8000578 <__aeabi_f2d>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	461a      	mov	r2, r3
 8007d44:	4623      	mov	r3, r4
 8007d46:	f04f 0000 	mov.w	r0, #0
 8007d4a:	49bf      	ldr	r1, [pc, #764]	; (8008048 <setSVM_dq+0x654>)
 8007d4c:	f7f8 fab4 	bl	80002b8 <__aeabi_dsub>
 8007d50:	4603      	mov	r3, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	4625      	mov	r5, r4
 8007d56:	461c      	mov	r4, r3
 8007d58:	4bbc      	ldr	r3, [pc, #752]	; (800804c <setSVM_dq+0x658>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7f8 fc0b 	bl	8000578 <__aeabi_f2d>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 faa5 	bl	80002b8 <__aeabi_dsub>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	4618      	mov	r0, r3
 8007d74:	4621      	mov	r1, r4
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	4bb5      	ldr	r3, [pc, #724]	; (8008050 <setSVM_dq+0x65c>)
 8007d7c:	f7f8 fc54 	bl	8000628 <__aeabi_dmul>
 8007d80:	4603      	mov	r3, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	4618      	mov	r0, r3
 8007d86:	4621      	mov	r1, r4
 8007d88:	f7f8 fefe 	bl	8000b88 <__aeabi_d2f>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	4bb1      	ldr	r3, [pc, #708]	; (8008054 <setSVM_dq+0x660>)
 8007d90:	609a      	str	r2, [r3, #8]
 8007d92:	4bb0      	ldr	r3, [pc, #704]	; (8008054 <setSVM_dq+0x660>)
 8007d94:	ed93 7a02 	vldr	s14, [r3, #8]
 8007d98:	4baa      	ldr	r3, [pc, #680]	; (8008044 <setSVM_dq+0x650>)
 8007d9a:	edd3 7a00 	vldr	s15, [r3]
 8007d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da2:	4bac      	ldr	r3, [pc, #688]	; (8008054 <setSVM_dq+0x660>)
 8007da4:	edc3 7a00 	vstr	s15, [r3]
 8007da8:	4baa      	ldr	r3, [pc, #680]	; (8008054 <setSVM_dq+0x660>)
 8007daa:	ed93 7a00 	vldr	s14, [r3]
 8007dae:	4ba7      	ldr	r3, [pc, #668]	; (800804c <setSVM_dq+0x658>)
 8007db0:	edd3 7a00 	vldr	s15, [r3]
 8007db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007db8:	4ba6      	ldr	r3, [pc, #664]	; (8008054 <setSVM_dq+0x660>)
 8007dba:	edc3 7a01 	vstr	s15, [r3, #4]
 8007dbe:	e117      	b.n	8007ff0 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8007dc0:	4ba0      	ldr	r3, [pc, #640]	; (8008044 <setSVM_dq+0x650>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7f8 fbd7 	bl	8000578 <__aeabi_f2d>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4623      	mov	r3, r4
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	499c      	ldr	r1, [pc, #624]	; (8008048 <setSVM_dq+0x654>)
 8007dd8:	f7f8 fa6e 	bl	80002b8 <__aeabi_dsub>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4625      	mov	r5, r4
 8007de2:	461c      	mov	r4, r3
 8007de4:	4b99      	ldr	r3, [pc, #612]	; (800804c <setSVM_dq+0x658>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7f8 fbc5 	bl	8000578 <__aeabi_f2d>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fa5f 	bl	80002b8 <__aeabi_dsub>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	4618      	mov	r0, r3
 8007e00:	4621      	mov	r1, r4
 8007e02:	f04f 0200 	mov.w	r2, #0
 8007e06:	4b92      	ldr	r3, [pc, #584]	; (8008050 <setSVM_dq+0x65c>)
 8007e08:	f7f8 fc0e 	bl	8000628 <__aeabi_dmul>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4618      	mov	r0, r3
 8007e12:	4621      	mov	r1, r4
 8007e14:	f7f8 feb8 	bl	8000b88 <__aeabi_d2f>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4b8e      	ldr	r3, [pc, #568]	; (8008054 <setSVM_dq+0x660>)
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	4b8d      	ldr	r3, [pc, #564]	; (8008054 <setSVM_dq+0x660>)
 8007e20:	ed93 7a00 	vldr	s14, [r3]
 8007e24:	4b89      	ldr	r3, [pc, #548]	; (800804c <setSVM_dq+0x658>)
 8007e26:	edd3 7a00 	vldr	s15, [r3]
 8007e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e2e:	4b89      	ldr	r3, [pc, #548]	; (8008054 <setSVM_dq+0x660>)
 8007e30:	edc3 7a02 	vstr	s15, [r3, #8]
 8007e34:	4b87      	ldr	r3, [pc, #540]	; (8008054 <setSVM_dq+0x660>)
 8007e36:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e3a:	4b82      	ldr	r3, [pc, #520]	; (8008044 <setSVM_dq+0x650>)
 8007e3c:	edd3 7a00 	vldr	s15, [r3]
 8007e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e44:	4b83      	ldr	r3, [pc, #524]	; (8008054 <setSVM_dq+0x660>)
 8007e46:	edc3 7a01 	vstr	s15, [r3, #4]
 8007e4a:	e0d1      	b.n	8007ff0 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 8007e4c:	4b7d      	ldr	r3, [pc, #500]	; (8008044 <setSVM_dq+0x650>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7f8 fb91 	bl	8000578 <__aeabi_f2d>
 8007e56:	4603      	mov	r3, r0
 8007e58:	460c      	mov	r4, r1
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	f04f 0000 	mov.w	r0, #0
 8007e62:	4979      	ldr	r1, [pc, #484]	; (8008048 <setSVM_dq+0x654>)
 8007e64:	f7f8 fa28 	bl	80002b8 <__aeabi_dsub>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	4625      	mov	r5, r4
 8007e6e:	461c      	mov	r4, r3
 8007e70:	4b76      	ldr	r3, [pc, #472]	; (800804c <setSVM_dq+0x658>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7f8 fb7f 	bl	8000578 <__aeabi_f2d>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fa19 	bl	80002b8 <__aeabi_dsub>
 8007e86:	4603      	mov	r3, r0
 8007e88:	460c      	mov	r4, r1
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	4b6f      	ldr	r3, [pc, #444]	; (8008050 <setSVM_dq+0x65c>)
 8007e94:	f7f8 fbc8 	bl	8000628 <__aeabi_dmul>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	f7f8 fe72 	bl	8000b88 <__aeabi_d2f>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	4b6b      	ldr	r3, [pc, #428]	; (8008054 <setSVM_dq+0x660>)
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	4b6a      	ldr	r3, [pc, #424]	; (8008054 <setSVM_dq+0x660>)
 8007eac:	ed93 7a00 	vldr	s14, [r3]
 8007eb0:	4b64      	ldr	r3, [pc, #400]	; (8008044 <setSVM_dq+0x650>)
 8007eb2:	edd3 7a00 	vldr	s15, [r3]
 8007eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007eba:	4b66      	ldr	r3, [pc, #408]	; (8008054 <setSVM_dq+0x660>)
 8007ebc:	edc3 7a01 	vstr	s15, [r3, #4]
 8007ec0:	4b64      	ldr	r3, [pc, #400]	; (8008054 <setSVM_dq+0x660>)
 8007ec2:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ec6:	4b61      	ldr	r3, [pc, #388]	; (800804c <setSVM_dq+0x658>)
 8007ec8:	edd3 7a00 	vldr	s15, [r3]
 8007ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ed0:	4b60      	ldr	r3, [pc, #384]	; (8008054 <setSVM_dq+0x660>)
 8007ed2:	edc3 7a02 	vstr	s15, [r3, #8]
 8007ed6:	e08b      	b.n	8007ff0 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8007ed8:	4b5a      	ldr	r3, [pc, #360]	; (8008044 <setSVM_dq+0x650>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7f8 fb4b 	bl	8000578 <__aeabi_f2d>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4623      	mov	r3, r4
 8007eea:	f04f 0000 	mov.w	r0, #0
 8007eee:	4956      	ldr	r1, [pc, #344]	; (8008048 <setSVM_dq+0x654>)
 8007ef0:	f7f8 f9e2 	bl	80002b8 <__aeabi_dsub>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4625      	mov	r5, r4
 8007efa:	461c      	mov	r4, r3
 8007efc:	4b53      	ldr	r3, [pc, #332]	; (800804c <setSVM_dq+0x658>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7f8 fb39 	bl	8000578 <__aeabi_f2d>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7f8 f9d3 	bl	80002b8 <__aeabi_dsub>
 8007f12:	4603      	mov	r3, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	4618      	mov	r0, r3
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	4b4c      	ldr	r3, [pc, #304]	; (8008050 <setSVM_dq+0x65c>)
 8007f20:	f7f8 fb82 	bl	8000628 <__aeabi_dmul>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4618      	mov	r0, r3
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	f7f8 fe2c 	bl	8000b88 <__aeabi_d2f>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b48      	ldr	r3, [pc, #288]	; (8008054 <setSVM_dq+0x660>)
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	4b47      	ldr	r3, [pc, #284]	; (8008054 <setSVM_dq+0x660>)
 8007f38:	ed93 7a01 	vldr	s14, [r3, #4]
 8007f3c:	4b43      	ldr	r3, [pc, #268]	; (800804c <setSVM_dq+0x658>)
 8007f3e:	edd3 7a00 	vldr	s15, [r3]
 8007f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f46:	4b43      	ldr	r3, [pc, #268]	; (8008054 <setSVM_dq+0x660>)
 8007f48:	edc3 7a00 	vstr	s15, [r3]
 8007f4c:	4b41      	ldr	r3, [pc, #260]	; (8008054 <setSVM_dq+0x660>)
 8007f4e:	ed93 7a00 	vldr	s14, [r3]
 8007f52:	4b3c      	ldr	r3, [pc, #240]	; (8008044 <setSVM_dq+0x650>)
 8007f54:	edd3 7a00 	vldr	s15, [r3]
 8007f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f5c:	4b3d      	ldr	r3, [pc, #244]	; (8008054 <setSVM_dq+0x660>)
 8007f5e:	edc3 7a02 	vstr	s15, [r3, #8]
 8007f62:	e045      	b.n	8007ff0 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8007f64:	4b37      	ldr	r3, [pc, #220]	; (8008044 <setSVM_dq+0x650>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f8 fb05 	bl	8000578 <__aeabi_f2d>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	460c      	mov	r4, r1
 8007f72:	461a      	mov	r2, r3
 8007f74:	4623      	mov	r3, r4
 8007f76:	f04f 0000 	mov.w	r0, #0
 8007f7a:	4933      	ldr	r1, [pc, #204]	; (8008048 <setSVM_dq+0x654>)
 8007f7c:	f7f8 f99c 	bl	80002b8 <__aeabi_dsub>
 8007f80:	4603      	mov	r3, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	4625      	mov	r5, r4
 8007f86:	461c      	mov	r4, r3
 8007f88:	4b30      	ldr	r3, [pc, #192]	; (800804c <setSVM_dq+0x658>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7f8 faf3 	bl	8000578 <__aeabi_f2d>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4620      	mov	r0, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f7f8 f98d 	bl	80002b8 <__aeabi_dsub>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	4b29      	ldr	r3, [pc, #164]	; (8008050 <setSVM_dq+0x65c>)
 8007fac:	f7f8 fb3c 	bl	8000628 <__aeabi_dmul>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	f7f8 fde6 	bl	8000b88 <__aeabi_d2f>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	4b25      	ldr	r3, [pc, #148]	; (8008054 <setSVM_dq+0x660>)
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	4b24      	ldr	r3, [pc, #144]	; (8008054 <setSVM_dq+0x660>)
 8007fc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8007fc8:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <setSVM_dq+0x650>)
 8007fca:	edd3 7a00 	vldr	s15, [r3]
 8007fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fd2:	4b20      	ldr	r3, [pc, #128]	; (8008054 <setSVM_dq+0x660>)
 8007fd4:	edc3 7a02 	vstr	s15, [r3, #8]
 8007fd8:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <setSVM_dq+0x660>)
 8007fda:	ed93 7a02 	vldr	s14, [r3, #8]
 8007fde:	4b1b      	ldr	r3, [pc, #108]	; (800804c <setSVM_dq+0x658>)
 8007fe0:	edd3 7a00 	vldr	s15, [r3]
 8007fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <setSVM_dq+0x660>)
 8007fea:	edc3 7a00 	vstr	s15, [r3]
 8007fee:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8007ff0:	4b18      	ldr	r3, [pc, #96]	; (8008054 <setSVM_dq+0x660>)
 8007ff2:	edd3 7a00 	vldr	s15, [r3]
 8007ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008002:	d503      	bpl.n	800800c <setSVM_dq+0x618>
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <setSVM_dq+0x660>)
 8008006:	4a14      	ldr	r2, [pc, #80]	; (8008058 <setSVM_dq+0x664>)
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e00d      	b.n	8008028 <setSVM_dq+0x634>
 800800c:	4b11      	ldr	r3, [pc, #68]	; (8008054 <setSVM_dq+0x660>)
 800800e:	edd3 7a00 	vldr	s15, [r3]
 8008012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801e:	dd03      	ble.n	8008028 <setSVM_dq+0x634>
 8008020:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <setSVM_dq+0x660>)
 8008022:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008026:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <setSVM_dq+0x660>)
 800802a:	edd3 7a01 	vldr	s15, [r3, #4]
 800802e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803a:	d50f      	bpl.n	800805c <setSVM_dq+0x668>
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <setSVM_dq+0x660>)
 800803e:	4a06      	ldr	r2, [pc, #24]	; (8008058 <setSVM_dq+0x664>)
 8008040:	605a      	str	r2, [r3, #4]
 8008042:	e019      	b.n	8008078 <setSVM_dq+0x684>
 8008044:	200001e4 	.word	0x200001e4
 8008048:	3ff00000 	.word	0x3ff00000
 800804c:	200001e8 	.word	0x200001e8
 8008050:	3fe00000 	.word	0x3fe00000
 8008054:	200001ec 	.word	0x200001ec
 8008058:	bf800000 	.word	0xbf800000
 800805c:	4b35      	ldr	r3, [pc, #212]	; (8008134 <setSVM_dq+0x740>)
 800805e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806e:	dd03      	ble.n	8008078 <setSVM_dq+0x684>
 8008070:	4b30      	ldr	r3, [pc, #192]	; (8008134 <setSVM_dq+0x740>)
 8008072:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008076:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8008078:	4b2e      	ldr	r3, [pc, #184]	; (8008134 <setSVM_dq+0x740>)
 800807a:	edd3 7a02 	vldr	s15, [r3, #8]
 800807e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808a:	d503      	bpl.n	8008094 <setSVM_dq+0x6a0>
 800808c:	4b29      	ldr	r3, [pc, #164]	; (8008134 <setSVM_dq+0x740>)
 800808e:	4a2a      	ldr	r2, [pc, #168]	; (8008138 <setSVM_dq+0x744>)
 8008090:	609a      	str	r2, [r3, #8]
 8008092:	e00d      	b.n	80080b0 <setSVM_dq+0x6bc>
 8008094:	4b27      	ldr	r3, [pc, #156]	; (8008134 <setSVM_dq+0x740>)
 8008096:	edd3 7a02 	vldr	s15, [r3, #8]
 800809a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800809e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	dd03      	ble.n	80080b0 <setSVM_dq+0x6bc>
 80080a8:	4b22      	ldr	r3, [pc, #136]	; (8008134 <setSVM_dq+0x740>)
 80080aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80080ae:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 80080b0:	4b20      	ldr	r3, [pc, #128]	; (8008134 <setSVM_dq+0x740>)
 80080b2:	edd3 7a00 	vldr	s15, [r3]
 80080b6:	4b21      	ldr	r3, [pc, #132]	; (800813c <setSVM_dq+0x748>)
 80080b8:	edc3 7a00 	vstr	s15, [r3]
 80080bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080c4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008140 <setSVM_dq+0x74c>
 80080c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <setSVM_dq+0x750>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d4:	ee17 2a90 	vmov	r2, s15
 80080d8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 80080da:	4b16      	ldr	r3, [pc, #88]	; (8008134 <setSVM_dq+0x740>)
 80080dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <setSVM_dq+0x754>)
 80080e2:	edc3 7a00 	vstr	s15, [r3]
 80080e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008140 <setSVM_dq+0x74c>
 80080f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <setSVM_dq+0x750>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	ee17 2a90 	vmov	r2, s15
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 8008104:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <setSVM_dq+0x740>)
 8008106:	edd3 7a02 	vldr	s15, [r3, #8]
 800810a:	4b10      	ldr	r3, [pc, #64]	; (800814c <setSVM_dq+0x758>)
 800810c:	edc3 7a00 	vstr	s15, [r3]
 8008110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008118:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8008140 <setSVM_dq+0x74c>
 800811c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008120:	4b08      	ldr	r3, [pc, #32]	; (8008144 <setSVM_dq+0x750>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008128:	ee17 2a90 	vmov	r2, s15
 800812c:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 800812e:	bf00      	nop
}
 8008130:	bdb0      	pop	{r4, r5, r7, pc}
 8008132:	bf00      	nop
 8008134:	200001ec 	.word	0x200001ec
 8008138:	bf800000 	.word	0xbf800000
 800813c:	20000128 	.word	0x20000128
 8008140:	45fa0000 	.word	0x45fa0000
 8008144:	200004d0 	.word	0x200004d0
 8008148:	2000012c 	.word	0x2000012c
 800814c:	20000130 	.word	0x20000130

08008150 <UartPrintf>:

}



inline static int32_t UartPrintf(UART_HandleTypeDef *huart, char *format, ...){
 8008150:	b40e      	push	{r1, r2, r3}
 8008152:	b580      	push	{r7, lr}
 8008154:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8008158:	af00      	add	r7, sp, #0
 800815a:	1d3b      	adds	r3, r7, #4
 800815c:	6018      	str	r0, [r3, #0]
	int32_t TransStrLength;
	char TransStr[1024];

	va_list args;
	va_start(args, format);
 800815e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8008162:	f107 0308 	add.w	r3, r7, #8
 8008166:	601a      	str	r2, [r3, #0]
	TransStrLength = vsprintf(TransStr, format, args);
 8008168:	f107 0308 	add.w	r3, r7, #8
 800816c:	f107 000c 	add.w	r0, r7, #12
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8008176:	f000 fc23 	bl	80089c0 <vsiprintf>
 800817a:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	va_end(args);

	HAL_UART_Transmit(huart, (uint8_t*)TransStr, TransStrLength, 100);
 800817e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8008182:	b29a      	uxth	r2, r3
 8008184:	f107 010c 	add.w	r1, r7, #12
 8008188:	1d38      	adds	r0, r7, #4
 800818a:	2364      	movs	r3, #100	; 0x64
 800818c:	6800      	ldr	r0, [r0, #0]
 800818e:	f7fd f866 	bl	800525e <HAL_UART_Transmit>

	return TransStrLength;
 8008192:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8008196:	4618      	mov	r0, r3
 8008198:	f207 4714 	addw	r7, r7, #1044	; 0x414
 800819c:	46bd      	mov	sp, r7
 800819e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081a2:	b003      	add	sp, #12
 80081a4:	4770      	bx	lr

080081a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081a6:	b480      	push	{r7}
 80081a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80081aa:	bf00      	nop
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80081b8:	4b18      	ldr	r3, [pc, #96]	; (800821c <MX_SPI2_Init+0x68>)
 80081ba:	4a19      	ldr	r2, [pc, #100]	; (8008220 <MX_SPI2_Init+0x6c>)
 80081bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80081be:	4b17      	ldr	r3, [pc, #92]	; (800821c <MX_SPI2_Init+0x68>)
 80081c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80081c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80081c6:	4b15      	ldr	r3, [pc, #84]	; (800821c <MX_SPI2_Init+0x68>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80081cc:	4b13      	ldr	r3, [pc, #76]	; (800821c <MX_SPI2_Init+0x68>)
 80081ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80081d4:	4b11      	ldr	r3, [pc, #68]	; (800821c <MX_SPI2_Init+0x68>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80081da:	4b10      	ldr	r3, [pc, #64]	; (800821c <MX_SPI2_Init+0x68>)
 80081dc:	2201      	movs	r2, #1
 80081de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80081e0:	4b0e      	ldr	r3, [pc, #56]	; (800821c <MX_SPI2_Init+0x68>)
 80081e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80081e8:	4b0c      	ldr	r3, [pc, #48]	; (800821c <MX_SPI2_Init+0x68>)
 80081ea:	2218      	movs	r2, #24
 80081ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80081ee:	4b0b      	ldr	r3, [pc, #44]	; (800821c <MX_SPI2_Init+0x68>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80081f4:	4b09      	ldr	r3, [pc, #36]	; (800821c <MX_SPI2_Init+0x68>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081fa:	4b08      	ldr	r3, [pc, #32]	; (800821c <MX_SPI2_Init+0x68>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <MX_SPI2_Init+0x68>)
 8008202:	220a      	movs	r2, #10
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008206:	4805      	ldr	r0, [pc, #20]	; (800821c <MX_SPI2_Init+0x68>)
 8008208:	f7fb fc0a 	bl	8003a20 <HAL_SPI_Init>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8008212:	f7ff ffc8 	bl	80081a6 <Error_Handler>
  }

}
 8008216:	bf00      	nop
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000478 	.word	0x20000478
 8008220:	40003800 	.word	0x40003800

08008224 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800822c:	f107 0314 	add.w	r3, r7, #20
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	605a      	str	r2, [r3, #4]
 8008236:	609a      	str	r2, [r3, #8]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a34      	ldr	r2, [pc, #208]	; (8008314 <HAL_SPI_MspInit+0xf0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d162      	bne.n	800830c <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008246:	2300      	movs	r3, #0
 8008248:	613b      	str	r3, [r7, #16]
 800824a:	4b33      	ldr	r3, [pc, #204]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	4a32      	ldr	r2, [pc, #200]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 8008250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008254:	6413      	str	r3, [r2, #64]	; 0x40
 8008256:	4b30      	ldr	r3, [pc, #192]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	4b2c      	ldr	r3, [pc, #176]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	4a2b      	ldr	r2, [pc, #172]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 800826c:	f043 0304 	orr.w	r3, r3, #4
 8008270:	6313      	str	r3, [r2, #48]	; 0x30
 8008272:	4b29      	ldr	r3, [pc, #164]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	4b25      	ldr	r3, [pc, #148]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	4a24      	ldr	r2, [pc, #144]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	6313      	str	r3, [r2, #48]	; 0x30
 800828e:	4b22      	ldr	r3, [pc, #136]	; (8008318 <HAL_SPI_MspInit+0xf4>)
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	60bb      	str	r3, [r7, #8]
 8008298:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800829a:	2302      	movs	r3, #2
 800829c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829e:	2302      	movs	r3, #2
 80082a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082a6:	2303      	movs	r3, #3
 80082a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80082aa:	2307      	movs	r3, #7
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ae:	f107 0314 	add.w	r3, r7, #20
 80082b2:	4619      	mov	r1, r3
 80082b4:	4819      	ldr	r0, [pc, #100]	; (800831c <HAL_SPI_MspInit+0xf8>)
 80082b6:	f7fa fcdd 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80082ba:	2304      	movs	r3, #4
 80082bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082be:	2302      	movs	r3, #2
 80082c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082c6:	2303      	movs	r3, #3
 80082c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80082ca:	2305      	movs	r3, #5
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ce:	f107 0314 	add.w	r3, r7, #20
 80082d2:	4619      	mov	r1, r3
 80082d4:	4811      	ldr	r0, [pc, #68]	; (800831c <HAL_SPI_MspInit+0xf8>)
 80082d6:	f7fa fccd 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80082da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e0:	2302      	movs	r3, #2
 80082e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082e8:	2303      	movs	r3, #3
 80082ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80082ec:	2305      	movs	r3, #5
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082f0:	f107 0314 	add.w	r3, r7, #20
 80082f4:	4619      	mov	r1, r3
 80082f6:	480a      	ldr	r0, [pc, #40]	; (8008320 <HAL_SPI_MspInit+0xfc>)
 80082f8:	f7fa fcbc 	bl	8002c74 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	2024      	movs	r0, #36	; 0x24
 8008302:	f7fa f8e8 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008306:	2024      	movs	r0, #36	; 0x24
 8008308:	f7fa f901 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800830c:	bf00      	nop
 800830e:	3728      	adds	r7, #40	; 0x28
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	40003800 	.word	0x40003800
 8008318:	40023800 	.word	0x40023800
 800831c:	40020800 	.word	0x40020800
 8008320:	40020400 	.word	0x40020400

08008324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800832a:	2300      	movs	r3, #0
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <HAL_MspInit+0x4c>)
 8008330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008332:	4a0f      	ldr	r2, [pc, #60]	; (8008370 <HAL_MspInit+0x4c>)
 8008334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008338:	6453      	str	r3, [r2, #68]	; 0x44
 800833a:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <HAL_MspInit+0x4c>)
 800833c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008342:	607b      	str	r3, [r7, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008346:	2300      	movs	r3, #0
 8008348:	603b      	str	r3, [r7, #0]
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <HAL_MspInit+0x4c>)
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	4a08      	ldr	r2, [pc, #32]	; (8008370 <HAL_MspInit+0x4c>)
 8008350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008354:	6413      	str	r3, [r2, #64]	; 0x40
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <HAL_MspInit+0x4c>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008362:	2007      	movs	r0, #7
 8008364:	f7fa f8ac 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	40023800 	.word	0x40023800

08008374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008382:	b480      	push	{r7}
 8008384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008386:	e7fe      	b.n	8008386 <HardFault_Handler+0x4>

08008388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800838c:	e7fe      	b.n	800838c <MemManage_Handler+0x4>

0800838e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008392:	e7fe      	b.n	8008392 <BusFault_Handler+0x4>

08008394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008398:	e7fe      	b.n	8008398 <UsageFault_Handler+0x4>

0800839a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800839a:	b480      	push	{r7}
 800839c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800839e:	bf00      	nop
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083ac:	bf00      	nop
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083b6:	b480      	push	{r7}
 80083b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083ba:	bf00      	nop
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083c8:	f7f8 fe00 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083cc:	bf00      	nop
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80083d4:	4802      	ldr	r0, [pc, #8]	; (80083e0 <CAN1_TX_IRQHandler+0x10>)
 80083d6:	f7f9 fd98 	bl	8001f0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80083da:	bf00      	nop
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000400 	.word	0x20000400

080083e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80083e8:	4802      	ldr	r0, [pc, #8]	; (80083f4 <CAN1_RX0_IRQHandler+0x10>)
 80083ea:	f7f9 fd8e 	bl	8001f0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80083ee:	bf00      	nop
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000400 	.word	0x20000400

080083f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80083fc:	4802      	ldr	r0, [pc, #8]	; (8008408 <SPI2_IRQHandler+0x10>)
 80083fe:	f7fb fc07 	bl	8003c10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008402:	bf00      	nop
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000478 	.word	0x20000478

0800840c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008410:	4802      	ldr	r0, [pc, #8]	; (800841c <USART2_IRQHandler+0x10>)
 8008412:	f7fc ffbd 	bl	8005390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008416:	bf00      	nop
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000510 	.word	0x20000510

08008420 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008424:	4802      	ldr	r0, [pc, #8]	; (8008430 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8008426:	f7fb ffeb 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800842a:	bf00      	nop
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200004d0 	.word	0x200004d0

08008434 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008438:	4802      	ldr	r0, [pc, #8]	; (8008444 <DMA2_Stream0_IRQHandler+0x10>)
 800843a:	f7fa f9b3 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800843e:	bf00      	nop
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000340 	.word	0x20000340

08008448 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800844c:	4802      	ldr	r0, [pc, #8]	; (8008458 <DMA2_Stream1_IRQHandler+0x10>)
 800844e:	f7fa f9a9 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008452:	bf00      	nop
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000250 	.word	0x20000250

0800845c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008460:	4802      	ldr	r0, [pc, #8]	; (800846c <DMA2_Stream2_IRQHandler+0x10>)
 8008462:	f7fa f99f 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	200003a0 	.word	0x200003a0

08008470 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008478:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <_sbrk+0x50>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <_sbrk+0x16>
		heap_end = &end;
 8008480:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <_sbrk+0x50>)
 8008482:	4a10      	ldr	r2, [pc, #64]	; (80084c4 <_sbrk+0x54>)
 8008484:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008486:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <_sbrk+0x50>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <_sbrk+0x50>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4413      	add	r3, r2
 8008494:	466a      	mov	r2, sp
 8008496:	4293      	cmp	r3, r2
 8008498:	d907      	bls.n	80084aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800849a:	f000 fa49 	bl	8008930 <__errno>
 800849e:	4602      	mov	r2, r0
 80084a0:	230c      	movs	r3, #12
 80084a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80084a4:	f04f 33ff 	mov.w	r3, #4294967295
 80084a8:	e006      	b.n	80084b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <_sbrk+0x50>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	4a03      	ldr	r2, [pc, #12]	; (80084c0 <_sbrk+0x50>)
 80084b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80084b6:	68fb      	ldr	r3, [r7, #12]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	200001f8 	.word	0x200001f8
 80084c4:	20000558 	.word	0x20000558

080084c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084cc:	4b16      	ldr	r3, [pc, #88]	; (8008528 <SystemInit+0x60>)
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d2:	4a15      	ldr	r2, [pc, #84]	; (8008528 <SystemInit+0x60>)
 80084d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80084dc:	4b13      	ldr	r3, [pc, #76]	; (800852c <SystemInit+0x64>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a12      	ldr	r2, [pc, #72]	; (800852c <SystemInit+0x64>)
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80084e8:	4b10      	ldr	r3, [pc, #64]	; (800852c <SystemInit+0x64>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <SystemInit+0x64>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a0e      	ldr	r2, [pc, #56]	; (800852c <SystemInit+0x64>)
 80084f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80084f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <SystemInit+0x64>)
 8008500:	4a0b      	ldr	r2, [pc, #44]	; (8008530 <SystemInit+0x68>)
 8008502:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <SystemInit+0x64>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a08      	ldr	r2, [pc, #32]	; (800852c <SystemInit+0x64>)
 800850a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800850e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <SystemInit+0x64>)
 8008512:	2200      	movs	r2, #0
 8008514:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008516:	4b04      	ldr	r3, [pc, #16]	; (8008528 <SystemInit+0x60>)
 8008518:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800851c:	609a      	str	r2, [r3, #8]
#endif
}
 800851e:	bf00      	nop
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	e000ed00 	.word	0xe000ed00
 800852c:	40023800 	.word	0x40023800
 8008530:	24003010 	.word	0x24003010

08008534 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b096      	sub	sp, #88	; 0x58
 8008538:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800853a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	605a      	str	r2, [r3, #4]
 8008544:	609a      	str	r2, [r3, #8]
 8008546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008548:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	605a      	str	r2, [r3, #4]
 800855c:	609a      	str	r2, [r3, #8]
 800855e:	60da      	str	r2, [r3, #12]
 8008560:	611a      	str	r2, [r3, #16]
 8008562:	615a      	str	r2, [r3, #20]
 8008564:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	2220      	movs	r2, #32
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fa09 	bl	8008984 <memset>

  htim8.Instance = TIM8;
 8008572:	4b4a      	ldr	r3, [pc, #296]	; (800869c <MX_TIM8_Init+0x168>)
 8008574:	4a4a      	ldr	r2, [pc, #296]	; (80086a0 <MX_TIM8_Init+0x16c>)
 8008576:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008578:	4b48      	ldr	r3, [pc, #288]	; (800869c <MX_TIM8_Init+0x168>)
 800857a:	2200      	movs	r2, #0
 800857c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800857e:	4b47      	ldr	r3, [pc, #284]	; (800869c <MX_TIM8_Init+0x168>)
 8008580:	2220      	movs	r2, #32
 8008582:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8008584:	4b45      	ldr	r3, [pc, #276]	; (800869c <MX_TIM8_Init+0x168>)
 8008586:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800858a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800858c:	4b43      	ldr	r3, [pc, #268]	; (800869c <MX_TIM8_Init+0x168>)
 800858e:	2200      	movs	r2, #0
 8008590:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008592:	4b42      	ldr	r3, [pc, #264]	; (800869c <MX_TIM8_Init+0x168>)
 8008594:	2200      	movs	r2, #0
 8008596:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008598:	4b40      	ldr	r3, [pc, #256]	; (800869c <MX_TIM8_Init+0x168>)
 800859a:	2280      	movs	r2, #128	; 0x80
 800859c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800859e:	483f      	ldr	r0, [pc, #252]	; (800869c <MX_TIM8_Init+0x168>)
 80085a0:	f7fb fe4a 	bl	8004238 <HAL_TIM_Base_Init>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80085aa:	f7ff fdfc 	bl	80081a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80085b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80085b8:	4619      	mov	r1, r3
 80085ba:	4838      	ldr	r0, [pc, #224]	; (800869c <MX_TIM8_Init+0x168>)
 80085bc:	f7fc f8ee 	bl	800479c <HAL_TIM_ConfigClockSource>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80085c6:	f7ff fdee 	bl	80081a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80085ca:	4834      	ldr	r0, [pc, #208]	; (800869c <MX_TIM8_Init+0x168>)
 80085cc:	f7fb fe5f 	bl	800428e <HAL_TIM_PWM_Init>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80085d6:	f7ff fde6 	bl	80081a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80085da:	2320      	movs	r3, #32
 80085dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085de:	2300      	movs	r3, #0
 80085e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80085e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085e6:	4619      	mov	r1, r3
 80085e8:	482c      	ldr	r0, [pc, #176]	; (800869c <MX_TIM8_Init+0x168>)
 80085ea:	f7fc fd1b 	bl	8005024 <HAL_TIMEx_MasterConfigSynchronization>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80085f4:	f7ff fdd7 	bl	80081a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085f8:	2360      	movs	r3, #96	; 0x60
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 80085fc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008602:	2300      	movs	r3, #0
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008606:	2300      	movs	r3, #0
 8008608:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800860a:	2300      	movs	r3, #0
 800860c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800860e:	2300      	movs	r3, #0
 8008610:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008612:	2300      	movs	r3, #0
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800861a:	2200      	movs	r2, #0
 800861c:	4619      	mov	r1, r3
 800861e:	481f      	ldr	r0, [pc, #124]	; (800869c <MX_TIM8_Init+0x168>)
 8008620:	f7fb fff6 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800862a:	f7ff fdbc 	bl	80081a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800862e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008632:	2204      	movs	r2, #4
 8008634:	4619      	mov	r1, r3
 8008636:	4819      	ldr	r0, [pc, #100]	; (800869c <MX_TIM8_Init+0x168>)
 8008638:	f7fb ffea 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8008642:	f7ff fdb0 	bl	80081a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800864a:	2208      	movs	r2, #8
 800864c:	4619      	mov	r1, r3
 800864e:	4813      	ldr	r0, [pc, #76]	; (800869c <MX_TIM8_Init+0x168>)
 8008650:	f7fb ffde 	bl	8004610 <HAL_TIM_PWM_ConfigChannel>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800865a:	f7ff fda4 	bl	80081a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 800866a:	2328      	movs	r3, #40	; 0x28
 800866c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008676:	2300      	movs	r3, #0
 8008678:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	4619      	mov	r1, r3
 800867e:	4807      	ldr	r0, [pc, #28]	; (800869c <MX_TIM8_Init+0x168>)
 8008680:	f7fc fd15 	bl	80050ae <HAL_TIMEx_ConfigBreakDeadTime>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800868a:	f7ff fd8c 	bl	80081a6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800868e:	4803      	ldr	r0, [pc, #12]	; (800869c <MX_TIM8_Init+0x168>)
 8008690:	f000 f830 	bl	80086f4 <HAL_TIM_MspPostInit>

}
 8008694:	bf00      	nop
 8008696:	3758      	adds	r7, #88	; 0x58
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	200004d0 	.word	0x200004d0
 80086a0:	40010400 	.word	0x40010400

080086a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0e      	ldr	r2, [pc, #56]	; (80086ec <HAL_TIM_Base_MspInit+0x48>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d115      	bne.n	80086e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <HAL_TIM_Base_MspInit+0x4c>)
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	4a0c      	ldr	r2, [pc, #48]	; (80086f0 <HAL_TIM_Base_MspInit+0x4c>)
 80086c0:	f043 0302 	orr.w	r3, r3, #2
 80086c4:	6453      	str	r3, [r2, #68]	; 0x44
 80086c6:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <HAL_TIM_Base_MspInit+0x4c>)
 80086c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80086d2:	2200      	movs	r2, #0
 80086d4:	2100      	movs	r1, #0
 80086d6:	202c      	movs	r0, #44	; 0x2c
 80086d8:	f7f9 fefd 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80086dc:	202c      	movs	r0, #44	; 0x2c
 80086de:	f7f9 ff16 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	40010400 	.word	0x40010400
 80086f0:	40023800 	.word	0x40023800

080086f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08a      	sub	sp, #40	; 0x28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086fc:	f107 0314 	add.w	r3, r7, #20
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	605a      	str	r2, [r3, #4]
 8008706:	609a      	str	r2, [r3, #8]
 8008708:	60da      	str	r2, [r3, #12]
 800870a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a30      	ldr	r2, [pc, #192]	; (80087d4 <HAL_TIM_MspPostInit+0xe0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d15a      	bne.n	80087cc <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008716:	2300      	movs	r3, #0
 8008718:	613b      	str	r3, [r7, #16]
 800871a:	4b2f      	ldr	r3, [pc, #188]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	4a2e      	ldr	r2, [pc, #184]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 8008720:	f043 0301 	orr.w	r3, r3, #1
 8008724:	6313      	str	r3, [r2, #48]	; 0x30
 8008726:	4b2c      	ldr	r3, [pc, #176]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	613b      	str	r3, [r7, #16]
 8008730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	4b28      	ldr	r3, [pc, #160]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	4a27      	ldr	r2, [pc, #156]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	6313      	str	r3, [r2, #48]	; 0x30
 8008742:	4b25      	ldr	r3, [pc, #148]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800874e:	2300      	movs	r3, #0
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	4b21      	ldr	r3, [pc, #132]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 8008758:	f043 0304 	orr.w	r3, r3, #4
 800875c:	6313      	str	r3, [r2, #48]	; 0x30
 800875e:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <HAL_TIM_MspPostInit+0xe4>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	60bb      	str	r3, [r7, #8]
 8008768:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800876a:	2380      	movs	r3, #128	; 0x80
 800876c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876e:	2302      	movs	r3, #2
 8008770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008772:	2300      	movs	r3, #0
 8008774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008776:	2300      	movs	r3, #0
 8008778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800877a:	2303      	movs	r3, #3
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800877e:	f107 0314 	add.w	r3, r7, #20
 8008782:	4619      	mov	r1, r3
 8008784:	4815      	ldr	r0, [pc, #84]	; (80087dc <HAL_TIM_MspPostInit+0xe8>)
 8008786:	f7fa fa75 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800878a:	2303      	movs	r3, #3
 800878c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878e:	2302      	movs	r3, #2
 8008790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008796:	2300      	movs	r3, #0
 8008798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800879a:	2303      	movs	r3, #3
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800879e:	f107 0314 	add.w	r3, r7, #20
 80087a2:	4619      	mov	r1, r3
 80087a4:	480e      	ldr	r0, [pc, #56]	; (80087e0 <HAL_TIM_MspPostInit+0xec>)
 80087a6:	f7fa fa65 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80087aa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80087ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b0:	2302      	movs	r3, #2
 80087b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087b8:	2300      	movs	r3, #0
 80087ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80087bc:	2303      	movs	r3, #3
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087c0:	f107 0314 	add.w	r3, r7, #20
 80087c4:	4619      	mov	r1, r3
 80087c6:	4807      	ldr	r0, [pc, #28]	; (80087e4 <HAL_TIM_MspPostInit+0xf0>)
 80087c8:	f7fa fa54 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80087cc:	bf00      	nop
 80087ce:	3728      	adds	r7, #40	; 0x28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40010400 	.word	0x40010400
 80087d8:	40023800 	.word	0x40023800
 80087dc:	40020000 	.word	0x40020000
 80087e0:	40020400 	.word	0x40020400
 80087e4:	40020800 	.word	0x40020800

080087e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80087ec:	4b11      	ldr	r3, [pc, #68]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 80087ee:	4a12      	ldr	r2, [pc, #72]	; (8008838 <MX_USART2_UART_Init+0x50>)
 80087f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80087f2:	4b10      	ldr	r3, [pc, #64]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 80087f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80087fa:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008800:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 8008802:	2200      	movs	r2, #0
 8008804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 8008808:	2200      	movs	r2, #0
 800880a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800880c:	4b09      	ldr	r3, [pc, #36]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 800880e:	220c      	movs	r2, #12
 8008810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008812:	4b08      	ldr	r3, [pc, #32]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 8008814:	2200      	movs	r2, #0
 8008816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008818:	4b06      	ldr	r3, [pc, #24]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 800881a:	2200      	movs	r2, #0
 800881c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800881e:	4805      	ldr	r0, [pc, #20]	; (8008834 <MX_USART2_UART_Init+0x4c>)
 8008820:	f7fc fcd0 	bl	80051c4 <HAL_UART_Init>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800882a:	f7ff fcbc 	bl	80081a6 <Error_Handler>
  }

}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20000510 	.word	0x20000510
 8008838:	40004400 	.word	0x40004400

0800883c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	; 0x28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008844:	f107 0314 	add.w	r3, r7, #20
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	605a      	str	r2, [r3, #4]
 800884e:	609a      	str	r2, [r3, #8]
 8008850:	60da      	str	r2, [r3, #12]
 8008852:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <HAL_UART_MspInit+0x94>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d133      	bne.n	80088c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800885e:	2300      	movs	r3, #0
 8008860:	613b      	str	r3, [r7, #16]
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <HAL_UART_MspInit+0x98>)
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	4a1b      	ldr	r2, [pc, #108]	; (80088d4 <HAL_UART_MspInit+0x98>)
 8008868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800886c:	6413      	str	r3, [r2, #64]	; 0x40
 800886e:	4b19      	ldr	r3, [pc, #100]	; (80088d4 <HAL_UART_MspInit+0x98>)
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	4b15      	ldr	r3, [pc, #84]	; (80088d4 <HAL_UART_MspInit+0x98>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	4a14      	ldr	r2, [pc, #80]	; (80088d4 <HAL_UART_MspInit+0x98>)
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	6313      	str	r3, [r2, #48]	; 0x30
 800888a:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <HAL_UART_MspInit+0x98>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008896:	230c      	movs	r3, #12
 8008898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800889a:	2302      	movs	r3, #2
 800889c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800889e:	2301      	movs	r3, #1
 80088a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a2:	2303      	movs	r3, #3
 80088a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80088a6:	2307      	movs	r3, #7
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088aa:	f107 0314 	add.w	r3, r7, #20
 80088ae:	4619      	mov	r1, r3
 80088b0:	4809      	ldr	r0, [pc, #36]	; (80088d8 <HAL_UART_MspInit+0x9c>)
 80088b2:	f7fa f9df 	bl	8002c74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80088b6:	2200      	movs	r2, #0
 80088b8:	2100      	movs	r1, #0
 80088ba:	2026      	movs	r0, #38	; 0x26
 80088bc:	f7f9 fe0b 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80088c0:	2026      	movs	r0, #38	; 0x26
 80088c2:	f7f9 fe24 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80088c6:	bf00      	nop
 80088c8:	3728      	adds	r7, #40	; 0x28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40004400 	.word	0x40004400
 80088d4:	40023800 	.word	0x40023800
 80088d8:	40020000 	.word	0x40020000

080088dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80088dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008914 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80088e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80088e2:	e003      	b.n	80088ec <LoopCopyDataInit>

080088e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80088e4:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80088e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80088e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80088ea:	3104      	adds	r1, #4

080088ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80088ec:	480b      	ldr	r0, [pc, #44]	; (800891c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80088f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80088f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80088f4:	d3f6      	bcc.n	80088e4 <CopyDataInit>
  ldr  r2, =_sbss
 80088f6:	4a0b      	ldr	r2, [pc, #44]	; (8008924 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80088f8:	e002      	b.n	8008900 <LoopFillZerobss>

080088fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80088fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80088fc:	f842 3b04 	str.w	r3, [r2], #4

08008900 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008900:	4b09      	ldr	r3, [pc, #36]	; (8008928 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008902:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008904:	d3f9      	bcc.n	80088fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008906:	f7ff fddf 	bl	80084c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800890a:	f000 f817 	bl	800893c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800890e:	f7fd fd5f 	bl	80063d0 <main>
  bx  lr    
 8008912:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008914:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008918:	0801d020 	.word	0x0801d020
  ldr  r0, =_sdata
 800891c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008920:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 8008924:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 8008928:	20000554 	.word	0x20000554

0800892c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800892c:	e7fe      	b.n	800892c <ADC_IRQHandler>
	...

08008930 <__errno>:
 8008930:	4b01      	ldr	r3, [pc, #4]	; (8008938 <__errno+0x8>)
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000044 	.word	0x20000044

0800893c <__libc_init_array>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4e0d      	ldr	r6, [pc, #52]	; (8008974 <__libc_init_array+0x38>)
 8008940:	4c0d      	ldr	r4, [pc, #52]	; (8008978 <__libc_init_array+0x3c>)
 8008942:	1ba4      	subs	r4, r4, r6
 8008944:	10a4      	asrs	r4, r4, #2
 8008946:	2500      	movs	r5, #0
 8008948:	42a5      	cmp	r5, r4
 800894a:	d109      	bne.n	8008960 <__libc_init_array+0x24>
 800894c:	4e0b      	ldr	r6, [pc, #44]	; (800897c <__libc_init_array+0x40>)
 800894e:	4c0c      	ldr	r4, [pc, #48]	; (8008980 <__libc_init_array+0x44>)
 8008950:	f000 fe82 	bl	8009658 <_init>
 8008954:	1ba4      	subs	r4, r4, r6
 8008956:	10a4      	asrs	r4, r4, #2
 8008958:	2500      	movs	r5, #0
 800895a:	42a5      	cmp	r5, r4
 800895c:	d105      	bne.n	800896a <__libc_init_array+0x2e>
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008964:	4798      	blx	r3
 8008966:	3501      	adds	r5, #1
 8008968:	e7ee      	b.n	8008948 <__libc_init_array+0xc>
 800896a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800896e:	4798      	blx	r3
 8008970:	3501      	adds	r5, #1
 8008972:	e7f2      	b.n	800895a <__libc_init_array+0x1e>
 8008974:	0801d018 	.word	0x0801d018
 8008978:	0801d018 	.word	0x0801d018
 800897c:	0801d018 	.word	0x0801d018
 8008980:	0801d01c 	.word	0x0801d01c

08008984 <memset>:
 8008984:	4402      	add	r2, r0
 8008986:	4603      	mov	r3, r0
 8008988:	4293      	cmp	r3, r2
 800898a:	d100      	bne.n	800898e <memset+0xa>
 800898c:	4770      	bx	lr
 800898e:	f803 1b01 	strb.w	r1, [r3], #1
 8008992:	e7f9      	b.n	8008988 <memset+0x4>

08008994 <_vsiprintf_r>:
 8008994:	b500      	push	{lr}
 8008996:	b09b      	sub	sp, #108	; 0x6c
 8008998:	9100      	str	r1, [sp, #0]
 800899a:	9104      	str	r1, [sp, #16]
 800899c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	9102      	str	r1, [sp, #8]
 80089a4:	4905      	ldr	r1, [pc, #20]	; (80089bc <_vsiprintf_r+0x28>)
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	4669      	mov	r1, sp
 80089aa:	f000 f8c7 	bl	8008b3c <_svfiprintf_r>
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	b01b      	add	sp, #108	; 0x6c
 80089b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ba:	bf00      	nop
 80089bc:	ffff0208 	.word	0xffff0208

080089c0 <vsiprintf>:
 80089c0:	4613      	mov	r3, r2
 80089c2:	460a      	mov	r2, r1
 80089c4:	4601      	mov	r1, r0
 80089c6:	4802      	ldr	r0, [pc, #8]	; (80089d0 <vsiprintf+0x10>)
 80089c8:	6800      	ldr	r0, [r0, #0]
 80089ca:	f7ff bfe3 	b.w	8008994 <_vsiprintf_r>
 80089ce:	bf00      	nop
 80089d0:	20000044 	.word	0x20000044

080089d4 <_malloc_r>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	1ccd      	adds	r5, r1, #3
 80089d8:	f025 0503 	bic.w	r5, r5, #3
 80089dc:	3508      	adds	r5, #8
 80089de:	2d0c      	cmp	r5, #12
 80089e0:	bf38      	it	cc
 80089e2:	250c      	movcc	r5, #12
 80089e4:	2d00      	cmp	r5, #0
 80089e6:	4606      	mov	r6, r0
 80089e8:	db01      	blt.n	80089ee <_malloc_r+0x1a>
 80089ea:	42a9      	cmp	r1, r5
 80089ec:	d903      	bls.n	80089f6 <_malloc_r+0x22>
 80089ee:	230c      	movs	r3, #12
 80089f0:	6033      	str	r3, [r6, #0]
 80089f2:	2000      	movs	r0, #0
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	f000 fb55 	bl	80090a4 <__malloc_lock>
 80089fa:	4a21      	ldr	r2, [pc, #132]	; (8008a80 <_malloc_r+0xac>)
 80089fc:	6814      	ldr	r4, [r2, #0]
 80089fe:	4621      	mov	r1, r4
 8008a00:	b991      	cbnz	r1, 8008a28 <_malloc_r+0x54>
 8008a02:	4c20      	ldr	r4, [pc, #128]	; (8008a84 <_malloc_r+0xb0>)
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	b91b      	cbnz	r3, 8008a10 <_malloc_r+0x3c>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 fb17 	bl	800903c <_sbrk_r>
 8008a0e:	6020      	str	r0, [r4, #0]
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f000 fb12 	bl	800903c <_sbrk_r>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d124      	bne.n	8008a66 <_malloc_r+0x92>
 8008a1c:	230c      	movs	r3, #12
 8008a1e:	6033      	str	r3, [r6, #0]
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 fb40 	bl	80090a6 <__malloc_unlock>
 8008a26:	e7e4      	b.n	80089f2 <_malloc_r+0x1e>
 8008a28:	680b      	ldr	r3, [r1, #0]
 8008a2a:	1b5b      	subs	r3, r3, r5
 8008a2c:	d418      	bmi.n	8008a60 <_malloc_r+0x8c>
 8008a2e:	2b0b      	cmp	r3, #11
 8008a30:	d90f      	bls.n	8008a52 <_malloc_r+0x7e>
 8008a32:	600b      	str	r3, [r1, #0]
 8008a34:	50cd      	str	r5, [r1, r3]
 8008a36:	18cc      	adds	r4, r1, r3
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f000 fb34 	bl	80090a6 <__malloc_unlock>
 8008a3e:	f104 000b 	add.w	r0, r4, #11
 8008a42:	1d23      	adds	r3, r4, #4
 8008a44:	f020 0007 	bic.w	r0, r0, #7
 8008a48:	1ac3      	subs	r3, r0, r3
 8008a4a:	d0d3      	beq.n	80089f4 <_malloc_r+0x20>
 8008a4c:	425a      	negs	r2, r3
 8008a4e:	50e2      	str	r2, [r4, r3]
 8008a50:	e7d0      	b.n	80089f4 <_malloc_r+0x20>
 8008a52:	428c      	cmp	r4, r1
 8008a54:	684b      	ldr	r3, [r1, #4]
 8008a56:	bf16      	itet	ne
 8008a58:	6063      	strne	r3, [r4, #4]
 8008a5a:	6013      	streq	r3, [r2, #0]
 8008a5c:	460c      	movne	r4, r1
 8008a5e:	e7eb      	b.n	8008a38 <_malloc_r+0x64>
 8008a60:	460c      	mov	r4, r1
 8008a62:	6849      	ldr	r1, [r1, #4]
 8008a64:	e7cc      	b.n	8008a00 <_malloc_r+0x2c>
 8008a66:	1cc4      	adds	r4, r0, #3
 8008a68:	f024 0403 	bic.w	r4, r4, #3
 8008a6c:	42a0      	cmp	r0, r4
 8008a6e:	d005      	beq.n	8008a7c <_malloc_r+0xa8>
 8008a70:	1a21      	subs	r1, r4, r0
 8008a72:	4630      	mov	r0, r6
 8008a74:	f000 fae2 	bl	800903c <_sbrk_r>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d0cf      	beq.n	8008a1c <_malloc_r+0x48>
 8008a7c:	6025      	str	r5, [r4, #0]
 8008a7e:	e7db      	b.n	8008a38 <_malloc_r+0x64>
 8008a80:	200001fc 	.word	0x200001fc
 8008a84:	20000200 	.word	0x20000200

08008a88 <__ssputs_r>:
 8008a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8c:	688e      	ldr	r6, [r1, #8]
 8008a8e:	429e      	cmp	r6, r3
 8008a90:	4682      	mov	sl, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	4690      	mov	r8, r2
 8008a96:	4699      	mov	r9, r3
 8008a98:	d837      	bhi.n	8008b0a <__ssputs_r+0x82>
 8008a9a:	898a      	ldrh	r2, [r1, #12]
 8008a9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008aa0:	d031      	beq.n	8008b06 <__ssputs_r+0x7e>
 8008aa2:	6825      	ldr	r5, [r4, #0]
 8008aa4:	6909      	ldr	r1, [r1, #16]
 8008aa6:	1a6f      	subs	r7, r5, r1
 8008aa8:	6965      	ldr	r5, [r4, #20]
 8008aaa:	2302      	movs	r3, #2
 8008aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ab0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ab4:	f109 0301 	add.w	r3, r9, #1
 8008ab8:	443b      	add	r3, r7
 8008aba:	429d      	cmp	r5, r3
 8008abc:	bf38      	it	cc
 8008abe:	461d      	movcc	r5, r3
 8008ac0:	0553      	lsls	r3, r2, #21
 8008ac2:	d530      	bpl.n	8008b26 <__ssputs_r+0x9e>
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	f7ff ff85 	bl	80089d4 <_malloc_r>
 8008aca:	4606      	mov	r6, r0
 8008acc:	b950      	cbnz	r0, 8008ae4 <__ssputs_r+0x5c>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	f8ca 3000 	str.w	r3, [sl]
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	6921      	ldr	r1, [r4, #16]
 8008ae8:	f000 fab8 	bl	800905c <memcpy>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	6126      	str	r6, [r4, #16]
 8008afa:	6165      	str	r5, [r4, #20]
 8008afc:	443e      	add	r6, r7
 8008afe:	1bed      	subs	r5, r5, r7
 8008b00:	6026      	str	r6, [r4, #0]
 8008b02:	60a5      	str	r5, [r4, #8]
 8008b04:	464e      	mov	r6, r9
 8008b06:	454e      	cmp	r6, r9
 8008b08:	d900      	bls.n	8008b0c <__ssputs_r+0x84>
 8008b0a:	464e      	mov	r6, r9
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	4641      	mov	r1, r8
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	f000 faae 	bl	8009072 <memmove>
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	1b9b      	subs	r3, r3, r6
 8008b1a:	60a3      	str	r3, [r4, #8]
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	441e      	add	r6, r3
 8008b20:	6026      	str	r6, [r4, #0]
 8008b22:	2000      	movs	r0, #0
 8008b24:	e7dc      	b.n	8008ae0 <__ssputs_r+0x58>
 8008b26:	462a      	mov	r2, r5
 8008b28:	f000 fb0c 	bl	8009144 <_realloc_r>
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d1e2      	bne.n	8008af8 <__ssputs_r+0x70>
 8008b32:	6921      	ldr	r1, [r4, #16]
 8008b34:	4650      	mov	r0, sl
 8008b36:	f000 fab7 	bl	80090a8 <_free_r>
 8008b3a:	e7c8      	b.n	8008ace <__ssputs_r+0x46>

08008b3c <_svfiprintf_r>:
 8008b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	461d      	mov	r5, r3
 8008b42:	898b      	ldrh	r3, [r1, #12]
 8008b44:	061f      	lsls	r7, r3, #24
 8008b46:	b09d      	sub	sp, #116	; 0x74
 8008b48:	4680      	mov	r8, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	d50f      	bpl.n	8008b70 <_svfiprintf_r+0x34>
 8008b50:	690b      	ldr	r3, [r1, #16]
 8008b52:	b96b      	cbnz	r3, 8008b70 <_svfiprintf_r+0x34>
 8008b54:	2140      	movs	r1, #64	; 0x40
 8008b56:	f7ff ff3d 	bl	80089d4 <_malloc_r>
 8008b5a:	6020      	str	r0, [r4, #0]
 8008b5c:	6120      	str	r0, [r4, #16]
 8008b5e:	b928      	cbnz	r0, 8008b6c <_svfiprintf_r+0x30>
 8008b60:	230c      	movs	r3, #12
 8008b62:	f8c8 3000 	str.w	r3, [r8]
 8008b66:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6a:	e0c8      	b.n	8008cfe <_svfiprintf_r+0x1c2>
 8008b6c:	2340      	movs	r3, #64	; 0x40
 8008b6e:	6163      	str	r3, [r4, #20]
 8008b70:	2300      	movs	r3, #0
 8008b72:	9309      	str	r3, [sp, #36]	; 0x24
 8008b74:	2320      	movs	r3, #32
 8008b76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b7a:	2330      	movs	r3, #48	; 0x30
 8008b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b80:	9503      	str	r5, [sp, #12]
 8008b82:	f04f 0b01 	mov.w	fp, #1
 8008b86:	4637      	mov	r7, r6
 8008b88:	463d      	mov	r5, r7
 8008b8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b8e:	b10b      	cbz	r3, 8008b94 <_svfiprintf_r+0x58>
 8008b90:	2b25      	cmp	r3, #37	; 0x25
 8008b92:	d13e      	bne.n	8008c12 <_svfiprintf_r+0xd6>
 8008b94:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b98:	d00b      	beq.n	8008bb2 <_svfiprintf_r+0x76>
 8008b9a:	4653      	mov	r3, sl
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	f7ff ff71 	bl	8008a88 <__ssputs_r>
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	f000 80a4 	beq.w	8008cf4 <_svfiprintf_r+0x1b8>
 8008bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bae:	4453      	add	r3, sl
 8008bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb2:	783b      	ldrb	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 809d 	beq.w	8008cf4 <_svfiprintf_r+0x1b8>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bce:	462f      	mov	r7, r5
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008bd6:	4850      	ldr	r0, [pc, #320]	; (8008d18 <_svfiprintf_r+0x1dc>)
 8008bd8:	f7f7 fb1a 	bl	8000210 <memchr>
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	b9d0      	cbnz	r0, 8008c16 <_svfiprintf_r+0xda>
 8008be0:	06d9      	lsls	r1, r3, #27
 8008be2:	bf44      	itt	mi
 8008be4:	2220      	movmi	r2, #32
 8008be6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bea:	071a      	lsls	r2, r3, #28
 8008bec:	bf44      	itt	mi
 8008bee:	222b      	movmi	r2, #43	; 0x2b
 8008bf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bf4:	782a      	ldrb	r2, [r5, #0]
 8008bf6:	2a2a      	cmp	r2, #42	; 0x2a
 8008bf8:	d015      	beq.n	8008c26 <_svfiprintf_r+0xea>
 8008bfa:	9a07      	ldr	r2, [sp, #28]
 8008bfc:	462f      	mov	r7, r5
 8008bfe:	2000      	movs	r0, #0
 8008c00:	250a      	movs	r5, #10
 8008c02:	4639      	mov	r1, r7
 8008c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c08:	3b30      	subs	r3, #48	; 0x30
 8008c0a:	2b09      	cmp	r3, #9
 8008c0c:	d94d      	bls.n	8008caa <_svfiprintf_r+0x16e>
 8008c0e:	b1b8      	cbz	r0, 8008c40 <_svfiprintf_r+0x104>
 8008c10:	e00f      	b.n	8008c32 <_svfiprintf_r+0xf6>
 8008c12:	462f      	mov	r7, r5
 8008c14:	e7b8      	b.n	8008b88 <_svfiprintf_r+0x4c>
 8008c16:	4a40      	ldr	r2, [pc, #256]	; (8008d18 <_svfiprintf_r+0x1dc>)
 8008c18:	1a80      	subs	r0, r0, r2
 8008c1a:	fa0b f000 	lsl.w	r0, fp, r0
 8008c1e:	4318      	orrs	r0, r3
 8008c20:	9004      	str	r0, [sp, #16]
 8008c22:	463d      	mov	r5, r7
 8008c24:	e7d3      	b.n	8008bce <_svfiprintf_r+0x92>
 8008c26:	9a03      	ldr	r2, [sp, #12]
 8008c28:	1d11      	adds	r1, r2, #4
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	9103      	str	r1, [sp, #12]
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	db01      	blt.n	8008c36 <_svfiprintf_r+0xfa>
 8008c32:	9207      	str	r2, [sp, #28]
 8008c34:	e004      	b.n	8008c40 <_svfiprintf_r+0x104>
 8008c36:	4252      	negs	r2, r2
 8008c38:	f043 0302 	orr.w	r3, r3, #2
 8008c3c:	9207      	str	r2, [sp, #28]
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	783b      	ldrb	r3, [r7, #0]
 8008c42:	2b2e      	cmp	r3, #46	; 0x2e
 8008c44:	d10c      	bne.n	8008c60 <_svfiprintf_r+0x124>
 8008c46:	787b      	ldrb	r3, [r7, #1]
 8008c48:	2b2a      	cmp	r3, #42	; 0x2a
 8008c4a:	d133      	bne.n	8008cb4 <_svfiprintf_r+0x178>
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	1d1a      	adds	r2, r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	9203      	str	r2, [sp, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bfb8      	it	lt
 8008c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c5c:	3702      	adds	r7, #2
 8008c5e:	9305      	str	r3, [sp, #20]
 8008c60:	4d2e      	ldr	r5, [pc, #184]	; (8008d1c <_svfiprintf_r+0x1e0>)
 8008c62:	7839      	ldrb	r1, [r7, #0]
 8008c64:	2203      	movs	r2, #3
 8008c66:	4628      	mov	r0, r5
 8008c68:	f7f7 fad2 	bl	8000210 <memchr>
 8008c6c:	b138      	cbz	r0, 8008c7e <_svfiprintf_r+0x142>
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	1b40      	subs	r0, r0, r5
 8008c72:	fa03 f000 	lsl.w	r0, r3, r0
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	4303      	orrs	r3, r0
 8008c7a:	3701      	adds	r7, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	7839      	ldrb	r1, [r7, #0]
 8008c80:	4827      	ldr	r0, [pc, #156]	; (8008d20 <_svfiprintf_r+0x1e4>)
 8008c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c86:	2206      	movs	r2, #6
 8008c88:	1c7e      	adds	r6, r7, #1
 8008c8a:	f7f7 fac1 	bl	8000210 <memchr>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d038      	beq.n	8008d04 <_svfiprintf_r+0x1c8>
 8008c92:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <_svfiprintf_r+0x1e8>)
 8008c94:	bb13      	cbnz	r3, 8008cdc <_svfiprintf_r+0x1a0>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	3307      	adds	r3, #7
 8008c9a:	f023 0307 	bic.w	r3, r3, #7
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca4:	444b      	add	r3, r9
 8008ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca8:	e76d      	b.n	8008b86 <_svfiprintf_r+0x4a>
 8008caa:	fb05 3202 	mla	r2, r5, r2, r3
 8008cae:	2001      	movs	r0, #1
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	e7a6      	b.n	8008c02 <_svfiprintf_r+0xc6>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	3701      	adds	r7, #1
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	250a      	movs	r5, #10
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cc4:	3a30      	subs	r2, #48	; 0x30
 8008cc6:	2a09      	cmp	r2, #9
 8008cc8:	d903      	bls.n	8008cd2 <_svfiprintf_r+0x196>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0c8      	beq.n	8008c60 <_svfiprintf_r+0x124>
 8008cce:	9105      	str	r1, [sp, #20]
 8008cd0:	e7c6      	b.n	8008c60 <_svfiprintf_r+0x124>
 8008cd2:	fb05 2101 	mla	r1, r5, r1, r2
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4607      	mov	r7, r0
 8008cda:	e7f0      	b.n	8008cbe <_svfiprintf_r+0x182>
 8008cdc:	ab03      	add	r3, sp, #12
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	4b11      	ldr	r3, [pc, #68]	; (8008d28 <_svfiprintf_r+0x1ec>)
 8008ce4:	a904      	add	r1, sp, #16
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	f3af 8000 	nop.w
 8008cec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	d1d6      	bne.n	8008ca2 <_svfiprintf_r+0x166>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	065b      	lsls	r3, r3, #25
 8008cf8:	f53f af35 	bmi.w	8008b66 <_svfiprintf_r+0x2a>
 8008cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cfe:	b01d      	add	sp, #116	; 0x74
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d04:	ab03      	add	r3, sp, #12
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	4622      	mov	r2, r4
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <_svfiprintf_r+0x1ec>)
 8008d0c:	a904      	add	r1, sp, #16
 8008d0e:	4640      	mov	r0, r8
 8008d10:	f000 f882 	bl	8008e18 <_printf_i>
 8008d14:	e7ea      	b.n	8008cec <_svfiprintf_r+0x1b0>
 8008d16:	bf00      	nop
 8008d18:	0801cfb8 	.word	0x0801cfb8
 8008d1c:	0801cfbe 	.word	0x0801cfbe
 8008d20:	0801cfc2 	.word	0x0801cfc2
 8008d24:	00000000 	.word	0x00000000
 8008d28:	08008a89 	.word	0x08008a89

08008d2c <_printf_common>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	4691      	mov	r9, r2
 8008d32:	461f      	mov	r7, r3
 8008d34:	688a      	ldr	r2, [r1, #8]
 8008d36:	690b      	ldr	r3, [r1, #16]
 8008d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	bfb8      	it	lt
 8008d40:	4613      	movlt	r3, r2
 8008d42:	f8c9 3000 	str.w	r3, [r9]
 8008d46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	b112      	cbz	r2, 8008d56 <_printf_common+0x2a>
 8008d50:	3301      	adds	r3, #1
 8008d52:	f8c9 3000 	str.w	r3, [r9]
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	0699      	lsls	r1, r3, #26
 8008d5a:	bf42      	ittt	mi
 8008d5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d60:	3302      	addmi	r3, #2
 8008d62:	f8c9 3000 	strmi.w	r3, [r9]
 8008d66:	6825      	ldr	r5, [r4, #0]
 8008d68:	f015 0506 	ands.w	r5, r5, #6
 8008d6c:	d107      	bne.n	8008d7e <_printf_common+0x52>
 8008d6e:	f104 0a19 	add.w	sl, r4, #25
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	f8d9 2000 	ldr.w	r2, [r9]
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	42ab      	cmp	r3, r5
 8008d7c:	dc28      	bgt.n	8008dd0 <_printf_common+0xa4>
 8008d7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	3300      	adds	r3, #0
 8008d86:	bf18      	it	ne
 8008d88:	2301      	movne	r3, #1
 8008d8a:	0692      	lsls	r2, r2, #26
 8008d8c:	d42d      	bmi.n	8008dea <_printf_common+0xbe>
 8008d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d92:	4639      	mov	r1, r7
 8008d94:	4630      	mov	r0, r6
 8008d96:	47c0      	blx	r8
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d020      	beq.n	8008dde <_printf_common+0xb2>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	68e5      	ldr	r5, [r4, #12]
 8008da0:	f8d9 2000 	ldr.w	r2, [r9]
 8008da4:	f003 0306 	and.w	r3, r3, #6
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	bf08      	it	eq
 8008dac:	1aad      	subeq	r5, r5, r2
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	6922      	ldr	r2, [r4, #16]
 8008db2:	bf0c      	ite	eq
 8008db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db8:	2500      	movne	r5, #0
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	bfc4      	itt	gt
 8008dbe:	1a9b      	subgt	r3, r3, r2
 8008dc0:	18ed      	addgt	r5, r5, r3
 8008dc2:	f04f 0900 	mov.w	r9, #0
 8008dc6:	341a      	adds	r4, #26
 8008dc8:	454d      	cmp	r5, r9
 8008dca:	d11a      	bne.n	8008e02 <_printf_common+0xd6>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e008      	b.n	8008de2 <_printf_common+0xb6>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	47c0      	blx	r8
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d103      	bne.n	8008de6 <_printf_common+0xba>
 8008dde:	f04f 30ff 	mov.w	r0, #4294967295
 8008de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de6:	3501      	adds	r5, #1
 8008de8:	e7c3      	b.n	8008d72 <_printf_common+0x46>
 8008dea:	18e1      	adds	r1, r4, r3
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	2030      	movs	r0, #48	; 0x30
 8008df0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008df4:	4422      	add	r2, r4
 8008df6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dfe:	3302      	adds	r3, #2
 8008e00:	e7c5      	b.n	8008d8e <_printf_common+0x62>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4622      	mov	r2, r4
 8008e06:	4639      	mov	r1, r7
 8008e08:	4630      	mov	r0, r6
 8008e0a:	47c0      	blx	r8
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d0e6      	beq.n	8008dde <_printf_common+0xb2>
 8008e10:	f109 0901 	add.w	r9, r9, #1
 8008e14:	e7d8      	b.n	8008dc8 <_printf_common+0x9c>
	...

08008e18 <_printf_i>:
 8008e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e20:	460c      	mov	r4, r1
 8008e22:	7e09      	ldrb	r1, [r1, #24]
 8008e24:	b085      	sub	sp, #20
 8008e26:	296e      	cmp	r1, #110	; 0x6e
 8008e28:	4617      	mov	r7, r2
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	4698      	mov	r8, r3
 8008e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e30:	f000 80b3 	beq.w	8008f9a <_printf_i+0x182>
 8008e34:	d822      	bhi.n	8008e7c <_printf_i+0x64>
 8008e36:	2963      	cmp	r1, #99	; 0x63
 8008e38:	d036      	beq.n	8008ea8 <_printf_i+0x90>
 8008e3a:	d80a      	bhi.n	8008e52 <_printf_i+0x3a>
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	f000 80b9 	beq.w	8008fb4 <_printf_i+0x19c>
 8008e42:	2958      	cmp	r1, #88	; 0x58
 8008e44:	f000 8083 	beq.w	8008f4e <_printf_i+0x136>
 8008e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e50:	e032      	b.n	8008eb8 <_printf_i+0xa0>
 8008e52:	2964      	cmp	r1, #100	; 0x64
 8008e54:	d001      	beq.n	8008e5a <_printf_i+0x42>
 8008e56:	2969      	cmp	r1, #105	; 0x69
 8008e58:	d1f6      	bne.n	8008e48 <_printf_i+0x30>
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	6813      	ldr	r3, [r2, #0]
 8008e5e:	0605      	lsls	r5, r0, #24
 8008e60:	f103 0104 	add.w	r1, r3, #4
 8008e64:	d52a      	bpl.n	8008ebc <_printf_i+0xa4>
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6011      	str	r1, [r2, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	da03      	bge.n	8008e76 <_printf_i+0x5e>
 8008e6e:	222d      	movs	r2, #45	; 0x2d
 8008e70:	425b      	negs	r3, r3
 8008e72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e76:	486f      	ldr	r0, [pc, #444]	; (8009034 <_printf_i+0x21c>)
 8008e78:	220a      	movs	r2, #10
 8008e7a:	e039      	b.n	8008ef0 <_printf_i+0xd8>
 8008e7c:	2973      	cmp	r1, #115	; 0x73
 8008e7e:	f000 809d 	beq.w	8008fbc <_printf_i+0x1a4>
 8008e82:	d808      	bhi.n	8008e96 <_printf_i+0x7e>
 8008e84:	296f      	cmp	r1, #111	; 0x6f
 8008e86:	d020      	beq.n	8008eca <_printf_i+0xb2>
 8008e88:	2970      	cmp	r1, #112	; 0x70
 8008e8a:	d1dd      	bne.n	8008e48 <_printf_i+0x30>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	f043 0320 	orr.w	r3, r3, #32
 8008e92:	6023      	str	r3, [r4, #0]
 8008e94:	e003      	b.n	8008e9e <_printf_i+0x86>
 8008e96:	2975      	cmp	r1, #117	; 0x75
 8008e98:	d017      	beq.n	8008eca <_printf_i+0xb2>
 8008e9a:	2978      	cmp	r1, #120	; 0x78
 8008e9c:	d1d4      	bne.n	8008e48 <_printf_i+0x30>
 8008e9e:	2378      	movs	r3, #120	; 0x78
 8008ea0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ea4:	4864      	ldr	r0, [pc, #400]	; (8009038 <_printf_i+0x220>)
 8008ea6:	e055      	b.n	8008f54 <_printf_i+0x13c>
 8008ea8:	6813      	ldr	r3, [r2, #0]
 8008eaa:	1d19      	adds	r1, r3, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6011      	str	r1, [r2, #0]
 8008eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e08c      	b.n	8008fd6 <_printf_i+0x1be>
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6011      	str	r1, [r2, #0]
 8008ec0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ec4:	bf18      	it	ne
 8008ec6:	b21b      	sxthne	r3, r3
 8008ec8:	e7cf      	b.n	8008e6a <_printf_i+0x52>
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	6825      	ldr	r5, [r4, #0]
 8008ece:	1d18      	adds	r0, r3, #4
 8008ed0:	6010      	str	r0, [r2, #0]
 8008ed2:	0628      	lsls	r0, r5, #24
 8008ed4:	d501      	bpl.n	8008eda <_printf_i+0xc2>
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	e002      	b.n	8008ee0 <_printf_i+0xc8>
 8008eda:	0668      	lsls	r0, r5, #25
 8008edc:	d5fb      	bpl.n	8008ed6 <_printf_i+0xbe>
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	4854      	ldr	r0, [pc, #336]	; (8009034 <_printf_i+0x21c>)
 8008ee2:	296f      	cmp	r1, #111	; 0x6f
 8008ee4:	bf14      	ite	ne
 8008ee6:	220a      	movne	r2, #10
 8008ee8:	2208      	moveq	r2, #8
 8008eea:	2100      	movs	r1, #0
 8008eec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ef0:	6865      	ldr	r5, [r4, #4]
 8008ef2:	60a5      	str	r5, [r4, #8]
 8008ef4:	2d00      	cmp	r5, #0
 8008ef6:	f2c0 8095 	blt.w	8009024 <_printf_i+0x20c>
 8008efa:	6821      	ldr	r1, [r4, #0]
 8008efc:	f021 0104 	bic.w	r1, r1, #4
 8008f00:	6021      	str	r1, [r4, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d13d      	bne.n	8008f82 <_printf_i+0x16a>
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	f040 808e 	bne.w	8009028 <_printf_i+0x210>
 8008f0c:	4665      	mov	r5, ip
 8008f0e:	2a08      	cmp	r2, #8
 8008f10:	d10b      	bne.n	8008f2a <_printf_i+0x112>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	07db      	lsls	r3, r3, #31
 8008f16:	d508      	bpl.n	8008f2a <_printf_i+0x112>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	6862      	ldr	r2, [r4, #4]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	bfde      	ittt	le
 8008f20:	2330      	movle	r3, #48	; 0x30
 8008f22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f2a:	ebac 0305 	sub.w	r3, ip, r5
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	f8cd 8000 	str.w	r8, [sp]
 8008f34:	463b      	mov	r3, r7
 8008f36:	aa03      	add	r2, sp, #12
 8008f38:	4621      	mov	r1, r4
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7ff fef6 	bl	8008d2c <_printf_common>
 8008f40:	3001      	adds	r0, #1
 8008f42:	d14d      	bne.n	8008fe0 <_printf_i+0x1c8>
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	b005      	add	sp, #20
 8008f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f4e:	4839      	ldr	r0, [pc, #228]	; (8009034 <_printf_i+0x21c>)
 8008f50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	6821      	ldr	r1, [r4, #0]
 8008f58:	1d1d      	adds	r5, r3, #4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6015      	str	r5, [r2, #0]
 8008f5e:	060a      	lsls	r2, r1, #24
 8008f60:	d50b      	bpl.n	8008f7a <_printf_i+0x162>
 8008f62:	07ca      	lsls	r2, r1, #31
 8008f64:	bf44      	itt	mi
 8008f66:	f041 0120 	orrmi.w	r1, r1, #32
 8008f6a:	6021      	strmi	r1, [r4, #0]
 8008f6c:	b91b      	cbnz	r3, 8008f76 <_printf_i+0x15e>
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	f022 0220 	bic.w	r2, r2, #32
 8008f74:	6022      	str	r2, [r4, #0]
 8008f76:	2210      	movs	r2, #16
 8008f78:	e7b7      	b.n	8008eea <_printf_i+0xd2>
 8008f7a:	064d      	lsls	r5, r1, #25
 8008f7c:	bf48      	it	mi
 8008f7e:	b29b      	uxthmi	r3, r3
 8008f80:	e7ef      	b.n	8008f62 <_printf_i+0x14a>
 8008f82:	4665      	mov	r5, ip
 8008f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f88:	fb02 3311 	mls	r3, r2, r1, r3
 8008f8c:	5cc3      	ldrb	r3, [r0, r3]
 8008f8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f92:	460b      	mov	r3, r1
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d1f5      	bne.n	8008f84 <_printf_i+0x16c>
 8008f98:	e7b9      	b.n	8008f0e <_printf_i+0xf6>
 8008f9a:	6813      	ldr	r3, [r2, #0]
 8008f9c:	6825      	ldr	r5, [r4, #0]
 8008f9e:	6961      	ldr	r1, [r4, #20]
 8008fa0:	1d18      	adds	r0, r3, #4
 8008fa2:	6010      	str	r0, [r2, #0]
 8008fa4:	0628      	lsls	r0, r5, #24
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	d501      	bpl.n	8008fae <_printf_i+0x196>
 8008faa:	6019      	str	r1, [r3, #0]
 8008fac:	e002      	b.n	8008fb4 <_printf_i+0x19c>
 8008fae:	066a      	lsls	r2, r5, #25
 8008fb0:	d5fb      	bpl.n	8008faa <_printf_i+0x192>
 8008fb2:	8019      	strh	r1, [r3, #0]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	4665      	mov	r5, ip
 8008fba:	e7b9      	b.n	8008f30 <_printf_i+0x118>
 8008fbc:	6813      	ldr	r3, [r2, #0]
 8008fbe:	1d19      	adds	r1, r3, #4
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	681d      	ldr	r5, [r3, #0]
 8008fc4:	6862      	ldr	r2, [r4, #4]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f7f7 f921 	bl	8000210 <memchr>
 8008fce:	b108      	cbz	r0, 8008fd4 <_printf_i+0x1bc>
 8008fd0:	1b40      	subs	r0, r0, r5
 8008fd2:	6060      	str	r0, [r4, #4]
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	6123      	str	r3, [r4, #16]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fde:	e7a7      	b.n	8008f30 <_printf_i+0x118>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	47c0      	blx	r8
 8008fea:	3001      	adds	r0, #1
 8008fec:	d0aa      	beq.n	8008f44 <_printf_i+0x12c>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	079b      	lsls	r3, r3, #30
 8008ff2:	d413      	bmi.n	800901c <_printf_i+0x204>
 8008ff4:	68e0      	ldr	r0, [r4, #12]
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	4298      	cmp	r0, r3
 8008ffa:	bfb8      	it	lt
 8008ffc:	4618      	movlt	r0, r3
 8008ffe:	e7a3      	b.n	8008f48 <_printf_i+0x130>
 8009000:	2301      	movs	r3, #1
 8009002:	464a      	mov	r2, r9
 8009004:	4639      	mov	r1, r7
 8009006:	4630      	mov	r0, r6
 8009008:	47c0      	blx	r8
 800900a:	3001      	adds	r0, #1
 800900c:	d09a      	beq.n	8008f44 <_printf_i+0x12c>
 800900e:	3501      	adds	r5, #1
 8009010:	68e3      	ldr	r3, [r4, #12]
 8009012:	9a03      	ldr	r2, [sp, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	42ab      	cmp	r3, r5
 8009018:	dcf2      	bgt.n	8009000 <_printf_i+0x1e8>
 800901a:	e7eb      	b.n	8008ff4 <_printf_i+0x1dc>
 800901c:	2500      	movs	r5, #0
 800901e:	f104 0919 	add.w	r9, r4, #25
 8009022:	e7f5      	b.n	8009010 <_printf_i+0x1f8>
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1ac      	bne.n	8008f82 <_printf_i+0x16a>
 8009028:	7803      	ldrb	r3, [r0, #0]
 800902a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800902e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009032:	e76c      	b.n	8008f0e <_printf_i+0xf6>
 8009034:	0801cfc9 	.word	0x0801cfc9
 8009038:	0801cfda 	.word	0x0801cfda

0800903c <_sbrk_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4c06      	ldr	r4, [pc, #24]	; (8009058 <_sbrk_r+0x1c>)
 8009040:	2300      	movs	r3, #0
 8009042:	4605      	mov	r5, r0
 8009044:	4608      	mov	r0, r1
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	f7ff fa12 	bl	8008470 <_sbrk>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_sbrk_r+0x1a>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	b103      	cbz	r3, 8009056 <_sbrk_r+0x1a>
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20000550 	.word	0x20000550

0800905c <memcpy>:
 800905c:	b510      	push	{r4, lr}
 800905e:	1e43      	subs	r3, r0, #1
 8009060:	440a      	add	r2, r1
 8009062:	4291      	cmp	r1, r2
 8009064:	d100      	bne.n	8009068 <memcpy+0xc>
 8009066:	bd10      	pop	{r4, pc}
 8009068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800906c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009070:	e7f7      	b.n	8009062 <memcpy+0x6>

08009072 <memmove>:
 8009072:	4288      	cmp	r0, r1
 8009074:	b510      	push	{r4, lr}
 8009076:	eb01 0302 	add.w	r3, r1, r2
 800907a:	d807      	bhi.n	800908c <memmove+0x1a>
 800907c:	1e42      	subs	r2, r0, #1
 800907e:	4299      	cmp	r1, r3
 8009080:	d00a      	beq.n	8009098 <memmove+0x26>
 8009082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009086:	f802 4f01 	strb.w	r4, [r2, #1]!
 800908a:	e7f8      	b.n	800907e <memmove+0xc>
 800908c:	4283      	cmp	r3, r0
 800908e:	d9f5      	bls.n	800907c <memmove+0xa>
 8009090:	1881      	adds	r1, r0, r2
 8009092:	1ad2      	subs	r2, r2, r3
 8009094:	42d3      	cmn	r3, r2
 8009096:	d100      	bne.n	800909a <memmove+0x28>
 8009098:	bd10      	pop	{r4, pc}
 800909a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800909e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80090a2:	e7f7      	b.n	8009094 <memmove+0x22>

080090a4 <__malloc_lock>:
 80090a4:	4770      	bx	lr

080090a6 <__malloc_unlock>:
 80090a6:	4770      	bx	lr

080090a8 <_free_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4605      	mov	r5, r0
 80090ac:	2900      	cmp	r1, #0
 80090ae:	d045      	beq.n	800913c <_free_r+0x94>
 80090b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b4:	1f0c      	subs	r4, r1, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfb8      	it	lt
 80090ba:	18e4      	addlt	r4, r4, r3
 80090bc:	f7ff fff2 	bl	80090a4 <__malloc_lock>
 80090c0:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <_free_r+0x98>)
 80090c2:	6813      	ldr	r3, [r2, #0]
 80090c4:	4610      	mov	r0, r2
 80090c6:	b933      	cbnz	r3, 80090d6 <_free_r+0x2e>
 80090c8:	6063      	str	r3, [r4, #4]
 80090ca:	6014      	str	r4, [r2, #0]
 80090cc:	4628      	mov	r0, r5
 80090ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d2:	f7ff bfe8 	b.w	80090a6 <__malloc_unlock>
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	d90c      	bls.n	80090f4 <_free_r+0x4c>
 80090da:	6821      	ldr	r1, [r4, #0]
 80090dc:	1862      	adds	r2, r4, r1
 80090de:	4293      	cmp	r3, r2
 80090e0:	bf04      	itt	eq
 80090e2:	681a      	ldreq	r2, [r3, #0]
 80090e4:	685b      	ldreq	r3, [r3, #4]
 80090e6:	6063      	str	r3, [r4, #4]
 80090e8:	bf04      	itt	eq
 80090ea:	1852      	addeq	r2, r2, r1
 80090ec:	6022      	streq	r2, [r4, #0]
 80090ee:	6004      	str	r4, [r0, #0]
 80090f0:	e7ec      	b.n	80090cc <_free_r+0x24>
 80090f2:	4613      	mov	r3, r2
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	b10a      	cbz	r2, 80090fc <_free_r+0x54>
 80090f8:	42a2      	cmp	r2, r4
 80090fa:	d9fa      	bls.n	80090f2 <_free_r+0x4a>
 80090fc:	6819      	ldr	r1, [r3, #0]
 80090fe:	1858      	adds	r0, r3, r1
 8009100:	42a0      	cmp	r0, r4
 8009102:	d10b      	bne.n	800911c <_free_r+0x74>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	4401      	add	r1, r0
 8009108:	1858      	adds	r0, r3, r1
 800910a:	4282      	cmp	r2, r0
 800910c:	6019      	str	r1, [r3, #0]
 800910e:	d1dd      	bne.n	80090cc <_free_r+0x24>
 8009110:	6810      	ldr	r0, [r2, #0]
 8009112:	6852      	ldr	r2, [r2, #4]
 8009114:	605a      	str	r2, [r3, #4]
 8009116:	4401      	add	r1, r0
 8009118:	6019      	str	r1, [r3, #0]
 800911a:	e7d7      	b.n	80090cc <_free_r+0x24>
 800911c:	d902      	bls.n	8009124 <_free_r+0x7c>
 800911e:	230c      	movs	r3, #12
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	e7d3      	b.n	80090cc <_free_r+0x24>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	1821      	adds	r1, r4, r0
 8009128:	428a      	cmp	r2, r1
 800912a:	bf04      	itt	eq
 800912c:	6811      	ldreq	r1, [r2, #0]
 800912e:	6852      	ldreq	r2, [r2, #4]
 8009130:	6062      	str	r2, [r4, #4]
 8009132:	bf04      	itt	eq
 8009134:	1809      	addeq	r1, r1, r0
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	605c      	str	r4, [r3, #4]
 800913a:	e7c7      	b.n	80090cc <_free_r+0x24>
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	200001fc 	.word	0x200001fc

08009144 <_realloc_r>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	4607      	mov	r7, r0
 8009148:	4614      	mov	r4, r2
 800914a:	460e      	mov	r6, r1
 800914c:	b921      	cbnz	r1, 8009158 <_realloc_r+0x14>
 800914e:	4611      	mov	r1, r2
 8009150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009154:	f7ff bc3e 	b.w	80089d4 <_malloc_r>
 8009158:	b922      	cbnz	r2, 8009164 <_realloc_r+0x20>
 800915a:	f7ff ffa5 	bl	80090a8 <_free_r>
 800915e:	4625      	mov	r5, r4
 8009160:	4628      	mov	r0, r5
 8009162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009164:	f000 f814 	bl	8009190 <_malloc_usable_size_r>
 8009168:	42a0      	cmp	r0, r4
 800916a:	d20f      	bcs.n	800918c <_realloc_r+0x48>
 800916c:	4621      	mov	r1, r4
 800916e:	4638      	mov	r0, r7
 8009170:	f7ff fc30 	bl	80089d4 <_malloc_r>
 8009174:	4605      	mov	r5, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	d0f2      	beq.n	8009160 <_realloc_r+0x1c>
 800917a:	4631      	mov	r1, r6
 800917c:	4622      	mov	r2, r4
 800917e:	f7ff ff6d 	bl	800905c <memcpy>
 8009182:	4631      	mov	r1, r6
 8009184:	4638      	mov	r0, r7
 8009186:	f7ff ff8f 	bl	80090a8 <_free_r>
 800918a:	e7e9      	b.n	8009160 <_realloc_r+0x1c>
 800918c:	4635      	mov	r5, r6
 800918e:	e7e7      	b.n	8009160 <_realloc_r+0x1c>

08009190 <_malloc_usable_size_r>:
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f18      	subs	r0, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfbc      	itt	lt
 800919a:	580b      	ldrlt	r3, [r1, r0]
 800919c:	18c0      	addlt	r0, r0, r3
 800919e:	4770      	bx	lr

080091a0 <fmod>:
 80091a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091a4:	ed2d 8b02 	vpush	{d8}
 80091a8:	b08b      	sub	sp, #44	; 0x2c
 80091aa:	ec55 4b10 	vmov	r4, r5, d0
 80091ae:	ec57 6b11 	vmov	r6, r7, d1
 80091b2:	f000 f8b5 	bl	8009320 <__ieee754_fmod>
 80091b6:	4b2a      	ldr	r3, [pc, #168]	; (8009260 <fmod+0xc0>)
 80091b8:	eeb0 8a40 	vmov.f32	s16, s0
 80091bc:	eef0 8a60 	vmov.f32	s17, s1
 80091c0:	f993 8000 	ldrsb.w	r8, [r3]
 80091c4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80091c8:	d030      	beq.n	800922c <fmod+0x8c>
 80091ca:	4632      	mov	r2, r6
 80091cc:	463b      	mov	r3, r7
 80091ce:	4630      	mov	r0, r6
 80091d0:	4639      	mov	r1, r7
 80091d2:	f7f7 fcc3 	bl	8000b5c <__aeabi_dcmpun>
 80091d6:	bb48      	cbnz	r0, 800922c <fmod+0x8c>
 80091d8:	4622      	mov	r2, r4
 80091da:	462b      	mov	r3, r5
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f7 fcbc 	bl	8000b5c <__aeabi_dcmpun>
 80091e4:	4681      	mov	r9, r0
 80091e6:	bb08      	cbnz	r0, 800922c <fmod+0x8c>
 80091e8:	2200      	movs	r2, #0
 80091ea:	2300      	movs	r3, #0
 80091ec:	4630      	mov	r0, r6
 80091ee:	4639      	mov	r1, r7
 80091f0:	f7f7 fc82 	bl	8000af8 <__aeabi_dcmpeq>
 80091f4:	b1d0      	cbz	r0, 800922c <fmod+0x8c>
 80091f6:	2301      	movs	r3, #1
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <fmod+0xc4>)
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009202:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009206:	f8cd 9020 	str.w	r9, [sp, #32]
 800920a:	f1b8 0f00 	cmp.w	r8, #0
 800920e:	d116      	bne.n	800923e <fmod+0x9e>
 8009210:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009214:	4668      	mov	r0, sp
 8009216:	f000 fa1d 	bl	8009654 <matherr>
 800921a:	b1d8      	cbz	r0, 8009254 <fmod+0xb4>
 800921c:	9b08      	ldr	r3, [sp, #32]
 800921e:	b11b      	cbz	r3, 8009228 <fmod+0x88>
 8009220:	f7ff fb86 	bl	8008930 <__errno>
 8009224:	9b08      	ldr	r3, [sp, #32]
 8009226:	6003      	str	r3, [r0, #0]
 8009228:	ed9d 8b06 	vldr	d8, [sp, #24]
 800922c:	eeb0 0a48 	vmov.f32	s0, s16
 8009230:	eef0 0a68 	vmov.f32	s1, s17
 8009234:	b00b      	add	sp, #44	; 0x2c
 8009236:	ecbd 8b02 	vpop	{d8}
 800923a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800923e:	2200      	movs	r2, #0
 8009240:	2300      	movs	r3, #0
 8009242:	4610      	mov	r0, r2
 8009244:	4619      	mov	r1, r3
 8009246:	f7f7 fb19 	bl	800087c <__aeabi_ddiv>
 800924a:	f1b8 0f02 	cmp.w	r8, #2
 800924e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009252:	d1df      	bne.n	8009214 <fmod+0x74>
 8009254:	f7ff fb6c 	bl	8008930 <__errno>
 8009258:	2321      	movs	r3, #33	; 0x21
 800925a:	6003      	str	r3, [r0, #0]
 800925c:	e7de      	b.n	800921c <fmod+0x7c>
 800925e:	bf00      	nop
 8009260:	200000a8 	.word	0x200000a8
 8009264:	0801cfeb 	.word	0x0801cfeb

08009268 <fmodf>:
 8009268:	b5d0      	push	{r4, r6, r7, lr}
 800926a:	ed2d 8b02 	vpush	{d8}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	eef0 8a40 	vmov.f32	s17, s0
 8009274:	eeb0 8a60 	vmov.f32	s16, s1
 8009278:	f000 f964 	bl	8009544 <__ieee754_fmodf>
 800927c:	4b26      	ldr	r3, [pc, #152]	; (8009318 <fmodf+0xb0>)
 800927e:	f993 4000 	ldrsb.w	r4, [r3]
 8009282:	1c63      	adds	r3, r4, #1
 8009284:	d035      	beq.n	80092f2 <fmodf+0x8a>
 8009286:	eeb4 8a48 	vcmp.f32	s16, s16
 800928a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928e:	d630      	bvs.n	80092f2 <fmodf+0x8a>
 8009290:	eef4 8a68 	vcmp.f32	s17, s17
 8009294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009298:	d62b      	bvs.n	80092f2 <fmodf+0x8a>
 800929a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800929e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a2:	d126      	bne.n	80092f2 <fmodf+0x8a>
 80092a4:	2301      	movs	r3, #1
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4b1c      	ldr	r3, [pc, #112]	; (800931c <fmodf+0xb4>)
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	ee18 0a90 	vmov	r0, s17
 80092b0:	2300      	movs	r3, #0
 80092b2:	9308      	str	r3, [sp, #32]
 80092b4:	f7f7 f960 	bl	8000578 <__aeabi_f2d>
 80092b8:	4606      	mov	r6, r0
 80092ba:	460f      	mov	r7, r1
 80092bc:	ee18 0a10 	vmov	r0, s16
 80092c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80092c4:	f7f7 f958 	bl	8000578 <__aeabi_f2d>
 80092c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092cc:	b9ac      	cbnz	r4, 80092fa <fmodf+0x92>
 80092ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80092d2:	4668      	mov	r0, sp
 80092d4:	f000 f9be 	bl	8009654 <matherr>
 80092d8:	b1c8      	cbz	r0, 800930e <fmodf+0xa6>
 80092da:	9b08      	ldr	r3, [sp, #32]
 80092dc:	b11b      	cbz	r3, 80092e6 <fmodf+0x7e>
 80092de:	f7ff fb27 	bl	8008930 <__errno>
 80092e2:	9b08      	ldr	r3, [sp, #32]
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ea:	f7f7 fc4d 	bl	8000b88 <__aeabi_d2f>
 80092ee:	ee00 0a10 	vmov	s0, r0
 80092f2:	b00a      	add	sp, #40	; 0x28
 80092f4:	ecbd 8b02 	vpop	{d8}
 80092f8:	bdd0      	pop	{r4, r6, r7, pc}
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	4610      	mov	r0, r2
 8009300:	4619      	mov	r1, r3
 8009302:	f7f7 fabb 	bl	800087c <__aeabi_ddiv>
 8009306:	2c02      	cmp	r4, #2
 8009308:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800930c:	d1e1      	bne.n	80092d2 <fmodf+0x6a>
 800930e:	f7ff fb0f 	bl	8008930 <__errno>
 8009312:	2321      	movs	r3, #33	; 0x21
 8009314:	6003      	str	r3, [r0, #0]
 8009316:	e7e0      	b.n	80092da <fmodf+0x72>
 8009318:	200000a8 	.word	0x200000a8
 800931c:	0801cff0 	.word	0x0801cff0

08009320 <__ieee754_fmod>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	ec53 2b11 	vmov	r2, r3, d1
 8009328:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800932c:	ea5e 0402 	orrs.w	r4, lr, r2
 8009330:	ec51 0b10 	vmov	r0, r1, d0
 8009334:	461e      	mov	r6, r3
 8009336:	ee11 5a10 	vmov	r5, s2
 800933a:	4694      	mov	ip, r2
 800933c:	d00c      	beq.n	8009358 <__ieee754_fmod+0x38>
 800933e:	4c7a      	ldr	r4, [pc, #488]	; (8009528 <__ieee754_fmod+0x208>)
 8009340:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009344:	45a0      	cmp	r8, r4
 8009346:	4689      	mov	r9, r1
 8009348:	dc06      	bgt.n	8009358 <__ieee754_fmod+0x38>
 800934a:	4254      	negs	r4, r2
 800934c:	4314      	orrs	r4, r2
 800934e:	4f77      	ldr	r7, [pc, #476]	; (800952c <__ieee754_fmod+0x20c>)
 8009350:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009354:	42bc      	cmp	r4, r7
 8009356:	d909      	bls.n	800936c <__ieee754_fmod+0x4c>
 8009358:	f7f7 f966 	bl	8000628 <__aeabi_dmul>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	f7f7 fa8c 	bl	800087c <__aeabi_ddiv>
 8009364:	ec41 0b10 	vmov	d0, r0, r1
 8009368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936c:	45f0      	cmp	r8, lr
 800936e:	ee10 2a10 	vmov	r2, s0
 8009372:	4607      	mov	r7, r0
 8009374:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8009378:	dc0a      	bgt.n	8009390 <__ieee754_fmod+0x70>
 800937a:	dbf3      	blt.n	8009364 <__ieee754_fmod+0x44>
 800937c:	42a8      	cmp	r0, r5
 800937e:	d3f1      	bcc.n	8009364 <__ieee754_fmod+0x44>
 8009380:	d106      	bne.n	8009390 <__ieee754_fmod+0x70>
 8009382:	496b      	ldr	r1, [pc, #428]	; (8009530 <__ieee754_fmod+0x210>)
 8009384:	0fe4      	lsrs	r4, r4, #31
 8009386:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800938a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800938e:	e7e9      	b.n	8009364 <__ieee754_fmod+0x44>
 8009390:	4b68      	ldr	r3, [pc, #416]	; (8009534 <__ieee754_fmod+0x214>)
 8009392:	4598      	cmp	r8, r3
 8009394:	dc49      	bgt.n	800942a <__ieee754_fmod+0x10a>
 8009396:	f1b8 0f00 	cmp.w	r8, #0
 800939a:	d13d      	bne.n	8009418 <__ieee754_fmod+0xf8>
 800939c:	4866      	ldr	r0, [pc, #408]	; (8009538 <__ieee754_fmod+0x218>)
 800939e:	4611      	mov	r1, r2
 80093a0:	2900      	cmp	r1, #0
 80093a2:	dc36      	bgt.n	8009412 <__ieee754_fmod+0xf2>
 80093a4:	459e      	cmp	lr, r3
 80093a6:	dc51      	bgt.n	800944c <__ieee754_fmod+0x12c>
 80093a8:	f1be 0f00 	cmp.w	lr, #0
 80093ac:	d145      	bne.n	800943a <__ieee754_fmod+0x11a>
 80093ae:	4b62      	ldr	r3, [pc, #392]	; (8009538 <__ieee754_fmod+0x218>)
 80093b0:	4629      	mov	r1, r5
 80093b2:	2900      	cmp	r1, #0
 80093b4:	dc3e      	bgt.n	8009434 <__ieee754_fmod+0x114>
 80093b6:	4961      	ldr	r1, [pc, #388]	; (800953c <__ieee754_fmod+0x21c>)
 80093b8:	4288      	cmp	r0, r1
 80093ba:	db4c      	blt.n	8009456 <__ieee754_fmod+0x136>
 80093bc:	f3c9 0113 	ubfx	r1, r9, #0, #20
 80093c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80093c4:	4a5d      	ldr	r2, [pc, #372]	; (800953c <__ieee754_fmod+0x21c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	db59      	blt.n	800947e <__ieee754_fmod+0x15e>
 80093ca:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80093ce:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80093d2:	1ac0      	subs	r0, r0, r3
 80093d4:	1b8a      	subs	r2, r1, r6
 80093d6:	eba7 050c 	sub.w	r5, r7, ip
 80093da:	2800      	cmp	r0, #0
 80093dc:	d166      	bne.n	80094ac <__ieee754_fmod+0x18c>
 80093de:	4567      	cmp	r7, ip
 80093e0:	bf38      	it	cc
 80093e2:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	bfbc      	itt	lt
 80093ea:	463d      	movlt	r5, r7
 80093ec:	460a      	movlt	r2, r1
 80093ee:	ea52 0105 	orrs.w	r1, r2, r5
 80093f2:	d0c6      	beq.n	8009382 <__ieee754_fmod+0x62>
 80093f4:	494f      	ldr	r1, [pc, #316]	; (8009534 <__ieee754_fmod+0x214>)
 80093f6:	428a      	cmp	r2, r1
 80093f8:	dd6d      	ble.n	80094d6 <__ieee754_fmod+0x1b6>
 80093fa:	4950      	ldr	r1, [pc, #320]	; (800953c <__ieee754_fmod+0x21c>)
 80093fc:	428b      	cmp	r3, r1
 80093fe:	db70      	blt.n	80094e2 <__ieee754_fmod+0x1c2>
 8009400:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8009404:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009408:	4314      	orrs	r4, r2
 800940a:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800940e:	4628      	mov	r0, r5
 8009410:	e7a8      	b.n	8009364 <__ieee754_fmod+0x44>
 8009412:	3801      	subs	r0, #1
 8009414:	0049      	lsls	r1, r1, #1
 8009416:	e7c3      	b.n	80093a0 <__ieee754_fmod+0x80>
 8009418:	4848      	ldr	r0, [pc, #288]	; (800953c <__ieee754_fmod+0x21c>)
 800941a:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800941e:	0049      	lsls	r1, r1, #1
 8009420:	2900      	cmp	r1, #0
 8009422:	f100 30ff 	add.w	r0, r0, #4294967295
 8009426:	dcfa      	bgt.n	800941e <__ieee754_fmod+0xfe>
 8009428:	e7bc      	b.n	80093a4 <__ieee754_fmod+0x84>
 800942a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800942e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009432:	e7b7      	b.n	80093a4 <__ieee754_fmod+0x84>
 8009434:	3b01      	subs	r3, #1
 8009436:	0049      	lsls	r1, r1, #1
 8009438:	e7bb      	b.n	80093b2 <__ieee754_fmod+0x92>
 800943a:	4b40      	ldr	r3, [pc, #256]	; (800953c <__ieee754_fmod+0x21c>)
 800943c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8009440:	0049      	lsls	r1, r1, #1
 8009442:	2900      	cmp	r1, #0
 8009444:	f103 33ff 	add.w	r3, r3, #4294967295
 8009448:	dcfa      	bgt.n	8009440 <__ieee754_fmod+0x120>
 800944a:	e7b4      	b.n	80093b6 <__ieee754_fmod+0x96>
 800944c:	ea4f 532e 	mov.w	r3, lr, asr #20
 8009450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009454:	e7af      	b.n	80093b6 <__ieee754_fmod+0x96>
 8009456:	1a0f      	subs	r7, r1, r0
 8009458:	2f1f      	cmp	r7, #31
 800945a:	dc0a      	bgt.n	8009472 <__ieee754_fmod+0x152>
 800945c:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009460:	fa08 f807 	lsl.w	r8, r8, r7
 8009464:	fa22 f101 	lsr.w	r1, r2, r1
 8009468:	ea41 0108 	orr.w	r1, r1, r8
 800946c:	fa02 f707 	lsl.w	r7, r2, r7
 8009470:	e7a8      	b.n	80093c4 <__ieee754_fmod+0xa4>
 8009472:	4933      	ldr	r1, [pc, #204]	; (8009540 <__ieee754_fmod+0x220>)
 8009474:	1a09      	subs	r1, r1, r0
 8009476:	fa02 f101 	lsl.w	r1, r2, r1
 800947a:	2700      	movs	r7, #0
 800947c:	e7a2      	b.n	80093c4 <__ieee754_fmod+0xa4>
 800947e:	eba2 0c03 	sub.w	ip, r2, r3
 8009482:	f1bc 0f1f 	cmp.w	ip, #31
 8009486:	dc0a      	bgt.n	800949e <__ieee754_fmod+0x17e>
 8009488:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800948c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009490:	fa25 f606 	lsr.w	r6, r5, r6
 8009494:	ea46 060e 	orr.w	r6, r6, lr
 8009498:	fa05 fc0c 	lsl.w	ip, r5, ip
 800949c:	e799      	b.n	80093d2 <__ieee754_fmod+0xb2>
 800949e:	4e28      	ldr	r6, [pc, #160]	; (8009540 <__ieee754_fmod+0x220>)
 80094a0:	1af6      	subs	r6, r6, r3
 80094a2:	fa05 f606 	lsl.w	r6, r5, r6
 80094a6:	f04f 0c00 	mov.w	ip, #0
 80094aa:	e792      	b.n	80093d2 <__ieee754_fmod+0xb2>
 80094ac:	4567      	cmp	r7, ip
 80094ae:	bf38      	it	cc
 80094b0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	da05      	bge.n	80094c4 <__ieee754_fmod+0x1a4>
 80094b8:	0ffa      	lsrs	r2, r7, #31
 80094ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80094be:	007f      	lsls	r7, r7, #1
 80094c0:	3801      	subs	r0, #1
 80094c2:	e787      	b.n	80093d4 <__ieee754_fmod+0xb4>
 80094c4:	ea52 0105 	orrs.w	r1, r2, r5
 80094c8:	f43f af5b 	beq.w	8009382 <__ieee754_fmod+0x62>
 80094cc:	0fe9      	lsrs	r1, r5, #31
 80094ce:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80094d2:	006f      	lsls	r7, r5, #1
 80094d4:	e7f4      	b.n	80094c0 <__ieee754_fmod+0x1a0>
 80094d6:	0fe8      	lsrs	r0, r5, #31
 80094d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80094dc:	006d      	lsls	r5, r5, #1
 80094de:	3b01      	subs	r3, #1
 80094e0:	e789      	b.n	80093f6 <__ieee754_fmod+0xd6>
 80094e2:	1ac9      	subs	r1, r1, r3
 80094e4:	2914      	cmp	r1, #20
 80094e6:	dc0a      	bgt.n	80094fe <__ieee754_fmod+0x1de>
 80094e8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80094ec:	fa02 f303 	lsl.w	r3, r2, r3
 80094f0:	40cd      	lsrs	r5, r1
 80094f2:	432b      	orrs	r3, r5
 80094f4:	410a      	asrs	r2, r1
 80094f6:	ea42 0104 	orr.w	r1, r2, r4
 80094fa:	4618      	mov	r0, r3
 80094fc:	e732      	b.n	8009364 <__ieee754_fmod+0x44>
 80094fe:	291f      	cmp	r1, #31
 8009500:	dc07      	bgt.n	8009512 <__ieee754_fmod+0x1f2>
 8009502:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009506:	40cd      	lsrs	r5, r1
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	432b      	orrs	r3, r5
 800950e:	4622      	mov	r2, r4
 8009510:	e7f1      	b.n	80094f6 <__ieee754_fmod+0x1d6>
 8009512:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009516:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800951a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800951e:	33e2      	adds	r3, #226	; 0xe2
 8009520:	fa42 f303 	asr.w	r3, r2, r3
 8009524:	e7f3      	b.n	800950e <__ieee754_fmod+0x1ee>
 8009526:	bf00      	nop
 8009528:	7fefffff 	.word	0x7fefffff
 800952c:	7ff00000 	.word	0x7ff00000
 8009530:	0801cff8 	.word	0x0801cff8
 8009534:	000fffff 	.word	0x000fffff
 8009538:	fffffbed 	.word	0xfffffbed
 800953c:	fffffc02 	.word	0xfffffc02
 8009540:	fffffbe2 	.word	0xfffffbe2

08009544 <__ieee754_fmodf>:
 8009544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009546:	ee10 6a90 	vmov	r6, s1
 800954a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800954e:	ee10 3a10 	vmov	r3, s0
 8009552:	d009      	beq.n	8009568 <__ieee754_fmodf+0x24>
 8009554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009558:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800955c:	ee10 7a10 	vmov	r7, s0
 8009560:	da02      	bge.n	8009568 <__ieee754_fmodf+0x24>
 8009562:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009566:	dd0a      	ble.n	800957e <__ieee754_fmodf+0x3a>
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009570:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009574:	ee17 3a90 	vmov	r3, s15
 8009578:	ee00 3a10 	vmov	s0, r3
 800957c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800957e:	42a9      	cmp	r1, r5
 8009580:	dbfa      	blt.n	8009578 <__ieee754_fmodf+0x34>
 8009582:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009586:	d105      	bne.n	8009594 <__ieee754_fmodf+0x50>
 8009588:	4a30      	ldr	r2, [pc, #192]	; (800964c <__ieee754_fmodf+0x108>)
 800958a:	0fe3      	lsrs	r3, r4, #31
 800958c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	e7f1      	b.n	8009578 <__ieee754_fmodf+0x34>
 8009594:	4b2e      	ldr	r3, [pc, #184]	; (8009650 <__ieee754_fmodf+0x10c>)
 8009596:	4299      	cmp	r1, r3
 8009598:	dc3e      	bgt.n	8009618 <__ieee754_fmodf+0xd4>
 800959a:	020a      	lsls	r2, r1, #8
 800959c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	dc36      	bgt.n	8009612 <__ieee754_fmodf+0xce>
 80095a4:	429d      	cmp	r5, r3
 80095a6:	dc3a      	bgt.n	800961e <__ieee754_fmodf+0xda>
 80095a8:	022b      	lsls	r3, r5, #8
 80095aa:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	f102 32ff 	add.w	r2, r2, #4294967295
 80095b4:	d5fb      	bpl.n	80095ae <__ieee754_fmodf+0x6a>
 80095b6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80095ba:	bfbb      	ittet	lt
 80095bc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80095c0:	1a1b      	sublt	r3, r3, r0
 80095c2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80095c6:	4099      	lsllt	r1, r3
 80095c8:	bfa8      	it	ge
 80095ca:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80095ce:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80095d2:	bfb5      	itete	lt
 80095d4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80095d8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80095dc:	1a9b      	sublt	r3, r3, r2
 80095de:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80095e2:	bfb8      	it	lt
 80095e4:	409d      	lsllt	r5, r3
 80095e6:	1a80      	subs	r0, r0, r2
 80095e8:	1b4b      	subs	r3, r1, r5
 80095ea:	b9d8      	cbnz	r0, 8009624 <__ieee754_fmodf+0xe0>
 80095ec:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80095f0:	bf28      	it	cs
 80095f2:	460b      	movcs	r3, r1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0c7      	beq.n	8009588 <__ieee754_fmodf+0x44>
 80095f8:	4915      	ldr	r1, [pc, #84]	; (8009650 <__ieee754_fmodf+0x10c>)
 80095fa:	428b      	cmp	r3, r1
 80095fc:	dd1a      	ble.n	8009634 <__ieee754_fmodf+0xf0>
 80095fe:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009602:	db1a      	blt.n	800963a <__ieee754_fmodf+0xf6>
 8009604:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009608:	4323      	orrs	r3, r4
 800960a:	327f      	adds	r2, #127	; 0x7f
 800960c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009610:	e7b2      	b.n	8009578 <__ieee754_fmodf+0x34>
 8009612:	3801      	subs	r0, #1
 8009614:	0052      	lsls	r2, r2, #1
 8009616:	e7c3      	b.n	80095a0 <__ieee754_fmodf+0x5c>
 8009618:	15c8      	asrs	r0, r1, #23
 800961a:	387f      	subs	r0, #127	; 0x7f
 800961c:	e7c2      	b.n	80095a4 <__ieee754_fmodf+0x60>
 800961e:	15ea      	asrs	r2, r5, #23
 8009620:	3a7f      	subs	r2, #127	; 0x7f
 8009622:	e7c8      	b.n	80095b6 <__ieee754_fmodf+0x72>
 8009624:	2b00      	cmp	r3, #0
 8009626:	da02      	bge.n	800962e <__ieee754_fmodf+0xea>
 8009628:	0049      	lsls	r1, r1, #1
 800962a:	3801      	subs	r0, #1
 800962c:	e7dc      	b.n	80095e8 <__ieee754_fmodf+0xa4>
 800962e:	d0ab      	beq.n	8009588 <__ieee754_fmodf+0x44>
 8009630:	0059      	lsls	r1, r3, #1
 8009632:	e7fa      	b.n	800962a <__ieee754_fmodf+0xe6>
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	3a01      	subs	r2, #1
 8009638:	e7df      	b.n	80095fa <__ieee754_fmodf+0xb6>
 800963a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800963e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009642:	3282      	adds	r2, #130	; 0x82
 8009644:	4113      	asrs	r3, r2
 8009646:	4323      	orrs	r3, r4
 8009648:	e796      	b.n	8009578 <__ieee754_fmodf+0x34>
 800964a:	bf00      	nop
 800964c:	0801d008 	.word	0x0801d008
 8009650:	007fffff 	.word	0x007fffff

08009654 <matherr>:
 8009654:	2000      	movs	r0, #0
 8009656:	4770      	bx	lr

08009658 <_init>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	bf00      	nop
 800965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965e:	bc08      	pop	{r3}
 8009660:	469e      	mov	lr, r3
 8009662:	4770      	bx	lr

08009664 <_fini>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr
