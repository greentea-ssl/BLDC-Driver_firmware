
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c30  0800bd28  0800bd28  0001bd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f958  0801f958  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  0801f958  0801f958  0002f958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f960  0801f960  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f960  0801f960  0002f960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f964  0801f964  0002f964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0801f968  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a078  20000204  0801fb6c  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a27c  0801fb6c  0003a27c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148ef  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f2a  00000000  00000000  00044b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00047a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00048c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009471  00000000  00000000  00049cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005a02  00000000  00000000  00053169  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00058b6b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d4c  00000000  00000000  00058be8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bd0c 	.word	0x0800bd0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0800bd0c 	.word	0x0800bd0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fe4d 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f006 fc48 	bl	8007850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fe65 	bl	8001cba <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 fe2d 	bl	8001c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000002c 	.word	0x2000002c
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20009f7c 	.word	0x20009f7c

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20009f7c 	.word	0x20009f7c

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f004 fb46 	bl	8005760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fa5a 	bl	80015bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Start_DMA+0x1e>
 8001152:	2302      	movs	r3, #2
 8001154:	e0cc      	b.n	80012f0 <HAL_ADC_Start_DMA+0x1b8>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d018      	beq.n	800119e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <HAL_ADC_Start_DMA+0x1c0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a5e      	ldr	r2, [pc, #376]	; (80012fc <HAL_ADC_Start_DMA+0x1c4>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9a      	lsrs	r2, r3, #18
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001190:	e002      	b.n	8001198 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3b01      	subs	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 80a0 	bne.w	80012ee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ec:	d106      	bne.n	80011fc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f023 0206 	bic.w	r2, r3, #6
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
 80011fa:	e002      	b.n	8001202 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_ADC_Start_DMA+0x1c8>)
 800120c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <HAL_ADC_Start_DMA+0x1cc>)
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	4a3b      	ldr	r2, [pc, #236]	; (8001308 <HAL_ADC_Start_DMA+0x1d0>)
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a3a      	ldr	r2, [pc, #232]	; (800130c <HAL_ADC_Start_DMA+0x1d4>)
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800122e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800123e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800124e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	334c      	adds	r3, #76	; 0x4c
 800125a:	4619      	mov	r1, r3
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f000 fde6 	bl	8001e30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d12a      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_ADC_Start_DMA+0x1d8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d015      	beq.n	80012a6 <HAL_ADC_Start_DMA+0x16e>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a25      	ldr	r2, [pc, #148]	; (8001314 <HAL_ADC_Start_DMA+0x1dc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d105      	bne.n	8001290 <HAL_ADC_Start_DMA+0x158>
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_ADC_Start_DMA+0x1c8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00a      	beq.n	80012a6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a20      	ldr	r2, [pc, #128]	; (8001318 <HAL_ADC_Start_DMA+0x1e0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d129      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_ADC_Start_DMA+0x1c8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d823      	bhi.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d11c      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	e013      	b.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_ADC_Start_DMA+0x1d8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d10e      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d107      	bne.n	80012ee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000002c 	.word	0x2000002c
 80012fc:	431bde83 	.word	0x431bde83
 8001300:	40012300 	.word	0x40012300
 8001304:	080017b5 	.word	0x080017b5
 8001308:	0800186f 	.word	0x0800186f
 800130c:	0800188b 	.word	0x0800188b
 8001310:	40012000 	.word	0x40012000
 8001314:	40012100 	.word	0x40012100
 8001318:	40012200 	.word	0x40012200

0800131c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1c>
 8001370:	2302      	movs	r3, #2
 8001372:	e113      	b.n	800159c <HAL_ADC_ConfigChannel+0x244>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b09      	cmp	r3, #9
 8001382:	d925      	bls.n	80013d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68d9      	ldr	r1, [r3, #12]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	3b1e      	subs	r3, #30
 800139a:	2207      	movs	r2, #7
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68d9      	ldr	r1, [r3, #12]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	4603      	mov	r3, r0
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4403      	add	r3, r0
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	409a      	lsls	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	e022      	b.n	8001416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6919      	ldr	r1, [r3, #16]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	2207      	movs	r2, #7
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	400a      	ands	r2, r1
 80013f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6919      	ldr	r1, [r3, #16]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	4603      	mov	r3, r0
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4403      	add	r3, r0
 800140c:	409a      	lsls	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b06      	cmp	r3, #6
 800141c:	d824      	bhi.n	8001468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b05      	subs	r3, #5
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b05      	subs	r3, #5
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	635a      	str	r2, [r3, #52]	; 0x34
 8001466:	e04c      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b0c      	cmp	r3, #12
 800146e:	d824      	bhi.n	80014ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b23      	subs	r3, #35	; 0x23
 8001482:	221f      	movs	r2, #31
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43da      	mvns	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	400a      	ands	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b23      	subs	r3, #35	; 0x23
 80014ac:	fa00 f203 	lsl.w	r2, r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
 80014b8:	e023      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b41      	subs	r3, #65	; 0x41
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b41      	subs	r3, #65	; 0x41
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_ADC_ConfigChannel+0x250>)
 8001504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a28      	ldr	r2, [pc, #160]	; (80015ac <HAL_ADC_ConfigChannel+0x254>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d10f      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1d8>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d10b      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_ADC_ConfigChannel+0x254>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x23a>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <HAL_ADC_ConfigChannel+0x258>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d003      	beq.n	800154c <HAL_ADC_ConfigChannel+0x1f4>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b11      	cmp	r3, #17
 800154a:	d122      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_ADC_ConfigChannel+0x258>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d111      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_ADC_ConfigChannel+0x25c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_ADC_ConfigChannel+0x260>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	0c9a      	lsrs	r2, r3, #18
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001584:	e002      	b.n	800158c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3b01      	subs	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40012300 	.word	0x40012300
 80015ac:	40012000 	.word	0x40012000
 80015b0:	10000012 	.word	0x10000012
 80015b4:	2000002c 	.word	0x2000002c
 80015b8:	431bde83 	.word	0x431bde83

080015bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c4:	4b79      	ldr	r3, [pc, #484]	; (80017ac <ADC_Init+0x1f0>)
 80015c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	431a      	orrs	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	021a      	lsls	r2, r3, #8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6899      	ldr	r1, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <ADC_Init+0x1f4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d022      	beq.n	800169a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6899      	ldr	r1, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	e00f      	b.n	80016ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0202 	bic.w	r2, r2, #2
 80016c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6899      	ldr	r1, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e1b      	ldrb	r3, [r3, #24]
 80016d4:	005a      	lsls	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	3b01      	subs	r3, #1
 8001714:	035a      	lsls	r2, r3, #13
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e007      	b.n	8001730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	3b01      	subs	r3, #1
 800174c:	051a      	lsls	r2, r3, #20
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6899      	ldr	r1, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001772:	025a      	lsls	r2, r3, #9
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	029a      	lsls	r2, r3, #10
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40012300 	.word	0x40012300
 80017b0:	0f000001 	.word	0x0f000001

080017b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d13c      	bne.n	8001848 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d12b      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d127      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001808:	2b00      	cmp	r3, #0
 800180a:	d119      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0220 	bic.w	r2, r2, #32
 800181a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7ff fd6b 	bl	800131c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001846:	e00e      	b.n	8001866 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fd75 	bl	8001344 <HAL_ADC_ErrorCallback>
}
 800185a:	e004      	b.n	8001866 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff fd57 	bl	8001330 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f043 0204 	orr.w	r2, r3, #4
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff fd4a 	bl	8001344 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0ed      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f004 f8b8 	bl	8005a4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0202 	bic.w	r2, r2, #2
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff fbb2 	bl	8001054 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018f2:	e012      	b.n	800191a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f4:	f7ff fbae 	bl	8001054 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d90b      	bls.n	800191a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2205      	movs	r2, #5
 8001912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0c5      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e5      	bne.n	80018f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001938:	f7ff fb8c 	bl	8001054 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193e:	e012      	b.n	8001966 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001940:	f7ff fb88 	bl	8001054 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d90b      	bls.n	8001966 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2205      	movs	r2, #5
 800195e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e09f      	b.n	8001aa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0e5      	beq.n	8001940 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e007      	b.n	800199e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e9b      	ldrb	r3, [r3, #26]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0220 	bic.w	r2, r2, #32
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7edb      	ldrb	r3, [r3, #27]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0210 	bic.w	r2, r2, #16
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e007      	b.n	8001a1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0210 	orr.w	r2, r2, #16
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0208 	orr.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e007      	b.n	8001a46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7f5b      	ldrb	r3, [r3, #29]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d108      	bne.n	8001a60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e007      	b.n	8001a70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	ea42 0103 	orr.w	r1, r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4907      	ldr	r1, [pc, #28]	; (8001b4c <__NVIC_EnableIRQ+0x38>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db0a      	blt.n	8001b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	490c      	ldr	r1, [pc, #48]	; (8001b9c <__NVIC_SetPriority+0x4c>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	440b      	add	r3, r1
 8001b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b78:	e00a      	b.n	8001b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <__NVIC_SetPriority+0x50>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3b04      	subs	r3, #4
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	761a      	strb	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f1c3 0307 	rsb	r3, r3, #7
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	bf28      	it	cs
 8001bc2:	2304      	movcs	r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d902      	bls.n	8001bd4 <NVIC_EncodePriority+0x30>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <NVIC_EncodePriority+0x32>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	4313      	orrs	r3, r2
         );
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1c:	d301      	bcc.n	8001c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00f      	b.n	8001c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <SysTick_Config+0x40>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f7ff ff8e 	bl	8001b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SysTick_Config+0x40>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SysTick_Config+0x40>)
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	e000e010 	.word	0xe000e010

08001c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff29 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c78:	f7ff ff3e 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f7ff ff8e 	bl	8001ba4 <NVIC_EncodePriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff5d 	bl	8001b50 <__NVIC_SetPriority>
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff31 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffa2 	bl	8001c0c <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff f9b8 	bl	8001054 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e099      	b.n	8001e24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d10:	e00f      	b.n	8001d32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d12:	f7ff f99f 	bl	8001054 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d908      	bls.n	8001d32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e078      	b.n	8001e24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e8      	bne.n	8001d12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_DMA_Init+0x158>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d107      	bne.n	8001d9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4313      	orrs	r3, r2
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f023 0307 	bic.w	r3, r3, #7
 8001db2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d117      	bne.n	8001df6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00e      	beq.n	8001df6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fa99 	bl	8002310 <DMA_CheckFifoParam>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001df2:	2301      	movs	r3, #1
 8001df4:	e016      	b.n	8001e24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fa50 	bl	80022a4 <DMA_CalcBaseAndBitshift>
 8001e04:	4603      	mov	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	223f      	movs	r2, #63	; 0x3f
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	f010803f 	.word	0xf010803f

08001e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_DMA_Start_IT+0x26>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e048      	b.n	8001ee8 <HAL_DMA_Start_IT+0xb8>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d137      	bne.n	8001eda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f9e2 	bl	8002248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	223f      	movs	r2, #63	; 0x3f
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0216 	orr.w	r2, r2, #22
 8001e9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0208 	orr.w	r2, r2, #8
 8001ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e005      	b.n	8001ee6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d004      	beq.n	8001f0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00c      	b.n	8001f28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2205      	movs	r2, #5
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f40:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_DMA_IRQHandler+0x258>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a92      	ldr	r2, [pc, #584]	; (8002190 <HAL_DMA_IRQHandler+0x25c>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0a9b      	lsrs	r3, r3, #10
 8001f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2208      	movs	r2, #8
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d01a      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d012      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f043 0202 	orr.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	2204      	movs	r2, #4
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d012      	beq.n	800200c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f043 0204 	orr.w	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	2210      	movs	r2, #16
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d043      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03c      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2210      	movs	r2, #16
 8002030:	409a      	lsls	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d018      	beq.n	8002076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d108      	bne.n	8002064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d024      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
 8002062:	e01f      	b.n	80020a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
 8002074:	e016      	b.n	80020a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0208 	bic.w	r2, r2, #8
 8002092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	2220      	movs	r2, #32
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 808e 	beq.w	80021d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8086 	beq.w	80021d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2220      	movs	r2, #32
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d136      	bne.n	800214c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0216 	bic.w	r2, r2, #22
 80020ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <HAL_DMA_IRQHandler+0x1da>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0208 	bic.w	r2, r2, #8
 800211c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	223f      	movs	r2, #63	; 0x3f
 8002124:	409a      	lsls	r2, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213e:	2b00      	cmp	r3, #0
 8002140:	d07d      	beq.n	800223e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
        }
        return;
 800214a:	e078      	b.n	800223e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01c      	beq.n	8002194 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d108      	bne.n	800217a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	2b00      	cmp	r3, #0
 800216e:	d030      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
 8002178:	e02b      	b.n	80021d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d027      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
 800218a:	e022      	b.n	80021d2 <HAL_DMA_IRQHandler+0x29e>
 800218c:	2000002c 	.word	0x2000002c
 8002190:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0210 	bic.w	r2, r2, #16
 80021b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d032      	beq.n	8002240 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d022      	beq.n	800222c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2205      	movs	r2, #5
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3301      	adds	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d307      	bcc.n	800221a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f2      	bne.n	80021fe <HAL_DMA_IRQHandler+0x2ca>
 8002218:	e000      	b.n	800221c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800221a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e000      	b.n	8002240 <HAL_DMA_IRQHandler+0x30c>
        return;
 800223e:	bf00      	nop
    }
  }
}
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop

08002248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d108      	bne.n	8002288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002286:	e007      	b.n	8002298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3b10      	subs	r3, #16
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <DMA_CalcBaseAndBitshift+0x64>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <DMA_CalcBaseAndBitshift+0x68>)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d909      	bls.n	80022e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	1d1a      	adds	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	; 0x58
 80022e4:	e007      	b.n	80022f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	aaaaaaab 	.word	0xaaaaaaab
 800230c:	0800bd64 	.word	0x0800bd64

08002310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11f      	bne.n	800236a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d855      	bhi.n	80023dc <DMA_CheckFifoParam+0xcc>
 8002330:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <DMA_CheckFifoParam+0x28>)
 8002332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	08002349 	.word	0x08002349
 800233c:	0800235b 	.word	0x0800235b
 8002340:	08002349 	.word	0x08002349
 8002344:	080023dd 	.word	0x080023dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d045      	beq.n	80023e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002358:	e042      	b.n	80023e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002362:	d13f      	bne.n	80023e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e03c      	b.n	80023e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002372:	d121      	bne.n	80023b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d836      	bhi.n	80023e8 <DMA_CheckFifoParam+0xd8>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <DMA_CheckFifoParam+0x70>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	08002391 	.word	0x08002391
 8002384:	08002397 	.word	0x08002397
 8002388:	08002391 	.word	0x08002391
 800238c:	080023a9 	.word	0x080023a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      break;
 8002394:	e02f      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d024      	beq.n	80023ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a6:	e021      	b.n	80023ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b0:	d11e      	bne.n	80023f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023b6:	e01b      	b.n	80023f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d902      	bls.n	80023c4 <DMA_CheckFifoParam+0xb4>
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d003      	beq.n	80023ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023c2:	e018      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e015      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00e      	beq.n	80023f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      break;
 80023da:	e00b      	b.n	80023f4 <DMA_CheckFifoParam+0xe4>
      break;
 80023dc:	bf00      	nop
 80023de:	e00a      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;
 80023e0:	bf00      	nop
 80023e2:	e008      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;
 80023e4:	bf00      	nop
 80023e6:	e006      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;
 80023e8:	bf00      	nop
 80023ea:	e004      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ec:	bf00      	nop
 80023ee:	e002      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80023f0:	bf00      	nop
 80023f2:	e000      	b.n	80023f6 <DMA_CheckFifoParam+0xe6>
      break;
 80023f4:	bf00      	nop
    }
  } 
  
  return status; 
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e165      	b.n	80026ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8154 	bne.w	80026e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x4a>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b12      	cmp	r3, #18
 800244c:	d123      	bne.n	8002496 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	69b9      	ldr	r1, [r7, #24]
 8002492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0203 	and.w	r2, r3, #3
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d00b      	beq.n	80024ea <HAL_GPIO_Init+0xe6>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d007      	beq.n	80024ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024de:	2b11      	cmp	r3, #17
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b12      	cmp	r3, #18
 80024e8:	d130      	bne.n	800254c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002520:	2201      	movs	r2, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 0201 	and.w	r2, r3, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80ae 	beq.w	80026e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a5b      	ldr	r2, [pc, #364]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b59      	ldr	r3, [pc, #356]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a57      	ldr	r2, [pc, #348]	; (8002704 <HAL_GPIO_Init+0x300>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4e      	ldr	r2, [pc, #312]	; (8002708 <HAL_GPIO_Init+0x304>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4d      	ldr	r2, [pc, #308]	; (800270c <HAL_GPIO_Init+0x308>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4c      	ldr	r2, [pc, #304]	; (8002710 <HAL_GPIO_Init+0x30c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_GPIO_Init+0x310>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <HAL_GPIO_Init+0x314>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x20a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a49      	ldr	r2, [pc, #292]	; (800271c <HAL_GPIO_Init+0x318>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x206>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a48      	ldr	r2, [pc, #288]	; (8002720 <HAL_GPIO_Init+0x31c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x202>
 8002602:	2306      	movs	r3, #6
 8002604:	e00c      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002606:	2307      	movs	r3, #7
 8002608:	e00a      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800260a:	2305      	movs	r3, #5
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800260e:	2304      	movs	r3, #4
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4934      	ldr	r1, [pc, #208]	; (8002704 <HAL_GPIO_Init+0x300>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_GPIO_Init+0x320>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002662:	4a30      	ldr	r2, [pc, #192]	; (8002724 <HAL_GPIO_Init+0x320>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002668:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_GPIO_Init+0x320>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <HAL_GPIO_Init+0x320>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_GPIO_Init+0x320>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b6:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_GPIO_Init+0x320>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_GPIO_Init+0x320>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e0:	4a10      	ldr	r2, [pc, #64]	; (8002724 <HAL_GPIO_Init+0x320>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f ae96 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	3724      	adds	r7, #36	; 0x24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40021400 	.word	0x40021400
 8002720:	40021800 	.word	0x40021800
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002744:	e003      	b.n	800274e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	041a      	lsls	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	401a      	ands	r2, r3
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	429a      	cmp	r2, r3
 8002772:	d104      	bne.n	800277e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	041a      	lsls	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800277c:	e002      	b.n	8002784 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0ca      	b.n	800293a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x1b4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d90c      	bls.n	80027cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b64      	ldr	r3, [pc, #400]	; (8002944 <HAL_RCC_ClockConfig+0x1b4>)
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b62      	ldr	r3, [pc, #392]	; (8002944 <HAL_RCC_ClockConfig+0x1b4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b6      	b.n	800293a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a51      	ldr	r2, [pc, #324]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b4f      	ldr	r3, [pc, #316]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494c      	ldr	r1, [pc, #304]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d044      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d119      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07d      	b.n	800293a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d003      	beq.n	800284e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284a:	2b03      	cmp	r3, #3
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06d      	b.n	800293a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e065      	b.n	800293a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4933      	ldr	r1, [pc, #204]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002880:	f7fe fbe8 	bl	8001054 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fbe4 	bl	8001054 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e04d      	b.n	800293a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_ClockConfig+0x1b4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d20c      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_ClockConfig+0x1b4>)
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_RCC_ClockConfig+0x1b4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e030      	b.n	800293a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4915      	ldr	r1, [pc, #84]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490d      	ldr	r1, [pc, #52]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f851 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800291a:	4601      	mov	r1, r0
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	fa21 f303 	lsr.w	r3, r1, r3
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe fb4a 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00
 8002948:	40023800 	.word	0x40023800
 800294c:	0801f624 	.word	0x0801f624
 8002950:	2000002c 	.word	0x2000002c

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_RCC_GetHCLKFreq+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000002c 	.word	0x2000002c

0800296c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002970:	f7ff fff0 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002974:	4601      	mov	r1, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4a03      	ldr	r2, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	0801f634 	.word	0x0801f634

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	4601      	mov	r1, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	0801f634 	.word	0x0801f634

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d6:	4bc6      	ldr	r3, [pc, #792]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	f200 817e 	bhi.w	8002ce0 <HAL_RCC_GetSysClockFreq+0x324>
 80029e4:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <HAL_RCC_GetSysClockFreq+0x30>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	08002a21 	.word	0x08002a21
 80029f0:	08002ce1 	.word	0x08002ce1
 80029f4:	08002ce1 	.word	0x08002ce1
 80029f8:	08002ce1 	.word	0x08002ce1
 80029fc:	08002a27 	.word	0x08002a27
 8002a00:	08002ce1 	.word	0x08002ce1
 8002a04:	08002ce1 	.word	0x08002ce1
 8002a08:	08002ce1 	.word	0x08002ce1
 8002a0c:	08002a2d 	.word	0x08002a2d
 8002a10:	08002ce1 	.word	0x08002ce1
 8002a14:	08002ce1 	.word	0x08002ce1
 8002a18:	08002ce1 	.word	0x08002ce1
 8002a1c:	08002b89 	.word	0x08002b89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4bb4      	ldr	r3, [pc, #720]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x338>)
 8002a22:	613b      	str	r3, [r7, #16]
       break;
 8002a24:	e15f      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4bb4      	ldr	r3, [pc, #720]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002a28:	613b      	str	r3, [r7, #16]
      break;
 8002a2a:	e15c      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2c:	4bb0      	ldr	r3, [pc, #704]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a34:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a36:	4bae      	ldr	r3, [pc, #696]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04a      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4bab      	ldr	r3, [pc, #684]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	ea03 0501 	and.w	r5, r3, r1
 8002a58:	ea04 0602 	and.w	r6, r4, r2
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4632      	mov	r2, r6
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f04f 0400 	mov.w	r4, #0
 8002a68:	0154      	lsls	r4, r2, #5
 8002a6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a6e:	014b      	lsls	r3, r1, #5
 8002a70:	4619      	mov	r1, r3
 8002a72:	4622      	mov	r2, r4
 8002a74:	1b49      	subs	r1, r1, r5
 8002a76:	eb62 0206 	sbc.w	r2, r2, r6
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	0194      	lsls	r4, r2, #6
 8002a84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a88:	018b      	lsls	r3, r1, #6
 8002a8a:	1a5b      	subs	r3, r3, r1
 8002a8c:	eb64 0402 	sbc.w	r4, r4, r2
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	00e2      	lsls	r2, r4, #3
 8002a9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a9e:	00d9      	lsls	r1, r3, #3
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	195b      	adds	r3, r3, r5
 8002aa6:	eb44 0406 	adc.w	r4, r4, r6
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	0262      	lsls	r2, r4, #9
 8002ab4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ab8:	0259      	lsls	r1, r3, #9
 8002aba:	460b      	mov	r3, r1
 8002abc:	4614      	mov	r4, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f04f 0400 	mov.w	r4, #0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4623      	mov	r3, r4
 8002acc:	f7fe f8dc 	bl	8000c88 <__aeabi_uldivmod>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e049      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad8:	4b85      	ldr	r3, [pc, #532]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	f04f 0400 	mov.w	r4, #0
 8002ae2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	ea03 0501 	and.w	r5, r3, r1
 8002aee:	ea04 0602 	and.w	r6, r4, r2
 8002af2:	4629      	mov	r1, r5
 8002af4:	4632      	mov	r2, r6
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	f04f 0400 	mov.w	r4, #0
 8002afe:	0154      	lsls	r4, r2, #5
 8002b00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b04:	014b      	lsls	r3, r1, #5
 8002b06:	4619      	mov	r1, r3
 8002b08:	4622      	mov	r2, r4
 8002b0a:	1b49      	subs	r1, r1, r5
 8002b0c:	eb62 0206 	sbc.w	r2, r2, r6
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f04f 0400 	mov.w	r4, #0
 8002b18:	0194      	lsls	r4, r2, #6
 8002b1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b1e:	018b      	lsls	r3, r1, #6
 8002b20:	1a5b      	subs	r3, r3, r1
 8002b22:	eb64 0402 	sbc.w	r4, r4, r2
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	00e2      	lsls	r2, r4, #3
 8002b30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b34:	00d9      	lsls	r1, r3, #3
 8002b36:	460b      	mov	r3, r1
 8002b38:	4614      	mov	r4, r2
 8002b3a:	195b      	adds	r3, r3, r5
 8002b3c:	eb44 0406 	adc.w	r4, r4, r6
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	02a2      	lsls	r2, r4, #10
 8002b4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b4e:	0299      	lsls	r1, r3, #10
 8002b50:	460b      	mov	r3, r1
 8002b52:	4614      	mov	r4, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	4621      	mov	r1, r4
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f04f 0400 	mov.w	r4, #0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	f7fe f891 	bl	8000c88 <__aeabi_uldivmod>
 8002b66:	4603      	mov	r3, r0
 8002b68:	460c      	mov	r4, r1
 8002b6a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b6c:	4b60      	ldr	r3, [pc, #384]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	3301      	adds	r3, #1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	613b      	str	r3, [r7, #16]
      break;
 8002b86:	e0ae      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b88:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b90:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b92:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04a      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9e:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	099b      	lsrs	r3, r3, #6
 8002ba4:	f04f 0400 	mov.w	r4, #0
 8002ba8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	ea03 0501 	and.w	r5, r3, r1
 8002bb4:	ea04 0602 	and.w	r6, r4, r2
 8002bb8:	4629      	mov	r1, r5
 8002bba:	4632      	mov	r2, r6
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	f04f 0400 	mov.w	r4, #0
 8002bc4:	0154      	lsls	r4, r2, #5
 8002bc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bca:	014b      	lsls	r3, r1, #5
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4622      	mov	r2, r4
 8002bd0:	1b49      	subs	r1, r1, r5
 8002bd2:	eb62 0206 	sbc.w	r2, r2, r6
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	f04f 0400 	mov.w	r4, #0
 8002bde:	0194      	lsls	r4, r2, #6
 8002be0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002be4:	018b      	lsls	r3, r1, #6
 8002be6:	1a5b      	subs	r3, r3, r1
 8002be8:	eb64 0402 	sbc.w	r4, r4, r2
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	00e2      	lsls	r2, r4, #3
 8002bf6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bfa:	00d9      	lsls	r1, r3, #3
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4614      	mov	r4, r2
 8002c00:	195b      	adds	r3, r3, r5
 8002c02:	eb44 0406 	adc.w	r4, r4, r6
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	0262      	lsls	r2, r4, #9
 8002c10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c14:	0259      	lsls	r1, r3, #9
 8002c16:	460b      	mov	r3, r1
 8002c18:	4614      	mov	r4, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f04f 0400 	mov.w	r4, #0
 8002c24:	461a      	mov	r2, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	f7fe f82e 	bl	8000c88 <__aeabi_uldivmod>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e049      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	f04f 0400 	mov.w	r4, #0
 8002c3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	ea03 0501 	and.w	r5, r3, r1
 8002c4a:	ea04 0602 	and.w	r6, r4, r2
 8002c4e:	4629      	mov	r1, r5
 8002c50:	4632      	mov	r2, r6
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	f04f 0400 	mov.w	r4, #0
 8002c5a:	0154      	lsls	r4, r2, #5
 8002c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c60:	014b      	lsls	r3, r1, #5
 8002c62:	4619      	mov	r1, r3
 8002c64:	4622      	mov	r2, r4
 8002c66:	1b49      	subs	r1, r1, r5
 8002c68:	eb62 0206 	sbc.w	r2, r2, r6
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	f04f 0400 	mov.w	r4, #0
 8002c74:	0194      	lsls	r4, r2, #6
 8002c76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c7a:	018b      	lsls	r3, r1, #6
 8002c7c:	1a5b      	subs	r3, r3, r1
 8002c7e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	00e2      	lsls	r2, r4, #3
 8002c8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c90:	00d9      	lsls	r1, r3, #3
 8002c92:	460b      	mov	r3, r1
 8002c94:	4614      	mov	r4, r2
 8002c96:	195b      	adds	r3, r3, r5
 8002c98:	eb44 0406 	adc.w	r4, r4, r6
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	02a2      	lsls	r2, r4, #10
 8002ca6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002caa:	0299      	lsls	r1, r3, #10
 8002cac:	460b      	mov	r3, r1
 8002cae:	4614      	mov	r4, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f04f 0400 	mov.w	r4, #0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	f7fd ffe3 	bl	8000c88 <__aeabi_uldivmod>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0f1b      	lsrs	r3, r3, #28
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	613b      	str	r3, [r7, #16]
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x338>)
 8002ce2:	613b      	str	r3, [r7, #16]
      break;
 8002ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce6:	693b      	ldr	r3, [r7, #16]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	007a1200 	.word	0x007a1200

08002cfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8083 	beq.w	8002e1c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d16:	4b95      	ldr	r3, [pc, #596]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d019      	beq.n	8002d56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d22:	4b92      	ldr	r3, [pc, #584]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d2e:	4b8f      	ldr	r3, [pc, #572]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3a:	d00c      	beq.n	8002d56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3c:	4b8b      	ldr	r3, [pc, #556]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d112      	bne.n	8002d6e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d48:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d54:	d10b      	bne.n	8002d6e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d56:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d05b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x11e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d157      	bne.n	8002e1a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e216      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x8a>
 8002d78:	4b7c      	ldr	r3, [pc, #496]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a7b      	ldr	r2, [pc, #492]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	e01d      	b.n	8002dc2 <HAL_RCC_OscConfig+0xc6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8e:	d10c      	bne.n	8002daa <HAL_RCC_OscConfig+0xae>
 8002d90:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a72      	ldr	r2, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCC_OscConfig+0xc6>
 8002daa:	4b70      	ldr	r3, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6f      	ldr	r2, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6c      	ldr	r2, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d013      	beq.n	8002df2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe f943 	bl	8001054 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd2:	f7fe f93f 	bl	8001054 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1db      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0xd6>
 8002df0:	e014      	b.n	8002e1c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe f92f 	bl	8001054 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfa:	f7fe f92b 	bl	8001054 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	; 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1c7      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0xfe>
 8002e18:	e000      	b.n	8002e1c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d06f      	beq.n	8002f08 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e34:	4b4d      	ldr	r3, [pc, #308]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d11c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e64:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x180>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e18f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4938      	ldr	r1, [pc, #224]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e90:	e03a      	b.n	8002f08 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d020      	beq.n	8002edc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9a:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe f8d8 	bl	8001054 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe f8d4 	bl	8001054 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e170      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4925      	ldr	r1, [pc, #148]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e015      	b.n	8002f08 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f8b7 	bl	8001054 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe f8b3 	bl	8001054 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e14f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d037      	beq.n	8002f84 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe f897 	bl	8001054 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe f893 	bl	8001054 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e12f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x22e>
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe f880 	bl	8001054 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f56:	e00f      	b.n	8002f78 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fe f87c 	bl	8001054 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d908      	bls.n	8002f78 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e118      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470000 	.word	0x42470000
 8002f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e9      	bne.n	8002f58 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8097 	beq.w	80030c0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a7e      	ldr	r2, [pc, #504]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fe f83b 	bl	8001054 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe f837 	bl	8001054 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0d3      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x31a>
 8003008:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x354>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x33c>
 800301e:	4b61      	ldr	r3, [pc, #388]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a60      	ldr	r2, [pc, #384]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b5e      	ldr	r3, [pc, #376]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x354>
 8003038:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a59      	ldr	r2, [pc, #356]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	4b57      	ldr	r3, [pc, #348]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a56      	ldr	r2, [pc, #344]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fd fffc 	bl	8001054 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fd fff8 	bl	8001054 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e092      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCC_OscConfig+0x364>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fd ffe6 	bl	8001054 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fd ffe2 	bl	8001054 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e07c      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d068      	beq.n	800319a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d060      	beq.n	8003196 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d145      	bne.n	8003168 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b33      	ldr	r3, [pc, #204]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fd ffb7 	bl	8001054 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fd ffb3 	bl	8001054 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e04f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	019b      	lsls	r3, r3, #6
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	071b      	lsls	r3, r3, #28
 8003134:	491b      	ldr	r1, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd ff88 	bl	8001054 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd ff84 	bl	8001054 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e020      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x44c>
 8003166:	e018      	b.n	800319a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fd ff71 	bl	8001054 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fd ff6d 	bl	8001054 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e009      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x47a>
 8003194:	e001      	b.n	800319a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42470060 	.word	0x42470060

080031b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e056      	b.n	8003270 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f004 fab7 	bl	8007750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	ea42 0103 	orr.w	r1, r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f003 0104 	and.w	r1, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_SPI_TransmitReceive_IT+0x20>
 8003294:	2302      	movs	r3, #2
 8003296:	e075      	b.n	8003384 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ae:	7dbb      	ldrb	r3, [r7, #22]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d00d      	beq.n	80032d0 <HAL_SPI_TransmitReceive_IT+0x58>
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ba:	d106      	bne.n	80032ca <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <HAL_SPI_TransmitReceive_IT+0x52>
 80032c4:	7dbb      	ldrb	r3, [r7, #22]
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d002      	beq.n	80032d0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032ce:	e054      	b.n	800337a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032e6:	e048      	b.n	800337a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d003      	beq.n	80032fc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2205      	movs	r2, #5
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	887a      	ldrh	r2, [r7, #2]
 8003312:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
 800333a:	e005      	b.n	8003348 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a16      	ldr	r2, [pc, #88]	; (8003398 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003340:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_SPI_TransmitReceive_IT+0x124>)
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003356:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d008      	beq.n	8003378 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e000      	b.n	800337a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003378:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	080036c9 	.word	0x080036c9
 8003394:	08003729 	.word	0x08003729
 8003398:	08003605 	.word	0x08003605
 800339c:	08003669 	.word	0x08003669

080033a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
    return;
 80033e2:	e0d8      	b.n	8003596 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_SPI_IRQHandler+0x66>
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	09db      	lsrs	r3, r3, #7
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
    return;
 8003404:	e0c7      	b.n	8003596 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_SPI_IRQHandler+0x8c>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_SPI_IRQHandler+0x8c>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80b5 	beq.w	8003596 <HAL_SPI_IRQHandler+0x1f6>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80ae 	beq.w	8003596 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d023      	beq.n	800348e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b03      	cmp	r3, #3
 8003450:	d011      	beq.n	8003476 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	e00b      	b.n	800348e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]
        return;
 800348c:	e083      	b.n	8003596 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	f043 0208 	orr.w	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d050      	beq.n	8003594 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003500:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_SPI_IRQHandler+0x17e>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d034      	beq.n	8003588 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0203 	bic.w	r2, r2, #3
 800352c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d011      	beq.n	800355a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	4a18      	ldr	r2, [pc, #96]	; (800359c <HAL_SPI_IRQHandler+0x1fc>)
 800353c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fcd4 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <HAL_SPI_IRQHandler+0x1fc>)
 8003568:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fcbe 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003586:	e003      	b.n	8003590 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f81d 	bl	80035c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800358e:	e000      	b.n	8003592 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003590:	bf00      	nop
    return;
 8003592:	bf00      	nop
 8003594:	bf00      	nop
  }
}
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	080035dd 	.word	0x080035dd

080035a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff ffe6 	bl	80035c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f103 020c 	add.w	r2, r3, #12
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10f      	bne.n	8003660 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800364e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f940 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10f      	bne.n	80036c0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f910 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10f      	bne.n	8003720 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8e0 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	881a      	ldrh	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	1c9a      	adds	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8b1 	bl	80038e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003796:	e04c      	b.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d048      	beq.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80037a0:	f7fd fc58 	bl	8001054 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d902      	bls.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d13d      	bne.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d111      	bne.n	80037f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d8:	d004      	beq.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d107      	bne.n	80037f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fc:	d10f      	bne.n	800381e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800381c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e00f      	b.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	429a      	cmp	r2, r3
 800384e:	d1a3      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <SPI_EndRxTxTransaction+0x7c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <SPI_EndRxTxTransaction+0x80>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0d5b      	lsrs	r3, r3, #21
 8003874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003886:	d112      	bne.n	80038ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2200      	movs	r2, #0
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff ff77 	bl	8003786 <SPI_WaitFlagStateUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e00f      	b.n	80038ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d0f2      	beq.n	80038ae <SPI_EndRxTxTransaction+0x52>
 80038c8:	e000      	b.n	80038cc <SPI_EndRxTxTransaction+0x70>
        break;
 80038ca:	bf00      	nop
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	2000002c 	.word	0x2000002c
 80038dc:	165e9f81 	.word	0x165e9f81

080038e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80038e8:	4b35      	ldr	r3, [pc, #212]	; (80039c0 <SPI_CloseRxTx_ISR+0xe0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a35      	ldr	r2, [pc, #212]	; (80039c4 <SPI_CloseRxTx_ISR+0xe4>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0a5b      	lsrs	r3, r3, #9
 80038f4:	2264      	movs	r2, #100	; 0x64
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038fc:	f7fd fbaa 	bl	8001054 <HAL_GetTick>
 8003900:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0220 	bic.w	r2, r2, #32
 8003910:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003924:	e009      	b.n	800393a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	3b01      	subs	r3, #1
 800392a:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0eb      	beq.n	8003912 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	2164      	movs	r1, #100	; 0x64
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff8c 	bl	800385c <SPI_EndRxTxTransaction>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	2b00      	cmp	r3, #0
 800397a:	d115      	bne.n	80039a8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b04      	cmp	r3, #4
 8003986:	d107      	bne.n	8003998 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fe05 	bl	80035a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003996:	e00e      	b.n	80039b6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fe07 	bl	80035b4 <HAL_SPI_TxRxCpltCallback>
}
 80039a6:	e006      	b.n	80039b6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fe09 	bl	80035c8 <HAL_SPI_ErrorCallback>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	2000002c 	.word	0x2000002c
 80039c4:	057619f1 	.word	0x057619f1

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e01d      	b.n	8003a16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f004 f948 	bl	8007c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 fc0a 	bl	8004220 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e01d      	b.n	8003a6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f815 	bl	8003a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fbdf 	bl	8004220 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d841      	bhi.n	8003b1c <HAL_TIM_PWM_Start_IT+0x94>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_TIM_PWM_Start_IT+0x18>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003b1d 	.word	0x08003b1d
 8003aa8:	08003b1d 	.word	0x08003b1d
 8003aac:	08003b1d 	.word	0x08003b1d
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003b1d 	.word	0x08003b1d
 8003ab8:	08003b1d 	.word	0x08003b1d
 8003abc:	08003b1d 	.word	0x08003b1d
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003b1d 	.word	0x08003b1d
 8003ac8:	08003b1d 	.word	0x08003b1d
 8003acc:	08003b1d 	.word	0x08003b1d
 8003ad0:	08003b0b 	.word	0x08003b0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0202 	orr.w	r2, r2, #2
 8003ae2:	60da      	str	r2, [r3, #12]
      break;
 8003ae4:	e01b      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0204 	orr.w	r2, r2, #4
 8003af4:	60da      	str	r2, [r3, #12]
      break;
 8003af6:	e012      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	60da      	str	r2, [r3, #12]
      break;
 8003b08:	e009      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0210 	orr.w	r2, r2, #16
 8003b18:	60da      	str	r2, [r3, #12]
      break;
 8003b1a:	e000      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003b1c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fe64 	bl	80047f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <HAL_TIM_PWM_Start_IT+0x100>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_TIM_PWM_Start_IT+0xb8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <HAL_TIM_PWM_Start_IT+0x104>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_PWM_Start_IT+0xbc>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_TIM_PWM_Start_IT+0xbe>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b06      	cmp	r3, #6
 8003b6a:	d007      	beq.n	8003b7c <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40010400 	.word	0x40010400

08003b90 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d841      	bhi.n	8003c24 <HAL_TIM_PWM_Stop_IT+0x94>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <HAL_TIM_PWM_Stop_IT+0x18>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003c25 	.word	0x08003c25
 8003bb0:	08003c25 	.word	0x08003c25
 8003bb4:	08003c25 	.word	0x08003c25
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003c25 	.word	0x08003c25
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003c25 	.word	0x08003c25
 8003bc8:	08003c01 	.word	0x08003c01
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c13 	.word	0x08003c13
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0202 	bic.w	r2, r2, #2
 8003bea:	60da      	str	r2, [r3, #12]
      break;
 8003bec:	e01b      	b.n	8003c26 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0204 	bic.w	r2, r2, #4
 8003bfc:	60da      	str	r2, [r3, #12]
      break;
 8003bfe:	e012      	b.n	8003c26 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0208 	bic.w	r2, r2, #8
 8003c0e:	60da      	str	r2, [r3, #12]
      break;
 8003c10:	e009      	b.n	8003c26 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0210 	bic.w	r2, r2, #16
 8003c20:	60da      	str	r2, [r3, #12]
      break;
 8003c22:	e000      	b.n	8003c26 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8003c24:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fde0 	bl	80047f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <HAL_TIM_PWM_Stop_IT+0x12c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_TIM_PWM_Stop_IT+0xb8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_TIM_PWM_Stop_IT+0x130>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_TIM_PWM_Stop_IT+0xbc>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_TIM_PWM_Stop_IT+0xbe>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d017      	beq.n	8003c82 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_TIM_PWM_Stop_IT+0xf2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	f240 4344 	movw	r3, #1092	; 0x444
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_PWM_Stop_IT+0xf2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <HAL_TIM_PWM_Stop_IT+0x122>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	f240 4344 	movw	r3, #1092	; 0x444
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_PWM_Stop_IT+0x122>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d122      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0202 	mvn.w	r2, #2
 8003cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa6b 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fa5d 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fa6e 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0204 	mvn.w	r2, #4
 8003d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa41 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa33 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fa44 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0208 	mvn.w	r2, #8
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa17 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa09 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa1a 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0210 	mvn.w	r2, #16
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2208      	movs	r2, #8
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9ed 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9df 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f9f0 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10e      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0201 	mvn.w	r2, #1
 8003e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f002 f9aa 	bl	800619c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d10e      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d107      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fddb 	bl	8004a2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d10e      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9b5 	bl	800420a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0220 	mvn.w	r2, #32
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fda5 	bl	8004a16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e0b4      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	f200 809f 	bhi.w	8004044 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08004045 	.word	0x08004045
 8003f14:	08004045 	.word	0x08004045
 8003f18:	08004045 	.word	0x08004045
 8003f1c:	08003f81 	.word	0x08003f81
 8003f20:	08004045 	.word	0x08004045
 8003f24:	08004045 	.word	0x08004045
 8003f28:	08004045 	.word	0x08004045
 8003f2c:	08003fc3 	.word	0x08003fc3
 8003f30:	08004045 	.word	0x08004045
 8003f34:	08004045 	.word	0x08004045
 8003f38:	08004045 	.word	0x08004045
 8003f3c:	08004003 	.word	0x08004003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa0a 	bl	8004360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6999      	ldr	r1, [r3, #24]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	619a      	str	r2, [r3, #24]
      break;
 8003f7e:	e062      	b.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fa5a 	bl	8004440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6999      	ldr	r1, [r3, #24]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	619a      	str	r2, [r3, #24]
      break;
 8003fc0:	e041      	b.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 faaf 	bl	800452c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0208 	orr.w	r2, r2, #8
 8003fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0204 	bic.w	r2, r2, #4
 8003fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69d9      	ldr	r1, [r3, #28]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	61da      	str	r2, [r3, #28]
      break;
 8004000:	e021      	b.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fb03 	bl	8004614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800401c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69d9      	ldr	r1, [r3, #28]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	021a      	lsls	r2, r3, #8
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	61da      	str	r2, [r3, #28]
      break;
 8004042:	e000      	b.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004044:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIM_ConfigClockSource+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e0a6      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x166>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004096:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800409e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d067      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x120>
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d80b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x6c>
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d073      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0x140>
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d802      	bhi.n	80040c2 <HAL_TIM_ConfigClockSource+0x62>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d06f      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040c0:	e078      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d06c      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0x140>
 80040c6:	2b30      	cmp	r3, #48	; 0x30
 80040c8:	d06a      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040ca:	e073      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d00d      	beq.n	80040ec <HAL_TIM_ConfigClockSource+0x8c>
 80040d0:	2b70      	cmp	r3, #112	; 0x70
 80040d2:	d804      	bhi.n	80040de <HAL_TIM_ConfigClockSource+0x7e>
 80040d4:	2b50      	cmp	r3, #80	; 0x50
 80040d6:	d033      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0xe0>
 80040d8:	2b60      	cmp	r3, #96	; 0x60
 80040da:	d041      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040dc:	e06a      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d066      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x152>
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e8:	d017      	beq.n	800411a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040ea:	e063      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f000 fb5a 	bl	80047b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800410e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
      break;
 8004118:	e04c      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6899      	ldr	r1, [r3, #8]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f000 fb43 	bl	80047b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413c:	609a      	str	r2, [r3, #8]
      break;
 800413e:	e039      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	461a      	mov	r2, r3
 800414e:	f000 fab7 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2150      	movs	r1, #80	; 0x50
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fb10 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 800415e:	e029      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	461a      	mov	r2, r3
 800416e:	f000 fad6 	bl	800471e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2160      	movs	r1, #96	; 0x60
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fb00 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 800417e:	e019      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	461a      	mov	r2, r3
 800418e:	f000 fa97 	bl	80046c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2140      	movs	r1, #64	; 0x40
 8004198:	4618      	mov	r0, r3
 800419a:	f000 faf0 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 800419e:	e009      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fae7 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 80041b0:	e000      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a40      	ldr	r2, [pc, #256]	; (8004334 <TIM_Base_SetConfig+0x114>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d00f      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3d      	ldr	r2, [pc, #244]	; (8004338 <TIM_Base_SetConfig+0x118>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <TIM_Base_SetConfig+0x11c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3b      	ldr	r2, [pc, #236]	; (8004340 <TIM_Base_SetConfig+0x120>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3a      	ldr	r2, [pc, #232]	; (8004344 <TIM_Base_SetConfig+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <TIM_Base_SetConfig+0x114>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d027      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <TIM_Base_SetConfig+0x118>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d023      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2b      	ldr	r2, [pc, #172]	; (800433c <TIM_Base_SetConfig+0x11c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01f      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <TIM_Base_SetConfig+0x120>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	; (8004344 <TIM_Base_SetConfig+0x124>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d017      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a28      	ldr	r2, [pc, #160]	; (8004348 <TIM_Base_SetConfig+0x128>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a27      	ldr	r2, [pc, #156]	; (800434c <TIM_Base_SetConfig+0x12c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a26      	ldr	r2, [pc, #152]	; (8004350 <TIM_Base_SetConfig+0x130>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <TIM_Base_SetConfig+0x134>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <TIM_Base_SetConfig+0x138>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a23      	ldr	r2, [pc, #140]	; (800435c <TIM_Base_SetConfig+0x13c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d108      	bne.n	80042e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <TIM_Base_SetConfig+0x114>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_Base_SetConfig+0xf8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <TIM_Base_SetConfig+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d103      	bne.n	8004320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	615a      	str	r2, [r3, #20]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40010400 	.word	0x40010400
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800
 8004354:	40001800 	.word	0x40001800
 8004358:	40001c00 	.word	0x40001c00
 800435c:	40002000 	.word	0x40002000

08004360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0303 	bic.w	r3, r3, #3
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f023 0302 	bic.w	r3, r3, #2
 80043a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a20      	ldr	r2, [pc, #128]	; (8004438 <TIM_OC1_SetConfig+0xd8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_OC1_SetConfig+0x64>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <TIM_OC1_SetConfig+0xdc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10c      	bne.n	80043de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0308 	bic.w	r3, r3, #8
 80043ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <TIM_OC1_SetConfig+0xd8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_OC1_SetConfig+0x8e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <TIM_OC1_SetConfig+0xdc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d111      	bne.n	8004412 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	621a      	str	r2, [r3, #32]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40010000 	.word	0x40010000
 800443c:	40010400 	.word	0x40010400

08004440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0210 	bic.w	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0320 	bic.w	r3, r3, #32
 800448a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a22      	ldr	r2, [pc, #136]	; (8004524 <TIM_OC2_SetConfig+0xe4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_OC2_SetConfig+0x68>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <TIM_OC2_SetConfig+0xe8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10d      	bne.n	80044c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a17      	ldr	r2, [pc, #92]	; (8004524 <TIM_OC2_SetConfig+0xe4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_OC2_SetConfig+0x94>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a16      	ldr	r2, [pc, #88]	; (8004528 <TIM_OC2_SetConfig+0xe8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d113      	bne.n	80044fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40010400 	.word	0x40010400

0800452c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a21      	ldr	r2, [pc, #132]	; (800460c <TIM_OC3_SetConfig+0xe0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_OC3_SetConfig+0x66>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a20      	ldr	r2, [pc, #128]	; (8004610 <TIM_OC3_SetConfig+0xe4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10d      	bne.n	80045ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <TIM_OC3_SetConfig+0xe0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_OC3_SetConfig+0x92>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a15      	ldr	r2, [pc, #84]	; (8004610 <TIM_OC3_SetConfig+0xe4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d113      	bne.n	80045e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	621a      	str	r2, [r3, #32]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40010000 	.word	0x40010000
 8004610:	40010400 	.word	0x40010400

08004614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800465e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <TIM_OC4_SetConfig+0xa4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_OC4_SetConfig+0x68>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a11      	ldr	r2, [pc, #68]	; (80046bc <TIM_OC4_SetConfig+0xa8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d109      	bne.n	8004690 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f023 0201 	bic.w	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 030a 	bic.w	r3, r3, #10
 80046fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471e:	b480      	push	{r7}
 8004720:	b087      	sub	sp, #28
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f023 0210 	bic.w	r2, r3, #16
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	031b      	lsls	r3, r3, #12
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800475a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	f043 0307 	orr.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	021a      	lsls	r2, r3, #8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2201      	movs	r2, #1
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1a      	ldr	r2, [r3, #32]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d00d      	beq.n	800486a <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800484e:	2b08      	cmp	r3, #8
 8004850:	d014      	beq.n	800487c <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d000      	beq.n	8004858 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8004856:	e01a      	b.n	800488e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0202 	orr.w	r2, r2, #2
 8004866:	60da      	str	r2, [r3, #12]
      break;
 8004868:	e011      	b.n	800488e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0204 	orr.w	r2, r2, #4
 8004878:	60da      	str	r2, [r3, #12]
      break;
 800487a:	e008      	b.n	800488e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0208 	orr.w	r2, r2, #8
 800488a:	60da      	str	r2, [r3, #12]
      break;
 800488c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800489c:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2204      	movs	r2, #4
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f8c9 	bl	8004a3e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d007      	beq.n	80048de <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e032      	b.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004938:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4313      	orrs	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800498a:	2302      	movs	r3, #2
 800498c:	e03d      	b.n	8004a0a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2204      	movs	r2, #4
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	401a      	ands	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	621a      	str	r2, [r3, #32]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e03f      	b.n	8004b1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f003 f9b4 	bl	8007e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fb47 	bl	8005160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b088      	sub	sp, #32
 8004b26:	af02      	add	r7, sp, #8
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	f040 8083 	bne.w	8004c4a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x2e>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e07b      	b.n	8004c4c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Transmit+0x40>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e074      	b.n	8004c4c <HAL_UART_Transmit+0x12a>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2221      	movs	r2, #33	; 0x21
 8004b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b78:	f7fc fa6c 	bl	8001054 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b8a:	e042      	b.n	8004c12 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d122      	bne.n	8004bea <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	2180      	movs	r1, #128	; 0x80
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f96a 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e046      	b.n	8004c4c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	e017      	b.n	8004c12 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	e013      	b.n	8004c12 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f947 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e023      	b.n	8004c4c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	60ba      	str	r2, [r7, #8]
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1b7      	bne.n	8004b8c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f92e 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e00a      	b.n	8004c4c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e000      	b.n	8004c4c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
  }
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10d      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x52>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9dc 	bl	800505c <UART_Receive_IT>
      return;
 8004ca4:	e0cc      	b.n	8004e40 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80ab 	beq.w	8004e04 <HAL_UART_IRQHandler+0x1b0>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x70>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80a0 	beq.w	8004e04 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x90>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	f043 0201 	orr.w	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_UART_IRQHandler+0xb0>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	f043 0202 	orr.w	r2, r3, #2
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_UART_IRQHandler+0xd0>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	f043 0204 	orr.w	r2, r3, #4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_UART_IRQHandler+0xf0>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	f043 0208 	orr.w	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d078      	beq.n	8004e3e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <HAL_UART_IRQHandler+0x112>
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f97b 	bl	800505c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_UART_IRQHandler+0x13a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d031      	beq.n	8004df2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8c4 	bl	8004f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d123      	bne.n	8004dea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d013      	beq.n	8004de2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <HAL_UART_IRQHandler+0x1f4>)
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fd f892 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d016      	beq.n	8004e00 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e00e      	b.n	8004e00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f846 	bl	8004e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	e00a      	b.n	8004e00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f842 	bl	8004e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	e006      	b.n	8004e00 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f83e 	bl	8004e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004dfe:	e01e      	b.n	8004e3e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	bf00      	nop
    return;
 8004e02:	e01c      	b.n	8004e3e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_UART_IRQHandler+0x1cc>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8b1 	bl	8004f80 <UART_Transmit_IT>
    return;
 8004e1e:	e00f      	b.n	8004e40 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_UART_IRQHandler+0x1ec>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f8f9 	bl	800502c <UART_EndTransmit_IT>
    return;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004e3e:	bf00      	nop
  }
}
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	08004f59 	.word	0x08004f59

08004e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	e02c      	b.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d028      	beq.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea8:	f7fc f8d4 	bl	8001054 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d21d      	bcs.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ec6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e00f      	b.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d0c3      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff ff7e 	bl	8004e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b21      	cmp	r3, #33	; 0x21
 8004f92:	d144      	bne.n	800501e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9c:	d11a      	bne.n	8004fd4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]
 8004fc6:	e00e      	b.n	8004fe6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	621a      	str	r2, [r3, #32]
 8004fd2:	e008      	b.n	8004fe6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	1c59      	adds	r1, r3, #1
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6211      	str	r1, [r2, #32]
 8004fde:	781a      	ldrb	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10f      	bne.n	800501a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005008:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005018:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005042:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff fefd 	bl	8004e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b22      	cmp	r3, #34	; 0x22
 800506e:	d171      	bne.n	8005154 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005078:	d123      	bne.n	80050c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10e      	bne.n	80050a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	1c9a      	adds	r2, r3, #2
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
 80050a4:	e029      	b.n	80050fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28
 80050c0:	e01b      	b.n	80050fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6858      	ldr	r0, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	1c59      	adds	r1, r3, #1
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6291      	str	r1, [r2, #40]	; 0x28
 80050da:	b2c2      	uxtb	r2, r0
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e00c      	b.n	80050fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	1c58      	adds	r0, r3, #1
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	6288      	str	r0, [r1, #40]	; 0x28
 80050f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29b      	uxth	r3, r3
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	4619      	mov	r1, r3
 8005108:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800510a:	2b00      	cmp	r3, #0
 800510c:	d120      	bne.n	8005150 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0220 	bic.w	r2, r2, #32
 800511c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800512c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff fe8a 	bl	8004e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e002      	b.n	8005156 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051a0:	f023 030c 	bic.w	r3, r3, #12
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	68f9      	ldr	r1, [r7, #12]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051cc:	f040 80e4 	bne.w	8005398 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4aab      	ldr	r2, [pc, #684]	; (8005484 <UART_SetConfig+0x324>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <UART_SetConfig+0x84>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4aaa      	ldr	r2, [pc, #680]	; (8005488 <UART_SetConfig+0x328>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d16c      	bne.n	80052be <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80051e4:	f7fd fbd6 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009a      	lsls	r2, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	4aa3      	ldr	r2, [pc, #652]	; (800548c <UART_SetConfig+0x32c>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	011c      	lsls	r4, r3, #4
 8005208:	f7fd fbc4 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 800520c:	4602      	mov	r2, r0
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009a      	lsls	r2, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005222:	f7fd fbb7 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8005226:	4602      	mov	r2, r0
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	4a93      	ldr	r2, [pc, #588]	; (800548c <UART_SetConfig+0x32c>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2264      	movs	r2, #100	; 0x64
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	1aeb      	subs	r3, r5, r3
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	3332      	adds	r3, #50	; 0x32
 8005250:	4a8e      	ldr	r2, [pc, #568]	; (800548c <UART_SetConfig+0x32c>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800525e:	441c      	add	r4, r3
 8005260:	f7fd fb98 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8005264:	4602      	mov	r2, r0
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009a      	lsls	r2, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fbb2 f5f3 	udiv	r5, r2, r3
 800527a:	f7fd fb8b 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 800527e:	4602      	mov	r2, r0
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009a      	lsls	r2, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	4a7d      	ldr	r2, [pc, #500]	; (800548c <UART_SetConfig+0x32c>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2264      	movs	r2, #100	; 0x64
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	1aeb      	subs	r3, r5, r3
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	3332      	adds	r3, #50	; 0x32
 80052a8:	4a78      	ldr	r2, [pc, #480]	; (800548c <UART_SetConfig+0x32c>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	f003 0207 	and.w	r2, r3, #7
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4422      	add	r2, r4
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	e154      	b.n	8005568 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80052be:	f7fd fb55 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009a      	lsls	r2, r3, #2
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	4a6c      	ldr	r2, [pc, #432]	; (800548c <UART_SetConfig+0x32c>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	011c      	lsls	r4, r3, #4
 80052e2:	f7fd fb43 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80052e6:	4602      	mov	r2, r0
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009a      	lsls	r2, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80052fc:	f7fd fb36 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8005300:	4602      	mov	r2, r0
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009a      	lsls	r2, r3, #2
 800530a:	441a      	add	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	4a5d      	ldr	r2, [pc, #372]	; (800548c <UART_SetConfig+0x32c>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	2264      	movs	r2, #100	; 0x64
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	1aeb      	subs	r3, r5, r3
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	3332      	adds	r3, #50	; 0x32
 800532a:	4a58      	ldr	r2, [pc, #352]	; (800548c <UART_SetConfig+0x32c>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005338:	441c      	add	r4, r3
 800533a:	f7fd fb17 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 800533e:	4602      	mov	r2, r0
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	009a      	lsls	r2, r3, #2
 8005348:	441a      	add	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	fbb2 f5f3 	udiv	r5, r2, r3
 8005354:	f7fd fb0a 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8005358:	4602      	mov	r2, r0
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	009a      	lsls	r2, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	4a47      	ldr	r2, [pc, #284]	; (800548c <UART_SetConfig+0x32c>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2264      	movs	r2, #100	; 0x64
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	1aeb      	subs	r3, r5, r3
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a42      	ldr	r2, [pc, #264]	; (800548c <UART_SetConfig+0x32c>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 0207 	and.w	r2, r3, #7
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4422      	add	r2, r4
 8005394:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005396:	e0e7      	b.n	8005568 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a39      	ldr	r2, [pc, #228]	; (8005484 <UART_SetConfig+0x324>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <UART_SetConfig+0x24c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a38      	ldr	r2, [pc, #224]	; (8005488 <UART_SetConfig+0x328>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d171      	bne.n	8005490 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80053ac:	f7fd faf2 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009a      	lsls	r2, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	4a31      	ldr	r2, [pc, #196]	; (800548c <UART_SetConfig+0x32c>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	011c      	lsls	r4, r3, #4
 80053d0:	f7fd fae0 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009a      	lsls	r2, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80053ea:	f7fd fad3 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80053ee:	4602      	mov	r2, r0
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009a      	lsls	r2, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	4a21      	ldr	r2, [pc, #132]	; (800548c <UART_SetConfig+0x32c>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2264      	movs	r2, #100	; 0x64
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	1aeb      	subs	r3, r5, r3
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	3332      	adds	r3, #50	; 0x32
 8005418:	4a1c      	ldr	r2, [pc, #112]	; (800548c <UART_SetConfig+0x32c>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005424:	441c      	add	r4, r3
 8005426:	f7fd fab5 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 800542a:	4602      	mov	r2, r0
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009a      	lsls	r2, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005440:	f7fd faa8 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8005444:	4602      	mov	r2, r0
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	009a      	lsls	r2, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <UART_SetConfig+0x32c>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	2264      	movs	r2, #100	; 0x64
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	1aeb      	subs	r3, r5, r3
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	3332      	adds	r3, #50	; 0x32
 800546e:	4a07      	ldr	r2, [pc, #28]	; (800548c <UART_SetConfig+0x32c>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	f003 020f 	and.w	r2, r3, #15
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4422      	add	r2, r4
 8005480:	609a      	str	r2, [r3, #8]
 8005482:	e071      	b.n	8005568 <UART_SetConfig+0x408>
 8005484:	40011000 	.word	0x40011000
 8005488:	40011400 	.word	0x40011400
 800548c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005490:	f7fd fa6c 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8005494:	4602      	mov	r2, r0
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009a      	lsls	r2, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	4a31      	ldr	r2, [pc, #196]	; (8005570 <UART_SetConfig+0x410>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	011c      	lsls	r4, r3, #4
 80054b4:	f7fd fa5a 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009a      	lsls	r2, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80054ce:	f7fd fa4d 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80054d2:	4602      	mov	r2, r0
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009a      	lsls	r2, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	4a21      	ldr	r2, [pc, #132]	; (8005570 <UART_SetConfig+0x410>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2264      	movs	r2, #100	; 0x64
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	1aeb      	subs	r3, r5, r3
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	3332      	adds	r3, #50	; 0x32
 80054fc:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <UART_SetConfig+0x410>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005508:	441c      	add	r4, r3
 800550a:	f7fd fa2f 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 800550e:	4602      	mov	r2, r0
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009a      	lsls	r2, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	fbb2 f5f3 	udiv	r5, r2, r3
 8005524:	f7fd fa22 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8005528:	4602      	mov	r2, r0
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009a      	lsls	r2, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <UART_SetConfig+0x410>)
 8005540:	fba2 2303 	umull	r2, r3, r2, r3
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	2264      	movs	r2, #100	; 0x64
 8005548:	fb02 f303 	mul.w	r3, r2, r3
 800554c:	1aeb      	subs	r3, r5, r3
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	3332      	adds	r3, #50	; 0x32
 8005552:	4a07      	ldr	r2, [pc, #28]	; (8005570 <UART_SetConfig+0x410>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	f003 020f 	and.w	r2, r3, #15
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4422      	add	r2, r4
 8005564:	609a      	str	r2, [r3, #8]
}
 8005566:	e7ff      	b.n	8005568 <UART_SetConfig+0x408>
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bdb0      	pop	{r4, r5, r7, pc}
 8005570:	51eb851f 	.word	0x51eb851f

08005574 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800557a:	463b      	mov	r3, r7
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <MX_ADC1_Init+0x9c>)
 8005588:	4a22      	ldr	r2, [pc, #136]	; (8005614 <MX_ADC1_Init+0xa0>)
 800558a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800558c:	4b20      	ldr	r3, [pc, #128]	; (8005610 <MX_ADC1_Init+0x9c>)
 800558e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005592:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005594:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <MX_ADC1_Init+0x9c>)
 8005596:	2200      	movs	r2, #0
 8005598:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <MX_ADC1_Init+0x9c>)
 800559c:	2200      	movs	r2, #0
 800559e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80055a0:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80055b6:	4b16      	ldr	r3, [pc, #88]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055b8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80055bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80055be:	4b14      	ldr	r3, [pc, #80]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80055d8:	480d      	ldr	r0, [pc, #52]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055da:	f7fb fd69 	bl	80010b0 <HAL_ADC_Init>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80055e4:	f002 f874 	bl	80076d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80055ec:	2301      	movs	r3, #1
 80055ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055f4:	463b      	mov	r3, r7
 80055f6:	4619      	mov	r1, r3
 80055f8:	4805      	ldr	r0, [pc, #20]	; (8005610 <MX_ADC1_Init+0x9c>)
 80055fa:	f7fb fead 	bl	8001358 <HAL_ADC_ConfigChannel>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005604:	f002 f864 	bl	80076d0 <Error_Handler>
  }

}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	2000a028 	.word	0x2000a028
 8005614:	40012000 	.word	0x40012000

08005618 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800561e:	463b      	mov	r3, r7
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800562a:	4b22      	ldr	r3, [pc, #136]	; (80056b4 <MX_ADC2_Init+0x9c>)
 800562c:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <MX_ADC2_Init+0xa0>)
 800562e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005630:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <MX_ADC2_Init+0x9c>)
 8005632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005638:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <MX_ADC2_Init+0x9c>)
 800563a:	2200      	movs	r2, #0
 800563c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <MX_ADC2_Init+0x9c>)
 8005640:	2200      	movs	r2, #0
 8005642:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005644:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <MX_ADC2_Init+0x9c>)
 8005646:	2200      	movs	r2, #0
 8005648:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800564a:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <MX_ADC2_Init+0x9c>)
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <MX_ADC2_Init+0x9c>)
 8005654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800565a:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <MX_ADC2_Init+0x9c>)
 800565c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005660:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005662:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <MX_ADC2_Init+0x9c>)
 8005664:	2200      	movs	r2, #0
 8005666:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005668:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <MX_ADC2_Init+0x9c>)
 800566a:	2201      	movs	r2, #1
 800566c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800566e:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <MX_ADC2_Init+0x9c>)
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <MX_ADC2_Init+0x9c>)
 8005678:	2201      	movs	r2, #1
 800567a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800567c:	480d      	ldr	r0, [pc, #52]	; (80056b4 <MX_ADC2_Init+0x9c>)
 800567e:	f7fb fd17 	bl	80010b0 <HAL_ADC_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8005688:	f002 f822 	bl	80076d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800568c:	2304      	movs	r3, #4
 800568e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005690:	2301      	movs	r3, #1
 8005692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005694:	2300      	movs	r3, #0
 8005696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005698:	463b      	mov	r3, r7
 800569a:	4619      	mov	r1, r3
 800569c:	4805      	ldr	r0, [pc, #20]	; (80056b4 <MX_ADC2_Init+0x9c>)
 800569e:	f7fb fe5b 	bl	8001358 <HAL_ADC_ConfigChannel>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80056a8:	f002 f812 	bl	80076d0 <Error_Handler>
  }

}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20009f80 	.word	0x20009f80
 80056b8:	40012100 	.word	0x40012100

080056bc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80056c2:	463b      	mov	r3, r7
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80056ce:	4b22      	ldr	r3, [pc, #136]	; (8005758 <MX_ADC3_Init+0x9c>)
 80056d0:	4a22      	ldr	r2, [pc, #136]	; (800575c <MX_ADC3_Init+0xa0>)
 80056d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80056d4:	4b20      	ldr	r3, [pc, #128]	; (8005758 <MX_ADC3_Init+0x9c>)
 80056d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <MX_ADC3_Init+0x9c>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <MX_ADC3_Init+0x9c>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <MX_ADC3_Init+0x9c>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80056ee:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <MX_ADC3_Init+0x9c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80056f6:	4b18      	ldr	r3, [pc, #96]	; (8005758 <MX_ADC3_Init+0x9c>)
 80056f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80056fe:	4b16      	ldr	r3, [pc, #88]	; (8005758 <MX_ADC3_Init+0x9c>)
 8005700:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005706:	4b14      	ldr	r3, [pc, #80]	; (8005758 <MX_ADC3_Init+0x9c>)
 8005708:	2200      	movs	r2, #0
 800570a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800570c:	4b12      	ldr	r3, [pc, #72]	; (8005758 <MX_ADC3_Init+0x9c>)
 800570e:	2201      	movs	r2, #1
 8005710:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <MX_ADC3_Init+0x9c>)
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <MX_ADC3_Init+0x9c>)
 800571c:	2201      	movs	r2, #1
 800571e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005720:	480d      	ldr	r0, [pc, #52]	; (8005758 <MX_ADC3_Init+0x9c>)
 8005722:	f7fb fcc5 	bl	80010b0 <HAL_ADC_Init>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800572c:	f001 ffd0 	bl	80076d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005730:	2301      	movs	r3, #1
 8005732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005734:	2301      	movs	r3, #1
 8005736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800573c:	463b      	mov	r3, r7
 800573e:	4619      	mov	r1, r3
 8005740:	4805      	ldr	r0, [pc, #20]	; (8005758 <MX_ADC3_Init+0x9c>)
 8005742:	f7fb fe09 	bl	8001358 <HAL_ADC_ConfigChannel>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800574c:	f001 ffc0 	bl	80076d0 <Error_Handler>
  }

}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	2000a070 	.word	0x2000a070
 800575c:	40012200 	.word	0x40012200

08005760 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08e      	sub	sp, #56	; 0x38
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	60da      	str	r2, [r3, #12]
 8005776:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a8e      	ldr	r2, [pc, #568]	; (80059b8 <HAL_ADC_MspInit+0x258>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d158      	bne.n	8005834 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	4b8d      	ldr	r3, [pc, #564]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	4a8c      	ldr	r2, [pc, #560]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	6453      	str	r3, [r2, #68]	; 0x44
 8005792:	4b8a      	ldr	r3, [pc, #552]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	623b      	str	r3, [r7, #32]
 800579c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	4b86      	ldr	r3, [pc, #536]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	4a85      	ldr	r2, [pc, #532]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	6313      	str	r3, [r2, #48]	; 0x30
 80057ae:	4b83      	ldr	r3, [pc, #524]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057ba:	2301      	movs	r3, #1
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057be:	2303      	movs	r3, #3
 80057c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ca:	4619      	mov	r1, r3
 80057cc:	487c      	ldr	r0, [pc, #496]	; (80059c0 <HAL_ADC_MspInit+0x260>)
 80057ce:	f7fc fe19 	bl	8002404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80057d2:	4b7c      	ldr	r3, [pc, #496]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 80057d4:	4a7c      	ldr	r2, [pc, #496]	; (80059c8 <HAL_ADC_MspInit+0x268>)
 80057d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80057d8:	4b7a      	ldr	r3, [pc, #488]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 80057da:	2200      	movs	r2, #0
 80057dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057de:	4b79      	ldr	r3, [pc, #484]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80057e4:	4b77      	ldr	r3, [pc, #476]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80057ea:	4b76      	ldr	r3, [pc, #472]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 80057ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80057f2:	4b74      	ldr	r3, [pc, #464]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 80057f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80057fa:	4b72      	ldr	r3, [pc, #456]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 80057fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005800:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005802:	4b70      	ldr	r3, [pc, #448]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 8005804:	2200      	movs	r2, #0
 8005806:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005808:	4b6e      	ldr	r3, [pc, #440]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 800580a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800580e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005810:	4b6c      	ldr	r3, [pc, #432]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 8005812:	2200      	movs	r2, #0
 8005814:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005816:	486b      	ldr	r0, [pc, #428]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 8005818:	f7fc fa5c 	bl	8001cd4 <HAL_DMA_Init>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005822:	f001 ff55 	bl	80076d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a66      	ldr	r2, [pc, #408]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
 800582c:	4a65      	ldr	r2, [pc, #404]	; (80059c4 <HAL_ADC_MspInit+0x264>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8005832:	e0bc      	b.n	80059ae <HAL_ADC_MspInit+0x24e>
  else if(adcHandle->Instance==ADC2)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a64      	ldr	r2, [pc, #400]	; (80059cc <HAL_ADC_MspInit+0x26c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d159      	bne.n	80058f2 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	4b5e      	ldr	r3, [pc, #376]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	4a5d      	ldr	r2, [pc, #372]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584c:	6453      	str	r3, [r2, #68]	; 0x44
 800584e:	4b5b      	ldr	r3, [pc, #364]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005856:	61bb      	str	r3, [r7, #24]
 8005858:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	4b57      	ldr	r3, [pc, #348]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	4a56      	ldr	r2, [pc, #344]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	6313      	str	r3, [r2, #48]	; 0x30
 800586a:	4b54      	ldr	r3, [pc, #336]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005876:	2310      	movs	r3, #16
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800587a:	2303      	movs	r3, #3
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587e:	2300      	movs	r3, #0
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005886:	4619      	mov	r1, r3
 8005888:	484d      	ldr	r0, [pc, #308]	; (80059c0 <HAL_ADC_MspInit+0x260>)
 800588a:	f7fc fdbb 	bl	8002404 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800588e:	4b50      	ldr	r3, [pc, #320]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 8005890:	4a50      	ldr	r2, [pc, #320]	; (80059d4 <HAL_ADC_MspInit+0x274>)
 8005892:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005894:	4b4e      	ldr	r3, [pc, #312]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 8005896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800589a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800589c:	4b4c      	ldr	r3, [pc, #304]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 800589e:	2200      	movs	r2, #0
 80058a0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80058a2:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80058a8:	4b49      	ldr	r3, [pc, #292]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058ae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80058b0:	4b47      	ldr	r3, [pc, #284]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058b8:	4b45      	ldr	r3, [pc, #276]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058be:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80058c0:	4b43      	ldr	r3, [pc, #268]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80058c6:	4b42      	ldr	r3, [pc, #264]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058cc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058ce:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80058d4:	483e      	ldr	r0, [pc, #248]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058d6:	f7fc f9fd 	bl	8001cd4 <HAL_DMA_Init>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 80058e0:	f001 fef6 	bl	80076d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a3a      	ldr	r2, [pc, #232]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
 80058ea:	4a39      	ldr	r2, [pc, #228]	; (80059d0 <HAL_ADC_MspInit+0x270>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80058f0:	e05d      	b.n	80059ae <HAL_ADC_MspInit+0x24e>
  else if(adcHandle->Instance==ADC3)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a38      	ldr	r2, [pc, #224]	; (80059d8 <HAL_ADC_MspInit+0x278>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d158      	bne.n	80059ae <HAL_ADC_MspInit+0x24e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005904:	4a2d      	ldr	r2, [pc, #180]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800590a:	6453      	str	r3, [r2, #68]	; 0x44
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6313      	str	r3, [r2, #48]	; 0x30
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_ADC_MspInit+0x25c>)
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005934:	2302      	movs	r3, #2
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005938:	2303      	movs	r3, #3
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593c:	2300      	movs	r3, #0
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005944:	4619      	mov	r1, r3
 8005946:	481e      	ldr	r0, [pc, #120]	; (80059c0 <HAL_ADC_MspInit+0x260>)
 8005948:	f7fc fd5c 	bl	8002404 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800594c:	4b23      	ldr	r3, [pc, #140]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 800594e:	4a24      	ldr	r2, [pc, #144]	; (80059e0 <HAL_ADC_MspInit+0x280>)
 8005950:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8005952:	4b22      	ldr	r3, [pc, #136]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005954:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005958:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800595a:	4b20      	ldr	r3, [pc, #128]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 800595c:	2200      	movs	r2, #0
 800595e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005960:	4b1e      	ldr	r3, [pc, #120]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005962:	2200      	movs	r2, #0
 8005964:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800596c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800596e:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005974:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005976:	4b19      	ldr	r3, [pc, #100]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005978:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800597c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800597e:	4b17      	ldr	r3, [pc, #92]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005980:	2200      	movs	r2, #0
 8005982:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800598a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 800598e:	2200      	movs	r2, #0
 8005990:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005992:	4812      	ldr	r0, [pc, #72]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 8005994:	f7fc f99e 	bl	8001cd4 <HAL_DMA_Init>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_ADC_MspInit+0x242>
      Error_Handler();
 800599e:	f001 fe97 	bl	80076d0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a0d      	ldr	r2, [pc, #52]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
 80059a8:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <HAL_ADC_MspInit+0x27c>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6393      	str	r3, [r2, #56]	; 0x38
}
 80059ae:	bf00      	nop
 80059b0:	3738      	adds	r7, #56	; 0x38
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40012000 	.word	0x40012000
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40020000 	.word	0x40020000
 80059c4:	2000a0b8 	.word	0x2000a0b8
 80059c8:	40026410 	.word	0x40026410
 80059cc:	40012100 	.word	0x40012100
 80059d0:	2000a118 	.word	0x2000a118
 80059d4:	40026440 	.word	0x40026440
 80059d8:	40012200 	.word	0x40012200
 80059dc:	20009fc8 	.word	0x20009fc8
 80059e0:	40026428 	.word	0x40026428

080059e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80059e8:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <MX_CAN1_Init+0x60>)
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <MX_CAN1_Init+0x64>)
 80059ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80059ee:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <MX_CAN1_Init+0x60>)
 80059f0:	2210      	movs	r2, #16
 80059f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <MX_CAN1_Init+0x60>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <MX_CAN1_Init+0x60>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8005a00:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005a24:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005a30:	4804      	ldr	r0, [pc, #16]	; (8005a44 <MX_CAN1_Init+0x60>)
 8005a32:	f7fb ff41 	bl	80018b8 <HAL_CAN_Init>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8005a3c:	f001 fe48 	bl	80076d0 <Error_Handler>
  }

}
 8005a40:	bf00      	nop
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	2000a178 	.word	0x2000a178
 8005a48:	40006400 	.word	0x40006400

08005a4c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	60da      	str	r2, [r3, #12]
 8005a62:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <HAL_CAN_MspInit+0x84>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d12c      	bne.n	8005ac8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	4b18      	ldr	r3, [pc, #96]	; (8005ad4 <HAL_CAN_MspInit+0x88>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_CAN_MspInit+0x88>)
 8005a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <HAL_CAN_MspInit+0x88>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <HAL_CAN_MspInit+0x88>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <HAL_CAN_MspInit+0x88>)
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <HAL_CAN_MspInit+0x88>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005aa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aac:	2302      	movs	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005ab8:	2309      	movs	r3, #9
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005abc:	f107 0314 	add.w	r3, r7, #20
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4805      	ldr	r0, [pc, #20]	; (8005ad8 <HAL_CAN_MspInit+0x8c>)
 8005ac4:	f7fc fc9e 	bl	8002404 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3728      	adds	r7, #40	; 0x28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40006400 	.word	0x40006400
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40020000 	.word	0x40020000

08005adc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <MX_DMA_Init+0x5c>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <MX_DMA_Init+0x5c>)
 8005aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005af0:	6313      	str	r3, [r2, #48]	; 0x30
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <MX_DMA_Init+0x5c>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afa:	607b      	str	r3, [r7, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005afe:	2200      	movs	r2, #0
 8005b00:	2100      	movs	r1, #0
 8005b02:	2038      	movs	r0, #56	; 0x38
 8005b04:	f7fc f8af 	bl	8001c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005b08:	2038      	movs	r0, #56	; 0x38
 8005b0a:	f7fc f8c8 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2100      	movs	r1, #0
 8005b12:	2039      	movs	r0, #57	; 0x39
 8005b14:	f7fc f8a7 	bl	8001c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005b18:	2039      	movs	r0, #57	; 0x39
 8005b1a:	f7fc f8c0 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2100      	movs	r1, #0
 8005b22:	203a      	movs	r0, #58	; 0x3a
 8005b24:	f7fc f89f 	bl	8001c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005b28:	203a      	movs	r0, #58	; 0x3a
 8005b2a:	f7fc f8b8 	bl	8001c9e <HAL_NVIC_EnableIRQ>

}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40023800 	.word	0x40023800

08005b3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b42:	f107 0314 	add.w	r3, r7, #20
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	609a      	str	r2, [r3, #8]
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	4b3f      	ldr	r3, [pc, #252]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	4a3e      	ldr	r2, [pc, #248]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b5c:	f043 0304 	orr.w	r3, r3, #4
 8005b60:	6313      	str	r3, [r2, #48]	; 0x30
 8005b62:	4b3c      	ldr	r3, [pc, #240]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	4a37      	ldr	r2, [pc, #220]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7e:	4b35      	ldr	r3, [pc, #212]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	4a30      	ldr	r2, [pc, #192]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9a:	4b2e      	ldr	r3, [pc, #184]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	4a29      	ldr	r2, [pc, #164]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb6:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <MX_GPIO_Init+0x118>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	607b      	str	r3, [r7, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8005bc8:	4823      	ldr	r0, [pc, #140]	; (8005c58 <MX_GPIO_Init+0x11c>)
 8005bca:	f7fc fdad 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f241 0150 	movw	r1, #4176	; 0x1050
 8005bd4:	4821      	ldr	r0, [pc, #132]	; (8005c5c <MX_GPIO_Init+0x120>)
 8005bd6:	f7fc fda7 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005be0:	4b1f      	ldr	r3, [pc, #124]	; (8005c60 <MX_GPIO_Init+0x124>)
 8005be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005be8:	f107 0314 	add.w	r3, r7, #20
 8005bec:	4619      	mov	r1, r3
 8005bee:	481d      	ldr	r0, [pc, #116]	; (8005c64 <MX_GPIO_Init+0x128>)
 8005bf0:	f7fc fc08 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 8005bf4:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8005bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c02:	2300      	movs	r3, #0
 8005c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c06:	f107 0314 	add.w	r3, r7, #20
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4812      	ldr	r0, [pc, #72]	; (8005c58 <MX_GPIO_Init+0x11c>)
 8005c0e:	f7fc fbf9 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8005c12:	f241 0350 	movw	r3, #4176	; 0x1050
 8005c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c20:	2300      	movs	r3, #0
 8005c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c24:	f107 0314 	add.w	r3, r7, #20
 8005c28:	4619      	mov	r1, r3
 8005c2a:	480c      	ldr	r0, [pc, #48]	; (8005c5c <MX_GPIO_Init+0x120>)
 8005c2c:	f7fc fbea 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 8005c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 8005c3e:	f107 0314 	add.w	r3, r7, #20
 8005c42:	4619      	mov	r1, r3
 8005c44:	4804      	ldr	r0, [pc, #16]	; (8005c58 <MX_GPIO_Init+0x11c>)
 8005c46:	f7fc fbdd 	bl	8002404 <HAL_GPIO_Init>

}
 8005c4a:	bf00      	nop
 8005c4c:	3728      	adds	r7, #40	; 0x28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40023800 	.word	0x40023800
 8005c58:	40020000 	.word	0x40020000
 8005c5c:	40020400 	.word	0x40020400
 8005c60:	10210000 	.word	0x10210000
 8005c64:	40020800 	.word	0x40020800

08005c68 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 8005c72:	1df9      	adds	r1, r7, #7
 8005c74:	2301      	movs	r3, #1
 8005c76:	2201      	movs	r2, #1
 8005c78:	4803      	ldr	r0, [pc, #12]	; (8005c88 <__io_putchar+0x20>)
 8005c7a:	f7fe ff52 	bl	8004b22 <HAL_UART_Transmit>
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	2000a238 	.word	0x2000a238
 8005c8c:	00000000 	.word	0x00000000

08005c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]


	/********** for ASR ***********/

	int ASR_steps = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]

	float d_theta;

	float _omega_ref;

	float omega_error_integ_temp1 = 0.0f;
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
	float omega_error_integ_temp2 = 0.0f;
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	607b      	str	r3, [r7, #4]

	float p_theta_error = 0.0f;
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	603b      	str	r3, [r7, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005cb2:	f7fb f969 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005cb6:	f000 fa03 	bl	80060c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cba:	f7ff ff3f 	bl	8005b3c <MX_GPIO_Init>
  MX_DMA_Init();
 8005cbe:	f7ff ff0d 	bl	8005adc <MX_DMA_Init>
  MX_CAN1_Init();
 8005cc2:	f7ff fe8f 	bl	80059e4 <MX_CAN1_Init>
  MX_SPI2_Init();
 8005cc6:	f001 fd0b 	bl	80076e0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8005cca:	f002 f87d 	bl	8007dc8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8005cce:	f7ff fc51 	bl	8005574 <MX_ADC1_Init>
  MX_ADC2_Init();
 8005cd2:	f7ff fca1 	bl	8005618 <MX_ADC2_Init>
  MX_ADC3_Init();
 8005cd6:	f7ff fcf1 	bl	80056bc <MX_ADC3_Init>
  MX_TIM8_Init();
 8005cda:	f001 ff1b 	bl	8007b14 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */



  UartPrintf(&huart2, "Hello world\n");
 8005cde:	49b8      	ldr	r1, [pc, #736]	; (8005fc0 <main+0x330>)
 8005ce0:	48b8      	ldr	r0, [pc, #736]	; (8005fc4 <main+0x334>)
 8005ce2:	f001 fbf5 	bl	80074d0 <UartPrintf>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cec:	48b6      	ldr	r0, [pc, #728]	; (8005fc8 <main+0x338>)
 8005cee:	f7fc fd1b 	bl	8002728 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cf8:	48b3      	ldr	r0, [pc, #716]	; (8005fc8 <main+0x338>)
 8005cfa:	f7fc fd15 	bl	8002728 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8005cfe:	200a      	movs	r0, #10
 8005d00:	f7fb f9b4 	bl	800106c <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 8005d04:	2200      	movs	r2, #0
 8005d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d0a:	48af      	ldr	r0, [pc, #700]	; (8005fc8 <main+0x338>)
 8005d0c:	f7fc fd0c 	bl	8002728 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8005d10:	2200      	movs	r2, #0
 8005d12:	2140      	movs	r1, #64	; 0x40
 8005d14:	48ac      	ldr	r0, [pc, #688]	; (8005fc8 <main+0x338>)
 8005d16:	f7fc fd07 	bl	8002728 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2110      	movs	r1, #16
 8005d1e:	48ab      	ldr	r0, [pc, #684]	; (8005fcc <main+0x33c>)
 8005d20:	f7fc fd02 	bl	8002728 <HAL_GPIO_WritePin>



  // ADC Starting
  HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 8005d24:	2201      	movs	r2, #1
 8005d26:	49aa      	ldr	r1, [pc, #680]	; (8005fd0 <main+0x340>)
 8005d28:	48aa      	ldr	r0, [pc, #680]	; (8005fd4 <main+0x344>)
 8005d2a:	f7fb fa05 	bl	8001138 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 8005d2e:	2201      	movs	r2, #1
 8005d30:	49a9      	ldr	r1, [pc, #676]	; (8005fd8 <main+0x348>)
 8005d32:	48aa      	ldr	r0, [pc, #680]	; (8005fdc <main+0x34c>)
 8005d34:	f7fb fa00 	bl	8001138 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 8005d38:	2201      	movs	r2, #1
 8005d3a:	49a9      	ldr	r1, [pc, #676]	; (8005fe0 <main+0x350>)
 8005d3c:	48a9      	ldr	r0, [pc, #676]	; (8005fe4 <main+0x354>)
 8005d3e:	f7fb f9fb 	bl	8001138 <HAL_ADC_Start_DMA>
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8005d42:	4ba9      	ldr	r3, [pc, #676]	; (8005fe8 <main+0x358>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0201 	mvn.w	r2, #1
 8005d4a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8005d4c:	4ba6      	ldr	r3, [pc, #664]	; (8005fe8 <main+0x358>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	4ba5      	ldr	r3, [pc, #660]	; (8005fe8 <main+0x358>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	60da      	str	r2, [r3, #12]



  // 3phase PWM Starting
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	48a2      	ldr	r0, [pc, #648]	; (8005fe8 <main+0x358>)
 8005d60:	f7fd fe92 	bl	8003a88 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8005d64:	2104      	movs	r1, #4
 8005d66:	48a0      	ldr	r0, [pc, #640]	; (8005fe8 <main+0x358>)
 8005d68:	f7fd fe8e 	bl	8003a88 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 8005d6c:	2108      	movs	r1, #8
 8005d6e:	489e      	ldr	r0, [pc, #632]	; (8005fe8 <main+0x358>)
 8005d70:	f7fd fe8a 	bl	8003a88 <HAL_TIM_PWM_Start_IT>

  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 8005d74:	2100      	movs	r1, #0
 8005d76:	489c      	ldr	r0, [pc, #624]	; (8005fe8 <main+0x358>)
 8005d78:	f7fe fd61 	bl	800483e <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	489a      	ldr	r0, [pc, #616]	; (8005fe8 <main+0x358>)
 8005d80:	f7fe fd5d 	bl	800483e <HAL_TIMEx_PWMN_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 8005d84:	2108      	movs	r1, #8
 8005d86:	4898      	ldr	r0, [pc, #608]	; (8005fe8 <main+0x358>)
 8005d88:	f7fe fd59 	bl	800483e <HAL_TIMEx_PWMN_Start_IT>



  // SPI Interrupt Setting
  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 8005d8c:	4b97      	ldr	r3, [pc, #604]	; (8005fec <main+0x35c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	4b96      	ldr	r3, [pc, #600]	; (8005fec <main+0x35c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005d9a:	605a      	str	r2, [r3, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ASR_flg == 1)
 8005d9c:	4b94      	ldr	r3, [pc, #592]	; (8005ff0 <main+0x360>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d1fb      	bne.n	8005d9c <main+0x10c>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 8005da4:	2110      	movs	r1, #16
 8005da6:	4889      	ldr	r0, [pc, #548]	; (8005fcc <main+0x33c>)
 8005da8:	f7fc fcd7 	bl	800275a <HAL_GPIO_TogglePin>


		  if(forcedCommuteEnable == 1)
 8005dac:	4b91      	ldr	r3, [pc, #580]	; (8005ff4 <main+0x364>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d163      	bne.n	8005e7e <main+0x1ee>
		  {


			  if(forced_commute_step < 10000)
 8005db6:	4b90      	ldr	r3, [pc, #576]	; (8005ff8 <main+0x368>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f242 720f 	movw	r2, #9999	; 0x270f
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d830      	bhi.n	8005e24 <main+0x194>
			  {
				  sensedTheta[forced_commute_step] = theta;
 8005dc2:	4b8d      	ldr	r3, [pc, #564]	; (8005ff8 <main+0x368>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a8d      	ldr	r2, [pc, #564]	; (8005ffc <main+0x36c>)
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	498d      	ldr	r1, [pc, #564]	; (8006000 <main+0x370>)
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	601a      	str	r2, [r3, #0]
				  forced_theta = forced_commute_step * 2.0f * M_PI / FORCED_COMMUTE_STEPS;
 8005dd2:	4b89      	ldr	r3, [pc, #548]	; (8005ff8 <main+0x368>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005de2:	ee17 0a90 	vmov	r0, s15
 8005de6:	f7fa fbcf 	bl	8000588 <__aeabi_f2d>
 8005dea:	a369      	add	r3, pc, #420	; (adr r3, 8005f90 <main+0x300>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f7fa fc22 	bl	8000638 <__aeabi_dmul>
 8005df4:	4603      	mov	r3, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	a366      	add	r3, pc, #408	; (adr r3, 8005f98 <main+0x308>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa fd43 	bl	800088c <__aeabi_ddiv>
 8005e06:	4603      	mov	r3, r0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	f7fa feeb 	bl	8000be8 <__aeabi_d2f>
 8005e12:	4602      	mov	r2, r0
 8005e14:	4b7b      	ldr	r3, [pc, #492]	; (8006004 <main+0x374>)
 8005e16:	601a      	str	r2, [r3, #0]
				  forced_commute_step += 1;
 8005e18:	4b77      	ldr	r3, [pc, #476]	; (8005ff8 <main+0x368>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	4a76      	ldr	r2, [pc, #472]	; (8005ff8 <main+0x368>)
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e02c      	b.n	8005e7e <main+0x1ee>
			  }
			  else
			  {
				  forcedCommuteEnable = 0;
 8005e24:	4b73      	ldr	r3, [pc, #460]	; (8005ff4 <main+0x364>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
				  break;
 8005e2a:	bf00      	nop


  }


  Id_ref = 0.0f;
 8005e2c:	4b76      	ldr	r3, [pc, #472]	; (8006008 <main+0x378>)
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
  Iq_ref = 0.0f;
 8005e34:	4b75      	ldr	r3, [pc, #468]	; (800600c <main+0x37c>)
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

  HAL_Delay(10);
 8005e3c:	200a      	movs	r0, #10
 8005e3e:	f7fb f915 	bl	800106c <HAL_Delay>

  // Gate Disable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_RESET);
 8005e42:	2200      	movs	r2, #0
 8005e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e48:	485f      	ldr	r0, [pc, #380]	; (8005fc8 <main+0x338>)
 8005e4a:	f7fc fc6d 	bl	8002728 <HAL_GPIO_WritePin>

  HAL_Delay(10);
 8005e4e:	200a      	movs	r0, #10
 8005e50:	f7fb f90c 	bl	800106c <HAL_Delay>

  // 3phase PWM Stopping
  HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8005e54:	2100      	movs	r1, #0
 8005e56:	4864      	ldr	r0, [pc, #400]	; (8005fe8 <main+0x358>)
 8005e58:	f7fd fe9a 	bl	8003b90 <HAL_TIM_PWM_Stop_IT>
  HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_2);
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	4862      	ldr	r0, [pc, #392]	; (8005fe8 <main+0x358>)
 8005e60:	f7fd fe96 	bl	8003b90 <HAL_TIM_PWM_Stop_IT>
  HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_3);
 8005e64:	2108      	movs	r1, #8
 8005e66:	4860      	ldr	r0, [pc, #384]	; (8005fe8 <main+0x358>)
 8005e68:	f7fd fe92 	bl	8003b90 <HAL_TIM_PWM_Stop_IT>

  HAL_Delay(10);
 8005e6c:	200a      	movs	r0, #10
 8005e6e:	f7fb f8fd 	bl	800106c <HAL_Delay>

#if _FC_DUMP_

  printf("forcedTheta[rad], measuredTheta[rad]\n");
 8005e72:	4867      	ldr	r0, [pc, #412]	; (8006010 <main+0x380>)
 8005e74:	f002 fd62 	bl	800893c <puts>

  for(count = 0; count < FORCED_COMMUTE_STEPS; count++)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e107      	b.n	800608e <main+0x3fe>
		  if(ASR_steps <= 0)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	dc03      	bgt.n	8005e8c <main+0x1fc>
			  d_theta = 0.0f;
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e009      	b.n	8005ea0 <main+0x210>
			  d_theta = theta - p_theta;
 8005e8c:	4b5b      	ldr	r3, [pc, #364]	; (8005ffc <main+0x36c>)
 8005e8e:	ed93 7a00 	vldr	s14, [r3]
 8005e92:	4b60      	ldr	r3, [pc, #384]	; (8006014 <main+0x384>)
 8005e94:	edd3 7a00 	vldr	s15, [r3]
 8005e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e9c:	edc7 7a03 	vstr	s15, [r7, #12]
		  ASR_steps += 1;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
		  p_theta = theta;
 8005ea6:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <main+0x36c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a5a      	ldr	r2, [pc, #360]	; (8006014 <main+0x384>)
 8005eac:	6013      	str	r3, [r2, #0]
		  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7fa fb6a 	bl	8000588 <__aeabi_f2d>
 8005eb4:	a33a      	add	r3, pc, #232	; (adr r3, 8005fa0 <main+0x310>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f7fa fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d010      	beq.n	8005ee6 <main+0x256>
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7fa fb5f 	bl	8000588 <__aeabi_f2d>
 8005eca:	a337      	add	r3, pc, #220	; (adr r3, 8005fa8 <main+0x318>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa f9fc 	bl	80002cc <__adddf3>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	4621      	mov	r1, r4
 8005edc:	f7fa fe84 	bl	8000be8 <__aeabi_d2f>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e01a      	b.n	8005f1c <main+0x28c>
		  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7fa fb4e 	bl	8000588 <__aeabi_f2d>
 8005eec:	a328      	add	r3, pc, #160	; (adr r3, 8005f90 <main+0x300>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa fe31 	bl	8000b58 <__aeabi_dcmpgt>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00f      	beq.n	8005f1c <main+0x28c>
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7fa fb43 	bl	8000588 <__aeabi_f2d>
 8005f02:	a329      	add	r3, pc, #164	; (adr r3, 8005fa8 <main+0x318>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa f9de 	bl	80002c8 <__aeabi_dsub>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	4618      	mov	r0, r3
 8005f12:	4621      	mov	r1, r4
 8005f14:	f7fa fe68 	bl	8000be8 <__aeabi_d2f>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	60fb      	str	r3, [r7, #12]
		  omega = omega * 0.9 + 0.1 * d_theta / ASR_cycleTime;
 8005f1c:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <main+0x388>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fa fb31 	bl	8000588 <__aeabi_f2d>
 8005f26:	a322      	add	r3, pc, #136	; (adr r3, 8005fb0 <main+0x320>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f7fa fb84 	bl	8000638 <__aeabi_dmul>
 8005f30:	4603      	mov	r3, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	4625      	mov	r5, r4
 8005f36:	461c      	mov	r4, r3
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7fa fb25 	bl	8000588 <__aeabi_f2d>
 8005f3e:	a31e      	add	r3, pc, #120	; (adr r3, 8005fb8 <main+0x328>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa fb78 	bl	8000638 <__aeabi_dmul>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4690      	mov	r8, r2
 8005f4e:	4699      	mov	r9, r3
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <main+0x38c>)
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fa fb18 	bl	8000588 <__aeabi_f2d>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	4649      	mov	r1, r9
 8005f60:	f7fa fc94 	bl	800088c <__aeabi_ddiv>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa f9ae 	bl	80002cc <__adddf3>
 8005f70:	4603      	mov	r3, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	4618      	mov	r0, r3
 8005f76:	4621      	mov	r1, r4
 8005f78:	f7fa fe36 	bl	8000be8 <__aeabi_d2f>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b26      	ldr	r3, [pc, #152]	; (8006018 <main+0x388>)
 8005f80:	601a      	str	r2, [r3, #0]
		  ASR_flg = 0;
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <main+0x360>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 8005f88:	e708      	b.n	8005d9c <main+0x10c>
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w
 8005f90:	54442d18 	.word	0x54442d18
 8005f94:	400921fb 	.word	0x400921fb
 8005f98:	00000000 	.word	0x00000000
 8005f9c:	40c38800 	.word	0x40c38800
 8005fa0:	54442d18 	.word	0x54442d18
 8005fa4:	c00921fb 	.word	0xc00921fb
 8005fa8:	54442d18 	.word	0x54442d18
 8005fac:	401921fb 	.word	0x401921fb
 8005fb0:	cccccccd 	.word	0xcccccccd
 8005fb4:	3feccccc 	.word	0x3feccccc
 8005fb8:	9999999a 	.word	0x9999999a
 8005fbc:	3fb99999 	.word	0x3fb99999
 8005fc0:	0800bd28 	.word	0x0800bd28
 8005fc4:	2000a238 	.word	0x2000a238
 8005fc8:	40020000 	.word	0x40020000
 8005fcc:	40020400 	.word	0x40020400
 8005fd0:	20009e90 	.word	0x20009e90
 8005fd4:	2000a028 	.word	0x2000a028
 8005fd8:	20009e94 	.word	0x20009e94
 8005fdc:	20009f80 	.word	0x20009f80
 8005fe0:	20009e98 	.word	0x20009e98
 8005fe4:	2000a070 	.word	0x2000a070
 8005fe8:	2000a1f8 	.word	0x2000a1f8
 8005fec:	2000a1a0 	.word	0x2000a1a0
 8005ff0:	20009eec 	.word	0x20009eec
 8005ff4:	2000000c 	.word	0x2000000c
 8005ff8:	2000024c 	.word	0x2000024c
 8005ffc:	2000022c 	.word	0x2000022c
 8006000:	20000250 	.word	0x20000250
 8006004:	20000240 	.word	0x20000240
 8006008:	20009ed4 	.word	0x20009ed4
 800600c:	20009ed8 	.word	0x20009ed8
 8006010:	0800bd38 	.word	0x0800bd38
 8006014:	20000238 	.word	0x20000238
 8006018:	2000023c 	.word	0x2000023c
 800601c:	3a83126f 	.word	0x3a83126f
  {
	  printFloat(count * 2.0f * M_PI / FORCED_COMMUTE_STEPS);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800602a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800602e:	ee17 0a90 	vmov	r0, s15
 8006032:	f7fa faa9 	bl	8000588 <__aeabi_f2d>
 8006036:	a31e      	add	r3, pc, #120	; (adr r3, 80060b0 <main+0x420>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f7fa fafc 	bl	8000638 <__aeabi_dmul>
 8006040:	4603      	mov	r3, r0
 8006042:	460c      	mov	r4, r1
 8006044:	4618      	mov	r0, r3
 8006046:	4621      	mov	r1, r4
 8006048:	a31b      	add	r3, pc, #108	; (adr r3, 80060b8 <main+0x428>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fc1d 	bl	800088c <__aeabi_ddiv>
 8006052:	4603      	mov	r3, r0
 8006054:	460c      	mov	r4, r1
 8006056:	4618      	mov	r0, r3
 8006058:	4621      	mov	r1, r4
 800605a:	f7fa fdc5 	bl	8000be8 <__aeabi_d2f>
 800605e:	4603      	mov	r3, r0
 8006060:	ee00 3a10 	vmov	s0, r3
 8006064:	f001 fa60 	bl	8007528 <printFloat>
	  printf(", ");
 8006068:	480f      	ldr	r0, [pc, #60]	; (80060a8 <main+0x418>)
 800606a:	f002 fbdf 	bl	800882c <iprintf>
	  printFloat(sensedTheta[count]);
 800606e:	4a0f      	ldr	r2, [pc, #60]	; (80060ac <main+0x41c>)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	edd3 7a00 	vldr	s15, [r3]
 800607a:	eeb0 0a67 	vmov.f32	s0, s15
 800607e:	f001 fa53 	bl	8007528 <printFloat>
	  printf("\n");
 8006082:	200a      	movs	r0, #10
 8006084:	f002 fbea 	bl	800885c <putchar>
  for(count = 0; count < FORCED_COMMUTE_STEPS; count++)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	3301      	adds	r3, #1
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f242 720f 	movw	r2, #9999	; 0x270f
 8006094:	4293      	cmp	r3, r2
 8006096:	ddc3      	ble.n	8006020 <main+0x390>
 8006098:	2300      	movs	r3, #0




  /* USER CODE END 3 */
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060a4:	f3af 8000 	nop.w
 80060a8:	0800bd60 	.word	0x0800bd60
 80060ac:	20000250 	.word	0x20000250
 80060b0:	54442d18 	.word	0x54442d18
 80060b4:	400921fb 	.word	0x400921fb
 80060b8:	00000000 	.word	0x00000000
 80060bc:	40c38800 	.word	0x40c38800

080060c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b094      	sub	sp, #80	; 0x50
 80060c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060c6:	f107 031c 	add.w	r3, r7, #28
 80060ca:	2234      	movs	r2, #52	; 0x34
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 ff48 	bl	8007f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060d4:	f107 0308 	add.w	r3, r7, #8
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060e4:	2300      	movs	r3, #0
 80060e6:	607b      	str	r3, [r7, #4]
 80060e8:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <SystemClock_Config+0xd4>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	4a29      	ldr	r2, [pc, #164]	; (8006194 <SystemClock_Config+0xd4>)
 80060ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6413      	str	r3, [r2, #64]	; 0x40
 80060f4:	4b27      	ldr	r3, [pc, #156]	; (8006194 <SystemClock_Config+0xd4>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006100:	2300      	movs	r3, #0
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	4b24      	ldr	r3, [pc, #144]	; (8006198 <SystemClock_Config+0xd8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800610c:	4a22      	ldr	r2, [pc, #136]	; (8006198 <SystemClock_Config+0xd8>)
 800610e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	4b20      	ldr	r3, [pc, #128]	; (8006198 <SystemClock_Config+0xd8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006120:	2302      	movs	r3, #2
 8006122:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006124:	2301      	movs	r3, #1
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006128:	2310      	movs	r3, #16
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800612c:	2302      	movs	r3, #2
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006130:	2300      	movs	r3, #0
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006134:	2310      	movs	r3, #16
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006138:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800613e:	2304      	movs	r3, #4
 8006140:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006142:	2302      	movs	r3, #2
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006146:	2302      	movs	r3, #2
 8006148:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800614a:	f107 031c 	add.w	r3, r7, #28
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc fdd4 	bl	8002cfc <HAL_RCC_OscConfig>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800615a:	f001 fab9 	bl	80076d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800615e:	230f      	movs	r3, #15
 8006160:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006162:	2302      	movs	r3, #2
 8006164:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800616a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800616e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006170:	2300      	movs	r3, #0
 8006172:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	2102      	movs	r1, #2
 800617a:	4618      	mov	r0, r3
 800617c:	f7fc fb08 	bl	8002790 <HAL_RCC_ClockConfig>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8006186:	f001 faa3 	bl	80076d0 <Error_Handler>
  }
}
 800618a:	bf00      	nop
 800618c:	3750      	adds	r7, #80	; 0x50
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40023800 	.word	0x40023800
 8006198:	40007000 	.word	0x40007000

0800619c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a07      	ldr	r2, [pc, #28]	; (80061c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d001      	beq.n	80061c0 <HAL_TIM_PeriodElapsedCallback+0x24>
		{

			currentControl();
 80061bc:	f000 f808 	bl	80061d0 <currentControl>
		}


	}

}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40010400 	.word	0x40010400
 80061cc:	00000000 	.word	0x00000000

080061d0 <currentControl>:




inline static void currentControl(void)
{
 80061d0:	b598      	push	{r3, r4, r7, lr}
 80061d2:	af00      	add	r7, sp, #0
	static float Id_error_integ_temp2 = 0.0f;
	static float Iq_error_integ_temp1 = 0.0f;
	static float Iq_error_integ_temp2 = 0.0f;


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 80061d4:	2201      	movs	r2, #1
 80061d6:	2140      	movs	r1, #64	; 0x40
 80061d8:	48c3      	ldr	r0, [pc, #780]	; (80064e8 <currentControl+0x318>)
 80061da:	f7fc faa5 	bl	8002728 <HAL_GPIO_WritePin>
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 80061de:	2201      	movs	r2, #1
 80061e0:	49c2      	ldr	r1, [pc, #776]	; (80064ec <currentControl+0x31c>)
 80061e2:	48c3      	ldr	r0, [pc, #780]	; (80064f0 <currentControl+0x320>)
 80061e4:	f7fa ffa8 	bl	8001138 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 80061e8:	2201      	movs	r2, #1
 80061ea:	49c2      	ldr	r1, [pc, #776]	; (80064f4 <currentControl+0x324>)
 80061ec:	48c2      	ldr	r0, [pc, #776]	; (80064f8 <currentControl+0x328>)
 80061ee:	f7fa ffa3 	bl	8001138 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 80061f2:	2201      	movs	r2, #1
 80061f4:	49c1      	ldr	r1, [pc, #772]	; (80064fc <currentControl+0x32c>)
 80061f6:	48c2      	ldr	r0, [pc, #776]	; (8006500 <currentControl+0x330>)
 80061f8:	f7fa ff9e 	bl	8001138 <HAL_ADC_Start_DMA>


	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80061fc:	2201      	movs	r2, #1
 80061fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006202:	48b9      	ldr	r0, [pc, #740]	; (80064e8 <currentControl+0x318>)
 8006204:	f7fc fa90 	bl	8002728 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 8006208:	4bbe      	ldr	r3, [pc, #760]	; (8006504 <currentControl+0x334>)
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006214:	4abb      	ldr	r2, [pc, #748]	; (8006504 <currentControl+0x334>)
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	4313      	orrs	r3, r2
 800621c:	461a      	mov	r2, r3
 800621e:	4bba      	ldr	r3, [pc, #744]	; (8006508 <currentControl+0x338>)
 8006220:	601a      	str	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + THETA_OFFSET;
 8006222:	4bb9      	ldr	r3, [pc, #740]	; (8006508 <currentControl+0x338>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800622e:	eddf 6ab7 	vldr	s13, [pc, #732]	; 800650c <currentControl+0x33c>
 8006232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006236:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800623a:	ee17 0a90 	vmov	r0, s15
 800623e:	f7fa f9a3 	bl	8000588 <__aeabi_f2d>
 8006242:	a3a3      	add	r3, pc, #652	; (adr r3, 80064d0 <currentControl+0x300>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7fa f9f6 	bl	8000638 <__aeabi_dmul>
 800624c:	4603      	mov	r3, r0
 800624e:	460c      	mov	r4, r1
 8006250:	4618      	mov	r0, r3
 8006252:	4621      	mov	r1, r4
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	f7fa f836 	bl	80002cc <__adddf3>
 8006260:	4603      	mov	r3, r0
 8006262:	460c      	mov	r4, r1
 8006264:	4618      	mov	r0, r3
 8006266:	4621      	mov	r1, r4
 8006268:	f7fa fcbe 	bl	8000be8 <__aeabi_d2f>
 800626c:	4602      	mov	r2, r0
 800626e:	4ba8      	ldr	r3, [pc, #672]	; (8006510 <currentControl+0x340>)
 8006270:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 8006272:	4ba7      	ldr	r3, [pc, #668]	; (8006510 <currentControl+0x340>)
 8006274:	edd3 7a00 	vldr	s15, [r3]
 8006278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006280:	d513      	bpl.n	80062aa <currentControl+0xda>
 8006282:	4ba3      	ldr	r3, [pc, #652]	; (8006510 <currentControl+0x340>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fa f97e 	bl	8000588 <__aeabi_f2d>
 800628c:	a392      	add	r3, pc, #584	; (adr r3, 80064d8 <currentControl+0x308>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa f81b 	bl	80002cc <__adddf3>
 8006296:	4603      	mov	r3, r0
 8006298:	460c      	mov	r4, r1
 800629a:	4618      	mov	r0, r3
 800629c:	4621      	mov	r1, r4
 800629e:	f7fa fca3 	bl	8000be8 <__aeabi_d2f>
 80062a2:	4602      	mov	r2, r0
 80062a4:	4b9b      	ldr	r3, [pc, #620]	; (8006514 <currentControl+0x344>)
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e024      	b.n	80062f4 <currentControl+0x124>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 80062aa:	4b99      	ldr	r3, [pc, #612]	; (8006510 <currentControl+0x340>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fa f96a 	bl	8000588 <__aeabi_f2d>
 80062b4:	a388      	add	r3, pc, #544	; (adr r3, 80064d8 <currentControl+0x308>)
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f7fa fc43 	bl	8000b44 <__aeabi_dcmpge>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d013      	beq.n	80062ec <currentControl+0x11c>
 80062c4:	4b92      	ldr	r3, [pc, #584]	; (8006510 <currentControl+0x340>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fa f95d 	bl	8000588 <__aeabi_f2d>
 80062ce:	a382      	add	r3, pc, #520	; (adr r3, 80064d8 <currentControl+0x308>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7f9 fff8 	bl	80002c8 <__aeabi_dsub>
 80062d8:	4603      	mov	r3, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	4618      	mov	r0, r3
 80062de:	4621      	mov	r1, r4
 80062e0:	f7fa fc82 	bl	8000be8 <__aeabi_d2f>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b8b      	ldr	r3, [pc, #556]	; (8006514 <currentControl+0x344>)
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e003      	b.n	80062f4 <currentControl+0x124>
	else						theta = _theta;
 80062ec:	4b88      	ldr	r3, [pc, #544]	; (8006510 <currentControl+0x340>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a88      	ldr	r2, [pc, #544]	; (8006514 <currentControl+0x344>)
 80062f2:	6013      	str	r3, [r2, #0]


	// calculate sin(theta_re), cos(theta_re)
	if(forcedCommuteEnable == 1)
 80062f4:	4b88      	ldr	r3, [pc, #544]	; (8006518 <currentControl+0x348>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	f040 8082 	bne.w	8006404 <currentControl+0x234>
	{

		_forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 8006300:	4b86      	ldr	r3, [pc, #536]	; (800651c <currentControl+0x34c>)
 8006302:	edd3 7a00 	vldr	s15, [r3]
 8006306:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800630a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800630e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006312:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006316:	eddf 0a82 	vldr	s1, [pc, #520]	; 8006520 <currentControl+0x350>
 800631a:	eeb0 0a66 	vmov.f32	s0, s13
 800631e:	f004 fd29 	bl	800ad74 <fmodf>
 8006322:	eef0 7a40 	vmov.f32	s15, s0
 8006326:	4b7f      	ldr	r3, [pc, #508]	; (8006524 <currentControl+0x354>)
 8006328:	edc3 7a00 	vstr	s15, [r3]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 800632c:	4b7d      	ldr	r3, [pc, #500]	; (8006524 <currentControl+0x354>)
 800632e:	edd3 7a00 	vldr	s15, [r3]
 8006332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633a:	d513      	bpl.n	8006364 <currentControl+0x194>
 800633c:	4b79      	ldr	r3, [pc, #484]	; (8006524 <currentControl+0x354>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f7fa f921 	bl	8000588 <__aeabi_f2d>
 8006346:	a364      	add	r3, pc, #400	; (adr r3, 80064d8 <currentControl+0x308>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ffbe 	bl	80002cc <__adddf3>
 8006350:	4603      	mov	r3, r0
 8006352:	460c      	mov	r4, r1
 8006354:	4618      	mov	r0, r3
 8006356:	4621      	mov	r1, r4
 8006358:	f7fa fc46 	bl	8000be8 <__aeabi_d2f>
 800635c:	4602      	mov	r2, r0
 800635e:	4b72      	ldr	r3, [pc, #456]	; (8006528 <currentControl+0x358>)
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e024      	b.n	80063ae <currentControl+0x1de>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 8006364:	4b6f      	ldr	r3, [pc, #444]	; (8006524 <currentControl+0x354>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fa f90d 	bl	8000588 <__aeabi_f2d>
 800636e:	a35a      	add	r3, pc, #360	; (adr r3, 80064d8 <currentControl+0x308>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f7fa fbe6 	bl	8000b44 <__aeabi_dcmpge>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d013      	beq.n	80063a6 <currentControl+0x1d6>
 800637e:	4b69      	ldr	r3, [pc, #420]	; (8006524 <currentControl+0x354>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f7fa f900 	bl	8000588 <__aeabi_f2d>
 8006388:	a353      	add	r3, pc, #332	; (adr r3, 80064d8 <currentControl+0x308>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7f9 ff9b 	bl	80002c8 <__aeabi_dsub>
 8006392:	4603      	mov	r3, r0
 8006394:	460c      	mov	r4, r1
 8006396:	4618      	mov	r0, r3
 8006398:	4621      	mov	r1, r4
 800639a:	f7fa fc25 	bl	8000be8 <__aeabi_d2f>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b61      	ldr	r3, [pc, #388]	; (8006528 <currentControl+0x358>)
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	e003      	b.n	80063ae <currentControl+0x1de>
		else									forced_theta_re = _forced_theta_re;
 80063a6:	4b5f      	ldr	r3, [pc, #380]	; (8006524 <currentControl+0x354>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a5f      	ldr	r2, [pc, #380]	; (8006528 <currentControl+0x358>)
 80063ac:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 80063ae:	4b5e      	ldr	r3, [pc, #376]	; (8006528 <currentControl+0x358>)
 80063b0:	edd3 7a00 	vldr	s15, [r3]
 80063b4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800652c <currentControl+0x35c>
 80063b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80063c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063c4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8006530 <currentControl+0x360>
 80063c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d0:	ee17 3a90 	vmov	r3, s15
 80063d4:	4a57      	ldr	r2, [pc, #348]	; (8006534 <currentControl+0x364>)
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a56      	ldr	r2, [pc, #344]	; (8006538 <currentControl+0x368>)
 80063de:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 80063e0:	4b51      	ldr	r3, [pc, #324]	; (8006528 <currentControl+0x358>)
 80063e2:	edd3 7a00 	vldr	s15, [r3]
 80063e6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800653c <currentControl+0x36c>
 80063ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063f2:	ee17 3a90 	vmov	r3, s15
 80063f6:	4a4f      	ldr	r2, [pc, #316]	; (8006534 <currentControl+0x364>)
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a50      	ldr	r2, [pc, #320]	; (8006540 <currentControl+0x370>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e0f4      	b.n	80065ee <currentControl+0x41e>
	}
	else
	{

		_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + THETA_RE_OFFSET;
 8006404:	4b40      	ldr	r3, [pc, #256]	; (8006508 <currentControl+0x338>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	ee07 3a90 	vmov	s15, r3
 800640c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006410:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800650c <currentControl+0x33c>
 8006414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006418:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800641c:	ee17 0a90 	vmov	r0, s15
 8006420:	f7fa f8b2 	bl	8000588 <__aeabi_f2d>
 8006424:	a32a      	add	r3, pc, #168	; (adr r3, 80064d0 <currentControl+0x300>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7fa f905 	bl	8000638 <__aeabi_dmul>
 800642e:	4603      	mov	r3, r0
 8006430:	460c      	mov	r4, r1
 8006432:	4618      	mov	r0, r3
 8006434:	4621      	mov	r1, r4
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	4b42      	ldr	r3, [pc, #264]	; (8006544 <currentControl+0x374>)
 800643c:	f7fa f8fc 	bl	8000638 <__aeabi_dmul>
 8006440:	4603      	mov	r3, r0
 8006442:	460c      	mov	r4, r1
 8006444:	4618      	mov	r0, r3
 8006446:	4621      	mov	r1, r4
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006450:	f7fa fa1c 	bl	800088c <__aeabi_ddiv>
 8006454:	4603      	mov	r3, r0
 8006456:	460c      	mov	r4, r1
 8006458:	4618      	mov	r0, r3
 800645a:	4621      	mov	r1, r4
 800645c:	f7fa fbc4 	bl	8000be8 <__aeabi_d2f>
 8006460:	4603      	mov	r3, r0
 8006462:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8006520 <currentControl+0x350>
 8006466:	ee00 3a10 	vmov	s0, r3
 800646a:	f004 fc83 	bl	800ad74 <fmodf>
 800646e:	ee10 3a10 	vmov	r3, s0
 8006472:	4618      	mov	r0, r3
 8006474:	f7fa f888 	bl	8000588 <__aeabi_f2d>
 8006478:	a319      	add	r3, pc, #100	; (adr r3, 80064e0 <currentControl+0x310>)
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	f7f9 ff23 	bl	80002c8 <__aeabi_dsub>
 8006482:	4603      	mov	r3, r0
 8006484:	460c      	mov	r4, r1
 8006486:	4618      	mov	r0, r3
 8006488:	4621      	mov	r1, r4
 800648a:	f7fa fbad 	bl	8000be8 <__aeabi_d2f>
 800648e:	4602      	mov	r2, r0
 8006490:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <currentControl+0x378>)
 8006492:	601a      	str	r2, [r3, #0]

		if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 8006494:	4b2c      	ldr	r3, [pc, #176]	; (8006548 <currentControl+0x378>)
 8006496:	edd3 7a00 	vldr	s15, [r3]
 800649a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800649e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a2:	d555      	bpl.n	8006550 <currentControl+0x380>
 80064a4:	4b28      	ldr	r3, [pc, #160]	; (8006548 <currentControl+0x378>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fa f86d 	bl	8000588 <__aeabi_f2d>
 80064ae:	a30a      	add	r3, pc, #40	; (adr r3, 80064d8 <currentControl+0x308>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7f9 ff0a 	bl	80002cc <__adddf3>
 80064b8:	4603      	mov	r3, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	4618      	mov	r0, r3
 80064be:	4621      	mov	r1, r4
 80064c0:	f7fa fb92 	bl	8000be8 <__aeabi_d2f>
 80064c4:	4602      	mov	r2, r0
 80064c6:	4b21      	ldr	r3, [pc, #132]	; (800654c <currentControl+0x37c>)
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e066      	b.n	800659a <currentControl+0x3ca>
 80064cc:	f3af 8000 	nop.w
 80064d0:	54442d18 	.word	0x54442d18
 80064d4:	400921fb 	.word	0x400921fb
 80064d8:	54442d18 	.word	0x54442d18
 80064dc:	401921fb 	.word	0x401921fb
 80064e0:	f5c28f5c 	.word	0xf5c28f5c
 80064e4:	3ff75c28 	.word	0x3ff75c28
 80064e8:	40020400 	.word	0x40020400
 80064ec:	20009e90 	.word	0x20009e90
 80064f0:	2000a028 	.word	0x2000a028
 80064f4:	20009e94 	.word	0x20009e94
 80064f8:	20009f80 	.word	0x20009f80
 80064fc:	20009e98 	.word	0x20009e98
 8006500:	2000a070 	.word	0x2000a070
 8006504:	20000224 	.word	0x20000224
 8006508:	20000228 	.word	0x20000228
 800650c:	46800000 	.word	0x46800000
 8006510:	20009ef4 	.word	0x20009ef4
 8006514:	2000022c 	.word	0x2000022c
 8006518:	2000000c 	.word	0x2000000c
 800651c:	20000240 	.word	0x20000240
 8006520:	40c90fdb 	.word	0x40c90fdb
 8006524:	20000244 	.word	0x20000244
 8006528:	20000248 	.word	0x20000248
 800652c:	3ea2f838 	.word	0x3ea2f838
 8006530:	459c4000 	.word	0x459c4000
 8006534:	0800bd6c 	.word	0x0800bd6c
 8006538:	20000008 	.word	0x20000008
 800653c:	44c6f195 	.word	0x44c6f195
 8006540:	20000234 	.word	0x20000234
 8006544:	40360000 	.word	0x40360000
 8006548:	20009ef8 	.word	0x20009ef8
 800654c:	20000230 	.word	0x20000230
		else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8006550:	4bb3      	ldr	r3, [pc, #716]	; (8006820 <currentControl+0x650>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f7fa f817 	bl	8000588 <__aeabi_f2d>
 800655a:	a3af      	add	r3, pc, #700	; (adr r3, 8006818 <currentControl+0x648>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7fa faf0 	bl	8000b44 <__aeabi_dcmpge>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d013      	beq.n	8006592 <currentControl+0x3c2>
 800656a:	4bad      	ldr	r3, [pc, #692]	; (8006820 <currentControl+0x650>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7fa f80a 	bl	8000588 <__aeabi_f2d>
 8006574:	a3a8      	add	r3, pc, #672	; (adr r3, 8006818 <currentControl+0x648>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f7f9 fea5 	bl	80002c8 <__aeabi_dsub>
 800657e:	4603      	mov	r3, r0
 8006580:	460c      	mov	r4, r1
 8006582:	4618      	mov	r0, r3
 8006584:	4621      	mov	r1, r4
 8006586:	f7fa fb2f 	bl	8000be8 <__aeabi_d2f>
 800658a:	4602      	mov	r2, r0
 800658c:	4ba5      	ldr	r3, [pc, #660]	; (8006824 <currentControl+0x654>)
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e003      	b.n	800659a <currentControl+0x3ca>
		else							theta_re = _theta_re;
 8006592:	4ba3      	ldr	r3, [pc, #652]	; (8006820 <currentControl+0x650>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4aa3      	ldr	r2, [pc, #652]	; (8006824 <currentControl+0x654>)
 8006598:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800659a:	4ba2      	ldr	r3, [pc, #648]	; (8006824 <currentControl+0x654>)
 800659c:	edd3 7a00 	vldr	s15, [r3]
 80065a0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8006828 <currentControl+0x658>
 80065a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80065ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065b0:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800682c <currentControl+0x65c>
 80065b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065bc:	ee17 3a90 	vmov	r3, s15
 80065c0:	4a9b      	ldr	r2, [pc, #620]	; (8006830 <currentControl+0x660>)
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a9a      	ldr	r2, [pc, #616]	; (8006834 <currentControl+0x664>)
 80065ca:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 80065cc:	4b95      	ldr	r3, [pc, #596]	; (8006824 <currentControl+0x654>)
 80065ce:	edd3 7a00 	vldr	s15, [r3]
 80065d2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006838 <currentControl+0x668>
 80065d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065de:	ee17 3a90 	vmov	r3, s15
 80065e2:	4a93      	ldr	r2, [pc, #588]	; (8006830 <currentControl+0x660>)
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a94      	ldr	r2, [pc, #592]	; (800683c <currentControl+0x66c>)
 80065ec:	6013      	str	r3, [r2, #0]
	}



	AD_Iu_buf[pos_MAF_I] = (int32_t)AD_Iu - ADI_Offset;
 80065ee:	4b94      	ldr	r3, [pc, #592]	; (8006840 <currentControl+0x670>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	4b93      	ldr	r3, [pc, #588]	; (8006844 <currentControl+0x674>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b93      	ldr	r3, [pc, #588]	; (8006848 <currentControl+0x678>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	1a8a      	subs	r2, r1, r2
 80065fe:	4993      	ldr	r1, [pc, #588]	; (800684c <currentControl+0x67c>)
 8006600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AD_Iv_buf[pos_MAF_I] = (int32_t)AD_Iv - ADI_Offset;
 8006604:	4b92      	ldr	r3, [pc, #584]	; (8006850 <currentControl+0x680>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4619      	mov	r1, r3
 800660a:	4b8e      	ldr	r3, [pc, #568]	; (8006844 <currentControl+0x674>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4b8e      	ldr	r3, [pc, #568]	; (8006848 <currentControl+0x678>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1a8a      	subs	r2, r1, r2
 8006614:	498f      	ldr	r1, [pc, #572]	; (8006854 <currentControl+0x684>)
 8006616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AD_Iw_buf[pos_MAF_I] = (int32_t)AD_Iw - ADI_Offset;
 800661a:	4b8f      	ldr	r3, [pc, #572]	; (8006858 <currentControl+0x688>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	4b88      	ldr	r3, [pc, #544]	; (8006844 <currentControl+0x674>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b88      	ldr	r3, [pc, #544]	; (8006848 <currentControl+0x678>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	1a8a      	subs	r2, r1, r2
 800662a:	498c      	ldr	r1, [pc, #560]	; (800685c <currentControl+0x68c>)
 800662c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	AD_Iu_MAF += AD_Iu_buf[pos_MAF_I];
 8006630:	4b85      	ldr	r3, [pc, #532]	; (8006848 <currentControl+0x678>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a85      	ldr	r2, [pc, #532]	; (800684c <currentControl+0x67c>)
 8006636:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800663a:	4b89      	ldr	r3, [pc, #548]	; (8006860 <currentControl+0x690>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4413      	add	r3, r2
 8006640:	4a87      	ldr	r2, [pc, #540]	; (8006860 <currentControl+0x690>)
 8006642:	6013      	str	r3, [r2, #0]
	AD_Iv_MAF += AD_Iv_buf[pos_MAF_I];
 8006644:	4b80      	ldr	r3, [pc, #512]	; (8006848 <currentControl+0x678>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a82      	ldr	r2, [pc, #520]	; (8006854 <currentControl+0x684>)
 800664a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800664e:	4b85      	ldr	r3, [pc, #532]	; (8006864 <currentControl+0x694>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4413      	add	r3, r2
 8006654:	4a83      	ldr	r2, [pc, #524]	; (8006864 <currentControl+0x694>)
 8006656:	6013      	str	r3, [r2, #0]
	AD_Iw_MAF += AD_Iw_buf[pos_MAF_I];
 8006658:	4b7b      	ldr	r3, [pc, #492]	; (8006848 <currentControl+0x678>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a7f      	ldr	r2, [pc, #508]	; (800685c <currentControl+0x68c>)
 800665e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006662:	4b81      	ldr	r3, [pc, #516]	; (8006868 <currentControl+0x698>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4413      	add	r3, r2
 8006668:	4a7f      	ldr	r2, [pc, #508]	; (8006868 <currentControl+0x698>)
 800666a:	6013      	str	r3, [r2, #0]

	// Writing position Update
	pos_MAF_I += 1;
 800666c:	4b76      	ldr	r3, [pc, #472]	; (8006848 <currentControl+0x678>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	4a75      	ldr	r2, [pc, #468]	; (8006848 <currentControl+0x678>)
 8006674:	6013      	str	r3, [r2, #0]
	if(pos_MAF_I >= N_MAF_I)
 8006676:	4b74      	ldr	r3, [pc, #464]	; (8006848 <currentControl+0x678>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b01      	cmp	r3, #1
 800667c:	dd02      	ble.n	8006684 <currentControl+0x4b4>
	{
		pos_MAF_I = 0;
 800667e:	4b72      	ldr	r3, [pc, #456]	; (8006848 <currentControl+0x678>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
	}

	V_Iu = (float)AD_Iu_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iu_offset;
 8006684:	4b76      	ldr	r3, [pc, #472]	; (8006860 <currentControl+0x690>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	ee07 3a90 	vmov	s15, r3
 800668c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	ee07 3a90 	vmov	s15, r3
 800669a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800669e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a2:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800686c <currentControl+0x69c>
 80066a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066aa:	4b71      	ldr	r3, [pc, #452]	; (8006870 <currentControl+0x6a0>)
 80066ac:	edd3 7a00 	vldr	s15, [r3]
 80066b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b4:	4b6f      	ldr	r3, [pc, #444]	; (8006874 <currentControl+0x6a4>)
 80066b6:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iv_offset;
 80066ba:	4b6a      	ldr	r3, [pc, #424]	; (8006864 <currentControl+0x694>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80066c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066d8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800686c <currentControl+0x69c>
 80066dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066e0:	4b65      	ldr	r3, [pc, #404]	; (8006878 <currentControl+0x6a8>)
 80066e2:	edd3 7a00 	vldr	s15, [r3]
 80066e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ea:	4b64      	ldr	r3, [pc, #400]	; (800687c <currentControl+0x6ac>)
 80066ec:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MAF / (N_MAF_I * AD_Range) * Vref_AD + V_Iw_offset;
 80066f0:	4b5d      	ldr	r3, [pc, #372]	; (8006868 <currentControl+0x698>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80066fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800670a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800686c <currentControl+0x69c>
 8006712:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006716:	4b5a      	ldr	r3, [pc, #360]	; (8006880 <currentControl+0x6b0>)
 8006718:	edd3 7a00 	vldr	s15, [r3]
 800671c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006720:	4b58      	ldr	r3, [pc, #352]	; (8006884 <currentControl+0x6b4>)
 8006722:	edc3 7a00 	vstr	s15, [r3]

	AD_Iu_MAF -= AD_Iu_buf[pos_MAF_I];
 8006726:	4b4e      	ldr	r3, [pc, #312]	; (8006860 <currentControl+0x690>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b47      	ldr	r3, [pc, #284]	; (8006848 <currentControl+0x678>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4947      	ldr	r1, [pc, #284]	; (800684c <currentControl+0x67c>)
 8006730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	4a4a      	ldr	r2, [pc, #296]	; (8006860 <currentControl+0x690>)
 8006738:	6013      	str	r3, [r2, #0]
	AD_Iv_MAF -= AD_Iv_buf[pos_MAF_I];
 800673a:	4b4a      	ldr	r3, [pc, #296]	; (8006864 <currentControl+0x694>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b42      	ldr	r3, [pc, #264]	; (8006848 <currentControl+0x678>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4944      	ldr	r1, [pc, #272]	; (8006854 <currentControl+0x684>)
 8006744:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	4a46      	ldr	r2, [pc, #280]	; (8006864 <currentControl+0x694>)
 800674c:	6013      	str	r3, [r2, #0]
	AD_Iw_MAF -= AD_Iw_buf[pos_MAF_I];
 800674e:	4b46      	ldr	r3, [pc, #280]	; (8006868 <currentControl+0x698>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b3d      	ldr	r3, [pc, #244]	; (8006848 <currentControl+0x678>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4941      	ldr	r1, [pc, #260]	; (800685c <currentControl+0x68c>)
 8006758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	4a42      	ldr	r2, [pc, #264]	; (8006868 <currentControl+0x698>)
 8006760:	6013      	str	r3, [r2, #0]
	V_Iv = V_Iv * 0.9 + 0.1 * ((float)(ADI_Offset - (int32_t)AD_Iv) / AD_Range * Vref_AD - V_Iv_offset);
	V_Iw = V_Iw * 0.9 + 0.1 * ((float)(ADI_Offset - (int32_t)AD_Iw) / AD_Range * Vref_AD - V_Iw_offset);
	*/


	switch(sector_SVM)
 8006762:	4b49      	ldr	r3, [pc, #292]	; (8006888 <currentControl+0x6b8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b05      	cmp	r3, #5
 8006768:	f200 80b8 	bhi.w	80068dc <currentControl+0x70c>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <currentControl+0x5a4>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	0800678d 	.word	0x0800678d
 8006778:	080067d1 	.word	0x080067d1
 800677c:	080067d1 	.word	0x080067d1
 8006780:	08006899 	.word	0x08006899
 8006784:	08006899 	.word	0x08006899
 8006788:	0800678d 	.word	0x0800678d
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 800678c:	4b3b      	ldr	r3, [pc, #236]	; (800687c <currentControl+0x6ac>)
 800678e:	edd3 7a00 	vldr	s15, [r3]
 8006792:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800679a:	4b3c      	ldr	r3, [pc, #240]	; (800688c <currentControl+0x6bc>)
 800679c:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 80067a0:	4b38      	ldr	r3, [pc, #224]	; (8006884 <currentControl+0x6b4>)
 80067a2:	edd3 7a00 	vldr	s15, [r3]
 80067a6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80067aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067ae:	4b38      	ldr	r3, [pc, #224]	; (8006890 <currentControl+0x6c0>)
 80067b0:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 80067b4:	4b35      	ldr	r3, [pc, #212]	; (800688c <currentControl+0x6bc>)
 80067b6:	edd3 7a00 	vldr	s15, [r3]
 80067ba:	eeb1 7a67 	vneg.f32	s14, s15
 80067be:	4b34      	ldr	r3, [pc, #208]	; (8006890 <currentControl+0x6c0>)
 80067c0:	edd3 7a00 	vldr	s15, [r3]
 80067c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067c8:	4b32      	ldr	r3, [pc, #200]	; (8006894 <currentControl+0x6c4>)
 80067ca:	edc3 7a00 	vstr	s15, [r3]
		break;
 80067ce:	e085      	b.n	80068dc <currentControl+0x70c>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 80067d0:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <currentControl+0x6b4>)
 80067d2:	edd3 7a00 	vldr	s15, [r3]
 80067d6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80067da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067de:	4b2c      	ldr	r3, [pc, #176]	; (8006890 <currentControl+0x6c0>)
 80067e0:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 80067e4:	4b23      	ldr	r3, [pc, #140]	; (8006874 <currentControl+0x6a4>)
 80067e6:	edd3 7a00 	vldr	s15, [r3]
 80067ea:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80067ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067f2:	4b28      	ldr	r3, [pc, #160]	; (8006894 <currentControl+0x6c4>)
 80067f4:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <currentControl+0x6c0>)
 80067fa:	edd3 7a00 	vldr	s15, [r3]
 80067fe:	eeb1 7a67 	vneg.f32	s14, s15
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <currentControl+0x6c4>)
 8006804:	edd3 7a00 	vldr	s15, [r3]
 8006808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800680c:	4b1f      	ldr	r3, [pc, #124]	; (800688c <currentControl+0x6bc>)
 800680e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006812:	e063      	b.n	80068dc <currentControl+0x70c>
 8006814:	f3af 8000 	nop.w
 8006818:	54442d18 	.word	0x54442d18
 800681c:	401921fb 	.word	0x401921fb
 8006820:	20009ef8 	.word	0x20009ef8
 8006824:	20000230 	.word	0x20000230
 8006828:	3ea2f838 	.word	0x3ea2f838
 800682c:	459c4000 	.word	0x459c4000
 8006830:	0800bd6c 	.word	0x0800bd6c
 8006834:	20000008 	.word	0x20000008
 8006838:	44c6f195 	.word	0x44c6f195
 800683c:	20000234 	.word	0x20000234
 8006840:	20009e90 	.word	0x20009e90
 8006844:	20000010 	.word	0x20000010
 8006848:	20009efc 	.word	0x20009efc
 800684c:	20009f00 	.word	0x20009f00
 8006850:	20009e94 	.word	0x20009e94
 8006854:	20009f08 	.word	0x20009f08
 8006858:	20009e98 	.word	0x20009e98
 800685c:	20009f10 	.word	0x20009f10
 8006860:	20009f18 	.word	0x20009f18
 8006864:	20009f1c 	.word	0x20009f1c
 8006868:	20009f20 	.word	0x20009f20
 800686c:	40533333 	.word	0x40533333
 8006870:	20000014 	.word	0x20000014
 8006874:	20009e9c 	.word	0x20009e9c
 8006878:	20000018 	.word	0x20000018
 800687c:	20009ea0 	.word	0x20009ea0
 8006880:	2000001c 	.word	0x2000001c
 8006884:	20009ea4 	.word	0x20009ea4
 8006888:	20009eb0 	.word	0x20009eb0
 800688c:	20009ecc 	.word	0x20009ecc
 8006890:	20009ed0 	.word	0x20009ed0
 8006894:	20009ec8 	.word	0x20009ec8

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 8006898:	4bab      	ldr	r3, [pc, #684]	; (8006b48 <currentControl+0x978>)
 800689a:	edd3 7a00 	vldr	s15, [r3]
 800689e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80068a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068a6:	4ba9      	ldr	r3, [pc, #676]	; (8006b4c <currentControl+0x97c>)
 80068a8:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 80068ac:	4ba8      	ldr	r3, [pc, #672]	; (8006b50 <currentControl+0x980>)
 80068ae:	edd3 7a00 	vldr	s15, [r3]
 80068b2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80068b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068ba:	4ba6      	ldr	r3, [pc, #664]	; (8006b54 <currentControl+0x984>)
 80068bc:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 80068c0:	4ba2      	ldr	r3, [pc, #648]	; (8006b4c <currentControl+0x97c>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	eeb1 7a67 	vneg.f32	s14, s15
 80068ca:	4ba2      	ldr	r3, [pc, #648]	; (8006b54 <currentControl+0x984>)
 80068cc:	edd3 7a00 	vldr	s15, [r3]
 80068d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d4:	4ba0      	ldr	r3, [pc, #640]	; (8006b58 <currentControl+0x988>)
 80068d6:	edc3 7a00 	vstr	s15, [r3]
		break;
 80068da:	bf00      	nop
	}

	Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 80068dc:	4b9b      	ldr	r3, [pc, #620]	; (8006b4c <currentControl+0x97c>)
 80068de:	ed93 7a00 	vldr	s14, [r3]
 80068e2:	4b9e      	ldr	r3, [pc, #632]	; (8006b5c <currentControl+0x98c>)
 80068e4:	edd3 7a00 	vldr	s15, [r3]
 80068e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068ec:	4b9b      	ldr	r3, [pc, #620]	; (8006b5c <currentControl+0x98c>)
 80068ee:	edd3 7a00 	vldr	s15, [r3]
 80068f2:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80068f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80068fa:	4b99      	ldr	r3, [pc, #612]	; (8006b60 <currentControl+0x990>)
 80068fc:	edd3 7a00 	vldr	s15, [r3]
 8006900:	ed9f 6a98 	vldr	s12, [pc, #608]	; 8006b64 <currentControl+0x994>
 8006904:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006908:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800690c:	4b91      	ldr	r3, [pc, #580]	; (8006b54 <currentControl+0x984>)
 800690e:	edd3 7a00 	vldr	s15, [r3]
 8006912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800691a:	4b90      	ldr	r3, [pc, #576]	; (8006b5c <currentControl+0x98c>)
 800691c:	edd3 7a00 	vldr	s15, [r3]
 8006920:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006924:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006928:	4b8d      	ldr	r3, [pc, #564]	; (8006b60 <currentControl+0x990>)
 800692a:	edd3 7a00 	vldr	s15, [r3]
 800692e:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8006b64 <currentControl+0x994>
 8006932:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006936:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800693a:	4b87      	ldr	r3, [pc, #540]	; (8006b58 <currentControl+0x988>)
 800693c:	edd3 7a00 	vldr	s15, [r3]
 8006940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006948:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8006b68 <currentControl+0x998>
 800694c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006950:	4b86      	ldr	r3, [pc, #536]	; (8006b6c <currentControl+0x99c>)
 8006952:	edc3 7a00 	vstr	s15, [r3]
	Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 8006956:	4b7d      	ldr	r3, [pc, #500]	; (8006b4c <currentControl+0x97c>)
 8006958:	edd3 7a00 	vldr	s15, [r3]
 800695c:	eeb1 7a67 	vneg.f32	s14, s15
 8006960:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <currentControl+0x990>)
 8006962:	edd3 7a00 	vldr	s15, [r3]
 8006966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800696a:	4b7d      	ldr	r3, [pc, #500]	; (8006b60 <currentControl+0x990>)
 800696c:	edd3 7a00 	vldr	s15, [r3]
 8006970:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006974:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006978:	4b78      	ldr	r3, [pc, #480]	; (8006b5c <currentControl+0x98c>)
 800697a:	edd3 7a00 	vldr	s15, [r3]
 800697e:	ed9f 6a79 	vldr	s12, [pc, #484]	; 8006b64 <currentControl+0x994>
 8006982:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006986:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800698a:	4b72      	ldr	r3, [pc, #456]	; (8006b54 <currentControl+0x984>)
 800698c:	edd3 7a00 	vldr	s15, [r3]
 8006990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006994:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006998:	4b71      	ldr	r3, [pc, #452]	; (8006b60 <currentControl+0x990>)
 800699a:	edd3 7a00 	vldr	s15, [r3]
 800699e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80069a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80069a6:	4b6d      	ldr	r3, [pc, #436]	; (8006b5c <currentControl+0x98c>)
 80069a8:	edd3 7a00 	vldr	s15, [r3]
 80069ac:	ed9f 6a6d 	vldr	s12, [pc, #436]	; 8006b64 <currentControl+0x994>
 80069b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80069b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80069b8:	4b67      	ldr	r3, [pc, #412]	; (8006b58 <currentControl+0x988>)
 80069ba:	edd3 7a00 	vldr	s15, [r3]
 80069be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069c6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006b68 <currentControl+0x998>
 80069ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069ce:	4b68      	ldr	r3, [pc, #416]	; (8006b70 <currentControl+0x9a0>)
 80069d0:	edc3 7a00 	vstr	s15, [r3]


	if(theta_re < M_PI)
 80069d4:	4b67      	ldr	r3, [pc, #412]	; (8006b74 <currentControl+0x9a4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7f9 fdd5 	bl	8000588 <__aeabi_f2d>
 80069de:	a358      	add	r3, pc, #352	; (adr r3, 8006b40 <currentControl+0x970>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f7fa f89a 	bl	8000b1c <__aeabi_dcmplt>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <currentControl+0x82a>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80069ee:	2200      	movs	r2, #0
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	4861      	ldr	r0, [pc, #388]	; (8006b78 <currentControl+0x9a8>)
 80069f4:	f7fb fe98 	bl	8002728 <HAL_GPIO_WritePin>
 80069f8:	e004      	b.n	8006a04 <currentControl+0x834>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 80069fa:	2201      	movs	r2, #1
 80069fc:	2140      	movs	r1, #64	; 0x40
 80069fe:	485e      	ldr	r0, [pc, #376]	; (8006b78 <currentControl+0x9a8>)
 8006a00:	f7fb fe92 	bl	8002728 <HAL_GPIO_WritePin>

	/********** ACR (Auto Current Regulator) **********/

#if _ACR_ENABLE_

	if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 8006a04:	4b5d      	ldr	r3, [pc, #372]	; (8006b7c <currentControl+0x9ac>)
 8006a06:	edd3 7a00 	vldr	s15, [r3]
 8006a0a:	eeb1 7a67 	vneg.f32	s14, s15
 8006a0e:	4b5c      	ldr	r3, [pc, #368]	; (8006b80 <currentControl+0x9b0>)
 8006a10:	edd3 7a00 	vldr	s15, [r3]
 8006a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a1c:	dd08      	ble.n	8006a30 <currentControl+0x860>
 8006a1e:	4b57      	ldr	r3, [pc, #348]	; (8006b7c <currentControl+0x9ac>)
 8006a20:	edd3 7a00 	vldr	s15, [r3]
 8006a24:	eef1 7a67 	vneg.f32	s15, s15
 8006a28:	4b56      	ldr	r3, [pc, #344]	; (8006b84 <currentControl+0x9b4>)
 8006a2a:	edc3 7a00 	vstr	s15, [r3]
 8006a2e:	e013      	b.n	8006a58 <currentControl+0x888>
	else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 8006a30:	4b53      	ldr	r3, [pc, #332]	; (8006b80 <currentControl+0x9b0>)
 8006a32:	ed93 7a00 	vldr	s14, [r3]
 8006a36:	4b51      	ldr	r3, [pc, #324]	; (8006b7c <currentControl+0x9ac>)
 8006a38:	edd3 7a00 	vldr	s15, [r3]
 8006a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a44:	dd04      	ble.n	8006a50 <currentControl+0x880>
 8006a46:	4b4d      	ldr	r3, [pc, #308]	; (8006b7c <currentControl+0x9ac>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a4e      	ldr	r2, [pc, #312]	; (8006b84 <currentControl+0x9b4>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e003      	b.n	8006a58 <currentControl+0x888>
	else						_Id_ref = Id_ref;
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <currentControl+0x9b0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a4b      	ldr	r2, [pc, #300]	; (8006b84 <currentControl+0x9b4>)
 8006a56:	6013      	str	r3, [r2, #0]

	if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 8006a58:	4b4b      	ldr	r3, [pc, #300]	; (8006b88 <currentControl+0x9b8>)
 8006a5a:	edd3 7a00 	vldr	s15, [r3]
 8006a5e:	eeb1 7a67 	vneg.f32	s14, s15
 8006a62:	4b4a      	ldr	r3, [pc, #296]	; (8006b8c <currentControl+0x9bc>)
 8006a64:	edd3 7a00 	vldr	s15, [r3]
 8006a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a70:	dd08      	ble.n	8006a84 <currentControl+0x8b4>
 8006a72:	4b45      	ldr	r3, [pc, #276]	; (8006b88 <currentControl+0x9b8>)
 8006a74:	edd3 7a00 	vldr	s15, [r3]
 8006a78:	eef1 7a67 	vneg.f32	s15, s15
 8006a7c:	4b44      	ldr	r3, [pc, #272]	; (8006b90 <currentControl+0x9c0>)
 8006a7e:	edc3 7a00 	vstr	s15, [r3]
 8006a82:	e013      	b.n	8006aac <currentControl+0x8dc>
	else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 8006a84:	4b41      	ldr	r3, [pc, #260]	; (8006b8c <currentControl+0x9bc>)
 8006a86:	ed93 7a00 	vldr	s14, [r3]
 8006a8a:	4b3f      	ldr	r3, [pc, #252]	; (8006b88 <currentControl+0x9b8>)
 8006a8c:	edd3 7a00 	vldr	s15, [r3]
 8006a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a98:	dd04      	ble.n	8006aa4 <currentControl+0x8d4>
 8006a9a:	4b3b      	ldr	r3, [pc, #236]	; (8006b88 <currentControl+0x9b8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a3c      	ldr	r2, [pc, #240]	; (8006b90 <currentControl+0x9c0>)
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e003      	b.n	8006aac <currentControl+0x8dc>
	else						_Iq_ref = Iq_ref;
 8006aa4:	4b39      	ldr	r3, [pc, #228]	; (8006b8c <currentControl+0x9bc>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a39      	ldr	r2, [pc, #228]	; (8006b90 <currentControl+0x9c0>)
 8006aaa:	6013      	str	r3, [r2, #0]

	if(forcedCommuteEnable == 1)
 8006aac:	4b39      	ldr	r3, [pc, #228]	; (8006b94 <currentControl+0x9c4>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d114      	bne.n	8006ae0 <currentControl+0x910>
	{
		Id_error = forced_I_gamma_ref - Id;
 8006ab6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006b98 <currentControl+0x9c8>
 8006aba:	4b2c      	ldr	r3, [pc, #176]	; (8006b6c <currentControl+0x99c>)
 8006abc:	edd3 7a00 	vldr	s15, [r3]
 8006ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac4:	4b35      	ldr	r3, [pc, #212]	; (8006b9c <currentControl+0x9cc>)
 8006ac6:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = forced_I_delta_ref - Iq;
 8006aca:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006ace:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <currentControl+0x9a0>)
 8006ad0:	edd3 7a00 	vldr	s15, [r3]
 8006ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad8:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <currentControl+0x9d0>)
 8006ada:	edc3 7a00 	vstr	s15, [r3]
 8006ade:	e015      	b.n	8006b0c <currentControl+0x93c>
	}
	else
	{
		Id_error = _Id_ref - Id;
 8006ae0:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <currentControl+0x9b4>)
 8006ae2:	ed93 7a00 	vldr	s14, [r3]
 8006ae6:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <currentControl+0x99c>)
 8006ae8:	edd3 7a00 	vldr	s15, [r3]
 8006aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af0:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <currentControl+0x9cc>)
 8006af2:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 8006af6:	4b26      	ldr	r3, [pc, #152]	; (8006b90 <currentControl+0x9c0>)
 8006af8:	ed93 7a00 	vldr	s14, [r3]
 8006afc:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <currentControl+0x9a0>)
 8006afe:	edd3 7a00 	vldr	s15, [r3]
 8006b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b06:	4b26      	ldr	r3, [pc, #152]	; (8006ba0 <currentControl+0x9d0>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]
	}


	// integral
	Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 8006b0c:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <currentControl+0x9cc>)
 8006b0e:	ed93 7a00 	vldr	s14, [r3]
 8006b12:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <currentControl+0x9d4>)
 8006b14:	edd3 7a00 	vldr	s15, [r3]
 8006b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b1c:	4b22      	ldr	r3, [pc, #136]	; (8006ba8 <currentControl+0x9d8>)
 8006b1e:	edc3 7a00 	vstr	s15, [r3]
	if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 8006b22:	4b21      	ldr	r3, [pc, #132]	; (8006ba8 <currentControl+0x9d8>)
 8006b24:	edd3 7a00 	vldr	s15, [r3]
 8006b28:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006bac <currentControl+0x9dc>
 8006b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b34:	d53e      	bpl.n	8006bb4 <currentControl+0x9e4>
 8006b36:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <currentControl+0x9d8>)
 8006b38:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <currentControl+0x9e0>)
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e047      	b.n	8006bce <currentControl+0x9fe>
 8006b3e:	bf00      	nop
 8006b40:	54442d18 	.word	0x54442d18
 8006b44:	400921fb 	.word	0x400921fb
 8006b48:	20009e9c 	.word	0x20009e9c
 8006b4c:	20009ec8 	.word	0x20009ec8
 8006b50:	20009ea0 	.word	0x20009ea0
 8006b54:	20009ecc 	.word	0x20009ecc
 8006b58:	20009ed0 	.word	0x20009ed0
 8006b5c:	20000008 	.word	0x20000008
 8006b60:	20000234 	.word	0x20000234
 8006b64:	3f5ae148 	.word	0x3f5ae148
 8006b68:	3f510625 	.word	0x3f510625
 8006b6c:	20009ec0 	.word	0x20009ec0
 8006b70:	20009ec4 	.word	0x20009ec4
 8006b74:	20000230 	.word	0x20000230
 8006b78:	40020000 	.word	0x40020000
 8006b7c:	20000024 	.word	0x20000024
 8006b80:	20009ed4 	.word	0x20009ed4
 8006b84:	20009f24 	.word	0x20009f24
 8006b88:	20000028 	.word	0x20000028
 8006b8c:	20009ed8 	.word	0x20009ed8
 8006b90:	20009f28 	.word	0x20009f28
 8006b94:	2000000c 	.word	0x2000000c
 8006b98:	00000000 	.word	0x00000000
 8006b9c:	20009edc 	.word	0x20009edc
 8006ba0:	20009ee0 	.word	0x20009ee0
 8006ba4:	20009f2c 	.word	0x20009f2c
 8006ba8:	20009f30 	.word	0x20009f30
 8006bac:	c9742400 	.word	0xc9742400
 8006bb0:	c9742400 	.word	0xc9742400
	else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 8006bb4:	4b58      	ldr	r3, [pc, #352]	; (8006d18 <currentControl+0xb48>)
 8006bb6:	edd3 7a00 	vldr	s15, [r3]
 8006bba:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006d1c <currentControl+0xb4c>
 8006bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc6:	dd02      	ble.n	8006bce <currentControl+0x9fe>
 8006bc8:	4b53      	ldr	r3, [pc, #332]	; (8006d18 <currentControl+0xb48>)
 8006bca:	4a55      	ldr	r2, [pc, #340]	; (8006d20 <currentControl+0xb50>)
 8006bcc:	601a      	str	r2, [r3, #0]
	Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 8006bce:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006d24 <currentControl+0xb54>
 8006bd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bda:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <currentControl+0xb48>)
 8006bdc:	edd3 6a00 	vldr	s13, [r3]
 8006be0:	4b51      	ldr	r3, [pc, #324]	; (8006d28 <currentControl+0xb58>)
 8006be2:	edd3 7a00 	vldr	s15, [r3]
 8006be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bee:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <currentControl+0xb5c>)
 8006bf0:	edc3 7a00 	vstr	s15, [r3]
	Id_error_integ_temp2 = Id_error_integ_temp1;
 8006bf4:	4b48      	ldr	r3, [pc, #288]	; (8006d18 <currentControl+0xb48>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a4b      	ldr	r2, [pc, #300]	; (8006d28 <currentControl+0xb58>)
 8006bfa:	6013      	str	r3, [r2, #0]

	Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 8006bfc:	4b4c      	ldr	r3, [pc, #304]	; (8006d30 <currentControl+0xb60>)
 8006bfe:	ed93 7a00 	vldr	s14, [r3]
 8006c02:	4b4c      	ldr	r3, [pc, #304]	; (8006d34 <currentControl+0xb64>)
 8006c04:	edd3 7a00 	vldr	s15, [r3]
 8006c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c0c:	4b4a      	ldr	r3, [pc, #296]	; (8006d38 <currentControl+0xb68>)
 8006c0e:	edc3 7a00 	vstr	s15, [r3]
	if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 8006c12:	4b49      	ldr	r3, [pc, #292]	; (8006d38 <currentControl+0xb68>)
 8006c14:	edd3 7a00 	vldr	s15, [r3]
 8006c18:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006d3c <currentControl+0xb6c>
 8006c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c24:	d503      	bpl.n	8006c2e <currentControl+0xa5e>
 8006c26:	4b44      	ldr	r3, [pc, #272]	; (8006d38 <currentControl+0xb68>)
 8006c28:	4a45      	ldr	r2, [pc, #276]	; (8006d40 <currentControl+0xb70>)
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e00c      	b.n	8006c48 <currentControl+0xa78>
	else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 8006c2e:	4b42      	ldr	r3, [pc, #264]	; (8006d38 <currentControl+0xb68>)
 8006c30:	edd3 7a00 	vldr	s15, [r3]
 8006c34:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006d1c <currentControl+0xb4c>
 8006c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c40:	dd02      	ble.n	8006c48 <currentControl+0xa78>
 8006c42:	4b3d      	ldr	r3, [pc, #244]	; (8006d38 <currentControl+0xb68>)
 8006c44:	4a36      	ldr	r2, [pc, #216]	; (8006d20 <currentControl+0xb50>)
 8006c46:	601a      	str	r2, [r3, #0]
	Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 8006c48:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006d24 <currentControl+0xb54>
 8006c4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c54:	4b38      	ldr	r3, [pc, #224]	; (8006d38 <currentControl+0xb68>)
 8006c56:	edd3 6a00 	vldr	s13, [r3]
 8006c5a:	4b36      	ldr	r3, [pc, #216]	; (8006d34 <currentControl+0xb64>)
 8006c5c:	edd3 7a00 	vldr	s15, [r3]
 8006c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c68:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <currentControl+0xb74>)
 8006c6a:	edc3 7a00 	vstr	s15, [r3]
	Iq_error_integ_temp2 = Iq_error_integ_temp1;
 8006c6e:	4b32      	ldr	r3, [pc, #200]	; (8006d38 <currentControl+0xb68>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a30      	ldr	r2, [pc, #192]	; (8006d34 <currentControl+0xb64>)
 8006c74:	6013      	str	r3, [r2, #0]


	Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 8006c76:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006d48 <currentControl+0xb78>
 8006c7a:	4b34      	ldr	r3, [pc, #208]	; (8006d4c <currentControl+0xb7c>)
 8006c7c:	edd3 7a00 	vldr	s15, [r3]
 8006c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c84:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006d50 <currentControl+0xb80>
 8006c88:	4b28      	ldr	r3, [pc, #160]	; (8006d2c <currentControl+0xb5c>)
 8006c8a:	edd3 7a00 	vldr	s15, [r3]
 8006c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c96:	4b2f      	ldr	r3, [pc, #188]	; (8006d54 <currentControl+0xb84>)
 8006c98:	edc3 7a00 	vstr	s15, [r3]
	Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 8006c9c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006d48 <currentControl+0xb78>
 8006ca0:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <currentControl+0xb60>)
 8006ca2:	edd3 7a00 	vldr	s15, [r3]
 8006ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006caa:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006d50 <currentControl+0xb80>
 8006cae:	4b25      	ldr	r3, [pc, #148]	; (8006d44 <currentControl+0xb74>)
 8006cb0:	edd3 7a00 	vldr	s15, [r3]
 8006cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cbc:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <currentControl+0xb88>)
 8006cbe:	edc3 7a00 	vstr	s15, [r3]
#endif

	/********* end of ACR **********/


	setSVM_dq();
 8006cc2:	f000 f857 	bl	8006d74 <setSVM_dq>

#endif


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 8006cc6:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <currentControl+0xb8c>)
 8006cc8:	22ff      	movs	r2, #255	; 0xff
 8006cca:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 8006ccc:	4b23      	ldr	r3, [pc, #140]	; (8006d5c <currentControl+0xb8c>)
 8006cce:	22ff      	movs	r2, #255	; 0xff
 8006cd0:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cd8:	4821      	ldr	r0, [pc, #132]	; (8006d60 <currentControl+0xb90>)
 8006cda:	f7fb fd25 	bl	8002728 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <currentControl+0xb94>)
 8006ce2:	491e      	ldr	r1, [pc, #120]	; (8006d5c <currentControl+0xb8c>)
 8006ce4:	4820      	ldr	r0, [pc, #128]	; (8006d68 <currentControl+0xb98>)
 8006ce6:	f7fc fac7 	bl	8003278 <HAL_SPI_TransmitReceive_IT>


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 8006cea:	4b20      	ldr	r3, [pc, #128]	; (8006d6c <currentControl+0xb9c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <currentControl+0xb9c>)
 8006cf2:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <currentControl+0xb9c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	220a      	movs	r2, #10
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	db05      	blt.n	8006d0a <currentControl+0xb3a>
	{
		ASR_flg = 1;
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <currentControl+0xba0>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 8006d04:	4b19      	ldr	r3, [pc, #100]	; (8006d6c <currentControl+0xb9c>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2140      	movs	r1, #64	; 0x40
 8006d0e:	4814      	ldr	r0, [pc, #80]	; (8006d60 <currentControl+0xb90>)
 8006d10:	f7fb fd0a 	bl	8002728 <HAL_GPIO_WritePin>

	return;
 8006d14:	bf00      	nop
}
 8006d16:	bd98      	pop	{r3, r4, r7, pc}
 8006d18:	20009f30 	.word	0x20009f30
 8006d1c:	49742400 	.word	0x49742400
 8006d20:	49742400 	.word	0x49742400
 8006d24:	38d1b717 	.word	0x38d1b717
 8006d28:	20009f2c 	.word	0x20009f2c
 8006d2c:	20009ee4 	.word	0x20009ee4
 8006d30:	20009ee0 	.word	0x20009ee0
 8006d34:	20009f34 	.word	0x20009f34
 8006d38:	20009f38 	.word	0x20009f38
 8006d3c:	c9742400 	.word	0xc9742400
 8006d40:	c9742400 	.word	0xc9742400
 8006d44:	20009ee8 	.word	0x20009ee8
 8006d48:	3e99999a 	.word	0x3e99999a
 8006d4c:	20009edc 	.word	0x20009edc
 8006d50:	43960000 	.word	0x43960000
 8006d54:	20009ea8 	.word	0x20009ea8
 8006d58:	20009eac 	.word	0x20009eac
 8006d5c:	20000220 	.word	0x20000220
 8006d60:	40020400 	.word	0x40020400
 8006d64:	20000224 	.word	0x20000224
 8006d68:	2000a1a0 	.word	0x2000a1a0
 8006d6c:	20009ef0 	.word	0x20009ef0
 8006d70:	20009eec 	.word	0x20009eec

08006d74 <setSVM_dq>:


inline static void setSVM_dq()
{
 8006d74:	b5b0      	push	{r4, r5, r7, lr}
 8006d76:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 8006d78:	4bb8      	ldr	r3, [pc, #736]	; (800705c <setSVM_dq+0x2e8>)
 8006d7a:	ed93 7a00 	vldr	s14, [r3]
 8006d7e:	4bb8      	ldr	r3, [pc, #736]	; (8007060 <setSVM_dq+0x2ec>)
 8006d80:	edd3 7a00 	vldr	s15, [r3]
 8006d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d88:	4bb6      	ldr	r3, [pc, #728]	; (8007064 <setSVM_dq+0x2f0>)
 8006d8a:	edd3 6a00 	vldr	s13, [r3]
 8006d8e:	4bb6      	ldr	r3, [pc, #728]	; (8007068 <setSVM_dq+0x2f4>)
 8006d90:	edd3 7a00 	vldr	s15, [r3]
 8006d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d9c:	4bb3      	ldr	r3, [pc, #716]	; (800706c <setSVM_dq+0x2f8>)
 8006d9e:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 8006da2:	4bae      	ldr	r3, [pc, #696]	; (800705c <setSVM_dq+0x2e8>)
 8006da4:	ed93 7a00 	vldr	s14, [r3]
 8006da8:	4baf      	ldr	r3, [pc, #700]	; (8007068 <setSVM_dq+0x2f4>)
 8006daa:	edd3 7a00 	vldr	s15, [r3]
 8006dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006db2:	4bac      	ldr	r3, [pc, #688]	; (8007064 <setSVM_dq+0x2f0>)
 8006db4:	edd3 6a00 	vldr	s13, [r3]
 8006db8:	4ba9      	ldr	r3, [pc, #676]	; (8007060 <setSVM_dq+0x2ec>)
 8006dba:	edd3 7a00 	vldr	s15, [r3]
 8006dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dc6:	4baa      	ldr	r3, [pc, #680]	; (8007070 <setSVM_dq+0x2fc>)
 8006dc8:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 8006dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dd0:	4ba7      	ldr	r3, [pc, #668]	; (8007070 <setSVM_dq+0x2fc>)
 8006dd2:	edd3 7a00 	vldr	s15, [r3]
 8006dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006dda:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8007074 <setSVM_dq+0x300>
 8006dde:	4ba3      	ldr	r3, [pc, #652]	; (800706c <setSVM_dq+0x2f8>)
 8006de0:	edd3 7a00 	vldr	s15, [r3]
 8006de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dec:	4ba2      	ldr	r3, [pc, #648]	; (8007078 <setSVM_dq+0x304>)
 8006dee:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8006df2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006df6:	4b9e      	ldr	r3, [pc, #632]	; (8007070 <setSVM_dq+0x2fc>)
 8006df8:	edd3 7a00 	vldr	s15, [r3]
 8006dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e00:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800707c <setSVM_dq+0x308>
 8006e04:	4b99      	ldr	r3, [pc, #612]	; (800706c <setSVM_dq+0x2f8>)
 8006e06:	edd3 7a00 	vldr	s15, [r3]
 8006e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e12:	4b9b      	ldr	r3, [pc, #620]	; (8007080 <setSVM_dq+0x30c>)
 8006e14:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8006e18:	4b97      	ldr	r3, [pc, #604]	; (8007078 <setSVM_dq+0x304>)
 8006e1a:	edd3 7a00 	vldr	s15, [r3]
 8006e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e26:	db1e      	blt.n	8006e66 <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8006e28:	4b95      	ldr	r3, [pc, #596]	; (8007080 <setSVM_dq+0x30c>)
 8006e2a:	edd3 7a00 	vldr	s15, [r3]
 8006e2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e36:	d803      	bhi.n	8006e40 <setSVM_dq+0xcc>
 8006e38:	4b92      	ldr	r3, [pc, #584]	; (8007084 <setSVM_dq+0x310>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e030      	b.n	8006ea2 <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8006e40:	4b8d      	ldr	r3, [pc, #564]	; (8007078 <setSVM_dq+0x304>)
 8006e42:	ed93 7a00 	vldr	s14, [r3]
 8006e46:	4b8e      	ldr	r3, [pc, #568]	; (8007080 <setSVM_dq+0x30c>)
 8006e48:	edd3 7a00 	vldr	s15, [r3]
 8006e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e54:	db03      	blt.n	8006e5e <setSVM_dq+0xea>
 8006e56:	4b8b      	ldr	r3, [pc, #556]	; (8007084 <setSVM_dq+0x310>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e021      	b.n	8006ea2 <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 8006e5e:	4b89      	ldr	r3, [pc, #548]	; (8007084 <setSVM_dq+0x310>)
 8006e60:	2202      	movs	r2, #2
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e01d      	b.n	8006ea2 <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 8006e66:	4b86      	ldr	r3, [pc, #536]	; (8007080 <setSVM_dq+0x30c>)
 8006e68:	edd3 7a00 	vldr	s15, [r3]
 8006e6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e74:	db03      	blt.n	8006e7e <setSVM_dq+0x10a>
 8006e76:	4b83      	ldr	r3, [pc, #524]	; (8007084 <setSVM_dq+0x310>)
 8006e78:	2203      	movs	r2, #3
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	e011      	b.n	8006ea2 <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 8006e7e:	4b7e      	ldr	r3, [pc, #504]	; (8007078 <setSVM_dq+0x304>)
 8006e80:	ed93 7a00 	vldr	s14, [r3]
 8006e84:	4b7e      	ldr	r3, [pc, #504]	; (8007080 <setSVM_dq+0x30c>)
 8006e86:	edd3 7a00 	vldr	s15, [r3]
 8006e8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e92:	d803      	bhi.n	8006e9c <setSVM_dq+0x128>
 8006e94:	4b7b      	ldr	r3, [pc, #492]	; (8007084 <setSVM_dq+0x310>)
 8006e96:	2204      	movs	r2, #4
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	e002      	b.n	8006ea2 <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 8006e9c:	4b79      	ldr	r3, [pc, #484]	; (8007084 <setSVM_dq+0x310>)
 8006e9e:	2205      	movs	r2, #5
 8006ea0:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 8006ea2:	4b78      	ldr	r3, [pc, #480]	; (8007084 <setSVM_dq+0x310>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a78      	ldr	r2, [pc, #480]	; (8007088 <setSVM_dq+0x314>)
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4413      	add	r3, r2
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a77      	ldr	r2, [pc, #476]	; (800708c <setSVM_dq+0x318>)
 8006eb0:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 8006eb2:	4b74      	ldr	r3, [pc, #464]	; (8007084 <setSVM_dq+0x310>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a74      	ldr	r2, [pc, #464]	; (8007088 <setSVM_dq+0x314>)
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a73      	ldr	r2, [pc, #460]	; (8007090 <setSVM_dq+0x31c>)
 8006ec2:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 8006ec4:	4b6f      	ldr	r3, [pc, #444]	; (8007084 <setSVM_dq+0x310>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	4a6f      	ldr	r2, [pc, #444]	; (8007088 <setSVM_dq+0x314>)
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a70      	ldr	r2, [pc, #448]	; (8007094 <setSVM_dq+0x320>)
 8006ed4:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 8006ed6:	4b6b      	ldr	r3, [pc, #428]	; (8007084 <setSVM_dq+0x310>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	4a6a      	ldr	r2, [pc, #424]	; (8007088 <setSVM_dq+0x314>)
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6c      	ldr	r2, [pc, #432]	; (8007098 <setSVM_dq+0x324>)
 8006ee8:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8006eea:	4b6b      	ldr	r3, [pc, #428]	; (8007098 <setSVM_dq+0x324>)
 8006eec:	ed93 7a00 	vldr	s14, [r3]
 8006ef0:	4b5e      	ldr	r3, [pc, #376]	; (800706c <setSVM_dq+0x2f8>)
 8006ef2:	edd3 7a00 	vldr	s15, [r3]
 8006ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006efa:	4b66      	ldr	r3, [pc, #408]	; (8007094 <setSVM_dq+0x320>)
 8006efc:	edd3 6a00 	vldr	s13, [r3]
 8006f00:	4b5b      	ldr	r3, [pc, #364]	; (8007070 <setSVM_dq+0x2fc>)
 8006f02:	edd3 7a00 	vldr	s15, [r3]
 8006f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f0e:	4b5f      	ldr	r3, [pc, #380]	; (800708c <setSVM_dq+0x318>)
 8006f10:	ed93 7a00 	vldr	s14, [r3]
 8006f14:	4b60      	ldr	r3, [pc, #384]	; (8007098 <setSVM_dq+0x324>)
 8006f16:	edd3 7a00 	vldr	s15, [r3]
 8006f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f1e:	4b5c      	ldr	r3, [pc, #368]	; (8007090 <setSVM_dq+0x31c>)
 8006f20:	ed93 6a00 	vldr	s12, [r3]
 8006f24:	4b5b      	ldr	r3, [pc, #364]	; (8007094 <setSVM_dq+0x320>)
 8006f26:	edd3 7a00 	vldr	s15, [r3]
 8006f2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006f2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f32:	4b5a      	ldr	r3, [pc, #360]	; (800709c <setSVM_dq+0x328>)
 8006f34:	edd3 7a00 	vldr	s15, [r3]
 8006f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f40:	4b57      	ldr	r3, [pc, #348]	; (80070a0 <setSVM_dq+0x32c>)
 8006f42:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8006f46:	4b52      	ldr	r3, [pc, #328]	; (8007090 <setSVM_dq+0x31c>)
 8006f48:	edd3 7a00 	vldr	s15, [r3]
 8006f4c:	eeb1 7a67 	vneg.f32	s14, s15
 8006f50:	4b46      	ldr	r3, [pc, #280]	; (800706c <setSVM_dq+0x2f8>)
 8006f52:	edd3 7a00 	vldr	s15, [r3]
 8006f56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f5a:	4b4c      	ldr	r3, [pc, #304]	; (800708c <setSVM_dq+0x318>)
 8006f5c:	edd3 6a00 	vldr	s13, [r3]
 8006f60:	4b43      	ldr	r3, [pc, #268]	; (8007070 <setSVM_dq+0x2fc>)
 8006f62:	edd3 7a00 	vldr	s15, [r3]
 8006f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f6a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006f6e:	4b47      	ldr	r3, [pc, #284]	; (800708c <setSVM_dq+0x318>)
 8006f70:	ed93 7a00 	vldr	s14, [r3]
 8006f74:	4b48      	ldr	r3, [pc, #288]	; (8007098 <setSVM_dq+0x324>)
 8006f76:	edd3 7a00 	vldr	s15, [r3]
 8006f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f7e:	4b44      	ldr	r3, [pc, #272]	; (8007090 <setSVM_dq+0x31c>)
 8006f80:	ed93 6a00 	vldr	s12, [r3]
 8006f84:	4b43      	ldr	r3, [pc, #268]	; (8007094 <setSVM_dq+0x320>)
 8006f86:	edd3 7a00 	vldr	s15, [r3]
 8006f8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f92:	4b42      	ldr	r3, [pc, #264]	; (800709c <setSVM_dq+0x328>)
 8006f94:	edd3 7a00 	vldr	s15, [r3]
 8006f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa0:	4b40      	ldr	r3, [pc, #256]	; (80070a4 <setSVM_dq+0x330>)
 8006fa2:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <setSVM_dq+0x310>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	f200 81e0 	bhi.w	8007370 <setSVM_dq+0x5fc>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <setSVM_dq+0x244>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fd1 	.word	0x08006fd1
 8006fbc:	080070b5 	.word	0x080070b5
 8006fc0:	08007141 	.word	0x08007141
 8006fc4:	080071cd 	.word	0x080071cd
 8006fc8:	08007259 	.word	0x08007259
 8006fcc:	080072e5 	.word	0x080072e5
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8006fd0:	4b33      	ldr	r3, [pc, #204]	; (80070a0 <setSVM_dq+0x32c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7f9 fad7 	bl	8000588 <__aeabi_f2d>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	4930      	ldr	r1, [pc, #192]	; (80070a8 <setSVM_dq+0x334>)
 8006fe8:	f7f9 f96e 	bl	80002c8 <__aeabi_dsub>
 8006fec:	4603      	mov	r3, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	4625      	mov	r5, r4
 8006ff2:	461c      	mov	r4, r3
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	; (80070a4 <setSVM_dq+0x330>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7f9 fac5 	bl	8000588 <__aeabi_f2d>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4620      	mov	r0, r4
 8007004:	4629      	mov	r1, r5
 8007006:	f7f9 f95f 	bl	80002c8 <__aeabi_dsub>
 800700a:	4603      	mov	r3, r0
 800700c:	460c      	mov	r4, r1
 800700e:	4618      	mov	r0, r3
 8007010:	4621      	mov	r1, r4
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	4b25      	ldr	r3, [pc, #148]	; (80070ac <setSVM_dq+0x338>)
 8007018:	f7f9 fb0e 	bl	8000638 <__aeabi_dmul>
 800701c:	4603      	mov	r3, r0
 800701e:	460c      	mov	r4, r1
 8007020:	4618      	mov	r0, r3
 8007022:	4621      	mov	r1, r4
 8007024:	f7f9 fde0 	bl	8000be8 <__aeabi_d2f>
 8007028:	4602      	mov	r2, r0
 800702a:	4b21      	ldr	r3, [pc, #132]	; (80070b0 <setSVM_dq+0x33c>)
 800702c:	609a      	str	r2, [r3, #8]
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <setSVM_dq+0x33c>)
 8007030:	ed93 7a02 	vldr	s14, [r3, #8]
 8007034:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <setSVM_dq+0x330>)
 8007036:	edd3 7a00 	vldr	s15, [r3]
 800703a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800703e:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <setSVM_dq+0x33c>)
 8007040:	edc3 7a01 	vstr	s15, [r3, #4]
 8007044:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <setSVM_dq+0x33c>)
 8007046:	ed93 7a01 	vldr	s14, [r3, #4]
 800704a:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <setSVM_dq+0x32c>)
 800704c:	edd3 7a00 	vldr	s15, [r3]
 8007050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007054:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <setSVM_dq+0x33c>)
 8007056:	edc3 7a00 	vstr	s15, [r3]
 800705a:	e189      	b.n	8007370 <setSVM_dq+0x5fc>
 800705c:	20009ea8 	.word	0x20009ea8
 8007060:	20000008 	.word	0x20000008
 8007064:	20009eac 	.word	0x20009eac
 8007068:	20000234 	.word	0x20000234
 800706c:	20009f3c 	.word	0x20009f3c
 8007070:	20009f40 	.word	0x20009f40
 8007074:	00000000 	.word	0x00000000
 8007078:	20009f44 	.word	0x20009f44
 800707c:	3f5db22d 	.word	0x3f5db22d
 8007080:	20009f48 	.word	0x20009f48
 8007084:	20009eb0 	.word	0x20009eb0
 8007088:	0801f5ec 	.word	0x0801f5ec
 800708c:	20009f4c 	.word	0x20009f4c
 8007090:	20009f50 	.word	0x20009f50
 8007094:	20009f54 	.word	0x20009f54
 8007098:	20009f58 	.word	0x20009f58
 800709c:	20000020 	.word	0x20000020
 80070a0:	20009f5c 	.word	0x20009f5c
 80070a4:	20009f60 	.word	0x20009f60
 80070a8:	3ff00000 	.word	0x3ff00000
 80070ac:	3fe00000 	.word	0x3fe00000
 80070b0:	20009f64 	.word	0x20009f64
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 80070b4:	4bc3      	ldr	r3, [pc, #780]	; (80073c4 <setSVM_dq+0x650>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7f9 fa65 	bl	8000588 <__aeabi_f2d>
 80070be:	4603      	mov	r3, r0
 80070c0:	460c      	mov	r4, r1
 80070c2:	461a      	mov	r2, r3
 80070c4:	4623      	mov	r3, r4
 80070c6:	f04f 0000 	mov.w	r0, #0
 80070ca:	49bf      	ldr	r1, [pc, #764]	; (80073c8 <setSVM_dq+0x654>)
 80070cc:	f7f9 f8fc 	bl	80002c8 <__aeabi_dsub>
 80070d0:	4603      	mov	r3, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	4625      	mov	r5, r4
 80070d6:	461c      	mov	r4, r3
 80070d8:	4bbc      	ldr	r3, [pc, #752]	; (80073cc <setSVM_dq+0x658>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7f9 fa53 	bl	8000588 <__aeabi_f2d>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 f8ed 	bl	80002c8 <__aeabi_dsub>
 80070ee:	4603      	mov	r3, r0
 80070f0:	460c      	mov	r4, r1
 80070f2:	4618      	mov	r0, r3
 80070f4:	4621      	mov	r1, r4
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	4bb5      	ldr	r3, [pc, #724]	; (80073d0 <setSVM_dq+0x65c>)
 80070fc:	f7f9 fa9c 	bl	8000638 <__aeabi_dmul>
 8007100:	4603      	mov	r3, r0
 8007102:	460c      	mov	r4, r1
 8007104:	4618      	mov	r0, r3
 8007106:	4621      	mov	r1, r4
 8007108:	f7f9 fd6e 	bl	8000be8 <__aeabi_d2f>
 800710c:	4602      	mov	r2, r0
 800710e:	4bb1      	ldr	r3, [pc, #708]	; (80073d4 <setSVM_dq+0x660>)
 8007110:	609a      	str	r2, [r3, #8]
 8007112:	4bb0      	ldr	r3, [pc, #704]	; (80073d4 <setSVM_dq+0x660>)
 8007114:	ed93 7a02 	vldr	s14, [r3, #8]
 8007118:	4baa      	ldr	r3, [pc, #680]	; (80073c4 <setSVM_dq+0x650>)
 800711a:	edd3 7a00 	vldr	s15, [r3]
 800711e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007122:	4bac      	ldr	r3, [pc, #688]	; (80073d4 <setSVM_dq+0x660>)
 8007124:	edc3 7a00 	vstr	s15, [r3]
 8007128:	4baa      	ldr	r3, [pc, #680]	; (80073d4 <setSVM_dq+0x660>)
 800712a:	ed93 7a00 	vldr	s14, [r3]
 800712e:	4ba7      	ldr	r3, [pc, #668]	; (80073cc <setSVM_dq+0x658>)
 8007130:	edd3 7a00 	vldr	s15, [r3]
 8007134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007138:	4ba6      	ldr	r3, [pc, #664]	; (80073d4 <setSVM_dq+0x660>)
 800713a:	edc3 7a01 	vstr	s15, [r3, #4]
 800713e:	e117      	b.n	8007370 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8007140:	4ba0      	ldr	r3, [pc, #640]	; (80073c4 <setSVM_dq+0x650>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f7f9 fa1f 	bl	8000588 <__aeabi_f2d>
 800714a:	4603      	mov	r3, r0
 800714c:	460c      	mov	r4, r1
 800714e:	461a      	mov	r2, r3
 8007150:	4623      	mov	r3, r4
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	499c      	ldr	r1, [pc, #624]	; (80073c8 <setSVM_dq+0x654>)
 8007158:	f7f9 f8b6 	bl	80002c8 <__aeabi_dsub>
 800715c:	4603      	mov	r3, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4625      	mov	r5, r4
 8007162:	461c      	mov	r4, r3
 8007164:	4b99      	ldr	r3, [pc, #612]	; (80073cc <setSVM_dq+0x658>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f7f9 fa0d 	bl	8000588 <__aeabi_f2d>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4620      	mov	r0, r4
 8007174:	4629      	mov	r1, r5
 8007176:	f7f9 f8a7 	bl	80002c8 <__aeabi_dsub>
 800717a:	4603      	mov	r3, r0
 800717c:	460c      	mov	r4, r1
 800717e:	4618      	mov	r0, r3
 8007180:	4621      	mov	r1, r4
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	4b92      	ldr	r3, [pc, #584]	; (80073d0 <setSVM_dq+0x65c>)
 8007188:	f7f9 fa56 	bl	8000638 <__aeabi_dmul>
 800718c:	4603      	mov	r3, r0
 800718e:	460c      	mov	r4, r1
 8007190:	4618      	mov	r0, r3
 8007192:	4621      	mov	r1, r4
 8007194:	f7f9 fd28 	bl	8000be8 <__aeabi_d2f>
 8007198:	4602      	mov	r2, r0
 800719a:	4b8e      	ldr	r3, [pc, #568]	; (80073d4 <setSVM_dq+0x660>)
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	4b8d      	ldr	r3, [pc, #564]	; (80073d4 <setSVM_dq+0x660>)
 80071a0:	ed93 7a00 	vldr	s14, [r3]
 80071a4:	4b89      	ldr	r3, [pc, #548]	; (80073cc <setSVM_dq+0x658>)
 80071a6:	edd3 7a00 	vldr	s15, [r3]
 80071aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071ae:	4b89      	ldr	r3, [pc, #548]	; (80073d4 <setSVM_dq+0x660>)
 80071b0:	edc3 7a02 	vstr	s15, [r3, #8]
 80071b4:	4b87      	ldr	r3, [pc, #540]	; (80073d4 <setSVM_dq+0x660>)
 80071b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80071ba:	4b82      	ldr	r3, [pc, #520]	; (80073c4 <setSVM_dq+0x650>)
 80071bc:	edd3 7a00 	vldr	s15, [r3]
 80071c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071c4:	4b83      	ldr	r3, [pc, #524]	; (80073d4 <setSVM_dq+0x660>)
 80071c6:	edc3 7a01 	vstr	s15, [r3, #4]
 80071ca:	e0d1      	b.n	8007370 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 80071cc:	4b7d      	ldr	r3, [pc, #500]	; (80073c4 <setSVM_dq+0x650>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7f9 f9d9 	bl	8000588 <__aeabi_f2d>
 80071d6:	4603      	mov	r3, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	461a      	mov	r2, r3
 80071dc:	4623      	mov	r3, r4
 80071de:	f04f 0000 	mov.w	r0, #0
 80071e2:	4979      	ldr	r1, [pc, #484]	; (80073c8 <setSVM_dq+0x654>)
 80071e4:	f7f9 f870 	bl	80002c8 <__aeabi_dsub>
 80071e8:	4603      	mov	r3, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	4625      	mov	r5, r4
 80071ee:	461c      	mov	r4, r3
 80071f0:	4b76      	ldr	r3, [pc, #472]	; (80073cc <setSVM_dq+0x658>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7f9 f9c7 	bl	8000588 <__aeabi_f2d>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f861 	bl	80002c8 <__aeabi_dsub>
 8007206:	4603      	mov	r3, r0
 8007208:	460c      	mov	r4, r1
 800720a:	4618      	mov	r0, r3
 800720c:	4621      	mov	r1, r4
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	4b6f      	ldr	r3, [pc, #444]	; (80073d0 <setSVM_dq+0x65c>)
 8007214:	f7f9 fa10 	bl	8000638 <__aeabi_dmul>
 8007218:	4603      	mov	r3, r0
 800721a:	460c      	mov	r4, r1
 800721c:	4618      	mov	r0, r3
 800721e:	4621      	mov	r1, r4
 8007220:	f7f9 fce2 	bl	8000be8 <__aeabi_d2f>
 8007224:	4602      	mov	r2, r0
 8007226:	4b6b      	ldr	r3, [pc, #428]	; (80073d4 <setSVM_dq+0x660>)
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	4b6a      	ldr	r3, [pc, #424]	; (80073d4 <setSVM_dq+0x660>)
 800722c:	ed93 7a00 	vldr	s14, [r3]
 8007230:	4b64      	ldr	r3, [pc, #400]	; (80073c4 <setSVM_dq+0x650>)
 8007232:	edd3 7a00 	vldr	s15, [r3]
 8007236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800723a:	4b66      	ldr	r3, [pc, #408]	; (80073d4 <setSVM_dq+0x660>)
 800723c:	edc3 7a01 	vstr	s15, [r3, #4]
 8007240:	4b64      	ldr	r3, [pc, #400]	; (80073d4 <setSVM_dq+0x660>)
 8007242:	ed93 7a01 	vldr	s14, [r3, #4]
 8007246:	4b61      	ldr	r3, [pc, #388]	; (80073cc <setSVM_dq+0x658>)
 8007248:	edd3 7a00 	vldr	s15, [r3]
 800724c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007250:	4b60      	ldr	r3, [pc, #384]	; (80073d4 <setSVM_dq+0x660>)
 8007252:	edc3 7a02 	vstr	s15, [r3, #8]
 8007256:	e08b      	b.n	8007370 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8007258:	4b5a      	ldr	r3, [pc, #360]	; (80073c4 <setSVM_dq+0x650>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f7f9 f993 	bl	8000588 <__aeabi_f2d>
 8007262:	4603      	mov	r3, r0
 8007264:	460c      	mov	r4, r1
 8007266:	461a      	mov	r2, r3
 8007268:	4623      	mov	r3, r4
 800726a:	f04f 0000 	mov.w	r0, #0
 800726e:	4956      	ldr	r1, [pc, #344]	; (80073c8 <setSVM_dq+0x654>)
 8007270:	f7f9 f82a 	bl	80002c8 <__aeabi_dsub>
 8007274:	4603      	mov	r3, r0
 8007276:	460c      	mov	r4, r1
 8007278:	4625      	mov	r5, r4
 800727a:	461c      	mov	r4, r3
 800727c:	4b53      	ldr	r3, [pc, #332]	; (80073cc <setSVM_dq+0x658>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f7f9 f981 	bl	8000588 <__aeabi_f2d>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f7f9 f81b 	bl	80002c8 <__aeabi_dsub>
 8007292:	4603      	mov	r3, r0
 8007294:	460c      	mov	r4, r1
 8007296:	4618      	mov	r0, r3
 8007298:	4621      	mov	r1, r4
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	4b4c      	ldr	r3, [pc, #304]	; (80073d0 <setSVM_dq+0x65c>)
 80072a0:	f7f9 f9ca 	bl	8000638 <__aeabi_dmul>
 80072a4:	4603      	mov	r3, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	4618      	mov	r0, r3
 80072aa:	4621      	mov	r1, r4
 80072ac:	f7f9 fc9c 	bl	8000be8 <__aeabi_d2f>
 80072b0:	4602      	mov	r2, r0
 80072b2:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <setSVM_dq+0x660>)
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	4b47      	ldr	r3, [pc, #284]	; (80073d4 <setSVM_dq+0x660>)
 80072b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80072bc:	4b43      	ldr	r3, [pc, #268]	; (80073cc <setSVM_dq+0x658>)
 80072be:	edd3 7a00 	vldr	s15, [r3]
 80072c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072c6:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <setSVM_dq+0x660>)
 80072c8:	edc3 7a00 	vstr	s15, [r3]
 80072cc:	4b41      	ldr	r3, [pc, #260]	; (80073d4 <setSVM_dq+0x660>)
 80072ce:	ed93 7a00 	vldr	s14, [r3]
 80072d2:	4b3c      	ldr	r3, [pc, #240]	; (80073c4 <setSVM_dq+0x650>)
 80072d4:	edd3 7a00 	vldr	s15, [r3]
 80072d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072dc:	4b3d      	ldr	r3, [pc, #244]	; (80073d4 <setSVM_dq+0x660>)
 80072de:	edc3 7a02 	vstr	s15, [r3, #8]
 80072e2:	e045      	b.n	8007370 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 80072e4:	4b37      	ldr	r3, [pc, #220]	; (80073c4 <setSVM_dq+0x650>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7f9 f94d 	bl	8000588 <__aeabi_f2d>
 80072ee:	4603      	mov	r3, r0
 80072f0:	460c      	mov	r4, r1
 80072f2:	461a      	mov	r2, r3
 80072f4:	4623      	mov	r3, r4
 80072f6:	f04f 0000 	mov.w	r0, #0
 80072fa:	4933      	ldr	r1, [pc, #204]	; (80073c8 <setSVM_dq+0x654>)
 80072fc:	f7f8 ffe4 	bl	80002c8 <__aeabi_dsub>
 8007300:	4603      	mov	r3, r0
 8007302:	460c      	mov	r4, r1
 8007304:	4625      	mov	r5, r4
 8007306:	461c      	mov	r4, r3
 8007308:	4b30      	ldr	r3, [pc, #192]	; (80073cc <setSVM_dq+0x658>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f7f9 f93b 	bl	8000588 <__aeabi_f2d>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f8 ffd5 	bl	80002c8 <__aeabi_dsub>
 800731e:	4603      	mov	r3, r0
 8007320:	460c      	mov	r4, r1
 8007322:	4618      	mov	r0, r3
 8007324:	4621      	mov	r1, r4
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <setSVM_dq+0x65c>)
 800732c:	f7f9 f984 	bl	8000638 <__aeabi_dmul>
 8007330:	4603      	mov	r3, r0
 8007332:	460c      	mov	r4, r1
 8007334:	4618      	mov	r0, r3
 8007336:	4621      	mov	r1, r4
 8007338:	f7f9 fc56 	bl	8000be8 <__aeabi_d2f>
 800733c:	4602      	mov	r2, r0
 800733e:	4b25      	ldr	r3, [pc, #148]	; (80073d4 <setSVM_dq+0x660>)
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <setSVM_dq+0x660>)
 8007344:	ed93 7a01 	vldr	s14, [r3, #4]
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <setSVM_dq+0x650>)
 800734a:	edd3 7a00 	vldr	s15, [r3]
 800734e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007352:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <setSVM_dq+0x660>)
 8007354:	edc3 7a02 	vstr	s15, [r3, #8]
 8007358:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <setSVM_dq+0x660>)
 800735a:	ed93 7a02 	vldr	s14, [r3, #8]
 800735e:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <setSVM_dq+0x658>)
 8007360:	edd3 7a00 	vldr	s15, [r3]
 8007364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007368:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <setSVM_dq+0x660>)
 800736a:	edc3 7a00 	vstr	s15, [r3]
 800736e:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8007370:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <setSVM_dq+0x660>)
 8007372:	edd3 7a00 	vldr	s15, [r3]
 8007376:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800737a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007382:	d503      	bpl.n	800738c <setSVM_dq+0x618>
 8007384:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <setSVM_dq+0x660>)
 8007386:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <setSVM_dq+0x664>)
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	e00d      	b.n	80073a8 <setSVM_dq+0x634>
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <setSVM_dq+0x660>)
 800738e:	edd3 7a00 	vldr	s15, [r3]
 8007392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739e:	dd03      	ble.n	80073a8 <setSVM_dq+0x634>
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <setSVM_dq+0x660>)
 80073a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80073a6:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <setSVM_dq+0x660>)
 80073aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80073ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80073b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ba:	d50f      	bpl.n	80073dc <setSVM_dq+0x668>
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <setSVM_dq+0x660>)
 80073be:	4a06      	ldr	r2, [pc, #24]	; (80073d8 <setSVM_dq+0x664>)
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e019      	b.n	80073f8 <setSVM_dq+0x684>
 80073c4:	20009f5c 	.word	0x20009f5c
 80073c8:	3ff00000 	.word	0x3ff00000
 80073cc:	20009f60 	.word	0x20009f60
 80073d0:	3fe00000 	.word	0x3fe00000
 80073d4:	20009f64 	.word	0x20009f64
 80073d8:	bf800000 	.word	0xbf800000
 80073dc:	4b35      	ldr	r3, [pc, #212]	; (80074b4 <setSVM_dq+0x740>)
 80073de:	edd3 7a01 	vldr	s15, [r3, #4]
 80073e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ee:	dd03      	ble.n	80073f8 <setSVM_dq+0x684>
 80073f0:	4b30      	ldr	r3, [pc, #192]	; (80074b4 <setSVM_dq+0x740>)
 80073f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80073f6:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 80073f8:	4b2e      	ldr	r3, [pc, #184]	; (80074b4 <setSVM_dq+0x740>)
 80073fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80073fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	d503      	bpl.n	8007414 <setSVM_dq+0x6a0>
 800740c:	4b29      	ldr	r3, [pc, #164]	; (80074b4 <setSVM_dq+0x740>)
 800740e:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <setSVM_dq+0x744>)
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	e00d      	b.n	8007430 <setSVM_dq+0x6bc>
 8007414:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <setSVM_dq+0x740>)
 8007416:	edd3 7a02 	vldr	s15, [r3, #8]
 800741a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800741e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007426:	dd03      	ble.n	8007430 <setSVM_dq+0x6bc>
 8007428:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <setSVM_dq+0x740>)
 800742a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800742e:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 4200.0f * (1.0f - (amp_u = duty[0])));
 8007430:	4b20      	ldr	r3, [pc, #128]	; (80074b4 <setSVM_dq+0x740>)
 8007432:	edd3 7a00 	vldr	s15, [r3]
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <setSVM_dq+0x748>)
 8007438:	edc3 7a00 	vstr	s15, [r3]
 800743c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007444:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80074c0 <setSVM_dq+0x74c>
 8007448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <setSVM_dq+0x750>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007454:	ee17 2a90 	vmov	r2, s15
 8007458:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 4200.0f * (1.0f - (amp_v = duty[1])));
 800745a:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <setSVM_dq+0x740>)
 800745c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <setSVM_dq+0x754>)
 8007462:	edc3 7a00 	vstr	s15, [r3]
 8007466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800746a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800746e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80074c0 <setSVM_dq+0x74c>
 8007472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007476:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <setSVM_dq+0x750>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800747e:	ee17 2a90 	vmov	r2, s15
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 4200.0f * (1.0f - (amp_w = duty[2])));
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <setSVM_dq+0x740>)
 8007486:	edd3 7a02 	vldr	s15, [r3, #8]
 800748a:	4b10      	ldr	r3, [pc, #64]	; (80074cc <setSVM_dq+0x758>)
 800748c:	edc3 7a00 	vstr	s15, [r3]
 8007490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007498:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80074c0 <setSVM_dq+0x74c>
 800749c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074a0:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <setSVM_dq+0x750>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a8:	ee17 2a90 	vmov	r2, s15
 80074ac:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 80074ae:	bf00      	nop
}
 80074b0:	bdb0      	pop	{r4, r5, r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20009f64 	.word	0x20009f64
 80074b8:	bf800000 	.word	0xbf800000
 80074bc:	20009eb4 	.word	0x20009eb4
 80074c0:	45834000 	.word	0x45834000
 80074c4:	2000a1f8 	.word	0x2000a1f8
 80074c8:	20009eb8 	.word	0x20009eb8
 80074cc:	20009ebc 	.word	0x20009ebc

080074d0 <UartPrintf>:

}



inline static int32_t UartPrintf(UART_HandleTypeDef *huart, char *format, ...){
 80074d0:	b40e      	push	{r1, r2, r3}
 80074d2:	b580      	push	{r7, lr}
 80074d4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80074d8:	af00      	add	r7, sp, #0
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	6018      	str	r0, [r3, #0]
	int32_t TransStrLength;
	char TransStr[1024];

	va_list args;
	va_start(args, format);
 80074de:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80074e2:	f107 0308 	add.w	r3, r7, #8
 80074e6:	601a      	str	r2, [r3, #0]
	TransStrLength = vsprintf(TransStr, format, args);
 80074e8:	f107 0308 	add.w	r3, r7, #8
 80074ec:	f107 000c 	add.w	r0, r7, #12
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 80074f6:	f001 fa3f 	bl	8008978 <vsiprintf>
 80074fa:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	va_end(args);

	HAL_UART_Transmit(huart, (uint8_t*)TransStr, TransStrLength, 100);
 80074fe:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8007502:	b29a      	uxth	r2, r3
 8007504:	f107 010c 	add.w	r1, r7, #12
 8007508:	1d38      	adds	r0, r7, #4
 800750a:	2364      	movs	r3, #100	; 0x64
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f7fd fb08 	bl	8004b22 <HAL_UART_Transmit>

	return TransStrLength;
 8007512:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8007516:	4618      	mov	r0, r3
 8007518:	f207 4714 	addw	r7, r7, #1044	; 0x414
 800751c:	46bd      	mov	sp, r7
 800751e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007522:	b003      	add	sp, #12
 8007524:	4770      	bx	lr
	...

08007528 <printFloat>:


int32_t printFloat(float val)
{
 8007528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800752c:	b089      	sub	sp, #36	; 0x24
 800752e:	af00      	add	r7, sp, #0
 8007530:	ed87 0a01 	vstr	s0, [r7, #4]
	int i;
	int charCount = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
	int first, temp;
	const int decNum = 4;
 8007538:	2304      	movs	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
	int i_val;

	if(val < 0.0f)
 800753c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007548:	d532      	bpl.n	80075b0 <printFloat+0x88>
	{
		i_val = val * pow(10.0, decNum) - 0.5;
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7f9 f81c 	bl	8000588 <__aeabi_f2d>
 8007550:	4680      	mov	r8, r0
 8007552:	4689      	mov	r9, r1
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f7f9 f805 	bl	8000564 <__aeabi_i2d>
 800755a:	4603      	mov	r3, r0
 800755c:	460c      	mov	r4, r1
 800755e:	ec44 3b11 	vmov	d1, r3, r4
 8007562:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80076c0 <printFloat+0x198>
 8007566:	f003 fa95 	bl	800aa94 <pow>
 800756a:	ec54 3b10 	vmov	r3, r4, d0
 800756e:	461a      	mov	r2, r3
 8007570:	4623      	mov	r3, r4
 8007572:	4640      	mov	r0, r8
 8007574:	4649      	mov	r1, r9
 8007576:	f7f9 f85f 	bl	8000638 <__aeabi_dmul>
 800757a:	4603      	mov	r3, r0
 800757c:	460c      	mov	r4, r1
 800757e:	4618      	mov	r0, r3
 8007580:	4621      	mov	r1, r4
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	4b50      	ldr	r3, [pc, #320]	; (80076c8 <printFloat+0x1a0>)
 8007588:	f7f8 fe9e 	bl	80002c8 <__aeabi_dsub>
 800758c:	4603      	mov	r3, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4618      	mov	r0, r3
 8007592:	4621      	mov	r1, r4
 8007594:	f7f9 fb00 	bl	8000b98 <__aeabi_d2iz>
 8007598:	4603      	mov	r3, r0
 800759a:	613b      	str	r3, [r7, #16]
		putchar('-');
 800759c:	202d      	movs	r0, #45	; 0x2d
 800759e:	f001 f95d 	bl	800885c <putchar>
		i_val *= -1;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	425b      	negs	r3, r3
 80075a6:	613b      	str	r3, [r7, #16]
		charCount += 1;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e028      	b.n	8007602 <printFloat+0xda>
	}
	else
	{
		i_val = val * pow(10.0, decNum) + 0.5;
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7f8 ffe9 	bl	8000588 <__aeabi_f2d>
 80075b6:	4680      	mov	r8, r0
 80075b8:	4689      	mov	r9, r1
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7f8 ffd2 	bl	8000564 <__aeabi_i2d>
 80075c0:	4603      	mov	r3, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	ec44 3b11 	vmov	d1, r3, r4
 80075c8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 80076c0 <printFloat+0x198>
 80075cc:	f003 fa62 	bl	800aa94 <pow>
 80075d0:	ec54 3b10 	vmov	r3, r4, d0
 80075d4:	461a      	mov	r2, r3
 80075d6:	4623      	mov	r3, r4
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f9 f82c 	bl	8000638 <__aeabi_dmul>
 80075e0:	4603      	mov	r3, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	4618      	mov	r0, r3
 80075e6:	4621      	mov	r1, r4
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <printFloat+0x1a0>)
 80075ee:	f7f8 fe6d 	bl	80002cc <__adddf3>
 80075f2:	4603      	mov	r3, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	4618      	mov	r0, r3
 80075f8:	4621      	mov	r1, r4
 80075fa:	f7f9 facd 	bl	8000b98 <__aeabi_d2iz>
 80075fe:	4603      	mov	r3, r0
 8007600:	613b      	str	r3, [r7, #16]
	}

	first = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
	for(i = 9; i >= 0; i--)
 8007606:	2309      	movs	r3, #9
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	e050      	b.n	80076ae <printFloat+0x186>
	{
		temp = (int)(i_val * pow(10.0, -1.0 * i)) % 10;
 800760c:	6938      	ldr	r0, [r7, #16]
 800760e:	f7f8 ffa9 	bl	8000564 <__aeabi_i2d>
 8007612:	4680      	mov	r8, r0
 8007614:	4689      	mov	r9, r1
 8007616:	69f8      	ldr	r0, [r7, #28]
 8007618:	f7f8 ffa4 	bl	8000564 <__aeabi_i2d>
 800761c:	4603      	mov	r3, r0
 800761e:	460c      	mov	r4, r1
 8007620:	461d      	mov	r5, r3
 8007622:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8007626:	ec46 5b11 	vmov	d1, r5, r6
 800762a:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80076c0 <printFloat+0x198>
 800762e:	f003 fa31 	bl	800aa94 <pow>
 8007632:	ec54 3b10 	vmov	r3, r4, d0
 8007636:	461a      	mov	r2, r3
 8007638:	4623      	mov	r3, r4
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fffb 	bl	8000638 <__aeabi_dmul>
 8007642:	4603      	mov	r3, r0
 8007644:	460c      	mov	r4, r1
 8007646:	4618      	mov	r0, r3
 8007648:	4621      	mov	r1, r4
 800764a:	f7f9 faa5 	bl	8000b98 <__aeabi_d2iz>
 800764e:	4602      	mov	r2, r0
 8007650:	4b1e      	ldr	r3, [pc, #120]	; (80076cc <printFloat+0x1a4>)
 8007652:	fb83 1302 	smull	r1, r3, r3, r2
 8007656:	1099      	asrs	r1, r3, #2
 8007658:	17d3      	asrs	r3, r2, #31
 800765a:	1ac9      	subs	r1, r1, r3
 800765c:	460b      	mov	r3, r1
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	60bb      	str	r3, [r7, #8]

		if(i == decNum - 1)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	429a      	cmp	r2, r3
 8007670:	d10a      	bne.n	8007688 <printFloat+0x160>
		{
			if(first == 0)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <printFloat+0x15a>
			{
				first = 1;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
				putchar('0');
 800767c:	2030      	movs	r0, #48	; 0x30
 800767e:	f001 f8ed 	bl	800885c <putchar>
			}
			putchar('.');
 8007682:	202e      	movs	r0, #46	; 0x2e
 8007684:	f001 f8ea 	bl	800885c <putchar>
		}

		if(first == 1 || temp != 0)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d002      	beq.n	8007694 <printFloat+0x16c>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <printFloat+0x180>
		{
			putchar('0' + temp);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3330      	adds	r3, #48	; 0x30
 8007698:	4618      	mov	r0, r3
 800769a:	f001 f8df 	bl	800885c <putchar>
			charCount += 1;
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	3301      	adds	r3, #1
 80076a2:	61bb      	str	r3, [r7, #24]
			first = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
	for(i = 9; i >= 0; i--)
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	daab      	bge.n	800760c <printFloat+0xe4>
		}

	}

	return charCount;
 80076b4:	69bb      	ldr	r3, [r7, #24]

}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3724      	adds	r7, #36	; 0x24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076c0:	00000000 	.word	0x00000000
 80076c4:	40240000 	.word	0x40240000
 80076c8:	3fe00000 	.word	0x3fe00000
 80076cc:	66666667 	.word	0x66666667

080076d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80076e4:	4b18      	ldr	r3, [pc, #96]	; (8007748 <MX_SPI2_Init+0x68>)
 80076e6:	4a19      	ldr	r2, [pc, #100]	; (800774c <MX_SPI2_Init+0x6c>)
 80076e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80076ea:	4b17      	ldr	r3, [pc, #92]	; (8007748 <MX_SPI2_Init+0x68>)
 80076ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80076f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <MX_SPI2_Init+0x68>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80076f8:	4b13      	ldr	r3, [pc, #76]	; (8007748 <MX_SPI2_Init+0x68>)
 80076fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007700:	4b11      	ldr	r3, [pc, #68]	; (8007748 <MX_SPI2_Init+0x68>)
 8007702:	2200      	movs	r2, #0
 8007704:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <MX_SPI2_Init+0x68>)
 8007708:	2201      	movs	r2, #1
 800770a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800770c:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <MX_SPI2_Init+0x68>)
 800770e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007712:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <MX_SPI2_Init+0x68>)
 8007716:	2218      	movs	r2, #24
 8007718:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <MX_SPI2_Init+0x68>)
 800771c:	2200      	movs	r2, #0
 800771e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <MX_SPI2_Init+0x68>)
 8007722:	2200      	movs	r2, #0
 8007724:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007726:	4b08      	ldr	r3, [pc, #32]	; (8007748 <MX_SPI2_Init+0x68>)
 8007728:	2200      	movs	r2, #0
 800772a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <MX_SPI2_Init+0x68>)
 800772e:	220a      	movs	r2, #10
 8007730:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007732:	4805      	ldr	r0, [pc, #20]	; (8007748 <MX_SPI2_Init+0x68>)
 8007734:	f7fb fd3c 	bl	80031b0 <HAL_SPI_Init>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800773e:	f7ff ffc7 	bl	80076d0 <Error_Handler>
  }

}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2000a1a0 	.word	0x2000a1a0
 800774c:	40003800 	.word	0x40003800

08007750 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007758:	f107 0314 	add.w	r3, r7, #20
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	609a      	str	r2, [r3, #8]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a34      	ldr	r2, [pc, #208]	; (8007840 <HAL_SPI_MspInit+0xf0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d162      	bne.n	8007838 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007772:	2300      	movs	r3, #0
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	4b33      	ldr	r3, [pc, #204]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4a32      	ldr	r2, [pc, #200]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 800777c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007780:	6413      	str	r3, [r2, #64]	; 0x40
 8007782:	4b30      	ldr	r3, [pc, #192]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	4b2c      	ldr	r3, [pc, #176]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	4a2b      	ldr	r2, [pc, #172]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 8007798:	f043 0304 	orr.w	r3, r3, #4
 800779c:	6313      	str	r3, [r2, #48]	; 0x30
 800779e:	4b29      	ldr	r3, [pc, #164]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	4b25      	ldr	r3, [pc, #148]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	4a24      	ldr	r2, [pc, #144]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 80077b4:	f043 0302 	orr.w	r3, r3, #2
 80077b8:	6313      	str	r3, [r2, #48]	; 0x30
 80077ba:	4b22      	ldr	r3, [pc, #136]	; (8007844 <HAL_SPI_MspInit+0xf4>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	60bb      	str	r3, [r7, #8]
 80077c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80077c6:	2302      	movs	r3, #2
 80077c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ca:	2302      	movs	r3, #2
 80077cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077d2:	2303      	movs	r3, #3
 80077d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80077d6:	2307      	movs	r3, #7
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077da:	f107 0314 	add.w	r3, r7, #20
 80077de:	4619      	mov	r1, r3
 80077e0:	4819      	ldr	r0, [pc, #100]	; (8007848 <HAL_SPI_MspInit+0xf8>)
 80077e2:	f7fa fe0f 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80077e6:	2304      	movs	r3, #4
 80077e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ea:	2302      	movs	r3, #2
 80077ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f2:	2303      	movs	r3, #3
 80077f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077f6:	2305      	movs	r3, #5
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077fa:	f107 0314 	add.w	r3, r7, #20
 80077fe:	4619      	mov	r1, r3
 8007800:	4811      	ldr	r0, [pc, #68]	; (8007848 <HAL_SPI_MspInit+0xf8>)
 8007802:	f7fa fdff 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800780c:	2302      	movs	r3, #2
 800780e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007814:	2303      	movs	r3, #3
 8007816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007818:	2305      	movs	r3, #5
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800781c:	f107 0314 	add.w	r3, r7, #20
 8007820:	4619      	mov	r1, r3
 8007822:	480a      	ldr	r0, [pc, #40]	; (800784c <HAL_SPI_MspInit+0xfc>)
 8007824:	f7fa fdee 	bl	8002404 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007828:	2200      	movs	r2, #0
 800782a:	2100      	movs	r1, #0
 800782c:	2024      	movs	r0, #36	; 0x24
 800782e:	f7fa fa1a 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007832:	2024      	movs	r0, #36	; 0x24
 8007834:	f7fa fa33 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007838:	bf00      	nop
 800783a:	3728      	adds	r7, #40	; 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40003800 	.word	0x40003800
 8007844:	40023800 	.word	0x40023800
 8007848:	40020800 	.word	0x40020800
 800784c:	40020400 	.word	0x40020400

08007850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	4b10      	ldr	r3, [pc, #64]	; (800789c <HAL_MspInit+0x4c>)
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	4a0f      	ldr	r2, [pc, #60]	; (800789c <HAL_MspInit+0x4c>)
 8007860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007864:	6453      	str	r3, [r2, #68]	; 0x44
 8007866:	4b0d      	ldr	r3, [pc, #52]	; (800789c <HAL_MspInit+0x4c>)
 8007868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800786e:	607b      	str	r3, [r7, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007872:	2300      	movs	r3, #0
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	4b09      	ldr	r3, [pc, #36]	; (800789c <HAL_MspInit+0x4c>)
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	4a08      	ldr	r2, [pc, #32]	; (800789c <HAL_MspInit+0x4c>)
 800787c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007880:	6413      	str	r3, [r2, #64]	; 0x40
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <HAL_MspInit+0x4c>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800788e:	2007      	movs	r0, #7
 8007890:	f7fa f9de 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40023800 	.word	0x40023800

080078a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80078a4:	bf00      	nop
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078ae:	b480      	push	{r7}
 80078b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078b2:	e7fe      	b.n	80078b2 <HardFault_Handler+0x4>

080078b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078b8:	e7fe      	b.n	80078b8 <MemManage_Handler+0x4>

080078ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078ba:	b480      	push	{r7}
 80078bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078be:	e7fe      	b.n	80078be <BusFault_Handler+0x4>

080078c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078c4:	e7fe      	b.n	80078c4 <UsageFault_Handler+0x4>

080078c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078c6:	b480      	push	{r7}
 80078c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078ca:	bf00      	nop
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078d8:	bf00      	nop
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078e2:	b480      	push	{r7}
 80078e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078e6:	bf00      	nop
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078f4:	f7f9 fb9a 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078f8:	bf00      	nop
 80078fa:	bd80      	pop	{r7, pc}

080078fc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007900:	4802      	ldr	r0, [pc, #8]	; (800790c <SPI2_IRQHandler+0x10>)
 8007902:	f7fb fd4d 	bl	80033a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007906:	bf00      	nop
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	2000a1a0 	.word	0x2000a1a0

08007910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007914:	4802      	ldr	r0, [pc, #8]	; (8007920 <USART2_IRQHandler+0x10>)
 8007916:	f7fd f99d 	bl	8004c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800791a:	bf00      	nop
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	2000a238 	.word	0x2000a238

08007924 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007928:	4802      	ldr	r0, [pc, #8]	; (8007934 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800792a:	f7fc f9cb 	bl	8003cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800792e:	bf00      	nop
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	2000a1f8 	.word	0x2000a1f8

08007938 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800793c:	4802      	ldr	r0, [pc, #8]	; (8007948 <DMA2_Stream0_IRQHandler+0x10>)
 800793e:	f7fa faf9 	bl	8001f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007942:	bf00      	nop
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	2000a0b8 	.word	0x2000a0b8

0800794c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007950:	4802      	ldr	r0, [pc, #8]	; (800795c <DMA2_Stream1_IRQHandler+0x10>)
 8007952:	f7fa faef 	bl	8001f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007956:	bf00      	nop
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20009fc8 	.word	0x20009fc8

08007960 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007964:	4802      	ldr	r0, [pc, #8]	; (8007970 <DMA2_Stream2_IRQHandler+0x10>)
 8007966:	f7fa fae5 	bl	8001f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800796a:	bf00      	nop
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	2000a118 	.word	0x2000a118

08007974 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e00a      	b.n	800799c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007986:	f3af 8000 	nop.w
 800798a:	4601      	mov	r1, r0
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	60ba      	str	r2, [r7, #8]
 8007992:	b2ca      	uxtb	r2, r1
 8007994:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	3301      	adds	r3, #1
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	dbf0      	blt.n	8007986 <_read+0x12>
	}

return len;
 80079a4:	687b      	ldr	r3, [r7, #4]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e009      	b.n	80079d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	60ba      	str	r2, [r7, #8]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe f94d 	bl	8005c68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	3301      	adds	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	429a      	cmp	r2, r3
 80079da:	dbf1      	blt.n	80079c0 <_write+0x12>
	}
	return len;
 80079dc:	687b      	ldr	r3, [r7, #4]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <_close>:

int _close(int file)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
	return -1;
 80079ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <_isatty>:

int _isatty(int file)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
	return 1;
 8007a26:	2301      	movs	r3, #1
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
	...

08007a50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a58:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <_sbrk+0x50>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d102      	bne.n	8007a66 <_sbrk+0x16>
		heap_end = &end;
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <_sbrk+0x50>)
 8007a62:	4a10      	ldr	r2, [pc, #64]	; (8007aa4 <_sbrk+0x54>)
 8007a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a66:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <_sbrk+0x50>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <_sbrk+0x50>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4413      	add	r3, r2
 8007a74:	466a      	mov	r2, sp
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d907      	bls.n	8007a8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a7a:	f000 fa49 	bl	8007f10 <__errno>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	230c      	movs	r3, #12
 8007a82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295
 8007a88:	e006      	b.n	8007a98 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <_sbrk+0x50>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	4a03      	ldr	r2, [pc, #12]	; (8007aa0 <_sbrk+0x50>)
 8007a94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20009f70 	.word	0x20009f70
 8007aa4:	2000a280 	.word	0x2000a280

08007aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007aac:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <SystemInit+0x60>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab2:	4a15      	ldr	r2, [pc, #84]	; (8007b08 <SystemInit+0x60>)
 8007ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007abc:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <SystemInit+0x64>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a12      	ldr	r2, [pc, #72]	; (8007b0c <SystemInit+0x64>)
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007ac8:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <SystemInit+0x64>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007ace:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <SystemInit+0x64>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a0e      	ldr	r2, [pc, #56]	; (8007b0c <SystemInit+0x64>)
 8007ad4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007adc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007ade:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <SystemInit+0x64>)
 8007ae0:	4a0b      	ldr	r2, [pc, #44]	; (8007b10 <SystemInit+0x68>)
 8007ae2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007ae4:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <SystemInit+0x64>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a08      	ldr	r2, [pc, #32]	; (8007b0c <SystemInit+0x64>)
 8007aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <SystemInit+0x64>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007af6:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <SystemInit+0x60>)
 8007af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007afc:	609a      	str	r2, [r3, #8]
#endif
}
 8007afe:	bf00      	nop
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	e000ed00 	.word	0xe000ed00
 8007b0c:	40023800 	.word	0x40023800
 8007b10:	24003010 	.word	0x24003010

08007b14 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b096      	sub	sp, #88	; 0x58
 8007b18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	605a      	str	r2, [r3, #4]
 8007b24:	609a      	str	r2, [r3, #8]
 8007b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	605a      	str	r2, [r3, #4]
 8007b3c:	609a      	str	r2, [r3, #8]
 8007b3e:	60da      	str	r2, [r3, #12]
 8007b40:	611a      	str	r2, [r3, #16]
 8007b42:	615a      	str	r2, [r3, #20]
 8007b44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007b46:	1d3b      	adds	r3, r7, #4
 8007b48:	2220      	movs	r2, #32
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fa09 	bl	8007f64 <memset>

  htim8.Instance = TIM8;
 8007b52:	4b4a      	ldr	r3, [pc, #296]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b54:	4a4a      	ldr	r2, [pc, #296]	; (8007c80 <MX_TIM8_Init+0x16c>)
 8007b56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007b58:	4b48      	ldr	r3, [pc, #288]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8007b5e:	4b47      	ldr	r3, [pc, #284]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b60:	2220      	movs	r2, #32
 8007b62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4200;
 8007b64:	4b45      	ldr	r3, [pc, #276]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b66:	f241 0268 	movw	r2, #4200	; 0x1068
 8007b6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b6c:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007b72:	4b42      	ldr	r3, [pc, #264]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007b78:	4b40      	ldr	r3, [pc, #256]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b7a:	2280      	movs	r2, #128	; 0x80
 8007b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007b7e:	483f      	ldr	r0, [pc, #252]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b80:	f7fb ff22 	bl	80039c8 <HAL_TIM_Base_Init>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8007b8a:	f7ff fda1 	bl	80076d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007b94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4838      	ldr	r0, [pc, #224]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007b9c:	f7fc fa60 	bl	8004060 <HAL_TIM_ConfigClockSource>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8007ba6:	f7ff fd93 	bl	80076d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8007baa:	4834      	ldr	r0, [pc, #208]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007bac:	f7fb ff37 	bl	8003a1e <HAL_TIM_PWM_Init>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8007bb6:	f7ff fd8b 	bl	80076d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007bba:	2320      	movs	r3, #32
 8007bbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007bc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	482c      	ldr	r0, [pc, #176]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007bca:	f7fc fe8d 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8007bd4:	f7ff fd7c 	bl	80076d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007bd8:	2360      	movs	r3, #96	; 0x60
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2100;
 8007bdc:	f640 0334 	movw	r3, #2100	; 0x834
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007be2:	2300      	movs	r3, #0
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007be6:	2300      	movs	r3, #0
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	481f      	ldr	r0, [pc, #124]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007c00:	f7fc f968 	bl	8003ed4 <HAL_TIM_PWM_ConfigChannel>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8007c0a:	f7ff fd61 	bl	80076d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c12:	2204      	movs	r2, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4819      	ldr	r0, [pc, #100]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007c18:	f7fc f95c 	bl	8003ed4 <HAL_TIM_PWM_ConfigChannel>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8007c22:	f7ff fd55 	bl	80076d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4813      	ldr	r0, [pc, #76]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007c30:	f7fc f950 	bl	8003ed4 <HAL_TIM_PWM_ConfigChannel>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8007c3a:	f7ff fd49 	bl	80076d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 8007c4a:	2328      	movs	r3, #40	; 0x28
 8007c4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007c5a:	1d3b      	adds	r3, r7, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4807      	ldr	r0, [pc, #28]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007c60:	f7fc fe87 	bl	8004972 <HAL_TIMEx_ConfigBreakDeadTime>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8007c6a:	f7ff fd31 	bl	80076d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8007c6e:	4803      	ldr	r0, [pc, #12]	; (8007c7c <MX_TIM8_Init+0x168>)
 8007c70:	f000 f830 	bl	8007cd4 <HAL_TIM_MspPostInit>

}
 8007c74:	bf00      	nop
 8007c76:	3758      	adds	r7, #88	; 0x58
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	2000a1f8 	.word	0x2000a1f8
 8007c80:	40010400 	.word	0x40010400

08007c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0e      	ldr	r2, [pc, #56]	; (8007ccc <HAL_TIM_Base_MspInit+0x48>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d115      	bne.n	8007cc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8007ca0:	f043 0302 	orr.w	r3, r3, #2
 8007ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	202c      	movs	r0, #44	; 0x2c
 8007cb8:	f7f9 ffd5 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007cbc:	202c      	movs	r0, #44	; 0x2c
 8007cbe:	f7f9 ffee 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40010400 	.word	0x40010400
 8007cd0:	40023800 	.word	0x40023800

08007cd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	; 0x28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cdc:	f107 0314 	add.w	r3, r7, #20
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	605a      	str	r2, [r3, #4]
 8007ce6:	609a      	str	r2, [r3, #8]
 8007ce8:	60da      	str	r2, [r3, #12]
 8007cea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a30      	ldr	r2, [pc, #192]	; (8007db4 <HAL_TIM_MspPostInit+0xe0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d15a      	bne.n	8007dac <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	613b      	str	r3, [r7, #16]
 8007cfa:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	4a2e      	ldr	r2, [pc, #184]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	6313      	str	r3, [r2, #48]	; 0x30
 8007d06:	4b2c      	ldr	r3, [pc, #176]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	613b      	str	r3, [r7, #16]
 8007d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	4b28      	ldr	r3, [pc, #160]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	4a27      	ldr	r2, [pc, #156]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d1c:	f043 0302 	orr.w	r3, r3, #2
 8007d20:	6313      	str	r3, [r2, #48]	; 0x30
 8007d22:	4b25      	ldr	r3, [pc, #148]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
 8007d32:	4b21      	ldr	r3, [pc, #132]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	4a20      	ldr	r2, [pc, #128]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d38:	f043 0304 	orr.w	r3, r3, #4
 8007d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d3e:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <HAL_TIM_MspPostInit+0xe4>)
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	60bb      	str	r3, [r7, #8]
 8007d48:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007d4a:	2380      	movs	r3, #128	; 0x80
 8007d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d56:	2300      	movs	r3, #0
 8007d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d5e:	f107 0314 	add.w	r3, r7, #20
 8007d62:	4619      	mov	r1, r3
 8007d64:	4815      	ldr	r0, [pc, #84]	; (8007dbc <HAL_TIM_MspPostInit+0xe8>)
 8007d66:	f7fa fb4d 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d76:	2300      	movs	r3, #0
 8007d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d7e:	f107 0314 	add.w	r3, r7, #20
 8007d82:	4619      	mov	r1, r3
 8007d84:	480e      	ldr	r0, [pc, #56]	; (8007dc0 <HAL_TIM_MspPostInit+0xec>)
 8007d86:	f7fa fb3d 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8007d8a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8007d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d90:	2302      	movs	r3, #2
 8007d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007da0:	f107 0314 	add.w	r3, r7, #20
 8007da4:	4619      	mov	r1, r3
 8007da6:	4807      	ldr	r0, [pc, #28]	; (8007dc4 <HAL_TIM_MspPostInit+0xf0>)
 8007da8:	f7fa fb2c 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007dac:	bf00      	nop
 8007dae:	3728      	adds	r7, #40	; 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40010400 	.word	0x40010400
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	40020000 	.word	0x40020000
 8007dc0:	40020400 	.word	0x40020400
 8007dc4:	40020800 	.word	0x40020800

08007dc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <MX_USART2_UART_Init+0x50>)
 8007dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007dda:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007de0:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007de6:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007dee:	220c      	movs	r2, #12
 8007df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007df2:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007dfe:	4805      	ldr	r0, [pc, #20]	; (8007e14 <MX_USART2_UART_Init+0x4c>)
 8007e00:	f7fc fe42 	bl	8004a88 <HAL_UART_Init>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007e0a:	f7ff fc61 	bl	80076d0 <Error_Handler>
  }

}
 8007e0e:	bf00      	nop
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	2000a238 	.word	0x2000a238
 8007e18:	40004400 	.word	0x40004400

08007e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	605a      	str	r2, [r3, #4]
 8007e2e:	609a      	str	r2, [r3, #8]
 8007e30:	60da      	str	r2, [r3, #12]
 8007e32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a1d      	ldr	r2, [pc, #116]	; (8007eb0 <HAL_UART_MspInit+0x94>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d133      	bne.n	8007ea6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e3e:	2300      	movs	r3, #0
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <HAL_UART_MspInit+0x98>)
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <HAL_UART_MspInit+0x98>)
 8007e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e4e:	4b19      	ldr	r3, [pc, #100]	; (8007eb4 <HAL_UART_MspInit+0x98>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <HAL_UART_MspInit+0x98>)
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	4a14      	ldr	r2, [pc, #80]	; (8007eb4 <HAL_UART_MspInit+0x98>)
 8007e64:	f043 0301 	orr.w	r3, r3, #1
 8007e68:	6313      	str	r3, [r2, #48]	; 0x30
 8007e6a:	4b12      	ldr	r3, [pc, #72]	; (8007eb4 <HAL_UART_MspInit+0x98>)
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007e76:	230c      	movs	r3, #12
 8007e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e82:	2303      	movs	r3, #3
 8007e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007e86:	2307      	movs	r3, #7
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e8a:	f107 0314 	add.w	r3, r7, #20
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4809      	ldr	r0, [pc, #36]	; (8007eb8 <HAL_UART_MspInit+0x9c>)
 8007e92:	f7fa fab7 	bl	8002404 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	2026      	movs	r0, #38	; 0x26
 8007e9c:	f7f9 fee3 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007ea0:	2026      	movs	r0, #38	; 0x26
 8007ea2:	f7f9 fefc 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007ea6:	bf00      	nop
 8007ea8:	3728      	adds	r7, #40	; 0x28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	40004400 	.word	0x40004400
 8007eb4:	40023800 	.word	0x40023800
 8007eb8:	40020000 	.word	0x40020000

08007ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ef4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007ec0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007ec2:	e003      	b.n	8007ecc <LoopCopyDataInit>

08007ec4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007ec6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007ec8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007eca:	3104      	adds	r1, #4

08007ecc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007ecc:	480b      	ldr	r0, [pc, #44]	; (8007efc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007ed0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007ed2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007ed4:	d3f6      	bcc.n	8007ec4 <CopyDataInit>
  ldr  r2, =_sbss
 8007ed6:	4a0b      	ldr	r2, [pc, #44]	; (8007f04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007ed8:	e002      	b.n	8007ee0 <LoopFillZerobss>

08007eda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007eda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007edc:	f842 3b04 	str.w	r3, [r2], #4

08007ee0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ee0:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007ee2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ee4:	d3f9      	bcc.n	8007eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007ee6:	f7ff fddf 	bl	8007aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007eea:	f000 f817 	bl	8007f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007eee:	f7fd fecf 	bl	8005c90 <main>
  bx  lr    
 8007ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ef4:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8007ef8:	0801f968 	.word	0x0801f968
  ldr  r0, =_sdata
 8007efc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007f00:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8007f04:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8007f08:	2000a27c 	.word	0x2000a27c

08007f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007f0c:	e7fe      	b.n	8007f0c <ADC_IRQHandler>
	...

08007f10 <__errno>:
 8007f10:	4b01      	ldr	r3, [pc, #4]	; (8007f18 <__errno+0x8>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000030 	.word	0x20000030

08007f1c <__libc_init_array>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4e0d      	ldr	r6, [pc, #52]	; (8007f54 <__libc_init_array+0x38>)
 8007f20:	4c0d      	ldr	r4, [pc, #52]	; (8007f58 <__libc_init_array+0x3c>)
 8007f22:	1ba4      	subs	r4, r4, r6
 8007f24:	10a4      	asrs	r4, r4, #2
 8007f26:	2500      	movs	r5, #0
 8007f28:	42a5      	cmp	r5, r4
 8007f2a:	d109      	bne.n	8007f40 <__libc_init_array+0x24>
 8007f2c:	4e0b      	ldr	r6, [pc, #44]	; (8007f5c <__libc_init_array+0x40>)
 8007f2e:	4c0c      	ldr	r4, [pc, #48]	; (8007f60 <__libc_init_array+0x44>)
 8007f30:	f003 feec 	bl	800bd0c <_init>
 8007f34:	1ba4      	subs	r4, r4, r6
 8007f36:	10a4      	asrs	r4, r4, #2
 8007f38:	2500      	movs	r5, #0
 8007f3a:	42a5      	cmp	r5, r4
 8007f3c:	d105      	bne.n	8007f4a <__libc_init_array+0x2e>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f44:	4798      	blx	r3
 8007f46:	3501      	adds	r5, #1
 8007f48:	e7ee      	b.n	8007f28 <__libc_init_array+0xc>
 8007f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f4e:	4798      	blx	r3
 8007f50:	3501      	adds	r5, #1
 8007f52:	e7f2      	b.n	8007f3a <__libc_init_array+0x1e>
 8007f54:	0801f960 	.word	0x0801f960
 8007f58:	0801f960 	.word	0x0801f960
 8007f5c:	0801f960 	.word	0x0801f960
 8007f60:	0801f964 	.word	0x0801f964

08007f64 <memset>:
 8007f64:	4402      	add	r2, r0
 8007f66:	4603      	mov	r3, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d100      	bne.n	8007f6e <memset+0xa>
 8007f6c:	4770      	bx	lr
 8007f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f72:	e7f9      	b.n	8007f68 <memset+0x4>

08007f74 <__cvt>:
 8007f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f78:	ec55 4b10 	vmov	r4, r5, d0
 8007f7c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007f7e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	460e      	mov	r6, r1
 8007f86:	4691      	mov	r9, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	bfb8      	it	lt
 8007f8c:	4622      	movlt	r2, r4
 8007f8e:	462b      	mov	r3, r5
 8007f90:	f027 0720 	bic.w	r7, r7, #32
 8007f94:	bfbb      	ittet	lt
 8007f96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f9a:	461d      	movlt	r5, r3
 8007f9c:	2300      	movge	r3, #0
 8007f9e:	232d      	movlt	r3, #45	; 0x2d
 8007fa0:	bfb8      	it	lt
 8007fa2:	4614      	movlt	r4, r2
 8007fa4:	2f46      	cmp	r7, #70	; 0x46
 8007fa6:	700b      	strb	r3, [r1, #0]
 8007fa8:	d004      	beq.n	8007fb4 <__cvt+0x40>
 8007faa:	2f45      	cmp	r7, #69	; 0x45
 8007fac:	d100      	bne.n	8007fb0 <__cvt+0x3c>
 8007fae:	3601      	adds	r6, #1
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	e000      	b.n	8007fb6 <__cvt+0x42>
 8007fb4:	2103      	movs	r1, #3
 8007fb6:	ab03      	add	r3, sp, #12
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	ab02      	add	r3, sp, #8
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	4653      	mov	r3, sl
 8007fc2:	ec45 4b10 	vmov	d0, r4, r5
 8007fc6:	f000 fe2f 	bl	8008c28 <_dtoa_r>
 8007fca:	2f47      	cmp	r7, #71	; 0x47
 8007fcc:	4680      	mov	r8, r0
 8007fce:	d102      	bne.n	8007fd6 <__cvt+0x62>
 8007fd0:	f019 0f01 	tst.w	r9, #1
 8007fd4:	d026      	beq.n	8008024 <__cvt+0xb0>
 8007fd6:	2f46      	cmp	r7, #70	; 0x46
 8007fd8:	eb08 0906 	add.w	r9, r8, r6
 8007fdc:	d111      	bne.n	8008002 <__cvt+0x8e>
 8007fde:	f898 3000 	ldrb.w	r3, [r8]
 8007fe2:	2b30      	cmp	r3, #48	; 0x30
 8007fe4:	d10a      	bne.n	8007ffc <__cvt+0x88>
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4620      	mov	r0, r4
 8007fec:	4629      	mov	r1, r5
 8007fee:	f7f8 fd8b 	bl	8000b08 <__aeabi_dcmpeq>
 8007ff2:	b918      	cbnz	r0, 8007ffc <__cvt+0x88>
 8007ff4:	f1c6 0601 	rsb	r6, r6, #1
 8007ff8:	f8ca 6000 	str.w	r6, [sl]
 8007ffc:	f8da 3000 	ldr.w	r3, [sl]
 8008000:	4499      	add	r9, r3
 8008002:	2200      	movs	r2, #0
 8008004:	2300      	movs	r3, #0
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fd7d 	bl	8000b08 <__aeabi_dcmpeq>
 800800e:	b938      	cbnz	r0, 8008020 <__cvt+0xac>
 8008010:	2230      	movs	r2, #48	; 0x30
 8008012:	9b03      	ldr	r3, [sp, #12]
 8008014:	454b      	cmp	r3, r9
 8008016:	d205      	bcs.n	8008024 <__cvt+0xb0>
 8008018:	1c59      	adds	r1, r3, #1
 800801a:	9103      	str	r1, [sp, #12]
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e7f8      	b.n	8008012 <__cvt+0x9e>
 8008020:	f8cd 900c 	str.w	r9, [sp, #12]
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008028:	eba3 0308 	sub.w	r3, r3, r8
 800802c:	4640      	mov	r0, r8
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	b004      	add	sp, #16
 8008032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008036 <__exponent>:
 8008036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008038:	2900      	cmp	r1, #0
 800803a:	4604      	mov	r4, r0
 800803c:	bfba      	itte	lt
 800803e:	4249      	neglt	r1, r1
 8008040:	232d      	movlt	r3, #45	; 0x2d
 8008042:	232b      	movge	r3, #43	; 0x2b
 8008044:	2909      	cmp	r1, #9
 8008046:	f804 2b02 	strb.w	r2, [r4], #2
 800804a:	7043      	strb	r3, [r0, #1]
 800804c:	dd20      	ble.n	8008090 <__exponent+0x5a>
 800804e:	f10d 0307 	add.w	r3, sp, #7
 8008052:	461f      	mov	r7, r3
 8008054:	260a      	movs	r6, #10
 8008056:	fb91 f5f6 	sdiv	r5, r1, r6
 800805a:	fb06 1115 	mls	r1, r6, r5, r1
 800805e:	3130      	adds	r1, #48	; 0x30
 8008060:	2d09      	cmp	r5, #9
 8008062:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008066:	f103 32ff 	add.w	r2, r3, #4294967295
 800806a:	4629      	mov	r1, r5
 800806c:	dc09      	bgt.n	8008082 <__exponent+0x4c>
 800806e:	3130      	adds	r1, #48	; 0x30
 8008070:	3b02      	subs	r3, #2
 8008072:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008076:	42bb      	cmp	r3, r7
 8008078:	4622      	mov	r2, r4
 800807a:	d304      	bcc.n	8008086 <__exponent+0x50>
 800807c:	1a10      	subs	r0, r2, r0
 800807e:	b003      	add	sp, #12
 8008080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008082:	4613      	mov	r3, r2
 8008084:	e7e7      	b.n	8008056 <__exponent+0x20>
 8008086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800808a:	f804 2b01 	strb.w	r2, [r4], #1
 800808e:	e7f2      	b.n	8008076 <__exponent+0x40>
 8008090:	2330      	movs	r3, #48	; 0x30
 8008092:	4419      	add	r1, r3
 8008094:	7083      	strb	r3, [r0, #2]
 8008096:	1d02      	adds	r2, r0, #4
 8008098:	70c1      	strb	r1, [r0, #3]
 800809a:	e7ef      	b.n	800807c <__exponent+0x46>

0800809c <_printf_float>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	b08d      	sub	sp, #52	; 0x34
 80080a2:	460c      	mov	r4, r1
 80080a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80080a8:	4616      	mov	r6, r2
 80080aa:	461f      	mov	r7, r3
 80080ac:	4605      	mov	r5, r0
 80080ae:	f001 fced 	bl	8009a8c <_localeconv_r>
 80080b2:	6803      	ldr	r3, [r0, #0]
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f8 f8aa 	bl	8000210 <strlen>
 80080bc:	2300      	movs	r3, #0
 80080be:	930a      	str	r3, [sp, #40]	; 0x28
 80080c0:	f8d8 3000 	ldr.w	r3, [r8]
 80080c4:	9005      	str	r0, [sp, #20]
 80080c6:	3307      	adds	r3, #7
 80080c8:	f023 0307 	bic.w	r3, r3, #7
 80080cc:	f103 0208 	add.w	r2, r3, #8
 80080d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080d4:	f8d4 b000 	ldr.w	fp, [r4]
 80080d8:	f8c8 2000 	str.w	r2, [r8]
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080e4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80080f2:	f04f 32ff 	mov.w	r2, #4294967295
 80080f6:	4ba7      	ldr	r3, [pc, #668]	; (8008394 <_printf_float+0x2f8>)
 80080f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080fc:	f7f8 fd36 	bl	8000b6c <__aeabi_dcmpun>
 8008100:	bb70      	cbnz	r0, 8008160 <_printf_float+0xc4>
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	4ba3      	ldr	r3, [pc, #652]	; (8008394 <_printf_float+0x2f8>)
 8008108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800810c:	f7f8 fd10 	bl	8000b30 <__aeabi_dcmple>
 8008110:	bb30      	cbnz	r0, 8008160 <_printf_float+0xc4>
 8008112:	2200      	movs	r2, #0
 8008114:	2300      	movs	r3, #0
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 fcff 	bl	8000b1c <__aeabi_dcmplt>
 800811e:	b110      	cbz	r0, 8008126 <_printf_float+0x8a>
 8008120:	232d      	movs	r3, #45	; 0x2d
 8008122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008126:	4a9c      	ldr	r2, [pc, #624]	; (8008398 <_printf_float+0x2fc>)
 8008128:	4b9c      	ldr	r3, [pc, #624]	; (800839c <_printf_float+0x300>)
 800812a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800812e:	bf8c      	ite	hi
 8008130:	4690      	movhi	r8, r2
 8008132:	4698      	movls	r8, r3
 8008134:	2303      	movs	r3, #3
 8008136:	f02b 0204 	bic.w	r2, fp, #4
 800813a:	6123      	str	r3, [r4, #16]
 800813c:	6022      	str	r2, [r4, #0]
 800813e:	f04f 0900 	mov.w	r9, #0
 8008142:	9700      	str	r7, [sp, #0]
 8008144:	4633      	mov	r3, r6
 8008146:	aa0b      	add	r2, sp, #44	; 0x2c
 8008148:	4621      	mov	r1, r4
 800814a:	4628      	mov	r0, r5
 800814c:	f000 f9e6 	bl	800851c <_printf_common>
 8008150:	3001      	adds	r0, #1
 8008152:	f040 808d 	bne.w	8008270 <_printf_float+0x1d4>
 8008156:	f04f 30ff 	mov.w	r0, #4294967295
 800815a:	b00d      	add	sp, #52	; 0x34
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	4642      	mov	r2, r8
 8008162:	464b      	mov	r3, r9
 8008164:	4640      	mov	r0, r8
 8008166:	4649      	mov	r1, r9
 8008168:	f7f8 fd00 	bl	8000b6c <__aeabi_dcmpun>
 800816c:	b110      	cbz	r0, 8008174 <_printf_float+0xd8>
 800816e:	4a8c      	ldr	r2, [pc, #560]	; (80083a0 <_printf_float+0x304>)
 8008170:	4b8c      	ldr	r3, [pc, #560]	; (80083a4 <_printf_float+0x308>)
 8008172:	e7da      	b.n	800812a <_printf_float+0x8e>
 8008174:	6861      	ldr	r1, [r4, #4]
 8008176:	1c4b      	adds	r3, r1, #1
 8008178:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800817c:	a80a      	add	r0, sp, #40	; 0x28
 800817e:	d13e      	bne.n	80081fe <_printf_float+0x162>
 8008180:	2306      	movs	r3, #6
 8008182:	6063      	str	r3, [r4, #4]
 8008184:	2300      	movs	r3, #0
 8008186:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800818a:	ab09      	add	r3, sp, #36	; 0x24
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	ec49 8b10 	vmov	d0, r8, r9
 8008192:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	f8cd a004 	str.w	sl, [sp, #4]
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4628      	mov	r0, r5
 80081a0:	f7ff fee8 	bl	8007f74 <__cvt>
 80081a4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80081a8:	2b47      	cmp	r3, #71	; 0x47
 80081aa:	4680      	mov	r8, r0
 80081ac:	d109      	bne.n	80081c2 <_printf_float+0x126>
 80081ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b0:	1cd8      	adds	r0, r3, #3
 80081b2:	db02      	blt.n	80081ba <_printf_float+0x11e>
 80081b4:	6862      	ldr	r2, [r4, #4]
 80081b6:	4293      	cmp	r3, r2
 80081b8:	dd47      	ble.n	800824a <_printf_float+0x1ae>
 80081ba:	f1aa 0a02 	sub.w	sl, sl, #2
 80081be:	fa5f fa8a 	uxtb.w	sl, sl
 80081c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80081c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081c8:	d824      	bhi.n	8008214 <_printf_float+0x178>
 80081ca:	3901      	subs	r1, #1
 80081cc:	4652      	mov	r2, sl
 80081ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081d2:	9109      	str	r1, [sp, #36]	; 0x24
 80081d4:	f7ff ff2f 	bl	8008036 <__exponent>
 80081d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081da:	1813      	adds	r3, r2, r0
 80081dc:	2a01      	cmp	r2, #1
 80081de:	4681      	mov	r9, r0
 80081e0:	6123      	str	r3, [r4, #16]
 80081e2:	dc02      	bgt.n	80081ea <_printf_float+0x14e>
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	07d1      	lsls	r1, r2, #31
 80081e8:	d501      	bpl.n	80081ee <_printf_float+0x152>
 80081ea:	3301      	adds	r3, #1
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0a5      	beq.n	8008142 <_printf_float+0xa6>
 80081f6:	232d      	movs	r3, #45	; 0x2d
 80081f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081fc:	e7a1      	b.n	8008142 <_printf_float+0xa6>
 80081fe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008202:	f000 8177 	beq.w	80084f4 <_printf_float+0x458>
 8008206:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800820a:	d1bb      	bne.n	8008184 <_printf_float+0xe8>
 800820c:	2900      	cmp	r1, #0
 800820e:	d1b9      	bne.n	8008184 <_printf_float+0xe8>
 8008210:	2301      	movs	r3, #1
 8008212:	e7b6      	b.n	8008182 <_printf_float+0xe6>
 8008214:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008218:	d119      	bne.n	800824e <_printf_float+0x1b2>
 800821a:	2900      	cmp	r1, #0
 800821c:	6863      	ldr	r3, [r4, #4]
 800821e:	dd0c      	ble.n	800823a <_printf_float+0x19e>
 8008220:	6121      	str	r1, [r4, #16]
 8008222:	b913      	cbnz	r3, 800822a <_printf_float+0x18e>
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	07d2      	lsls	r2, r2, #31
 8008228:	d502      	bpl.n	8008230 <_printf_float+0x194>
 800822a:	3301      	adds	r3, #1
 800822c:	440b      	add	r3, r1
 800822e:	6123      	str	r3, [r4, #16]
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	65a3      	str	r3, [r4, #88]	; 0x58
 8008234:	f04f 0900 	mov.w	r9, #0
 8008238:	e7d9      	b.n	80081ee <_printf_float+0x152>
 800823a:	b913      	cbnz	r3, 8008242 <_printf_float+0x1a6>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	07d0      	lsls	r0, r2, #31
 8008240:	d501      	bpl.n	8008246 <_printf_float+0x1aa>
 8008242:	3302      	adds	r3, #2
 8008244:	e7f3      	b.n	800822e <_printf_float+0x192>
 8008246:	2301      	movs	r3, #1
 8008248:	e7f1      	b.n	800822e <_printf_float+0x192>
 800824a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800824e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008252:	4293      	cmp	r3, r2
 8008254:	db05      	blt.n	8008262 <_printf_float+0x1c6>
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	07d1      	lsls	r1, r2, #31
 800825c:	d5e8      	bpl.n	8008230 <_printf_float+0x194>
 800825e:	3301      	adds	r3, #1
 8008260:	e7e5      	b.n	800822e <_printf_float+0x192>
 8008262:	2b00      	cmp	r3, #0
 8008264:	bfd4      	ite	le
 8008266:	f1c3 0302 	rsble	r3, r3, #2
 800826a:	2301      	movgt	r3, #1
 800826c:	4413      	add	r3, r2
 800826e:	e7de      	b.n	800822e <_printf_float+0x192>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	055a      	lsls	r2, r3, #21
 8008274:	d407      	bmi.n	8008286 <_printf_float+0x1ea>
 8008276:	6923      	ldr	r3, [r4, #16]
 8008278:	4642      	mov	r2, r8
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	d12b      	bne.n	80082dc <_printf_float+0x240>
 8008284:	e767      	b.n	8008156 <_printf_float+0xba>
 8008286:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800828a:	f240 80dc 	bls.w	8008446 <_printf_float+0x3aa>
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008296:	f7f8 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800829a:	2800      	cmp	r0, #0
 800829c:	d033      	beq.n	8008306 <_printf_float+0x26a>
 800829e:	2301      	movs	r3, #1
 80082a0:	4a41      	ldr	r2, [pc, #260]	; (80083a8 <_printf_float+0x30c>)
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	f43f af54 	beq.w	8008156 <_printf_float+0xba>
 80082ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b2:	429a      	cmp	r2, r3
 80082b4:	db02      	blt.n	80082bc <_printf_float+0x220>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	07d8      	lsls	r0, r3, #31
 80082ba:	d50f      	bpl.n	80082dc <_printf_float+0x240>
 80082bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f af45 	beq.w	8008156 <_printf_float+0xba>
 80082cc:	f04f 0800 	mov.w	r8, #0
 80082d0:	f104 091a 	add.w	r9, r4, #26
 80082d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d6:	3b01      	subs	r3, #1
 80082d8:	4543      	cmp	r3, r8
 80082da:	dc09      	bgt.n	80082f0 <_printf_float+0x254>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	079b      	lsls	r3, r3, #30
 80082e0:	f100 8103 	bmi.w	80084ea <_printf_float+0x44e>
 80082e4:	68e0      	ldr	r0, [r4, #12]
 80082e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e8:	4298      	cmp	r0, r3
 80082ea:	bfb8      	it	lt
 80082ec:	4618      	movlt	r0, r3
 80082ee:	e734      	b.n	800815a <_printf_float+0xbe>
 80082f0:	2301      	movs	r3, #1
 80082f2:	464a      	mov	r2, r9
 80082f4:	4631      	mov	r1, r6
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	f43f af2b 	beq.w	8008156 <_printf_float+0xba>
 8008300:	f108 0801 	add.w	r8, r8, #1
 8008304:	e7e6      	b.n	80082d4 <_printf_float+0x238>
 8008306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc2b      	bgt.n	8008364 <_printf_float+0x2c8>
 800830c:	2301      	movs	r3, #1
 800830e:	4a26      	ldr	r2, [pc, #152]	; (80083a8 <_printf_float+0x30c>)
 8008310:	4631      	mov	r1, r6
 8008312:	4628      	mov	r0, r5
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	f43f af1d 	beq.w	8008156 <_printf_float+0xba>
 800831c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831e:	b923      	cbnz	r3, 800832a <_printf_float+0x28e>
 8008320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008322:	b913      	cbnz	r3, 800832a <_printf_float+0x28e>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	07d9      	lsls	r1, r3, #31
 8008328:	d5d8      	bpl.n	80082dc <_printf_float+0x240>
 800832a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800832e:	4631      	mov	r1, r6
 8008330:	4628      	mov	r0, r5
 8008332:	47b8      	blx	r7
 8008334:	3001      	adds	r0, #1
 8008336:	f43f af0e 	beq.w	8008156 <_printf_float+0xba>
 800833a:	f04f 0900 	mov.w	r9, #0
 800833e:	f104 0a1a 	add.w	sl, r4, #26
 8008342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008344:	425b      	negs	r3, r3
 8008346:	454b      	cmp	r3, r9
 8008348:	dc01      	bgt.n	800834e <_printf_float+0x2b2>
 800834a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834c:	e794      	b.n	8008278 <_printf_float+0x1dc>
 800834e:	2301      	movs	r3, #1
 8008350:	4652      	mov	r2, sl
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f aefc 	beq.w	8008156 <_printf_float+0xba>
 800835e:	f109 0901 	add.w	r9, r9, #1
 8008362:	e7ee      	b.n	8008342 <_printf_float+0x2a6>
 8008364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008368:	429a      	cmp	r2, r3
 800836a:	bfa8      	it	ge
 800836c:	461a      	movge	r2, r3
 800836e:	2a00      	cmp	r2, #0
 8008370:	4691      	mov	r9, r2
 8008372:	dd07      	ble.n	8008384 <_printf_float+0x2e8>
 8008374:	4613      	mov	r3, r2
 8008376:	4631      	mov	r1, r6
 8008378:	4642      	mov	r2, r8
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f aee9 	beq.w	8008156 <_printf_float+0xba>
 8008384:	f104 031a 	add.w	r3, r4, #26
 8008388:	f04f 0b00 	mov.w	fp, #0
 800838c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008390:	9306      	str	r3, [sp, #24]
 8008392:	e015      	b.n	80083c0 <_printf_float+0x324>
 8008394:	7fefffff 	.word	0x7fefffff
 8008398:	0801f644 	.word	0x0801f644
 800839c:	0801f640 	.word	0x0801f640
 80083a0:	0801f64c 	.word	0x0801f64c
 80083a4:	0801f648 	.word	0x0801f648
 80083a8:	0801f650 	.word	0x0801f650
 80083ac:	2301      	movs	r3, #1
 80083ae:	9a06      	ldr	r2, [sp, #24]
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f aecd 	beq.w	8008156 <_printf_float+0xba>
 80083bc:	f10b 0b01 	add.w	fp, fp, #1
 80083c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083c4:	ebaa 0309 	sub.w	r3, sl, r9
 80083c8:	455b      	cmp	r3, fp
 80083ca:	dcef      	bgt.n	80083ac <_printf_float+0x310>
 80083cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d0:	429a      	cmp	r2, r3
 80083d2:	44d0      	add	r8, sl
 80083d4:	db15      	blt.n	8008402 <_printf_float+0x366>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	07da      	lsls	r2, r3, #31
 80083da:	d412      	bmi.n	8008402 <_printf_float+0x366>
 80083dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e0:	eba3 020a 	sub.w	r2, r3, sl
 80083e4:	eba3 0a01 	sub.w	sl, r3, r1
 80083e8:	4592      	cmp	sl, r2
 80083ea:	bfa8      	it	ge
 80083ec:	4692      	movge	sl, r2
 80083ee:	f1ba 0f00 	cmp.w	sl, #0
 80083f2:	dc0e      	bgt.n	8008412 <_printf_float+0x376>
 80083f4:	f04f 0800 	mov.w	r8, #0
 80083f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083fc:	f104 091a 	add.w	r9, r4, #26
 8008400:	e019      	b.n	8008436 <_printf_float+0x39a>
 8008402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	47b8      	blx	r7
 800840c:	3001      	adds	r0, #1
 800840e:	d1e5      	bne.n	80083dc <_printf_float+0x340>
 8008410:	e6a1      	b.n	8008156 <_printf_float+0xba>
 8008412:	4653      	mov	r3, sl
 8008414:	4642      	mov	r2, r8
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	d1e9      	bne.n	80083f4 <_printf_float+0x358>
 8008420:	e699      	b.n	8008156 <_printf_float+0xba>
 8008422:	2301      	movs	r3, #1
 8008424:	464a      	mov	r2, r9
 8008426:	4631      	mov	r1, r6
 8008428:	4628      	mov	r0, r5
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	f43f ae92 	beq.w	8008156 <_printf_float+0xba>
 8008432:	f108 0801 	add.w	r8, r8, #1
 8008436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	eba3 030a 	sub.w	r3, r3, sl
 8008440:	4543      	cmp	r3, r8
 8008442:	dcee      	bgt.n	8008422 <_printf_float+0x386>
 8008444:	e74a      	b.n	80082dc <_printf_float+0x240>
 8008446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008448:	2a01      	cmp	r2, #1
 800844a:	dc01      	bgt.n	8008450 <_printf_float+0x3b4>
 800844c:	07db      	lsls	r3, r3, #31
 800844e:	d53a      	bpl.n	80084c6 <_printf_float+0x42a>
 8008450:	2301      	movs	r3, #1
 8008452:	4642      	mov	r2, r8
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f ae7b 	beq.w	8008156 <_printf_float+0xba>
 8008460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	f108 0801 	add.w	r8, r8, #1
 8008470:	f43f ae71 	beq.w	8008156 <_printf_float+0xba>
 8008474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008476:	2200      	movs	r2, #0
 8008478:	f103 3aff 	add.w	sl, r3, #4294967295
 800847c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008480:	2300      	movs	r3, #0
 8008482:	f7f8 fb41 	bl	8000b08 <__aeabi_dcmpeq>
 8008486:	b9c8      	cbnz	r0, 80084bc <_printf_float+0x420>
 8008488:	4653      	mov	r3, sl
 800848a:	4642      	mov	r2, r8
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	d10e      	bne.n	80084b4 <_printf_float+0x418>
 8008496:	e65e      	b.n	8008156 <_printf_float+0xba>
 8008498:	2301      	movs	r3, #1
 800849a:	4652      	mov	r2, sl
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f ae57 	beq.w	8008156 <_printf_float+0xba>
 80084a8:	f108 0801 	add.w	r8, r8, #1
 80084ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ae:	3b01      	subs	r3, #1
 80084b0:	4543      	cmp	r3, r8
 80084b2:	dcf1      	bgt.n	8008498 <_printf_float+0x3fc>
 80084b4:	464b      	mov	r3, r9
 80084b6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084ba:	e6de      	b.n	800827a <_printf_float+0x1de>
 80084bc:	f04f 0800 	mov.w	r8, #0
 80084c0:	f104 0a1a 	add.w	sl, r4, #26
 80084c4:	e7f2      	b.n	80084ac <_printf_float+0x410>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e7df      	b.n	800848a <_printf_float+0x3ee>
 80084ca:	2301      	movs	r3, #1
 80084cc:	464a      	mov	r2, r9
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f ae3e 	beq.w	8008156 <_printf_float+0xba>
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	4543      	cmp	r3, r8
 80084e6:	dcf0      	bgt.n	80084ca <_printf_float+0x42e>
 80084e8:	e6fc      	b.n	80082e4 <_printf_float+0x248>
 80084ea:	f04f 0800 	mov.w	r8, #0
 80084ee:	f104 0919 	add.w	r9, r4, #25
 80084f2:	e7f4      	b.n	80084de <_printf_float+0x442>
 80084f4:	2900      	cmp	r1, #0
 80084f6:	f43f ae8b 	beq.w	8008210 <_printf_float+0x174>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008500:	ab09      	add	r3, sp, #36	; 0x24
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	ec49 8b10 	vmov	d0, r8, r9
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	f8cd a004 	str.w	sl, [sp, #4]
 800850e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008512:	4628      	mov	r0, r5
 8008514:	f7ff fd2e 	bl	8007f74 <__cvt>
 8008518:	4680      	mov	r8, r0
 800851a:	e648      	b.n	80081ae <_printf_float+0x112>

0800851c <_printf_common>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	4691      	mov	r9, r2
 8008522:	461f      	mov	r7, r3
 8008524:	688a      	ldr	r2, [r1, #8]
 8008526:	690b      	ldr	r3, [r1, #16]
 8008528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800852c:	4293      	cmp	r3, r2
 800852e:	bfb8      	it	lt
 8008530:	4613      	movlt	r3, r2
 8008532:	f8c9 3000 	str.w	r3, [r9]
 8008536:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800853a:	4606      	mov	r6, r0
 800853c:	460c      	mov	r4, r1
 800853e:	b112      	cbz	r2, 8008546 <_printf_common+0x2a>
 8008540:	3301      	adds	r3, #1
 8008542:	f8c9 3000 	str.w	r3, [r9]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	0699      	lsls	r1, r3, #26
 800854a:	bf42      	ittt	mi
 800854c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008550:	3302      	addmi	r3, #2
 8008552:	f8c9 3000 	strmi.w	r3, [r9]
 8008556:	6825      	ldr	r5, [r4, #0]
 8008558:	f015 0506 	ands.w	r5, r5, #6
 800855c:	d107      	bne.n	800856e <_printf_common+0x52>
 800855e:	f104 0a19 	add.w	sl, r4, #25
 8008562:	68e3      	ldr	r3, [r4, #12]
 8008564:	f8d9 2000 	ldr.w	r2, [r9]
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	42ab      	cmp	r3, r5
 800856c:	dc28      	bgt.n	80085c0 <_printf_common+0xa4>
 800856e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008572:	6822      	ldr	r2, [r4, #0]
 8008574:	3300      	adds	r3, #0
 8008576:	bf18      	it	ne
 8008578:	2301      	movne	r3, #1
 800857a:	0692      	lsls	r2, r2, #26
 800857c:	d42d      	bmi.n	80085da <_printf_common+0xbe>
 800857e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008582:	4639      	mov	r1, r7
 8008584:	4630      	mov	r0, r6
 8008586:	47c0      	blx	r8
 8008588:	3001      	adds	r0, #1
 800858a:	d020      	beq.n	80085ce <_printf_common+0xb2>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	68e5      	ldr	r5, [r4, #12]
 8008590:	f8d9 2000 	ldr.w	r2, [r9]
 8008594:	f003 0306 	and.w	r3, r3, #6
 8008598:	2b04      	cmp	r3, #4
 800859a:	bf08      	it	eq
 800859c:	1aad      	subeq	r5, r5, r2
 800859e:	68a3      	ldr	r3, [r4, #8]
 80085a0:	6922      	ldr	r2, [r4, #16]
 80085a2:	bf0c      	ite	eq
 80085a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a8:	2500      	movne	r5, #0
 80085aa:	4293      	cmp	r3, r2
 80085ac:	bfc4      	itt	gt
 80085ae:	1a9b      	subgt	r3, r3, r2
 80085b0:	18ed      	addgt	r5, r5, r3
 80085b2:	f04f 0900 	mov.w	r9, #0
 80085b6:	341a      	adds	r4, #26
 80085b8:	454d      	cmp	r5, r9
 80085ba:	d11a      	bne.n	80085f2 <_printf_common+0xd6>
 80085bc:	2000      	movs	r0, #0
 80085be:	e008      	b.n	80085d2 <_printf_common+0xb6>
 80085c0:	2301      	movs	r3, #1
 80085c2:	4652      	mov	r2, sl
 80085c4:	4639      	mov	r1, r7
 80085c6:	4630      	mov	r0, r6
 80085c8:	47c0      	blx	r8
 80085ca:	3001      	adds	r0, #1
 80085cc:	d103      	bne.n	80085d6 <_printf_common+0xba>
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d6:	3501      	adds	r5, #1
 80085d8:	e7c3      	b.n	8008562 <_printf_common+0x46>
 80085da:	18e1      	adds	r1, r4, r3
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	2030      	movs	r0, #48	; 0x30
 80085e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085e4:	4422      	add	r2, r4
 80085e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ee:	3302      	adds	r3, #2
 80085f0:	e7c5      	b.n	800857e <_printf_common+0x62>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4622      	mov	r2, r4
 80085f6:	4639      	mov	r1, r7
 80085f8:	4630      	mov	r0, r6
 80085fa:	47c0      	blx	r8
 80085fc:	3001      	adds	r0, #1
 80085fe:	d0e6      	beq.n	80085ce <_printf_common+0xb2>
 8008600:	f109 0901 	add.w	r9, r9, #1
 8008604:	e7d8      	b.n	80085b8 <_printf_common+0x9c>
	...

08008608 <_printf_i>:
 8008608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800860c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008610:	460c      	mov	r4, r1
 8008612:	7e09      	ldrb	r1, [r1, #24]
 8008614:	b085      	sub	sp, #20
 8008616:	296e      	cmp	r1, #110	; 0x6e
 8008618:	4617      	mov	r7, r2
 800861a:	4606      	mov	r6, r0
 800861c:	4698      	mov	r8, r3
 800861e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008620:	f000 80b3 	beq.w	800878a <_printf_i+0x182>
 8008624:	d822      	bhi.n	800866c <_printf_i+0x64>
 8008626:	2963      	cmp	r1, #99	; 0x63
 8008628:	d036      	beq.n	8008698 <_printf_i+0x90>
 800862a:	d80a      	bhi.n	8008642 <_printf_i+0x3a>
 800862c:	2900      	cmp	r1, #0
 800862e:	f000 80b9 	beq.w	80087a4 <_printf_i+0x19c>
 8008632:	2958      	cmp	r1, #88	; 0x58
 8008634:	f000 8083 	beq.w	800873e <_printf_i+0x136>
 8008638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800863c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008640:	e032      	b.n	80086a8 <_printf_i+0xa0>
 8008642:	2964      	cmp	r1, #100	; 0x64
 8008644:	d001      	beq.n	800864a <_printf_i+0x42>
 8008646:	2969      	cmp	r1, #105	; 0x69
 8008648:	d1f6      	bne.n	8008638 <_printf_i+0x30>
 800864a:	6820      	ldr	r0, [r4, #0]
 800864c:	6813      	ldr	r3, [r2, #0]
 800864e:	0605      	lsls	r5, r0, #24
 8008650:	f103 0104 	add.w	r1, r3, #4
 8008654:	d52a      	bpl.n	80086ac <_printf_i+0xa4>
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	da03      	bge.n	8008666 <_printf_i+0x5e>
 800865e:	222d      	movs	r2, #45	; 0x2d
 8008660:	425b      	negs	r3, r3
 8008662:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008666:	486f      	ldr	r0, [pc, #444]	; (8008824 <_printf_i+0x21c>)
 8008668:	220a      	movs	r2, #10
 800866a:	e039      	b.n	80086e0 <_printf_i+0xd8>
 800866c:	2973      	cmp	r1, #115	; 0x73
 800866e:	f000 809d 	beq.w	80087ac <_printf_i+0x1a4>
 8008672:	d808      	bhi.n	8008686 <_printf_i+0x7e>
 8008674:	296f      	cmp	r1, #111	; 0x6f
 8008676:	d020      	beq.n	80086ba <_printf_i+0xb2>
 8008678:	2970      	cmp	r1, #112	; 0x70
 800867a:	d1dd      	bne.n	8008638 <_printf_i+0x30>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	f043 0320 	orr.w	r3, r3, #32
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	e003      	b.n	800868e <_printf_i+0x86>
 8008686:	2975      	cmp	r1, #117	; 0x75
 8008688:	d017      	beq.n	80086ba <_printf_i+0xb2>
 800868a:	2978      	cmp	r1, #120	; 0x78
 800868c:	d1d4      	bne.n	8008638 <_printf_i+0x30>
 800868e:	2378      	movs	r3, #120	; 0x78
 8008690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008694:	4864      	ldr	r0, [pc, #400]	; (8008828 <_printf_i+0x220>)
 8008696:	e055      	b.n	8008744 <_printf_i+0x13c>
 8008698:	6813      	ldr	r3, [r2, #0]
 800869a:	1d19      	adds	r1, r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6011      	str	r1, [r2, #0]
 80086a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a8:	2301      	movs	r3, #1
 80086aa:	e08c      	b.n	80087c6 <_printf_i+0x1be>
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6011      	str	r1, [r2, #0]
 80086b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086b4:	bf18      	it	ne
 80086b6:	b21b      	sxthne	r3, r3
 80086b8:	e7cf      	b.n	800865a <_printf_i+0x52>
 80086ba:	6813      	ldr	r3, [r2, #0]
 80086bc:	6825      	ldr	r5, [r4, #0]
 80086be:	1d18      	adds	r0, r3, #4
 80086c0:	6010      	str	r0, [r2, #0]
 80086c2:	0628      	lsls	r0, r5, #24
 80086c4:	d501      	bpl.n	80086ca <_printf_i+0xc2>
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	e002      	b.n	80086d0 <_printf_i+0xc8>
 80086ca:	0668      	lsls	r0, r5, #25
 80086cc:	d5fb      	bpl.n	80086c6 <_printf_i+0xbe>
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	4854      	ldr	r0, [pc, #336]	; (8008824 <_printf_i+0x21c>)
 80086d2:	296f      	cmp	r1, #111	; 0x6f
 80086d4:	bf14      	ite	ne
 80086d6:	220a      	movne	r2, #10
 80086d8:	2208      	moveq	r2, #8
 80086da:	2100      	movs	r1, #0
 80086dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086e0:	6865      	ldr	r5, [r4, #4]
 80086e2:	60a5      	str	r5, [r4, #8]
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	f2c0 8095 	blt.w	8008814 <_printf_i+0x20c>
 80086ea:	6821      	ldr	r1, [r4, #0]
 80086ec:	f021 0104 	bic.w	r1, r1, #4
 80086f0:	6021      	str	r1, [r4, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d13d      	bne.n	8008772 <_printf_i+0x16a>
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	f040 808e 	bne.w	8008818 <_printf_i+0x210>
 80086fc:	4665      	mov	r5, ip
 80086fe:	2a08      	cmp	r2, #8
 8008700:	d10b      	bne.n	800871a <_printf_i+0x112>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	07db      	lsls	r3, r3, #31
 8008706:	d508      	bpl.n	800871a <_printf_i+0x112>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	6862      	ldr	r2, [r4, #4]
 800870c:	429a      	cmp	r2, r3
 800870e:	bfde      	ittt	le
 8008710:	2330      	movle	r3, #48	; 0x30
 8008712:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008716:	f105 35ff 	addle.w	r5, r5, #4294967295
 800871a:	ebac 0305 	sub.w	r3, ip, r5
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	f8cd 8000 	str.w	r8, [sp]
 8008724:	463b      	mov	r3, r7
 8008726:	aa03      	add	r2, sp, #12
 8008728:	4621      	mov	r1, r4
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff fef6 	bl	800851c <_printf_common>
 8008730:	3001      	adds	r0, #1
 8008732:	d14d      	bne.n	80087d0 <_printf_i+0x1c8>
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	b005      	add	sp, #20
 800873a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800873e:	4839      	ldr	r0, [pc, #228]	; (8008824 <_printf_i+0x21c>)
 8008740:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008744:	6813      	ldr	r3, [r2, #0]
 8008746:	6821      	ldr	r1, [r4, #0]
 8008748:	1d1d      	adds	r5, r3, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6015      	str	r5, [r2, #0]
 800874e:	060a      	lsls	r2, r1, #24
 8008750:	d50b      	bpl.n	800876a <_printf_i+0x162>
 8008752:	07ca      	lsls	r2, r1, #31
 8008754:	bf44      	itt	mi
 8008756:	f041 0120 	orrmi.w	r1, r1, #32
 800875a:	6021      	strmi	r1, [r4, #0]
 800875c:	b91b      	cbnz	r3, 8008766 <_printf_i+0x15e>
 800875e:	6822      	ldr	r2, [r4, #0]
 8008760:	f022 0220 	bic.w	r2, r2, #32
 8008764:	6022      	str	r2, [r4, #0]
 8008766:	2210      	movs	r2, #16
 8008768:	e7b7      	b.n	80086da <_printf_i+0xd2>
 800876a:	064d      	lsls	r5, r1, #25
 800876c:	bf48      	it	mi
 800876e:	b29b      	uxthmi	r3, r3
 8008770:	e7ef      	b.n	8008752 <_printf_i+0x14a>
 8008772:	4665      	mov	r5, ip
 8008774:	fbb3 f1f2 	udiv	r1, r3, r2
 8008778:	fb02 3311 	mls	r3, r2, r1, r3
 800877c:	5cc3      	ldrb	r3, [r0, r3]
 800877e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008782:	460b      	mov	r3, r1
 8008784:	2900      	cmp	r1, #0
 8008786:	d1f5      	bne.n	8008774 <_printf_i+0x16c>
 8008788:	e7b9      	b.n	80086fe <_printf_i+0xf6>
 800878a:	6813      	ldr	r3, [r2, #0]
 800878c:	6825      	ldr	r5, [r4, #0]
 800878e:	6961      	ldr	r1, [r4, #20]
 8008790:	1d18      	adds	r0, r3, #4
 8008792:	6010      	str	r0, [r2, #0]
 8008794:	0628      	lsls	r0, r5, #24
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	d501      	bpl.n	800879e <_printf_i+0x196>
 800879a:	6019      	str	r1, [r3, #0]
 800879c:	e002      	b.n	80087a4 <_printf_i+0x19c>
 800879e:	066a      	lsls	r2, r5, #25
 80087a0:	d5fb      	bpl.n	800879a <_printf_i+0x192>
 80087a2:	8019      	strh	r1, [r3, #0]
 80087a4:	2300      	movs	r3, #0
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	4665      	mov	r5, ip
 80087aa:	e7b9      	b.n	8008720 <_printf_i+0x118>
 80087ac:	6813      	ldr	r3, [r2, #0]
 80087ae:	1d19      	adds	r1, r3, #4
 80087b0:	6011      	str	r1, [r2, #0]
 80087b2:	681d      	ldr	r5, [r3, #0]
 80087b4:	6862      	ldr	r2, [r4, #4]
 80087b6:	2100      	movs	r1, #0
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7f7 fd31 	bl	8000220 <memchr>
 80087be:	b108      	cbz	r0, 80087c4 <_printf_i+0x1bc>
 80087c0:	1b40      	subs	r0, r0, r5
 80087c2:	6060      	str	r0, [r4, #4]
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	2300      	movs	r3, #0
 80087ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ce:	e7a7      	b.n	8008720 <_printf_i+0x118>
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	462a      	mov	r2, r5
 80087d4:	4639      	mov	r1, r7
 80087d6:	4630      	mov	r0, r6
 80087d8:	47c0      	blx	r8
 80087da:	3001      	adds	r0, #1
 80087dc:	d0aa      	beq.n	8008734 <_printf_i+0x12c>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	079b      	lsls	r3, r3, #30
 80087e2:	d413      	bmi.n	800880c <_printf_i+0x204>
 80087e4:	68e0      	ldr	r0, [r4, #12]
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	4298      	cmp	r0, r3
 80087ea:	bfb8      	it	lt
 80087ec:	4618      	movlt	r0, r3
 80087ee:	e7a3      	b.n	8008738 <_printf_i+0x130>
 80087f0:	2301      	movs	r3, #1
 80087f2:	464a      	mov	r2, r9
 80087f4:	4639      	mov	r1, r7
 80087f6:	4630      	mov	r0, r6
 80087f8:	47c0      	blx	r8
 80087fa:	3001      	adds	r0, #1
 80087fc:	d09a      	beq.n	8008734 <_printf_i+0x12c>
 80087fe:	3501      	adds	r5, #1
 8008800:	68e3      	ldr	r3, [r4, #12]
 8008802:	9a03      	ldr	r2, [sp, #12]
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	42ab      	cmp	r3, r5
 8008808:	dcf2      	bgt.n	80087f0 <_printf_i+0x1e8>
 800880a:	e7eb      	b.n	80087e4 <_printf_i+0x1dc>
 800880c:	2500      	movs	r5, #0
 800880e:	f104 0919 	add.w	r9, r4, #25
 8008812:	e7f5      	b.n	8008800 <_printf_i+0x1f8>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1ac      	bne.n	8008772 <_printf_i+0x16a>
 8008818:	7803      	ldrb	r3, [r0, #0]
 800881a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800881e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008822:	e76c      	b.n	80086fe <_printf_i+0xf6>
 8008824:	0801f652 	.word	0x0801f652
 8008828:	0801f663 	.word	0x0801f663

0800882c <iprintf>:
 800882c:	b40f      	push	{r0, r1, r2, r3}
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <iprintf+0x2c>)
 8008830:	b513      	push	{r0, r1, r4, lr}
 8008832:	681c      	ldr	r4, [r3, #0]
 8008834:	b124      	cbz	r4, 8008840 <iprintf+0x14>
 8008836:	69a3      	ldr	r3, [r4, #24]
 8008838:	b913      	cbnz	r3, 8008840 <iprintf+0x14>
 800883a:	4620      	mov	r0, r4
 800883c:	f001 f89c 	bl	8009978 <__sinit>
 8008840:	ab05      	add	r3, sp, #20
 8008842:	9a04      	ldr	r2, [sp, #16]
 8008844:	68a1      	ldr	r1, [r4, #8]
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	4620      	mov	r0, r4
 800884a:	f001 feb1 	bl	800a5b0 <_vfiprintf_r>
 800884e:	b002      	add	sp, #8
 8008850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008854:	b004      	add	sp, #16
 8008856:	4770      	bx	lr
 8008858:	20000030 	.word	0x20000030

0800885c <putchar>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4b08      	ldr	r3, [pc, #32]	; (8008880 <putchar+0x24>)
 8008860:	681c      	ldr	r4, [r3, #0]
 8008862:	4605      	mov	r5, r0
 8008864:	b124      	cbz	r4, 8008870 <putchar+0x14>
 8008866:	69a3      	ldr	r3, [r4, #24]
 8008868:	b913      	cbnz	r3, 8008870 <putchar+0x14>
 800886a:	4620      	mov	r0, r4
 800886c:	f001 f884 	bl	8009978 <__sinit>
 8008870:	68a2      	ldr	r2, [r4, #8]
 8008872:	4629      	mov	r1, r5
 8008874:	4620      	mov	r0, r4
 8008876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800887a:	f001 bfaf 	b.w	800a7dc <_putc_r>
 800887e:	bf00      	nop
 8008880:	20000030 	.word	0x20000030

08008884 <_puts_r>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	460e      	mov	r6, r1
 8008888:	4605      	mov	r5, r0
 800888a:	b118      	cbz	r0, 8008894 <_puts_r+0x10>
 800888c:	6983      	ldr	r3, [r0, #24]
 800888e:	b90b      	cbnz	r3, 8008894 <_puts_r+0x10>
 8008890:	f001 f872 	bl	8009978 <__sinit>
 8008894:	69ab      	ldr	r3, [r5, #24]
 8008896:	68ac      	ldr	r4, [r5, #8]
 8008898:	b913      	cbnz	r3, 80088a0 <_puts_r+0x1c>
 800889a:	4628      	mov	r0, r5
 800889c:	f001 f86c 	bl	8009978 <__sinit>
 80088a0:	4b23      	ldr	r3, [pc, #140]	; (8008930 <_puts_r+0xac>)
 80088a2:	429c      	cmp	r4, r3
 80088a4:	d117      	bne.n	80088d6 <_puts_r+0x52>
 80088a6:	686c      	ldr	r4, [r5, #4]
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	071b      	lsls	r3, r3, #28
 80088ac:	d51d      	bpl.n	80088ea <_puts_r+0x66>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	b1db      	cbz	r3, 80088ea <_puts_r+0x66>
 80088b2:	3e01      	subs	r6, #1
 80088b4:	68a3      	ldr	r3, [r4, #8]
 80088b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088ba:	3b01      	subs	r3, #1
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	b9e9      	cbnz	r1, 80088fc <_puts_r+0x78>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	da2e      	bge.n	8008922 <_puts_r+0x9e>
 80088c4:	4622      	mov	r2, r4
 80088c6:	210a      	movs	r1, #10
 80088c8:	4628      	mov	r0, r5
 80088ca:	f000 f85f 	bl	800898c <__swbuf_r>
 80088ce:	3001      	adds	r0, #1
 80088d0:	d011      	beq.n	80088f6 <_puts_r+0x72>
 80088d2:	200a      	movs	r0, #10
 80088d4:	e011      	b.n	80088fa <_puts_r+0x76>
 80088d6:	4b17      	ldr	r3, [pc, #92]	; (8008934 <_puts_r+0xb0>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	d101      	bne.n	80088e0 <_puts_r+0x5c>
 80088dc:	68ac      	ldr	r4, [r5, #8]
 80088de:	e7e3      	b.n	80088a8 <_puts_r+0x24>
 80088e0:	4b15      	ldr	r3, [pc, #84]	; (8008938 <_puts_r+0xb4>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	bf08      	it	eq
 80088e6:	68ec      	ldreq	r4, [r5, #12]
 80088e8:	e7de      	b.n	80088a8 <_puts_r+0x24>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 f89f 	bl	8008a30 <__swsetup_r>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d0dd      	beq.n	80088b2 <_puts_r+0x2e>
 80088f6:	f04f 30ff 	mov.w	r0, #4294967295
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da04      	bge.n	800890a <_puts_r+0x86>
 8008900:	69a2      	ldr	r2, [r4, #24]
 8008902:	429a      	cmp	r2, r3
 8008904:	dc06      	bgt.n	8008914 <_puts_r+0x90>
 8008906:	290a      	cmp	r1, #10
 8008908:	d004      	beq.n	8008914 <_puts_r+0x90>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	6022      	str	r2, [r4, #0]
 8008910:	7019      	strb	r1, [r3, #0]
 8008912:	e7cf      	b.n	80088b4 <_puts_r+0x30>
 8008914:	4622      	mov	r2, r4
 8008916:	4628      	mov	r0, r5
 8008918:	f000 f838 	bl	800898c <__swbuf_r>
 800891c:	3001      	adds	r0, #1
 800891e:	d1c9      	bne.n	80088b4 <_puts_r+0x30>
 8008920:	e7e9      	b.n	80088f6 <_puts_r+0x72>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	200a      	movs	r0, #10
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	6022      	str	r2, [r4, #0]
 800892a:	7018      	strb	r0, [r3, #0]
 800892c:	e7e5      	b.n	80088fa <_puts_r+0x76>
 800892e:	bf00      	nop
 8008930:	0801f6a4 	.word	0x0801f6a4
 8008934:	0801f6c4 	.word	0x0801f6c4
 8008938:	0801f684 	.word	0x0801f684

0800893c <puts>:
 800893c:	4b02      	ldr	r3, [pc, #8]	; (8008948 <puts+0xc>)
 800893e:	4601      	mov	r1, r0
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	f7ff bf9f 	b.w	8008884 <_puts_r>
 8008946:	bf00      	nop
 8008948:	20000030 	.word	0x20000030

0800894c <_vsiprintf_r>:
 800894c:	b500      	push	{lr}
 800894e:	b09b      	sub	sp, #108	; 0x6c
 8008950:	9100      	str	r1, [sp, #0]
 8008952:	9104      	str	r1, [sp, #16]
 8008954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008958:	9105      	str	r1, [sp, #20]
 800895a:	9102      	str	r1, [sp, #8]
 800895c:	4905      	ldr	r1, [pc, #20]	; (8008974 <_vsiprintf_r+0x28>)
 800895e:	9103      	str	r1, [sp, #12]
 8008960:	4669      	mov	r1, sp
 8008962:	f001 fd03 	bl	800a36c <_svfiprintf_r>
 8008966:	9b00      	ldr	r3, [sp, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	b01b      	add	sp, #108	; 0x6c
 800896e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008972:	bf00      	nop
 8008974:	ffff0208 	.word	0xffff0208

08008978 <vsiprintf>:
 8008978:	4613      	mov	r3, r2
 800897a:	460a      	mov	r2, r1
 800897c:	4601      	mov	r1, r0
 800897e:	4802      	ldr	r0, [pc, #8]	; (8008988 <vsiprintf+0x10>)
 8008980:	6800      	ldr	r0, [r0, #0]
 8008982:	f7ff bfe3 	b.w	800894c <_vsiprintf_r>
 8008986:	bf00      	nop
 8008988:	20000030 	.word	0x20000030

0800898c <__swbuf_r>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	460e      	mov	r6, r1
 8008990:	4614      	mov	r4, r2
 8008992:	4605      	mov	r5, r0
 8008994:	b118      	cbz	r0, 800899e <__swbuf_r+0x12>
 8008996:	6983      	ldr	r3, [r0, #24]
 8008998:	b90b      	cbnz	r3, 800899e <__swbuf_r+0x12>
 800899a:	f000 ffed 	bl	8009978 <__sinit>
 800899e:	4b21      	ldr	r3, [pc, #132]	; (8008a24 <__swbuf_r+0x98>)
 80089a0:	429c      	cmp	r4, r3
 80089a2:	d12a      	bne.n	80089fa <__swbuf_r+0x6e>
 80089a4:	686c      	ldr	r4, [r5, #4]
 80089a6:	69a3      	ldr	r3, [r4, #24]
 80089a8:	60a3      	str	r3, [r4, #8]
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	071a      	lsls	r2, r3, #28
 80089ae:	d52e      	bpl.n	8008a0e <__swbuf_r+0x82>
 80089b0:	6923      	ldr	r3, [r4, #16]
 80089b2:	b363      	cbz	r3, 8008a0e <__swbuf_r+0x82>
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	6820      	ldr	r0, [r4, #0]
 80089b8:	1ac0      	subs	r0, r0, r3
 80089ba:	6963      	ldr	r3, [r4, #20]
 80089bc:	b2f6      	uxtb	r6, r6
 80089be:	4283      	cmp	r3, r0
 80089c0:	4637      	mov	r7, r6
 80089c2:	dc04      	bgt.n	80089ce <__swbuf_r+0x42>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 ff6c 	bl	80098a4 <_fflush_r>
 80089cc:	bb28      	cbnz	r0, 8008a1a <__swbuf_r+0x8e>
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	701e      	strb	r6, [r3, #0]
 80089dc:	6963      	ldr	r3, [r4, #20]
 80089de:	3001      	adds	r0, #1
 80089e0:	4283      	cmp	r3, r0
 80089e2:	d004      	beq.n	80089ee <__swbuf_r+0x62>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d519      	bpl.n	8008a1e <__swbuf_r+0x92>
 80089ea:	2e0a      	cmp	r6, #10
 80089ec:	d117      	bne.n	8008a1e <__swbuf_r+0x92>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 ff57 	bl	80098a4 <_fflush_r>
 80089f6:	b190      	cbz	r0, 8008a1e <__swbuf_r+0x92>
 80089f8:	e00f      	b.n	8008a1a <__swbuf_r+0x8e>
 80089fa:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <__swbuf_r+0x9c>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	d101      	bne.n	8008a04 <__swbuf_r+0x78>
 8008a00:	68ac      	ldr	r4, [r5, #8]
 8008a02:	e7d0      	b.n	80089a6 <__swbuf_r+0x1a>
 8008a04:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <__swbuf_r+0xa0>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	bf08      	it	eq
 8008a0a:	68ec      	ldreq	r4, [r5, #12]
 8008a0c:	e7cb      	b.n	80089a6 <__swbuf_r+0x1a>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 f80d 	bl	8008a30 <__swsetup_r>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0cc      	beq.n	80089b4 <__swbuf_r+0x28>
 8008a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8008a1e:	4638      	mov	r0, r7
 8008a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a22:	bf00      	nop
 8008a24:	0801f6a4 	.word	0x0801f6a4
 8008a28:	0801f6c4 	.word	0x0801f6c4
 8008a2c:	0801f684 	.word	0x0801f684

08008a30 <__swsetup_r>:
 8008a30:	4b32      	ldr	r3, [pc, #200]	; (8008afc <__swsetup_r+0xcc>)
 8008a32:	b570      	push	{r4, r5, r6, lr}
 8008a34:	681d      	ldr	r5, [r3, #0]
 8008a36:	4606      	mov	r6, r0
 8008a38:	460c      	mov	r4, r1
 8008a3a:	b125      	cbz	r5, 8008a46 <__swsetup_r+0x16>
 8008a3c:	69ab      	ldr	r3, [r5, #24]
 8008a3e:	b913      	cbnz	r3, 8008a46 <__swsetup_r+0x16>
 8008a40:	4628      	mov	r0, r5
 8008a42:	f000 ff99 	bl	8009978 <__sinit>
 8008a46:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <__swsetup_r+0xd0>)
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	d10f      	bne.n	8008a6c <__swsetup_r+0x3c>
 8008a4c:	686c      	ldr	r4, [r5, #4]
 8008a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	0715      	lsls	r5, r2, #28
 8008a56:	d42c      	bmi.n	8008ab2 <__swsetup_r+0x82>
 8008a58:	06d0      	lsls	r0, r2, #27
 8008a5a:	d411      	bmi.n	8008a80 <__swsetup_r+0x50>
 8008a5c:	2209      	movs	r2, #9
 8008a5e:	6032      	str	r2, [r6, #0]
 8008a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6a:	e03e      	b.n	8008aea <__swsetup_r+0xba>
 8008a6c:	4b25      	ldr	r3, [pc, #148]	; (8008b04 <__swsetup_r+0xd4>)
 8008a6e:	429c      	cmp	r4, r3
 8008a70:	d101      	bne.n	8008a76 <__swsetup_r+0x46>
 8008a72:	68ac      	ldr	r4, [r5, #8]
 8008a74:	e7eb      	b.n	8008a4e <__swsetup_r+0x1e>
 8008a76:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <__swsetup_r+0xd8>)
 8008a78:	429c      	cmp	r4, r3
 8008a7a:	bf08      	it	eq
 8008a7c:	68ec      	ldreq	r4, [r5, #12]
 8008a7e:	e7e6      	b.n	8008a4e <__swsetup_r+0x1e>
 8008a80:	0751      	lsls	r1, r2, #29
 8008a82:	d512      	bpl.n	8008aaa <__swsetup_r+0x7a>
 8008a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a86:	b141      	cbz	r1, 8008a9a <__swsetup_r+0x6a>
 8008a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a8c:	4299      	cmp	r1, r3
 8008a8e:	d002      	beq.n	8008a96 <__swsetup_r+0x66>
 8008a90:	4630      	mov	r0, r6
 8008a92:	f001 fb69 	bl	800a168 <_free_r>
 8008a96:	2300      	movs	r3, #0
 8008a98:	6363      	str	r3, [r4, #52]	; 0x34
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f043 0308 	orr.w	r3, r3, #8
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	6923      	ldr	r3, [r4, #16]
 8008ab4:	b94b      	cbnz	r3, 8008aca <__swsetup_r+0x9a>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac0:	d003      	beq.n	8008aca <__swsetup_r+0x9a>
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f001 f813 	bl	8009af0 <__smakebuf_r>
 8008aca:	89a2      	ldrh	r2, [r4, #12]
 8008acc:	f012 0301 	ands.w	r3, r2, #1
 8008ad0:	d00c      	beq.n	8008aec <__swsetup_r+0xbc>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	6963      	ldr	r3, [r4, #20]
 8008ad8:	425b      	negs	r3, r3
 8008ada:	61a3      	str	r3, [r4, #24]
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	b953      	cbnz	r3, 8008af6 <__swsetup_r+0xc6>
 8008ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008ae8:	d1ba      	bne.n	8008a60 <__swsetup_r+0x30>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	0792      	lsls	r2, r2, #30
 8008aee:	bf58      	it	pl
 8008af0:	6963      	ldrpl	r3, [r4, #20]
 8008af2:	60a3      	str	r3, [r4, #8]
 8008af4:	e7f2      	b.n	8008adc <__swsetup_r+0xac>
 8008af6:	2000      	movs	r0, #0
 8008af8:	e7f7      	b.n	8008aea <__swsetup_r+0xba>
 8008afa:	bf00      	nop
 8008afc:	20000030 	.word	0x20000030
 8008b00:	0801f6a4 	.word	0x0801f6a4
 8008b04:	0801f6c4 	.word	0x0801f6c4
 8008b08:	0801f684 	.word	0x0801f684

08008b0c <quorem>:
 8008b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	6903      	ldr	r3, [r0, #16]
 8008b12:	690c      	ldr	r4, [r1, #16]
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	4680      	mov	r8, r0
 8008b18:	f2c0 8082 	blt.w	8008c20 <quorem+0x114>
 8008b1c:	3c01      	subs	r4, #1
 8008b1e:	f101 0714 	add.w	r7, r1, #20
 8008b22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008b26:	f100 0614 	add.w	r6, r0, #20
 8008b2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008b2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008b32:	eb06 030c 	add.w	r3, r6, ip
 8008b36:	3501      	adds	r5, #1
 8008b38:	eb07 090c 	add.w	r9, r7, ip
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008b42:	b395      	cbz	r5, 8008baa <quorem+0x9e>
 8008b44:	f04f 0a00 	mov.w	sl, #0
 8008b48:	4638      	mov	r0, r7
 8008b4a:	46b6      	mov	lr, r6
 8008b4c:	46d3      	mov	fp, sl
 8008b4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b52:	b293      	uxth	r3, r2
 8008b54:	fb05 a303 	mla	r3, r5, r3, sl
 8008b58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	ebab 0303 	sub.w	r3, fp, r3
 8008b62:	0c12      	lsrs	r2, r2, #16
 8008b64:	f8de b000 	ldr.w	fp, [lr]
 8008b68:	fb05 a202 	mla	r2, r5, r2, sl
 8008b6c:	fa13 f38b 	uxtah	r3, r3, fp
 8008b70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008b74:	fa1f fb82 	uxth.w	fp, r2
 8008b78:	f8de 2000 	ldr.w	r2, [lr]
 8008b7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008b80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b8a:	4581      	cmp	r9, r0
 8008b8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008b90:	f84e 3b04 	str.w	r3, [lr], #4
 8008b94:	d2db      	bcs.n	8008b4e <quorem+0x42>
 8008b96:	f856 300c 	ldr.w	r3, [r6, ip]
 8008b9a:	b933      	cbnz	r3, 8008baa <quorem+0x9e>
 8008b9c:	9b01      	ldr	r3, [sp, #4]
 8008b9e:	3b04      	subs	r3, #4
 8008ba0:	429e      	cmp	r6, r3
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	d330      	bcc.n	8008c08 <quorem+0xfc>
 8008ba6:	f8c8 4010 	str.w	r4, [r8, #16]
 8008baa:	4640      	mov	r0, r8
 8008bac:	f001 fa08 	bl	8009fc0 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	db25      	blt.n	8008c00 <quorem+0xf4>
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f04f 0c00 	mov.w	ip, #0
 8008bbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8008bc0:	f8d0 e000 	ldr.w	lr, [r0]
 8008bc4:	b293      	uxth	r3, r2
 8008bc6:	ebac 0303 	sub.w	r3, ip, r3
 8008bca:	0c12      	lsrs	r2, r2, #16
 8008bcc:	fa13 f38e 	uxtah	r3, r3, lr
 8008bd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bde:	45b9      	cmp	r9, r7
 8008be0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008be4:	f840 3b04 	str.w	r3, [r0], #4
 8008be8:	d2e8      	bcs.n	8008bbc <quorem+0xb0>
 8008bea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008bee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008bf2:	b92a      	cbnz	r2, 8008c00 <quorem+0xf4>
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	d30b      	bcc.n	8008c14 <quorem+0x108>
 8008bfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c00:	4628      	mov	r0, r5
 8008c02:	b003      	add	sp, #12
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	3b04      	subs	r3, #4
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d1ca      	bne.n	8008ba6 <quorem+0x9a>
 8008c10:	3c01      	subs	r4, #1
 8008c12:	e7c5      	b.n	8008ba0 <quorem+0x94>
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	3b04      	subs	r3, #4
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	d1ef      	bne.n	8008bfc <quorem+0xf0>
 8008c1c:	3c01      	subs	r4, #1
 8008c1e:	e7ea      	b.n	8008bf6 <quorem+0xea>
 8008c20:	2000      	movs	r0, #0
 8008c22:	e7ee      	b.n	8008c02 <quorem+0xf6>
 8008c24:	0000      	movs	r0, r0
	...

08008c28 <_dtoa_r>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	ec57 6b10 	vmov	r6, r7, d0
 8008c30:	b097      	sub	sp, #92	; 0x5c
 8008c32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c34:	9106      	str	r1, [sp, #24]
 8008c36:	4604      	mov	r4, r0
 8008c38:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8008c3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c40:	e9cd 6700 	strd	r6, r7, [sp]
 8008c44:	b93d      	cbnz	r5, 8008c56 <_dtoa_r+0x2e>
 8008c46:	2010      	movs	r0, #16
 8008c48:	f000 ff92 	bl	8009b70 <malloc>
 8008c4c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c52:	6005      	str	r5, [r0, #0]
 8008c54:	60c5      	str	r5, [r0, #12]
 8008c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	b151      	cbz	r1, 8008c72 <_dtoa_r+0x4a>
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	604a      	str	r2, [r1, #4]
 8008c60:	2301      	movs	r3, #1
 8008c62:	4093      	lsls	r3, r2
 8008c64:	608b      	str	r3, [r1, #8]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 ffc9 	bl	8009bfe <_Bfree>
 8008c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	1e3b      	subs	r3, r7, #0
 8008c74:	bfbb      	ittet	lt
 8008c76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c7a:	9301      	strlt	r3, [sp, #4]
 8008c7c:	2300      	movge	r3, #0
 8008c7e:	2201      	movlt	r2, #1
 8008c80:	bfac      	ite	ge
 8008c82:	f8c8 3000 	strge.w	r3, [r8]
 8008c86:	f8c8 2000 	strlt.w	r2, [r8]
 8008c8a:	4baf      	ldr	r3, [pc, #700]	; (8008f48 <_dtoa_r+0x320>)
 8008c8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c90:	ea33 0308 	bics.w	r3, r3, r8
 8008c94:	d114      	bne.n	8008cc0 <_dtoa_r+0x98>
 8008c96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c98:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	b923      	cbnz	r3, 8008cac <_dtoa_r+0x84>
 8008ca2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	f000 8542 	beq.w	8009730 <_dtoa_r+0xb08>
 8008cac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008f5c <_dtoa_r+0x334>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 8544 	beq.w	8009740 <_dtoa_r+0xb18>
 8008cb8:	f10b 0303 	add.w	r3, fp, #3
 8008cbc:	f000 bd3e 	b.w	800973c <_dtoa_r+0xb14>
 8008cc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	f7f7 ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8008cd0:	4681      	mov	r9, r0
 8008cd2:	b168      	cbz	r0, 8008cf0 <_dtoa_r+0xc8>
 8008cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8524 	beq.w	800972a <_dtoa_r+0xb02>
 8008ce2:	4b9a      	ldr	r3, [pc, #616]	; (8008f4c <_dtoa_r+0x324>)
 8008ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ce6:	f103 3bff 	add.w	fp, r3, #4294967295
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	f000 bd28 	b.w	8009740 <_dtoa_r+0xb18>
 8008cf0:	aa14      	add	r2, sp, #80	; 0x50
 8008cf2:	a915      	add	r1, sp, #84	; 0x54
 8008cf4:	ec47 6b10 	vmov	d0, r6, r7
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f001 f9d8 	bl	800a0ae <__d2b>
 8008cfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d02:	9004      	str	r0, [sp, #16]
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d07c      	beq.n	8008e02 <_dtoa_r+0x1da>
 8008d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008d10:	46b2      	mov	sl, r6
 8008d12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008d1e:	2200      	movs	r2, #0
 8008d20:	4b8b      	ldr	r3, [pc, #556]	; (8008f50 <_dtoa_r+0x328>)
 8008d22:	4650      	mov	r0, sl
 8008d24:	4659      	mov	r1, fp
 8008d26:	f7f7 facf 	bl	80002c8 <__aeabi_dsub>
 8008d2a:	a381      	add	r3, pc, #516	; (adr r3, 8008f30 <_dtoa_r+0x308>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fc82 	bl	8000638 <__aeabi_dmul>
 8008d34:	a380      	add	r3, pc, #512	; (adr r3, 8008f38 <_dtoa_r+0x310>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fac7 	bl	80002cc <__adddf3>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	4628      	mov	r0, r5
 8008d42:	460f      	mov	r7, r1
 8008d44:	f7f7 fc0e 	bl	8000564 <__aeabi_i2d>
 8008d48:	a37d      	add	r3, pc, #500	; (adr r3, 8008f40 <_dtoa_r+0x318>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fc73 	bl	8000638 <__aeabi_dmul>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	f7f7 fab7 	bl	80002cc <__adddf3>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460f      	mov	r7, r1
 8008d62:	f7f7 ff19 	bl	8000b98 <__aeabi_d2iz>
 8008d66:	2200      	movs	r2, #0
 8008d68:	4682      	mov	sl, r0
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fed4 	bl	8000b1c <__aeabi_dcmplt>
 8008d74:	b148      	cbz	r0, 8008d8a <_dtoa_r+0x162>
 8008d76:	4650      	mov	r0, sl
 8008d78:	f7f7 fbf4 	bl	8000564 <__aeabi_i2d>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fec2 	bl	8000b08 <__aeabi_dcmpeq>
 8008d84:	b908      	cbnz	r0, 8008d8a <_dtoa_r+0x162>
 8008d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d8a:	f1ba 0f16 	cmp.w	sl, #22
 8008d8e:	d859      	bhi.n	8008e44 <_dtoa_r+0x21c>
 8008d90:	4970      	ldr	r1, [pc, #448]	; (8008f54 <_dtoa_r+0x32c>)
 8008d92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9e:	f7f7 fedb 	bl	8000b58 <__aeabi_dcmpgt>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d050      	beq.n	8008e48 <_dtoa_r+0x220>
 8008da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008daa:	2300      	movs	r3, #0
 8008dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008db0:	1b5d      	subs	r5, r3, r5
 8008db2:	f1b5 0801 	subs.w	r8, r5, #1
 8008db6:	bf49      	itett	mi
 8008db8:	f1c5 0301 	rsbmi	r3, r5, #1
 8008dbc:	2300      	movpl	r3, #0
 8008dbe:	9305      	strmi	r3, [sp, #20]
 8008dc0:	f04f 0800 	movmi.w	r8, #0
 8008dc4:	bf58      	it	pl
 8008dc6:	9305      	strpl	r3, [sp, #20]
 8008dc8:	f1ba 0f00 	cmp.w	sl, #0
 8008dcc:	db3e      	blt.n	8008e4c <_dtoa_r+0x224>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	44d0      	add	r8, sl
 8008dd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008dd6:	9307      	str	r3, [sp, #28]
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	f200 8090 	bhi.w	8008f00 <_dtoa_r+0x2d8>
 8008de0:	2b05      	cmp	r3, #5
 8008de2:	bfc4      	itt	gt
 8008de4:	3b04      	subgt	r3, #4
 8008de6:	9306      	strgt	r3, [sp, #24]
 8008de8:	9b06      	ldr	r3, [sp, #24]
 8008dea:	f1a3 0302 	sub.w	r3, r3, #2
 8008dee:	bfcc      	ite	gt
 8008df0:	2500      	movgt	r5, #0
 8008df2:	2501      	movle	r5, #1
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	f200 808f 	bhi.w	8008f18 <_dtoa_r+0x2f0>
 8008dfa:	e8df f003 	tbb	[pc, r3]
 8008dfe:	7f7d      	.short	0x7f7d
 8008e00:	7131      	.short	0x7131
 8008e02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008e06:	441d      	add	r5, r3
 8008e08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008e0c:	2820      	cmp	r0, #32
 8008e0e:	dd13      	ble.n	8008e38 <_dtoa_r+0x210>
 8008e10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008e14:	9b00      	ldr	r3, [sp, #0]
 8008e16:	fa08 f800 	lsl.w	r8, r8, r0
 8008e1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008e1e:	fa23 f000 	lsr.w	r0, r3, r0
 8008e22:	ea48 0000 	orr.w	r0, r8, r0
 8008e26:	f7f7 fb8d 	bl	8000544 <__aeabi_ui2d>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008e32:	3d01      	subs	r5, #1
 8008e34:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e36:	e772      	b.n	8008d1e <_dtoa_r+0xf6>
 8008e38:	9b00      	ldr	r3, [sp, #0]
 8008e3a:	f1c0 0020 	rsb	r0, r0, #32
 8008e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e42:	e7f0      	b.n	8008e26 <_dtoa_r+0x1fe>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e7b1      	b.n	8008dac <_dtoa_r+0x184>
 8008e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e4a:	e7b0      	b.n	8008dae <_dtoa_r+0x186>
 8008e4c:	9b05      	ldr	r3, [sp, #20]
 8008e4e:	eba3 030a 	sub.w	r3, r3, sl
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	f1ca 0300 	rsb	r3, sl, #0
 8008e58:	9307      	str	r3, [sp, #28]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e5e:	e7bb      	b.n	8008dd8 <_dtoa_r+0x1b0>
 8008e60:	2301      	movs	r3, #1
 8008e62:	930a      	str	r3, [sp, #40]	; 0x28
 8008e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dd59      	ble.n	8008f1e <_dtoa_r+0x2f6>
 8008e6a:	9302      	str	r3, [sp, #8]
 8008e6c:	4699      	mov	r9, r3
 8008e6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e70:	2200      	movs	r2, #0
 8008e72:	6072      	str	r2, [r6, #4]
 8008e74:	2204      	movs	r2, #4
 8008e76:	f102 0014 	add.w	r0, r2, #20
 8008e7a:	4298      	cmp	r0, r3
 8008e7c:	6871      	ldr	r1, [r6, #4]
 8008e7e:	d953      	bls.n	8008f28 <_dtoa_r+0x300>
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 fe88 	bl	8009b96 <_Balloc>
 8008e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	f1b9 0f0e 	cmp.w	r9, #14
 8008e8e:	f8d3 b000 	ldr.w	fp, [r3]
 8008e92:	f200 80e6 	bhi.w	8009062 <_dtoa_r+0x43a>
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	f000 80e3 	beq.w	8009062 <_dtoa_r+0x43a>
 8008e9c:	ed9d 7b00 	vldr	d7, [sp]
 8008ea0:	f1ba 0f00 	cmp.w	sl, #0
 8008ea4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008ea8:	dd74      	ble.n	8008f94 <_dtoa_r+0x36c>
 8008eaa:	4a2a      	ldr	r2, [pc, #168]	; (8008f54 <_dtoa_r+0x32c>)
 8008eac:	f00a 030f 	and.w	r3, sl, #15
 8008eb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008eb4:	ed93 7b00 	vldr	d7, [r3]
 8008eb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008ebc:	06f0      	lsls	r0, r6, #27
 8008ebe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008ec2:	d565      	bpl.n	8008f90 <_dtoa_r+0x368>
 8008ec4:	4b24      	ldr	r3, [pc, #144]	; (8008f58 <_dtoa_r+0x330>)
 8008ec6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008eca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ece:	f7f7 fcdd 	bl	800088c <__aeabi_ddiv>
 8008ed2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ed6:	f006 060f 	and.w	r6, r6, #15
 8008eda:	2503      	movs	r5, #3
 8008edc:	4f1e      	ldr	r7, [pc, #120]	; (8008f58 <_dtoa_r+0x330>)
 8008ede:	e04c      	b.n	8008f7a <_dtoa_r+0x352>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee6:	4453      	add	r3, sl
 8008ee8:	f103 0901 	add.w	r9, r3, #1
 8008eec:	9302      	str	r3, [sp, #8]
 8008eee:	464b      	mov	r3, r9
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	bfb8      	it	lt
 8008ef4:	2301      	movlt	r3, #1
 8008ef6:	e7ba      	b.n	8008e6e <_dtoa_r+0x246>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e7b2      	b.n	8008e62 <_dtoa_r+0x23a>
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7f0      	b.n	8008ee2 <_dtoa_r+0x2ba>
 8008f00:	2501      	movs	r5, #1
 8008f02:	2300      	movs	r3, #0
 8008f04:	9306      	str	r3, [sp, #24]
 8008f06:	950a      	str	r5, [sp, #40]	; 0x28
 8008f08:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0c:	9302      	str	r3, [sp, #8]
 8008f0e:	4699      	mov	r9, r3
 8008f10:	2200      	movs	r2, #0
 8008f12:	2312      	movs	r3, #18
 8008f14:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f16:	e7aa      	b.n	8008e6e <_dtoa_r+0x246>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f1c:	e7f4      	b.n	8008f08 <_dtoa_r+0x2e0>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	9302      	str	r3, [sp, #8]
 8008f22:	4699      	mov	r9, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	e7f5      	b.n	8008f14 <_dtoa_r+0x2ec>
 8008f28:	3101      	adds	r1, #1
 8008f2a:	6071      	str	r1, [r6, #4]
 8008f2c:	0052      	lsls	r2, r2, #1
 8008f2e:	e7a2      	b.n	8008e76 <_dtoa_r+0x24e>
 8008f30:	636f4361 	.word	0x636f4361
 8008f34:	3fd287a7 	.word	0x3fd287a7
 8008f38:	8b60c8b3 	.word	0x8b60c8b3
 8008f3c:	3fc68a28 	.word	0x3fc68a28
 8008f40:	509f79fb 	.word	0x509f79fb
 8008f44:	3fd34413 	.word	0x3fd34413
 8008f48:	7ff00000 	.word	0x7ff00000
 8008f4c:	0801f651 	.word	0x0801f651
 8008f50:	3ff80000 	.word	0x3ff80000
 8008f54:	0801f710 	.word	0x0801f710
 8008f58:	0801f6e8 	.word	0x0801f6e8
 8008f5c:	0801f67d 	.word	0x0801f67d
 8008f60:	07f1      	lsls	r1, r6, #31
 8008f62:	d508      	bpl.n	8008f76 <_dtoa_r+0x34e>
 8008f64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6c:	f7f7 fb64 	bl	8000638 <__aeabi_dmul>
 8008f70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f74:	3501      	adds	r5, #1
 8008f76:	1076      	asrs	r6, r6, #1
 8008f78:	3708      	adds	r7, #8
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	d1f0      	bne.n	8008f60 <_dtoa_r+0x338>
 8008f7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f86:	f7f7 fc81 	bl	800088c <__aeabi_ddiv>
 8008f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f8e:	e01a      	b.n	8008fc6 <_dtoa_r+0x39e>
 8008f90:	2502      	movs	r5, #2
 8008f92:	e7a3      	b.n	8008edc <_dtoa_r+0x2b4>
 8008f94:	f000 80a0 	beq.w	80090d8 <_dtoa_r+0x4b0>
 8008f98:	f1ca 0600 	rsb	r6, sl, #0
 8008f9c:	4b9f      	ldr	r3, [pc, #636]	; (800921c <_dtoa_r+0x5f4>)
 8008f9e:	4fa0      	ldr	r7, [pc, #640]	; (8009220 <_dtoa_r+0x5f8>)
 8008fa0:	f006 020f 	and.w	r2, r6, #15
 8008fa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fb0:	f7f7 fb42 	bl	8000638 <__aeabi_dmul>
 8008fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8008fb8:	1136      	asrs	r6, r6, #4
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2502      	movs	r5, #2
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	d17f      	bne.n	80090c2 <_dtoa_r+0x49a>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e1      	bne.n	8008f8a <_dtoa_r+0x362>
 8008fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8087 	beq.w	80090dc <_dtoa_r+0x4b4>
 8008fce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	4b93      	ldr	r3, [pc, #588]	; (8009224 <_dtoa_r+0x5fc>)
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	f7f7 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d07c      	beq.n	80090dc <_dtoa_r+0x4b4>
 8008fe2:	f1b9 0f00 	cmp.w	r9, #0
 8008fe6:	d079      	beq.n	80090dc <_dtoa_r+0x4b4>
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	dd35      	ble.n	800905a <_dtoa_r+0x432>
 8008fee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ff2:	9308      	str	r3, [sp, #32]
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	4b8b      	ldr	r3, [pc, #556]	; (8009228 <_dtoa_r+0x600>)
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7f7 fb1c 	bl	8000638 <__aeabi_dmul>
 8009000:	e9cd 0100 	strd	r0, r1, [sp]
 8009004:	9f02      	ldr	r7, [sp, #8]
 8009006:	3501      	adds	r5, #1
 8009008:	4628      	mov	r0, r5
 800900a:	f7f7 faab 	bl	8000564 <__aeabi_i2d>
 800900e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009012:	f7f7 fb11 	bl	8000638 <__aeabi_dmul>
 8009016:	2200      	movs	r2, #0
 8009018:	4b84      	ldr	r3, [pc, #528]	; (800922c <_dtoa_r+0x604>)
 800901a:	f7f7 f957 	bl	80002cc <__adddf3>
 800901e:	4605      	mov	r5, r0
 8009020:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009024:	2f00      	cmp	r7, #0
 8009026:	d15d      	bne.n	80090e4 <_dtoa_r+0x4bc>
 8009028:	2200      	movs	r2, #0
 800902a:	4b81      	ldr	r3, [pc, #516]	; (8009230 <_dtoa_r+0x608>)
 800902c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009030:	f7f7 f94a 	bl	80002c8 <__aeabi_dsub>
 8009034:	462a      	mov	r2, r5
 8009036:	4633      	mov	r3, r6
 8009038:	e9cd 0100 	strd	r0, r1, [sp]
 800903c:	f7f7 fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 8009040:	2800      	cmp	r0, #0
 8009042:	f040 8288 	bne.w	8009556 <_dtoa_r+0x92e>
 8009046:	462a      	mov	r2, r5
 8009048:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800904c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009050:	f7f7 fd64 	bl	8000b1c <__aeabi_dcmplt>
 8009054:	2800      	cmp	r0, #0
 8009056:	f040 827c 	bne.w	8009552 <_dtoa_r+0x92a>
 800905a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800905e:	e9cd 2300 	strd	r2, r3, [sp]
 8009062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009064:	2b00      	cmp	r3, #0
 8009066:	f2c0 8150 	blt.w	800930a <_dtoa_r+0x6e2>
 800906a:	f1ba 0f0e 	cmp.w	sl, #14
 800906e:	f300 814c 	bgt.w	800930a <_dtoa_r+0x6e2>
 8009072:	4b6a      	ldr	r3, [pc, #424]	; (800921c <_dtoa_r+0x5f4>)
 8009074:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009078:	ed93 7b00 	vldr	d7, [r3]
 800907c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800907e:	2b00      	cmp	r3, #0
 8009080:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009084:	f280 80d8 	bge.w	8009238 <_dtoa_r+0x610>
 8009088:	f1b9 0f00 	cmp.w	r9, #0
 800908c:	f300 80d4 	bgt.w	8009238 <_dtoa_r+0x610>
 8009090:	f040 825e 	bne.w	8009550 <_dtoa_r+0x928>
 8009094:	2200      	movs	r2, #0
 8009096:	4b66      	ldr	r3, [pc, #408]	; (8009230 <_dtoa_r+0x608>)
 8009098:	ec51 0b17 	vmov	r0, r1, d7
 800909c:	f7f7 facc 	bl	8000638 <__aeabi_dmul>
 80090a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090a4:	f7f7 fd4e 	bl	8000b44 <__aeabi_dcmpge>
 80090a8:	464f      	mov	r7, r9
 80090aa:	464e      	mov	r6, r9
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f040 8234 	bne.w	800951a <_dtoa_r+0x8f2>
 80090b2:	2331      	movs	r3, #49	; 0x31
 80090b4:	f10b 0501 	add.w	r5, fp, #1
 80090b8:	f88b 3000 	strb.w	r3, [fp]
 80090bc:	f10a 0a01 	add.w	sl, sl, #1
 80090c0:	e22f      	b.n	8009522 <_dtoa_r+0x8fa>
 80090c2:	07f2      	lsls	r2, r6, #31
 80090c4:	d505      	bpl.n	80090d2 <_dtoa_r+0x4aa>
 80090c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ca:	f7f7 fab5 	bl	8000638 <__aeabi_dmul>
 80090ce:	3501      	adds	r5, #1
 80090d0:	2301      	movs	r3, #1
 80090d2:	1076      	asrs	r6, r6, #1
 80090d4:	3708      	adds	r7, #8
 80090d6:	e772      	b.n	8008fbe <_dtoa_r+0x396>
 80090d8:	2502      	movs	r5, #2
 80090da:	e774      	b.n	8008fc6 <_dtoa_r+0x39e>
 80090dc:	f8cd a020 	str.w	sl, [sp, #32]
 80090e0:	464f      	mov	r7, r9
 80090e2:	e791      	b.n	8009008 <_dtoa_r+0x3e0>
 80090e4:	4b4d      	ldr	r3, [pc, #308]	; (800921c <_dtoa_r+0x5f4>)
 80090e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80090ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d047      	beq.n	8009184 <_dtoa_r+0x55c>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	2000      	movs	r0, #0
 80090fa:	494e      	ldr	r1, [pc, #312]	; (8009234 <_dtoa_r+0x60c>)
 80090fc:	f7f7 fbc6 	bl	800088c <__aeabi_ddiv>
 8009100:	462a      	mov	r2, r5
 8009102:	4633      	mov	r3, r6
 8009104:	f7f7 f8e0 	bl	80002c8 <__aeabi_dsub>
 8009108:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800910c:	465d      	mov	r5, fp
 800910e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009112:	f7f7 fd41 	bl	8000b98 <__aeabi_d2iz>
 8009116:	4606      	mov	r6, r0
 8009118:	f7f7 fa24 	bl	8000564 <__aeabi_i2d>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009124:	f7f7 f8d0 	bl	80002c8 <__aeabi_dsub>
 8009128:	3630      	adds	r6, #48	; 0x30
 800912a:	f805 6b01 	strb.w	r6, [r5], #1
 800912e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009132:	e9cd 0100 	strd	r0, r1, [sp]
 8009136:	f7f7 fcf1 	bl	8000b1c <__aeabi_dcmplt>
 800913a:	2800      	cmp	r0, #0
 800913c:	d163      	bne.n	8009206 <_dtoa_r+0x5de>
 800913e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009142:	2000      	movs	r0, #0
 8009144:	4937      	ldr	r1, [pc, #220]	; (8009224 <_dtoa_r+0x5fc>)
 8009146:	f7f7 f8bf 	bl	80002c8 <__aeabi_dsub>
 800914a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800914e:	f7f7 fce5 	bl	8000b1c <__aeabi_dcmplt>
 8009152:	2800      	cmp	r0, #0
 8009154:	f040 80b7 	bne.w	80092c6 <_dtoa_r+0x69e>
 8009158:	eba5 030b 	sub.w	r3, r5, fp
 800915c:	429f      	cmp	r7, r3
 800915e:	f77f af7c 	ble.w	800905a <_dtoa_r+0x432>
 8009162:	2200      	movs	r2, #0
 8009164:	4b30      	ldr	r3, [pc, #192]	; (8009228 <_dtoa_r+0x600>)
 8009166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800916a:	f7f7 fa65 	bl	8000638 <__aeabi_dmul>
 800916e:	2200      	movs	r2, #0
 8009170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009174:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <_dtoa_r+0x600>)
 8009176:	e9dd 0100 	ldrd	r0, r1, [sp]
 800917a:	f7f7 fa5d 	bl	8000638 <__aeabi_dmul>
 800917e:	e9cd 0100 	strd	r0, r1, [sp]
 8009182:	e7c4      	b.n	800910e <_dtoa_r+0x4e6>
 8009184:	462a      	mov	r2, r5
 8009186:	4633      	mov	r3, r6
 8009188:	f7f7 fa56 	bl	8000638 <__aeabi_dmul>
 800918c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009190:	eb0b 0507 	add.w	r5, fp, r7
 8009194:	465e      	mov	r6, fp
 8009196:	e9dd 0100 	ldrd	r0, r1, [sp]
 800919a:	f7f7 fcfd 	bl	8000b98 <__aeabi_d2iz>
 800919e:	4607      	mov	r7, r0
 80091a0:	f7f7 f9e0 	bl	8000564 <__aeabi_i2d>
 80091a4:	3730      	adds	r7, #48	; 0x30
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ae:	f7f7 f88b 	bl	80002c8 <__aeabi_dsub>
 80091b2:	f806 7b01 	strb.w	r7, [r6], #1
 80091b6:	42ae      	cmp	r6, r5
 80091b8:	e9cd 0100 	strd	r0, r1, [sp]
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	d126      	bne.n	8009210 <_dtoa_r+0x5e8>
 80091c2:	4b1c      	ldr	r3, [pc, #112]	; (8009234 <_dtoa_r+0x60c>)
 80091c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091c8:	f7f7 f880 	bl	80002cc <__adddf3>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091d4:	f7f7 fcc0 	bl	8000b58 <__aeabi_dcmpgt>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d174      	bne.n	80092c6 <_dtoa_r+0x69e>
 80091dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80091e0:	2000      	movs	r0, #0
 80091e2:	4914      	ldr	r1, [pc, #80]	; (8009234 <_dtoa_r+0x60c>)
 80091e4:	f7f7 f870 	bl	80002c8 <__aeabi_dsub>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091f0:	f7f7 fc94 	bl	8000b1c <__aeabi_dcmplt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	f43f af30 	beq.w	800905a <_dtoa_r+0x432>
 80091fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091fe:	2b30      	cmp	r3, #48	; 0x30
 8009200:	f105 32ff 	add.w	r2, r5, #4294967295
 8009204:	d002      	beq.n	800920c <_dtoa_r+0x5e4>
 8009206:	f8dd a020 	ldr.w	sl, [sp, #32]
 800920a:	e04a      	b.n	80092a2 <_dtoa_r+0x67a>
 800920c:	4615      	mov	r5, r2
 800920e:	e7f4      	b.n	80091fa <_dtoa_r+0x5d2>
 8009210:	4b05      	ldr	r3, [pc, #20]	; (8009228 <_dtoa_r+0x600>)
 8009212:	f7f7 fa11 	bl	8000638 <__aeabi_dmul>
 8009216:	e9cd 0100 	strd	r0, r1, [sp]
 800921a:	e7bc      	b.n	8009196 <_dtoa_r+0x56e>
 800921c:	0801f710 	.word	0x0801f710
 8009220:	0801f6e8 	.word	0x0801f6e8
 8009224:	3ff00000 	.word	0x3ff00000
 8009228:	40240000 	.word	0x40240000
 800922c:	401c0000 	.word	0x401c0000
 8009230:	40140000 	.word	0x40140000
 8009234:	3fe00000 	.word	0x3fe00000
 8009238:	e9dd 6700 	ldrd	r6, r7, [sp]
 800923c:	465d      	mov	r5, fp
 800923e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009242:	4630      	mov	r0, r6
 8009244:	4639      	mov	r1, r7
 8009246:	f7f7 fb21 	bl	800088c <__aeabi_ddiv>
 800924a:	f7f7 fca5 	bl	8000b98 <__aeabi_d2iz>
 800924e:	4680      	mov	r8, r0
 8009250:	f7f7 f988 	bl	8000564 <__aeabi_i2d>
 8009254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009258:	f7f7 f9ee 	bl	8000638 <__aeabi_dmul>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4630      	mov	r0, r6
 8009262:	4639      	mov	r1, r7
 8009264:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009268:	f7f7 f82e 	bl	80002c8 <__aeabi_dsub>
 800926c:	f805 6b01 	strb.w	r6, [r5], #1
 8009270:	eba5 060b 	sub.w	r6, r5, fp
 8009274:	45b1      	cmp	r9, r6
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	d139      	bne.n	80092f0 <_dtoa_r+0x6c8>
 800927c:	f7f7 f826 	bl	80002cc <__adddf3>
 8009280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009284:	4606      	mov	r6, r0
 8009286:	460f      	mov	r7, r1
 8009288:	f7f7 fc66 	bl	8000b58 <__aeabi_dcmpgt>
 800928c:	b9c8      	cbnz	r0, 80092c2 <_dtoa_r+0x69a>
 800928e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009292:	4630      	mov	r0, r6
 8009294:	4639      	mov	r1, r7
 8009296:	f7f7 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800929a:	b110      	cbz	r0, 80092a2 <_dtoa_r+0x67a>
 800929c:	f018 0f01 	tst.w	r8, #1
 80092a0:	d10f      	bne.n	80092c2 <_dtoa_r+0x69a>
 80092a2:	9904      	ldr	r1, [sp, #16]
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fcaa 	bl	8009bfe <_Bfree>
 80092aa:	2300      	movs	r3, #0
 80092ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092ae:	702b      	strb	r3, [r5, #0]
 80092b0:	f10a 0301 	add.w	r3, sl, #1
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 8241 	beq.w	8009740 <_dtoa_r+0xb18>
 80092be:	601d      	str	r5, [r3, #0]
 80092c0:	e23e      	b.n	8009740 <_dtoa_r+0xb18>
 80092c2:	f8cd a020 	str.w	sl, [sp, #32]
 80092c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092ca:	2a39      	cmp	r2, #57	; 0x39
 80092cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80092d0:	d108      	bne.n	80092e4 <_dtoa_r+0x6bc>
 80092d2:	459b      	cmp	fp, r3
 80092d4:	d10a      	bne.n	80092ec <_dtoa_r+0x6c4>
 80092d6:	9b08      	ldr	r3, [sp, #32]
 80092d8:	3301      	adds	r3, #1
 80092da:	9308      	str	r3, [sp, #32]
 80092dc:	2330      	movs	r3, #48	; 0x30
 80092de:	f88b 3000 	strb.w	r3, [fp]
 80092e2:	465b      	mov	r3, fp
 80092e4:	781a      	ldrb	r2, [r3, #0]
 80092e6:	3201      	adds	r2, #1
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	e78c      	b.n	8009206 <_dtoa_r+0x5de>
 80092ec:	461d      	mov	r5, r3
 80092ee:	e7ea      	b.n	80092c6 <_dtoa_r+0x69e>
 80092f0:	2200      	movs	r2, #0
 80092f2:	4b9b      	ldr	r3, [pc, #620]	; (8009560 <_dtoa_r+0x938>)
 80092f4:	f7f7 f9a0 	bl	8000638 <__aeabi_dmul>
 80092f8:	2200      	movs	r2, #0
 80092fa:	2300      	movs	r3, #0
 80092fc:	4606      	mov	r6, r0
 80092fe:	460f      	mov	r7, r1
 8009300:	f7f7 fc02 	bl	8000b08 <__aeabi_dcmpeq>
 8009304:	2800      	cmp	r0, #0
 8009306:	d09a      	beq.n	800923e <_dtoa_r+0x616>
 8009308:	e7cb      	b.n	80092a2 <_dtoa_r+0x67a>
 800930a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800930c:	2a00      	cmp	r2, #0
 800930e:	f000 808b 	beq.w	8009428 <_dtoa_r+0x800>
 8009312:	9a06      	ldr	r2, [sp, #24]
 8009314:	2a01      	cmp	r2, #1
 8009316:	dc6e      	bgt.n	80093f6 <_dtoa_r+0x7ce>
 8009318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800931a:	2a00      	cmp	r2, #0
 800931c:	d067      	beq.n	80093ee <_dtoa_r+0x7c6>
 800931e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009322:	9f07      	ldr	r7, [sp, #28]
 8009324:	9d05      	ldr	r5, [sp, #20]
 8009326:	9a05      	ldr	r2, [sp, #20]
 8009328:	2101      	movs	r1, #1
 800932a:	441a      	add	r2, r3
 800932c:	4620      	mov	r0, r4
 800932e:	9205      	str	r2, [sp, #20]
 8009330:	4498      	add	r8, r3
 8009332:	f000 fd04 	bl	8009d3e <__i2b>
 8009336:	4606      	mov	r6, r0
 8009338:	2d00      	cmp	r5, #0
 800933a:	dd0c      	ble.n	8009356 <_dtoa_r+0x72e>
 800933c:	f1b8 0f00 	cmp.w	r8, #0
 8009340:	dd09      	ble.n	8009356 <_dtoa_r+0x72e>
 8009342:	4545      	cmp	r5, r8
 8009344:	9a05      	ldr	r2, [sp, #20]
 8009346:	462b      	mov	r3, r5
 8009348:	bfa8      	it	ge
 800934a:	4643      	movge	r3, r8
 800934c:	1ad2      	subs	r2, r2, r3
 800934e:	9205      	str	r2, [sp, #20]
 8009350:	1aed      	subs	r5, r5, r3
 8009352:	eba8 0803 	sub.w	r8, r8, r3
 8009356:	9b07      	ldr	r3, [sp, #28]
 8009358:	b1eb      	cbz	r3, 8009396 <_dtoa_r+0x76e>
 800935a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935c:	2b00      	cmp	r3, #0
 800935e:	d067      	beq.n	8009430 <_dtoa_r+0x808>
 8009360:	b18f      	cbz	r7, 8009386 <_dtoa_r+0x75e>
 8009362:	4631      	mov	r1, r6
 8009364:	463a      	mov	r2, r7
 8009366:	4620      	mov	r0, r4
 8009368:	f000 fd88 	bl	8009e7c <__pow5mult>
 800936c:	9a04      	ldr	r2, [sp, #16]
 800936e:	4601      	mov	r1, r0
 8009370:	4606      	mov	r6, r0
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fcec 	bl	8009d50 <__multiply>
 8009378:	9904      	ldr	r1, [sp, #16]
 800937a:	9008      	str	r0, [sp, #32]
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fc3e 	bl	8009bfe <_Bfree>
 8009382:	9b08      	ldr	r3, [sp, #32]
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	9b07      	ldr	r3, [sp, #28]
 8009388:	1bda      	subs	r2, r3, r7
 800938a:	d004      	beq.n	8009396 <_dtoa_r+0x76e>
 800938c:	9904      	ldr	r1, [sp, #16]
 800938e:	4620      	mov	r0, r4
 8009390:	f000 fd74 	bl	8009e7c <__pow5mult>
 8009394:	9004      	str	r0, [sp, #16]
 8009396:	2101      	movs	r1, #1
 8009398:	4620      	mov	r0, r4
 800939a:	f000 fcd0 	bl	8009d3e <__i2b>
 800939e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093a0:	4607      	mov	r7, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 81d0 	beq.w	8009748 <_dtoa_r+0xb20>
 80093a8:	461a      	mov	r2, r3
 80093aa:	4601      	mov	r1, r0
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fd65 	bl	8009e7c <__pow5mult>
 80093b2:	9b06      	ldr	r3, [sp, #24]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	4607      	mov	r7, r0
 80093b8:	dc40      	bgt.n	800943c <_dtoa_r+0x814>
 80093ba:	9b00      	ldr	r3, [sp, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d139      	bne.n	8009434 <_dtoa_r+0x80c>
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d136      	bne.n	8009438 <_dtoa_r+0x810>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093d0:	0d1b      	lsrs	r3, r3, #20
 80093d2:	051b      	lsls	r3, r3, #20
 80093d4:	b12b      	cbz	r3, 80093e2 <_dtoa_r+0x7ba>
 80093d6:	9b05      	ldr	r3, [sp, #20]
 80093d8:	3301      	adds	r3, #1
 80093da:	9305      	str	r3, [sp, #20]
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	2301      	movs	r3, #1
 80093e2:	9307      	str	r3, [sp, #28]
 80093e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d12a      	bne.n	8009440 <_dtoa_r+0x818>
 80093ea:	2001      	movs	r0, #1
 80093ec:	e030      	b.n	8009450 <_dtoa_r+0x828>
 80093ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093f4:	e795      	b.n	8009322 <_dtoa_r+0x6fa>
 80093f6:	9b07      	ldr	r3, [sp, #28]
 80093f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80093fc:	42bb      	cmp	r3, r7
 80093fe:	bfbf      	itttt	lt
 8009400:	9b07      	ldrlt	r3, [sp, #28]
 8009402:	9707      	strlt	r7, [sp, #28]
 8009404:	1afa      	sublt	r2, r7, r3
 8009406:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009408:	bfbb      	ittet	lt
 800940a:	189b      	addlt	r3, r3, r2
 800940c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800940e:	1bdf      	subge	r7, r3, r7
 8009410:	2700      	movlt	r7, #0
 8009412:	f1b9 0f00 	cmp.w	r9, #0
 8009416:	bfb5      	itete	lt
 8009418:	9b05      	ldrlt	r3, [sp, #20]
 800941a:	9d05      	ldrge	r5, [sp, #20]
 800941c:	eba3 0509 	sublt.w	r5, r3, r9
 8009420:	464b      	movge	r3, r9
 8009422:	bfb8      	it	lt
 8009424:	2300      	movlt	r3, #0
 8009426:	e77e      	b.n	8009326 <_dtoa_r+0x6fe>
 8009428:	9f07      	ldr	r7, [sp, #28]
 800942a:	9d05      	ldr	r5, [sp, #20]
 800942c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800942e:	e783      	b.n	8009338 <_dtoa_r+0x710>
 8009430:	9a07      	ldr	r2, [sp, #28]
 8009432:	e7ab      	b.n	800938c <_dtoa_r+0x764>
 8009434:	2300      	movs	r3, #0
 8009436:	e7d4      	b.n	80093e2 <_dtoa_r+0x7ba>
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	e7d2      	b.n	80093e2 <_dtoa_r+0x7ba>
 800943c:	2300      	movs	r3, #0
 800943e:	9307      	str	r3, [sp, #28]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009446:	6918      	ldr	r0, [r3, #16]
 8009448:	f000 fc2b 	bl	8009ca2 <__hi0bits>
 800944c:	f1c0 0020 	rsb	r0, r0, #32
 8009450:	4440      	add	r0, r8
 8009452:	f010 001f 	ands.w	r0, r0, #31
 8009456:	d047      	beq.n	80094e8 <_dtoa_r+0x8c0>
 8009458:	f1c0 0320 	rsb	r3, r0, #32
 800945c:	2b04      	cmp	r3, #4
 800945e:	dd3b      	ble.n	80094d8 <_dtoa_r+0x8b0>
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	f1c0 001c 	rsb	r0, r0, #28
 8009466:	4403      	add	r3, r0
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	4405      	add	r5, r0
 800946c:	4480      	add	r8, r0
 800946e:	9b05      	ldr	r3, [sp, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dd05      	ble.n	8009480 <_dtoa_r+0x858>
 8009474:	461a      	mov	r2, r3
 8009476:	9904      	ldr	r1, [sp, #16]
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fd4d 	bl	8009f18 <__lshift>
 800947e:	9004      	str	r0, [sp, #16]
 8009480:	f1b8 0f00 	cmp.w	r8, #0
 8009484:	dd05      	ble.n	8009492 <_dtoa_r+0x86a>
 8009486:	4639      	mov	r1, r7
 8009488:	4642      	mov	r2, r8
 800948a:	4620      	mov	r0, r4
 800948c:	f000 fd44 	bl	8009f18 <__lshift>
 8009490:	4607      	mov	r7, r0
 8009492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009494:	b353      	cbz	r3, 80094ec <_dtoa_r+0x8c4>
 8009496:	4639      	mov	r1, r7
 8009498:	9804      	ldr	r0, [sp, #16]
 800949a:	f000 fd91 	bl	8009fc0 <__mcmp>
 800949e:	2800      	cmp	r0, #0
 80094a0:	da24      	bge.n	80094ec <_dtoa_r+0x8c4>
 80094a2:	2300      	movs	r3, #0
 80094a4:	220a      	movs	r2, #10
 80094a6:	9904      	ldr	r1, [sp, #16]
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fbbf 	bl	8009c2c <__multadd>
 80094ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b0:	9004      	str	r0, [sp, #16]
 80094b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 814d 	beq.w	8009756 <_dtoa_r+0xb2e>
 80094bc:	2300      	movs	r3, #0
 80094be:	4631      	mov	r1, r6
 80094c0:	220a      	movs	r2, #10
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fbb2 	bl	8009c2c <__multadd>
 80094c8:	9b02      	ldr	r3, [sp, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	4606      	mov	r6, r0
 80094ce:	dc4f      	bgt.n	8009570 <_dtoa_r+0x948>
 80094d0:	9b06      	ldr	r3, [sp, #24]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	dd4c      	ble.n	8009570 <_dtoa_r+0x948>
 80094d6:	e011      	b.n	80094fc <_dtoa_r+0x8d4>
 80094d8:	d0c9      	beq.n	800946e <_dtoa_r+0x846>
 80094da:	9a05      	ldr	r2, [sp, #20]
 80094dc:	331c      	adds	r3, #28
 80094de:	441a      	add	r2, r3
 80094e0:	9205      	str	r2, [sp, #20]
 80094e2:	441d      	add	r5, r3
 80094e4:	4498      	add	r8, r3
 80094e6:	e7c2      	b.n	800946e <_dtoa_r+0x846>
 80094e8:	4603      	mov	r3, r0
 80094ea:	e7f6      	b.n	80094da <_dtoa_r+0x8b2>
 80094ec:	f1b9 0f00 	cmp.w	r9, #0
 80094f0:	dc38      	bgt.n	8009564 <_dtoa_r+0x93c>
 80094f2:	9b06      	ldr	r3, [sp, #24]
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	dd35      	ble.n	8009564 <_dtoa_r+0x93c>
 80094f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80094fc:	9b02      	ldr	r3, [sp, #8]
 80094fe:	b963      	cbnz	r3, 800951a <_dtoa_r+0x8f2>
 8009500:	4639      	mov	r1, r7
 8009502:	2205      	movs	r2, #5
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fb91 	bl	8009c2c <__multadd>
 800950a:	4601      	mov	r1, r0
 800950c:	4607      	mov	r7, r0
 800950e:	9804      	ldr	r0, [sp, #16]
 8009510:	f000 fd56 	bl	8009fc0 <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	f73f adcc 	bgt.w	80090b2 <_dtoa_r+0x48a>
 800951a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800951c:	465d      	mov	r5, fp
 800951e:	ea6f 0a03 	mvn.w	sl, r3
 8009522:	f04f 0900 	mov.w	r9, #0
 8009526:	4639      	mov	r1, r7
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fb68 	bl	8009bfe <_Bfree>
 800952e:	2e00      	cmp	r6, #0
 8009530:	f43f aeb7 	beq.w	80092a2 <_dtoa_r+0x67a>
 8009534:	f1b9 0f00 	cmp.w	r9, #0
 8009538:	d005      	beq.n	8009546 <_dtoa_r+0x91e>
 800953a:	45b1      	cmp	r9, r6
 800953c:	d003      	beq.n	8009546 <_dtoa_r+0x91e>
 800953e:	4649      	mov	r1, r9
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fb5c 	bl	8009bfe <_Bfree>
 8009546:	4631      	mov	r1, r6
 8009548:	4620      	mov	r0, r4
 800954a:	f000 fb58 	bl	8009bfe <_Bfree>
 800954e:	e6a8      	b.n	80092a2 <_dtoa_r+0x67a>
 8009550:	2700      	movs	r7, #0
 8009552:	463e      	mov	r6, r7
 8009554:	e7e1      	b.n	800951a <_dtoa_r+0x8f2>
 8009556:	f8dd a020 	ldr.w	sl, [sp, #32]
 800955a:	463e      	mov	r6, r7
 800955c:	e5a9      	b.n	80090b2 <_dtoa_r+0x48a>
 800955e:	bf00      	nop
 8009560:	40240000 	.word	0x40240000
 8009564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009566:	f8cd 9008 	str.w	r9, [sp, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 80fa 	beq.w	8009764 <_dtoa_r+0xb3c>
 8009570:	2d00      	cmp	r5, #0
 8009572:	dd05      	ble.n	8009580 <_dtoa_r+0x958>
 8009574:	4631      	mov	r1, r6
 8009576:	462a      	mov	r2, r5
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fccd 	bl	8009f18 <__lshift>
 800957e:	4606      	mov	r6, r0
 8009580:	9b07      	ldr	r3, [sp, #28]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d04c      	beq.n	8009620 <_dtoa_r+0x9f8>
 8009586:	6871      	ldr	r1, [r6, #4]
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fb04 	bl	8009b96 <_Balloc>
 800958e:	6932      	ldr	r2, [r6, #16]
 8009590:	3202      	adds	r2, #2
 8009592:	4605      	mov	r5, r0
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	f106 010c 	add.w	r1, r6, #12
 800959a:	300c      	adds	r0, #12
 800959c:	f000 faf0 	bl	8009b80 <memcpy>
 80095a0:	2201      	movs	r2, #1
 80095a2:	4629      	mov	r1, r5
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 fcb7 	bl	8009f18 <__lshift>
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	f8cd b014 	str.w	fp, [sp, #20]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	46b1      	mov	r9, r6
 80095b6:	9307      	str	r3, [sp, #28]
 80095b8:	4606      	mov	r6, r0
 80095ba:	4639      	mov	r1, r7
 80095bc:	9804      	ldr	r0, [sp, #16]
 80095be:	f7ff faa5 	bl	8008b0c <quorem>
 80095c2:	4649      	mov	r1, r9
 80095c4:	4605      	mov	r5, r0
 80095c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80095ca:	9804      	ldr	r0, [sp, #16]
 80095cc:	f000 fcf8 	bl	8009fc0 <__mcmp>
 80095d0:	4632      	mov	r2, r6
 80095d2:	9000      	str	r0, [sp, #0]
 80095d4:	4639      	mov	r1, r7
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fd0c 	bl	8009ff4 <__mdiff>
 80095dc:	68c3      	ldr	r3, [r0, #12]
 80095de:	4602      	mov	r2, r0
 80095e0:	bb03      	cbnz	r3, 8009624 <_dtoa_r+0x9fc>
 80095e2:	4601      	mov	r1, r0
 80095e4:	9008      	str	r0, [sp, #32]
 80095e6:	9804      	ldr	r0, [sp, #16]
 80095e8:	f000 fcea 	bl	8009fc0 <__mcmp>
 80095ec:	9a08      	ldr	r2, [sp, #32]
 80095ee:	4603      	mov	r3, r0
 80095f0:	4611      	mov	r1, r2
 80095f2:	4620      	mov	r0, r4
 80095f4:	9308      	str	r3, [sp, #32]
 80095f6:	f000 fb02 	bl	8009bfe <_Bfree>
 80095fa:	9b08      	ldr	r3, [sp, #32]
 80095fc:	b9a3      	cbnz	r3, 8009628 <_dtoa_r+0xa00>
 80095fe:	9a06      	ldr	r2, [sp, #24]
 8009600:	b992      	cbnz	r2, 8009628 <_dtoa_r+0xa00>
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	b982      	cbnz	r2, 8009628 <_dtoa_r+0xa00>
 8009606:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800960a:	d029      	beq.n	8009660 <_dtoa_r+0xa38>
 800960c:	9b00      	ldr	r3, [sp, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	dd01      	ble.n	8009616 <_dtoa_r+0x9ee>
 8009612:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009616:	9b05      	ldr	r3, [sp, #20]
 8009618:	1c5d      	adds	r5, r3, #1
 800961a:	f883 8000 	strb.w	r8, [r3]
 800961e:	e782      	b.n	8009526 <_dtoa_r+0x8fe>
 8009620:	4630      	mov	r0, r6
 8009622:	e7c2      	b.n	80095aa <_dtoa_r+0x982>
 8009624:	2301      	movs	r3, #1
 8009626:	e7e3      	b.n	80095f0 <_dtoa_r+0x9c8>
 8009628:	9a00      	ldr	r2, [sp, #0]
 800962a:	2a00      	cmp	r2, #0
 800962c:	db04      	blt.n	8009638 <_dtoa_r+0xa10>
 800962e:	d125      	bne.n	800967c <_dtoa_r+0xa54>
 8009630:	9a06      	ldr	r2, [sp, #24]
 8009632:	bb1a      	cbnz	r2, 800967c <_dtoa_r+0xa54>
 8009634:	9a07      	ldr	r2, [sp, #28]
 8009636:	bb0a      	cbnz	r2, 800967c <_dtoa_r+0xa54>
 8009638:	2b00      	cmp	r3, #0
 800963a:	ddec      	ble.n	8009616 <_dtoa_r+0x9ee>
 800963c:	2201      	movs	r2, #1
 800963e:	9904      	ldr	r1, [sp, #16]
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fc69 	bl	8009f18 <__lshift>
 8009646:	4639      	mov	r1, r7
 8009648:	9004      	str	r0, [sp, #16]
 800964a:	f000 fcb9 	bl	8009fc0 <__mcmp>
 800964e:	2800      	cmp	r0, #0
 8009650:	dc03      	bgt.n	800965a <_dtoa_r+0xa32>
 8009652:	d1e0      	bne.n	8009616 <_dtoa_r+0x9ee>
 8009654:	f018 0f01 	tst.w	r8, #1
 8009658:	d0dd      	beq.n	8009616 <_dtoa_r+0x9ee>
 800965a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800965e:	d1d8      	bne.n	8009612 <_dtoa_r+0x9ea>
 8009660:	9b05      	ldr	r3, [sp, #20]
 8009662:	9a05      	ldr	r2, [sp, #20]
 8009664:	1c5d      	adds	r5, r3, #1
 8009666:	2339      	movs	r3, #57	; 0x39
 8009668:	7013      	strb	r3, [r2, #0]
 800966a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800966e:	2b39      	cmp	r3, #57	; 0x39
 8009670:	f105 32ff 	add.w	r2, r5, #4294967295
 8009674:	d04f      	beq.n	8009716 <_dtoa_r+0xaee>
 8009676:	3301      	adds	r3, #1
 8009678:	7013      	strb	r3, [r2, #0]
 800967a:	e754      	b.n	8009526 <_dtoa_r+0x8fe>
 800967c:	9a05      	ldr	r2, [sp, #20]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f102 0501 	add.w	r5, r2, #1
 8009684:	dd06      	ble.n	8009694 <_dtoa_r+0xa6c>
 8009686:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800968a:	d0e9      	beq.n	8009660 <_dtoa_r+0xa38>
 800968c:	f108 0801 	add.w	r8, r8, #1
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	e7c2      	b.n	800961a <_dtoa_r+0x9f2>
 8009694:	9a02      	ldr	r2, [sp, #8]
 8009696:	f805 8c01 	strb.w	r8, [r5, #-1]
 800969a:	eba5 030b 	sub.w	r3, r5, fp
 800969e:	4293      	cmp	r3, r2
 80096a0:	d021      	beq.n	80096e6 <_dtoa_r+0xabe>
 80096a2:	2300      	movs	r3, #0
 80096a4:	220a      	movs	r2, #10
 80096a6:	9904      	ldr	r1, [sp, #16]
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 fabf 	bl	8009c2c <__multadd>
 80096ae:	45b1      	cmp	r9, r6
 80096b0:	9004      	str	r0, [sp, #16]
 80096b2:	f04f 0300 	mov.w	r3, #0
 80096b6:	f04f 020a 	mov.w	r2, #10
 80096ba:	4649      	mov	r1, r9
 80096bc:	4620      	mov	r0, r4
 80096be:	d105      	bne.n	80096cc <_dtoa_r+0xaa4>
 80096c0:	f000 fab4 	bl	8009c2c <__multadd>
 80096c4:	4681      	mov	r9, r0
 80096c6:	4606      	mov	r6, r0
 80096c8:	9505      	str	r5, [sp, #20]
 80096ca:	e776      	b.n	80095ba <_dtoa_r+0x992>
 80096cc:	f000 faae 	bl	8009c2c <__multadd>
 80096d0:	4631      	mov	r1, r6
 80096d2:	4681      	mov	r9, r0
 80096d4:	2300      	movs	r3, #0
 80096d6:	220a      	movs	r2, #10
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 faa7 	bl	8009c2c <__multadd>
 80096de:	4606      	mov	r6, r0
 80096e0:	e7f2      	b.n	80096c8 <_dtoa_r+0xaa0>
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	2201      	movs	r2, #1
 80096e8:	9904      	ldr	r1, [sp, #16]
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 fc14 	bl	8009f18 <__lshift>
 80096f0:	4639      	mov	r1, r7
 80096f2:	9004      	str	r0, [sp, #16]
 80096f4:	f000 fc64 	bl	8009fc0 <__mcmp>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	dcb6      	bgt.n	800966a <_dtoa_r+0xa42>
 80096fc:	d102      	bne.n	8009704 <_dtoa_r+0xadc>
 80096fe:	f018 0f01 	tst.w	r8, #1
 8009702:	d1b2      	bne.n	800966a <_dtoa_r+0xa42>
 8009704:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009708:	2b30      	cmp	r3, #48	; 0x30
 800970a:	f105 32ff 	add.w	r2, r5, #4294967295
 800970e:	f47f af0a 	bne.w	8009526 <_dtoa_r+0x8fe>
 8009712:	4615      	mov	r5, r2
 8009714:	e7f6      	b.n	8009704 <_dtoa_r+0xadc>
 8009716:	4593      	cmp	fp, r2
 8009718:	d105      	bne.n	8009726 <_dtoa_r+0xafe>
 800971a:	2331      	movs	r3, #49	; 0x31
 800971c:	f10a 0a01 	add.w	sl, sl, #1
 8009720:	f88b 3000 	strb.w	r3, [fp]
 8009724:	e6ff      	b.n	8009526 <_dtoa_r+0x8fe>
 8009726:	4615      	mov	r5, r2
 8009728:	e79f      	b.n	800966a <_dtoa_r+0xa42>
 800972a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009790 <_dtoa_r+0xb68>
 800972e:	e007      	b.n	8009740 <_dtoa_r+0xb18>
 8009730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009732:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009794 <_dtoa_r+0xb6c>
 8009736:	b11b      	cbz	r3, 8009740 <_dtoa_r+0xb18>
 8009738:	f10b 0308 	add.w	r3, fp, #8
 800973c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	4658      	mov	r0, fp
 8009742:	b017      	add	sp, #92	; 0x5c
 8009744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	9b06      	ldr	r3, [sp, #24]
 800974a:	2b01      	cmp	r3, #1
 800974c:	f77f ae35 	ble.w	80093ba <_dtoa_r+0x792>
 8009750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009752:	9307      	str	r3, [sp, #28]
 8009754:	e649      	b.n	80093ea <_dtoa_r+0x7c2>
 8009756:	9b02      	ldr	r3, [sp, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dc03      	bgt.n	8009764 <_dtoa_r+0xb3c>
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	2b02      	cmp	r3, #2
 8009760:	f73f aecc 	bgt.w	80094fc <_dtoa_r+0x8d4>
 8009764:	465d      	mov	r5, fp
 8009766:	4639      	mov	r1, r7
 8009768:	9804      	ldr	r0, [sp, #16]
 800976a:	f7ff f9cf 	bl	8008b0c <quorem>
 800976e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009772:	f805 8b01 	strb.w	r8, [r5], #1
 8009776:	9a02      	ldr	r2, [sp, #8]
 8009778:	eba5 030b 	sub.w	r3, r5, fp
 800977c:	429a      	cmp	r2, r3
 800977e:	ddb0      	ble.n	80096e2 <_dtoa_r+0xaba>
 8009780:	2300      	movs	r3, #0
 8009782:	220a      	movs	r2, #10
 8009784:	9904      	ldr	r1, [sp, #16]
 8009786:	4620      	mov	r0, r4
 8009788:	f000 fa50 	bl	8009c2c <__multadd>
 800978c:	9004      	str	r0, [sp, #16]
 800978e:	e7ea      	b.n	8009766 <_dtoa_r+0xb3e>
 8009790:	0801f650 	.word	0x0801f650
 8009794:	0801f674 	.word	0x0801f674

08009798 <__sflush_r>:
 8009798:	898a      	ldrh	r2, [r1, #12]
 800979a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	4605      	mov	r5, r0
 80097a0:	0710      	lsls	r0, r2, #28
 80097a2:	460c      	mov	r4, r1
 80097a4:	d458      	bmi.n	8009858 <__sflush_r+0xc0>
 80097a6:	684b      	ldr	r3, [r1, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	dc05      	bgt.n	80097b8 <__sflush_r+0x20>
 80097ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	dc02      	bgt.n	80097b8 <__sflush_r+0x20>
 80097b2:	2000      	movs	r0, #0
 80097b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	d0f9      	beq.n	80097b2 <__sflush_r+0x1a>
 80097be:	2300      	movs	r3, #0
 80097c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097c4:	682f      	ldr	r7, [r5, #0]
 80097c6:	6a21      	ldr	r1, [r4, #32]
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	d032      	beq.n	8009832 <__sflush_r+0x9a>
 80097cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	075a      	lsls	r2, r3, #29
 80097d2:	d505      	bpl.n	80097e0 <__sflush_r+0x48>
 80097d4:	6863      	ldr	r3, [r4, #4]
 80097d6:	1ac0      	subs	r0, r0, r3
 80097d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097da:	b10b      	cbz	r3, 80097e0 <__sflush_r+0x48>
 80097dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097de:	1ac0      	subs	r0, r0, r3
 80097e0:	2300      	movs	r3, #0
 80097e2:	4602      	mov	r2, r0
 80097e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097e6:	6a21      	ldr	r1, [r4, #32]
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b0      	blx	r6
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	d106      	bne.n	8009800 <__sflush_r+0x68>
 80097f2:	6829      	ldr	r1, [r5, #0]
 80097f4:	291d      	cmp	r1, #29
 80097f6:	d848      	bhi.n	800988a <__sflush_r+0xf2>
 80097f8:	4a29      	ldr	r2, [pc, #164]	; (80098a0 <__sflush_r+0x108>)
 80097fa:	40ca      	lsrs	r2, r1
 80097fc:	07d6      	lsls	r6, r2, #31
 80097fe:	d544      	bpl.n	800988a <__sflush_r+0xf2>
 8009800:	2200      	movs	r2, #0
 8009802:	6062      	str	r2, [r4, #4]
 8009804:	04d9      	lsls	r1, r3, #19
 8009806:	6922      	ldr	r2, [r4, #16]
 8009808:	6022      	str	r2, [r4, #0]
 800980a:	d504      	bpl.n	8009816 <__sflush_r+0x7e>
 800980c:	1c42      	adds	r2, r0, #1
 800980e:	d101      	bne.n	8009814 <__sflush_r+0x7c>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b903      	cbnz	r3, 8009816 <__sflush_r+0x7e>
 8009814:	6560      	str	r0, [r4, #84]	; 0x54
 8009816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009818:	602f      	str	r7, [r5, #0]
 800981a:	2900      	cmp	r1, #0
 800981c:	d0c9      	beq.n	80097b2 <__sflush_r+0x1a>
 800981e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009822:	4299      	cmp	r1, r3
 8009824:	d002      	beq.n	800982c <__sflush_r+0x94>
 8009826:	4628      	mov	r0, r5
 8009828:	f000 fc9e 	bl	800a168 <_free_r>
 800982c:	2000      	movs	r0, #0
 800982e:	6360      	str	r0, [r4, #52]	; 0x34
 8009830:	e7c0      	b.n	80097b4 <__sflush_r+0x1c>
 8009832:	2301      	movs	r3, #1
 8009834:	4628      	mov	r0, r5
 8009836:	47b0      	blx	r6
 8009838:	1c41      	adds	r1, r0, #1
 800983a:	d1c8      	bne.n	80097ce <__sflush_r+0x36>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0c5      	beq.n	80097ce <__sflush_r+0x36>
 8009842:	2b1d      	cmp	r3, #29
 8009844:	d001      	beq.n	800984a <__sflush_r+0xb2>
 8009846:	2b16      	cmp	r3, #22
 8009848:	d101      	bne.n	800984e <__sflush_r+0xb6>
 800984a:	602f      	str	r7, [r5, #0]
 800984c:	e7b1      	b.n	80097b2 <__sflush_r+0x1a>
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	e7ad      	b.n	80097b4 <__sflush_r+0x1c>
 8009858:	690f      	ldr	r7, [r1, #16]
 800985a:	2f00      	cmp	r7, #0
 800985c:	d0a9      	beq.n	80097b2 <__sflush_r+0x1a>
 800985e:	0793      	lsls	r3, r2, #30
 8009860:	680e      	ldr	r6, [r1, #0]
 8009862:	bf08      	it	eq
 8009864:	694b      	ldreq	r3, [r1, #20]
 8009866:	600f      	str	r7, [r1, #0]
 8009868:	bf18      	it	ne
 800986a:	2300      	movne	r3, #0
 800986c:	eba6 0807 	sub.w	r8, r6, r7
 8009870:	608b      	str	r3, [r1, #8]
 8009872:	f1b8 0f00 	cmp.w	r8, #0
 8009876:	dd9c      	ble.n	80097b2 <__sflush_r+0x1a>
 8009878:	4643      	mov	r3, r8
 800987a:	463a      	mov	r2, r7
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	2800      	cmp	r0, #0
 8009886:	dc06      	bgt.n	8009896 <__sflush_r+0xfe>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	e78e      	b.n	80097b4 <__sflush_r+0x1c>
 8009896:	4407      	add	r7, r0
 8009898:	eba8 0800 	sub.w	r8, r8, r0
 800989c:	e7e9      	b.n	8009872 <__sflush_r+0xda>
 800989e:	bf00      	nop
 80098a0:	20400001 	.word	0x20400001

080098a4 <_fflush_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	690b      	ldr	r3, [r1, #16]
 80098a8:	4605      	mov	r5, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	b1db      	cbz	r3, 80098e6 <_fflush_r+0x42>
 80098ae:	b118      	cbz	r0, 80098b8 <_fflush_r+0x14>
 80098b0:	6983      	ldr	r3, [r0, #24]
 80098b2:	b90b      	cbnz	r3, 80098b8 <_fflush_r+0x14>
 80098b4:	f000 f860 	bl	8009978 <__sinit>
 80098b8:	4b0c      	ldr	r3, [pc, #48]	; (80098ec <_fflush_r+0x48>)
 80098ba:	429c      	cmp	r4, r3
 80098bc:	d109      	bne.n	80098d2 <_fflush_r+0x2e>
 80098be:	686c      	ldr	r4, [r5, #4]
 80098c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c4:	b17b      	cbz	r3, 80098e6 <_fflush_r+0x42>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ce:	f7ff bf63 	b.w	8009798 <__sflush_r>
 80098d2:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <_fflush_r+0x4c>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	d101      	bne.n	80098dc <_fflush_r+0x38>
 80098d8:	68ac      	ldr	r4, [r5, #8]
 80098da:	e7f1      	b.n	80098c0 <_fflush_r+0x1c>
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <_fflush_r+0x50>)
 80098de:	429c      	cmp	r4, r3
 80098e0:	bf08      	it	eq
 80098e2:	68ec      	ldreq	r4, [r5, #12]
 80098e4:	e7ec      	b.n	80098c0 <_fflush_r+0x1c>
 80098e6:	2000      	movs	r0, #0
 80098e8:	bd38      	pop	{r3, r4, r5, pc}
 80098ea:	bf00      	nop
 80098ec:	0801f6a4 	.word	0x0801f6a4
 80098f0:	0801f6c4 	.word	0x0801f6c4
 80098f4:	0801f684 	.word	0x0801f684

080098f8 <std>:
 80098f8:	2300      	movs	r3, #0
 80098fa:	b510      	push	{r4, lr}
 80098fc:	4604      	mov	r4, r0
 80098fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009902:	6083      	str	r3, [r0, #8]
 8009904:	8181      	strh	r1, [r0, #12]
 8009906:	6643      	str	r3, [r0, #100]	; 0x64
 8009908:	81c2      	strh	r2, [r0, #14]
 800990a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800990e:	6183      	str	r3, [r0, #24]
 8009910:	4619      	mov	r1, r3
 8009912:	2208      	movs	r2, #8
 8009914:	305c      	adds	r0, #92	; 0x5c
 8009916:	f7fe fb25 	bl	8007f64 <memset>
 800991a:	4b05      	ldr	r3, [pc, #20]	; (8009930 <std+0x38>)
 800991c:	6263      	str	r3, [r4, #36]	; 0x24
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <std+0x3c>)
 8009920:	62a3      	str	r3, [r4, #40]	; 0x28
 8009922:	4b05      	ldr	r3, [pc, #20]	; (8009938 <std+0x40>)
 8009924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009926:	4b05      	ldr	r3, [pc, #20]	; (800993c <std+0x44>)
 8009928:	6224      	str	r4, [r4, #32]
 800992a:	6323      	str	r3, [r4, #48]	; 0x30
 800992c:	bd10      	pop	{r4, pc}
 800992e:	bf00      	nop
 8009930:	0800a869 	.word	0x0800a869
 8009934:	0800a88b 	.word	0x0800a88b
 8009938:	0800a8c3 	.word	0x0800a8c3
 800993c:	0800a8e7 	.word	0x0800a8e7

08009940 <_cleanup_r>:
 8009940:	4901      	ldr	r1, [pc, #4]	; (8009948 <_cleanup_r+0x8>)
 8009942:	f000 b885 	b.w	8009a50 <_fwalk_reent>
 8009946:	bf00      	nop
 8009948:	080098a5 	.word	0x080098a5

0800994c <__sfmoreglue>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	1e4a      	subs	r2, r1, #1
 8009950:	2568      	movs	r5, #104	; 0x68
 8009952:	4355      	muls	r5, r2
 8009954:	460e      	mov	r6, r1
 8009956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800995a:	f000 fc53 	bl	800a204 <_malloc_r>
 800995e:	4604      	mov	r4, r0
 8009960:	b140      	cbz	r0, 8009974 <__sfmoreglue+0x28>
 8009962:	2100      	movs	r1, #0
 8009964:	e9c0 1600 	strd	r1, r6, [r0]
 8009968:	300c      	adds	r0, #12
 800996a:	60a0      	str	r0, [r4, #8]
 800996c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009970:	f7fe faf8 	bl	8007f64 <memset>
 8009974:	4620      	mov	r0, r4
 8009976:	bd70      	pop	{r4, r5, r6, pc}

08009978 <__sinit>:
 8009978:	6983      	ldr	r3, [r0, #24]
 800997a:	b510      	push	{r4, lr}
 800997c:	4604      	mov	r4, r0
 800997e:	bb33      	cbnz	r3, 80099ce <__sinit+0x56>
 8009980:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009984:	6503      	str	r3, [r0, #80]	; 0x50
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <__sinit+0x58>)
 8009988:	4a12      	ldr	r2, [pc, #72]	; (80099d4 <__sinit+0x5c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6282      	str	r2, [r0, #40]	; 0x28
 800998e:	4298      	cmp	r0, r3
 8009990:	bf04      	itt	eq
 8009992:	2301      	moveq	r3, #1
 8009994:	6183      	streq	r3, [r0, #24]
 8009996:	f000 f81f 	bl	80099d8 <__sfp>
 800999a:	6060      	str	r0, [r4, #4]
 800999c:	4620      	mov	r0, r4
 800999e:	f000 f81b 	bl	80099d8 <__sfp>
 80099a2:	60a0      	str	r0, [r4, #8]
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 f817 	bl	80099d8 <__sfp>
 80099aa:	2200      	movs	r2, #0
 80099ac:	60e0      	str	r0, [r4, #12]
 80099ae:	2104      	movs	r1, #4
 80099b0:	6860      	ldr	r0, [r4, #4]
 80099b2:	f7ff ffa1 	bl	80098f8 <std>
 80099b6:	2201      	movs	r2, #1
 80099b8:	2109      	movs	r1, #9
 80099ba:	68a0      	ldr	r0, [r4, #8]
 80099bc:	f7ff ff9c 	bl	80098f8 <std>
 80099c0:	2202      	movs	r2, #2
 80099c2:	2112      	movs	r1, #18
 80099c4:	68e0      	ldr	r0, [r4, #12]
 80099c6:	f7ff ff97 	bl	80098f8 <std>
 80099ca:	2301      	movs	r3, #1
 80099cc:	61a3      	str	r3, [r4, #24]
 80099ce:	bd10      	pop	{r4, pc}
 80099d0:	0801f63c 	.word	0x0801f63c
 80099d4:	08009941 	.word	0x08009941

080099d8 <__sfp>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <__sfp+0x70>)
 80099dc:	681e      	ldr	r6, [r3, #0]
 80099de:	69b3      	ldr	r3, [r6, #24]
 80099e0:	4607      	mov	r7, r0
 80099e2:	b913      	cbnz	r3, 80099ea <__sfp+0x12>
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7ff ffc7 	bl	8009978 <__sinit>
 80099ea:	3648      	adds	r6, #72	; 0x48
 80099ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	d503      	bpl.n	80099fc <__sfp+0x24>
 80099f4:	6833      	ldr	r3, [r6, #0]
 80099f6:	b133      	cbz	r3, 8009a06 <__sfp+0x2e>
 80099f8:	6836      	ldr	r6, [r6, #0]
 80099fa:	e7f7      	b.n	80099ec <__sfp+0x14>
 80099fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a00:	b16d      	cbz	r5, 8009a1e <__sfp+0x46>
 8009a02:	3468      	adds	r4, #104	; 0x68
 8009a04:	e7f4      	b.n	80099f0 <__sfp+0x18>
 8009a06:	2104      	movs	r1, #4
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f7ff ff9f 	bl	800994c <__sfmoreglue>
 8009a0e:	6030      	str	r0, [r6, #0]
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d1f1      	bne.n	80099f8 <__sfp+0x20>
 8009a14:	230c      	movs	r3, #12
 8009a16:	603b      	str	r3, [r7, #0]
 8009a18:	4604      	mov	r4, r0
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <__sfp+0x74>)
 8009a20:	6665      	str	r5, [r4, #100]	; 0x64
 8009a22:	e9c4 5500 	strd	r5, r5, [r4]
 8009a26:	60a5      	str	r5, [r4, #8]
 8009a28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009a30:	2208      	movs	r2, #8
 8009a32:	4629      	mov	r1, r5
 8009a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a38:	f7fe fa94 	bl	8007f64 <memset>
 8009a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a44:	e7e9      	b.n	8009a1a <__sfp+0x42>
 8009a46:	bf00      	nop
 8009a48:	0801f63c 	.word	0x0801f63c
 8009a4c:	ffff0001 	.word	0xffff0001

08009a50 <_fwalk_reent>:
 8009a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	4680      	mov	r8, r0
 8009a56:	4689      	mov	r9, r1
 8009a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	b914      	cbnz	r4, 8009a66 <_fwalk_reent+0x16>
 8009a60:	4630      	mov	r0, r6
 8009a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009a6a:	3f01      	subs	r7, #1
 8009a6c:	d501      	bpl.n	8009a72 <_fwalk_reent+0x22>
 8009a6e:	6824      	ldr	r4, [r4, #0]
 8009a70:	e7f5      	b.n	8009a5e <_fwalk_reent+0xe>
 8009a72:	89ab      	ldrh	r3, [r5, #12]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d907      	bls.n	8009a88 <_fwalk_reent+0x38>
 8009a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	d003      	beq.n	8009a88 <_fwalk_reent+0x38>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4640      	mov	r0, r8
 8009a84:	47c8      	blx	r9
 8009a86:	4306      	orrs	r6, r0
 8009a88:	3568      	adds	r5, #104	; 0x68
 8009a8a:	e7ee      	b.n	8009a6a <_fwalk_reent+0x1a>

08009a8c <_localeconv_r>:
 8009a8c:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <_localeconv_r+0x14>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6a18      	ldr	r0, [r3, #32]
 8009a92:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <_localeconv_r+0x18>)
 8009a94:	2800      	cmp	r0, #0
 8009a96:	bf08      	it	eq
 8009a98:	4618      	moveq	r0, r3
 8009a9a:	30f0      	adds	r0, #240	; 0xf0
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	20000030 	.word	0x20000030
 8009aa4:	20000094 	.word	0x20000094

08009aa8 <__swhatbuf_r>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	460e      	mov	r6, r1
 8009aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	b096      	sub	sp, #88	; 0x58
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	461d      	mov	r5, r3
 8009ab8:	da07      	bge.n	8009aca <__swhatbuf_r+0x22>
 8009aba:	2300      	movs	r3, #0
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	89b3      	ldrh	r3, [r6, #12]
 8009ac0:	061a      	lsls	r2, r3, #24
 8009ac2:	d410      	bmi.n	8009ae6 <__swhatbuf_r+0x3e>
 8009ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ac8:	e00e      	b.n	8009ae8 <__swhatbuf_r+0x40>
 8009aca:	466a      	mov	r2, sp
 8009acc:	f000 ff32 	bl	800a934 <_fstat_r>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	dbf2      	blt.n	8009aba <__swhatbuf_r+0x12>
 8009ad4:	9a01      	ldr	r2, [sp, #4]
 8009ad6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ada:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ade:	425a      	negs	r2, r3
 8009ae0:	415a      	adcs	r2, r3
 8009ae2:	602a      	str	r2, [r5, #0]
 8009ae4:	e7ee      	b.n	8009ac4 <__swhatbuf_r+0x1c>
 8009ae6:	2340      	movs	r3, #64	; 0x40
 8009ae8:	2000      	movs	r0, #0
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	b016      	add	sp, #88	; 0x58
 8009aee:	bd70      	pop	{r4, r5, r6, pc}

08009af0 <__smakebuf_r>:
 8009af0:	898b      	ldrh	r3, [r1, #12]
 8009af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009af4:	079d      	lsls	r5, r3, #30
 8009af6:	4606      	mov	r6, r0
 8009af8:	460c      	mov	r4, r1
 8009afa:	d507      	bpl.n	8009b0c <__smakebuf_r+0x1c>
 8009afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	6123      	str	r3, [r4, #16]
 8009b04:	2301      	movs	r3, #1
 8009b06:	6163      	str	r3, [r4, #20]
 8009b08:	b002      	add	sp, #8
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	ab01      	add	r3, sp, #4
 8009b0e:	466a      	mov	r2, sp
 8009b10:	f7ff ffca 	bl	8009aa8 <__swhatbuf_r>
 8009b14:	9900      	ldr	r1, [sp, #0]
 8009b16:	4605      	mov	r5, r0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 fb73 	bl	800a204 <_malloc_r>
 8009b1e:	b948      	cbnz	r0, 8009b34 <__smakebuf_r+0x44>
 8009b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b24:	059a      	lsls	r2, r3, #22
 8009b26:	d4ef      	bmi.n	8009b08 <__smakebuf_r+0x18>
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	f043 0302 	orr.w	r3, r3, #2
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	e7e3      	b.n	8009afc <__smakebuf_r+0xc>
 8009b34:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <__smakebuf_r+0x7c>)
 8009b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	6020      	str	r0, [r4, #0]
 8009b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	9b00      	ldr	r3, [sp, #0]
 8009b44:	6163      	str	r3, [r4, #20]
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	6120      	str	r0, [r4, #16]
 8009b4a:	b15b      	cbz	r3, 8009b64 <__smakebuf_r+0x74>
 8009b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b50:	4630      	mov	r0, r6
 8009b52:	f000 ff01 	bl	800a958 <_isatty_r>
 8009b56:	b128      	cbz	r0, 8009b64 <__smakebuf_r+0x74>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	f023 0303 	bic.w	r3, r3, #3
 8009b5e:	f043 0301 	orr.w	r3, r3, #1
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	431d      	orrs	r5, r3
 8009b68:	81a5      	strh	r5, [r4, #12]
 8009b6a:	e7cd      	b.n	8009b08 <__smakebuf_r+0x18>
 8009b6c:	08009941 	.word	0x08009941

08009b70 <malloc>:
 8009b70:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <malloc+0xc>)
 8009b72:	4601      	mov	r1, r0
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f000 bb45 	b.w	800a204 <_malloc_r>
 8009b7a:	bf00      	nop
 8009b7c:	20000030 	.word	0x20000030

08009b80 <memcpy>:
 8009b80:	b510      	push	{r4, lr}
 8009b82:	1e43      	subs	r3, r0, #1
 8009b84:	440a      	add	r2, r1
 8009b86:	4291      	cmp	r1, r2
 8009b88:	d100      	bne.n	8009b8c <memcpy+0xc>
 8009b8a:	bd10      	pop	{r4, pc}
 8009b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b94:	e7f7      	b.n	8009b86 <memcpy+0x6>

08009b96 <_Balloc>:
 8009b96:	b570      	push	{r4, r5, r6, lr}
 8009b98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	460e      	mov	r6, r1
 8009b9e:	b93d      	cbnz	r5, 8009bb0 <_Balloc+0x1a>
 8009ba0:	2010      	movs	r0, #16
 8009ba2:	f7ff ffe5 	bl	8009b70 <malloc>
 8009ba6:	6260      	str	r0, [r4, #36]	; 0x24
 8009ba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bac:	6005      	str	r5, [r0, #0]
 8009bae:	60c5      	str	r5, [r0, #12]
 8009bb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009bb2:	68eb      	ldr	r3, [r5, #12]
 8009bb4:	b183      	cbz	r3, 8009bd8 <_Balloc+0x42>
 8009bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bbe:	b9b8      	cbnz	r0, 8009bf0 <_Balloc+0x5a>
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	fa01 f506 	lsl.w	r5, r1, r6
 8009bc6:	1d6a      	adds	r2, r5, #5
 8009bc8:	0092      	lsls	r2, r2, #2
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 fabe 	bl	800a14c <_calloc_r>
 8009bd0:	b160      	cbz	r0, 8009bec <_Balloc+0x56>
 8009bd2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009bd6:	e00e      	b.n	8009bf6 <_Balloc+0x60>
 8009bd8:	2221      	movs	r2, #33	; 0x21
 8009bda:	2104      	movs	r1, #4
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 fab5 	bl	800a14c <_calloc_r>
 8009be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be4:	60e8      	str	r0, [r5, #12]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1e4      	bne.n	8009bb6 <_Balloc+0x20>
 8009bec:	2000      	movs	r0, #0
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	6802      	ldr	r2, [r0, #0]
 8009bf2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bfc:	e7f7      	b.n	8009bee <_Balloc+0x58>

08009bfe <_Bfree>:
 8009bfe:	b570      	push	{r4, r5, r6, lr}
 8009c00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c02:	4606      	mov	r6, r0
 8009c04:	460d      	mov	r5, r1
 8009c06:	b93c      	cbnz	r4, 8009c18 <_Bfree+0x1a>
 8009c08:	2010      	movs	r0, #16
 8009c0a:	f7ff ffb1 	bl	8009b70 <malloc>
 8009c0e:	6270      	str	r0, [r6, #36]	; 0x24
 8009c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c14:	6004      	str	r4, [r0, #0]
 8009c16:	60c4      	str	r4, [r0, #12]
 8009c18:	b13d      	cbz	r5, 8009c2a <_Bfree+0x2c>
 8009c1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c1c:	686a      	ldr	r2, [r5, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c24:	6029      	str	r1, [r5, #0]
 8009c26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}

08009c2c <__multadd>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	690d      	ldr	r5, [r1, #16]
 8009c32:	461f      	mov	r7, r3
 8009c34:	4606      	mov	r6, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	f101 0c14 	add.w	ip, r1, #20
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f8dc 0000 	ldr.w	r0, [ip]
 8009c42:	b281      	uxth	r1, r0
 8009c44:	fb02 7101 	mla	r1, r2, r1, r7
 8009c48:	0c0f      	lsrs	r7, r1, #16
 8009c4a:	0c00      	lsrs	r0, r0, #16
 8009c4c:	fb02 7000 	mla	r0, r2, r0, r7
 8009c50:	b289      	uxth	r1, r1
 8009c52:	3301      	adds	r3, #1
 8009c54:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009c5e:	f84c 1b04 	str.w	r1, [ip], #4
 8009c62:	dcec      	bgt.n	8009c3e <__multadd+0x12>
 8009c64:	b1d7      	cbz	r7, 8009c9c <__multadd+0x70>
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	42ab      	cmp	r3, r5
 8009c6a:	dc12      	bgt.n	8009c92 <__multadd+0x66>
 8009c6c:	6861      	ldr	r1, [r4, #4]
 8009c6e:	4630      	mov	r0, r6
 8009c70:	3101      	adds	r1, #1
 8009c72:	f7ff ff90 	bl	8009b96 <_Balloc>
 8009c76:	6922      	ldr	r2, [r4, #16]
 8009c78:	3202      	adds	r2, #2
 8009c7a:	f104 010c 	add.w	r1, r4, #12
 8009c7e:	4680      	mov	r8, r0
 8009c80:	0092      	lsls	r2, r2, #2
 8009c82:	300c      	adds	r0, #12
 8009c84:	f7ff ff7c 	bl	8009b80 <memcpy>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ffb7 	bl	8009bfe <_Bfree>
 8009c90:	4644      	mov	r4, r8
 8009c92:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c96:	3501      	adds	r5, #1
 8009c98:	615f      	str	r7, [r3, #20]
 8009c9a:	6125      	str	r5, [r4, #16]
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ca2 <__hi0bits>:
 8009ca2:	0c02      	lsrs	r2, r0, #16
 8009ca4:	0412      	lsls	r2, r2, #16
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	b9b2      	cbnz	r2, 8009cd8 <__hi0bits+0x36>
 8009caa:	0403      	lsls	r3, r0, #16
 8009cac:	2010      	movs	r0, #16
 8009cae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009cb2:	bf04      	itt	eq
 8009cb4:	021b      	lsleq	r3, r3, #8
 8009cb6:	3008      	addeq	r0, #8
 8009cb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009cbc:	bf04      	itt	eq
 8009cbe:	011b      	lsleq	r3, r3, #4
 8009cc0:	3004      	addeq	r0, #4
 8009cc2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009cc6:	bf04      	itt	eq
 8009cc8:	009b      	lsleq	r3, r3, #2
 8009cca:	3002      	addeq	r0, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	db06      	blt.n	8009cde <__hi0bits+0x3c>
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	d503      	bpl.n	8009cdc <__hi0bits+0x3a>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	4770      	bx	lr
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e7e8      	b.n	8009cae <__hi0bits+0xc>
 8009cdc:	2020      	movs	r0, #32
 8009cde:	4770      	bx	lr

08009ce0 <__lo0bits>:
 8009ce0:	6803      	ldr	r3, [r0, #0]
 8009ce2:	f013 0207 	ands.w	r2, r3, #7
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	d00b      	beq.n	8009d02 <__lo0bits+0x22>
 8009cea:	07da      	lsls	r2, r3, #31
 8009cec:	d423      	bmi.n	8009d36 <__lo0bits+0x56>
 8009cee:	0798      	lsls	r0, r3, #30
 8009cf0:	bf49      	itett	mi
 8009cf2:	085b      	lsrmi	r3, r3, #1
 8009cf4:	089b      	lsrpl	r3, r3, #2
 8009cf6:	2001      	movmi	r0, #1
 8009cf8:	600b      	strmi	r3, [r1, #0]
 8009cfa:	bf5c      	itt	pl
 8009cfc:	600b      	strpl	r3, [r1, #0]
 8009cfe:	2002      	movpl	r0, #2
 8009d00:	4770      	bx	lr
 8009d02:	b298      	uxth	r0, r3
 8009d04:	b9a8      	cbnz	r0, 8009d32 <__lo0bits+0x52>
 8009d06:	0c1b      	lsrs	r3, r3, #16
 8009d08:	2010      	movs	r0, #16
 8009d0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d0e:	bf04      	itt	eq
 8009d10:	0a1b      	lsreq	r3, r3, #8
 8009d12:	3008      	addeq	r0, #8
 8009d14:	071a      	lsls	r2, r3, #28
 8009d16:	bf04      	itt	eq
 8009d18:	091b      	lsreq	r3, r3, #4
 8009d1a:	3004      	addeq	r0, #4
 8009d1c:	079a      	lsls	r2, r3, #30
 8009d1e:	bf04      	itt	eq
 8009d20:	089b      	lsreq	r3, r3, #2
 8009d22:	3002      	addeq	r0, #2
 8009d24:	07da      	lsls	r2, r3, #31
 8009d26:	d402      	bmi.n	8009d2e <__lo0bits+0x4e>
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	d006      	beq.n	8009d3a <__lo0bits+0x5a>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	600b      	str	r3, [r1, #0]
 8009d30:	4770      	bx	lr
 8009d32:	4610      	mov	r0, r2
 8009d34:	e7e9      	b.n	8009d0a <__lo0bits+0x2a>
 8009d36:	2000      	movs	r0, #0
 8009d38:	4770      	bx	lr
 8009d3a:	2020      	movs	r0, #32
 8009d3c:	4770      	bx	lr

08009d3e <__i2b>:
 8009d3e:	b510      	push	{r4, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	2101      	movs	r1, #1
 8009d44:	f7ff ff27 	bl	8009b96 <_Balloc>
 8009d48:	2201      	movs	r2, #1
 8009d4a:	6144      	str	r4, [r0, #20]
 8009d4c:	6102      	str	r2, [r0, #16]
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <__multiply>:
 8009d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	4614      	mov	r4, r2
 8009d56:	690a      	ldr	r2, [r1, #16]
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	bfb8      	it	lt
 8009d5e:	460b      	movlt	r3, r1
 8009d60:	4688      	mov	r8, r1
 8009d62:	bfbc      	itt	lt
 8009d64:	46a0      	movlt	r8, r4
 8009d66:	461c      	movlt	r4, r3
 8009d68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d78:	eb07 0609 	add.w	r6, r7, r9
 8009d7c:	42b3      	cmp	r3, r6
 8009d7e:	bfb8      	it	lt
 8009d80:	3101      	addlt	r1, #1
 8009d82:	f7ff ff08 	bl	8009b96 <_Balloc>
 8009d86:	f100 0514 	add.w	r5, r0, #20
 8009d8a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009d8e:	462b      	mov	r3, r5
 8009d90:	2200      	movs	r2, #0
 8009d92:	4573      	cmp	r3, lr
 8009d94:	d316      	bcc.n	8009dc4 <__multiply+0x74>
 8009d96:	f104 0214 	add.w	r2, r4, #20
 8009d9a:	f108 0114 	add.w	r1, r8, #20
 8009d9e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009da2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	9201      	str	r2, [sp, #4]
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d80c      	bhi.n	8009dca <__multiply+0x7a>
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	dd03      	ble.n	8009dbc <__multiply+0x6c>
 8009db4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d05d      	beq.n	8009e78 <__multiply+0x128>
 8009dbc:	6106      	str	r6, [r0, #16]
 8009dbe:	b003      	add	sp, #12
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	f843 2b04 	str.w	r2, [r3], #4
 8009dc8:	e7e3      	b.n	8009d92 <__multiply+0x42>
 8009dca:	f8b2 b000 	ldrh.w	fp, [r2]
 8009dce:	f1bb 0f00 	cmp.w	fp, #0
 8009dd2:	d023      	beq.n	8009e1c <__multiply+0xcc>
 8009dd4:	4689      	mov	r9, r1
 8009dd6:	46ac      	mov	ip, r5
 8009dd8:	f04f 0800 	mov.w	r8, #0
 8009ddc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009de0:	f8dc a000 	ldr.w	sl, [ip]
 8009de4:	b2a3      	uxth	r3, r4
 8009de6:	fa1f fa8a 	uxth.w	sl, sl
 8009dea:	fb0b a303 	mla	r3, fp, r3, sl
 8009dee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009df2:	f8dc 4000 	ldr.w	r4, [ip]
 8009df6:	4443      	add	r3, r8
 8009df8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009dfc:	fb0b 840a 	mla	r4, fp, sl, r8
 8009e00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009e04:	46e2      	mov	sl, ip
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e0c:	454f      	cmp	r7, r9
 8009e0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e12:	f84a 3b04 	str.w	r3, [sl], #4
 8009e16:	d82b      	bhi.n	8009e70 <__multiply+0x120>
 8009e18:	f8cc 8004 	str.w	r8, [ip, #4]
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009e22:	3204      	adds	r2, #4
 8009e24:	f1ba 0f00 	cmp.w	sl, #0
 8009e28:	d020      	beq.n	8009e6c <__multiply+0x11c>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	4689      	mov	r9, r1
 8009e2e:	46a8      	mov	r8, r5
 8009e30:	f04f 0b00 	mov.w	fp, #0
 8009e34:	f8b9 c000 	ldrh.w	ip, [r9]
 8009e38:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009e3c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009e40:	445c      	add	r4, fp
 8009e42:	46c4      	mov	ip, r8
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e4a:	f84c 3b04 	str.w	r3, [ip], #4
 8009e4e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e52:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009e56:	0c1b      	lsrs	r3, r3, #16
 8009e58:	fb0a b303 	mla	r3, sl, r3, fp
 8009e5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e60:	454f      	cmp	r7, r9
 8009e62:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009e66:	d805      	bhi.n	8009e74 <__multiply+0x124>
 8009e68:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e6c:	3504      	adds	r5, #4
 8009e6e:	e79b      	b.n	8009da8 <__multiply+0x58>
 8009e70:	46d4      	mov	ip, sl
 8009e72:	e7b3      	b.n	8009ddc <__multiply+0x8c>
 8009e74:	46e0      	mov	r8, ip
 8009e76:	e7dd      	b.n	8009e34 <__multiply+0xe4>
 8009e78:	3e01      	subs	r6, #1
 8009e7a:	e799      	b.n	8009db0 <__multiply+0x60>

08009e7c <__pow5mult>:
 8009e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e80:	4615      	mov	r5, r2
 8009e82:	f012 0203 	ands.w	r2, r2, #3
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	d007      	beq.n	8009e9c <__pow5mult+0x20>
 8009e8c:	3a01      	subs	r2, #1
 8009e8e:	4c21      	ldr	r4, [pc, #132]	; (8009f14 <__pow5mult+0x98>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e96:	f7ff fec9 	bl	8009c2c <__multadd>
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	10ad      	asrs	r5, r5, #2
 8009e9e:	d035      	beq.n	8009f0c <__pow5mult+0x90>
 8009ea0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ea2:	b93c      	cbnz	r4, 8009eb4 <__pow5mult+0x38>
 8009ea4:	2010      	movs	r0, #16
 8009ea6:	f7ff fe63 	bl	8009b70 <malloc>
 8009eaa:	6270      	str	r0, [r6, #36]	; 0x24
 8009eac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009eb0:	6004      	str	r4, [r0, #0]
 8009eb2:	60c4      	str	r4, [r0, #12]
 8009eb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009eb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ebc:	b94c      	cbnz	r4, 8009ed2 <__pow5mult+0x56>
 8009ebe:	f240 2171 	movw	r1, #625	; 0x271
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ff3b 	bl	8009d3e <__i2b>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ece:	4604      	mov	r4, r0
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	07eb      	lsls	r3, r5, #31
 8009ed8:	d50a      	bpl.n	8009ef0 <__pow5mult+0x74>
 8009eda:	4639      	mov	r1, r7
 8009edc:	4622      	mov	r2, r4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff ff36 	bl	8009d50 <__multiply>
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	4681      	mov	r9, r0
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff fe88 	bl	8009bfe <_Bfree>
 8009eee:	464f      	mov	r7, r9
 8009ef0:	106d      	asrs	r5, r5, #1
 8009ef2:	d00b      	beq.n	8009f0c <__pow5mult+0x90>
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	b938      	cbnz	r0, 8009f08 <__pow5mult+0x8c>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4621      	mov	r1, r4
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff ff27 	bl	8009d50 <__multiply>
 8009f02:	6020      	str	r0, [r4, #0]
 8009f04:	f8c0 8000 	str.w	r8, [r0]
 8009f08:	4604      	mov	r4, r0
 8009f0a:	e7e4      	b.n	8009ed6 <__pow5mult+0x5a>
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f12:	bf00      	nop
 8009f14:	0801f7d8 	.word	0x0801f7d8

08009f18 <__lshift>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	6849      	ldr	r1, [r1, #4]
 8009f26:	eb0a 0903 	add.w	r9, sl, r3
 8009f2a:	68a3      	ldr	r3, [r4, #8]
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	4616      	mov	r6, r2
 8009f30:	f109 0501 	add.w	r5, r9, #1
 8009f34:	42ab      	cmp	r3, r5
 8009f36:	db32      	blt.n	8009f9e <__lshift+0x86>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7ff fe2c 	bl	8009b96 <_Balloc>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4680      	mov	r8, r0
 8009f42:	f100 0114 	add.w	r1, r0, #20
 8009f46:	461a      	mov	r2, r3
 8009f48:	4553      	cmp	r3, sl
 8009f4a:	db2b      	blt.n	8009fa4 <__lshift+0x8c>
 8009f4c:	6920      	ldr	r0, [r4, #16]
 8009f4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f52:	f104 0314 	add.w	r3, r4, #20
 8009f56:	f016 021f 	ands.w	r2, r6, #31
 8009f5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f62:	d025      	beq.n	8009fb0 <__lshift+0x98>
 8009f64:	f1c2 0e20 	rsb	lr, r2, #32
 8009f68:	2000      	movs	r0, #0
 8009f6a:	681e      	ldr	r6, [r3, #0]
 8009f6c:	468a      	mov	sl, r1
 8009f6e:	4096      	lsls	r6, r2
 8009f70:	4330      	orrs	r0, r6
 8009f72:	f84a 0b04 	str.w	r0, [sl], #4
 8009f76:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f7a:	459c      	cmp	ip, r3
 8009f7c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009f80:	d814      	bhi.n	8009fac <__lshift+0x94>
 8009f82:	6048      	str	r0, [r1, #4]
 8009f84:	b108      	cbz	r0, 8009f8a <__lshift+0x72>
 8009f86:	f109 0502 	add.w	r5, r9, #2
 8009f8a:	3d01      	subs	r5, #1
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009f92:	4621      	mov	r1, r4
 8009f94:	f7ff fe33 	bl	8009bfe <_Bfree>
 8009f98:	4640      	mov	r0, r8
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	3101      	adds	r1, #1
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	e7c7      	b.n	8009f34 <__lshift+0x1c>
 8009fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	e7cd      	b.n	8009f48 <__lshift+0x30>
 8009fac:	4651      	mov	r1, sl
 8009fae:	e7dc      	b.n	8009f6a <__lshift+0x52>
 8009fb0:	3904      	subs	r1, #4
 8009fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fba:	459c      	cmp	ip, r3
 8009fbc:	d8f9      	bhi.n	8009fb2 <__lshift+0x9a>
 8009fbe:	e7e4      	b.n	8009f8a <__lshift+0x72>

08009fc0 <__mcmp>:
 8009fc0:	6903      	ldr	r3, [r0, #16]
 8009fc2:	690a      	ldr	r2, [r1, #16]
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	b530      	push	{r4, r5, lr}
 8009fc8:	d10c      	bne.n	8009fe4 <__mcmp+0x24>
 8009fca:	0092      	lsls	r2, r2, #2
 8009fcc:	3014      	adds	r0, #20
 8009fce:	3114      	adds	r1, #20
 8009fd0:	1884      	adds	r4, r0, r2
 8009fd2:	4411      	add	r1, r2
 8009fd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fdc:	4295      	cmp	r5, r2
 8009fde:	d003      	beq.n	8009fe8 <__mcmp+0x28>
 8009fe0:	d305      	bcc.n	8009fee <__mcmp+0x2e>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	bd30      	pop	{r4, r5, pc}
 8009fe8:	42a0      	cmp	r0, r4
 8009fea:	d3f3      	bcc.n	8009fd4 <__mcmp+0x14>
 8009fec:	e7fa      	b.n	8009fe4 <__mcmp+0x24>
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff2:	e7f7      	b.n	8009fe4 <__mcmp+0x24>

08009ff4 <__mdiff>:
 8009ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4628      	mov	r0, r5
 800a000:	4614      	mov	r4, r2
 800a002:	f7ff ffdd 	bl	8009fc0 <__mcmp>
 800a006:	1e06      	subs	r6, r0, #0
 800a008:	d108      	bne.n	800a01c <__mdiff+0x28>
 800a00a:	4631      	mov	r1, r6
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff fdc2 	bl	8009b96 <_Balloc>
 800a012:	2301      	movs	r3, #1
 800a014:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01c:	bfa4      	itt	ge
 800a01e:	4623      	movge	r3, r4
 800a020:	462c      	movge	r4, r5
 800a022:	4638      	mov	r0, r7
 800a024:	6861      	ldr	r1, [r4, #4]
 800a026:	bfa6      	itte	ge
 800a028:	461d      	movge	r5, r3
 800a02a:	2600      	movge	r6, #0
 800a02c:	2601      	movlt	r6, #1
 800a02e:	f7ff fdb2 	bl	8009b96 <_Balloc>
 800a032:	692b      	ldr	r3, [r5, #16]
 800a034:	60c6      	str	r6, [r0, #12]
 800a036:	6926      	ldr	r6, [r4, #16]
 800a038:	f105 0914 	add.w	r9, r5, #20
 800a03c:	f104 0214 	add.w	r2, r4, #20
 800a040:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a044:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a048:	f100 0514 	add.w	r5, r0, #20
 800a04c:	f04f 0e00 	mov.w	lr, #0
 800a050:	f852 ab04 	ldr.w	sl, [r2], #4
 800a054:	f859 4b04 	ldr.w	r4, [r9], #4
 800a058:	fa1e f18a 	uxtah	r1, lr, sl
 800a05c:	b2a3      	uxth	r3, r4
 800a05e:	1ac9      	subs	r1, r1, r3
 800a060:	0c23      	lsrs	r3, r4, #16
 800a062:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a066:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a06a:	b289      	uxth	r1, r1
 800a06c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a070:	45c8      	cmp	r8, r9
 800a072:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a076:	4694      	mov	ip, r2
 800a078:	f845 3b04 	str.w	r3, [r5], #4
 800a07c:	d8e8      	bhi.n	800a050 <__mdiff+0x5c>
 800a07e:	45bc      	cmp	ip, r7
 800a080:	d304      	bcc.n	800a08c <__mdiff+0x98>
 800a082:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a086:	b183      	cbz	r3, 800a0aa <__mdiff+0xb6>
 800a088:	6106      	str	r6, [r0, #16]
 800a08a:	e7c5      	b.n	800a018 <__mdiff+0x24>
 800a08c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a090:	fa1e f381 	uxtah	r3, lr, r1
 800a094:	141a      	asrs	r2, r3, #16
 800a096:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a0a4:	f845 3b04 	str.w	r3, [r5], #4
 800a0a8:	e7e9      	b.n	800a07e <__mdiff+0x8a>
 800a0aa:	3e01      	subs	r6, #1
 800a0ac:	e7e9      	b.n	800a082 <__mdiff+0x8e>

0800a0ae <__d2b>:
 800a0ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0b2:	460e      	mov	r6, r1
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	ec59 8b10 	vmov	r8, r9, d0
 800a0ba:	4615      	mov	r5, r2
 800a0bc:	f7ff fd6b 	bl	8009b96 <_Balloc>
 800a0c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0ca:	bb34      	cbnz	r4, 800a11a <__d2b+0x6c>
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f1b8 0300 	subs.w	r3, r8, #0
 800a0d2:	d027      	beq.n	800a124 <__d2b+0x76>
 800a0d4:	a802      	add	r0, sp, #8
 800a0d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a0da:	f7ff fe01 	bl	8009ce0 <__lo0bits>
 800a0de:	9900      	ldr	r1, [sp, #0]
 800a0e0:	b1f0      	cbz	r0, 800a120 <__d2b+0x72>
 800a0e2:	9a01      	ldr	r2, [sp, #4]
 800a0e4:	f1c0 0320 	rsb	r3, r0, #32
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	40c2      	lsrs	r2, r0
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	9201      	str	r2, [sp, #4]
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	61bb      	str	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bf14      	ite	ne
 800a0fc:	2102      	movne	r1, #2
 800a0fe:	2101      	moveq	r1, #1
 800a100:	6139      	str	r1, [r7, #16]
 800a102:	b1c4      	cbz	r4, 800a136 <__d2b+0x88>
 800a104:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a108:	4404      	add	r4, r0
 800a10a:	6034      	str	r4, [r6, #0]
 800a10c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a110:	6028      	str	r0, [r5, #0]
 800a112:	4638      	mov	r0, r7
 800a114:	b003      	add	sp, #12
 800a116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a11e:	e7d5      	b.n	800a0cc <__d2b+0x1e>
 800a120:	6179      	str	r1, [r7, #20]
 800a122:	e7e7      	b.n	800a0f4 <__d2b+0x46>
 800a124:	a801      	add	r0, sp, #4
 800a126:	f7ff fddb 	bl	8009ce0 <__lo0bits>
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	2101      	movs	r1, #1
 800a130:	6139      	str	r1, [r7, #16]
 800a132:	3020      	adds	r0, #32
 800a134:	e7e5      	b.n	800a102 <__d2b+0x54>
 800a136:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a13a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a13e:	6030      	str	r0, [r6, #0]
 800a140:	6918      	ldr	r0, [r3, #16]
 800a142:	f7ff fdae 	bl	8009ca2 <__hi0bits>
 800a146:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a14a:	e7e1      	b.n	800a110 <__d2b+0x62>

0800a14c <_calloc_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	fb02 f401 	mul.w	r4, r2, r1
 800a152:	4621      	mov	r1, r4
 800a154:	f000 f856 	bl	800a204 <_malloc_r>
 800a158:	4605      	mov	r5, r0
 800a15a:	b118      	cbz	r0, 800a164 <_calloc_r+0x18>
 800a15c:	4622      	mov	r2, r4
 800a15e:	2100      	movs	r1, #0
 800a160:	f7fd ff00 	bl	8007f64 <memset>
 800a164:	4628      	mov	r0, r5
 800a166:	bd38      	pop	{r3, r4, r5, pc}

0800a168 <_free_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4605      	mov	r5, r0
 800a16c:	2900      	cmp	r1, #0
 800a16e:	d045      	beq.n	800a1fc <_free_r+0x94>
 800a170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a174:	1f0c      	subs	r4, r1, #4
 800a176:	2b00      	cmp	r3, #0
 800a178:	bfb8      	it	lt
 800a17a:	18e4      	addlt	r4, r4, r3
 800a17c:	f000 fc39 	bl	800a9f2 <__malloc_lock>
 800a180:	4a1f      	ldr	r2, [pc, #124]	; (800a200 <_free_r+0x98>)
 800a182:	6813      	ldr	r3, [r2, #0]
 800a184:	4610      	mov	r0, r2
 800a186:	b933      	cbnz	r3, 800a196 <_free_r+0x2e>
 800a188:	6063      	str	r3, [r4, #4]
 800a18a:	6014      	str	r4, [r2, #0]
 800a18c:	4628      	mov	r0, r5
 800a18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a192:	f000 bc2f 	b.w	800a9f4 <__malloc_unlock>
 800a196:	42a3      	cmp	r3, r4
 800a198:	d90c      	bls.n	800a1b4 <_free_r+0x4c>
 800a19a:	6821      	ldr	r1, [r4, #0]
 800a19c:	1862      	adds	r2, r4, r1
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	bf04      	itt	eq
 800a1a2:	681a      	ldreq	r2, [r3, #0]
 800a1a4:	685b      	ldreq	r3, [r3, #4]
 800a1a6:	6063      	str	r3, [r4, #4]
 800a1a8:	bf04      	itt	eq
 800a1aa:	1852      	addeq	r2, r2, r1
 800a1ac:	6022      	streq	r2, [r4, #0]
 800a1ae:	6004      	str	r4, [r0, #0]
 800a1b0:	e7ec      	b.n	800a18c <_free_r+0x24>
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	b10a      	cbz	r2, 800a1bc <_free_r+0x54>
 800a1b8:	42a2      	cmp	r2, r4
 800a1ba:	d9fa      	bls.n	800a1b2 <_free_r+0x4a>
 800a1bc:	6819      	ldr	r1, [r3, #0]
 800a1be:	1858      	adds	r0, r3, r1
 800a1c0:	42a0      	cmp	r0, r4
 800a1c2:	d10b      	bne.n	800a1dc <_free_r+0x74>
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	4401      	add	r1, r0
 800a1c8:	1858      	adds	r0, r3, r1
 800a1ca:	4282      	cmp	r2, r0
 800a1cc:	6019      	str	r1, [r3, #0]
 800a1ce:	d1dd      	bne.n	800a18c <_free_r+0x24>
 800a1d0:	6810      	ldr	r0, [r2, #0]
 800a1d2:	6852      	ldr	r2, [r2, #4]
 800a1d4:	605a      	str	r2, [r3, #4]
 800a1d6:	4401      	add	r1, r0
 800a1d8:	6019      	str	r1, [r3, #0]
 800a1da:	e7d7      	b.n	800a18c <_free_r+0x24>
 800a1dc:	d902      	bls.n	800a1e4 <_free_r+0x7c>
 800a1de:	230c      	movs	r3, #12
 800a1e0:	602b      	str	r3, [r5, #0]
 800a1e2:	e7d3      	b.n	800a18c <_free_r+0x24>
 800a1e4:	6820      	ldr	r0, [r4, #0]
 800a1e6:	1821      	adds	r1, r4, r0
 800a1e8:	428a      	cmp	r2, r1
 800a1ea:	bf04      	itt	eq
 800a1ec:	6811      	ldreq	r1, [r2, #0]
 800a1ee:	6852      	ldreq	r2, [r2, #4]
 800a1f0:	6062      	str	r2, [r4, #4]
 800a1f2:	bf04      	itt	eq
 800a1f4:	1809      	addeq	r1, r1, r0
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	605c      	str	r4, [r3, #4]
 800a1fa:	e7c7      	b.n	800a18c <_free_r+0x24>
 800a1fc:	bd38      	pop	{r3, r4, r5, pc}
 800a1fe:	bf00      	nop
 800a200:	20009f74 	.word	0x20009f74

0800a204 <_malloc_r>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	1ccd      	adds	r5, r1, #3
 800a208:	f025 0503 	bic.w	r5, r5, #3
 800a20c:	3508      	adds	r5, #8
 800a20e:	2d0c      	cmp	r5, #12
 800a210:	bf38      	it	cc
 800a212:	250c      	movcc	r5, #12
 800a214:	2d00      	cmp	r5, #0
 800a216:	4606      	mov	r6, r0
 800a218:	db01      	blt.n	800a21e <_malloc_r+0x1a>
 800a21a:	42a9      	cmp	r1, r5
 800a21c:	d903      	bls.n	800a226 <_malloc_r+0x22>
 800a21e:	230c      	movs	r3, #12
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	2000      	movs	r0, #0
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	f000 fbe4 	bl	800a9f2 <__malloc_lock>
 800a22a:	4a21      	ldr	r2, [pc, #132]	; (800a2b0 <_malloc_r+0xac>)
 800a22c:	6814      	ldr	r4, [r2, #0]
 800a22e:	4621      	mov	r1, r4
 800a230:	b991      	cbnz	r1, 800a258 <_malloc_r+0x54>
 800a232:	4c20      	ldr	r4, [pc, #128]	; (800a2b4 <_malloc_r+0xb0>)
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	b91b      	cbnz	r3, 800a240 <_malloc_r+0x3c>
 800a238:	4630      	mov	r0, r6
 800a23a:	f000 fb05 	bl	800a848 <_sbrk_r>
 800a23e:	6020      	str	r0, [r4, #0]
 800a240:	4629      	mov	r1, r5
 800a242:	4630      	mov	r0, r6
 800a244:	f000 fb00 	bl	800a848 <_sbrk_r>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d124      	bne.n	800a296 <_malloc_r+0x92>
 800a24c:	230c      	movs	r3, #12
 800a24e:	6033      	str	r3, [r6, #0]
 800a250:	4630      	mov	r0, r6
 800a252:	f000 fbcf 	bl	800a9f4 <__malloc_unlock>
 800a256:	e7e4      	b.n	800a222 <_malloc_r+0x1e>
 800a258:	680b      	ldr	r3, [r1, #0]
 800a25a:	1b5b      	subs	r3, r3, r5
 800a25c:	d418      	bmi.n	800a290 <_malloc_r+0x8c>
 800a25e:	2b0b      	cmp	r3, #11
 800a260:	d90f      	bls.n	800a282 <_malloc_r+0x7e>
 800a262:	600b      	str	r3, [r1, #0]
 800a264:	50cd      	str	r5, [r1, r3]
 800a266:	18cc      	adds	r4, r1, r3
 800a268:	4630      	mov	r0, r6
 800a26a:	f000 fbc3 	bl	800a9f4 <__malloc_unlock>
 800a26e:	f104 000b 	add.w	r0, r4, #11
 800a272:	1d23      	adds	r3, r4, #4
 800a274:	f020 0007 	bic.w	r0, r0, #7
 800a278:	1ac3      	subs	r3, r0, r3
 800a27a:	d0d3      	beq.n	800a224 <_malloc_r+0x20>
 800a27c:	425a      	negs	r2, r3
 800a27e:	50e2      	str	r2, [r4, r3]
 800a280:	e7d0      	b.n	800a224 <_malloc_r+0x20>
 800a282:	428c      	cmp	r4, r1
 800a284:	684b      	ldr	r3, [r1, #4]
 800a286:	bf16      	itet	ne
 800a288:	6063      	strne	r3, [r4, #4]
 800a28a:	6013      	streq	r3, [r2, #0]
 800a28c:	460c      	movne	r4, r1
 800a28e:	e7eb      	b.n	800a268 <_malloc_r+0x64>
 800a290:	460c      	mov	r4, r1
 800a292:	6849      	ldr	r1, [r1, #4]
 800a294:	e7cc      	b.n	800a230 <_malloc_r+0x2c>
 800a296:	1cc4      	adds	r4, r0, #3
 800a298:	f024 0403 	bic.w	r4, r4, #3
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d005      	beq.n	800a2ac <_malloc_r+0xa8>
 800a2a0:	1a21      	subs	r1, r4, r0
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f000 fad0 	bl	800a848 <_sbrk_r>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d0cf      	beq.n	800a24c <_malloc_r+0x48>
 800a2ac:	6025      	str	r5, [r4, #0]
 800a2ae:	e7db      	b.n	800a268 <_malloc_r+0x64>
 800a2b0:	20009f74 	.word	0x20009f74
 800a2b4:	20009f78 	.word	0x20009f78

0800a2b8 <__ssputs_r>:
 800a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2bc:	688e      	ldr	r6, [r1, #8]
 800a2be:	429e      	cmp	r6, r3
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	4690      	mov	r8, r2
 800a2c6:	4699      	mov	r9, r3
 800a2c8:	d837      	bhi.n	800a33a <__ssputs_r+0x82>
 800a2ca:	898a      	ldrh	r2, [r1, #12]
 800a2cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2d0:	d031      	beq.n	800a336 <__ssputs_r+0x7e>
 800a2d2:	6825      	ldr	r5, [r4, #0]
 800a2d4:	6909      	ldr	r1, [r1, #16]
 800a2d6:	1a6f      	subs	r7, r5, r1
 800a2d8:	6965      	ldr	r5, [r4, #20]
 800a2da:	2302      	movs	r3, #2
 800a2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2e0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a2e4:	f109 0301 	add.w	r3, r9, #1
 800a2e8:	443b      	add	r3, r7
 800a2ea:	429d      	cmp	r5, r3
 800a2ec:	bf38      	it	cc
 800a2ee:	461d      	movcc	r5, r3
 800a2f0:	0553      	lsls	r3, r2, #21
 800a2f2:	d530      	bpl.n	800a356 <__ssputs_r+0x9e>
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7ff ff85 	bl	800a204 <_malloc_r>
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	b950      	cbnz	r0, 800a314 <__ssputs_r+0x5c>
 800a2fe:	230c      	movs	r3, #12
 800a300:	f8ca 3000 	str.w	r3, [sl]
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a314:	463a      	mov	r2, r7
 800a316:	6921      	ldr	r1, [r4, #16]
 800a318:	f7ff fc32 	bl	8009b80 <memcpy>
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a326:	81a3      	strh	r3, [r4, #12]
 800a328:	6126      	str	r6, [r4, #16]
 800a32a:	6165      	str	r5, [r4, #20]
 800a32c:	443e      	add	r6, r7
 800a32e:	1bed      	subs	r5, r5, r7
 800a330:	6026      	str	r6, [r4, #0]
 800a332:	60a5      	str	r5, [r4, #8]
 800a334:	464e      	mov	r6, r9
 800a336:	454e      	cmp	r6, r9
 800a338:	d900      	bls.n	800a33c <__ssputs_r+0x84>
 800a33a:	464e      	mov	r6, r9
 800a33c:	4632      	mov	r2, r6
 800a33e:	4641      	mov	r1, r8
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	f000 fb3d 	bl	800a9c0 <memmove>
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	1b9b      	subs	r3, r3, r6
 800a34a:	60a3      	str	r3, [r4, #8]
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	441e      	add	r6, r3
 800a350:	6026      	str	r6, [r4, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	e7dc      	b.n	800a310 <__ssputs_r+0x58>
 800a356:	462a      	mov	r2, r5
 800a358:	f000 fb4d 	bl	800a9f6 <_realloc_r>
 800a35c:	4606      	mov	r6, r0
 800a35e:	2800      	cmp	r0, #0
 800a360:	d1e2      	bne.n	800a328 <__ssputs_r+0x70>
 800a362:	6921      	ldr	r1, [r4, #16]
 800a364:	4650      	mov	r0, sl
 800a366:	f7ff feff 	bl	800a168 <_free_r>
 800a36a:	e7c8      	b.n	800a2fe <__ssputs_r+0x46>

0800a36c <_svfiprintf_r>:
 800a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a370:	461d      	mov	r5, r3
 800a372:	898b      	ldrh	r3, [r1, #12]
 800a374:	061f      	lsls	r7, r3, #24
 800a376:	b09d      	sub	sp, #116	; 0x74
 800a378:	4680      	mov	r8, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	4616      	mov	r6, r2
 800a37e:	d50f      	bpl.n	800a3a0 <_svfiprintf_r+0x34>
 800a380:	690b      	ldr	r3, [r1, #16]
 800a382:	b96b      	cbnz	r3, 800a3a0 <_svfiprintf_r+0x34>
 800a384:	2140      	movs	r1, #64	; 0x40
 800a386:	f7ff ff3d 	bl	800a204 <_malloc_r>
 800a38a:	6020      	str	r0, [r4, #0]
 800a38c:	6120      	str	r0, [r4, #16]
 800a38e:	b928      	cbnz	r0, 800a39c <_svfiprintf_r+0x30>
 800a390:	230c      	movs	r3, #12
 800a392:	f8c8 3000 	str.w	r3, [r8]
 800a396:	f04f 30ff 	mov.w	r0, #4294967295
 800a39a:	e0c8      	b.n	800a52e <_svfiprintf_r+0x1c2>
 800a39c:	2340      	movs	r3, #64	; 0x40
 800a39e:	6163      	str	r3, [r4, #20]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3aa:	2330      	movs	r3, #48	; 0x30
 800a3ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b0:	9503      	str	r5, [sp, #12]
 800a3b2:	f04f 0b01 	mov.w	fp, #1
 800a3b6:	4637      	mov	r7, r6
 800a3b8:	463d      	mov	r5, r7
 800a3ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3be:	b10b      	cbz	r3, 800a3c4 <_svfiprintf_r+0x58>
 800a3c0:	2b25      	cmp	r3, #37	; 0x25
 800a3c2:	d13e      	bne.n	800a442 <_svfiprintf_r+0xd6>
 800a3c4:	ebb7 0a06 	subs.w	sl, r7, r6
 800a3c8:	d00b      	beq.n	800a3e2 <_svfiprintf_r+0x76>
 800a3ca:	4653      	mov	r3, sl
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f7ff ff71 	bl	800a2b8 <__ssputs_r>
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f000 80a4 	beq.w	800a524 <_svfiprintf_r+0x1b8>
 800a3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3de:	4453      	add	r3, sl
 800a3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e2:	783b      	ldrb	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 809d 	beq.w	800a524 <_svfiprintf_r+0x1b8>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	9307      	str	r3, [sp, #28]
 800a3f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a3fe:	462f      	mov	r7, r5
 800a400:	2205      	movs	r2, #5
 800a402:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a406:	4850      	ldr	r0, [pc, #320]	; (800a548 <_svfiprintf_r+0x1dc>)
 800a408:	f7f5 ff0a 	bl	8000220 <memchr>
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	b9d0      	cbnz	r0, 800a446 <_svfiprintf_r+0xda>
 800a410:	06d9      	lsls	r1, r3, #27
 800a412:	bf44      	itt	mi
 800a414:	2220      	movmi	r2, #32
 800a416:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a41a:	071a      	lsls	r2, r3, #28
 800a41c:	bf44      	itt	mi
 800a41e:	222b      	movmi	r2, #43	; 0x2b
 800a420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a424:	782a      	ldrb	r2, [r5, #0]
 800a426:	2a2a      	cmp	r2, #42	; 0x2a
 800a428:	d015      	beq.n	800a456 <_svfiprintf_r+0xea>
 800a42a:	9a07      	ldr	r2, [sp, #28]
 800a42c:	462f      	mov	r7, r5
 800a42e:	2000      	movs	r0, #0
 800a430:	250a      	movs	r5, #10
 800a432:	4639      	mov	r1, r7
 800a434:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a438:	3b30      	subs	r3, #48	; 0x30
 800a43a:	2b09      	cmp	r3, #9
 800a43c:	d94d      	bls.n	800a4da <_svfiprintf_r+0x16e>
 800a43e:	b1b8      	cbz	r0, 800a470 <_svfiprintf_r+0x104>
 800a440:	e00f      	b.n	800a462 <_svfiprintf_r+0xf6>
 800a442:	462f      	mov	r7, r5
 800a444:	e7b8      	b.n	800a3b8 <_svfiprintf_r+0x4c>
 800a446:	4a40      	ldr	r2, [pc, #256]	; (800a548 <_svfiprintf_r+0x1dc>)
 800a448:	1a80      	subs	r0, r0, r2
 800a44a:	fa0b f000 	lsl.w	r0, fp, r0
 800a44e:	4318      	orrs	r0, r3
 800a450:	9004      	str	r0, [sp, #16]
 800a452:	463d      	mov	r5, r7
 800a454:	e7d3      	b.n	800a3fe <_svfiprintf_r+0x92>
 800a456:	9a03      	ldr	r2, [sp, #12]
 800a458:	1d11      	adds	r1, r2, #4
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	9103      	str	r1, [sp, #12]
 800a45e:	2a00      	cmp	r2, #0
 800a460:	db01      	blt.n	800a466 <_svfiprintf_r+0xfa>
 800a462:	9207      	str	r2, [sp, #28]
 800a464:	e004      	b.n	800a470 <_svfiprintf_r+0x104>
 800a466:	4252      	negs	r2, r2
 800a468:	f043 0302 	orr.w	r3, r3, #2
 800a46c:	9207      	str	r2, [sp, #28]
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	783b      	ldrb	r3, [r7, #0]
 800a472:	2b2e      	cmp	r3, #46	; 0x2e
 800a474:	d10c      	bne.n	800a490 <_svfiprintf_r+0x124>
 800a476:	787b      	ldrb	r3, [r7, #1]
 800a478:	2b2a      	cmp	r3, #42	; 0x2a
 800a47a:	d133      	bne.n	800a4e4 <_svfiprintf_r+0x178>
 800a47c:	9b03      	ldr	r3, [sp, #12]
 800a47e:	1d1a      	adds	r2, r3, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	9203      	str	r2, [sp, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	bfb8      	it	lt
 800a488:	f04f 33ff 	movlt.w	r3, #4294967295
 800a48c:	3702      	adds	r7, #2
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	4d2e      	ldr	r5, [pc, #184]	; (800a54c <_svfiprintf_r+0x1e0>)
 800a492:	7839      	ldrb	r1, [r7, #0]
 800a494:	2203      	movs	r2, #3
 800a496:	4628      	mov	r0, r5
 800a498:	f7f5 fec2 	bl	8000220 <memchr>
 800a49c:	b138      	cbz	r0, 800a4ae <_svfiprintf_r+0x142>
 800a49e:	2340      	movs	r3, #64	; 0x40
 800a4a0:	1b40      	subs	r0, r0, r5
 800a4a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	4303      	orrs	r3, r0
 800a4aa:	3701      	adds	r7, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	7839      	ldrb	r1, [r7, #0]
 800a4b0:	4827      	ldr	r0, [pc, #156]	; (800a550 <_svfiprintf_r+0x1e4>)
 800a4b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b6:	2206      	movs	r2, #6
 800a4b8:	1c7e      	adds	r6, r7, #1
 800a4ba:	f7f5 feb1 	bl	8000220 <memchr>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d038      	beq.n	800a534 <_svfiprintf_r+0x1c8>
 800a4c2:	4b24      	ldr	r3, [pc, #144]	; (800a554 <_svfiprintf_r+0x1e8>)
 800a4c4:	bb13      	cbnz	r3, 800a50c <_svfiprintf_r+0x1a0>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	3307      	adds	r3, #7
 800a4ca:	f023 0307 	bic.w	r3, r3, #7
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	9303      	str	r3, [sp, #12]
 800a4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d4:	444b      	add	r3, r9
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	e76d      	b.n	800a3b6 <_svfiprintf_r+0x4a>
 800a4da:	fb05 3202 	mla	r2, r5, r2, r3
 800a4de:	2001      	movs	r0, #1
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	e7a6      	b.n	800a432 <_svfiprintf_r+0xc6>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	3701      	adds	r7, #1
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	250a      	movs	r5, #10
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f4:	3a30      	subs	r2, #48	; 0x30
 800a4f6:	2a09      	cmp	r2, #9
 800a4f8:	d903      	bls.n	800a502 <_svfiprintf_r+0x196>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0c8      	beq.n	800a490 <_svfiprintf_r+0x124>
 800a4fe:	9105      	str	r1, [sp, #20]
 800a500:	e7c6      	b.n	800a490 <_svfiprintf_r+0x124>
 800a502:	fb05 2101 	mla	r1, r5, r1, r2
 800a506:	2301      	movs	r3, #1
 800a508:	4607      	mov	r7, r0
 800a50a:	e7f0      	b.n	800a4ee <_svfiprintf_r+0x182>
 800a50c:	ab03      	add	r3, sp, #12
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	4622      	mov	r2, r4
 800a512:	4b11      	ldr	r3, [pc, #68]	; (800a558 <_svfiprintf_r+0x1ec>)
 800a514:	a904      	add	r1, sp, #16
 800a516:	4640      	mov	r0, r8
 800a518:	f7fd fdc0 	bl	800809c <_printf_float>
 800a51c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a520:	4681      	mov	r9, r0
 800a522:	d1d6      	bne.n	800a4d2 <_svfiprintf_r+0x166>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	065b      	lsls	r3, r3, #25
 800a528:	f53f af35 	bmi.w	800a396 <_svfiprintf_r+0x2a>
 800a52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52e:	b01d      	add	sp, #116	; 0x74
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	4622      	mov	r2, r4
 800a53a:	4b07      	ldr	r3, [pc, #28]	; (800a558 <_svfiprintf_r+0x1ec>)
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	4640      	mov	r0, r8
 800a540:	f7fe f862 	bl	8008608 <_printf_i>
 800a544:	e7ea      	b.n	800a51c <_svfiprintf_r+0x1b0>
 800a546:	bf00      	nop
 800a548:	0801f7e4 	.word	0x0801f7e4
 800a54c:	0801f7ea 	.word	0x0801f7ea
 800a550:	0801f7ee 	.word	0x0801f7ee
 800a554:	0800809d 	.word	0x0800809d
 800a558:	0800a2b9 	.word	0x0800a2b9

0800a55c <__sfputc_r>:
 800a55c:	6893      	ldr	r3, [r2, #8]
 800a55e:	3b01      	subs	r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	b410      	push	{r4}
 800a564:	6093      	str	r3, [r2, #8]
 800a566:	da08      	bge.n	800a57a <__sfputc_r+0x1e>
 800a568:	6994      	ldr	r4, [r2, #24]
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	db01      	blt.n	800a572 <__sfputc_r+0x16>
 800a56e:	290a      	cmp	r1, #10
 800a570:	d103      	bne.n	800a57a <__sfputc_r+0x1e>
 800a572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a576:	f7fe ba09 	b.w	800898c <__swbuf_r>
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	1c58      	adds	r0, r3, #1
 800a57e:	6010      	str	r0, [r2, #0]
 800a580:	7019      	strb	r1, [r3, #0]
 800a582:	4608      	mov	r0, r1
 800a584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <__sfputs_r>:
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	4614      	mov	r4, r2
 800a592:	18d5      	adds	r5, r2, r3
 800a594:	42ac      	cmp	r4, r5
 800a596:	d101      	bne.n	800a59c <__sfputs_r+0x12>
 800a598:	2000      	movs	r0, #0
 800a59a:	e007      	b.n	800a5ac <__sfputs_r+0x22>
 800a59c:	463a      	mov	r2, r7
 800a59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ffda 	bl	800a55c <__sfputc_r>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d1f3      	bne.n	800a594 <__sfputs_r+0xa>
 800a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5b0 <_vfiprintf_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	b09d      	sub	sp, #116	; 0x74
 800a5b8:	4617      	mov	r7, r2
 800a5ba:	461d      	mov	r5, r3
 800a5bc:	4606      	mov	r6, r0
 800a5be:	b118      	cbz	r0, 800a5c8 <_vfiprintf_r+0x18>
 800a5c0:	6983      	ldr	r3, [r0, #24]
 800a5c2:	b90b      	cbnz	r3, 800a5c8 <_vfiprintf_r+0x18>
 800a5c4:	f7ff f9d8 	bl	8009978 <__sinit>
 800a5c8:	4b7c      	ldr	r3, [pc, #496]	; (800a7bc <_vfiprintf_r+0x20c>)
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d158      	bne.n	800a680 <_vfiprintf_r+0xd0>
 800a5ce:	6874      	ldr	r4, [r6, #4]
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	0718      	lsls	r0, r3, #28
 800a5d4:	d55e      	bpl.n	800a694 <_vfiprintf_r+0xe4>
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d05b      	beq.n	800a694 <_vfiprintf_r+0xe4>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5e6:	2330      	movs	r3, #48	; 0x30
 800a5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ec:	9503      	str	r5, [sp, #12]
 800a5ee:	f04f 0b01 	mov.w	fp, #1
 800a5f2:	46b8      	mov	r8, r7
 800a5f4:	4645      	mov	r5, r8
 800a5f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a5fa:	b10b      	cbz	r3, 800a600 <_vfiprintf_r+0x50>
 800a5fc:	2b25      	cmp	r3, #37	; 0x25
 800a5fe:	d154      	bne.n	800a6aa <_vfiprintf_r+0xfa>
 800a600:	ebb8 0a07 	subs.w	sl, r8, r7
 800a604:	d00b      	beq.n	800a61e <_vfiprintf_r+0x6e>
 800a606:	4653      	mov	r3, sl
 800a608:	463a      	mov	r2, r7
 800a60a:	4621      	mov	r1, r4
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7ff ffbc 	bl	800a58a <__sfputs_r>
 800a612:	3001      	adds	r0, #1
 800a614:	f000 80c2 	beq.w	800a79c <_vfiprintf_r+0x1ec>
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	4453      	add	r3, sl
 800a61c:	9309      	str	r3, [sp, #36]	; 0x24
 800a61e:	f898 3000 	ldrb.w	r3, [r8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 80ba 	beq.w	800a79c <_vfiprintf_r+0x1ec>
 800a628:	2300      	movs	r3, #0
 800a62a:	f04f 32ff 	mov.w	r2, #4294967295
 800a62e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a632:	9304      	str	r3, [sp, #16]
 800a634:	9307      	str	r3, [sp, #28]
 800a636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a63a:	931a      	str	r3, [sp, #104]	; 0x68
 800a63c:	46a8      	mov	r8, r5
 800a63e:	2205      	movs	r2, #5
 800a640:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a644:	485e      	ldr	r0, [pc, #376]	; (800a7c0 <_vfiprintf_r+0x210>)
 800a646:	f7f5 fdeb 	bl	8000220 <memchr>
 800a64a:	9b04      	ldr	r3, [sp, #16]
 800a64c:	bb78      	cbnz	r0, 800a6ae <_vfiprintf_r+0xfe>
 800a64e:	06d9      	lsls	r1, r3, #27
 800a650:	bf44      	itt	mi
 800a652:	2220      	movmi	r2, #32
 800a654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a658:	071a      	lsls	r2, r3, #28
 800a65a:	bf44      	itt	mi
 800a65c:	222b      	movmi	r2, #43	; 0x2b
 800a65e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a662:	782a      	ldrb	r2, [r5, #0]
 800a664:	2a2a      	cmp	r2, #42	; 0x2a
 800a666:	d02a      	beq.n	800a6be <_vfiprintf_r+0x10e>
 800a668:	9a07      	ldr	r2, [sp, #28]
 800a66a:	46a8      	mov	r8, r5
 800a66c:	2000      	movs	r0, #0
 800a66e:	250a      	movs	r5, #10
 800a670:	4641      	mov	r1, r8
 800a672:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a676:	3b30      	subs	r3, #48	; 0x30
 800a678:	2b09      	cmp	r3, #9
 800a67a:	d969      	bls.n	800a750 <_vfiprintf_r+0x1a0>
 800a67c:	b360      	cbz	r0, 800a6d8 <_vfiprintf_r+0x128>
 800a67e:	e024      	b.n	800a6ca <_vfiprintf_r+0x11a>
 800a680:	4b50      	ldr	r3, [pc, #320]	; (800a7c4 <_vfiprintf_r+0x214>)
 800a682:	429c      	cmp	r4, r3
 800a684:	d101      	bne.n	800a68a <_vfiprintf_r+0xda>
 800a686:	68b4      	ldr	r4, [r6, #8]
 800a688:	e7a2      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a68a:	4b4f      	ldr	r3, [pc, #316]	; (800a7c8 <_vfiprintf_r+0x218>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	bf08      	it	eq
 800a690:	68f4      	ldreq	r4, [r6, #12]
 800a692:	e79d      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a694:	4621      	mov	r1, r4
 800a696:	4630      	mov	r0, r6
 800a698:	f7fe f9ca 	bl	8008a30 <__swsetup_r>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d09d      	beq.n	800a5dc <_vfiprintf_r+0x2c>
 800a6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a4:	b01d      	add	sp, #116	; 0x74
 800a6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6aa:	46a8      	mov	r8, r5
 800a6ac:	e7a2      	b.n	800a5f4 <_vfiprintf_r+0x44>
 800a6ae:	4a44      	ldr	r2, [pc, #272]	; (800a7c0 <_vfiprintf_r+0x210>)
 800a6b0:	1a80      	subs	r0, r0, r2
 800a6b2:	fa0b f000 	lsl.w	r0, fp, r0
 800a6b6:	4318      	orrs	r0, r3
 800a6b8:	9004      	str	r0, [sp, #16]
 800a6ba:	4645      	mov	r5, r8
 800a6bc:	e7be      	b.n	800a63c <_vfiprintf_r+0x8c>
 800a6be:	9a03      	ldr	r2, [sp, #12]
 800a6c0:	1d11      	adds	r1, r2, #4
 800a6c2:	6812      	ldr	r2, [r2, #0]
 800a6c4:	9103      	str	r1, [sp, #12]
 800a6c6:	2a00      	cmp	r2, #0
 800a6c8:	db01      	blt.n	800a6ce <_vfiprintf_r+0x11e>
 800a6ca:	9207      	str	r2, [sp, #28]
 800a6cc:	e004      	b.n	800a6d8 <_vfiprintf_r+0x128>
 800a6ce:	4252      	negs	r2, r2
 800a6d0:	f043 0302 	orr.w	r3, r3, #2
 800a6d4:	9207      	str	r2, [sp, #28]
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	f898 3000 	ldrb.w	r3, [r8]
 800a6dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6de:	d10e      	bne.n	800a6fe <_vfiprintf_r+0x14e>
 800a6e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e6:	d138      	bne.n	800a75a <_vfiprintf_r+0x1aa>
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	1d1a      	adds	r2, r3, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	9203      	str	r2, [sp, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bfb8      	it	lt
 800a6f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6f8:	f108 0802 	add.w	r8, r8, #2
 800a6fc:	9305      	str	r3, [sp, #20]
 800a6fe:	4d33      	ldr	r5, [pc, #204]	; (800a7cc <_vfiprintf_r+0x21c>)
 800a700:	f898 1000 	ldrb.w	r1, [r8]
 800a704:	2203      	movs	r2, #3
 800a706:	4628      	mov	r0, r5
 800a708:	f7f5 fd8a 	bl	8000220 <memchr>
 800a70c:	b140      	cbz	r0, 800a720 <_vfiprintf_r+0x170>
 800a70e:	2340      	movs	r3, #64	; 0x40
 800a710:	1b40      	subs	r0, r0, r5
 800a712:	fa03 f000 	lsl.w	r0, r3, r0
 800a716:	9b04      	ldr	r3, [sp, #16]
 800a718:	4303      	orrs	r3, r0
 800a71a:	f108 0801 	add.w	r8, r8, #1
 800a71e:	9304      	str	r3, [sp, #16]
 800a720:	f898 1000 	ldrb.w	r1, [r8]
 800a724:	482a      	ldr	r0, [pc, #168]	; (800a7d0 <_vfiprintf_r+0x220>)
 800a726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a72a:	2206      	movs	r2, #6
 800a72c:	f108 0701 	add.w	r7, r8, #1
 800a730:	f7f5 fd76 	bl	8000220 <memchr>
 800a734:	2800      	cmp	r0, #0
 800a736:	d037      	beq.n	800a7a8 <_vfiprintf_r+0x1f8>
 800a738:	4b26      	ldr	r3, [pc, #152]	; (800a7d4 <_vfiprintf_r+0x224>)
 800a73a:	bb1b      	cbnz	r3, 800a784 <_vfiprintf_r+0x1d4>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	3307      	adds	r3, #7
 800a740:	f023 0307 	bic.w	r3, r3, #7
 800a744:	3308      	adds	r3, #8
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74a:	444b      	add	r3, r9
 800a74c:	9309      	str	r3, [sp, #36]	; 0x24
 800a74e:	e750      	b.n	800a5f2 <_vfiprintf_r+0x42>
 800a750:	fb05 3202 	mla	r2, r5, r2, r3
 800a754:	2001      	movs	r0, #1
 800a756:	4688      	mov	r8, r1
 800a758:	e78a      	b.n	800a670 <_vfiprintf_r+0xc0>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f108 0801 	add.w	r8, r8, #1
 800a760:	9305      	str	r3, [sp, #20]
 800a762:	4619      	mov	r1, r3
 800a764:	250a      	movs	r5, #10
 800a766:	4640      	mov	r0, r8
 800a768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a76c:	3a30      	subs	r2, #48	; 0x30
 800a76e:	2a09      	cmp	r2, #9
 800a770:	d903      	bls.n	800a77a <_vfiprintf_r+0x1ca>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0c3      	beq.n	800a6fe <_vfiprintf_r+0x14e>
 800a776:	9105      	str	r1, [sp, #20]
 800a778:	e7c1      	b.n	800a6fe <_vfiprintf_r+0x14e>
 800a77a:	fb05 2101 	mla	r1, r5, r1, r2
 800a77e:	2301      	movs	r3, #1
 800a780:	4680      	mov	r8, r0
 800a782:	e7f0      	b.n	800a766 <_vfiprintf_r+0x1b6>
 800a784:	ab03      	add	r3, sp, #12
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	4622      	mov	r2, r4
 800a78a:	4b13      	ldr	r3, [pc, #76]	; (800a7d8 <_vfiprintf_r+0x228>)
 800a78c:	a904      	add	r1, sp, #16
 800a78e:	4630      	mov	r0, r6
 800a790:	f7fd fc84 	bl	800809c <_printf_float>
 800a794:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a798:	4681      	mov	r9, r0
 800a79a:	d1d5      	bne.n	800a748 <_vfiprintf_r+0x198>
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	065b      	lsls	r3, r3, #25
 800a7a0:	f53f af7e 	bmi.w	800a6a0 <_vfiprintf_r+0xf0>
 800a7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7a6:	e77d      	b.n	800a6a4 <_vfiprintf_r+0xf4>
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <_vfiprintf_r+0x228>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7fd ff28 	bl	8008608 <_printf_i>
 800a7b8:	e7ec      	b.n	800a794 <_vfiprintf_r+0x1e4>
 800a7ba:	bf00      	nop
 800a7bc:	0801f6a4 	.word	0x0801f6a4
 800a7c0:	0801f7e4 	.word	0x0801f7e4
 800a7c4:	0801f6c4 	.word	0x0801f6c4
 800a7c8:	0801f684 	.word	0x0801f684
 800a7cc:	0801f7ea 	.word	0x0801f7ea
 800a7d0:	0801f7ee 	.word	0x0801f7ee
 800a7d4:	0800809d 	.word	0x0800809d
 800a7d8:	0800a58b 	.word	0x0800a58b

0800a7dc <_putc_r>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	b118      	cbz	r0, 800a7ee <_putc_r+0x12>
 800a7e6:	6983      	ldr	r3, [r0, #24]
 800a7e8:	b90b      	cbnz	r3, 800a7ee <_putc_r+0x12>
 800a7ea:	f7ff f8c5 	bl	8009978 <__sinit>
 800a7ee:	4b13      	ldr	r3, [pc, #76]	; (800a83c <_putc_r+0x60>)
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	d112      	bne.n	800a81a <_putc_r+0x3e>
 800a7f4:	6874      	ldr	r4, [r6, #4]
 800a7f6:	68a3      	ldr	r3, [r4, #8]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	da16      	bge.n	800a82e <_putc_r+0x52>
 800a800:	69a2      	ldr	r2, [r4, #24]
 800a802:	4293      	cmp	r3, r2
 800a804:	db02      	blt.n	800a80c <_putc_r+0x30>
 800a806:	b2eb      	uxtb	r3, r5
 800a808:	2b0a      	cmp	r3, #10
 800a80a:	d110      	bne.n	800a82e <_putc_r+0x52>
 800a80c:	4622      	mov	r2, r4
 800a80e:	4629      	mov	r1, r5
 800a810:	4630      	mov	r0, r6
 800a812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a816:	f7fe b8b9 	b.w	800898c <__swbuf_r>
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <_putc_r+0x64>)
 800a81c:	429c      	cmp	r4, r3
 800a81e:	d101      	bne.n	800a824 <_putc_r+0x48>
 800a820:	68b4      	ldr	r4, [r6, #8]
 800a822:	e7e8      	b.n	800a7f6 <_putc_r+0x1a>
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <_putc_r+0x68>)
 800a826:	429c      	cmp	r4, r3
 800a828:	bf08      	it	eq
 800a82a:	68f4      	ldreq	r4, [r6, #12]
 800a82c:	e7e3      	b.n	800a7f6 <_putc_r+0x1a>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	6022      	str	r2, [r4, #0]
 800a834:	701d      	strb	r5, [r3, #0]
 800a836:	b2e8      	uxtb	r0, r5
 800a838:	bd70      	pop	{r4, r5, r6, pc}
 800a83a:	bf00      	nop
 800a83c:	0801f6a4 	.word	0x0801f6a4
 800a840:	0801f6c4 	.word	0x0801f6c4
 800a844:	0801f684 	.word	0x0801f684

0800a848 <_sbrk_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4c06      	ldr	r4, [pc, #24]	; (800a864 <_sbrk_r+0x1c>)
 800a84c:	2300      	movs	r3, #0
 800a84e:	4605      	mov	r5, r0
 800a850:	4608      	mov	r0, r1
 800a852:	6023      	str	r3, [r4, #0]
 800a854:	f7fd f8fc 	bl	8007a50 <_sbrk>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_sbrk_r+0x1a>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_sbrk_r+0x1a>
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	2000a278 	.word	0x2000a278

0800a868 <__sread>:
 800a868:	b510      	push	{r4, lr}
 800a86a:	460c      	mov	r4, r1
 800a86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a870:	f000 f8e8 	bl	800aa44 <_read_r>
 800a874:	2800      	cmp	r0, #0
 800a876:	bfab      	itete	ge
 800a878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a87a:	89a3      	ldrhlt	r3, [r4, #12]
 800a87c:	181b      	addge	r3, r3, r0
 800a87e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a882:	bfac      	ite	ge
 800a884:	6563      	strge	r3, [r4, #84]	; 0x54
 800a886:	81a3      	strhlt	r3, [r4, #12]
 800a888:	bd10      	pop	{r4, pc}

0800a88a <__swrite>:
 800a88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88e:	461f      	mov	r7, r3
 800a890:	898b      	ldrh	r3, [r1, #12]
 800a892:	05db      	lsls	r3, r3, #23
 800a894:	4605      	mov	r5, r0
 800a896:	460c      	mov	r4, r1
 800a898:	4616      	mov	r6, r2
 800a89a:	d505      	bpl.n	800a8a8 <__swrite+0x1e>
 800a89c:	2302      	movs	r3, #2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a4:	f000 f868 	bl	800a978 <_lseek_r>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8b2:	81a3      	strh	r3, [r4, #12]
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8be:	f000 b817 	b.w	800a8f0 <_write_r>

0800a8c2 <__sseek>:
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ca:	f000 f855 	bl	800a978 <_lseek_r>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	bf15      	itete	ne
 800a8d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8de:	81a3      	strheq	r3, [r4, #12]
 800a8e0:	bf18      	it	ne
 800a8e2:	81a3      	strhne	r3, [r4, #12]
 800a8e4:	bd10      	pop	{r4, pc}

0800a8e6 <__sclose>:
 800a8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ea:	f000 b813 	b.w	800a914 <_close_r>
	...

0800a8f0 <_write_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4c07      	ldr	r4, [pc, #28]	; (800a910 <_write_r+0x20>)
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	4608      	mov	r0, r1
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	6022      	str	r2, [r4, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7fd f855 	bl	80079ae <_write>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_write_r+0x1e>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_write_r+0x1e>
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	2000a278 	.word	0x2000a278

0800a914 <_close_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4c06      	ldr	r4, [pc, #24]	; (800a930 <_close_r+0x1c>)
 800a918:	2300      	movs	r3, #0
 800a91a:	4605      	mov	r5, r0
 800a91c:	4608      	mov	r0, r1
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	f7fd f861 	bl	80079e6 <_close>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_close_r+0x1a>
 800a928:	6823      	ldr	r3, [r4, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_close_r+0x1a>
 800a92c:	602b      	str	r3, [r5, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	2000a278 	.word	0x2000a278

0800a934 <_fstat_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4c07      	ldr	r4, [pc, #28]	; (800a954 <_fstat_r+0x20>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4605      	mov	r5, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	4611      	mov	r1, r2
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	f7fd f85c 	bl	80079fe <_fstat>
 800a946:	1c43      	adds	r3, r0, #1
 800a948:	d102      	bne.n	800a950 <_fstat_r+0x1c>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	b103      	cbz	r3, 800a950 <_fstat_r+0x1c>
 800a94e:	602b      	str	r3, [r5, #0]
 800a950:	bd38      	pop	{r3, r4, r5, pc}
 800a952:	bf00      	nop
 800a954:	2000a278 	.word	0x2000a278

0800a958 <_isatty_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4c06      	ldr	r4, [pc, #24]	; (800a974 <_isatty_r+0x1c>)
 800a95c:	2300      	movs	r3, #0
 800a95e:	4605      	mov	r5, r0
 800a960:	4608      	mov	r0, r1
 800a962:	6023      	str	r3, [r4, #0]
 800a964:	f7fd f85b 	bl	8007a1e <_isatty>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_isatty_r+0x1a>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_isatty_r+0x1a>
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	2000a278 	.word	0x2000a278

0800a978 <_lseek_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4c07      	ldr	r4, [pc, #28]	; (800a998 <_lseek_r+0x20>)
 800a97c:	4605      	mov	r5, r0
 800a97e:	4608      	mov	r0, r1
 800a980:	4611      	mov	r1, r2
 800a982:	2200      	movs	r2, #0
 800a984:	6022      	str	r2, [r4, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f7fd f854 	bl	8007a34 <_lseek>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_lseek_r+0x1e>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	b103      	cbz	r3, 800a996 <_lseek_r+0x1e>
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	2000a278 	.word	0x2000a278

0800a99c <__ascii_mbtowc>:
 800a99c:	b082      	sub	sp, #8
 800a99e:	b901      	cbnz	r1, 800a9a2 <__ascii_mbtowc+0x6>
 800a9a0:	a901      	add	r1, sp, #4
 800a9a2:	b142      	cbz	r2, 800a9b6 <__ascii_mbtowc+0x1a>
 800a9a4:	b14b      	cbz	r3, 800a9ba <__ascii_mbtowc+0x1e>
 800a9a6:	7813      	ldrb	r3, [r2, #0]
 800a9a8:	600b      	str	r3, [r1, #0]
 800a9aa:	7812      	ldrb	r2, [r2, #0]
 800a9ac:	1c10      	adds	r0, r2, #0
 800a9ae:	bf18      	it	ne
 800a9b0:	2001      	movne	r0, #1
 800a9b2:	b002      	add	sp, #8
 800a9b4:	4770      	bx	lr
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	e7fb      	b.n	800a9b2 <__ascii_mbtowc+0x16>
 800a9ba:	f06f 0001 	mvn.w	r0, #1
 800a9be:	e7f8      	b.n	800a9b2 <__ascii_mbtowc+0x16>

0800a9c0 <memmove>:
 800a9c0:	4288      	cmp	r0, r1
 800a9c2:	b510      	push	{r4, lr}
 800a9c4:	eb01 0302 	add.w	r3, r1, r2
 800a9c8:	d807      	bhi.n	800a9da <memmove+0x1a>
 800a9ca:	1e42      	subs	r2, r0, #1
 800a9cc:	4299      	cmp	r1, r3
 800a9ce:	d00a      	beq.n	800a9e6 <memmove+0x26>
 800a9d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a9d8:	e7f8      	b.n	800a9cc <memmove+0xc>
 800a9da:	4283      	cmp	r3, r0
 800a9dc:	d9f5      	bls.n	800a9ca <memmove+0xa>
 800a9de:	1881      	adds	r1, r0, r2
 800a9e0:	1ad2      	subs	r2, r2, r3
 800a9e2:	42d3      	cmn	r3, r2
 800a9e4:	d100      	bne.n	800a9e8 <memmove+0x28>
 800a9e6:	bd10      	pop	{r4, pc}
 800a9e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a9f0:	e7f7      	b.n	800a9e2 <memmove+0x22>

0800a9f2 <__malloc_lock>:
 800a9f2:	4770      	bx	lr

0800a9f4 <__malloc_unlock>:
 800a9f4:	4770      	bx	lr

0800a9f6 <_realloc_r>:
 800a9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	4614      	mov	r4, r2
 800a9fc:	460e      	mov	r6, r1
 800a9fe:	b921      	cbnz	r1, 800aa0a <_realloc_r+0x14>
 800aa00:	4611      	mov	r1, r2
 800aa02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa06:	f7ff bbfd 	b.w	800a204 <_malloc_r>
 800aa0a:	b922      	cbnz	r2, 800aa16 <_realloc_r+0x20>
 800aa0c:	f7ff fbac 	bl	800a168 <_free_r>
 800aa10:	4625      	mov	r5, r4
 800aa12:	4628      	mov	r0, r5
 800aa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa16:	f000 f834 	bl	800aa82 <_malloc_usable_size_r>
 800aa1a:	42a0      	cmp	r0, r4
 800aa1c:	d20f      	bcs.n	800aa3e <_realloc_r+0x48>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff fbef 	bl	800a204 <_malloc_r>
 800aa26:	4605      	mov	r5, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d0f2      	beq.n	800aa12 <_realloc_r+0x1c>
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4622      	mov	r2, r4
 800aa30:	f7ff f8a6 	bl	8009b80 <memcpy>
 800aa34:	4631      	mov	r1, r6
 800aa36:	4638      	mov	r0, r7
 800aa38:	f7ff fb96 	bl	800a168 <_free_r>
 800aa3c:	e7e9      	b.n	800aa12 <_realloc_r+0x1c>
 800aa3e:	4635      	mov	r5, r6
 800aa40:	e7e7      	b.n	800aa12 <_realloc_r+0x1c>
	...

0800aa44 <_read_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4c07      	ldr	r4, [pc, #28]	; (800aa64 <_read_r+0x20>)
 800aa48:	4605      	mov	r5, r0
 800aa4a:	4608      	mov	r0, r1
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	2200      	movs	r2, #0
 800aa50:	6022      	str	r2, [r4, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	f7fc ff8e 	bl	8007974 <_read>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_read_r+0x1e>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_read_r+0x1e>
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	2000a278 	.word	0x2000a278

0800aa68 <__ascii_wctomb>:
 800aa68:	b149      	cbz	r1, 800aa7e <__ascii_wctomb+0x16>
 800aa6a:	2aff      	cmp	r2, #255	; 0xff
 800aa6c:	bf85      	ittet	hi
 800aa6e:	238a      	movhi	r3, #138	; 0x8a
 800aa70:	6003      	strhi	r3, [r0, #0]
 800aa72:	700a      	strbls	r2, [r1, #0]
 800aa74:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa78:	bf98      	it	ls
 800aa7a:	2001      	movls	r0, #1
 800aa7c:	4770      	bx	lr
 800aa7e:	4608      	mov	r0, r1
 800aa80:	4770      	bx	lr

0800aa82 <_malloc_usable_size_r>:
 800aa82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa86:	1f18      	subs	r0, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	bfbc      	itt	lt
 800aa8c:	580b      	ldrlt	r3, [r1, r0]
 800aa8e:	18c0      	addlt	r0, r0, r3
 800aa90:	4770      	bx	lr
	...

0800aa94 <pow>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	ed2d 8b04 	vpush	{d8-d9}
 800aa9c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800ad70 <pow+0x2dc>
 800aaa0:	b08d      	sub	sp, #52	; 0x34
 800aaa2:	ec57 6b10 	vmov	r6, r7, d0
 800aaa6:	ec55 4b11 	vmov	r4, r5, d1
 800aaaa:	f000 f9c1 	bl	800ae30 <__ieee754_pow>
 800aaae:	f999 3000 	ldrsb.w	r3, [r9]
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	eeb0 8a40 	vmov.f32	s16, s0
 800aaba:	eef0 8a60 	vmov.f32	s17, s1
 800aabe:	46c8      	mov	r8, r9
 800aac0:	d05f      	beq.n	800ab82 <pow+0xee>
 800aac2:	4622      	mov	r2, r4
 800aac4:	462b      	mov	r3, r5
 800aac6:	4620      	mov	r0, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	f7f6 f84f 	bl	8000b6c <__aeabi_dcmpun>
 800aace:	4683      	mov	fp, r0
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d156      	bne.n	800ab82 <pow+0xee>
 800aad4:	4632      	mov	r2, r6
 800aad6:	463b      	mov	r3, r7
 800aad8:	4630      	mov	r0, r6
 800aada:	4639      	mov	r1, r7
 800aadc:	f7f6 f846 	bl	8000b6c <__aeabi_dcmpun>
 800aae0:	9001      	str	r0, [sp, #4]
 800aae2:	b1e8      	cbz	r0, 800ab20 <pow+0x8c>
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	4620      	mov	r0, r4
 800aaea:	4629      	mov	r1, r5
 800aaec:	f7f6 f80c 	bl	8000b08 <__aeabi_dcmpeq>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d046      	beq.n	800ab82 <pow+0xee>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	9302      	str	r3, [sp, #8]
 800aaf8:	4b96      	ldr	r3, [pc, #600]	; (800ad54 <pow+0x2c0>)
 800aafa:	9303      	str	r3, [sp, #12]
 800aafc:	4b96      	ldr	r3, [pc, #600]	; (800ad58 <pow+0x2c4>)
 800aafe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ab02:	2200      	movs	r2, #0
 800ab04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab08:	9b00      	ldr	r3, [sp, #0]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ab14:	d033      	beq.n	800ab7e <pow+0xea>
 800ab16:	a802      	add	r0, sp, #8
 800ab18:	f000 ffe1 	bl	800bade <matherr>
 800ab1c:	bb48      	cbnz	r0, 800ab72 <pow+0xde>
 800ab1e:	e05d      	b.n	800abdc <pow+0x148>
 800ab20:	f04f 0a00 	mov.w	sl, #0
 800ab24:	f04f 0b00 	mov.w	fp, #0
 800ab28:	4652      	mov	r2, sl
 800ab2a:	465b      	mov	r3, fp
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 ffea 	bl	8000b08 <__aeabi_dcmpeq>
 800ab34:	ec4b ab19 	vmov	d9, sl, fp
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d054      	beq.n	800abe6 <pow+0x152>
 800ab3c:	4652      	mov	r2, sl
 800ab3e:	465b      	mov	r3, fp
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f5 ffe0 	bl	8000b08 <__aeabi_dcmpeq>
 800ab48:	4680      	mov	r8, r0
 800ab4a:	b318      	cbz	r0, 800ab94 <pow+0x100>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	9302      	str	r3, [sp, #8]
 800ab50:	4b80      	ldr	r3, [pc, #512]	; (800ad54 <pow+0x2c0>)
 800ab52:	9303      	str	r3, [sp, #12]
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	930a      	str	r3, [sp, #40]	; 0x28
 800ab58:	9b00      	ldr	r3, [sp, #0]
 800ab5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ab62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0d5      	beq.n	800ab16 <pow+0x82>
 800ab6a:	4b7b      	ldr	r3, [pc, #492]	; (800ad58 <pow+0x2c4>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab74:	b11b      	cbz	r3, 800ab7e <pow+0xea>
 800ab76:	f7fd f9cb 	bl	8007f10 <__errno>
 800ab7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	ed9d 8b08 	vldr	d8, [sp, #32]
 800ab82:	eeb0 0a48 	vmov.f32	s0, s16
 800ab86:	eef0 0a68 	vmov.f32	s1, s17
 800ab8a:	b00d      	add	sp, #52	; 0x34
 800ab8c:	ecbd 8b04 	vpop	{d8-d9}
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	ec45 4b10 	vmov	d0, r4, r5
 800ab98:	f000 ff99 	bl	800bace <finite>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d0f0      	beq.n	800ab82 <pow+0xee>
 800aba0:	4652      	mov	r2, sl
 800aba2:	465b      	mov	r3, fp
 800aba4:	4620      	mov	r0, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	f7f5 ffb8 	bl	8000b1c <__aeabi_dcmplt>
 800abac:	2800      	cmp	r0, #0
 800abae:	d0e8      	beq.n	800ab82 <pow+0xee>
 800abb0:	2301      	movs	r3, #1
 800abb2:	9302      	str	r3, [sp, #8]
 800abb4:	4b67      	ldr	r3, [pc, #412]	; (800ad54 <pow+0x2c0>)
 800abb6:	9303      	str	r3, [sp, #12]
 800abb8:	f999 3000 	ldrsb.w	r3, [r9]
 800abbc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800abc0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800abc4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800abc8:	b913      	cbnz	r3, 800abd0 <pow+0x13c>
 800abca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800abce:	e7a2      	b.n	800ab16 <pow+0x82>
 800abd0:	4962      	ldr	r1, [pc, #392]	; (800ad5c <pow+0x2c8>)
 800abd2:	2000      	movs	r0, #0
 800abd4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d19c      	bne.n	800ab16 <pow+0x82>
 800abdc:	f7fd f998 	bl	8007f10 <__errno>
 800abe0:	2321      	movs	r3, #33	; 0x21
 800abe2:	6003      	str	r3, [r0, #0]
 800abe4:	e7c5      	b.n	800ab72 <pow+0xde>
 800abe6:	eeb0 0a48 	vmov.f32	s0, s16
 800abea:	eef0 0a68 	vmov.f32	s1, s17
 800abee:	f000 ff6e 	bl	800bace <finite>
 800abf2:	9000      	str	r0, [sp, #0]
 800abf4:	2800      	cmp	r0, #0
 800abf6:	f040 8081 	bne.w	800acfc <pow+0x268>
 800abfa:	ec47 6b10 	vmov	d0, r6, r7
 800abfe:	f000 ff66 	bl	800bace <finite>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d07a      	beq.n	800acfc <pow+0x268>
 800ac06:	ec45 4b10 	vmov	d0, r4, r5
 800ac0a:	f000 ff60 	bl	800bace <finite>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d074      	beq.n	800acfc <pow+0x268>
 800ac12:	ec53 2b18 	vmov	r2, r3, d8
 800ac16:	ee18 0a10 	vmov	r0, s16
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f7f5 ffa6 	bl	8000b6c <__aeabi_dcmpun>
 800ac20:	f999 9000 	ldrsb.w	r9, [r9]
 800ac24:	4b4b      	ldr	r3, [pc, #300]	; (800ad54 <pow+0x2c0>)
 800ac26:	b1b0      	cbz	r0, 800ac56 <pow+0x1c2>
 800ac28:	2201      	movs	r2, #1
 800ac2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	930a      	str	r3, [sp, #40]	; 0x28
 800ac32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ac3a:	f1b9 0f00 	cmp.w	r9, #0
 800ac3e:	d0c4      	beq.n	800abca <pow+0x136>
 800ac40:	4652      	mov	r2, sl
 800ac42:	465b      	mov	r3, fp
 800ac44:	4650      	mov	r0, sl
 800ac46:	4659      	mov	r1, fp
 800ac48:	f7f5 fe20 	bl	800088c <__aeabi_ddiv>
 800ac4c:	f1b9 0f02 	cmp.w	r9, #2
 800ac50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac54:	e7c1      	b.n	800abda <pow+0x146>
 800ac56:	2203      	movs	r2, #3
 800ac58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac5c:	900a      	str	r0, [sp, #40]	; 0x28
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4620      	mov	r0, r4
 800ac62:	2200      	movs	r2, #0
 800ac64:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <pow+0x2cc>)
 800ac66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ac6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac6e:	f7f5 fce3 	bl	8000638 <__aeabi_dmul>
 800ac72:	4604      	mov	r4, r0
 800ac74:	460d      	mov	r5, r1
 800ac76:	f1b9 0f00 	cmp.w	r9, #0
 800ac7a:	d124      	bne.n	800acc6 <pow+0x232>
 800ac7c:	4b39      	ldr	r3, [pc, #228]	; (800ad64 <pow+0x2d0>)
 800ac7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ac82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac86:	4630      	mov	r0, r6
 800ac88:	4652      	mov	r2, sl
 800ac8a:	465b      	mov	r3, fp
 800ac8c:	4639      	mov	r1, r7
 800ac8e:	f7f5 ff45 	bl	8000b1c <__aeabi_dcmplt>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d056      	beq.n	800ad44 <pow+0x2b0>
 800ac96:	ec45 4b10 	vmov	d0, r4, r5
 800ac9a:	f000 ff2d 	bl	800baf8 <rint>
 800ac9e:	4622      	mov	r2, r4
 800aca0:	462b      	mov	r3, r5
 800aca2:	ec51 0b10 	vmov	r0, r1, d0
 800aca6:	f7f5 ff2f 	bl	8000b08 <__aeabi_dcmpeq>
 800acaa:	b920      	cbnz	r0, 800acb6 <pow+0x222>
 800acac:	4b2e      	ldr	r3, [pc, #184]	; (800ad68 <pow+0x2d4>)
 800acae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800acb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acb6:	f998 3000 	ldrsb.w	r3, [r8]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d142      	bne.n	800ad44 <pow+0x2b0>
 800acbe:	f7fd f927 	bl	8007f10 <__errno>
 800acc2:	2322      	movs	r3, #34	; 0x22
 800acc4:	e78d      	b.n	800abe2 <pow+0x14e>
 800acc6:	4b29      	ldr	r3, [pc, #164]	; (800ad6c <pow+0x2d8>)
 800acc8:	2200      	movs	r2, #0
 800acca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acce:	4630      	mov	r0, r6
 800acd0:	4652      	mov	r2, sl
 800acd2:	465b      	mov	r3, fp
 800acd4:	4639      	mov	r1, r7
 800acd6:	f7f5 ff21 	bl	8000b1c <__aeabi_dcmplt>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d0eb      	beq.n	800acb6 <pow+0x222>
 800acde:	ec45 4b10 	vmov	d0, r4, r5
 800ace2:	f000 ff09 	bl	800baf8 <rint>
 800ace6:	4622      	mov	r2, r4
 800ace8:	462b      	mov	r3, r5
 800acea:	ec51 0b10 	vmov	r0, r1, d0
 800acee:	f7f5 ff0b 	bl	8000b08 <__aeabi_dcmpeq>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d1df      	bne.n	800acb6 <pow+0x222>
 800acf6:	2200      	movs	r2, #0
 800acf8:	4b18      	ldr	r3, [pc, #96]	; (800ad5c <pow+0x2c8>)
 800acfa:	e7da      	b.n	800acb2 <pow+0x21e>
 800acfc:	2200      	movs	r2, #0
 800acfe:	2300      	movs	r3, #0
 800ad00:	ec51 0b18 	vmov	r0, r1, d8
 800ad04:	f7f5 ff00 	bl	8000b08 <__aeabi_dcmpeq>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f43f af3a 	beq.w	800ab82 <pow+0xee>
 800ad0e:	ec47 6b10 	vmov	d0, r6, r7
 800ad12:	f000 fedc 	bl	800bace <finite>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f43f af33 	beq.w	800ab82 <pow+0xee>
 800ad1c:	ec45 4b10 	vmov	d0, r4, r5
 800ad20:	f000 fed5 	bl	800bace <finite>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f43f af2c 	beq.w	800ab82 <pow+0xee>
 800ad2a:	2304      	movs	r3, #4
 800ad2c:	9302      	str	r3, [sp, #8]
 800ad2e:	4b09      	ldr	r3, [pc, #36]	; (800ad54 <pow+0x2c0>)
 800ad30:	9303      	str	r3, [sp, #12]
 800ad32:	2300      	movs	r3, #0
 800ad34:	930a      	str	r3, [sp, #40]	; 0x28
 800ad36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ad3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ad3e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800ad42:	e7b8      	b.n	800acb6 <pow+0x222>
 800ad44:	a802      	add	r0, sp, #8
 800ad46:	f000 feca 	bl	800bade <matherr>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f47f af11 	bne.w	800ab72 <pow+0xde>
 800ad50:	e7b5      	b.n	800acbe <pow+0x22a>
 800ad52:	bf00      	nop
 800ad54:	0801f900 	.word	0x0801f900
 800ad58:	3ff00000 	.word	0x3ff00000
 800ad5c:	fff00000 	.word	0xfff00000
 800ad60:	3fe00000 	.word	0x3fe00000
 800ad64:	47efffff 	.word	0x47efffff
 800ad68:	c7efffff 	.word	0xc7efffff
 800ad6c:	7ff00000 	.word	0x7ff00000
 800ad70:	20000200 	.word	0x20000200

0800ad74 <fmodf>:
 800ad74:	b5d0      	push	{r4, r6, r7, lr}
 800ad76:	ed2d 8b02 	vpush	{d8}
 800ad7a:	b08a      	sub	sp, #40	; 0x28
 800ad7c:	eef0 8a40 	vmov.f32	s17, s0
 800ad80:	eeb0 8a60 	vmov.f32	s16, s1
 800ad84:	f000 fe12 	bl	800b9ac <__ieee754_fmodf>
 800ad88:	4b26      	ldr	r3, [pc, #152]	; (800ae24 <fmodf+0xb0>)
 800ad8a:	f993 4000 	ldrsb.w	r4, [r3]
 800ad8e:	1c63      	adds	r3, r4, #1
 800ad90:	d035      	beq.n	800adfe <fmodf+0x8a>
 800ad92:	eeb4 8a48 	vcmp.f32	s16, s16
 800ad96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9a:	d630      	bvs.n	800adfe <fmodf+0x8a>
 800ad9c:	eef4 8a68 	vcmp.f32	s17, s17
 800ada0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada4:	d62b      	bvs.n	800adfe <fmodf+0x8a>
 800ada6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800adaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adae:	d126      	bne.n	800adfe <fmodf+0x8a>
 800adb0:	2301      	movs	r3, #1
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <fmodf+0xb4>)
 800adb6:	9301      	str	r3, [sp, #4]
 800adb8:	ee18 0a90 	vmov	r0, s17
 800adbc:	2300      	movs	r3, #0
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	f7f5 fbe2 	bl	8000588 <__aeabi_f2d>
 800adc4:	4606      	mov	r6, r0
 800adc6:	460f      	mov	r7, r1
 800adc8:	ee18 0a10 	vmov	r0, s16
 800adcc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800add0:	f7f5 fbda 	bl	8000588 <__aeabi_f2d>
 800add4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800add8:	b9ac      	cbnz	r4, 800ae06 <fmodf+0x92>
 800adda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800adde:	4668      	mov	r0, sp
 800ade0:	f000 fe7d 	bl	800bade <matherr>
 800ade4:	b1c8      	cbz	r0, 800ae1a <fmodf+0xa6>
 800ade6:	9b08      	ldr	r3, [sp, #32]
 800ade8:	b11b      	cbz	r3, 800adf2 <fmodf+0x7e>
 800adea:	f7fd f891 	bl	8007f10 <__errno>
 800adee:	9b08      	ldr	r3, [sp, #32]
 800adf0:	6003      	str	r3, [r0, #0]
 800adf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adf6:	f7f5 fef7 	bl	8000be8 <__aeabi_d2f>
 800adfa:	ee00 0a10 	vmov	s0, r0
 800adfe:	b00a      	add	sp, #40	; 0x28
 800ae00:	ecbd 8b02 	vpop	{d8}
 800ae04:	bdd0      	pop	{r4, r6, r7, pc}
 800ae06:	2200      	movs	r2, #0
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f7f5 fd3d 	bl	800088c <__aeabi_ddiv>
 800ae12:	2c02      	cmp	r4, #2
 800ae14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae18:	d1e1      	bne.n	800adde <fmodf+0x6a>
 800ae1a:	f7fd f879 	bl	8007f10 <__errno>
 800ae1e:	2321      	movs	r3, #33	; 0x21
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	e7e0      	b.n	800ade6 <fmodf+0x72>
 800ae24:	20000200 	.word	0x20000200
 800ae28:	0801f904 	.word	0x0801f904
 800ae2c:	00000000 	.word	0x00000000

0800ae30 <__ieee754_pow>:
 800ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	b091      	sub	sp, #68	; 0x44
 800ae36:	ed8d 1b00 	vstr	d1, [sp]
 800ae3a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ae3e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ae42:	ea58 0302 	orrs.w	r3, r8, r2
 800ae46:	ec57 6b10 	vmov	r6, r7, d0
 800ae4a:	f000 84be 	beq.w	800b7ca <__ieee754_pow+0x99a>
 800ae4e:	4b7a      	ldr	r3, [pc, #488]	; (800b038 <__ieee754_pow+0x208>)
 800ae50:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ae54:	429c      	cmp	r4, r3
 800ae56:	463d      	mov	r5, r7
 800ae58:	ee10 aa10 	vmov	sl, s0
 800ae5c:	dc09      	bgt.n	800ae72 <__ieee754_pow+0x42>
 800ae5e:	d103      	bne.n	800ae68 <__ieee754_pow+0x38>
 800ae60:	b93e      	cbnz	r6, 800ae72 <__ieee754_pow+0x42>
 800ae62:	45a0      	cmp	r8, r4
 800ae64:	dc0d      	bgt.n	800ae82 <__ieee754_pow+0x52>
 800ae66:	e001      	b.n	800ae6c <__ieee754_pow+0x3c>
 800ae68:	4598      	cmp	r8, r3
 800ae6a:	dc02      	bgt.n	800ae72 <__ieee754_pow+0x42>
 800ae6c:	4598      	cmp	r8, r3
 800ae6e:	d10e      	bne.n	800ae8e <__ieee754_pow+0x5e>
 800ae70:	b16a      	cbz	r2, 800ae8e <__ieee754_pow+0x5e>
 800ae72:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ae76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae7a:	ea54 030a 	orrs.w	r3, r4, sl
 800ae7e:	f000 84a4 	beq.w	800b7ca <__ieee754_pow+0x99a>
 800ae82:	486e      	ldr	r0, [pc, #440]	; (800b03c <__ieee754_pow+0x20c>)
 800ae84:	b011      	add	sp, #68	; 0x44
 800ae86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8a:	f000 be2d 	b.w	800bae8 <nan>
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	da53      	bge.n	800af3a <__ieee754_pow+0x10a>
 800ae92:	4b6b      	ldr	r3, [pc, #428]	; (800b040 <__ieee754_pow+0x210>)
 800ae94:	4598      	cmp	r8, r3
 800ae96:	dc4d      	bgt.n	800af34 <__ieee754_pow+0x104>
 800ae98:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ae9c:	4598      	cmp	r8, r3
 800ae9e:	dd4c      	ble.n	800af3a <__ieee754_pow+0x10a>
 800aea0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aea4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aea8:	2b14      	cmp	r3, #20
 800aeaa:	dd26      	ble.n	800aefa <__ieee754_pow+0xca>
 800aeac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aeb0:	fa22 f103 	lsr.w	r1, r2, r3
 800aeb4:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d13e      	bne.n	800af3a <__ieee754_pow+0x10a>
 800aebc:	f001 0101 	and.w	r1, r1, #1
 800aec0:	f1c1 0b02 	rsb	fp, r1, #2
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	d15b      	bne.n	800af80 <__ieee754_pow+0x150>
 800aec8:	4b5b      	ldr	r3, [pc, #364]	; (800b038 <__ieee754_pow+0x208>)
 800aeca:	4598      	cmp	r8, r3
 800aecc:	d124      	bne.n	800af18 <__ieee754_pow+0xe8>
 800aece:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aed2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aed6:	ea53 030a 	orrs.w	r3, r3, sl
 800aeda:	f000 8476 	beq.w	800b7ca <__ieee754_pow+0x99a>
 800aede:	4b59      	ldr	r3, [pc, #356]	; (800b044 <__ieee754_pow+0x214>)
 800aee0:	429c      	cmp	r4, r3
 800aee2:	dd2d      	ble.n	800af40 <__ieee754_pow+0x110>
 800aee4:	f1b9 0f00 	cmp.w	r9, #0
 800aee8:	f280 8473 	bge.w	800b7d2 <__ieee754_pow+0x9a2>
 800aeec:	2000      	movs	r0, #0
 800aeee:	2100      	movs	r1, #0
 800aef0:	ec41 0b10 	vmov	d0, r0, r1
 800aef4:	b011      	add	sp, #68	; 0x44
 800aef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefa:	2a00      	cmp	r2, #0
 800aefc:	d13e      	bne.n	800af7c <__ieee754_pow+0x14c>
 800aefe:	f1c3 0314 	rsb	r3, r3, #20
 800af02:	fa48 f103 	asr.w	r1, r8, r3
 800af06:	fa01 f303 	lsl.w	r3, r1, r3
 800af0a:	4543      	cmp	r3, r8
 800af0c:	f040 8469 	bne.w	800b7e2 <__ieee754_pow+0x9b2>
 800af10:	f001 0101 	and.w	r1, r1, #1
 800af14:	f1c1 0b02 	rsb	fp, r1, #2
 800af18:	4b4b      	ldr	r3, [pc, #300]	; (800b048 <__ieee754_pow+0x218>)
 800af1a:	4598      	cmp	r8, r3
 800af1c:	d118      	bne.n	800af50 <__ieee754_pow+0x120>
 800af1e:	f1b9 0f00 	cmp.w	r9, #0
 800af22:	f280 845a 	bge.w	800b7da <__ieee754_pow+0x9aa>
 800af26:	4948      	ldr	r1, [pc, #288]	; (800b048 <__ieee754_pow+0x218>)
 800af28:	4632      	mov	r2, r6
 800af2a:	463b      	mov	r3, r7
 800af2c:	2000      	movs	r0, #0
 800af2e:	f7f5 fcad 	bl	800088c <__aeabi_ddiv>
 800af32:	e7dd      	b.n	800aef0 <__ieee754_pow+0xc0>
 800af34:	f04f 0b02 	mov.w	fp, #2
 800af38:	e7c4      	b.n	800aec4 <__ieee754_pow+0x94>
 800af3a:	f04f 0b00 	mov.w	fp, #0
 800af3e:	e7c1      	b.n	800aec4 <__ieee754_pow+0x94>
 800af40:	f1b9 0f00 	cmp.w	r9, #0
 800af44:	dad2      	bge.n	800aeec <__ieee754_pow+0xbc>
 800af46:	e9dd 0300 	ldrd	r0, r3, [sp]
 800af4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800af4e:	e7cf      	b.n	800aef0 <__ieee754_pow+0xc0>
 800af50:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800af54:	d106      	bne.n	800af64 <__ieee754_pow+0x134>
 800af56:	4632      	mov	r2, r6
 800af58:	463b      	mov	r3, r7
 800af5a:	4610      	mov	r0, r2
 800af5c:	4619      	mov	r1, r3
 800af5e:	f7f5 fb6b 	bl	8000638 <__aeabi_dmul>
 800af62:	e7c5      	b.n	800aef0 <__ieee754_pow+0xc0>
 800af64:	4b39      	ldr	r3, [pc, #228]	; (800b04c <__ieee754_pow+0x21c>)
 800af66:	4599      	cmp	r9, r3
 800af68:	d10a      	bne.n	800af80 <__ieee754_pow+0x150>
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	db08      	blt.n	800af80 <__ieee754_pow+0x150>
 800af6e:	ec47 6b10 	vmov	d0, r6, r7
 800af72:	b011      	add	sp, #68	; 0x44
 800af74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	f000 bc68 	b.w	800b84c <__ieee754_sqrt>
 800af7c:	f04f 0b00 	mov.w	fp, #0
 800af80:	ec47 6b10 	vmov	d0, r6, r7
 800af84:	f000 fd9a 	bl	800babc <fabs>
 800af88:	ec51 0b10 	vmov	r0, r1, d0
 800af8c:	f1ba 0f00 	cmp.w	sl, #0
 800af90:	d127      	bne.n	800afe2 <__ieee754_pow+0x1b2>
 800af92:	b124      	cbz	r4, 800af9e <__ieee754_pow+0x16e>
 800af94:	4b2c      	ldr	r3, [pc, #176]	; (800b048 <__ieee754_pow+0x218>)
 800af96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d121      	bne.n	800afe2 <__ieee754_pow+0x1b2>
 800af9e:	f1b9 0f00 	cmp.w	r9, #0
 800afa2:	da05      	bge.n	800afb0 <__ieee754_pow+0x180>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	2000      	movs	r0, #0
 800afaa:	4927      	ldr	r1, [pc, #156]	; (800b048 <__ieee754_pow+0x218>)
 800afac:	f7f5 fc6e 	bl	800088c <__aeabi_ddiv>
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	da9d      	bge.n	800aef0 <__ieee754_pow+0xc0>
 800afb4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800afb8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800afbc:	ea54 030b 	orrs.w	r3, r4, fp
 800afc0:	d108      	bne.n	800afd4 <__ieee754_pow+0x1a4>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	4610      	mov	r0, r2
 800afc8:	4619      	mov	r1, r3
 800afca:	f7f5 f97d 	bl	80002c8 <__aeabi_dsub>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	e7ac      	b.n	800af2e <__ieee754_pow+0xfe>
 800afd4:	f1bb 0f01 	cmp.w	fp, #1
 800afd8:	d18a      	bne.n	800aef0 <__ieee754_pow+0xc0>
 800afda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afde:	4619      	mov	r1, r3
 800afe0:	e786      	b.n	800aef0 <__ieee754_pow+0xc0>
 800afe2:	0fed      	lsrs	r5, r5, #31
 800afe4:	1e6b      	subs	r3, r5, #1
 800afe6:	930d      	str	r3, [sp, #52]	; 0x34
 800afe8:	ea5b 0303 	orrs.w	r3, fp, r3
 800afec:	d102      	bne.n	800aff4 <__ieee754_pow+0x1c4>
 800afee:	4632      	mov	r2, r6
 800aff0:	463b      	mov	r3, r7
 800aff2:	e7e8      	b.n	800afc6 <__ieee754_pow+0x196>
 800aff4:	4b16      	ldr	r3, [pc, #88]	; (800b050 <__ieee754_pow+0x220>)
 800aff6:	4598      	cmp	r8, r3
 800aff8:	f340 80fe 	ble.w	800b1f8 <__ieee754_pow+0x3c8>
 800affc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b000:	4598      	cmp	r8, r3
 800b002:	dd0a      	ble.n	800b01a <__ieee754_pow+0x1ea>
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <__ieee754_pow+0x214>)
 800b006:	429c      	cmp	r4, r3
 800b008:	dc0d      	bgt.n	800b026 <__ieee754_pow+0x1f6>
 800b00a:	f1b9 0f00 	cmp.w	r9, #0
 800b00e:	f6bf af6d 	bge.w	800aeec <__ieee754_pow+0xbc>
 800b012:	a307      	add	r3, pc, #28	; (adr r3, 800b030 <__ieee754_pow+0x200>)
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	e79f      	b.n	800af5a <__ieee754_pow+0x12a>
 800b01a:	4b0e      	ldr	r3, [pc, #56]	; (800b054 <__ieee754_pow+0x224>)
 800b01c:	429c      	cmp	r4, r3
 800b01e:	ddf4      	ble.n	800b00a <__ieee754_pow+0x1da>
 800b020:	4b09      	ldr	r3, [pc, #36]	; (800b048 <__ieee754_pow+0x218>)
 800b022:	429c      	cmp	r4, r3
 800b024:	dd18      	ble.n	800b058 <__ieee754_pow+0x228>
 800b026:	f1b9 0f00 	cmp.w	r9, #0
 800b02a:	dcf2      	bgt.n	800b012 <__ieee754_pow+0x1e2>
 800b02c:	e75e      	b.n	800aeec <__ieee754_pow+0xbc>
 800b02e:	bf00      	nop
 800b030:	8800759c 	.word	0x8800759c
 800b034:	7e37e43c 	.word	0x7e37e43c
 800b038:	7ff00000 	.word	0x7ff00000
 800b03c:	0801f7e9 	.word	0x0801f7e9
 800b040:	433fffff 	.word	0x433fffff
 800b044:	3fefffff 	.word	0x3fefffff
 800b048:	3ff00000 	.word	0x3ff00000
 800b04c:	3fe00000 	.word	0x3fe00000
 800b050:	41e00000 	.word	0x41e00000
 800b054:	3feffffe 	.word	0x3feffffe
 800b058:	2200      	movs	r2, #0
 800b05a:	4b63      	ldr	r3, [pc, #396]	; (800b1e8 <__ieee754_pow+0x3b8>)
 800b05c:	f7f5 f934 	bl	80002c8 <__aeabi_dsub>
 800b060:	a355      	add	r3, pc, #340	; (adr r3, 800b1b8 <__ieee754_pow+0x388>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	4604      	mov	r4, r0
 800b068:	460d      	mov	r5, r1
 800b06a:	f7f5 fae5 	bl	8000638 <__aeabi_dmul>
 800b06e:	a354      	add	r3, pc, #336	; (adr r3, 800b1c0 <__ieee754_pow+0x390>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	4606      	mov	r6, r0
 800b076:	460f      	mov	r7, r1
 800b078:	4620      	mov	r0, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7f5 fadc 	bl	8000638 <__aeabi_dmul>
 800b080:	2200      	movs	r2, #0
 800b082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b086:	4b59      	ldr	r3, [pc, #356]	; (800b1ec <__ieee754_pow+0x3bc>)
 800b088:	4620      	mov	r0, r4
 800b08a:	4629      	mov	r1, r5
 800b08c:	f7f5 fad4 	bl	8000638 <__aeabi_dmul>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	a14c      	add	r1, pc, #304	; (adr r1, 800b1c8 <__ieee754_pow+0x398>)
 800b096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b09a:	f7f5 f915 	bl	80002c8 <__aeabi_dsub>
 800b09e:	4622      	mov	r2, r4
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	f7f5 fac9 	bl	8000638 <__aeabi_dmul>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	4950      	ldr	r1, [pc, #320]	; (800b1f0 <__ieee754_pow+0x3c0>)
 800b0ae:	f7f5 f90b 	bl	80002c8 <__aeabi_dsub>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	462b      	mov	r3, r5
 800b0b6:	4680      	mov	r8, r0
 800b0b8:	4689      	mov	r9, r1
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	4629      	mov	r1, r5
 800b0be:	f7f5 fabb 	bl	8000638 <__aeabi_dmul>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	f7f5 fab5 	bl	8000638 <__aeabi_dmul>
 800b0ce:	a340      	add	r3, pc, #256	; (adr r3, 800b1d0 <__ieee754_pow+0x3a0>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f7f5 fab0 	bl	8000638 <__aeabi_dmul>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e0:	f7f5 f8f2 	bl	80002c8 <__aeabi_dsub>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	4639      	mov	r1, r7
 800b0f0:	f7f5 f8ec 	bl	80002cc <__adddf3>
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0fa:	4632      	mov	r2, r6
 800b0fc:	463b      	mov	r3, r7
 800b0fe:	f7f5 f8e3 	bl	80002c8 <__aeabi_dsub>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 f8dd 	bl	80002c8 <__aeabi_dsub>
 800b10e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b110:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b114:	4313      	orrs	r3, r2
 800b116:	4606      	mov	r6, r0
 800b118:	460f      	mov	r7, r1
 800b11a:	f040 81eb 	bne.w	800b4f4 <__ieee754_pow+0x6c4>
 800b11e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b1d8 <__ieee754_pow+0x3a8>
 800b122:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b126:	2400      	movs	r4, #0
 800b128:	4622      	mov	r2, r4
 800b12a:	462b      	mov	r3, r5
 800b12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b130:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b134:	f7f5 f8c8 	bl	80002c8 <__aeabi_dsub>
 800b138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b13c:	f7f5 fa7c 	bl	8000638 <__aeabi_dmul>
 800b140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b144:	4680      	mov	r8, r0
 800b146:	4689      	mov	r9, r1
 800b148:	4630      	mov	r0, r6
 800b14a:	4639      	mov	r1, r7
 800b14c:	f7f5 fa74 	bl	8000638 <__aeabi_dmul>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4640      	mov	r0, r8
 800b156:	4649      	mov	r1, r9
 800b158:	f7f5 f8b8 	bl	80002cc <__adddf3>
 800b15c:	4622      	mov	r2, r4
 800b15e:	462b      	mov	r3, r5
 800b160:	4680      	mov	r8, r0
 800b162:	4689      	mov	r9, r1
 800b164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b168:	f7f5 fa66 	bl	8000638 <__aeabi_dmul>
 800b16c:	460b      	mov	r3, r1
 800b16e:	4604      	mov	r4, r0
 800b170:	460d      	mov	r5, r1
 800b172:	4602      	mov	r2, r0
 800b174:	4649      	mov	r1, r9
 800b176:	4640      	mov	r0, r8
 800b178:	e9cd 4500 	strd	r4, r5, [sp]
 800b17c:	f7f5 f8a6 	bl	80002cc <__adddf3>
 800b180:	4b1c      	ldr	r3, [pc, #112]	; (800b1f4 <__ieee754_pow+0x3c4>)
 800b182:	4299      	cmp	r1, r3
 800b184:	4606      	mov	r6, r0
 800b186:	460f      	mov	r7, r1
 800b188:	468b      	mov	fp, r1
 800b18a:	f340 82f7 	ble.w	800b77c <__ieee754_pow+0x94c>
 800b18e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b192:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b196:	4303      	orrs	r3, r0
 800b198:	f000 81ea 	beq.w	800b570 <__ieee754_pow+0x740>
 800b19c:	a310      	add	r3, pc, #64	; (adr r3, 800b1e0 <__ieee754_pow+0x3b0>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a6:	f7f5 fa47 	bl	8000638 <__aeabi_dmul>
 800b1aa:	a30d      	add	r3, pc, #52	; (adr r3, 800b1e0 <__ieee754_pow+0x3b0>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	e6d5      	b.n	800af5e <__ieee754_pow+0x12e>
 800b1b2:	bf00      	nop
 800b1b4:	f3af 8000 	nop.w
 800b1b8:	60000000 	.word	0x60000000
 800b1bc:	3ff71547 	.word	0x3ff71547
 800b1c0:	f85ddf44 	.word	0xf85ddf44
 800b1c4:	3e54ae0b 	.word	0x3e54ae0b
 800b1c8:	55555555 	.word	0x55555555
 800b1cc:	3fd55555 	.word	0x3fd55555
 800b1d0:	652b82fe 	.word	0x652b82fe
 800b1d4:	3ff71547 	.word	0x3ff71547
 800b1d8:	00000000 	.word	0x00000000
 800b1dc:	bff00000 	.word	0xbff00000
 800b1e0:	8800759c 	.word	0x8800759c
 800b1e4:	7e37e43c 	.word	0x7e37e43c
 800b1e8:	3ff00000 	.word	0x3ff00000
 800b1ec:	3fd00000 	.word	0x3fd00000
 800b1f0:	3fe00000 	.word	0x3fe00000
 800b1f4:	408fffff 	.word	0x408fffff
 800b1f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	da05      	bge.n	800b20e <__ieee754_pow+0x3de>
 800b202:	4bd3      	ldr	r3, [pc, #844]	; (800b550 <__ieee754_pow+0x720>)
 800b204:	f7f5 fa18 	bl	8000638 <__aeabi_dmul>
 800b208:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b20c:	460c      	mov	r4, r1
 800b20e:	1523      	asrs	r3, r4, #20
 800b210:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b214:	4413      	add	r3, r2
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	4bce      	ldr	r3, [pc, #824]	; (800b554 <__ieee754_pow+0x724>)
 800b21a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b21e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b222:	429c      	cmp	r4, r3
 800b224:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b228:	dd08      	ble.n	800b23c <__ieee754_pow+0x40c>
 800b22a:	4bcb      	ldr	r3, [pc, #812]	; (800b558 <__ieee754_pow+0x728>)
 800b22c:	429c      	cmp	r4, r3
 800b22e:	f340 815e 	ble.w	800b4ee <__ieee754_pow+0x6be>
 800b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b234:	3301      	adds	r3, #1
 800b236:	9309      	str	r3, [sp, #36]	; 0x24
 800b238:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b23c:	f04f 0a00 	mov.w	sl, #0
 800b240:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b244:	930c      	str	r3, [sp, #48]	; 0x30
 800b246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b248:	4bc4      	ldr	r3, [pc, #784]	; (800b55c <__ieee754_pow+0x72c>)
 800b24a:	4413      	add	r3, r2
 800b24c:	ed93 7b00 	vldr	d7, [r3]
 800b250:	4629      	mov	r1, r5
 800b252:	ec53 2b17 	vmov	r2, r3, d7
 800b256:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b25a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b25e:	f7f5 f833 	bl	80002c8 <__aeabi_dsub>
 800b262:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b26e:	f7f5 f82d 	bl	80002cc <__adddf3>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	2000      	movs	r0, #0
 800b278:	49b9      	ldr	r1, [pc, #740]	; (800b560 <__ieee754_pow+0x730>)
 800b27a:	f7f5 fb07 	bl	800088c <__aeabi_ddiv>
 800b27e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4630      	mov	r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	f7f5 f9d5 	bl	8000638 <__aeabi_dmul>
 800b28e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b292:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b296:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b29a:	2300      	movs	r3, #0
 800b29c:	9302      	str	r3, [sp, #8]
 800b29e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2a2:	106d      	asrs	r5, r5, #1
 800b2a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b2a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	4614      	mov	r4, r2
 800b2b8:	461d      	mov	r5, r3
 800b2ba:	f7f5 f9bd 	bl	8000638 <__aeabi_dmul>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f4 ffff 	bl	80002c8 <__aeabi_dsub>
 800b2ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	460f      	mov	r7, r1
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	f7f4 fff7 	bl	80002c8 <__aeabi_dsub>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2e2:	f7f4 fff1 	bl	80002c8 <__aeabi_dsub>
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	464b      	mov	r3, r9
 800b2ea:	f7f5 f9a5 	bl	8000638 <__aeabi_dmul>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	f7f4 ffe7 	bl	80002c8 <__aeabi_dsub>
 800b2fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b2fe:	f7f5 f99b 	bl	8000638 <__aeabi_dmul>
 800b302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b306:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b30a:	4610      	mov	r0, r2
 800b30c:	4619      	mov	r1, r3
 800b30e:	f7f5 f993 	bl	8000638 <__aeabi_dmul>
 800b312:	a37b      	add	r3, pc, #492	; (adr r3, 800b500 <__ieee754_pow+0x6d0>)
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	4604      	mov	r4, r0
 800b31a:	460d      	mov	r5, r1
 800b31c:	f7f5 f98c 	bl	8000638 <__aeabi_dmul>
 800b320:	a379      	add	r3, pc, #484	; (adr r3, 800b508 <__ieee754_pow+0x6d8>)
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	f7f4 ffd1 	bl	80002cc <__adddf3>
 800b32a:	4622      	mov	r2, r4
 800b32c:	462b      	mov	r3, r5
 800b32e:	f7f5 f983 	bl	8000638 <__aeabi_dmul>
 800b332:	a377      	add	r3, pc, #476	; (adr r3, 800b510 <__ieee754_pow+0x6e0>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f4 ffc8 	bl	80002cc <__adddf3>
 800b33c:	4622      	mov	r2, r4
 800b33e:	462b      	mov	r3, r5
 800b340:	f7f5 f97a 	bl	8000638 <__aeabi_dmul>
 800b344:	a374      	add	r3, pc, #464	; (adr r3, 800b518 <__ieee754_pow+0x6e8>)
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f7f4 ffbf 	bl	80002cc <__adddf3>
 800b34e:	4622      	mov	r2, r4
 800b350:	462b      	mov	r3, r5
 800b352:	f7f5 f971 	bl	8000638 <__aeabi_dmul>
 800b356:	a372      	add	r3, pc, #456	; (adr r3, 800b520 <__ieee754_pow+0x6f0>)
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f7f4 ffb6 	bl	80002cc <__adddf3>
 800b360:	4622      	mov	r2, r4
 800b362:	462b      	mov	r3, r5
 800b364:	f7f5 f968 	bl	8000638 <__aeabi_dmul>
 800b368:	a36f      	add	r3, pc, #444	; (adr r3, 800b528 <__ieee754_pow+0x6f8>)
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f7f4 ffad 	bl	80002cc <__adddf3>
 800b372:	4622      	mov	r2, r4
 800b374:	4606      	mov	r6, r0
 800b376:	460f      	mov	r7, r1
 800b378:	462b      	mov	r3, r5
 800b37a:	4620      	mov	r0, r4
 800b37c:	4629      	mov	r1, r5
 800b37e:	f7f5 f95b 	bl	8000638 <__aeabi_dmul>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4630      	mov	r0, r6
 800b388:	4639      	mov	r1, r7
 800b38a:	f7f5 f955 	bl	8000638 <__aeabi_dmul>
 800b38e:	4642      	mov	r2, r8
 800b390:	4604      	mov	r4, r0
 800b392:	460d      	mov	r5, r1
 800b394:	464b      	mov	r3, r9
 800b396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b39a:	f7f4 ff97 	bl	80002cc <__adddf3>
 800b39e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3a2:	f7f5 f949 	bl	8000638 <__aeabi_dmul>
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	f7f4 ff8f 	bl	80002cc <__adddf3>
 800b3ae:	4642      	mov	r2, r8
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	460f      	mov	r7, r1
 800b3b4:	464b      	mov	r3, r9
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	f7f5 f93d 	bl	8000638 <__aeabi_dmul>
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4b68      	ldr	r3, [pc, #416]	; (800b564 <__ieee754_pow+0x734>)
 800b3c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b3c6:	f7f4 ff81 	bl	80002cc <__adddf3>
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	f7f4 ff7d 	bl	80002cc <__adddf3>
 800b3d2:	9802      	ldr	r0, [sp, #8]
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4640      	mov	r0, r8
 800b3de:	4649      	mov	r1, r9
 800b3e0:	f7f5 f92a 	bl	8000638 <__aeabi_dmul>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4680      	mov	r8, r0
 800b3e8:	4689      	mov	r9, r1
 800b3ea:	4b5e      	ldr	r3, [pc, #376]	; (800b564 <__ieee754_pow+0x734>)
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f7f4 ff6a 	bl	80002c8 <__aeabi_dsub>
 800b3f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3f8:	f7f4 ff66 	bl	80002c8 <__aeabi_dsub>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4630      	mov	r0, r6
 800b402:	4639      	mov	r1, r7
 800b404:	f7f4 ff60 	bl	80002c8 <__aeabi_dsub>
 800b408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b40c:	f7f5 f914 	bl	8000638 <__aeabi_dmul>
 800b410:	4622      	mov	r2, r4
 800b412:	4606      	mov	r6, r0
 800b414:	460f      	mov	r7, r1
 800b416:	462b      	mov	r3, r5
 800b418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b41c:	f7f5 f90c 	bl	8000638 <__aeabi_dmul>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4630      	mov	r0, r6
 800b426:	4639      	mov	r1, r7
 800b428:	f7f4 ff50 	bl	80002cc <__adddf3>
 800b42c:	4606      	mov	r6, r0
 800b42e:	460f      	mov	r7, r1
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4640      	mov	r0, r8
 800b436:	4649      	mov	r1, r9
 800b438:	f7f4 ff48 	bl	80002cc <__adddf3>
 800b43c:	9802      	ldr	r0, [sp, #8]
 800b43e:	a33c      	add	r3, pc, #240	; (adr r3, 800b530 <__ieee754_pow+0x700>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	4604      	mov	r4, r0
 800b446:	460d      	mov	r5, r1
 800b448:	f7f5 f8f6 	bl	8000638 <__aeabi_dmul>
 800b44c:	4642      	mov	r2, r8
 800b44e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b452:	464b      	mov	r3, r9
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f7f4 ff36 	bl	80002c8 <__aeabi_dsub>
 800b45c:	4602      	mov	r2, r0
 800b45e:	460b      	mov	r3, r1
 800b460:	4630      	mov	r0, r6
 800b462:	4639      	mov	r1, r7
 800b464:	f7f4 ff30 	bl	80002c8 <__aeabi_dsub>
 800b468:	a333      	add	r3, pc, #204	; (adr r3, 800b538 <__ieee754_pow+0x708>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f7f5 f8e3 	bl	8000638 <__aeabi_dmul>
 800b472:	a333      	add	r3, pc, #204	; (adr r3, 800b540 <__ieee754_pow+0x710>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	4606      	mov	r6, r0
 800b47a:	460f      	mov	r7, r1
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f7f5 f8da 	bl	8000638 <__aeabi_dmul>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f4 ff1e 	bl	80002cc <__adddf3>
 800b490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b492:	4b35      	ldr	r3, [pc, #212]	; (800b568 <__ieee754_pow+0x738>)
 800b494:	4413      	add	r3, r2
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f4 ff17 	bl	80002cc <__adddf3>
 800b49e:	4604      	mov	r4, r0
 800b4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4a2:	460d      	mov	r5, r1
 800b4a4:	f7f5 f85e 	bl	8000564 <__aeabi_i2d>
 800b4a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4aa:	4b30      	ldr	r3, [pc, #192]	; (800b56c <__ieee754_pow+0x73c>)
 800b4ac:	4413      	add	r3, r2
 800b4ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4be:	f7f4 ff05 	bl	80002cc <__adddf3>
 800b4c2:	4642      	mov	r2, r8
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	f7f4 ff01 	bl	80002cc <__adddf3>
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	463b      	mov	r3, r7
 800b4ce:	f7f4 fefd 	bl	80002cc <__adddf3>
 800b4d2:	9802      	ldr	r0, [sp, #8]
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4dc:	f7f4 fef4 	bl	80002c8 <__aeabi_dsub>
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	464b      	mov	r3, r9
 800b4e4:	f7f4 fef0 	bl	80002c8 <__aeabi_dsub>
 800b4e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ec:	e607      	b.n	800b0fe <__ieee754_pow+0x2ce>
 800b4ee:	f04f 0a01 	mov.w	sl, #1
 800b4f2:	e6a5      	b.n	800b240 <__ieee754_pow+0x410>
 800b4f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b548 <__ieee754_pow+0x718>
 800b4f8:	e613      	b.n	800b122 <__ieee754_pow+0x2f2>
 800b4fa:	bf00      	nop
 800b4fc:	f3af 8000 	nop.w
 800b500:	4a454eef 	.word	0x4a454eef
 800b504:	3fca7e28 	.word	0x3fca7e28
 800b508:	93c9db65 	.word	0x93c9db65
 800b50c:	3fcd864a 	.word	0x3fcd864a
 800b510:	a91d4101 	.word	0xa91d4101
 800b514:	3fd17460 	.word	0x3fd17460
 800b518:	518f264d 	.word	0x518f264d
 800b51c:	3fd55555 	.word	0x3fd55555
 800b520:	db6fabff 	.word	0xdb6fabff
 800b524:	3fdb6db6 	.word	0x3fdb6db6
 800b528:	33333303 	.word	0x33333303
 800b52c:	3fe33333 	.word	0x3fe33333
 800b530:	e0000000 	.word	0xe0000000
 800b534:	3feec709 	.word	0x3feec709
 800b538:	dc3a03fd 	.word	0xdc3a03fd
 800b53c:	3feec709 	.word	0x3feec709
 800b540:	145b01f5 	.word	0x145b01f5
 800b544:	be3e2fe0 	.word	0xbe3e2fe0
 800b548:	00000000 	.word	0x00000000
 800b54c:	3ff00000 	.word	0x3ff00000
 800b550:	43400000 	.word	0x43400000
 800b554:	0003988e 	.word	0x0003988e
 800b558:	000bb679 	.word	0x000bb679
 800b55c:	0801f910 	.word	0x0801f910
 800b560:	3ff00000 	.word	0x3ff00000
 800b564:	40080000 	.word	0x40080000
 800b568:	0801f930 	.word	0x0801f930
 800b56c:	0801f920 	.word	0x0801f920
 800b570:	a3b4      	add	r3, pc, #720	; (adr r3, 800b844 <__ieee754_pow+0xa14>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	4640      	mov	r0, r8
 800b578:	4649      	mov	r1, r9
 800b57a:	f7f4 fea7 	bl	80002cc <__adddf3>
 800b57e:	4622      	mov	r2, r4
 800b580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b584:	462b      	mov	r3, r5
 800b586:	4630      	mov	r0, r6
 800b588:	4639      	mov	r1, r7
 800b58a:	f7f4 fe9d 	bl	80002c8 <__aeabi_dsub>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b596:	f7f5 fadf 	bl	8000b58 <__aeabi_dcmpgt>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f47f adfe 	bne.w	800b19c <__ieee754_pow+0x36c>
 800b5a0:	4aa3      	ldr	r2, [pc, #652]	; (800b830 <__ieee754_pow+0xa00>)
 800b5a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	f340 810a 	ble.w	800b7c0 <__ieee754_pow+0x990>
 800b5ac:	151b      	asrs	r3, r3, #20
 800b5ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b5b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b5b6:	fa4a f303 	asr.w	r3, sl, r3
 800b5ba:	445b      	add	r3, fp
 800b5bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b5c0:	4e9c      	ldr	r6, [pc, #624]	; (800b834 <__ieee754_pow+0xa04>)
 800b5c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b5c6:	4116      	asrs	r6, r2
 800b5c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	ea23 0106 	bic.w	r1, r3, r6
 800b5d2:	f1c2 0214 	rsb	r2, r2, #20
 800b5d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b5da:	fa4a fa02 	asr.w	sl, sl, r2
 800b5de:	f1bb 0f00 	cmp.w	fp, #0
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	bfb8      	it	lt
 800b5ec:	f1ca 0a00 	rsblt	sl, sl, #0
 800b5f0:	f7f4 fe6a 	bl	80002c8 <__aeabi_dsub>
 800b5f4:	e9cd 0100 	strd	r0, r1, [sp]
 800b5f8:	4642      	mov	r2, r8
 800b5fa:	464b      	mov	r3, r9
 800b5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b600:	f7f4 fe64 	bl	80002cc <__adddf3>
 800b604:	2000      	movs	r0, #0
 800b606:	a378      	add	r3, pc, #480	; (adr r3, 800b7e8 <__ieee754_pow+0x9b8>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	4604      	mov	r4, r0
 800b60e:	460d      	mov	r5, r1
 800b610:	f7f5 f812 	bl	8000638 <__aeabi_dmul>
 800b614:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b618:	4606      	mov	r6, r0
 800b61a:	460f      	mov	r7, r1
 800b61c:	4620      	mov	r0, r4
 800b61e:	4629      	mov	r1, r5
 800b620:	f7f4 fe52 	bl	80002c8 <__aeabi_dsub>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4640      	mov	r0, r8
 800b62a:	4649      	mov	r1, r9
 800b62c:	f7f4 fe4c 	bl	80002c8 <__aeabi_dsub>
 800b630:	a36f      	add	r3, pc, #444	; (adr r3, 800b7f0 <__ieee754_pow+0x9c0>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f4 ffff 	bl	8000638 <__aeabi_dmul>
 800b63a:	a36f      	add	r3, pc, #444	; (adr r3, 800b7f8 <__ieee754_pow+0x9c8>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	4680      	mov	r8, r0
 800b642:	4689      	mov	r9, r1
 800b644:	4620      	mov	r0, r4
 800b646:	4629      	mov	r1, r5
 800b648:	f7f4 fff6 	bl	8000638 <__aeabi_dmul>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4640      	mov	r0, r8
 800b652:	4649      	mov	r1, r9
 800b654:	f7f4 fe3a 	bl	80002cc <__adddf3>
 800b658:	4604      	mov	r4, r0
 800b65a:	460d      	mov	r5, r1
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f4 fe32 	bl	80002cc <__adddf3>
 800b668:	4632      	mov	r2, r6
 800b66a:	463b      	mov	r3, r7
 800b66c:	4680      	mov	r8, r0
 800b66e:	4689      	mov	r9, r1
 800b670:	f7f4 fe2a 	bl	80002c8 <__aeabi_dsub>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4620      	mov	r0, r4
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7f4 fe24 	bl	80002c8 <__aeabi_dsub>
 800b680:	4642      	mov	r2, r8
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	464b      	mov	r3, r9
 800b688:	4640      	mov	r0, r8
 800b68a:	4649      	mov	r1, r9
 800b68c:	f7f4 ffd4 	bl	8000638 <__aeabi_dmul>
 800b690:	a35b      	add	r3, pc, #364	; (adr r3, 800b800 <__ieee754_pow+0x9d0>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	4604      	mov	r4, r0
 800b698:	460d      	mov	r5, r1
 800b69a:	f7f4 ffcd 	bl	8000638 <__aeabi_dmul>
 800b69e:	a35a      	add	r3, pc, #360	; (adr r3, 800b808 <__ieee754_pow+0x9d8>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	f7f4 fe10 	bl	80002c8 <__aeabi_dsub>
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	f7f4 ffc4 	bl	8000638 <__aeabi_dmul>
 800b6b0:	a357      	add	r3, pc, #348	; (adr r3, 800b810 <__ieee754_pow+0x9e0>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	f7f4 fe09 	bl	80002cc <__adddf3>
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	462b      	mov	r3, r5
 800b6be:	f7f4 ffbb 	bl	8000638 <__aeabi_dmul>
 800b6c2:	a355      	add	r3, pc, #340	; (adr r3, 800b818 <__ieee754_pow+0x9e8>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 fdfe 	bl	80002c8 <__aeabi_dsub>
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f7f4 ffb2 	bl	8000638 <__aeabi_dmul>
 800b6d4:	a352      	add	r3, pc, #328	; (adr r3, 800b820 <__ieee754_pow+0x9f0>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f7f4 fdf7 	bl	80002cc <__adddf3>
 800b6de:	4622      	mov	r2, r4
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	f7f4 ffa9 	bl	8000638 <__aeabi_dmul>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	f7f4 fdeb 	bl	80002c8 <__aeabi_dsub>
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	460d      	mov	r5, r1
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	f7f4 ff9b 	bl	8000638 <__aeabi_dmul>
 800b702:	2200      	movs	r2, #0
 800b704:	e9cd 0100 	strd	r0, r1, [sp]
 800b708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b70c:	4620      	mov	r0, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	f7f4 fdda 	bl	80002c8 <__aeabi_dsub>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b71c:	f7f5 f8b6 	bl	800088c <__aeabi_ddiv>
 800b720:	4632      	mov	r2, r6
 800b722:	4604      	mov	r4, r0
 800b724:	460d      	mov	r5, r1
 800b726:	463b      	mov	r3, r7
 800b728:	4640      	mov	r0, r8
 800b72a:	4649      	mov	r1, r9
 800b72c:	f7f4 ff84 	bl	8000638 <__aeabi_dmul>
 800b730:	4632      	mov	r2, r6
 800b732:	463b      	mov	r3, r7
 800b734:	f7f4 fdca 	bl	80002cc <__adddf3>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4620      	mov	r0, r4
 800b73e:	4629      	mov	r1, r5
 800b740:	f7f4 fdc2 	bl	80002c8 <__aeabi_dsub>
 800b744:	4642      	mov	r2, r8
 800b746:	464b      	mov	r3, r9
 800b748:	f7f4 fdbe 	bl	80002c8 <__aeabi_dsub>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	2000      	movs	r0, #0
 800b752:	4939      	ldr	r1, [pc, #228]	; (800b838 <__ieee754_pow+0xa08>)
 800b754:	f7f4 fdb8 	bl	80002c8 <__aeabi_dsub>
 800b758:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b75c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	da2f      	bge.n	800b7c6 <__ieee754_pow+0x996>
 800b766:	4650      	mov	r0, sl
 800b768:	ec43 2b10 	vmov	d0, r2, r3
 800b76c:	f000 fa48 	bl	800bc00 <scalbn>
 800b770:	ec51 0b10 	vmov	r0, r1, d0
 800b774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b778:	f7ff bbf1 	b.w	800af5e <__ieee754_pow+0x12e>
 800b77c:	4b2f      	ldr	r3, [pc, #188]	; (800b83c <__ieee754_pow+0xa0c>)
 800b77e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b782:	429e      	cmp	r6, r3
 800b784:	f77f af0c 	ble.w	800b5a0 <__ieee754_pow+0x770>
 800b788:	4b2d      	ldr	r3, [pc, #180]	; (800b840 <__ieee754_pow+0xa10>)
 800b78a:	440b      	add	r3, r1
 800b78c:	4303      	orrs	r3, r0
 800b78e:	d00b      	beq.n	800b7a8 <__ieee754_pow+0x978>
 800b790:	a325      	add	r3, pc, #148	; (adr r3, 800b828 <__ieee754_pow+0x9f8>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79a:	f7f4 ff4d 	bl	8000638 <__aeabi_dmul>
 800b79e:	a322      	add	r3, pc, #136	; (adr r3, 800b828 <__ieee754_pow+0x9f8>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f7ff bbdb 	b.w	800af5e <__ieee754_pow+0x12e>
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	f7f4 fd8c 	bl	80002c8 <__aeabi_dsub>
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	f7f5 f9c6 	bl	8000b44 <__aeabi_dcmpge>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	f43f aef1 	beq.w	800b5a0 <__ieee754_pow+0x770>
 800b7be:	e7e7      	b.n	800b790 <__ieee754_pow+0x960>
 800b7c0:	f04f 0a00 	mov.w	sl, #0
 800b7c4:	e718      	b.n	800b5f8 <__ieee754_pow+0x7c8>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	e7d4      	b.n	800b774 <__ieee754_pow+0x944>
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	491a      	ldr	r1, [pc, #104]	; (800b838 <__ieee754_pow+0xa08>)
 800b7ce:	f7ff bb8f 	b.w	800aef0 <__ieee754_pow+0xc0>
 800b7d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d6:	f7ff bb8b 	b.w	800aef0 <__ieee754_pow+0xc0>
 800b7da:	4630      	mov	r0, r6
 800b7dc:	4639      	mov	r1, r7
 800b7de:	f7ff bb87 	b.w	800aef0 <__ieee754_pow+0xc0>
 800b7e2:	4693      	mov	fp, r2
 800b7e4:	f7ff bb98 	b.w	800af18 <__ieee754_pow+0xe8>
 800b7e8:	00000000 	.word	0x00000000
 800b7ec:	3fe62e43 	.word	0x3fe62e43
 800b7f0:	fefa39ef 	.word	0xfefa39ef
 800b7f4:	3fe62e42 	.word	0x3fe62e42
 800b7f8:	0ca86c39 	.word	0x0ca86c39
 800b7fc:	be205c61 	.word	0xbe205c61
 800b800:	72bea4d0 	.word	0x72bea4d0
 800b804:	3e663769 	.word	0x3e663769
 800b808:	c5d26bf1 	.word	0xc5d26bf1
 800b80c:	3ebbbd41 	.word	0x3ebbbd41
 800b810:	af25de2c 	.word	0xaf25de2c
 800b814:	3f11566a 	.word	0x3f11566a
 800b818:	16bebd93 	.word	0x16bebd93
 800b81c:	3f66c16c 	.word	0x3f66c16c
 800b820:	5555553e 	.word	0x5555553e
 800b824:	3fc55555 	.word	0x3fc55555
 800b828:	c2f8f359 	.word	0xc2f8f359
 800b82c:	01a56e1f 	.word	0x01a56e1f
 800b830:	3fe00000 	.word	0x3fe00000
 800b834:	000fffff 	.word	0x000fffff
 800b838:	3ff00000 	.word	0x3ff00000
 800b83c:	4090cbff 	.word	0x4090cbff
 800b840:	3f6f3400 	.word	0x3f6f3400
 800b844:	652b82fe 	.word	0x652b82fe
 800b848:	3c971547 	.word	0x3c971547

0800b84c <__ieee754_sqrt>:
 800b84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b850:	4955      	ldr	r1, [pc, #340]	; (800b9a8 <__ieee754_sqrt+0x15c>)
 800b852:	ec55 4b10 	vmov	r4, r5, d0
 800b856:	43a9      	bics	r1, r5
 800b858:	462b      	mov	r3, r5
 800b85a:	462a      	mov	r2, r5
 800b85c:	d112      	bne.n	800b884 <__ieee754_sqrt+0x38>
 800b85e:	ee10 2a10 	vmov	r2, s0
 800b862:	ee10 0a10 	vmov	r0, s0
 800b866:	4629      	mov	r1, r5
 800b868:	f7f4 fee6 	bl	8000638 <__aeabi_dmul>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4620      	mov	r0, r4
 800b872:	4629      	mov	r1, r5
 800b874:	f7f4 fd2a 	bl	80002cc <__adddf3>
 800b878:	4604      	mov	r4, r0
 800b87a:	460d      	mov	r5, r1
 800b87c:	ec45 4b10 	vmov	d0, r4, r5
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	2d00      	cmp	r5, #0
 800b886:	ee10 0a10 	vmov	r0, s0
 800b88a:	4621      	mov	r1, r4
 800b88c:	dc0f      	bgt.n	800b8ae <__ieee754_sqrt+0x62>
 800b88e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b892:	4330      	orrs	r0, r6
 800b894:	d0f2      	beq.n	800b87c <__ieee754_sqrt+0x30>
 800b896:	b155      	cbz	r5, 800b8ae <__ieee754_sqrt+0x62>
 800b898:	ee10 2a10 	vmov	r2, s0
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f4 fd12 	bl	80002c8 <__aeabi_dsub>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	f7f4 fff0 	bl	800088c <__aeabi_ddiv>
 800b8ac:	e7e4      	b.n	800b878 <__ieee754_sqrt+0x2c>
 800b8ae:	151b      	asrs	r3, r3, #20
 800b8b0:	d073      	beq.n	800b99a <__ieee754_sqrt+0x14e>
 800b8b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b8b6:	07dd      	lsls	r5, r3, #31
 800b8b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b8bc:	bf48      	it	mi
 800b8be:	0fc8      	lsrmi	r0, r1, #31
 800b8c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b8c4:	bf44      	itt	mi
 800b8c6:	0049      	lslmi	r1, r1, #1
 800b8c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b8cc:	2500      	movs	r5, #0
 800b8ce:	1058      	asrs	r0, r3, #1
 800b8d0:	0fcb      	lsrs	r3, r1, #31
 800b8d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b8d6:	0049      	lsls	r1, r1, #1
 800b8d8:	2316      	movs	r3, #22
 800b8da:	462c      	mov	r4, r5
 800b8dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b8e0:	19a7      	adds	r7, r4, r6
 800b8e2:	4297      	cmp	r7, r2
 800b8e4:	bfde      	ittt	le
 800b8e6:	19bc      	addle	r4, r7, r6
 800b8e8:	1bd2      	suble	r2, r2, r7
 800b8ea:	19ad      	addle	r5, r5, r6
 800b8ec:	0fcf      	lsrs	r7, r1, #31
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b8f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b8f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b8fc:	d1f0      	bne.n	800b8e0 <__ieee754_sqrt+0x94>
 800b8fe:	f04f 0c20 	mov.w	ip, #32
 800b902:	469e      	mov	lr, r3
 800b904:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b908:	42a2      	cmp	r2, r4
 800b90a:	eb06 070e 	add.w	r7, r6, lr
 800b90e:	dc02      	bgt.n	800b916 <__ieee754_sqrt+0xca>
 800b910:	d112      	bne.n	800b938 <__ieee754_sqrt+0xec>
 800b912:	428f      	cmp	r7, r1
 800b914:	d810      	bhi.n	800b938 <__ieee754_sqrt+0xec>
 800b916:	2f00      	cmp	r7, #0
 800b918:	eb07 0e06 	add.w	lr, r7, r6
 800b91c:	da42      	bge.n	800b9a4 <__ieee754_sqrt+0x158>
 800b91e:	f1be 0f00 	cmp.w	lr, #0
 800b922:	db3f      	blt.n	800b9a4 <__ieee754_sqrt+0x158>
 800b924:	f104 0801 	add.w	r8, r4, #1
 800b928:	1b12      	subs	r2, r2, r4
 800b92a:	428f      	cmp	r7, r1
 800b92c:	bf88      	it	hi
 800b92e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b932:	1bc9      	subs	r1, r1, r7
 800b934:	4433      	add	r3, r6
 800b936:	4644      	mov	r4, r8
 800b938:	0052      	lsls	r2, r2, #1
 800b93a:	f1bc 0c01 	subs.w	ip, ip, #1
 800b93e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b942:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b946:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b94a:	d1dd      	bne.n	800b908 <__ieee754_sqrt+0xbc>
 800b94c:	430a      	orrs	r2, r1
 800b94e:	d006      	beq.n	800b95e <__ieee754_sqrt+0x112>
 800b950:	1c5c      	adds	r4, r3, #1
 800b952:	bf13      	iteet	ne
 800b954:	3301      	addne	r3, #1
 800b956:	3501      	addeq	r5, #1
 800b958:	4663      	moveq	r3, ip
 800b95a:	f023 0301 	bicne.w	r3, r3, #1
 800b95e:	106a      	asrs	r2, r5, #1
 800b960:	085b      	lsrs	r3, r3, #1
 800b962:	07e9      	lsls	r1, r5, #31
 800b964:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b968:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b96c:	bf48      	it	mi
 800b96e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b972:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b976:	461c      	mov	r4, r3
 800b978:	e780      	b.n	800b87c <__ieee754_sqrt+0x30>
 800b97a:	0aca      	lsrs	r2, r1, #11
 800b97c:	3815      	subs	r0, #21
 800b97e:	0549      	lsls	r1, r1, #21
 800b980:	2a00      	cmp	r2, #0
 800b982:	d0fa      	beq.n	800b97a <__ieee754_sqrt+0x12e>
 800b984:	02d6      	lsls	r6, r2, #11
 800b986:	d50a      	bpl.n	800b99e <__ieee754_sqrt+0x152>
 800b988:	f1c3 0420 	rsb	r4, r3, #32
 800b98c:	fa21 f404 	lsr.w	r4, r1, r4
 800b990:	1e5d      	subs	r5, r3, #1
 800b992:	4099      	lsls	r1, r3
 800b994:	4322      	orrs	r2, r4
 800b996:	1b43      	subs	r3, r0, r5
 800b998:	e78b      	b.n	800b8b2 <__ieee754_sqrt+0x66>
 800b99a:	4618      	mov	r0, r3
 800b99c:	e7f0      	b.n	800b980 <__ieee754_sqrt+0x134>
 800b99e:	0052      	lsls	r2, r2, #1
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	e7ef      	b.n	800b984 <__ieee754_sqrt+0x138>
 800b9a4:	46a0      	mov	r8, r4
 800b9a6:	e7bf      	b.n	800b928 <__ieee754_sqrt+0xdc>
 800b9a8:	7ff00000 	.word	0x7ff00000

0800b9ac <__ieee754_fmodf>:
 800b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ae:	ee10 6a90 	vmov	r6, s1
 800b9b2:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800b9b6:	ee10 3a10 	vmov	r3, s0
 800b9ba:	d009      	beq.n	800b9d0 <__ieee754_fmodf+0x24>
 800b9bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b9c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b9c4:	ee10 7a10 	vmov	r7, s0
 800b9c8:	da02      	bge.n	800b9d0 <__ieee754_fmodf+0x24>
 800b9ca:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b9ce:	dd0a      	ble.n	800b9e6 <__ieee754_fmodf+0x3a>
 800b9d0:	ee07 3a90 	vmov	s15, r3
 800b9d4:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800b9d8:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 800b9dc:	ee17 3a90 	vmov	r3, s15
 800b9e0:	ee00 3a10 	vmov	s0, r3
 800b9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e6:	42a9      	cmp	r1, r5
 800b9e8:	dbfa      	blt.n	800b9e0 <__ieee754_fmodf+0x34>
 800b9ea:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800b9ee:	d105      	bne.n	800b9fc <__ieee754_fmodf+0x50>
 800b9f0:	4a30      	ldr	r2, [pc, #192]	; (800bab4 <__ieee754_fmodf+0x108>)
 800b9f2:	0fe3      	lsrs	r3, r4, #31
 800b9f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	e7f1      	b.n	800b9e0 <__ieee754_fmodf+0x34>
 800b9fc:	4b2e      	ldr	r3, [pc, #184]	; (800bab8 <__ieee754_fmodf+0x10c>)
 800b9fe:	4299      	cmp	r1, r3
 800ba00:	dc3e      	bgt.n	800ba80 <__ieee754_fmodf+0xd4>
 800ba02:	020a      	lsls	r2, r1, #8
 800ba04:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800ba08:	2a00      	cmp	r2, #0
 800ba0a:	dc36      	bgt.n	800ba7a <__ieee754_fmodf+0xce>
 800ba0c:	429d      	cmp	r5, r3
 800ba0e:	dc3a      	bgt.n	800ba86 <__ieee754_fmodf+0xda>
 800ba10:	022b      	lsls	r3, r5, #8
 800ba12:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba1c:	d5fb      	bpl.n	800ba16 <__ieee754_fmodf+0x6a>
 800ba1e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800ba22:	bfbb      	ittet	lt
 800ba24:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800ba28:	1a1b      	sublt	r3, r3, r0
 800ba2a:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800ba2e:	4099      	lsllt	r1, r3
 800ba30:	bfa8      	it	ge
 800ba32:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 800ba36:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800ba3a:	bfb5      	itete	lt
 800ba3c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800ba40:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800ba44:	1a9b      	sublt	r3, r3, r2
 800ba46:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800ba4a:	bfb8      	it	lt
 800ba4c:	409d      	lsllt	r5, r3
 800ba4e:	1a80      	subs	r0, r0, r2
 800ba50:	1b4b      	subs	r3, r1, r5
 800ba52:	b9d8      	cbnz	r0, 800ba8c <__ieee754_fmodf+0xe0>
 800ba54:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800ba58:	bf28      	it	cs
 800ba5a:	460b      	movcs	r3, r1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0c7      	beq.n	800b9f0 <__ieee754_fmodf+0x44>
 800ba60:	4915      	ldr	r1, [pc, #84]	; (800bab8 <__ieee754_fmodf+0x10c>)
 800ba62:	428b      	cmp	r3, r1
 800ba64:	dd1a      	ble.n	800ba9c <__ieee754_fmodf+0xf0>
 800ba66:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800ba6a:	db1a      	blt.n	800baa2 <__ieee754_fmodf+0xf6>
 800ba6c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800ba70:	4323      	orrs	r3, r4
 800ba72:	327f      	adds	r2, #127	; 0x7f
 800ba74:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ba78:	e7b2      	b.n	800b9e0 <__ieee754_fmodf+0x34>
 800ba7a:	3801      	subs	r0, #1
 800ba7c:	0052      	lsls	r2, r2, #1
 800ba7e:	e7c3      	b.n	800ba08 <__ieee754_fmodf+0x5c>
 800ba80:	15c8      	asrs	r0, r1, #23
 800ba82:	387f      	subs	r0, #127	; 0x7f
 800ba84:	e7c2      	b.n	800ba0c <__ieee754_fmodf+0x60>
 800ba86:	15ea      	asrs	r2, r5, #23
 800ba88:	3a7f      	subs	r2, #127	; 0x7f
 800ba8a:	e7c8      	b.n	800ba1e <__ieee754_fmodf+0x72>
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	da02      	bge.n	800ba96 <__ieee754_fmodf+0xea>
 800ba90:	0049      	lsls	r1, r1, #1
 800ba92:	3801      	subs	r0, #1
 800ba94:	e7dc      	b.n	800ba50 <__ieee754_fmodf+0xa4>
 800ba96:	d0ab      	beq.n	800b9f0 <__ieee754_fmodf+0x44>
 800ba98:	0059      	lsls	r1, r3, #1
 800ba9a:	e7fa      	b.n	800ba92 <__ieee754_fmodf+0xe6>
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	3a01      	subs	r2, #1
 800baa0:	e7df      	b.n	800ba62 <__ieee754_fmodf+0xb6>
 800baa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800baa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800baaa:	3282      	adds	r2, #130	; 0x82
 800baac:	4113      	asrs	r3, r2
 800baae:	4323      	orrs	r3, r4
 800bab0:	e796      	b.n	800b9e0 <__ieee754_fmodf+0x34>
 800bab2:	bf00      	nop
 800bab4:	0801f940 	.word	0x0801f940
 800bab8:	007fffff 	.word	0x007fffff

0800babc <fabs>:
 800babc:	ec51 0b10 	vmov	r0, r1, d0
 800bac0:	ee10 2a10 	vmov	r2, s0
 800bac4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bac8:	ec43 2b10 	vmov	d0, r2, r3
 800bacc:	4770      	bx	lr

0800bace <finite>:
 800bace:	ee10 3a90 	vmov	r3, s1
 800bad2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800bad6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bada:	0fc0      	lsrs	r0, r0, #31
 800badc:	4770      	bx	lr

0800bade <matherr>:
 800bade:	2000      	movs	r0, #0
 800bae0:	4770      	bx	lr
 800bae2:	0000      	movs	r0, r0
 800bae4:	0000      	movs	r0, r0
	...

0800bae8 <nan>:
 800bae8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800baf0 <nan+0x8>
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	00000000 	.word	0x00000000
 800baf4:	7ff80000 	.word	0x7ff80000

0800baf8 <rint>:
 800baf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bafa:	ec51 0b10 	vmov	r0, r1, d0
 800bafe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bb02:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bb06:	2e13      	cmp	r6, #19
 800bb08:	460b      	mov	r3, r1
 800bb0a:	ee10 4a10 	vmov	r4, s0
 800bb0e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800bb12:	dc56      	bgt.n	800bbc2 <rint+0xca>
 800bb14:	2e00      	cmp	r6, #0
 800bb16:	da2b      	bge.n	800bb70 <rint+0x78>
 800bb18:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bb1c:	4302      	orrs	r2, r0
 800bb1e:	d023      	beq.n	800bb68 <rint+0x70>
 800bb20:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bb24:	4302      	orrs	r2, r0
 800bb26:	4254      	negs	r4, r2
 800bb28:	4314      	orrs	r4, r2
 800bb2a:	0c4b      	lsrs	r3, r1, #17
 800bb2c:	0b24      	lsrs	r4, r4, #12
 800bb2e:	045b      	lsls	r3, r3, #17
 800bb30:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800bb34:	ea44 0103 	orr.w	r1, r4, r3
 800bb38:	460b      	mov	r3, r1
 800bb3a:	492f      	ldr	r1, [pc, #188]	; (800bbf8 <rint+0x100>)
 800bb3c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800bb40:	e9d1 6700 	ldrd	r6, r7, [r1]
 800bb44:	4602      	mov	r2, r0
 800bb46:	4639      	mov	r1, r7
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7f4 fbbf 	bl	80002cc <__adddf3>
 800bb4e:	e9cd 0100 	strd	r0, r1, [sp]
 800bb52:	463b      	mov	r3, r7
 800bb54:	4632      	mov	r2, r6
 800bb56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb5a:	f7f4 fbb5 	bl	80002c8 <__aeabi_dsub>
 800bb5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb62:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800bb66:	4639      	mov	r1, r7
 800bb68:	ec41 0b10 	vmov	d0, r0, r1
 800bb6c:	b003      	add	sp, #12
 800bb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb70:	4a22      	ldr	r2, [pc, #136]	; (800bbfc <rint+0x104>)
 800bb72:	4132      	asrs	r2, r6
 800bb74:	ea01 0702 	and.w	r7, r1, r2
 800bb78:	4307      	orrs	r7, r0
 800bb7a:	d0f5      	beq.n	800bb68 <rint+0x70>
 800bb7c:	0852      	lsrs	r2, r2, #1
 800bb7e:	4011      	ands	r1, r2
 800bb80:	430c      	orrs	r4, r1
 800bb82:	d00b      	beq.n	800bb9c <rint+0xa4>
 800bb84:	ea23 0202 	bic.w	r2, r3, r2
 800bb88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb8c:	2e13      	cmp	r6, #19
 800bb8e:	fa43 f306 	asr.w	r3, r3, r6
 800bb92:	bf0c      	ite	eq
 800bb94:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800bb98:	2400      	movne	r4, #0
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	4916      	ldr	r1, [pc, #88]	; (800bbf8 <rint+0x100>)
 800bb9e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800bba2:	4622      	mov	r2, r4
 800bba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bba8:	4620      	mov	r0, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7f4 fb8e 	bl	80002cc <__adddf3>
 800bbb0:	e9cd 0100 	strd	r0, r1, [sp]
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	462b      	mov	r3, r5
 800bbb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbbc:	f7f4 fb84 	bl	80002c8 <__aeabi_dsub>
 800bbc0:	e7d2      	b.n	800bb68 <rint+0x70>
 800bbc2:	2e33      	cmp	r6, #51	; 0x33
 800bbc4:	dd07      	ble.n	800bbd6 <rint+0xde>
 800bbc6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bbca:	d1cd      	bne.n	800bb68 <rint+0x70>
 800bbcc:	ee10 2a10 	vmov	r2, s0
 800bbd0:	f7f4 fb7c 	bl	80002cc <__adddf3>
 800bbd4:	e7c8      	b.n	800bb68 <rint+0x70>
 800bbd6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800bbda:	f04f 32ff 	mov.w	r2, #4294967295
 800bbde:	40f2      	lsrs	r2, r6
 800bbe0:	4210      	tst	r0, r2
 800bbe2:	d0c1      	beq.n	800bb68 <rint+0x70>
 800bbe4:	0852      	lsrs	r2, r2, #1
 800bbe6:	4210      	tst	r0, r2
 800bbe8:	bf1f      	itttt	ne
 800bbea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bbee:	ea20 0202 	bicne.w	r2, r0, r2
 800bbf2:	4134      	asrne	r4, r6
 800bbf4:	4314      	orrne	r4, r2
 800bbf6:	e7d1      	b.n	800bb9c <rint+0xa4>
 800bbf8:	0801f948 	.word	0x0801f948
 800bbfc:	000fffff 	.word	0x000fffff

0800bc00 <scalbn>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	ec55 4b10 	vmov	r4, r5, d0
 800bc06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	462b      	mov	r3, r5
 800bc0e:	b9aa      	cbnz	r2, 800bc3c <scalbn+0x3c>
 800bc10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc14:	4323      	orrs	r3, r4
 800bc16:	d03b      	beq.n	800bc90 <scalbn+0x90>
 800bc18:	4b31      	ldr	r3, [pc, #196]	; (800bce0 <scalbn+0xe0>)
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	ee10 0a10 	vmov	r0, s0
 800bc22:	f7f4 fd09 	bl	8000638 <__aeabi_dmul>
 800bc26:	4b2f      	ldr	r3, [pc, #188]	; (800bce4 <scalbn+0xe4>)
 800bc28:	429e      	cmp	r6, r3
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	460d      	mov	r5, r1
 800bc2e:	da12      	bge.n	800bc56 <scalbn+0x56>
 800bc30:	a327      	add	r3, pc, #156	; (adr r3, 800bcd0 <scalbn+0xd0>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 fcff 	bl	8000638 <__aeabi_dmul>
 800bc3a:	e009      	b.n	800bc50 <scalbn+0x50>
 800bc3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bc40:	428a      	cmp	r2, r1
 800bc42:	d10c      	bne.n	800bc5e <scalbn+0x5e>
 800bc44:	ee10 2a10 	vmov	r2, s0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	f7f4 fb3e 	bl	80002cc <__adddf3>
 800bc50:	4604      	mov	r4, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	e01c      	b.n	800bc90 <scalbn+0x90>
 800bc56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	3a36      	subs	r2, #54	; 0x36
 800bc5e:	4432      	add	r2, r6
 800bc60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bc64:	428a      	cmp	r2, r1
 800bc66:	dd0b      	ble.n	800bc80 <scalbn+0x80>
 800bc68:	ec45 4b11 	vmov	d1, r4, r5
 800bc6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800bcd8 <scalbn+0xd8>
 800bc70:	f000 f83c 	bl	800bcec <copysign>
 800bc74:	a318      	add	r3, pc, #96	; (adr r3, 800bcd8 <scalbn+0xd8>)
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	ec51 0b10 	vmov	r0, r1, d0
 800bc7e:	e7da      	b.n	800bc36 <scalbn+0x36>
 800bc80:	2a00      	cmp	r2, #0
 800bc82:	dd08      	ble.n	800bc96 <scalbn+0x96>
 800bc84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc90:	ec45 4b10 	vmov	d0, r4, r5
 800bc94:	bd70      	pop	{r4, r5, r6, pc}
 800bc96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bc9a:	da0d      	bge.n	800bcb8 <scalbn+0xb8>
 800bc9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bca0:	429e      	cmp	r6, r3
 800bca2:	ec45 4b11 	vmov	d1, r4, r5
 800bca6:	dce1      	bgt.n	800bc6c <scalbn+0x6c>
 800bca8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bcd0 <scalbn+0xd0>
 800bcac:	f000 f81e 	bl	800bcec <copysign>
 800bcb0:	a307      	add	r3, pc, #28	; (adr r3, 800bcd0 <scalbn+0xd0>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	e7e0      	b.n	800bc7a <scalbn+0x7a>
 800bcb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bcbc:	3236      	adds	r2, #54	; 0x36
 800bcbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	2200      	movs	r2, #0
 800bccc:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <scalbn+0xe8>)
 800bcce:	e7b2      	b.n	800bc36 <scalbn+0x36>
 800bcd0:	c2f8f359 	.word	0xc2f8f359
 800bcd4:	01a56e1f 	.word	0x01a56e1f
 800bcd8:	8800759c 	.word	0x8800759c
 800bcdc:	7e37e43c 	.word	0x7e37e43c
 800bce0:	43500000 	.word	0x43500000
 800bce4:	ffff3cb0 	.word	0xffff3cb0
 800bce8:	3c900000 	.word	0x3c900000

0800bcec <copysign>:
 800bcec:	ec51 0b10 	vmov	r0, r1, d0
 800bcf0:	ee11 0a90 	vmov	r0, s3
 800bcf4:	ee10 2a10 	vmov	r2, s0
 800bcf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bcfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bd00:	ea41 0300 	orr.w	r3, r1, r0
 800bd04:	ec43 2b10 	vmov	d0, r2, r3
 800bd08:	4770      	bx	lr
	...

0800bd0c <_init>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr

0800bd18 <_fini>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	bf00      	nop
 800bd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1e:	bc08      	pop	{r3}
 800bd20:	469e      	mov	lr, r3
 800bd22:	4770      	bx	lr
