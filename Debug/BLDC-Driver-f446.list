
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000b91c  08008000  08008000  00018000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013b70  08013920  08013920  00023920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08027490  08027490  000401e4  2**0
                  CONTENTS
  5 .ARM          00000008  08027490  08027490  00037490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08027498  08027498  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08027498  08027498  00037498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0802749c  0802749c  0003749c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001e4  20000000  080274a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004690  200001e4  08027684  000401e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004874  08027684  00044874  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002080a  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004436  00000000  00000000  00060a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001518  00000000  00000000  00064e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012d8  00000000  00000000  00066370  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026284  00000000  00000000  00067648  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00015394  00000000  00000000  0008d8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d9f72  00000000  00000000  000a2c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017cbd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e70  00000000  00000000  0017cc50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e4 	.word	0x200001e4
 800801c:	00000000 	.word	0x00000000
 8008020:	08013904 	.word	0x08013904

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e8 	.word	0x200001e8
 800803c:	08013904 	.word	0x08013904

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <__aeabi_drsub>:
 8008050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008054:	e002      	b.n	800805c <__adddf3>
 8008056:	bf00      	nop

08008058 <__aeabi_dsub>:
 8008058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800805c <__adddf3>:
 800805c:	b530      	push	{r4, r5, lr}
 800805e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008062:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008066:	ea94 0f05 	teq	r4, r5
 800806a:	bf08      	it	eq
 800806c:	ea90 0f02 	teqeq	r0, r2
 8008070:	bf1f      	itttt	ne
 8008072:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008076:	ea55 0c02 	orrsne.w	ip, r5, r2
 800807a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800807e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008082:	f000 80e2 	beq.w	800824a <__adddf3+0x1ee>
 8008086:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800808a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800808e:	bfb8      	it	lt
 8008090:	426d      	neglt	r5, r5
 8008092:	dd0c      	ble.n	80080ae <__adddf3+0x52>
 8008094:	442c      	add	r4, r5
 8008096:	ea80 0202 	eor.w	r2, r0, r2
 800809a:	ea81 0303 	eor.w	r3, r1, r3
 800809e:	ea82 0000 	eor.w	r0, r2, r0
 80080a2:	ea83 0101 	eor.w	r1, r3, r1
 80080a6:	ea80 0202 	eor.w	r2, r0, r2
 80080aa:	ea81 0303 	eor.w	r3, r1, r3
 80080ae:	2d36      	cmp	r5, #54	; 0x36
 80080b0:	bf88      	it	hi
 80080b2:	bd30      	pophi	{r4, r5, pc}
 80080b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80080b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80080bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80080c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80080c4:	d002      	beq.n	80080cc <__adddf3+0x70>
 80080c6:	4240      	negs	r0, r0
 80080c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80080cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80080d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80080d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80080d8:	d002      	beq.n	80080e0 <__adddf3+0x84>
 80080da:	4252      	negs	r2, r2
 80080dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80080e0:	ea94 0f05 	teq	r4, r5
 80080e4:	f000 80a7 	beq.w	8008236 <__adddf3+0x1da>
 80080e8:	f1a4 0401 	sub.w	r4, r4, #1
 80080ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80080f0:	db0d      	blt.n	800810e <__adddf3+0xb2>
 80080f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80080f6:	fa22 f205 	lsr.w	r2, r2, r5
 80080fa:	1880      	adds	r0, r0, r2
 80080fc:	f141 0100 	adc.w	r1, r1, #0
 8008100:	fa03 f20e 	lsl.w	r2, r3, lr
 8008104:	1880      	adds	r0, r0, r2
 8008106:	fa43 f305 	asr.w	r3, r3, r5
 800810a:	4159      	adcs	r1, r3
 800810c:	e00e      	b.n	800812c <__adddf3+0xd0>
 800810e:	f1a5 0520 	sub.w	r5, r5, #32
 8008112:	f10e 0e20 	add.w	lr, lr, #32
 8008116:	2a01      	cmp	r2, #1
 8008118:	fa03 fc0e 	lsl.w	ip, r3, lr
 800811c:	bf28      	it	cs
 800811e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008122:	fa43 f305 	asr.w	r3, r3, r5
 8008126:	18c0      	adds	r0, r0, r3
 8008128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800812c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008130:	d507      	bpl.n	8008142 <__adddf3+0xe6>
 8008132:	f04f 0e00 	mov.w	lr, #0
 8008136:	f1dc 0c00 	rsbs	ip, ip, #0
 800813a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800813e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008146:	d31b      	bcc.n	8008180 <__adddf3+0x124>
 8008148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800814c:	d30c      	bcc.n	8008168 <__adddf3+0x10c>
 800814e:	0849      	lsrs	r1, r1, #1
 8008150:	ea5f 0030 	movs.w	r0, r0, rrx
 8008154:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008158:	f104 0401 	add.w	r4, r4, #1
 800815c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008164:	f080 809a 	bcs.w	800829c <__adddf3+0x240>
 8008168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800816c:	bf08      	it	eq
 800816e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008172:	f150 0000 	adcs.w	r0, r0, #0
 8008176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800817a:	ea41 0105 	orr.w	r1, r1, r5
 800817e:	bd30      	pop	{r4, r5, pc}
 8008180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008184:	4140      	adcs	r0, r0
 8008186:	eb41 0101 	adc.w	r1, r1, r1
 800818a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800818e:	f1a4 0401 	sub.w	r4, r4, #1
 8008192:	d1e9      	bne.n	8008168 <__adddf3+0x10c>
 8008194:	f091 0f00 	teq	r1, #0
 8008198:	bf04      	itt	eq
 800819a:	4601      	moveq	r1, r0
 800819c:	2000      	moveq	r0, #0
 800819e:	fab1 f381 	clz	r3, r1
 80081a2:	bf08      	it	eq
 80081a4:	3320      	addeq	r3, #32
 80081a6:	f1a3 030b 	sub.w	r3, r3, #11
 80081aa:	f1b3 0220 	subs.w	r2, r3, #32
 80081ae:	da0c      	bge.n	80081ca <__adddf3+0x16e>
 80081b0:	320c      	adds	r2, #12
 80081b2:	dd08      	ble.n	80081c6 <__adddf3+0x16a>
 80081b4:	f102 0c14 	add.w	ip, r2, #20
 80081b8:	f1c2 020c 	rsb	r2, r2, #12
 80081bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80081c0:	fa21 f102 	lsr.w	r1, r1, r2
 80081c4:	e00c      	b.n	80081e0 <__adddf3+0x184>
 80081c6:	f102 0214 	add.w	r2, r2, #20
 80081ca:	bfd8      	it	le
 80081cc:	f1c2 0c20 	rsble	ip, r2, #32
 80081d0:	fa01 f102 	lsl.w	r1, r1, r2
 80081d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80081d8:	bfdc      	itt	le
 80081da:	ea41 010c 	orrle.w	r1, r1, ip
 80081de:	4090      	lslle	r0, r2
 80081e0:	1ae4      	subs	r4, r4, r3
 80081e2:	bfa2      	ittt	ge
 80081e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80081e8:	4329      	orrge	r1, r5
 80081ea:	bd30      	popge	{r4, r5, pc}
 80081ec:	ea6f 0404 	mvn.w	r4, r4
 80081f0:	3c1f      	subs	r4, #31
 80081f2:	da1c      	bge.n	800822e <__adddf3+0x1d2>
 80081f4:	340c      	adds	r4, #12
 80081f6:	dc0e      	bgt.n	8008216 <__adddf3+0x1ba>
 80081f8:	f104 0414 	add.w	r4, r4, #20
 80081fc:	f1c4 0220 	rsb	r2, r4, #32
 8008200:	fa20 f004 	lsr.w	r0, r0, r4
 8008204:	fa01 f302 	lsl.w	r3, r1, r2
 8008208:	ea40 0003 	orr.w	r0, r0, r3
 800820c:	fa21 f304 	lsr.w	r3, r1, r4
 8008210:	ea45 0103 	orr.w	r1, r5, r3
 8008214:	bd30      	pop	{r4, r5, pc}
 8008216:	f1c4 040c 	rsb	r4, r4, #12
 800821a:	f1c4 0220 	rsb	r2, r4, #32
 800821e:	fa20 f002 	lsr.w	r0, r0, r2
 8008222:	fa01 f304 	lsl.w	r3, r1, r4
 8008226:	ea40 0003 	orr.w	r0, r0, r3
 800822a:	4629      	mov	r1, r5
 800822c:	bd30      	pop	{r4, r5, pc}
 800822e:	fa21 f004 	lsr.w	r0, r1, r4
 8008232:	4629      	mov	r1, r5
 8008234:	bd30      	pop	{r4, r5, pc}
 8008236:	f094 0f00 	teq	r4, #0
 800823a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800823e:	bf06      	itte	eq
 8008240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008244:	3401      	addeq	r4, #1
 8008246:	3d01      	subne	r5, #1
 8008248:	e74e      	b.n	80080e8 <__adddf3+0x8c>
 800824a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800824e:	bf18      	it	ne
 8008250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008254:	d029      	beq.n	80082aa <__adddf3+0x24e>
 8008256:	ea94 0f05 	teq	r4, r5
 800825a:	bf08      	it	eq
 800825c:	ea90 0f02 	teqeq	r0, r2
 8008260:	d005      	beq.n	800826e <__adddf3+0x212>
 8008262:	ea54 0c00 	orrs.w	ip, r4, r0
 8008266:	bf04      	itt	eq
 8008268:	4619      	moveq	r1, r3
 800826a:	4610      	moveq	r0, r2
 800826c:	bd30      	pop	{r4, r5, pc}
 800826e:	ea91 0f03 	teq	r1, r3
 8008272:	bf1e      	ittt	ne
 8008274:	2100      	movne	r1, #0
 8008276:	2000      	movne	r0, #0
 8008278:	bd30      	popne	{r4, r5, pc}
 800827a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800827e:	d105      	bne.n	800828c <__adddf3+0x230>
 8008280:	0040      	lsls	r0, r0, #1
 8008282:	4149      	adcs	r1, r1
 8008284:	bf28      	it	cs
 8008286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800828a:	bd30      	pop	{r4, r5, pc}
 800828c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008290:	bf3c      	itt	cc
 8008292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008296:	bd30      	popcc	{r4, r5, pc}
 8008298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800829c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80082a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082a4:	f04f 0000 	mov.w	r0, #0
 80082a8:	bd30      	pop	{r4, r5, pc}
 80082aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ae:	bf1a      	itte	ne
 80082b0:	4619      	movne	r1, r3
 80082b2:	4610      	movne	r0, r2
 80082b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80082b8:	bf1c      	itt	ne
 80082ba:	460b      	movne	r3, r1
 80082bc:	4602      	movne	r2, r0
 80082be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80082c2:	bf06      	itte	eq
 80082c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80082c8:	ea91 0f03 	teqeq	r1, r3
 80082cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80082d0:	bd30      	pop	{r4, r5, pc}
 80082d2:	bf00      	nop

080082d4 <__aeabi_ui2d>:
 80082d4:	f090 0f00 	teq	r0, #0
 80082d8:	bf04      	itt	eq
 80082da:	2100      	moveq	r1, #0
 80082dc:	4770      	bxeq	lr
 80082de:	b530      	push	{r4, r5, lr}
 80082e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80082e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80082e8:	f04f 0500 	mov.w	r5, #0
 80082ec:	f04f 0100 	mov.w	r1, #0
 80082f0:	e750      	b.n	8008194 <__adddf3+0x138>
 80082f2:	bf00      	nop

080082f4 <__aeabi_i2d>:
 80082f4:	f090 0f00 	teq	r0, #0
 80082f8:	bf04      	itt	eq
 80082fa:	2100      	moveq	r1, #0
 80082fc:	4770      	bxeq	lr
 80082fe:	b530      	push	{r4, r5, lr}
 8008300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800830c:	bf48      	it	mi
 800830e:	4240      	negmi	r0, r0
 8008310:	f04f 0100 	mov.w	r1, #0
 8008314:	e73e      	b.n	8008194 <__adddf3+0x138>
 8008316:	bf00      	nop

08008318 <__aeabi_f2d>:
 8008318:	0042      	lsls	r2, r0, #1
 800831a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800831e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008322:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008326:	bf1f      	itttt	ne
 8008328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800832c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008334:	4770      	bxne	lr
 8008336:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800833a:	bf08      	it	eq
 800833c:	4770      	bxeq	lr
 800833e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008342:	bf04      	itt	eq
 8008344:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008348:	4770      	bxeq	lr
 800834a:	b530      	push	{r4, r5, lr}
 800834c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008358:	e71c      	b.n	8008194 <__adddf3+0x138>
 800835a:	bf00      	nop

0800835c <__aeabi_ul2d>:
 800835c:	ea50 0201 	orrs.w	r2, r0, r1
 8008360:	bf08      	it	eq
 8008362:	4770      	bxeq	lr
 8008364:	b530      	push	{r4, r5, lr}
 8008366:	f04f 0500 	mov.w	r5, #0
 800836a:	e00a      	b.n	8008382 <__aeabi_l2d+0x16>

0800836c <__aeabi_l2d>:
 800836c:	ea50 0201 	orrs.w	r2, r0, r1
 8008370:	bf08      	it	eq
 8008372:	4770      	bxeq	lr
 8008374:	b530      	push	{r4, r5, lr}
 8008376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800837a:	d502      	bpl.n	8008382 <__aeabi_l2d+0x16>
 800837c:	4240      	negs	r0, r0
 800837e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800838a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800838e:	f43f aed8 	beq.w	8008142 <__adddf3+0xe6>
 8008392:	f04f 0203 	mov.w	r2, #3
 8008396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800839a:	bf18      	it	ne
 800839c:	3203      	addne	r2, #3
 800839e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80083a2:	bf18      	it	ne
 80083a4:	3203      	addne	r2, #3
 80083a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80083aa:	f1c2 0320 	rsb	r3, r2, #32
 80083ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80083b2:	fa20 f002 	lsr.w	r0, r0, r2
 80083b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80083ba:	ea40 000e 	orr.w	r0, r0, lr
 80083be:	fa21 f102 	lsr.w	r1, r1, r2
 80083c2:	4414      	add	r4, r2
 80083c4:	e6bd      	b.n	8008142 <__adddf3+0xe6>
 80083c6:	bf00      	nop

080083c8 <__aeabi_dmul>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80083ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80083d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80083d6:	bf1d      	ittte	ne
 80083d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80083dc:	ea94 0f0c 	teqne	r4, ip
 80083e0:	ea95 0f0c 	teqne	r5, ip
 80083e4:	f000 f8de 	bleq	80085a4 <__aeabi_dmul+0x1dc>
 80083e8:	442c      	add	r4, r5
 80083ea:	ea81 0603 	eor.w	r6, r1, r3
 80083ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80083f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80083f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80083fa:	bf18      	it	ne
 80083fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008408:	d038      	beq.n	800847c <__aeabi_dmul+0xb4>
 800840a:	fba0 ce02 	umull	ip, lr, r0, r2
 800840e:	f04f 0500 	mov.w	r5, #0
 8008412:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800841a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800841e:	f04f 0600 	mov.w	r6, #0
 8008422:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008426:	f09c 0f00 	teq	ip, #0
 800842a:	bf18      	it	ne
 800842c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800843c:	d204      	bcs.n	8008448 <__aeabi_dmul+0x80>
 800843e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008442:	416d      	adcs	r5, r5
 8008444:	eb46 0606 	adc.w	r6, r6, r6
 8008448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800844c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800845c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008460:	bf88      	it	hi
 8008462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008466:	d81e      	bhi.n	80084a6 <__aeabi_dmul+0xde>
 8008468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800846c:	bf08      	it	eq
 800846e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008472:	f150 0000 	adcs.w	r0, r0, #0
 8008476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008480:	ea46 0101 	orr.w	r1, r6, r1
 8008484:	ea40 0002 	orr.w	r0, r0, r2
 8008488:	ea81 0103 	eor.w	r1, r1, r3
 800848c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008490:	bfc2      	ittt	gt
 8008492:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800849a:	bd70      	popgt	{r4, r5, r6, pc}
 800849c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a0:	f04f 0e00 	mov.w	lr, #0
 80084a4:	3c01      	subs	r4, #1
 80084a6:	f300 80ab 	bgt.w	8008600 <__aeabi_dmul+0x238>
 80084aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80084ae:	bfde      	ittt	le
 80084b0:	2000      	movle	r0, #0
 80084b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80084b6:	bd70      	pople	{r4, r5, r6, pc}
 80084b8:	f1c4 0400 	rsb	r4, r4, #0
 80084bc:	3c20      	subs	r4, #32
 80084be:	da35      	bge.n	800852c <__aeabi_dmul+0x164>
 80084c0:	340c      	adds	r4, #12
 80084c2:	dc1b      	bgt.n	80084fc <__aeabi_dmul+0x134>
 80084c4:	f104 0414 	add.w	r4, r4, #20
 80084c8:	f1c4 0520 	rsb	r5, r4, #32
 80084cc:	fa00 f305 	lsl.w	r3, r0, r5
 80084d0:	fa20 f004 	lsr.w	r0, r0, r4
 80084d4:	fa01 f205 	lsl.w	r2, r1, r5
 80084d8:	ea40 0002 	orr.w	r0, r0, r2
 80084dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80084e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80084e8:	fa21 f604 	lsr.w	r6, r1, r4
 80084ec:	eb42 0106 	adc.w	r1, r2, r6
 80084f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80084f4:	bf08      	it	eq
 80084f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	f1c4 040c 	rsb	r4, r4, #12
 8008500:	f1c4 0520 	rsb	r5, r4, #32
 8008504:	fa00 f304 	lsl.w	r3, r0, r4
 8008508:	fa20 f005 	lsr.w	r0, r0, r5
 800850c:	fa01 f204 	lsl.w	r2, r1, r4
 8008510:	ea40 0002 	orr.w	r0, r0, r2
 8008514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800851c:	f141 0100 	adc.w	r1, r1, #0
 8008520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008524:	bf08      	it	eq
 8008526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	f1c4 0520 	rsb	r5, r4, #32
 8008530:	fa00 f205 	lsl.w	r2, r0, r5
 8008534:	ea4e 0e02 	orr.w	lr, lr, r2
 8008538:	fa20 f304 	lsr.w	r3, r0, r4
 800853c:	fa01 f205 	lsl.w	r2, r1, r5
 8008540:	ea43 0302 	orr.w	r3, r3, r2
 8008544:	fa21 f004 	lsr.w	r0, r1, r4
 8008548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800854c:	fa21 f204 	lsr.w	r2, r1, r4
 8008550:	ea20 0002 	bic.w	r0, r0, r2
 8008554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800855c:	bf08      	it	eq
 800855e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	f094 0f00 	teq	r4, #0
 8008568:	d10f      	bne.n	800858a <__aeabi_dmul+0x1c2>
 800856a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800856e:	0040      	lsls	r0, r0, #1
 8008570:	eb41 0101 	adc.w	r1, r1, r1
 8008574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008578:	bf08      	it	eq
 800857a:	3c01      	subeq	r4, #1
 800857c:	d0f7      	beq.n	800856e <__aeabi_dmul+0x1a6>
 800857e:	ea41 0106 	orr.w	r1, r1, r6
 8008582:	f095 0f00 	teq	r5, #0
 8008586:	bf18      	it	ne
 8008588:	4770      	bxne	lr
 800858a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800858e:	0052      	lsls	r2, r2, #1
 8008590:	eb43 0303 	adc.w	r3, r3, r3
 8008594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008598:	bf08      	it	eq
 800859a:	3d01      	subeq	r5, #1
 800859c:	d0f7      	beq.n	800858e <__aeabi_dmul+0x1c6>
 800859e:	ea43 0306 	orr.w	r3, r3, r6
 80085a2:	4770      	bx	lr
 80085a4:	ea94 0f0c 	teq	r4, ip
 80085a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085ac:	bf18      	it	ne
 80085ae:	ea95 0f0c 	teqne	r5, ip
 80085b2:	d00c      	beq.n	80085ce <__aeabi_dmul+0x206>
 80085b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085b8:	bf18      	it	ne
 80085ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085be:	d1d1      	bne.n	8008564 <__aeabi_dmul+0x19c>
 80085c0:	ea81 0103 	eor.w	r1, r1, r3
 80085c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085c8:	f04f 0000 	mov.w	r0, #0
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085d2:	bf06      	itte	eq
 80085d4:	4610      	moveq	r0, r2
 80085d6:	4619      	moveq	r1, r3
 80085d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085dc:	d019      	beq.n	8008612 <__aeabi_dmul+0x24a>
 80085de:	ea94 0f0c 	teq	r4, ip
 80085e2:	d102      	bne.n	80085ea <__aeabi_dmul+0x222>
 80085e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80085e8:	d113      	bne.n	8008612 <__aeabi_dmul+0x24a>
 80085ea:	ea95 0f0c 	teq	r5, ip
 80085ee:	d105      	bne.n	80085fc <__aeabi_dmul+0x234>
 80085f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80085f4:	bf1c      	itt	ne
 80085f6:	4610      	movne	r0, r2
 80085f8:	4619      	movne	r1, r3
 80085fa:	d10a      	bne.n	8008612 <__aeabi_dmul+0x24a>
 80085fc:	ea81 0103 	eor.w	r1, r1, r3
 8008600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800860c:	f04f 0000 	mov.w	r0, #0
 8008610:	bd70      	pop	{r4, r5, r6, pc}
 8008612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800861a:	bd70      	pop	{r4, r5, r6, pc}

0800861c <__aeabi_ddiv>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800862a:	bf1d      	ittte	ne
 800862c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008630:	ea94 0f0c 	teqne	r4, ip
 8008634:	ea95 0f0c 	teqne	r5, ip
 8008638:	f000 f8a7 	bleq	800878a <__aeabi_ddiv+0x16e>
 800863c:	eba4 0405 	sub.w	r4, r4, r5
 8008640:	ea81 0e03 	eor.w	lr, r1, r3
 8008644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800864c:	f000 8088 	beq.w	8008760 <__aeabi_ddiv+0x144>
 8008650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800865c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800866c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008674:	429d      	cmp	r5, r3
 8008676:	bf08      	it	eq
 8008678:	4296      	cmpeq	r6, r2
 800867a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800867e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008682:	d202      	bcs.n	800868a <__aeabi_ddiv+0x6e>
 8008684:	085b      	lsrs	r3, r3, #1
 8008686:	ea4f 0232 	mov.w	r2, r2, rrx
 800868a:	1ab6      	subs	r6, r6, r2
 800868c:	eb65 0503 	sbc.w	r5, r5, r3
 8008690:	085b      	lsrs	r3, r3, #1
 8008692:	ea4f 0232 	mov.w	r2, r2, rrx
 8008696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800869a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800869e:	ebb6 0e02 	subs.w	lr, r6, r2
 80086a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086a6:	bf22      	ittt	cs
 80086a8:	1ab6      	subcs	r6, r6, r2
 80086aa:	4675      	movcs	r5, lr
 80086ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80086b0:	085b      	lsrs	r3, r3, #1
 80086b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80086ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086be:	bf22      	ittt	cs
 80086c0:	1ab6      	subcs	r6, r6, r2
 80086c2:	4675      	movcs	r5, lr
 80086c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80086ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80086d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086d6:	bf22      	ittt	cs
 80086d8:	1ab6      	subcs	r6, r6, r2
 80086da:	4675      	movcs	r5, lr
 80086dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80086e0:	085b      	lsrs	r3, r3, #1
 80086e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80086ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086ee:	bf22      	ittt	cs
 80086f0:	1ab6      	subcs	r6, r6, r2
 80086f2:	4675      	movcs	r5, lr
 80086f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80086f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80086fc:	d018      	beq.n	8008730 <__aeabi_ddiv+0x114>
 80086fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800870a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800870e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800871a:	d1c0      	bne.n	800869e <__aeabi_ddiv+0x82>
 800871c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008720:	d10b      	bne.n	800873a <__aeabi_ddiv+0x11e>
 8008722:	ea41 0100 	orr.w	r1, r1, r0
 8008726:	f04f 0000 	mov.w	r0, #0
 800872a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800872e:	e7b6      	b.n	800869e <__aeabi_ddiv+0x82>
 8008730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008734:	bf04      	itt	eq
 8008736:	4301      	orreq	r1, r0
 8008738:	2000      	moveq	r0, #0
 800873a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800873e:	bf88      	it	hi
 8008740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008744:	f63f aeaf 	bhi.w	80084a6 <__aeabi_dmul+0xde>
 8008748:	ebb5 0c03 	subs.w	ip, r5, r3
 800874c:	bf04      	itt	eq
 800874e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008756:	f150 0000 	adcs.w	r0, r0, #0
 800875a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800876c:	bfc2      	ittt	gt
 800876e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008776:	bd70      	popgt	{r4, r5, r6, pc}
 8008778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800877c:	f04f 0e00 	mov.w	lr, #0
 8008780:	3c01      	subs	r4, #1
 8008782:	e690      	b.n	80084a6 <__aeabi_dmul+0xde>
 8008784:	ea45 0e06 	orr.w	lr, r5, r6
 8008788:	e68d      	b.n	80084a6 <__aeabi_dmul+0xde>
 800878a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800878e:	ea94 0f0c 	teq	r4, ip
 8008792:	bf08      	it	eq
 8008794:	ea95 0f0c 	teqeq	r5, ip
 8008798:	f43f af3b 	beq.w	8008612 <__aeabi_dmul+0x24a>
 800879c:	ea94 0f0c 	teq	r4, ip
 80087a0:	d10a      	bne.n	80087b8 <__aeabi_ddiv+0x19c>
 80087a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80087a6:	f47f af34 	bne.w	8008612 <__aeabi_dmul+0x24a>
 80087aa:	ea95 0f0c 	teq	r5, ip
 80087ae:	f47f af25 	bne.w	80085fc <__aeabi_dmul+0x234>
 80087b2:	4610      	mov	r0, r2
 80087b4:	4619      	mov	r1, r3
 80087b6:	e72c      	b.n	8008612 <__aeabi_dmul+0x24a>
 80087b8:	ea95 0f0c 	teq	r5, ip
 80087bc:	d106      	bne.n	80087cc <__aeabi_ddiv+0x1b0>
 80087be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80087c2:	f43f aefd 	beq.w	80085c0 <__aeabi_dmul+0x1f8>
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	e722      	b.n	8008612 <__aeabi_dmul+0x24a>
 80087cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087d0:	bf18      	it	ne
 80087d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087d6:	f47f aec5 	bne.w	8008564 <__aeabi_dmul+0x19c>
 80087da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80087de:	f47f af0d 	bne.w	80085fc <__aeabi_dmul+0x234>
 80087e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80087e6:	f47f aeeb 	bne.w	80085c0 <__aeabi_dmul+0x1f8>
 80087ea:	e712      	b.n	8008612 <__aeabi_dmul+0x24a>

080087ec <__gedf2>:
 80087ec:	f04f 3cff 	mov.w	ip, #4294967295
 80087f0:	e006      	b.n	8008800 <__cmpdf2+0x4>
 80087f2:	bf00      	nop

080087f4 <__ledf2>:
 80087f4:	f04f 0c01 	mov.w	ip, #1
 80087f8:	e002      	b.n	8008800 <__cmpdf2+0x4>
 80087fa:	bf00      	nop

080087fc <__cmpdf2>:
 80087fc:	f04f 0c01 	mov.w	ip, #1
 8008800:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800880c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008810:	bf18      	it	ne
 8008812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008816:	d01b      	beq.n	8008850 <__cmpdf2+0x54>
 8008818:	b001      	add	sp, #4
 800881a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800881e:	bf0c      	ite	eq
 8008820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008824:	ea91 0f03 	teqne	r1, r3
 8008828:	bf02      	ittt	eq
 800882a:	ea90 0f02 	teqeq	r0, r2
 800882e:	2000      	moveq	r0, #0
 8008830:	4770      	bxeq	lr
 8008832:	f110 0f00 	cmn.w	r0, #0
 8008836:	ea91 0f03 	teq	r1, r3
 800883a:	bf58      	it	pl
 800883c:	4299      	cmppl	r1, r3
 800883e:	bf08      	it	eq
 8008840:	4290      	cmpeq	r0, r2
 8008842:	bf2c      	ite	cs
 8008844:	17d8      	asrcs	r0, r3, #31
 8008846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800884a:	f040 0001 	orr.w	r0, r0, #1
 800884e:	4770      	bx	lr
 8008850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008858:	d102      	bne.n	8008860 <__cmpdf2+0x64>
 800885a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800885e:	d107      	bne.n	8008870 <__cmpdf2+0x74>
 8008860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008868:	d1d6      	bne.n	8008818 <__cmpdf2+0x1c>
 800886a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800886e:	d0d3      	beq.n	8008818 <__cmpdf2+0x1c>
 8008870:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop

08008878 <__aeabi_cdrcmple>:
 8008878:	4684      	mov	ip, r0
 800887a:	4610      	mov	r0, r2
 800887c:	4662      	mov	r2, ip
 800887e:	468c      	mov	ip, r1
 8008880:	4619      	mov	r1, r3
 8008882:	4663      	mov	r3, ip
 8008884:	e000      	b.n	8008888 <__aeabi_cdcmpeq>
 8008886:	bf00      	nop

08008888 <__aeabi_cdcmpeq>:
 8008888:	b501      	push	{r0, lr}
 800888a:	f7ff ffb7 	bl	80087fc <__cmpdf2>
 800888e:	2800      	cmp	r0, #0
 8008890:	bf48      	it	mi
 8008892:	f110 0f00 	cmnmi.w	r0, #0
 8008896:	bd01      	pop	{r0, pc}

08008898 <__aeabi_dcmpeq>:
 8008898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800889c:	f7ff fff4 	bl	8008888 <__aeabi_cdcmpeq>
 80088a0:	bf0c      	ite	eq
 80088a2:	2001      	moveq	r0, #1
 80088a4:	2000      	movne	r0, #0
 80088a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80088aa:	bf00      	nop

080088ac <__aeabi_dcmplt>:
 80088ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088b0:	f7ff ffea 	bl	8008888 <__aeabi_cdcmpeq>
 80088b4:	bf34      	ite	cc
 80088b6:	2001      	movcc	r0, #1
 80088b8:	2000      	movcs	r0, #0
 80088ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80088be:	bf00      	nop

080088c0 <__aeabi_dcmple>:
 80088c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088c4:	f7ff ffe0 	bl	8008888 <__aeabi_cdcmpeq>
 80088c8:	bf94      	ite	ls
 80088ca:	2001      	movls	r0, #1
 80088cc:	2000      	movhi	r0, #0
 80088ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80088d2:	bf00      	nop

080088d4 <__aeabi_dcmpge>:
 80088d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088d8:	f7ff ffce 	bl	8008878 <__aeabi_cdrcmple>
 80088dc:	bf94      	ite	ls
 80088de:	2001      	movls	r0, #1
 80088e0:	2000      	movhi	r0, #0
 80088e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80088e6:	bf00      	nop

080088e8 <__aeabi_dcmpgt>:
 80088e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088ec:	f7ff ffc4 	bl	8008878 <__aeabi_cdrcmple>
 80088f0:	bf34      	ite	cc
 80088f2:	2001      	movcc	r0, #1
 80088f4:	2000      	movcs	r0, #0
 80088f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80088fa:	bf00      	nop

080088fc <__aeabi_dcmpun>:
 80088fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008904:	d102      	bne.n	800890c <__aeabi_dcmpun+0x10>
 8008906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800890a:	d10a      	bne.n	8008922 <__aeabi_dcmpun+0x26>
 800890c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008914:	d102      	bne.n	800891c <__aeabi_dcmpun+0x20>
 8008916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800891a:	d102      	bne.n	8008922 <__aeabi_dcmpun+0x26>
 800891c:	f04f 0000 	mov.w	r0, #0
 8008920:	4770      	bx	lr
 8008922:	f04f 0001 	mov.w	r0, #1
 8008926:	4770      	bx	lr

08008928 <__aeabi_d2iz>:
 8008928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800892c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008930:	d215      	bcs.n	800895e <__aeabi_d2iz+0x36>
 8008932:	d511      	bpl.n	8008958 <__aeabi_d2iz+0x30>
 8008934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800893c:	d912      	bls.n	8008964 <__aeabi_d2iz+0x3c>
 800893e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800894a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800894e:	fa23 f002 	lsr.w	r0, r3, r2
 8008952:	bf18      	it	ne
 8008954:	4240      	negne	r0, r0
 8008956:	4770      	bx	lr
 8008958:	f04f 0000 	mov.w	r0, #0
 800895c:	4770      	bx	lr
 800895e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008962:	d105      	bne.n	8008970 <__aeabi_d2iz+0x48>
 8008964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008968:	bf08      	it	eq
 800896a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800896e:	4770      	bx	lr
 8008970:	f04f 0000 	mov.w	r0, #0
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <__aeabi_d2f>:
 8008978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800897c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008980:	bf24      	itt	cs
 8008982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800898a:	d90d      	bls.n	80089a8 <__aeabi_d2f+0x30>
 800898c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800899c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80089a0:	bf08      	it	eq
 80089a2:	f020 0001 	biceq.w	r0, r0, #1
 80089a6:	4770      	bx	lr
 80089a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80089ac:	d121      	bne.n	80089f2 <__aeabi_d2f+0x7a>
 80089ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80089b2:	bfbc      	itt	lt
 80089b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80089b8:	4770      	bxlt	lr
 80089ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80089c2:	f1c2 0218 	rsb	r2, r2, #24
 80089c6:	f1c2 0c20 	rsb	ip, r2, #32
 80089ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80089ce:	fa20 f002 	lsr.w	r0, r0, r2
 80089d2:	bf18      	it	ne
 80089d4:	f040 0001 	orrne.w	r0, r0, #1
 80089d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80089e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80089e4:	ea40 000c 	orr.w	r0, r0, ip
 80089e8:	fa23 f302 	lsr.w	r3, r3, r2
 80089ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089f0:	e7cc      	b.n	800898c <__aeabi_d2f+0x14>
 80089f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80089f6:	d107      	bne.n	8008a08 <__aeabi_d2f+0x90>
 80089f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80089fc:	bf1e      	ittt	ne
 80089fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a06:	4770      	bxne	lr
 8008a08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_uldivmod>:
 8008a18:	b953      	cbnz	r3, 8008a30 <__aeabi_uldivmod+0x18>
 8008a1a:	b94a      	cbnz	r2, 8008a30 <__aeabi_uldivmod+0x18>
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	bf08      	it	eq
 8008a20:	2800      	cmpeq	r0, #0
 8008a22:	bf1c      	itt	ne
 8008a24:	f04f 31ff 	movne.w	r1, #4294967295
 8008a28:	f04f 30ff 	movne.w	r0, #4294967295
 8008a2c:	f000 b972 	b.w	8008d14 <__aeabi_idiv0>
 8008a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a38:	f000 f806 	bl	8008a48 <__udivmoddi4>
 8008a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a44:	b004      	add	sp, #16
 8008a46:	4770      	bx	lr

08008a48 <__udivmoddi4>:
 8008a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	9e08      	ldr	r6, [sp, #32]
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4688      	mov	r8, r1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d14b      	bne.n	8008aee <__udivmoddi4+0xa6>
 8008a56:	428a      	cmp	r2, r1
 8008a58:	4615      	mov	r5, r2
 8008a5a:	d967      	bls.n	8008b2c <__udivmoddi4+0xe4>
 8008a5c:	fab2 f282 	clz	r2, r2
 8008a60:	b14a      	cbz	r2, 8008a76 <__udivmoddi4+0x2e>
 8008a62:	f1c2 0720 	rsb	r7, r2, #32
 8008a66:	fa01 f302 	lsl.w	r3, r1, r2
 8008a6a:	fa20 f707 	lsr.w	r7, r0, r7
 8008a6e:	4095      	lsls	r5, r2
 8008a70:	ea47 0803 	orr.w	r8, r7, r3
 8008a74:	4094      	lsls	r4, r2
 8008a76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008a7a:	0c23      	lsrs	r3, r4, #16
 8008a7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008a80:	fa1f fc85 	uxth.w	ip, r5
 8008a84:	fb0e 8817 	mls	r8, lr, r7, r8
 8008a88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008a8c:	fb07 f10c 	mul.w	r1, r7, ip
 8008a90:	4299      	cmp	r1, r3
 8008a92:	d909      	bls.n	8008aa8 <__udivmoddi4+0x60>
 8008a94:	18eb      	adds	r3, r5, r3
 8008a96:	f107 30ff 	add.w	r0, r7, #4294967295
 8008a9a:	f080 811b 	bcs.w	8008cd4 <__udivmoddi4+0x28c>
 8008a9e:	4299      	cmp	r1, r3
 8008aa0:	f240 8118 	bls.w	8008cd4 <__udivmoddi4+0x28c>
 8008aa4:	3f02      	subs	r7, #2
 8008aa6:	442b      	add	r3, r5
 8008aa8:	1a5b      	subs	r3, r3, r1
 8008aaa:	b2a4      	uxth	r4, r4
 8008aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8008ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8008ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008ab8:	fb00 fc0c 	mul.w	ip, r0, ip
 8008abc:	45a4      	cmp	ip, r4
 8008abe:	d909      	bls.n	8008ad4 <__udivmoddi4+0x8c>
 8008ac0:	192c      	adds	r4, r5, r4
 8008ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ac6:	f080 8107 	bcs.w	8008cd8 <__udivmoddi4+0x290>
 8008aca:	45a4      	cmp	ip, r4
 8008acc:	f240 8104 	bls.w	8008cd8 <__udivmoddi4+0x290>
 8008ad0:	3802      	subs	r0, #2
 8008ad2:	442c      	add	r4, r5
 8008ad4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008ad8:	eba4 040c 	sub.w	r4, r4, ip
 8008adc:	2700      	movs	r7, #0
 8008ade:	b11e      	cbz	r6, 8008ae8 <__udivmoddi4+0xa0>
 8008ae0:	40d4      	lsrs	r4, r2
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e9c6 4300 	strd	r4, r3, [r6]
 8008ae8:	4639      	mov	r1, r7
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	428b      	cmp	r3, r1
 8008af0:	d909      	bls.n	8008b06 <__udivmoddi4+0xbe>
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	f000 80eb 	beq.w	8008cce <__udivmoddi4+0x286>
 8008af8:	2700      	movs	r7, #0
 8008afa:	e9c6 0100 	strd	r0, r1, [r6]
 8008afe:	4638      	mov	r0, r7
 8008b00:	4639      	mov	r1, r7
 8008b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b06:	fab3 f783 	clz	r7, r3
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	d147      	bne.n	8008b9e <__udivmoddi4+0x156>
 8008b0e:	428b      	cmp	r3, r1
 8008b10:	d302      	bcc.n	8008b18 <__udivmoddi4+0xd0>
 8008b12:	4282      	cmp	r2, r0
 8008b14:	f200 80fa 	bhi.w	8008d0c <__udivmoddi4+0x2c4>
 8008b18:	1a84      	subs	r4, r0, r2
 8008b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8008b1e:	2001      	movs	r0, #1
 8008b20:	4698      	mov	r8, r3
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	d0e0      	beq.n	8008ae8 <__udivmoddi4+0xa0>
 8008b26:	e9c6 4800 	strd	r4, r8, [r6]
 8008b2a:	e7dd      	b.n	8008ae8 <__udivmoddi4+0xa0>
 8008b2c:	b902      	cbnz	r2, 8008b30 <__udivmoddi4+0xe8>
 8008b2e:	deff      	udf	#255	; 0xff
 8008b30:	fab2 f282 	clz	r2, r2
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	f040 808f 	bne.w	8008c58 <__udivmoddi4+0x210>
 8008b3a:	1b49      	subs	r1, r1, r5
 8008b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b40:	fa1f f885 	uxth.w	r8, r5
 8008b44:	2701      	movs	r7, #1
 8008b46:	fbb1 fcfe 	udiv	ip, r1, lr
 8008b4a:	0c23      	lsrs	r3, r4, #16
 8008b4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b54:	fb08 f10c 	mul.w	r1, r8, ip
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d907      	bls.n	8008b6c <__udivmoddi4+0x124>
 8008b5c:	18eb      	adds	r3, r5, r3
 8008b5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008b62:	d202      	bcs.n	8008b6a <__udivmoddi4+0x122>
 8008b64:	4299      	cmp	r1, r3
 8008b66:	f200 80cd 	bhi.w	8008d04 <__udivmoddi4+0x2bc>
 8008b6a:	4684      	mov	ip, r0
 8008b6c:	1a59      	subs	r1, r3, r1
 8008b6e:	b2a3      	uxth	r3, r4
 8008b70:	fbb1 f0fe 	udiv	r0, r1, lr
 8008b74:	fb0e 1410 	mls	r4, lr, r0, r1
 8008b78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b7c:	fb08 f800 	mul.w	r8, r8, r0
 8008b80:	45a0      	cmp	r8, r4
 8008b82:	d907      	bls.n	8008b94 <__udivmoddi4+0x14c>
 8008b84:	192c      	adds	r4, r5, r4
 8008b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b8a:	d202      	bcs.n	8008b92 <__udivmoddi4+0x14a>
 8008b8c:	45a0      	cmp	r8, r4
 8008b8e:	f200 80b6 	bhi.w	8008cfe <__udivmoddi4+0x2b6>
 8008b92:	4618      	mov	r0, r3
 8008b94:	eba4 0408 	sub.w	r4, r4, r8
 8008b98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008b9c:	e79f      	b.n	8008ade <__udivmoddi4+0x96>
 8008b9e:	f1c7 0c20 	rsb	ip, r7, #32
 8008ba2:	40bb      	lsls	r3, r7
 8008ba4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008ba8:	ea4e 0e03 	orr.w	lr, lr, r3
 8008bac:	fa01 f407 	lsl.w	r4, r1, r7
 8008bb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8008bb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8008bb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008bbc:	4325      	orrs	r5, r4
 8008bbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8008bc2:	0c2c      	lsrs	r4, r5, #16
 8008bc4:	fb08 3319 	mls	r3, r8, r9, r3
 8008bc8:	fa1f fa8e 	uxth.w	sl, lr
 8008bcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008bd0:	fb09 f40a 	mul.w	r4, r9, sl
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	fa02 f207 	lsl.w	r2, r2, r7
 8008bda:	fa00 f107 	lsl.w	r1, r0, r7
 8008bde:	d90b      	bls.n	8008bf8 <__udivmoddi4+0x1b0>
 8008be0:	eb1e 0303 	adds.w	r3, lr, r3
 8008be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008be8:	f080 8087 	bcs.w	8008cfa <__udivmoddi4+0x2b2>
 8008bec:	429c      	cmp	r4, r3
 8008bee:	f240 8084 	bls.w	8008cfa <__udivmoddi4+0x2b2>
 8008bf2:	f1a9 0902 	sub.w	r9, r9, #2
 8008bf6:	4473      	add	r3, lr
 8008bf8:	1b1b      	subs	r3, r3, r4
 8008bfa:	b2ad      	uxth	r5, r5
 8008bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c00:	fb08 3310 	mls	r3, r8, r0, r3
 8008c04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008c08:	fb00 fa0a 	mul.w	sl, r0, sl
 8008c0c:	45a2      	cmp	sl, r4
 8008c0e:	d908      	bls.n	8008c22 <__udivmoddi4+0x1da>
 8008c10:	eb1e 0404 	adds.w	r4, lr, r4
 8008c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c18:	d26b      	bcs.n	8008cf2 <__udivmoddi4+0x2aa>
 8008c1a:	45a2      	cmp	sl, r4
 8008c1c:	d969      	bls.n	8008cf2 <__udivmoddi4+0x2aa>
 8008c1e:	3802      	subs	r0, #2
 8008c20:	4474      	add	r4, lr
 8008c22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008c26:	fba0 8902 	umull	r8, r9, r0, r2
 8008c2a:	eba4 040a 	sub.w	r4, r4, sl
 8008c2e:	454c      	cmp	r4, r9
 8008c30:	46c2      	mov	sl, r8
 8008c32:	464b      	mov	r3, r9
 8008c34:	d354      	bcc.n	8008ce0 <__udivmoddi4+0x298>
 8008c36:	d051      	beq.n	8008cdc <__udivmoddi4+0x294>
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	d069      	beq.n	8008d10 <__udivmoddi4+0x2c8>
 8008c3c:	ebb1 050a 	subs.w	r5, r1, sl
 8008c40:	eb64 0403 	sbc.w	r4, r4, r3
 8008c44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008c48:	40fd      	lsrs	r5, r7
 8008c4a:	40fc      	lsrs	r4, r7
 8008c4c:	ea4c 0505 	orr.w	r5, ip, r5
 8008c50:	e9c6 5400 	strd	r5, r4, [r6]
 8008c54:	2700      	movs	r7, #0
 8008c56:	e747      	b.n	8008ae8 <__udivmoddi4+0xa0>
 8008c58:	f1c2 0320 	rsb	r3, r2, #32
 8008c5c:	fa20 f703 	lsr.w	r7, r0, r3
 8008c60:	4095      	lsls	r5, r2
 8008c62:	fa01 f002 	lsl.w	r0, r1, r2
 8008c66:	fa21 f303 	lsr.w	r3, r1, r3
 8008c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c6e:	4338      	orrs	r0, r7
 8008c70:	0c01      	lsrs	r1, r0, #16
 8008c72:	fbb3 f7fe 	udiv	r7, r3, lr
 8008c76:	fa1f f885 	uxth.w	r8, r5
 8008c7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008c7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c82:	fb07 f308 	mul.w	r3, r7, r8
 8008c86:	428b      	cmp	r3, r1
 8008c88:	fa04 f402 	lsl.w	r4, r4, r2
 8008c8c:	d907      	bls.n	8008c9e <__udivmoddi4+0x256>
 8008c8e:	1869      	adds	r1, r5, r1
 8008c90:	f107 3cff 	add.w	ip, r7, #4294967295
 8008c94:	d22f      	bcs.n	8008cf6 <__udivmoddi4+0x2ae>
 8008c96:	428b      	cmp	r3, r1
 8008c98:	d92d      	bls.n	8008cf6 <__udivmoddi4+0x2ae>
 8008c9a:	3f02      	subs	r7, #2
 8008c9c:	4429      	add	r1, r5
 8008c9e:	1acb      	subs	r3, r1, r3
 8008ca0:	b281      	uxth	r1, r0
 8008ca2:	fbb3 f0fe 	udiv	r0, r3, lr
 8008ca6:	fb0e 3310 	mls	r3, lr, r0, r3
 8008caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cae:	fb00 f308 	mul.w	r3, r0, r8
 8008cb2:	428b      	cmp	r3, r1
 8008cb4:	d907      	bls.n	8008cc6 <__udivmoddi4+0x27e>
 8008cb6:	1869      	adds	r1, r5, r1
 8008cb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cbc:	d217      	bcs.n	8008cee <__udivmoddi4+0x2a6>
 8008cbe:	428b      	cmp	r3, r1
 8008cc0:	d915      	bls.n	8008cee <__udivmoddi4+0x2a6>
 8008cc2:	3802      	subs	r0, #2
 8008cc4:	4429      	add	r1, r5
 8008cc6:	1ac9      	subs	r1, r1, r3
 8008cc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008ccc:	e73b      	b.n	8008b46 <__udivmoddi4+0xfe>
 8008cce:	4637      	mov	r7, r6
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	e709      	b.n	8008ae8 <__udivmoddi4+0xa0>
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	e6e7      	b.n	8008aa8 <__udivmoddi4+0x60>
 8008cd8:	4618      	mov	r0, r3
 8008cda:	e6fb      	b.n	8008ad4 <__udivmoddi4+0x8c>
 8008cdc:	4541      	cmp	r1, r8
 8008cde:	d2ab      	bcs.n	8008c38 <__udivmoddi4+0x1f0>
 8008ce0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008ce4:	eb69 020e 	sbc.w	r2, r9, lr
 8008ce8:	3801      	subs	r0, #1
 8008cea:	4613      	mov	r3, r2
 8008cec:	e7a4      	b.n	8008c38 <__udivmoddi4+0x1f0>
 8008cee:	4660      	mov	r0, ip
 8008cf0:	e7e9      	b.n	8008cc6 <__udivmoddi4+0x27e>
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	e795      	b.n	8008c22 <__udivmoddi4+0x1da>
 8008cf6:	4667      	mov	r7, ip
 8008cf8:	e7d1      	b.n	8008c9e <__udivmoddi4+0x256>
 8008cfa:	4681      	mov	r9, r0
 8008cfc:	e77c      	b.n	8008bf8 <__udivmoddi4+0x1b0>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	442c      	add	r4, r5
 8008d02:	e747      	b.n	8008b94 <__udivmoddi4+0x14c>
 8008d04:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d08:	442b      	add	r3, r5
 8008d0a:	e72f      	b.n	8008b6c <__udivmoddi4+0x124>
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	e708      	b.n	8008b22 <__udivmoddi4+0xda>
 8008d10:	4637      	mov	r7, r6
 8008d12:	e6e9      	b.n	8008ae8 <__udivmoddi4+0xa0>

08008d14 <__aeabi_idiv0>:
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop

08008d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <HAL_Init+0x40>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0d      	ldr	r2, [pc, #52]	; (8008d58 <HAL_Init+0x40>)
 8008d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d28:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <HAL_Init+0x40>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a0a      	ldr	r2, [pc, #40]	; (8008d58 <HAL_Init+0x40>)
 8008d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <HAL_Init+0x40>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a07      	ldr	r2, [pc, #28]	; (8008d58 <HAL_Init+0x40>)
 8008d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d40:	2003      	movs	r0, #3
 8008d42:	f001 fab5 	bl	800a2b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d46:	2000      	movs	r0, #0
 8008d48:	f000 f808 	bl	8008d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d4c:	f008 fc96 	bl	801167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40023c00 	.word	0x40023c00

08008d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <HAL_InitTick+0x54>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <HAL_InitTick+0x58>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 facd 	bl	800a31a <HAL_SYSTICK_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e00e      	b.n	8008da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b0f      	cmp	r3, #15
 8008d8e:	d80a      	bhi.n	8008da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d90:	2200      	movs	r2, #0
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	f001 fa95 	bl	800a2c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d9c:	4a06      	ldr	r2, [pc, #24]	; (8008db8 <HAL_InitTick+0x5c>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e000      	b.n	8008da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	2000000c 	.word	0x2000000c
 8008db4:	20000004 	.word	0x20000004
 8008db8:	20000000 	.word	0x20000000

08008dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dc0:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <HAL_IncTick+0x20>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <HAL_IncTick+0x24>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4413      	add	r3, r2
 8008dcc:	4a04      	ldr	r2, [pc, #16]	; (8008de0 <HAL_IncTick+0x24>)
 8008dce:	6013      	str	r3, [r2, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20000004 	.word	0x20000004
 8008de0:	200042ac 	.word	0x200042ac

08008de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0
  return uwTick;
 8008de8:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <HAL_GetTick+0x14>)
 8008dea:	681b      	ldr	r3, [r3, #0]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	200042ac 	.word	0x200042ac

08008dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e04:	f7ff ffee 	bl	8008de4 <HAL_GetTick>
 8008e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d005      	beq.n	8008e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <HAL_Delay+0x40>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e22:	bf00      	nop
 8008e24:	f7ff ffde 	bl	8008de4 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d8f7      	bhi.n	8008e24 <HAL_Delay+0x28>
  {
  }
}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000004 	.word	0x20000004

08008e40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e033      	b.n	8008ebe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d109      	bne.n	8008e72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f006 fd1e 	bl	800f8a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	f003 0310 	and.w	r3, r3, #16
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d118      	bne.n	8008eb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e86:	f023 0302 	bic.w	r3, r3, #2
 8008e8a:	f043 0202 	orr.w	r2, r3, #2
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa5a 	bl	800934c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	f023 0303 	bic.w	r3, r3, #3
 8008ea6:	f043 0201 	orr.w	r2, r3, #1
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	641a      	str	r2, [r3, #64]	; 0x40
 8008eae:	e001      	b.n	8008eb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <HAL_ADC_Start_DMA+0x1e>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e0cc      	b.n	8009080 <HAL_ADC_Start_DMA+0x1b8>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d018      	beq.n	8008f2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0201 	orr.w	r2, r2, #1
 8008f0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f0c:	4b5e      	ldr	r3, [pc, #376]	; (8009088 <HAL_ADC_Start_DMA+0x1c0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a5e      	ldr	r2, [pc, #376]	; (800908c <HAL_ADC_Start_DMA+0x1c4>)
 8008f12:	fba2 2303 	umull	r2, r3, r2, r3
 8008f16:	0c9a      	lsrs	r2, r3, #18
 8008f18:	4613      	mov	r3, r2
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	4413      	add	r3, r2
 8008f1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f20:	e002      	b.n	8008f28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f9      	bne.n	8008f22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	f040 80a0 	bne.w	800907e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f46:	f023 0301 	bic.w	r3, r3, #1
 8008f4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f7c:	d106      	bne.n	8008f8c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f82:	f023 0206 	bic.w	r2, r3, #6
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	645a      	str	r2, [r3, #68]	; 0x44
 8008f8a:	e002      	b.n	8008f92 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f9a:	4b3d      	ldr	r3, [pc, #244]	; (8009090 <HAL_ADC_Start_DMA+0x1c8>)
 8008f9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa2:	4a3c      	ldr	r2, [pc, #240]	; (8009094 <HAL_ADC_Start_DMA+0x1cc>)
 8008fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008faa:	4a3b      	ldr	r2, [pc, #236]	; (8009098 <HAL_ADC_Start_DMA+0x1d0>)
 8008fac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	4a3a      	ldr	r2, [pc, #232]	; (800909c <HAL_ADC_Start_DMA+0x1d4>)
 8008fb4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008fbe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fde:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	334c      	adds	r3, #76	; 0x4c
 8008fea:	4619      	mov	r1, r3
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f001 fa4e 	bl	800a490 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d12a      	bne.n	8009056 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a26      	ldr	r2, [pc, #152]	; (80090a0 <HAL_ADC_Start_DMA+0x1d8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d015      	beq.n	8009036 <HAL_ADC_Start_DMA+0x16e>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a25      	ldr	r2, [pc, #148]	; (80090a4 <HAL_ADC_Start_DMA+0x1dc>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d105      	bne.n	8009020 <HAL_ADC_Start_DMA+0x158>
 8009014:	4b1e      	ldr	r3, [pc, #120]	; (8009090 <HAL_ADC_Start_DMA+0x1c8>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f003 031f 	and.w	r3, r3, #31
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <HAL_ADC_Start_DMA+0x1e0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d129      	bne.n	800907e <HAL_ADC_Start_DMA+0x1b6>
 800902a:	4b19      	ldr	r3, [pc, #100]	; (8009090 <HAL_ADC_Start_DMA+0x1c8>)
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2b0f      	cmp	r3, #15
 8009034:	d823      	bhi.n	800907e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d11c      	bne.n	800907e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009052:	609a      	str	r2, [r3, #8]
 8009054:	e013      	b.n	800907e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a11      	ldr	r2, [pc, #68]	; (80090a0 <HAL_ADC_Start_DMA+0x1d8>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d10e      	bne.n	800907e <HAL_ADC_Start_DMA+0x1b6>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d107      	bne.n	800907e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800907c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	2000000c 	.word	0x2000000c
 800908c:	431bde83 	.word	0x431bde83
 8009090:	40012300 	.word	0x40012300
 8009094:	08009545 	.word	0x08009545
 8009098:	080095ff 	.word	0x080095ff
 800909c:	0800961b 	.word	0x0800961b
 80090a0:	40012000 	.word	0x40012000
 80090a4:	40012100 	.word	0x40012100
 80090a8:	40012200 	.word	0x40012200

080090ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_ADC_ConfigChannel+0x1c>
 8009100:	2302      	movs	r3, #2
 8009102:	e113      	b.n	800932c <HAL_ADC_ConfigChannel+0x244>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b09      	cmp	r3, #9
 8009112:	d925      	bls.n	8009160 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68d9      	ldr	r1, [r3, #12]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	b29b      	uxth	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	4613      	mov	r3, r2
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	4413      	add	r3, r2
 8009128:	3b1e      	subs	r3, #30
 800912a:	2207      	movs	r2, #7
 800912c:	fa02 f303 	lsl.w	r3, r2, r3
 8009130:	43da      	mvns	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	400a      	ands	r2, r1
 8009138:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68d9      	ldr	r1, [r3, #12]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	4618      	mov	r0, r3
 800914c:	4603      	mov	r3, r0
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	4403      	add	r3, r0
 8009152:	3b1e      	subs	r3, #30
 8009154:	409a      	lsls	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	e022      	b.n	80091a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6919      	ldr	r1, [r3, #16]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	4613      	mov	r3, r2
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	4413      	add	r3, r2
 8009174:	2207      	movs	r2, #7
 8009176:	fa02 f303 	lsl.w	r3, r2, r3
 800917a:	43da      	mvns	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	400a      	ands	r2, r1
 8009182:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6919      	ldr	r1, [r3, #16]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	b29b      	uxth	r3, r3
 8009194:	4618      	mov	r0, r3
 8009196:	4603      	mov	r3, r0
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4403      	add	r3, r0
 800919c:	409a      	lsls	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2b06      	cmp	r3, #6
 80091ac:	d824      	bhi.n	80091f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	3b05      	subs	r3, #5
 80091c0:	221f      	movs	r2, #31
 80091c2:	fa02 f303 	lsl.w	r3, r2, r3
 80091c6:	43da      	mvns	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	400a      	ands	r2, r1
 80091ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	4618      	mov	r0, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	3b05      	subs	r3, #5
 80091ea:	fa00 f203 	lsl.w	r2, r0, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	635a      	str	r2, [r3, #52]	; 0x34
 80091f6:	e04c      	b.n	8009292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b0c      	cmp	r3, #12
 80091fe:	d824      	bhi.n	800924a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	3b23      	subs	r3, #35	; 0x23
 8009212:	221f      	movs	r2, #31
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	43da      	mvns	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	400a      	ands	r2, r1
 8009220:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	4618      	mov	r0, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	3b23      	subs	r3, #35	; 0x23
 800923c:	fa00 f203 	lsl.w	r2, r0, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
 8009248:	e023      	b.n	8009292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	3b41      	subs	r3, #65	; 0x41
 800925c:	221f      	movs	r2, #31
 800925e:	fa02 f303 	lsl.w	r3, r2, r3
 8009262:	43da      	mvns	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	400a      	ands	r2, r1
 800926a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	b29b      	uxth	r3, r3
 8009278:	4618      	mov	r0, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	3b41      	subs	r3, #65	; 0x41
 8009286:	fa00 f203 	lsl.w	r2, r0, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009292:	4b29      	ldr	r3, [pc, #164]	; (8009338 <HAL_ADC_ConfigChannel+0x250>)
 8009294:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a28      	ldr	r2, [pc, #160]	; (800933c <HAL_ADC_ConfigChannel+0x254>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d10f      	bne.n	80092c0 <HAL_ADC_ConfigChannel+0x1d8>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b12      	cmp	r3, #18
 80092a6:	d10b      	bne.n	80092c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a1d      	ldr	r2, [pc, #116]	; (800933c <HAL_ADC_ConfigChannel+0x254>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d12b      	bne.n	8009322 <HAL_ADC_ConfigChannel+0x23a>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a1c      	ldr	r2, [pc, #112]	; (8009340 <HAL_ADC_ConfigChannel+0x258>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d003      	beq.n	80092dc <HAL_ADC_ConfigChannel+0x1f4>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b11      	cmp	r3, #17
 80092da:	d122      	bne.n	8009322 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a11      	ldr	r2, [pc, #68]	; (8009340 <HAL_ADC_ConfigChannel+0x258>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d111      	bne.n	8009322 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <HAL_ADC_ConfigChannel+0x25c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a11      	ldr	r2, [pc, #68]	; (8009348 <HAL_ADC_ConfigChannel+0x260>)
 8009304:	fba2 2303 	umull	r2, r3, r2, r3
 8009308:	0c9a      	lsrs	r2, r3, #18
 800930a:	4613      	mov	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009314:	e002      	b.n	800931c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	3b01      	subs	r3, #1
 800931a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f9      	bne.n	8009316 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	40012300 	.word	0x40012300
 800933c:	40012000 	.word	0x40012000
 8009340:	10000012 	.word	0x10000012
 8009344:	2000000c 	.word	0x2000000c
 8009348:	431bde83 	.word	0x431bde83

0800934c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009354:	4b79      	ldr	r3, [pc, #484]	; (800953c <ADC_Init+0x1f0>)
 8009356:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	431a      	orrs	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6859      	ldr	r1, [r3, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	021a      	lsls	r2, r3, #8
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80093a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6859      	ldr	r1, [r3, #4]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6899      	ldr	r1, [r3, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	4a58      	ldr	r2, [pc, #352]	; (8009540 <ADC_Init+0x1f4>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d022      	beq.n	800942a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6899      	ldr	r1, [r3, #8]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6899      	ldr	r1, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
 8009428:	e00f      	b.n	800944a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009448:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0202 	bic.w	r2, r2, #2
 8009458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6899      	ldr	r1, [r3, #8]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	7e1b      	ldrb	r3, [r3, #24]
 8009464:	005a      	lsls	r2, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d01b      	beq.n	80094b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009486:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009496:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6859      	ldr	r1, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	3b01      	subs	r3, #1
 80094a4:	035a      	lsls	r2, r3, #13
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	e007      	b.n	80094c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	3b01      	subs	r3, #1
 80094dc:	051a      	lsls	r2, r3, #20
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6899      	ldr	r1, [r3, #8]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009502:	025a      	lsls	r2, r3, #9
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800951a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6899      	ldr	r1, [r3, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	029a      	lsls	r2, r3, #10
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	609a      	str	r2, [r3, #8]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40012300 	.word	0x40012300
 8009540:	0f000001 	.word	0x0f000001

08009544 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800955a:	2b00      	cmp	r3, #0
 800955c:	d13c      	bne.n	80095d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d12b      	bne.n	80095d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800957c:	2b00      	cmp	r3, #0
 800957e:	d127      	bne.n	80095d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800958a:	2b00      	cmp	r3, #0
 800958c:	d006      	beq.n	800959c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009598:	2b00      	cmp	r3, #0
 800959a:	d119      	bne.n	80095d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0220 	bic.w	r2, r2, #32
 80095aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d105      	bne.n	80095d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c8:	f043 0201 	orr.w	r2, r3, #1
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff fd6b 	bl	80090ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095d6:	e00e      	b.n	80095f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fd75 	bl	80090d4 <HAL_ADC_ErrorCallback>
}
 80095ea:	e004      	b.n	80095f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff fd57 	bl	80090c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2240      	movs	r2, #64	; 0x40
 800962c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009632:	f043 0204 	orr.w	r2, r3, #4
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fd4a 	bl	80090d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e0ed      	b.n	8009836 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f006 fab0 	bl	800fbcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0202 	bic.w	r2, r2, #2
 800967a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800967c:	f7ff fbb2 	bl	8008de4 <HAL_GetTick>
 8009680:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009682:	e012      	b.n	80096aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009684:	f7ff fbae 	bl	8008de4 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b0a      	cmp	r3, #10
 8009690:	d90b      	bls.n	80096aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2205      	movs	r2, #5
 80096a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e0c5      	b.n	8009836 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e5      	bne.n	8009684 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0201 	orr.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096c8:	f7ff fb8c 	bl	8008de4 <HAL_GetTick>
 80096cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80096ce:	e012      	b.n	80096f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096d0:	f7ff fb88 	bl	8008de4 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b0a      	cmp	r3, #10
 80096dc:	d90b      	bls.n	80096f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2205      	movs	r2, #5
 80096ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e09f      	b.n	8009836 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0e5      	beq.n	80096d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7e1b      	ldrb	r3, [r3, #24]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d108      	bne.n	800971e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	e007      	b.n	800972e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800972c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7e5b      	ldrb	r3, [r3, #25]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d108      	bne.n	8009748 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	e007      	b.n	8009758 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009756:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7e9b      	ldrb	r3, [r3, #26]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d108      	bne.n	8009772 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f042 0220 	orr.w	r2, r2, #32
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	e007      	b.n	8009782 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0220 	bic.w	r2, r2, #32
 8009780:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7edb      	ldrb	r3, [r3, #27]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d108      	bne.n	800979c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 0210 	bic.w	r2, r2, #16
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	e007      	b.n	80097ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0210 	orr.w	r2, r2, #16
 80097aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	7f1b      	ldrb	r3, [r3, #28]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d108      	bne.n	80097c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0208 	orr.w	r2, r2, #8
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	e007      	b.n	80097d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0208 	bic.w	r2, r2, #8
 80097d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7f5b      	ldrb	r3, [r3, #29]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d108      	bne.n	80097f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0204 	orr.w	r2, r2, #4
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	e007      	b.n	8009800 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0204 	bic.w	r2, r2, #4
 80097fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	431a      	orrs	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	ea42 0103 	orr.w	r1, r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	1e5a      	subs	r2, r3, #1
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009856:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009858:	7cfb      	ldrb	r3, [r7, #19]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d003      	beq.n	8009866 <HAL_CAN_ConfigFilter+0x26>
 800985e:	7cfb      	ldrb	r3, [r7, #19]
 8009860:	2b02      	cmp	r3, #2
 8009862:	f040 80be 	bne.w	80099e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009866:	4b65      	ldr	r3, [pc, #404]	; (80099fc <HAL_CAN_ConfigFilter+0x1bc>)
 8009868:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009870:	f043 0201 	orr.w	r2, r3, #1
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009880:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	431a      	orrs	r2, r3
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	f003 031f 	and.w	r3, r3, #31
 80098a6:	2201      	movs	r2, #1
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	43db      	mvns	r3, r3
 80098b8:	401a      	ands	r2, r3
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d123      	bne.n	8009910 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	43db      	mvns	r3, r3
 80098d2:	401a      	ands	r2, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	3248      	adds	r2, #72	; 0x48
 80098f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009904:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009906:	6979      	ldr	r1, [r7, #20]
 8009908:	3348      	adds	r3, #72	; 0x48
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	440b      	add	r3, r1
 800990e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d122      	bne.n	800995e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	431a      	orrs	r2, r3
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009938:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	3248      	adds	r2, #72	; 0x48
 800993e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009952:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009954:	6979      	ldr	r1, [r7, #20]
 8009956:	3348      	adds	r3, #72	; 0x48
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	440b      	add	r3, r1
 800995c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	43db      	mvns	r3, r3
 8009970:	401a      	ands	r2, r3
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009978:	e007      	b.n	800998a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	431a      	orrs	r2, r3
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d109      	bne.n	80099a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	43db      	mvns	r3, r3
 800999c:	401a      	ands	r2, r3
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80099a4:	e007      	b.n	80099b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	431a      	orrs	r2, r3
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d107      	bne.n	80099ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	431a      	orrs	r2, r3
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099d4:	f023 0201 	bic.w	r2, r3, #1
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	e006      	b.n	80099f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
  }
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	40006400 	.word	0x40006400

08009a00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d12e      	bne.n	8009a72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a2c:	f7ff f9da 	bl	8008de4 <HAL_GetTick>
 8009a30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a32:	e012      	b.n	8009a5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a34:	f7ff f9d6 	bl	8008de4 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b0a      	cmp	r3, #10
 8009a40:	d90b      	bls.n	8009a5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2205      	movs	r2, #5
 8009a52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e012      	b.n	8009a80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e5      	bne.n	8009a34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e006      	b.n	8009a80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
  }
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a9c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d003      	beq.n	8009aac <HAL_CAN_GetRxMessage+0x24>
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	f040 80f4 	bne.w	8009c94 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10e      	bne.n	8009ad0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f003 0303 	and.w	r3, r3, #3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d116      	bne.n	8009aee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e0e8      	b.n	8009ca2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d107      	bne.n	8009aee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e0d9      	b.n	8009ca2 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	331b      	adds	r3, #27
 8009af6:	011b      	lsls	r3, r3, #4
 8009af8:	4413      	add	r3, r2
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0204 	and.w	r2, r3, #4
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10c      	bne.n	8009b26 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	331b      	adds	r3, #27
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	4413      	add	r3, r2
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	0d5b      	lsrs	r3, r3, #21
 8009b1c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	e00b      	b.n	8009b3e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	331b      	adds	r3, #27
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	4413      	add	r3, r2
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	08db      	lsrs	r3, r3, #3
 8009b36:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	331b      	adds	r3, #27
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	4413      	add	r3, r2
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	085b      	lsrs	r3, r3, #1
 8009b4e:	f003 0201 	and.w	r2, r3, #1
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	331b      	adds	r3, #27
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	4413      	add	r3, r2
 8009b62:	3304      	adds	r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 020f 	and.w	r2, r3, #15
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	331b      	adds	r3, #27
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	4413      	add	r3, r2
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	0a1b      	lsrs	r3, r3, #8
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	331b      	adds	r3, #27
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	4413      	add	r3, r2
 8009b92:	3304      	adds	r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	0a1a      	lsrs	r2, r3, #8
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	0c1a      	lsrs	r2, r3, #16
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	3302      	adds	r3, #2
 8009be4:	b2d2      	uxtb	r2, r2
 8009be6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	011b      	lsls	r3, r3, #4
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	0e1a      	lsrs	r2, r3, #24
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	3303      	adds	r3, #3
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	3304      	adds	r3, #4
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	0a1a      	lsrs	r2, r3, #8
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	3305      	adds	r3, #5
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	011b      	lsls	r3, r3, #4
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	0c1a      	lsrs	r2, r3, #16
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	3306      	adds	r3, #6
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	0e1a      	lsrs	r2, r3, #24
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	3307      	adds	r3, #7
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d108      	bne.n	8009c80 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f042 0220 	orr.w	r2, r2, #32
 8009c7c:	60da      	str	r2, [r3, #12]
 8009c7e:	e007      	b.n	8009c90 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691a      	ldr	r2, [r3, #16]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0220 	orr.w	r2, r2, #32
 8009c8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	e006      	b.n	8009ca2 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
  }
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b085      	sub	sp, #20
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d002      	beq.n	8009ccc <HAL_CAN_ActivateNotification+0x1e>
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d109      	bne.n	8009ce0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6959      	ldr	r1, [r3, #20]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	e006      	b.n	8009cee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
  }
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b08a      	sub	sp, #40	; 0x28
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d07c      	beq.n	8009e3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d023      	beq.n	8009d92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f006 f81b 	bl	800fd98 <HAL_CAN_TxMailbox0CompleteCallback>
 8009d62:	e016      	b.n	8009d92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d004      	beq.n	8009d78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
 8009d76:	e00c      	b.n	8009d92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d004      	beq.n	8009d8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8a:	e002      	b.n	8009d92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f965 	bl	800a05c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d024      	beq.n	8009de6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009da4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f006 f801 	bl	800fdb8 <HAL_CAN_TxMailbox1CompleteCallback>
 8009db6:	e016      	b.n	8009de6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d004      	beq.n	8009dcc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dca:	e00c      	b.n	8009de6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dde:	e002      	b.n	8009de6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f945 	bl	800a070 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d024      	beq.n	8009e3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009df8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f005 ffe7 	bl	800fdd8 <HAL_CAN_TxMailbox2CompleteCallback>
 8009e0a:	e016      	b.n	8009e3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e1e:	e00c      	b.n	8009e3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
 8009e32:	e002      	b.n	8009e3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f925 	bl	800a084 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f003 0310 	and.w	r3, r3, #16
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d007      	beq.n	8009e5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2210      	movs	r2, #16
 8009e5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f003 0308 	and.w	r3, r3, #8
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d006      	beq.n	8009e80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2208      	movs	r2, #8
 8009e78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f90c 	bl	800a098 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f005 ffad 	bl	800fdf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f003 0310 	and.w	r3, r3, #16
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d006      	beq.n	8009ee4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2208      	movs	r2, #8
 8009edc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f8ee 	bl	800a0c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	f003 0310 	and.w	r3, r3, #16
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f8d5 	bl	800a0ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f003 0310 	and.w	r3, r3, #16
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d006      	beq.n	8009f24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2210      	movs	r2, #16
 8009f1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f8d8 	bl	800a0d4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00b      	beq.n	8009f46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	f003 0308 	and.w	r3, r3, #8
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d006      	beq.n	8009f46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2208      	movs	r2, #8
 8009f3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f8d1 	bl	800a0e8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d075      	beq.n	800a03c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d06c      	beq.n	800a034 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d008      	beq.n	8009f76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	f043 0301 	orr.w	r3, r3, #1
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d008      	beq.n	8009f92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	f043 0302 	orr.w	r3, r3, #2
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d008      	beq.n	8009fae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	f043 0304 	orr.w	r3, r3, #4
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d03d      	beq.n	800a034 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d038      	beq.n	800a034 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fc8:	2b30      	cmp	r3, #48	; 0x30
 8009fca:	d017      	beq.n	8009ffc <HAL_CAN_IRQHandler+0x302>
 8009fcc:	2b30      	cmp	r3, #48	; 0x30
 8009fce:	d804      	bhi.n	8009fda <HAL_CAN_IRQHandler+0x2e0>
 8009fd0:	2b10      	cmp	r3, #16
 8009fd2:	d009      	beq.n	8009fe8 <HAL_CAN_IRQHandler+0x2ee>
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d00c      	beq.n	8009ff2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009fd8:	e024      	b.n	800a024 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009fda:	2b50      	cmp	r3, #80	; 0x50
 8009fdc:	d018      	beq.n	800a010 <HAL_CAN_IRQHandler+0x316>
 8009fde:	2b60      	cmp	r3, #96	; 0x60
 8009fe0:	d01b      	beq.n	800a01a <HAL_CAN_IRQHandler+0x320>
 8009fe2:	2b40      	cmp	r3, #64	; 0x40
 8009fe4:	d00f      	beq.n	800a006 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009fe6:	e01d      	b.n	800a024 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	f043 0308 	orr.w	r3, r3, #8
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ff0:	e018      	b.n	800a024 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	f043 0310 	orr.w	r3, r3, #16
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ffa:	e013      	b.n	800a024 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	f043 0320 	orr.w	r3, r3, #32
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a004:	e00e      	b.n	800a024 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a00e:	e009      	b.n	800a024 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a018:	e004      	b.n	800a024 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a022:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699a      	ldr	r2, [r3, #24]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a032:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2204      	movs	r2, #4
 800a03a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d008      	beq.n	800a054 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f854 	bl	800a0fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a054:	bf00      	nop
 800a056:	3728      	adds	r7, #40	; 0x28
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f003 0307 	and.w	r3, r3, #7
 800a11e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a120:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <__NVIC_SetPriorityGrouping+0x44>)
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a12c:	4013      	ands	r3, r2
 800a12e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a13c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a142:	4a04      	ldr	r2, [pc, #16]	; (800a154 <__NVIC_SetPriorityGrouping+0x44>)
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	60d3      	str	r3, [r2, #12]
}
 800a148:	bf00      	nop
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	e000ed00 	.word	0xe000ed00

0800a158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a15c:	4b04      	ldr	r3, [pc, #16]	; (800a170 <__NVIC_GetPriorityGrouping+0x18>)
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	0a1b      	lsrs	r3, r3, #8
 800a162:	f003 0307 	and.w	r3, r3, #7
}
 800a166:	4618      	mov	r0, r3
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	e000ed00 	.word	0xe000ed00

0800a174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a182:	2b00      	cmp	r3, #0
 800a184:	db0b      	blt.n	800a19e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a186:	79fb      	ldrb	r3, [r7, #7]
 800a188:	f003 021f 	and.w	r2, r3, #31
 800a18c:	4907      	ldr	r1, [pc, #28]	; (800a1ac <__NVIC_EnableIRQ+0x38>)
 800a18e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a192:	095b      	lsrs	r3, r3, #5
 800a194:	2001      	movs	r0, #1
 800a196:	fa00 f202 	lsl.w	r2, r0, r2
 800a19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a19e:	bf00      	nop
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	e000e100 	.word	0xe000e100

0800a1b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	db0a      	blt.n	800a1da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	490c      	ldr	r1, [pc, #48]	; (800a1fc <__NVIC_SetPriority+0x4c>)
 800a1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ce:	0112      	lsls	r2, r2, #4
 800a1d0:	b2d2      	uxtb	r2, r2
 800a1d2:	440b      	add	r3, r1
 800a1d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1d8:	e00a      	b.n	800a1f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	4908      	ldr	r1, [pc, #32]	; (800a200 <__NVIC_SetPriority+0x50>)
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	f003 030f 	and.w	r3, r3, #15
 800a1e6:	3b04      	subs	r3, #4
 800a1e8:	0112      	lsls	r2, r2, #4
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	761a      	strb	r2, [r3, #24]
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	e000e100 	.word	0xe000e100
 800a200:	e000ed00 	.word	0xe000ed00

0800a204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a204:	b480      	push	{r7}
 800a206:	b089      	sub	sp, #36	; 0x24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f1c3 0307 	rsb	r3, r3, #7
 800a21e:	2b04      	cmp	r3, #4
 800a220:	bf28      	it	cs
 800a222:	2304      	movcs	r3, #4
 800a224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	3304      	adds	r3, #4
 800a22a:	2b06      	cmp	r3, #6
 800a22c:	d902      	bls.n	800a234 <NVIC_EncodePriority+0x30>
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	3b03      	subs	r3, #3
 800a232:	e000      	b.n	800a236 <NVIC_EncodePriority+0x32>
 800a234:	2300      	movs	r3, #0
 800a236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a238:	f04f 32ff 	mov.w	r2, #4294967295
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	fa02 f303 	lsl.w	r3, r2, r3
 800a242:	43da      	mvns	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	401a      	ands	r2, r3
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a24c:	f04f 31ff 	mov.w	r1, #4294967295
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	fa01 f303 	lsl.w	r3, r1, r3
 800a256:	43d9      	mvns	r1, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a25c:	4313      	orrs	r3, r2
         );
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3724      	adds	r7, #36	; 0x24
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
	...

0800a26c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3b01      	subs	r3, #1
 800a278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a27c:	d301      	bcc.n	800a282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a27e:	2301      	movs	r3, #1
 800a280:	e00f      	b.n	800a2a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a282:	4a0a      	ldr	r2, [pc, #40]	; (800a2ac <SysTick_Config+0x40>)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3b01      	subs	r3, #1
 800a288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a28a:	210f      	movs	r1, #15
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	f7ff ff8e 	bl	800a1b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <SysTick_Config+0x40>)
 800a296:	2200      	movs	r2, #0
 800a298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a29a:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <SysTick_Config+0x40>)
 800a29c:	2207      	movs	r2, #7
 800a29e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	e000e010 	.word	0xe000e010

0800a2b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff ff29 	bl	800a110 <__NVIC_SetPriorityGrouping>
}
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2d8:	f7ff ff3e 	bl	800a158 <__NVIC_GetPriorityGrouping>
 800a2dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	6978      	ldr	r0, [r7, #20]
 800a2e4:	f7ff ff8e 	bl	800a204 <NVIC_EncodePriority>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7ff ff5d 	bl	800a1b0 <__NVIC_SetPriority>
}
 800a2f6:	bf00      	nop
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	4603      	mov	r3, r0
 800a306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff ff31 	bl	800a174 <__NVIC_EnableIRQ>
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff ffa2 	bl	800a26c <SysTick_Config>
 800a328:	4603      	mov	r3, r0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a340:	f7fe fd50 	bl	8008de4 <HAL_GetTick>
 800a344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e099      	b.n	800a484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0201 	bic.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a370:	e00f      	b.n	800a392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a372:	f7fe fd37 	bl	8008de4 <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b05      	cmp	r3, #5
 800a37e:	d908      	bls.n	800a392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2220      	movs	r2, #32
 800a384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2203      	movs	r2, #3
 800a38a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e078      	b.n	800a484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1e8      	bne.n	800a372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4b38      	ldr	r3, [pc, #224]	; (800a48c <HAL_DMA_Init+0x158>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d107      	bne.n	800a3fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f023 0307 	bic.w	r3, r3, #7
 800a412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b04      	cmp	r3, #4
 800a424:	d117      	bne.n	800a456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fa99 	bl	800a970 <DMA_CheckFifoParam>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d008      	beq.n	800a456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2240      	movs	r2, #64	; 0x40
 800a448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a452:	2301      	movs	r3, #1
 800a454:	e016      	b.n	800a484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa50 	bl	800a904 <DMA_CalcBaseAndBitshift>
 800a464:	4603      	mov	r3, r0
 800a466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a46c:	223f      	movs	r2, #63	; 0x3f
 800a46e:	409a      	lsls	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	f010803f 	.word	0xf010803f

0800a490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_DMA_Start_IT+0x26>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e048      	b.n	800a548 <HAL_DMA_Start_IT+0xb8>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d137      	bne.n	800a53a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 f9e2 	bl	800a8a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e8:	223f      	movs	r2, #63	; 0x3f
 800a4ea:	409a      	lsls	r2, r3
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0216 	orr.w	r2, r2, #22
 800a4fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	695a      	ldr	r2, [r3, #20]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a50e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0208 	orr.w	r2, r2, #8
 800a526:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0201 	orr.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	e005      	b.n	800a546 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a542:	2302      	movs	r3, #2
 800a544:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3718      	adds	r7, #24
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b02      	cmp	r3, #2
 800a562:	d004      	beq.n	800a56e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2280      	movs	r2, #128	; 0x80
 800a568:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e00c      	b.n	800a588 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2205      	movs	r2, #5
 800a572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 0201 	bic.w	r2, r2, #1
 800a584:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5a0:	4b92      	ldr	r3, [pc, #584]	; (800a7ec <HAL_DMA_IRQHandler+0x258>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a92      	ldr	r2, [pc, #584]	; (800a7f0 <HAL_DMA_IRQHandler+0x25c>)
 800a5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5aa:	0a9b      	lsrs	r3, r3, #10
 800a5ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5be:	2208      	movs	r2, #8
 800a5c0:	409a      	lsls	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d01a      	beq.n	800a600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0304 	and.w	r3, r3, #4
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d013      	beq.n	800a600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0204 	bic.w	r2, r2, #4
 800a5e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	409a      	lsls	r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f8:	f043 0201 	orr.w	r2, r3, #1
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a604:	2201      	movs	r2, #1
 800a606:	409a      	lsls	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4013      	ands	r3, r2
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d012      	beq.n	800a636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00b      	beq.n	800a636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a622:	2201      	movs	r2, #1
 800a624:	409a      	lsls	r2, r3
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62e:	f043 0202 	orr.w	r2, r3, #2
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a63a:	2204      	movs	r2, #4
 800a63c:	409a      	lsls	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	4013      	ands	r3, r2
 800a642:	2b00      	cmp	r3, #0
 800a644:	d012      	beq.n	800a66c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0302 	and.w	r3, r3, #2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00b      	beq.n	800a66c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a658:	2204      	movs	r2, #4
 800a65a:	409a      	lsls	r2, r3
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a664:	f043 0204 	orr.w	r2, r3, #4
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a670:	2210      	movs	r2, #16
 800a672:	409a      	lsls	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4013      	ands	r3, r2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d043      	beq.n	800a704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0308 	and.w	r3, r3, #8
 800a686:	2b00      	cmp	r3, #0
 800a688:	d03c      	beq.n	800a704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a68e:	2210      	movs	r2, #16
 800a690:	409a      	lsls	r2, r3
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d018      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d108      	bne.n	800a6c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d024      	beq.n	800a704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
 800a6c2:	e01f      	b.n	800a704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d01b      	beq.n	800a704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
 800a6d4:	e016      	b.n	800a704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d107      	bne.n	800a6f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 0208 	bic.w	r2, r2, #8
 800a6f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a708:	2220      	movs	r2, #32
 800a70a:	409a      	lsls	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4013      	ands	r3, r2
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 808e 	beq.w	800a832 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0310 	and.w	r3, r3, #16
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 8086 	beq.w	800a832 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72a:	2220      	movs	r2, #32
 800a72c:	409a      	lsls	r2, r3
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d136      	bne.n	800a7ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 0216 	bic.w	r2, r2, #22
 800a74c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	695a      	ldr	r2, [r3, #20]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a75c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d103      	bne.n	800a76e <HAL_DMA_IRQHandler+0x1da>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d007      	beq.n	800a77e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 0208 	bic.w	r2, r2, #8
 800a77c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a782:	223f      	movs	r2, #63	; 0x3f
 800a784:	409a      	lsls	r2, r3
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d07d      	beq.n	800a89e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	4798      	blx	r3
        }
        return;
 800a7aa:	e078      	b.n	800a89e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d01c      	beq.n	800a7f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d108      	bne.n	800a7da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d030      	beq.n	800a832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
 800a7d8:	e02b      	b.n	800a832 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d027      	beq.n	800a832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
 800a7ea:	e022      	b.n	800a832 <HAL_DMA_IRQHandler+0x29e>
 800a7ec:	2000000c 	.word	0x2000000c
 800a7f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10f      	bne.n	800a822 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 0210 	bic.w	r2, r2, #16
 800a810:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a836:	2b00      	cmp	r3, #0
 800a838:	d032      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d022      	beq.n	800a88c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2205      	movs	r2, #5
 800a84a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0201 	bic.w	r2, r2, #1
 800a85c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	3301      	adds	r3, #1
 800a862:	60bb      	str	r3, [r7, #8]
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	429a      	cmp	r2, r3
 800a868:	d307      	bcc.n	800a87a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1f2      	bne.n	800a85e <HAL_DMA_IRQHandler+0x2ca>
 800a878:	e000      	b.n	800a87c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a87a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	4798      	blx	r3
 800a89c:	e000      	b.n	800a8a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a89e:	bf00      	nop
    }
  }
}
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop

0800a8a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	2b40      	cmp	r3, #64	; 0x40
 800a8d4:	d108      	bne.n	800a8e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a8e6:	e007      	b.n	800a8f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	60da      	str	r2, [r3, #12]
}
 800a8f8:	bf00      	nop
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	3b10      	subs	r3, #16
 800a914:	4a14      	ldr	r2, [pc, #80]	; (800a968 <DMA_CalcBaseAndBitshift+0x64>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	091b      	lsrs	r3, r3, #4
 800a91c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a91e:	4a13      	ldr	r2, [pc, #76]	; (800a96c <DMA_CalcBaseAndBitshift+0x68>)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d909      	bls.n	800a946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a93a:	f023 0303 	bic.w	r3, r3, #3
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	659a      	str	r2, [r3, #88]	; 0x58
 800a944:	e007      	b.n	800a956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a94e:	f023 0303 	bic.w	r3, r3, #3
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	aaaaaaab 	.word	0xaaaaaaab
 800a96c:	08013920 	.word	0x08013920

0800a970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d11f      	bne.n	800a9ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d855      	bhi.n	800aa3c <DMA_CheckFifoParam+0xcc>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <DMA_CheckFifoParam+0x28>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9a9 	.word	0x0800a9a9
 800a99c:	0800a9bb 	.word	0x0800a9bb
 800a9a0:	0800a9a9 	.word	0x0800a9a9
 800a9a4:	0800aa3d 	.word	0x0800aa3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d045      	beq.n	800aa40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9b8:	e042      	b.n	800aa40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9c2:	d13f      	bne.n	800aa44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9c8:	e03c      	b.n	800aa44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d2:	d121      	bne.n	800aa18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d836      	bhi.n	800aa48 <DMA_CheckFifoParam+0xd8>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <DMA_CheckFifoParam+0x70>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800a9f1 	.word	0x0800a9f1
 800a9e4:	0800a9f7 	.word	0x0800a9f7
 800a9e8:	0800a9f1 	.word	0x0800a9f1
 800a9ec:	0800aa09 	.word	0x0800aa09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f4:	e02f      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d024      	beq.n	800aa4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa06:	e021      	b.n	800aa4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa10:	d11e      	bne.n	800aa50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa16:	e01b      	b.n	800aa50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d902      	bls.n	800aa24 <DMA_CheckFifoParam+0xb4>
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d003      	beq.n	800aa2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa22:	e018      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	73fb      	strb	r3, [r7, #15]
      break;
 800aa28:	e015      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00e      	beq.n	800aa54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	73fb      	strb	r3, [r7, #15]
      break;
 800aa3a:	e00b      	b.n	800aa54 <DMA_CheckFifoParam+0xe4>
      break;
 800aa3c:	bf00      	nop
 800aa3e:	e00a      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      break;
 800aa40:	bf00      	nop
 800aa42:	e008      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      break;
 800aa44:	bf00      	nop
 800aa46:	e006      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      break;
 800aa48:	bf00      	nop
 800aa4a:	e004      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      break;
 800aa4c:	bf00      	nop
 800aa4e:	e002      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      break;   
 800aa50:	bf00      	nop
 800aa52:	e000      	b.n	800aa56 <DMA_CheckFifoParam+0xe6>
      break;
 800aa54:	bf00      	nop
    }
  } 
  
  return status; 
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa76:	4b23      	ldr	r3, [pc, #140]	; (800ab04 <HAL_FLASH_Program+0xa0>)
 800aa78:	7e1b      	ldrb	r3, [r3, #24]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d101      	bne.n	800aa82 <HAL_FLASH_Program+0x1e>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	e03b      	b.n	800aafa <HAL_FLASH_Program+0x96>
 800aa82:	4b20      	ldr	r3, [pc, #128]	; (800ab04 <HAL_FLASH_Program+0xa0>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aa88:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa8c:	f000 f870 	bl	800ab70 <FLASH_WaitForLastOperation>
 800aa90:	4603      	mov	r3, r0
 800aa92:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d12b      	bne.n	800aaf2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d105      	bne.n	800aaac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800aaa0:	783b      	ldrb	r3, [r7, #0]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	68b8      	ldr	r0, [r7, #8]
 800aaa6:	f000 f917 	bl	800acd8 <FLASH_Program_Byte>
 800aaaa:	e016      	b.n	800aada <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d105      	bne.n	800aabe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800aab2:	883b      	ldrh	r3, [r7, #0]
 800aab4:	4619      	mov	r1, r3
 800aab6:	68b8      	ldr	r0, [r7, #8]
 800aab8:	f000 f8ea 	bl	800ac90 <FLASH_Program_HalfWord>
 800aabc:	e00d      	b.n	800aada <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d105      	bne.n	800aad0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	4619      	mov	r1, r3
 800aac8:	68b8      	ldr	r0, [r7, #8]
 800aaca:	f000 f8bf 	bl	800ac4c <FLASH_Program_Word>
 800aace:	e004      	b.n	800aada <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800aad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad4:	68b8      	ldr	r0, [r7, #8]
 800aad6:	f000 f88b 	bl	800abf0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aada:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aade:	f000 f847 	bl	800ab70 <FLASH_WaitForLastOperation>
 800aae2:	4603      	mov	r3, r0
 800aae4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800aae6:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <HAL_FLASH_Program+0xa4>)
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	4a07      	ldr	r2, [pc, #28]	; (800ab08 <HAL_FLASH_Program+0xa4>)
 800aaec:	f023 0301 	bic.w	r3, r3, #1
 800aaf0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aaf2:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <HAL_FLASH_Program+0xa0>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	761a      	strb	r2, [r3, #24]
  
  return status;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	200042b0 	.word	0x200042b0
 800ab08:	40023c00 	.word	0x40023c00

0800ab0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <HAL_FLASH_Unlock+0x38>)
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da0b      	bge.n	800ab36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <HAL_FLASH_Unlock+0x38>)
 800ab20:	4a09      	ldr	r2, [pc, #36]	; (800ab48 <HAL_FLASH_Unlock+0x3c>)
 800ab22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ab24:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <HAL_FLASH_Unlock+0x38>)
 800ab26:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <HAL_FLASH_Unlock+0x40>)
 800ab28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab2a:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <HAL_FLASH_Unlock+0x38>)
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da01      	bge.n	800ab36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ab36:	79fb      	ldrb	r3, [r7, #7]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	40023c00 	.word	0x40023c00
 800ab48:	45670123 	.word	0x45670123
 800ab4c:	cdef89ab 	.word	0xcdef89ab

0800ab50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <HAL_FLASH_Lock+0x1c>)
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	4a04      	ldr	r2, [pc, #16]	; (800ab6c <HAL_FLASH_Lock+0x1c>)
 800ab5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab5e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	40023c00 	.word	0x40023c00

0800ab70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ab7c:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <FLASH_WaitForLastOperation+0x78>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ab82:	f7fe f92f 	bl	8008de4 <HAL_GetTick>
 800ab86:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ab88:	e010      	b.n	800abac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab90:	d00c      	beq.n	800abac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d007      	beq.n	800aba8 <FLASH_WaitForLastOperation+0x38>
 800ab98:	f7fe f924 	bl	8008de4 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d201      	bcs.n	800abac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e019      	b.n	800abe0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800abac:	4b0f      	ldr	r3, [pc, #60]	; (800abec <FLASH_WaitForLastOperation+0x7c>)
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e8      	bne.n	800ab8a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800abb8:	4b0c      	ldr	r3, [pc, #48]	; (800abec <FLASH_WaitForLastOperation+0x7c>)
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800abc4:	4b09      	ldr	r3, [pc, #36]	; (800abec <FLASH_WaitForLastOperation+0x7c>)
 800abc6:	2201      	movs	r2, #1
 800abc8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800abca:	4b08      	ldr	r3, [pc, #32]	; (800abec <FLASH_WaitForLastOperation+0x7c>)
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800abd6:	f000 f8a1 	bl	800ad1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800abde:	2300      	movs	r3, #0
  
}  
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	200042b0 	.word	0x200042b0
 800abec:	40023c00 	.word	0x40023c00

0800abf0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800abf0:	b490      	push	{r4, r7}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800abfc:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <FLASH_Program_DoubleWord+0x58>)
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	4a11      	ldr	r2, [pc, #68]	; (800ac48 <FLASH_Program_DoubleWord+0x58>)
 800ac02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ac08:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <FLASH_Program_DoubleWord+0x58>)
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	4a0e      	ldr	r2, [pc, #56]	; (800ac48 <FLASH_Program_DoubleWord+0x58>)
 800ac0e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac14:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <FLASH_Program_DoubleWord+0x58>)
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	4a0b      	ldr	r2, [pc, #44]	; (800ac48 <FLASH_Program_DoubleWord+0x58>)
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ac26:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	f04f 0400 	mov.w	r4, #0
 800ac32:	0013      	movs	r3, r2
 800ac34:	2400      	movs	r4, #0
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	3204      	adds	r2, #4
 800ac3a:	6013      	str	r3, [r2, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bc90      	pop	{r4, r7}
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	40023c00 	.word	0x40023c00

0800ac4c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac56:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <FLASH_Program_Word+0x40>)
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	4a0c      	ldr	r2, [pc, #48]	; (800ac8c <FLASH_Program_Word+0x40>)
 800ac5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ac62:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <FLASH_Program_Word+0x40>)
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	4a09      	ldr	r2, [pc, #36]	; (800ac8c <FLASH_Program_Word+0x40>)
 800ac68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac6e:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <FLASH_Program_Word+0x40>)
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	4a06      	ldr	r2, [pc, #24]	; (800ac8c <FLASH_Program_Word+0x40>)
 800ac74:	f043 0301 	orr.w	r3, r3, #1
 800ac78:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	601a      	str	r2, [r3, #0]
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	40023c00 	.word	0x40023c00

0800ac90 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac9c:	4b0d      	ldr	r3, [pc, #52]	; (800acd4 <FLASH_Program_HalfWord+0x44>)
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <FLASH_Program_HalfWord+0x44>)
 800aca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800aca8:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <FLASH_Program_HalfWord+0x44>)
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <FLASH_Program_HalfWord+0x44>)
 800acae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acb4:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <FLASH_Program_HalfWord+0x44>)
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	4a06      	ldr	r2, [pc, #24]	; (800acd4 <FLASH_Program_HalfWord+0x44>)
 800acba:	f043 0301 	orr.w	r3, r3, #1
 800acbe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	887a      	ldrh	r2, [r7, #2]
 800acc4:	801a      	strh	r2, [r3, #0]
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	40023c00 	.word	0x40023c00

0800acd8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ace4:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <FLASH_Program_Byte+0x40>)
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	4a0b      	ldr	r2, [pc, #44]	; (800ad18 <FLASH_Program_Byte+0x40>)
 800acea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800acf0:	4b09      	ldr	r3, [pc, #36]	; (800ad18 <FLASH_Program_Byte+0x40>)
 800acf2:	4a09      	ldr	r2, [pc, #36]	; (800ad18 <FLASH_Program_Byte+0x40>)
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acf8:	4b07      	ldr	r3, [pc, #28]	; (800ad18 <FLASH_Program_Byte+0x40>)
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	4a06      	ldr	r2, [pc, #24]	; (800ad18 <FLASH_Program_Byte+0x40>)
 800acfe:	f043 0301 	orr.w	r3, r3, #1
 800ad02:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	78fa      	ldrb	r2, [r7, #3]
 800ad08:	701a      	strb	r2, [r3, #0]
}
 800ad0a:	bf00      	nop
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	40023c00 	.word	0x40023c00

0800ad1c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ad20:	4b2f      	ldr	r3, [pc, #188]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	f003 0310 	and.w	r3, r3, #16
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d008      	beq.n	800ad3e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ad2c:	4b2d      	ldr	r3, [pc, #180]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	f043 0310 	orr.w	r3, r3, #16
 800ad34:	4a2b      	ldr	r2, [pc, #172]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad36:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ad38:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad3a:	2210      	movs	r2, #16
 800ad3c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ad3e:	4b28      	ldr	r3, [pc, #160]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d008      	beq.n	800ad5c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ad4a:	4b26      	ldr	r3, [pc, #152]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f043 0308 	orr.w	r3, r3, #8
 800ad52:	4a24      	ldr	r2, [pc, #144]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad54:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ad56:	4b22      	ldr	r3, [pc, #136]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad58:	2220      	movs	r2, #32
 800ad5a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ad5c:	4b20      	ldr	r3, [pc, #128]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d008      	beq.n	800ad7a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ad68:	4b1e      	ldr	r3, [pc, #120]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	f043 0304 	orr.w	r3, r3, #4
 800ad70:	4a1c      	ldr	r2, [pc, #112]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad72:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ad74:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad76:	2240      	movs	r2, #64	; 0x40
 800ad78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ad7a:	4b19      	ldr	r3, [pc, #100]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d008      	beq.n	800ad98 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ad86:	4b17      	ldr	r3, [pc, #92]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	f043 0302 	orr.w	r3, r3, #2
 800ad8e:	4a15      	ldr	r2, [pc, #84]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ad90:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ad92:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad94:	2280      	movs	r2, #128	; 0x80
 800ad96:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800ad98:	4b11      	ldr	r3, [pc, #68]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ada4:	4b0f      	ldr	r3, [pc, #60]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800ada6:	69db      	ldr	r3, [r3, #28]
 800ada8:	f043 0301 	orr.w	r3, r3, #1
 800adac:	4a0d      	ldr	r2, [pc, #52]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800adae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800adb0:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800adb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adb6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800adb8:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d008      	beq.n	800add6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800adc4:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	f043 0320 	orr.w	r3, r3, #32
 800adcc:	4a05      	ldr	r2, [pc, #20]	; (800ade4 <FLASH_SetErrorCode+0xc8>)
 800adce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800add0:	4b03      	ldr	r3, [pc, #12]	; (800ade0 <FLASH_SetErrorCode+0xc4>)
 800add2:	2202      	movs	r2, #2
 800add4:	60da      	str	r2, [r3, #12]
  }
}
 800add6:	bf00      	nop
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	40023c00 	.word	0x40023c00
 800ade4:	200042b0 	.word	0x200042b0

0800ade8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800adfa:	4b31      	ldr	r3, [pc, #196]	; (800aec0 <HAL_FLASHEx_Erase+0xd8>)
 800adfc:	7e1b      	ldrb	r3, [r3, #24]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d101      	bne.n	800ae06 <HAL_FLASHEx_Erase+0x1e>
 800ae02:	2302      	movs	r3, #2
 800ae04:	e058      	b.n	800aeb8 <HAL_FLASHEx_Erase+0xd0>
 800ae06:	4b2e      	ldr	r3, [pc, #184]	; (800aec0 <HAL_FLASHEx_Erase+0xd8>)
 800ae08:	2201      	movs	r2, #1
 800ae0a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae10:	f7ff feae 	bl	800ab70 <FLASH_WaitForLastOperation>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d148      	bne.n	800aeb0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d115      	bne.n	800ae5a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f000 f844 	bl	800aec8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae40:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae44:	f7ff fe94 	bl	800ab70 <FLASH_WaitForLastOperation>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ae4c:	4b1d      	ldr	r3, [pc, #116]	; (800aec4 <HAL_FLASHEx_Erase+0xdc>)
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	4a1c      	ldr	r2, [pc, #112]	; (800aec4 <HAL_FLASHEx_Erase+0xdc>)
 800ae52:	f023 0304 	bic.w	r3, r3, #4
 800ae56:	6113      	str	r3, [r2, #16]
 800ae58:	e028      	b.n	800aeac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	60bb      	str	r3, [r7, #8]
 800ae60:	e01c      	b.n	800ae9c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	4619      	mov	r1, r3
 800ae6a:	68b8      	ldr	r0, [r7, #8]
 800ae6c:	f000 f850 	bl	800af10 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae70:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae74:	f7ff fe7c 	bl	800ab70 <FLASH_WaitForLastOperation>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ae7c:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <HAL_FLASHEx_Erase+0xdc>)
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	4a10      	ldr	r2, [pc, #64]	; (800aec4 <HAL_FLASHEx_Erase+0xdc>)
 800ae82:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ae86:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	601a      	str	r2, [r3, #0]
          break;
 800ae94:	e00a      	b.n	800aeac <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	60bb      	str	r3, [r7, #8]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68da      	ldr	r2, [r3, #12]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	4413      	add	r3, r2
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d3da      	bcc.n	800ae62 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800aeac:	f000 f878 	bl	800afa0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aeb0:	4b03      	ldr	r3, [pc, #12]	; (800aec0 <HAL_FLASHEx_Erase+0xd8>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	761a      	strb	r2, [r3, #24]

  return status;
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	200042b0 	.word	0x200042b0
 800aec4:	40023c00 	.word	0x40023c00

0800aec8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	4603      	mov	r3, r0
 800aed0:	6039      	str	r1, [r7, #0]
 800aed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aed4:	4b0d      	ldr	r3, [pc, #52]	; (800af0c <FLASH_MassErase+0x44>)
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	4a0c      	ldr	r2, [pc, #48]	; (800af0c <FLASH_MassErase+0x44>)
 800aeda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aede:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <FLASH_MassErase+0x44>)
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	4a09      	ldr	r2, [pc, #36]	; (800af0c <FLASH_MassErase+0x44>)
 800aee6:	f043 0304 	orr.w	r3, r3, #4
 800aeea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800aeec:	4b07      	ldr	r3, [pc, #28]	; (800af0c <FLASH_MassErase+0x44>)
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	79fb      	ldrb	r3, [r7, #7]
 800aef2:	021b      	lsls	r3, r3, #8
 800aef4:	4313      	orrs	r3, r2
 800aef6:	4a05      	ldr	r2, [pc, #20]	; (800af0c <FLASH_MassErase+0x44>)
 800aef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aefc:	6113      	str	r3, [r2, #16]
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	40023c00 	.word	0x40023c00

0800af10 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800af20:	78fb      	ldrb	r3, [r7, #3]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d102      	bne.n	800af2c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	e010      	b.n	800af4e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800af2c:	78fb      	ldrb	r3, [r7, #3]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d103      	bne.n	800af3a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800af32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af36:	60fb      	str	r3, [r7, #12]
 800af38:	e009      	b.n	800af4e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d103      	bne.n	800af48 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800af40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af44:	60fb      	str	r3, [r7, #12]
 800af46:	e002      	b.n	800af4e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800af48:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af4c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	4a12      	ldr	r2, [pc, #72]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800af5a:	4b10      	ldr	r3, [pc, #64]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af5c:	691a      	ldr	r2, [r3, #16]
 800af5e:	490f      	ldr	r1, [pc, #60]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4313      	orrs	r3, r2
 800af64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800af66:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	4a0c      	ldr	r2, [pc, #48]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800af70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800af72:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af74:	691a      	ldr	r2, [r3, #16]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	00db      	lsls	r3, r3, #3
 800af7a:	4313      	orrs	r3, r2
 800af7c:	4a07      	ldr	r2, [pc, #28]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af7e:	f043 0302 	orr.w	r3, r3, #2
 800af82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800af84:	4b05      	ldr	r3, [pc, #20]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	4a04      	ldr	r2, [pc, #16]	; (800af9c <FLASH_Erase_Sector+0x8c>)
 800af8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af8e:	6113      	str	r3, [r2, #16]
}
 800af90:	bf00      	nop
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	40023c00 	.word	0x40023c00

0800afa0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800afa4:	4b20      	ldr	r3, [pc, #128]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afac:	2b00      	cmp	r3, #0
 800afae:	d017      	beq.n	800afe0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800afb0:	4b1d      	ldr	r3, [pc, #116]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a1c      	ldr	r2, [pc, #112]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800afbc:	4b1a      	ldr	r3, [pc, #104]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a19      	ldr	r2, [pc, #100]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	4b17      	ldr	r3, [pc, #92]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a16      	ldr	r2, [pc, #88]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afd2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800afd4:	4b14      	ldr	r3, [pc, #80]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a13      	ldr	r2, [pc, #76]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afde:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800afe0:	4b11      	ldr	r3, [pc, #68]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d017      	beq.n	800b01c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800afec:	4b0e      	ldr	r3, [pc, #56]	; (800b028 <FLASH_FlushCaches+0x88>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a0d      	ldr	r2, [pc, #52]	; (800b028 <FLASH_FlushCaches+0x88>)
 800aff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aff6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800aff8:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <FLASH_FlushCaches+0x88>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a0a      	ldr	r2, [pc, #40]	; (800b028 <FLASH_FlushCaches+0x88>)
 800affe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	4b08      	ldr	r3, [pc, #32]	; (800b028 <FLASH_FlushCaches+0x88>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a07      	ldr	r2, [pc, #28]	; (800b028 <FLASH_FlushCaches+0x88>)
 800b00a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b00e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b010:	4b05      	ldr	r3, [pc, #20]	; (800b028 <FLASH_FlushCaches+0x88>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a04      	ldr	r2, [pc, #16]	; (800b028 <FLASH_FlushCaches+0x88>)
 800b016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b01a:	6013      	str	r3, [r2, #0]
  }
}
 800b01c:	bf00      	nop
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	40023c00 	.word	0x40023c00

0800b02c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b089      	sub	sp, #36	; 0x24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b036:	2300      	movs	r3, #0
 800b038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b03e:	2300      	movs	r3, #0
 800b040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b042:	2300      	movs	r3, #0
 800b044:	61fb      	str	r3, [r7, #28]
 800b046:	e165      	b.n	800b314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b048:	2201      	movs	r2, #1
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	fa02 f303 	lsl.w	r3, r2, r3
 800b050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	4013      	ands	r3, r2
 800b05a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	429a      	cmp	r2, r3
 800b062:	f040 8154 	bne.w	800b30e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d003      	beq.n	800b076 <HAL_GPIO_Init+0x4a>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	2b12      	cmp	r3, #18
 800b074:	d123      	bne.n	800b0be <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	08da      	lsrs	r2, r3, #3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3208      	adds	r2, #8
 800b07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	220f      	movs	r2, #15
 800b08e:	fa02 f303 	lsl.w	r3, r2, r3
 800b092:	43db      	mvns	r3, r3
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	4013      	ands	r3, r2
 800b098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	691a      	ldr	r2, [r3, #16]
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0aa:	69ba      	ldr	r2, [r7, #24]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	08da      	lsrs	r2, r3, #3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3208      	adds	r2, #8
 800b0b8:	69b9      	ldr	r1, [r7, #24]
 800b0ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	2203      	movs	r2, #3
 800b0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ce:	43db      	mvns	r3, r3
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f003 0203 	and.w	r2, r3, #3
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d00b      	beq.n	800b112 <HAL_GPIO_Init+0xe6>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d007      	beq.n	800b112 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b106:	2b11      	cmp	r3, #17
 800b108:	d003      	beq.n	800b112 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b12      	cmp	r3, #18
 800b110:	d130      	bne.n	800b174 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	2203      	movs	r2, #3
 800b11e:	fa02 f303 	lsl.w	r3, r2, r3
 800b122:	43db      	mvns	r3, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	4013      	ands	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	68da      	ldr	r2, [r3, #12]
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	4313      	orrs	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b148:	2201      	movs	r2, #1
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	fa02 f303 	lsl.w	r3, r2, r3
 800b150:	43db      	mvns	r3, r3
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	4013      	ands	r3, r2
 800b156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	091b      	lsrs	r3, r3, #4
 800b15e:	f003 0201 	and.w	r2, r3, #1
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	fa02 f303 	lsl.w	r3, r2, r3
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	2203      	movs	r2, #3
 800b180:	fa02 f303 	lsl.w	r3, r2, r3
 800b184:	43db      	mvns	r3, r3
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	4013      	ands	r3, r2
 800b18a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	fa02 f303 	lsl.w	r3, r2, r3
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 80ae 	beq.w	800b30e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	4b5c      	ldr	r3, [pc, #368]	; (800b328 <HAL_GPIO_Init+0x2fc>)
 800b1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ba:	4a5b      	ldr	r2, [pc, #364]	; (800b328 <HAL_GPIO_Init+0x2fc>)
 800b1bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1c0:	6453      	str	r3, [r2, #68]	; 0x44
 800b1c2:	4b59      	ldr	r3, [pc, #356]	; (800b328 <HAL_GPIO_Init+0x2fc>)
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b1ce:	4a57      	ldr	r2, [pc, #348]	; (800b32c <HAL_GPIO_Init+0x300>)
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	089b      	lsrs	r3, r3, #2
 800b1d4:	3302      	adds	r3, #2
 800b1d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	f003 0303 	and.w	r3, r3, #3
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	220f      	movs	r2, #15
 800b1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ea:	43db      	mvns	r3, r3
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a4e      	ldr	r2, [pc, #312]	; (800b330 <HAL_GPIO_Init+0x304>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d025      	beq.n	800b246 <HAL_GPIO_Init+0x21a>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a4d      	ldr	r2, [pc, #308]	; (800b334 <HAL_GPIO_Init+0x308>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d01f      	beq.n	800b242 <HAL_GPIO_Init+0x216>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a4c      	ldr	r2, [pc, #304]	; (800b338 <HAL_GPIO_Init+0x30c>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d019      	beq.n	800b23e <HAL_GPIO_Init+0x212>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a4b      	ldr	r2, [pc, #300]	; (800b33c <HAL_GPIO_Init+0x310>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d013      	beq.n	800b23a <HAL_GPIO_Init+0x20e>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a4a      	ldr	r2, [pc, #296]	; (800b340 <HAL_GPIO_Init+0x314>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00d      	beq.n	800b236 <HAL_GPIO_Init+0x20a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a49      	ldr	r2, [pc, #292]	; (800b344 <HAL_GPIO_Init+0x318>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d007      	beq.n	800b232 <HAL_GPIO_Init+0x206>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a48      	ldr	r2, [pc, #288]	; (800b348 <HAL_GPIO_Init+0x31c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d101      	bne.n	800b22e <HAL_GPIO_Init+0x202>
 800b22a:	2306      	movs	r3, #6
 800b22c:	e00c      	b.n	800b248 <HAL_GPIO_Init+0x21c>
 800b22e:	2307      	movs	r3, #7
 800b230:	e00a      	b.n	800b248 <HAL_GPIO_Init+0x21c>
 800b232:	2305      	movs	r3, #5
 800b234:	e008      	b.n	800b248 <HAL_GPIO_Init+0x21c>
 800b236:	2304      	movs	r3, #4
 800b238:	e006      	b.n	800b248 <HAL_GPIO_Init+0x21c>
 800b23a:	2303      	movs	r3, #3
 800b23c:	e004      	b.n	800b248 <HAL_GPIO_Init+0x21c>
 800b23e:	2302      	movs	r3, #2
 800b240:	e002      	b.n	800b248 <HAL_GPIO_Init+0x21c>
 800b242:	2301      	movs	r3, #1
 800b244:	e000      	b.n	800b248 <HAL_GPIO_Init+0x21c>
 800b246:	2300      	movs	r3, #0
 800b248:	69fa      	ldr	r2, [r7, #28]
 800b24a:	f002 0203 	and.w	r2, r2, #3
 800b24e:	0092      	lsls	r2, r2, #2
 800b250:	4093      	lsls	r3, r2
 800b252:	69ba      	ldr	r2, [r7, #24]
 800b254:	4313      	orrs	r3, r2
 800b256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b258:	4934      	ldr	r1, [pc, #208]	; (800b32c <HAL_GPIO_Init+0x300>)
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	089b      	lsrs	r3, r3, #2
 800b25e:	3302      	adds	r3, #2
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b266:	4b39      	ldr	r3, [pc, #228]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	43db      	mvns	r3, r3
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	4013      	ands	r3, r2
 800b274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	4313      	orrs	r3, r2
 800b288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b28a:	4a30      	ldr	r2, [pc, #192]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b290:	4b2e      	ldr	r3, [pc, #184]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	43db      	mvns	r3, r3
 800b29a:	69ba      	ldr	r2, [r7, #24]
 800b29c:	4013      	ands	r3, r2
 800b29e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b2b4:	4a25      	ldr	r2, [pc, #148]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b2ba:	4b24      	ldr	r3, [pc, #144]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	43db      	mvns	r3, r3
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b2de:	4a1b      	ldr	r2, [pc, #108]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b2e4:	4b19      	ldr	r3, [pc, #100]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	43db      	mvns	r3, r3
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	4313      	orrs	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b308:	4a10      	ldr	r2, [pc, #64]	; (800b34c <HAL_GPIO_Init+0x320>)
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	3301      	adds	r3, #1
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	2b0f      	cmp	r3, #15
 800b318:	f67f ae96 	bls.w	800b048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b31c:	bf00      	nop
 800b31e:	3724      	adds	r7, #36	; 0x24
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	40023800 	.word	0x40023800
 800b32c:	40013800 	.word	0x40013800
 800b330:	40020000 	.word	0x40020000
 800b334:	40020400 	.word	0x40020400
 800b338:	40020800 	.word	0x40020800
 800b33c:	40020c00 	.word	0x40020c00
 800b340:	40021000 	.word	0x40021000
 800b344:	40021400 	.word	0x40021400
 800b348:	40021800 	.word	0x40021800
 800b34c:	40013c00 	.word	0x40013c00

0800b350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691a      	ldr	r2, [r3, #16]
 800b360:	887b      	ldrh	r3, [r7, #2]
 800b362:	4013      	ands	r3, r2
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b368:	2301      	movs	r3, #1
 800b36a:	73fb      	strb	r3, [r7, #15]
 800b36c:	e001      	b.n	800b372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	807b      	strh	r3, [r7, #2]
 800b38c:	4613      	mov	r3, r2
 800b38e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b390:	787b      	ldrb	r3, [r7, #1]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b396:	887a      	ldrh	r2, [r7, #2]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b39c:	e003      	b.n	800b3a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b39e:	887b      	ldrh	r3, [r7, #2]
 800b3a0:	041a      	lsls	r2, r3, #16
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	619a      	str	r2, [r3, #24]
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e0ca      	b.n	800b55e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3c8:	4b67      	ldr	r3, [pc, #412]	; (800b568 <HAL_RCC_ClockConfig+0x1b4>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 030f 	and.w	r3, r3, #15
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d90c      	bls.n	800b3f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3d6:	4b64      	ldr	r3, [pc, #400]	; (800b568 <HAL_RCC_ClockConfig+0x1b4>)
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3de:	4b62      	ldr	r3, [pc, #392]	; (800b568 <HAL_RCC_ClockConfig+0x1b4>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 030f 	and.w	r3, r3, #15
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d001      	beq.n	800b3f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e0b6      	b.n	800b55e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d020      	beq.n	800b43e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b408:	4b58      	ldr	r3, [pc, #352]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	4a57      	ldr	r2, [pc, #348]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b40e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0308 	and.w	r3, r3, #8
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b420:	4b52      	ldr	r3, [pc, #328]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	4a51      	ldr	r2, [pc, #324]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b42a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b42c:	4b4f      	ldr	r3, [pc, #316]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	494c      	ldr	r1, [pc, #304]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d044      	beq.n	800b4d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d107      	bne.n	800b462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b452:	4b46      	ldr	r3, [pc, #280]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d119      	bne.n	800b492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e07d      	b.n	800b55e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	2b02      	cmp	r3, #2
 800b468:	d003      	beq.n	800b472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d107      	bne.n	800b482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b472:	4b3e      	ldr	r3, [pc, #248]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d109      	bne.n	800b492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e06d      	b.n	800b55e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b482:	4b3a      	ldr	r3, [pc, #232]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0302 	and.w	r3, r3, #2
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e065      	b.n	800b55e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b492:	4b36      	ldr	r3, [pc, #216]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f023 0203 	bic.w	r2, r3, #3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	4933      	ldr	r1, [pc, #204]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4a4:	f7fd fc9e 	bl	8008de4 <HAL_GetTick>
 800b4a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4aa:	e00a      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4ac:	f7fd fc9a 	bl	8008de4 <HAL_GetTick>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e04d      	b.n	800b55e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4c2:	4b2a      	ldr	r3, [pc, #168]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f003 020c 	and.w	r2, r3, #12
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d1eb      	bne.n	800b4ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4d4:	4b24      	ldr	r3, [pc, #144]	; (800b568 <HAL_RCC_ClockConfig+0x1b4>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 030f 	and.w	r3, r3, #15
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d20c      	bcs.n	800b4fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4e2:	4b21      	ldr	r3, [pc, #132]	; (800b568 <HAL_RCC_ClockConfig+0x1b4>)
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ea:	4b1f      	ldr	r3, [pc, #124]	; (800b568 <HAL_RCC_ClockConfig+0x1b4>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 030f 	and.w	r3, r3, #15
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d001      	beq.n	800b4fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e030      	b.n	800b55e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d008      	beq.n	800b51a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b508:	4b18      	ldr	r3, [pc, #96]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4915      	ldr	r1, [pc, #84]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b516:	4313      	orrs	r3, r2
 800b518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0308 	and.w	r3, r3, #8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d009      	beq.n	800b53a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b526:	4b11      	ldr	r3, [pc, #68]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	490d      	ldr	r1, [pc, #52]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b536:	4313      	orrs	r3, r2
 800b538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b53a:	f000 f851 	bl	800b5e0 <HAL_RCC_GetSysClockFreq>
 800b53e:	4601      	mov	r1, r0
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <HAL_RCC_ClockConfig+0x1b8>)
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	091b      	lsrs	r3, r3, #4
 800b546:	f003 030f 	and.w	r3, r3, #15
 800b54a:	4a09      	ldr	r2, [pc, #36]	; (800b570 <HAL_RCC_ClockConfig+0x1bc>)
 800b54c:	5cd3      	ldrb	r3, [r2, r3]
 800b54e:	fa21 f303 	lsr.w	r3, r1, r3
 800b552:	4a08      	ldr	r2, [pc, #32]	; (800b574 <HAL_RCC_ClockConfig+0x1c0>)
 800b554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b556:	2000      	movs	r0, #0
 800b558:	f7fd fc00 	bl	8008d5c <HAL_InitTick>

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	40023c00 	.word	0x40023c00
 800b56c:	40023800 	.word	0x40023800
 800b570:	080271e0 	.word	0x080271e0
 800b574:	2000000c 	.word	0x2000000c

0800b578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b578:	b480      	push	{r7}
 800b57a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b57c:	4b03      	ldr	r3, [pc, #12]	; (800b58c <HAL_RCC_GetHCLKFreq+0x14>)
 800b57e:	681b      	ldr	r3, [r3, #0]
}
 800b580:	4618      	mov	r0, r3
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	2000000c 	.word	0x2000000c

0800b590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b594:	f7ff fff0 	bl	800b578 <HAL_RCC_GetHCLKFreq>
 800b598:	4601      	mov	r1, r0
 800b59a:	4b05      	ldr	r3, [pc, #20]	; (800b5b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	0a9b      	lsrs	r3, r3, #10
 800b5a0:	f003 0307 	and.w	r3, r3, #7
 800b5a4:	4a03      	ldr	r2, [pc, #12]	; (800b5b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5a6:	5cd3      	ldrb	r3, [r2, r3]
 800b5a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	40023800 	.word	0x40023800
 800b5b4:	080271f0 	.word	0x080271f0

0800b5b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b5bc:	f7ff ffdc 	bl	800b578 <HAL_RCC_GetHCLKFreq>
 800b5c0:	4601      	mov	r1, r0
 800b5c2:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	0b5b      	lsrs	r3, r3, #13
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	4a03      	ldr	r2, [pc, #12]	; (800b5dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5ce:	5cd3      	ldrb	r3, [r2, r3]
 800b5d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	40023800 	.word	0x40023800
 800b5dc:	080271f0 	.word	0x080271f0

0800b5e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5fa:	4bc6      	ldr	r3, [pc, #792]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f003 030c 	and.w	r3, r3, #12
 800b602:	2b0c      	cmp	r3, #12
 800b604:	f200 817e 	bhi.w	800b904 <HAL_RCC_GetSysClockFreq+0x324>
 800b608:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <HAL_RCC_GetSysClockFreq+0x30>)
 800b60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60e:	bf00      	nop
 800b610:	0800b645 	.word	0x0800b645
 800b614:	0800b905 	.word	0x0800b905
 800b618:	0800b905 	.word	0x0800b905
 800b61c:	0800b905 	.word	0x0800b905
 800b620:	0800b64b 	.word	0x0800b64b
 800b624:	0800b905 	.word	0x0800b905
 800b628:	0800b905 	.word	0x0800b905
 800b62c:	0800b905 	.word	0x0800b905
 800b630:	0800b651 	.word	0x0800b651
 800b634:	0800b905 	.word	0x0800b905
 800b638:	0800b905 	.word	0x0800b905
 800b63c:	0800b905 	.word	0x0800b905
 800b640:	0800b7ad 	.word	0x0800b7ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b644:	4bb4      	ldr	r3, [pc, #720]	; (800b918 <HAL_RCC_GetSysClockFreq+0x338>)
 800b646:	613b      	str	r3, [r7, #16]
       break;
 800b648:	e15f      	b.n	800b90a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b64a:	4bb4      	ldr	r3, [pc, #720]	; (800b91c <HAL_RCC_GetSysClockFreq+0x33c>)
 800b64c:	613b      	str	r3, [r7, #16]
      break;
 800b64e:	e15c      	b.n	800b90a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b650:	4bb0      	ldr	r3, [pc, #704]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b658:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b65a:	4bae      	ldr	r3, [pc, #696]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d04a      	beq.n	800b6fc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b666:	4bab      	ldr	r3, [pc, #684]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	099b      	lsrs	r3, r3, #6
 800b66c:	f04f 0400 	mov.w	r4, #0
 800b670:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b674:	f04f 0200 	mov.w	r2, #0
 800b678:	ea03 0501 	and.w	r5, r3, r1
 800b67c:	ea04 0602 	and.w	r6, r4, r2
 800b680:	4629      	mov	r1, r5
 800b682:	4632      	mov	r2, r6
 800b684:	f04f 0300 	mov.w	r3, #0
 800b688:	f04f 0400 	mov.w	r4, #0
 800b68c:	0154      	lsls	r4, r2, #5
 800b68e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b692:	014b      	lsls	r3, r1, #5
 800b694:	4619      	mov	r1, r3
 800b696:	4622      	mov	r2, r4
 800b698:	1b49      	subs	r1, r1, r5
 800b69a:	eb62 0206 	sbc.w	r2, r2, r6
 800b69e:	f04f 0300 	mov.w	r3, #0
 800b6a2:	f04f 0400 	mov.w	r4, #0
 800b6a6:	0194      	lsls	r4, r2, #6
 800b6a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b6ac:	018b      	lsls	r3, r1, #6
 800b6ae:	1a5b      	subs	r3, r3, r1
 800b6b0:	eb64 0402 	sbc.w	r4, r4, r2
 800b6b4:	f04f 0100 	mov.w	r1, #0
 800b6b8:	f04f 0200 	mov.w	r2, #0
 800b6bc:	00e2      	lsls	r2, r4, #3
 800b6be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b6c2:	00d9      	lsls	r1, r3, #3
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4614      	mov	r4, r2
 800b6c8:	195b      	adds	r3, r3, r5
 800b6ca:	eb44 0406 	adc.w	r4, r4, r6
 800b6ce:	f04f 0100 	mov.w	r1, #0
 800b6d2:	f04f 0200 	mov.w	r2, #0
 800b6d6:	0262      	lsls	r2, r4, #9
 800b6d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b6dc:	0259      	lsls	r1, r3, #9
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f04f 0400 	mov.w	r4, #0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	4623      	mov	r3, r4
 800b6f0:	f7fd f992 	bl	8008a18 <__aeabi_uldivmod>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	e049      	b.n	800b790 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6fc:	4b85      	ldr	r3, [pc, #532]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	099b      	lsrs	r3, r3, #6
 800b702:	f04f 0400 	mov.w	r4, #0
 800b706:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b70a:	f04f 0200 	mov.w	r2, #0
 800b70e:	ea03 0501 	and.w	r5, r3, r1
 800b712:	ea04 0602 	and.w	r6, r4, r2
 800b716:	4629      	mov	r1, r5
 800b718:	4632      	mov	r2, r6
 800b71a:	f04f 0300 	mov.w	r3, #0
 800b71e:	f04f 0400 	mov.w	r4, #0
 800b722:	0154      	lsls	r4, r2, #5
 800b724:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b728:	014b      	lsls	r3, r1, #5
 800b72a:	4619      	mov	r1, r3
 800b72c:	4622      	mov	r2, r4
 800b72e:	1b49      	subs	r1, r1, r5
 800b730:	eb62 0206 	sbc.w	r2, r2, r6
 800b734:	f04f 0300 	mov.w	r3, #0
 800b738:	f04f 0400 	mov.w	r4, #0
 800b73c:	0194      	lsls	r4, r2, #6
 800b73e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b742:	018b      	lsls	r3, r1, #6
 800b744:	1a5b      	subs	r3, r3, r1
 800b746:	eb64 0402 	sbc.w	r4, r4, r2
 800b74a:	f04f 0100 	mov.w	r1, #0
 800b74e:	f04f 0200 	mov.w	r2, #0
 800b752:	00e2      	lsls	r2, r4, #3
 800b754:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b758:	00d9      	lsls	r1, r3, #3
 800b75a:	460b      	mov	r3, r1
 800b75c:	4614      	mov	r4, r2
 800b75e:	195b      	adds	r3, r3, r5
 800b760:	eb44 0406 	adc.w	r4, r4, r6
 800b764:	f04f 0100 	mov.w	r1, #0
 800b768:	f04f 0200 	mov.w	r2, #0
 800b76c:	02a2      	lsls	r2, r4, #10
 800b76e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b772:	0299      	lsls	r1, r3, #10
 800b774:	460b      	mov	r3, r1
 800b776:	4614      	mov	r4, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	4621      	mov	r1, r4
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f04f 0400 	mov.w	r4, #0
 800b782:	461a      	mov	r2, r3
 800b784:	4623      	mov	r3, r4
 800b786:	f7fd f947 	bl	8008a18 <__aeabi_uldivmod>
 800b78a:	4603      	mov	r3, r0
 800b78c:	460c      	mov	r4, r1
 800b78e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b790:	4b60      	ldr	r3, [pc, #384]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	0c1b      	lsrs	r3, r3, #16
 800b796:	f003 0303 	and.w	r3, r3, #3
 800b79a:	3301      	adds	r3, #1
 800b79c:	005b      	lsls	r3, r3, #1
 800b79e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a8:	613b      	str	r3, [r7, #16]
      break;
 800b7aa:	e0ae      	b.n	800b90a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7ac:	4b59      	ldr	r3, [pc, #356]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7b6:	4b57      	ldr	r3, [pc, #348]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d04a      	beq.n	800b858 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7c2:	4b54      	ldr	r3, [pc, #336]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	099b      	lsrs	r3, r3, #6
 800b7c8:	f04f 0400 	mov.w	r4, #0
 800b7cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b7d0:	f04f 0200 	mov.w	r2, #0
 800b7d4:	ea03 0501 	and.w	r5, r3, r1
 800b7d8:	ea04 0602 	and.w	r6, r4, r2
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4632      	mov	r2, r6
 800b7e0:	f04f 0300 	mov.w	r3, #0
 800b7e4:	f04f 0400 	mov.w	r4, #0
 800b7e8:	0154      	lsls	r4, r2, #5
 800b7ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b7ee:	014b      	lsls	r3, r1, #5
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4622      	mov	r2, r4
 800b7f4:	1b49      	subs	r1, r1, r5
 800b7f6:	eb62 0206 	sbc.w	r2, r2, r6
 800b7fa:	f04f 0300 	mov.w	r3, #0
 800b7fe:	f04f 0400 	mov.w	r4, #0
 800b802:	0194      	lsls	r4, r2, #6
 800b804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b808:	018b      	lsls	r3, r1, #6
 800b80a:	1a5b      	subs	r3, r3, r1
 800b80c:	eb64 0402 	sbc.w	r4, r4, r2
 800b810:	f04f 0100 	mov.w	r1, #0
 800b814:	f04f 0200 	mov.w	r2, #0
 800b818:	00e2      	lsls	r2, r4, #3
 800b81a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b81e:	00d9      	lsls	r1, r3, #3
 800b820:	460b      	mov	r3, r1
 800b822:	4614      	mov	r4, r2
 800b824:	195b      	adds	r3, r3, r5
 800b826:	eb44 0406 	adc.w	r4, r4, r6
 800b82a:	f04f 0100 	mov.w	r1, #0
 800b82e:	f04f 0200 	mov.w	r2, #0
 800b832:	0262      	lsls	r2, r4, #9
 800b834:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b838:	0259      	lsls	r1, r3, #9
 800b83a:	460b      	mov	r3, r1
 800b83c:	4614      	mov	r4, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	4621      	mov	r1, r4
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f04f 0400 	mov.w	r4, #0
 800b848:	461a      	mov	r2, r3
 800b84a:	4623      	mov	r3, r4
 800b84c:	f7fd f8e4 	bl	8008a18 <__aeabi_uldivmod>
 800b850:	4603      	mov	r3, r0
 800b852:	460c      	mov	r4, r1
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	e049      	b.n	800b8ec <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b858:	4b2e      	ldr	r3, [pc, #184]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	099b      	lsrs	r3, r3, #6
 800b85e:	f04f 0400 	mov.w	r4, #0
 800b862:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b866:	f04f 0200 	mov.w	r2, #0
 800b86a:	ea03 0501 	and.w	r5, r3, r1
 800b86e:	ea04 0602 	and.w	r6, r4, r2
 800b872:	4629      	mov	r1, r5
 800b874:	4632      	mov	r2, r6
 800b876:	f04f 0300 	mov.w	r3, #0
 800b87a:	f04f 0400 	mov.w	r4, #0
 800b87e:	0154      	lsls	r4, r2, #5
 800b880:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b884:	014b      	lsls	r3, r1, #5
 800b886:	4619      	mov	r1, r3
 800b888:	4622      	mov	r2, r4
 800b88a:	1b49      	subs	r1, r1, r5
 800b88c:	eb62 0206 	sbc.w	r2, r2, r6
 800b890:	f04f 0300 	mov.w	r3, #0
 800b894:	f04f 0400 	mov.w	r4, #0
 800b898:	0194      	lsls	r4, r2, #6
 800b89a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b89e:	018b      	lsls	r3, r1, #6
 800b8a0:	1a5b      	subs	r3, r3, r1
 800b8a2:	eb64 0402 	sbc.w	r4, r4, r2
 800b8a6:	f04f 0100 	mov.w	r1, #0
 800b8aa:	f04f 0200 	mov.w	r2, #0
 800b8ae:	00e2      	lsls	r2, r4, #3
 800b8b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b8b4:	00d9      	lsls	r1, r3, #3
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4614      	mov	r4, r2
 800b8ba:	195b      	adds	r3, r3, r5
 800b8bc:	eb44 0406 	adc.w	r4, r4, r6
 800b8c0:	f04f 0100 	mov.w	r1, #0
 800b8c4:	f04f 0200 	mov.w	r2, #0
 800b8c8:	02a2      	lsls	r2, r4, #10
 800b8ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b8ce:	0299      	lsls	r1, r3, #10
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f04f 0400 	mov.w	r4, #0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4623      	mov	r3, r4
 800b8e2:	f7fd f899 	bl	8008a18 <__aeabi_uldivmod>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b8ec:	4b09      	ldr	r3, [pc, #36]	; (800b914 <HAL_RCC_GetSysClockFreq+0x334>)
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	0f1b      	lsrs	r3, r3, #28
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b900:	613b      	str	r3, [r7, #16]
      break;
 800b902:	e002      	b.n	800b90a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <HAL_RCC_GetSysClockFreq+0x338>)
 800b906:	613b      	str	r3, [r7, #16]
      break;
 800b908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b90a:	693b      	ldr	r3, [r7, #16]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	371c      	adds	r7, #28
 800b910:	46bd      	mov	sp, r7
 800b912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b914:	40023800 	.word	0x40023800
 800b918:	00f42400 	.word	0x00f42400
 800b91c:	007a1200 	.word	0x007a1200

0800b920 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b928:	2300      	movs	r3, #0
 800b92a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 8083 	beq.w	800ba40 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b93a:	4b95      	ldr	r3, [pc, #596]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f003 030c 	and.w	r3, r3, #12
 800b942:	2b04      	cmp	r3, #4
 800b944:	d019      	beq.n	800b97a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b946:	4b92      	ldr	r3, [pc, #584]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b94e:	2b08      	cmp	r3, #8
 800b950:	d106      	bne.n	800b960 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b952:	4b8f      	ldr	r3, [pc, #572]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b95a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b95e:	d00c      	beq.n	800b97a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b960:	4b8b      	ldr	r3, [pc, #556]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b968:	2b0c      	cmp	r3, #12
 800b96a:	d112      	bne.n	800b992 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b96c:	4b88      	ldr	r3, [pc, #544]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b978:	d10b      	bne.n	800b992 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b97a:	4b85      	ldr	r3, [pc, #532]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b982:	2b00      	cmp	r3, #0
 800b984:	d05b      	beq.n	800ba3e <HAL_RCC_OscConfig+0x11e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d157      	bne.n	800ba3e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e216      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b99a:	d106      	bne.n	800b9aa <HAL_RCC_OscConfig+0x8a>
 800b99c:	4b7c      	ldr	r3, [pc, #496]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a7b      	ldr	r2, [pc, #492]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9a6:	6013      	str	r3, [r2, #0]
 800b9a8:	e01d      	b.n	800b9e6 <HAL_RCC_OscConfig+0xc6>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9b2:	d10c      	bne.n	800b9ce <HAL_RCC_OscConfig+0xae>
 800b9b4:	4b76      	ldr	r3, [pc, #472]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a75      	ldr	r2, [pc, #468]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	4b73      	ldr	r3, [pc, #460]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a72      	ldr	r2, [pc, #456]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	e00b      	b.n	800b9e6 <HAL_RCC_OscConfig+0xc6>
 800b9ce:	4b70      	ldr	r3, [pc, #448]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a6f      	ldr	r2, [pc, #444]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	4b6d      	ldr	r3, [pc, #436]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a6c      	ldr	r2, [pc, #432]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800b9e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d013      	beq.n	800ba16 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9ee:	f7fd f9f9 	bl	8008de4 <HAL_GetTick>
 800b9f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9f4:	e008      	b.n	800ba08 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b9f6:	f7fd f9f5 	bl	8008de4 <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	2b64      	cmp	r3, #100	; 0x64
 800ba02:	d901      	bls.n	800ba08 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e1db      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba08:	4b61      	ldr	r3, [pc, #388]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0f0      	beq.n	800b9f6 <HAL_RCC_OscConfig+0xd6>
 800ba14:	e014      	b.n	800ba40 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba16:	f7fd f9e5 	bl	8008de4 <HAL_GetTick>
 800ba1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba1c:	e008      	b.n	800ba30 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba1e:	f7fd f9e1 	bl	8008de4 <HAL_GetTick>
 800ba22:	4602      	mov	r2, r0
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	2b64      	cmp	r3, #100	; 0x64
 800ba2a:	d901      	bls.n	800ba30 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	e1c7      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba30:	4b57      	ldr	r3, [pc, #348]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1f0      	bne.n	800ba1e <HAL_RCC_OscConfig+0xfe>
 800ba3c:	e000      	b.n	800ba40 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0302 	and.w	r3, r3, #2
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d06f      	beq.n	800bb2c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba4c:	4b50      	ldr	r3, [pc, #320]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	f003 030c 	and.w	r3, r3, #12
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d017      	beq.n	800ba88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba58:	4b4d      	ldr	r3, [pc, #308]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba60:	2b08      	cmp	r3, #8
 800ba62:	d105      	bne.n	800ba70 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba64:	4b4a      	ldr	r3, [pc, #296]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00b      	beq.n	800ba88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba70:	4b47      	ldr	r3, [pc, #284]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba78:	2b0c      	cmp	r3, #12
 800ba7a:	d11c      	bne.n	800bab6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba7c:	4b44      	ldr	r3, [pc, #272]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d116      	bne.n	800bab6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba88:	4b41      	ldr	r3, [pc, #260]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d005      	beq.n	800baa0 <HAL_RCC_OscConfig+0x180>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d001      	beq.n	800baa0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e18f      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baa0:	4b3b      	ldr	r3, [pc, #236]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	00db      	lsls	r3, r3, #3
 800baae:	4938      	ldr	r1, [pc, #224]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800bab0:	4313      	orrs	r3, r2
 800bab2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bab4:	e03a      	b.n	800bb2c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d020      	beq.n	800bb00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800babe:	4b35      	ldr	r3, [pc, #212]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bac4:	f7fd f98e 	bl	8008de4 <HAL_GetTick>
 800bac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800baca:	e008      	b.n	800bade <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bacc:	f7fd f98a 	bl	8008de4 <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d901      	bls.n	800bade <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e170      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bade:	4b2c      	ldr	r3, [pc, #176]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 0302 	and.w	r3, r3, #2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0f0      	beq.n	800bacc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baea:	4b29      	ldr	r3, [pc, #164]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	4925      	ldr	r1, [pc, #148]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800bafa:	4313      	orrs	r3, r2
 800bafc:	600b      	str	r3, [r1, #0]
 800bafe:	e015      	b.n	800bb2c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb00:	4b24      	ldr	r3, [pc, #144]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb06:	f7fd f96d 	bl	8008de4 <HAL_GetTick>
 800bb0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb0c:	e008      	b.n	800bb20 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb0e:	f7fd f969 	bl	8008de4 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d901      	bls.n	800bb20 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e14f      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb20:	4b1b      	ldr	r3, [pc, #108]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f0      	bne.n	800bb0e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 0308 	and.w	r3, r3, #8
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d037      	beq.n	800bba8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d016      	beq.n	800bb6e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb40:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <HAL_RCC_OscConfig+0x278>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb46:	f7fd f94d 	bl	8008de4 <HAL_GetTick>
 800bb4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb4c:	e008      	b.n	800bb60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb4e:	f7fd f949 	bl	8008de4 <HAL_GetTick>
 800bb52:	4602      	mov	r2, r0
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d901      	bls.n	800bb60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e12f      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb60:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <HAL_RCC_OscConfig+0x270>)
 800bb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb64:	f003 0302 	and.w	r3, r3, #2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d0f0      	beq.n	800bb4e <HAL_RCC_OscConfig+0x22e>
 800bb6c:	e01c      	b.n	800bba8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb6e:	4b0a      	ldr	r3, [pc, #40]	; (800bb98 <HAL_RCC_OscConfig+0x278>)
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb74:	f7fd f936 	bl	8008de4 <HAL_GetTick>
 800bb78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb7a:	e00f      	b.n	800bb9c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb7c:	f7fd f932 	bl	8008de4 <HAL_GetTick>
 800bb80:	4602      	mov	r2, r0
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d908      	bls.n	800bb9c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e118      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
 800bb8e:	bf00      	nop
 800bb90:	40023800 	.word	0x40023800
 800bb94:	42470000 	.word	0x42470000
 800bb98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb9c:	4b8a      	ldr	r3, [pc, #552]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bb9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1e9      	bne.n	800bb7c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0304 	and.w	r3, r3, #4
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 8097 	beq.w	800bce4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbba:	4b83      	ldr	r3, [pc, #524]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10f      	bne.n	800bbe6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	4b7f      	ldr	r3, [pc, #508]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbce:	4a7e      	ldr	r2, [pc, #504]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bbd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbd4:	6413      	str	r3, [r2, #64]	; 0x40
 800bbd6:	4b7c      	ldr	r3, [pc, #496]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbde:	60fb      	str	r3, [r7, #12]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbe6:	4b79      	ldr	r3, [pc, #484]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d118      	bne.n	800bc24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bbf2:	4b76      	ldr	r3, [pc, #472]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a75      	ldr	r2, [pc, #468]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bbf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bbfe:	f7fd f8f1 	bl	8008de4 <HAL_GetTick>
 800bc02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc04:	e008      	b.n	800bc18 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc06:	f7fd f8ed 	bl	8008de4 <HAL_GetTick>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d901      	bls.n	800bc18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e0d3      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc18:	4b6c      	ldr	r3, [pc, #432]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d0f0      	beq.n	800bc06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d106      	bne.n	800bc3a <HAL_RCC_OscConfig+0x31a>
 800bc2c:	4b66      	ldr	r3, [pc, #408]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc30:	4a65      	ldr	r2, [pc, #404]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc32:	f043 0301 	orr.w	r3, r3, #1
 800bc36:	6713      	str	r3, [r2, #112]	; 0x70
 800bc38:	e01c      	b.n	800bc74 <HAL_RCC_OscConfig+0x354>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	2b05      	cmp	r3, #5
 800bc40:	d10c      	bne.n	800bc5c <HAL_RCC_OscConfig+0x33c>
 800bc42:	4b61      	ldr	r3, [pc, #388]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc46:	4a60      	ldr	r2, [pc, #384]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc48:	f043 0304 	orr.w	r3, r3, #4
 800bc4c:	6713      	str	r3, [r2, #112]	; 0x70
 800bc4e:	4b5e      	ldr	r3, [pc, #376]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc52:	4a5d      	ldr	r2, [pc, #372]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc54:	f043 0301 	orr.w	r3, r3, #1
 800bc58:	6713      	str	r3, [r2, #112]	; 0x70
 800bc5a:	e00b      	b.n	800bc74 <HAL_RCC_OscConfig+0x354>
 800bc5c:	4b5a      	ldr	r3, [pc, #360]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc60:	4a59      	ldr	r2, [pc, #356]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc62:	f023 0301 	bic.w	r3, r3, #1
 800bc66:	6713      	str	r3, [r2, #112]	; 0x70
 800bc68:	4b57      	ldr	r3, [pc, #348]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6c:	4a56      	ldr	r2, [pc, #344]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc6e:	f023 0304 	bic.w	r3, r3, #4
 800bc72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d015      	beq.n	800bca8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc7c:	f7fd f8b2 	bl	8008de4 <HAL_GetTick>
 800bc80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc82:	e00a      	b.n	800bc9a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc84:	f7fd f8ae 	bl	8008de4 <HAL_GetTick>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d901      	bls.n	800bc9a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800bc96:	2303      	movs	r3, #3
 800bc98:	e092      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc9a:	4b4b      	ldr	r3, [pc, #300]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bc9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0ee      	beq.n	800bc84 <HAL_RCC_OscConfig+0x364>
 800bca6:	e014      	b.n	800bcd2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bca8:	f7fd f89c 	bl	8008de4 <HAL_GetTick>
 800bcac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcae:	e00a      	b.n	800bcc6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcb0:	f7fd f898 	bl	8008de4 <HAL_GetTick>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d901      	bls.n	800bcc6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e07c      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcc6:	4b40      	ldr	r3, [pc, #256]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcca:	f003 0302 	and.w	r3, r3, #2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1ee      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d105      	bne.n	800bce4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bcd8:	4b3b      	ldr	r3, [pc, #236]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bcda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcdc:	4a3a      	ldr	r2, [pc, #232]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bcde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d068      	beq.n	800bdbe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bcec:	4b36      	ldr	r3, [pc, #216]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	f003 030c 	and.w	r3, r3, #12
 800bcf4:	2b08      	cmp	r3, #8
 800bcf6:	d060      	beq.n	800bdba <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d145      	bne.n	800bd8c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd00:	4b33      	ldr	r3, [pc, #204]	; (800bdd0 <HAL_RCC_OscConfig+0x4b0>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd06:	f7fd f86d 	bl	8008de4 <HAL_GetTick>
 800bd0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd0c:	e008      	b.n	800bd20 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd0e:	f7fd f869 	bl	8008de4 <HAL_GetTick>
 800bd12:	4602      	mov	r2, r0
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d901      	bls.n	800bd20 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e04f      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd20:	4b29      	ldr	r3, [pc, #164]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1f0      	bne.n	800bd0e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	69da      	ldr	r2, [r3, #28]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	431a      	orrs	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	019b      	lsls	r3, r3, #6
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd42:	085b      	lsrs	r3, r3, #1
 800bd44:	3b01      	subs	r3, #1
 800bd46:	041b      	lsls	r3, r3, #16
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	061b      	lsls	r3, r3, #24
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	071b      	lsls	r3, r3, #28
 800bd58:	491b      	ldr	r1, [pc, #108]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd5e:	4b1c      	ldr	r3, [pc, #112]	; (800bdd0 <HAL_RCC_OscConfig+0x4b0>)
 800bd60:	2201      	movs	r2, #1
 800bd62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd64:	f7fd f83e 	bl	8008de4 <HAL_GetTick>
 800bd68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd6a:	e008      	b.n	800bd7e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd6c:	f7fd f83a 	bl	8008de4 <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d901      	bls.n	800bd7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e020      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd7e:	4b12      	ldr	r3, [pc, #72]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0f0      	beq.n	800bd6c <HAL_RCC_OscConfig+0x44c>
 800bd8a:	e018      	b.n	800bdbe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd8c:	4b10      	ldr	r3, [pc, #64]	; (800bdd0 <HAL_RCC_OscConfig+0x4b0>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd92:	f7fd f827 	bl	8008de4 <HAL_GetTick>
 800bd96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd98:	e008      	b.n	800bdac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd9a:	f7fd f823 	bl	8008de4 <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d901      	bls.n	800bdac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e009      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdac:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <HAL_RCC_OscConfig+0x4a8>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1f0      	bne.n	800bd9a <HAL_RCC_OscConfig+0x47a>
 800bdb8:	e001      	b.n	800bdbe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	40023800 	.word	0x40023800
 800bdcc:	40007000 	.word	0x40007000
 800bdd0:	42470060 	.word	0x42470060

0800bdd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e056      	b.n	800be94 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d106      	bne.n	800be06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f005 fb67 	bl	80114d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2202      	movs	r2, #2
 800be0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	431a      	orrs	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	431a      	orrs	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	431a      	orrs	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	431a      	orrs	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	431a      	orrs	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	ea42 0103 	orr.w	r1, r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	0c1b      	lsrs	r3, r3, #16
 800be64:	f003 0104 	and.w	r1, r3, #4
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69da      	ldr	r2, [r3, #28]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08c      	sub	sp, #48	; 0x30
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800beaa:	2301      	movs	r3, #1
 800beac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_SPI_TransmitReceive+0x26>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e18a      	b.n	800c1d8 <HAL_SPI_TransmitReceive+0x33c>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beca:	f7fc ff8b 	bl	8008de4 <HAL_GetTick>
 800bece:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bee0:	887b      	ldrh	r3, [r7, #2]
 800bee2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d00f      	beq.n	800bf0c <HAL_SPI_TransmitReceive+0x70>
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bef2:	d107      	bne.n	800bf04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d103      	bne.n	800bf04 <HAL_SPI_TransmitReceive+0x68>
 800befc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d003      	beq.n	800bf0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bf04:	2302      	movs	r3, #2
 800bf06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bf0a:	e15b      	b.n	800c1c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d005      	beq.n	800bf1e <HAL_SPI_TransmitReceive+0x82>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <HAL_SPI_TransmitReceive+0x82>
 800bf18:	887b      	ldrh	r3, [r7, #2]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d103      	bne.n	800bf26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bf24:	e14e      	b.n	800c1c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	d003      	beq.n	800bf3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2205      	movs	r2, #5
 800bf36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	887a      	ldrh	r2, [r7, #2]
 800bf4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	887a      	ldrh	r2, [r7, #2]
 800bf50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	887a      	ldrh	r2, [r7, #2]
 800bf5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	887a      	ldrh	r2, [r7, #2]
 800bf62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7a:	2b40      	cmp	r3, #64	; 0x40
 800bf7c:	d007      	beq.n	800bf8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf96:	d178      	bne.n	800c08a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <HAL_SPI_TransmitReceive+0x10a>
 800bfa0:	8b7b      	ldrh	r3, [r7, #26]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d166      	bne.n	800c074 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfaa:	881a      	ldrh	r2, [r3, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb6:	1c9a      	adds	r2, r3, #2
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfca:	e053      	b.n	800c074 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f003 0302 	and.w	r3, r3, #2
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d11b      	bne.n	800c012 <HAL_SPI_TransmitReceive+0x176>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d016      	beq.n	800c012 <HAL_SPI_TransmitReceive+0x176>
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d113      	bne.n	800c012 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfee:	881a      	ldrh	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffa:	1c9a      	adds	r2, r3, #2
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c004:	b29b      	uxth	r3, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c00e:	2300      	movs	r3, #0
 800c010:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d119      	bne.n	800c054 <HAL_SPI_TransmitReceive+0x1b8>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c024:	b29b      	uxth	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d014      	beq.n	800c054 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68da      	ldr	r2, [r3, #12]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c034:	b292      	uxth	r2, r2
 800c036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03c:	1c9a      	adds	r2, r3, #2
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c046:	b29b      	uxth	r3, r3
 800c048:	3b01      	subs	r3, #1
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c050:	2301      	movs	r3, #1
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c054:	f7fc fec6 	bl	8008de4 <HAL_GetTick>
 800c058:	4602      	mov	r2, r0
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c060:	429a      	cmp	r2, r3
 800c062:	d807      	bhi.n	800c074 <HAL_SPI_TransmitReceive+0x1d8>
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06a:	d003      	beq.n	800c074 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c06c:	2303      	movs	r3, #3
 800c06e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c072:	e0a7      	b.n	800c1c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c078:	b29b      	uxth	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1a6      	bne.n	800bfcc <HAL_SPI_TransmitReceive+0x130>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c082:	b29b      	uxth	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1a1      	bne.n	800bfcc <HAL_SPI_TransmitReceive+0x130>
 800c088:	e07c      	b.n	800c184 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <HAL_SPI_TransmitReceive+0x1fc>
 800c092:	8b7b      	ldrh	r3, [r7, #26]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d16b      	bne.n	800c170 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	330c      	adds	r3, #12
 800c0a2:	7812      	ldrb	r2, [r2, #0]
 800c0a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0be:	e057      	b.n	800c170 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d11c      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x26c>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d017      	beq.n	800c108 <HAL_SPI_TransmitReceive+0x26c>
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d114      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	330c      	adds	r3, #12
 800c0e8:	7812      	ldrb	r2, [r2, #0]
 800c0ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c104:	2300      	movs	r3, #0
 800c106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	f003 0301 	and.w	r3, r3, #1
 800c112:	2b01      	cmp	r3, #1
 800c114:	d119      	bne.n	800c14a <HAL_SPI_TransmitReceive+0x2ae>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d014      	beq.n	800c14a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68da      	ldr	r2, [r3, #12]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12a:	b2d2      	uxtb	r2, r2
 800c12c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	3b01      	subs	r3, #1
 800c140:	b29a      	uxth	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c146:	2301      	movs	r3, #1
 800c148:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c14a:	f7fc fe4b 	bl	8008de4 <HAL_GetTick>
 800c14e:	4602      	mov	r2, r0
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c156:	429a      	cmp	r2, r3
 800c158:	d803      	bhi.n	800c162 <HAL_SPI_TransmitReceive+0x2c6>
 800c15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c160:	d102      	bne.n	800c168 <HAL_SPI_TransmitReceive+0x2cc>
 800c162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c164:	2b00      	cmp	r3, #0
 800c166:	d103      	bne.n	800c170 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c168:	2303      	movs	r3, #3
 800c16a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c16e:	e029      	b.n	800c1c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c174:	b29b      	uxth	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1a2      	bne.n	800c0c0 <HAL_SPI_TransmitReceive+0x224>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c17e:	b29b      	uxth	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d19d      	bne.n	800c0c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f000 fb1b 	bl	800c7c4 <SPI_EndRxTxTransaction>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d006      	beq.n	800c1a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2220      	movs	r2, #32
 800c19e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c1a0:	e010      	b.n	800c1c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10b      	bne.n	800c1c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	617b      	str	r3, [r7, #20]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	617b      	str	r3, [r7, #20]
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	e000      	b.n	800c1c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c1c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c1d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3730      	adds	r7, #48	; 0x30
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
 800c1ec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d101      	bne.n	800c200 <HAL_SPI_TransmitReceive_IT+0x20>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	e075      	b.n	800c2ec <HAL_SPI_TransmitReceive_IT+0x10c>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c20e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c216:	7dbb      	ldrb	r3, [r7, #22]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d00d      	beq.n	800c238 <HAL_SPI_TransmitReceive_IT+0x58>
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c222:	d106      	bne.n	800c232 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d102      	bne.n	800c232 <HAL_SPI_TransmitReceive_IT+0x52>
 800c22c:	7dbb      	ldrb	r3, [r7, #22]
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d002      	beq.n	800c238 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800c232:	2302      	movs	r3, #2
 800c234:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c236:	e054      	b.n	800c2e2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <HAL_SPI_TransmitReceive_IT+0x6a>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <HAL_SPI_TransmitReceive_IT+0x6a>
 800c244:	887b      	ldrh	r3, [r7, #2]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d102      	bne.n	800c250 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c24e:	e048      	b.n	800c2e2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b04      	cmp	r3, #4
 800c25a:	d003      	beq.n	800c264 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2205      	movs	r2, #5
 800c260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	887a      	ldrh	r2, [r7, #2]
 800c274:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	887a      	ldrh	r2, [r7, #2]
 800c27a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	887a      	ldrh	r2, [r7, #2]
 800c286:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	887a      	ldrh	r2, [r7, #2]
 800c28c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d006      	beq.n	800c2a4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4a17      	ldr	r2, [pc, #92]	; (800c2f8 <HAL_SPI_TransmitReceive_IT+0x118>)
 800c29a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4a17      	ldr	r2, [pc, #92]	; (800c2fc <HAL_SPI_TransmitReceive_IT+0x11c>)
 800c2a0:	645a      	str	r2, [r3, #68]	; 0x44
 800c2a2:	e005      	b.n	800c2b0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4a16      	ldr	r2, [pc, #88]	; (800c300 <HAL_SPI_TransmitReceive_IT+0x120>)
 800c2a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	4a15      	ldr	r2, [pc, #84]	; (800c304 <HAL_SPI_TransmitReceive_IT+0x124>)
 800c2ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800c2be:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ca:	2b40      	cmp	r3, #64	; 0x40
 800c2cc:	d008      	beq.n	800c2e0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	e000      	b.n	800c2e2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800c2e0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	0800c631 	.word	0x0800c631
 800c2fc:	0800c691 	.word	0x0800c691
 800c300:	0800c56d 	.word	0x0800c56d
 800c304:	0800c5d1 	.word	0x0800c5d1

0800c308 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	099b      	lsrs	r3, r3, #6
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10f      	bne.n	800c34c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00a      	beq.n	800c34c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	099b      	lsrs	r3, r3, #6
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d004      	beq.n	800c34c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	4798      	blx	r3
    return;
 800c34a:	e0d8      	b.n	800c4fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	085b      	lsrs	r3, r3, #1
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00a      	beq.n	800c36e <HAL_SPI_IRQHandler+0x66>
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	09db      	lsrs	r3, r3, #7
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	4798      	blx	r3
    return;
 800c36c:	e0c7      	b.n	800c4fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	095b      	lsrs	r3, r3, #5
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10c      	bne.n	800c394 <HAL_SPI_IRQHandler+0x8c>
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	099b      	lsrs	r3, r3, #6
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	d106      	bne.n	800c394 <HAL_SPI_IRQHandler+0x8c>
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	0a1b      	lsrs	r3, r3, #8
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80b5 	beq.w	800c4fe <HAL_SPI_IRQHandler+0x1f6>
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	095b      	lsrs	r3, r3, #5
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 80ae 	beq.w	800c4fe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	099b      	lsrs	r3, r3, #6
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d023      	beq.n	800c3f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d011      	beq.n	800c3de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3be:	f043 0204 	orr.w	r2, r3, #4
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	617b      	str	r3, [r7, #20]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	617b      	str	r3, [r7, #20]
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	e00b      	b.n	800c3f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3de:	2300      	movs	r3, #0
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	613b      	str	r3, [r7, #16]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	613b      	str	r3, [r7, #16]
 800c3f2:	693b      	ldr	r3, [r7, #16]
        return;
 800c3f4:	e083      	b.n	800c4fe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	095b      	lsrs	r3, r3, #5
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d014      	beq.n	800c42c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c406:	f043 0201 	orr.w	r2, r3, #1
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c40e:	2300      	movs	r3, #0
 800c410:	60fb      	str	r3, [r7, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	60fb      	str	r3, [r7, #12]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	0a1b      	lsrs	r3, r3, #8
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00c      	beq.n	800c452 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43c:	f043 0208 	orr.w	r2, r3, #8
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c444:	2300      	movs	r3, #0
 800c446:	60bb      	str	r3, [r7, #8]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	60bb      	str	r3, [r7, #8]
 800c450:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c456:	2b00      	cmp	r3, #0
 800c458:	d050      	beq.n	800c4fc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c468:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d104      	bne.n	800c486 <HAL_SPI_IRQHandler+0x17e>
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	d034      	beq.n	800c4f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f022 0203 	bic.w	r2, r2, #3
 800c494:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d011      	beq.n	800c4c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a2:	4a18      	ldr	r2, [pc, #96]	; (800c504 <HAL_SPI_IRQHandler+0x1fc>)
 800c4a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe f850 	bl	800a550 <HAL_DMA_Abort_IT>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d005      	beq.n	800c4c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d016      	beq.n	800c4f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4ce:	4a0d      	ldr	r2, [pc, #52]	; (800c504 <HAL_SPI_IRQHandler+0x1fc>)
 800c4d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe f83a 	bl	800a550 <HAL_DMA_Abort_IT>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c4ee:	e003      	b.n	800c4f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f81d 	bl	800c530 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c4f6:	e000      	b.n	800c4fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c4f8:	bf00      	nop
    return;
 800c4fa:	bf00      	nop
 800c4fc:	bf00      	nop
  }
}
 800c4fe:	3720      	adds	r7, #32
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	0800c545 	.word	0x0800c545

0800c508 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c550:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f7ff ffe6 	bl	800c530 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c564:	bf00      	nop
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f103 020c 	add.w	r2, r3, #12
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c580:	7812      	ldrb	r2, [r2, #0]
 800c582:	b2d2      	uxtb	r2, r2
 800c584:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c594:	b29b      	uxth	r3, r3
 800c596:	3b01      	subs	r3, #1
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10f      	bne.n	800c5c8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c5b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d102      	bne.n	800c5c8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f940 	bl	800c848 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c5c8:	bf00      	nop
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	330c      	adds	r3, #12
 800c5e2:	7812      	ldrb	r2, [r2, #0]
 800c5e4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ea:	1c5a      	adds	r2, r3, #1
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c602:	b29b      	uxth	r3, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10f      	bne.n	800c628 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c616:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f910 	bl	800c848 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c642:	b292      	uxth	r2, r2
 800c644:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64a:	1c9a      	adds	r2, r3, #2
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c654:	b29b      	uxth	r3, r3
 800c656:	3b01      	subs	r3, #1
 800c658:	b29a      	uxth	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c662:	b29b      	uxth	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10f      	bne.n	800c688 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c676:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d102      	bne.n	800c688 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f8e0 	bl	800c848 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c688:	bf00      	nop
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69c:	881a      	ldrh	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a8:	1c9a      	adds	r2, r3, #2
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10f      	bne.n	800c6e6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6d4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d102      	bne.n	800c6e6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f8b1 	bl	800c848 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c6e6:	bf00      	nop
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b084      	sub	sp, #16
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	60f8      	str	r0, [r7, #12]
 800c6f6:	60b9      	str	r1, [r7, #8]
 800c6f8:	603b      	str	r3, [r7, #0]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c6fe:	e04c      	b.n	800c79a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c706:	d048      	beq.n	800c79a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c708:	f7fc fb6c 	bl	8008de4 <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d902      	bls.n	800c71e <SPI_WaitFlagStateUntilTimeout+0x30>
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d13d      	bne.n	800c79a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c72c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c736:	d111      	bne.n	800c75c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c740:	d004      	beq.n	800c74c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c74a:	d107      	bne.n	800c75c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c75a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c764:	d10f      	bne.n	800c786 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e00f      	b.n	800c7ba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689a      	ldr	r2, [r3, #8]
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	bf0c      	ite	eq
 800c7aa:	2301      	moveq	r3, #1
 800c7ac:	2300      	movne	r3, #0
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d1a3      	bne.n	800c700 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af02      	add	r7, sp, #8
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c7d0:	4b1b      	ldr	r3, [pc, #108]	; (800c840 <SPI_EndRxTxTransaction+0x7c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a1b      	ldr	r2, [pc, #108]	; (800c844 <SPI_EndRxTxTransaction+0x80>)
 800c7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7da:	0d5b      	lsrs	r3, r3, #21
 800c7dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7e0:	fb02 f303 	mul.w	r3, r2, r3
 800c7e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7ee:	d112      	bne.n	800c816 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2180      	movs	r1, #128	; 0x80
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff ff77 	bl	800c6ee <SPI_WaitFlagStateUntilTimeout>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d016      	beq.n	800c834 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c80a:	f043 0220 	orr.w	r2, r3, #32
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e00f      	b.n	800c836 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00a      	beq.n	800c832 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	3b01      	subs	r3, #1
 800c820:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c82c:	2b80      	cmp	r3, #128	; 0x80
 800c82e:	d0f2      	beq.n	800c816 <SPI_EndRxTxTransaction+0x52>
 800c830:	e000      	b.n	800c834 <SPI_EndRxTxTransaction+0x70>
        break;
 800c832:	bf00      	nop
  }

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	2000000c 	.word	0x2000000c
 800c844:	165e9f81 	.word	0x165e9f81

0800c848 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c850:	4b35      	ldr	r3, [pc, #212]	; (800c928 <SPI_CloseRxTx_ISR+0xe0>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a35      	ldr	r2, [pc, #212]	; (800c92c <SPI_CloseRxTx_ISR+0xe4>)
 800c856:	fba2 2303 	umull	r2, r3, r2, r3
 800c85a:	0a5b      	lsrs	r3, r3, #9
 800c85c:	2264      	movs	r2, #100	; 0x64
 800c85e:	fb02 f303 	mul.w	r3, r2, r3
 800c862:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c864:	f7fc fabe 	bl	8008de4 <HAL_GetTick>
 800c868:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f022 0220 	bic.w	r2, r2, #32
 800c878:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c884:	f043 0220 	orr.w	r2, r3, #32
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c88c:	e009      	b.n	800c8a2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	3b01      	subs	r3, #1
 800c892:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f003 0302 	and.w	r3, r3, #2
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d0eb      	beq.n	800c87a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	2164      	movs	r1, #100	; 0x64
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff ff8c 	bl	800c7c4 <SPI_EndRxTxTransaction>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d005      	beq.n	800c8be <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b6:	f043 0220 	orr.w	r2, r3, #32
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10a      	bne.n	800c8dc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d115      	bne.n	800c910 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b04      	cmp	r3, #4
 800c8ee:	d107      	bne.n	800c900 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff fe05 	bl	800c508 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c8fe:	e00e      	b.n	800c91e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff fe07 	bl	800c51c <HAL_SPI_TxRxCpltCallback>
}
 800c90e:	e006      	b.n	800c91e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff fe09 	bl	800c530 <HAL_SPI_ErrorCallback>
}
 800c91e:	bf00      	nop
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	2000000c 	.word	0x2000000c
 800c92c:	057619f1 	.word	0x057619f1

0800c930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e01d      	b.n	800c97e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d106      	bne.n	800c95c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f005 f850 	bl	80119fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3304      	adds	r3, #4
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f000 fc30 	bl	800d1d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e01d      	b.n	800c9d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d106      	bne.n	800c9b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f815 	bl	800c9dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f000 fc05 	bl	800d1d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b0c      	cmp	r3, #12
 800c9fe:	d841      	bhi.n	800ca84 <HAL_TIM_PWM_Start_IT+0x94>
 800ca00:	a201      	add	r2, pc, #4	; (adr r2, 800ca08 <HAL_TIM_PWM_Start_IT+0x18>)
 800ca02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca06:	bf00      	nop
 800ca08:	0800ca3d 	.word	0x0800ca3d
 800ca0c:	0800ca85 	.word	0x0800ca85
 800ca10:	0800ca85 	.word	0x0800ca85
 800ca14:	0800ca85 	.word	0x0800ca85
 800ca18:	0800ca4f 	.word	0x0800ca4f
 800ca1c:	0800ca85 	.word	0x0800ca85
 800ca20:	0800ca85 	.word	0x0800ca85
 800ca24:	0800ca85 	.word	0x0800ca85
 800ca28:	0800ca61 	.word	0x0800ca61
 800ca2c:	0800ca85 	.word	0x0800ca85
 800ca30:	0800ca85 	.word	0x0800ca85
 800ca34:	0800ca85 	.word	0x0800ca85
 800ca38:	0800ca73 	.word	0x0800ca73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68da      	ldr	r2, [r3, #12]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f042 0202 	orr.w	r2, r2, #2
 800ca4a:	60da      	str	r2, [r3, #12]
      break;
 800ca4c:	e01b      	b.n	800ca86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68da      	ldr	r2, [r3, #12]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f042 0204 	orr.w	r2, r2, #4
 800ca5c:	60da      	str	r2, [r3, #12]
      break;
 800ca5e:	e012      	b.n	800ca86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68da      	ldr	r2, [r3, #12]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f042 0208 	orr.w	r2, r2, #8
 800ca6e:	60da      	str	r2, [r3, #12]
      break;
 800ca70:	e009      	b.n	800ca86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68da      	ldr	r2, [r3, #12]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f042 0210 	orr.w	r2, r2, #16
 800ca80:	60da      	str	r2, [r3, #12]
      break;
 800ca82:	e000      	b.n	800ca86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800ca84:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fe8a 	bl	800d7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a15      	ldr	r2, [pc, #84]	; (800caf0 <HAL_TIM_PWM_Start_IT+0x100>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d004      	beq.n	800caa8 <HAL_TIM_PWM_Start_IT+0xb8>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a14      	ldr	r2, [pc, #80]	; (800caf4 <HAL_TIM_PWM_Start_IT+0x104>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d101      	bne.n	800caac <HAL_TIM_PWM_Start_IT+0xbc>
 800caa8:	2301      	movs	r3, #1
 800caaa:	e000      	b.n	800caae <HAL_TIM_PWM_Start_IT+0xbe>
 800caac:	2300      	movs	r3, #0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d007      	beq.n	800cac2 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f003 0307 	and.w	r3, r3, #7
 800cacc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2b06      	cmp	r3, #6
 800cad2:	d007      	beq.n	800cae4 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0201 	orr.w	r2, r2, #1
 800cae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	40010000 	.word	0x40010000
 800caf4:	40010400 	.word	0x40010400

0800caf8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b0c      	cmp	r3, #12
 800cb06:	d841      	bhi.n	800cb8c <HAL_TIM_PWM_Stop_IT+0x94>
 800cb08:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <HAL_TIM_PWM_Stop_IT+0x18>)
 800cb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0e:	bf00      	nop
 800cb10:	0800cb45 	.word	0x0800cb45
 800cb14:	0800cb8d 	.word	0x0800cb8d
 800cb18:	0800cb8d 	.word	0x0800cb8d
 800cb1c:	0800cb8d 	.word	0x0800cb8d
 800cb20:	0800cb57 	.word	0x0800cb57
 800cb24:	0800cb8d 	.word	0x0800cb8d
 800cb28:	0800cb8d 	.word	0x0800cb8d
 800cb2c:	0800cb8d 	.word	0x0800cb8d
 800cb30:	0800cb69 	.word	0x0800cb69
 800cb34:	0800cb8d 	.word	0x0800cb8d
 800cb38:	0800cb8d 	.word	0x0800cb8d
 800cb3c:	0800cb8d 	.word	0x0800cb8d
 800cb40:	0800cb7b 	.word	0x0800cb7b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68da      	ldr	r2, [r3, #12]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 0202 	bic.w	r2, r2, #2
 800cb52:	60da      	str	r2, [r3, #12]
      break;
 800cb54:	e01b      	b.n	800cb8e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68da      	ldr	r2, [r3, #12]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f022 0204 	bic.w	r2, r2, #4
 800cb64:	60da      	str	r2, [r3, #12]
      break;
 800cb66:	e012      	b.n	800cb8e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68da      	ldr	r2, [r3, #12]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f022 0208 	bic.w	r2, r2, #8
 800cb76:	60da      	str	r2, [r3, #12]
      break;
 800cb78:	e009      	b.n	800cb8e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f022 0210 	bic.w	r2, r2, #16
 800cb88:	60da      	str	r2, [r3, #12]
      break;
 800cb8a:	e000      	b.n	800cb8e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800cb8c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2200      	movs	r2, #0
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 fe06 	bl	800d7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a20      	ldr	r2, [pc, #128]	; (800cc24 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d004      	beq.n	800cbb0 <HAL_TIM_PWM_Stop_IT+0xb8>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a1f      	ldr	r2, [pc, #124]	; (800cc28 <HAL_TIM_PWM_Stop_IT+0x130>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d101      	bne.n	800cbb4 <HAL_TIM_PWM_Stop_IT+0xbc>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e000      	b.n	800cbb6 <HAL_TIM_PWM_Stop_IT+0xbe>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d017      	beq.n	800cbea <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6a1a      	ldr	r2, [r3, #32]
 800cbc0:	f241 1311 	movw	r3, #4369	; 0x1111
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10f      	bne.n	800cbea <HAL_TIM_PWM_Stop_IT+0xf2>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	6a1a      	ldr	r2, [r3, #32]
 800cbd0:	f240 4344 	movw	r3, #1092	; 0x444
 800cbd4:	4013      	ands	r3, r2
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d107      	bne.n	800cbea <HAL_TIM_PWM_Stop_IT+0xf2>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cbe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	6a1a      	ldr	r2, [r3, #32]
 800cbf0:	f241 1311 	movw	r3, #4369	; 0x1111
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10f      	bne.n	800cc1a <HAL_TIM_PWM_Stop_IT+0x122>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	6a1a      	ldr	r2, [r3, #32]
 800cc00:	f240 4344 	movw	r3, #1092	; 0x444
 800cc04:	4013      	ands	r3, r2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d107      	bne.n	800cc1a <HAL_TIM_PWM_Stop_IT+0x122>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f022 0201 	bic.w	r2, r2, #1
 800cc18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	40010000 	.word	0x40010000
 800cc28:	40010400 	.word	0x40010400

0800cc2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	f003 0302 	and.w	r3, r3, #2
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d122      	bne.n	800cc88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	f003 0302 	and.w	r3, r3, #2
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d11b      	bne.n	800cc88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f06f 0202 	mvn.w	r2, #2
 800cc58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	f003 0303 	and.w	r3, r3, #3
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fa92 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cc74:	e005      	b.n	800cc82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fa84 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fa95 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	f003 0304 	and.w	r3, r3, #4
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	d122      	bne.n	800ccdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	f003 0304 	and.w	r3, r3, #4
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d11b      	bne.n	800ccdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f06f 0204 	mvn.w	r2, #4
 800ccac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2202      	movs	r2, #2
 800ccb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d003      	beq.n	800ccca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 fa68 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800ccc8:	e005      	b.n	800ccd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fa5a 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fa6b 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	f003 0308 	and.w	r3, r3, #8
 800cce6:	2b08      	cmp	r3, #8
 800cce8:	d122      	bne.n	800cd30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f003 0308 	and.w	r3, r3, #8
 800ccf4:	2b08      	cmp	r3, #8
 800ccf6:	d11b      	bne.n	800cd30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f06f 0208 	mvn.w	r2, #8
 800cd00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2204      	movs	r2, #4
 800cd06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	f003 0303 	and.w	r3, r3, #3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d003      	beq.n	800cd1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fa3e 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cd1c:	e005      	b.n	800cd2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa30 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 fa41 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	f003 0310 	and.w	r3, r3, #16
 800cd3a:	2b10      	cmp	r3, #16
 800cd3c:	d122      	bne.n	800cd84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	f003 0310 	and.w	r3, r3, #16
 800cd48:	2b10      	cmp	r3, #16
 800cd4a:	d11b      	bne.n	800cd84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f06f 0210 	mvn.w	r2, #16
 800cd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2208      	movs	r2, #8
 800cd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d003      	beq.n	800cd72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa14 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cd70:	e005      	b.n	800cd7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fa06 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fa17 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	f003 0301 	and.w	r3, r3, #1
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d10e      	bne.n	800cdb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d107      	bne.n	800cdb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f06f 0201 	mvn.w	r2, #1
 800cda8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f003 fe90 	bl	8010ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdba:	2b80      	cmp	r3, #128	; 0x80
 800cdbc:	d10e      	bne.n	800cddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc8:	2b80      	cmp	r3, #128	; 0x80
 800cdca:	d107      	bne.n	800cddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cdd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 fe77 	bl	800daca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cde6:	2b40      	cmp	r3, #64	; 0x40
 800cde8:	d10e      	bne.n	800ce08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf4:	2b40      	cmp	r3, #64	; 0x40
 800cdf6:	d107      	bne.n	800ce08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f9dc 	bl	800d1c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	f003 0320 	and.w	r3, r3, #32
 800ce12:	2b20      	cmp	r3, #32
 800ce14:	d10e      	bne.n	800ce34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	f003 0320 	and.w	r3, r3, #32
 800ce20:	2b20      	cmp	r3, #32
 800ce22:	d107      	bne.n	800ce34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f06f 0220 	mvn.w	r2, #32
 800ce2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fe41 	bl	800dab6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce34:	bf00      	nop
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d101      	bne.n	800ce56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ce52:	2302      	movs	r3, #2
 800ce54:	e0b4      	b.n	800cfc0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2202      	movs	r2, #2
 800ce62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b0c      	cmp	r3, #12
 800ce6a:	f200 809f 	bhi.w	800cfac <HAL_TIM_PWM_ConfigChannel+0x170>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800cea9 	.word	0x0800cea9
 800ce78:	0800cfad 	.word	0x0800cfad
 800ce7c:	0800cfad 	.word	0x0800cfad
 800ce80:	0800cfad 	.word	0x0800cfad
 800ce84:	0800cee9 	.word	0x0800cee9
 800ce88:	0800cfad 	.word	0x0800cfad
 800ce8c:	0800cfad 	.word	0x0800cfad
 800ce90:	0800cfad 	.word	0x0800cfad
 800ce94:	0800cf2b 	.word	0x0800cf2b
 800ce98:	0800cfad 	.word	0x0800cfad
 800ce9c:	0800cfad 	.word	0x0800cfad
 800cea0:	0800cfad 	.word	0x0800cfad
 800cea4:	0800cf6b 	.word	0x0800cf6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fa30 	bl	800d314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f042 0208 	orr.w	r2, r2, #8
 800cec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699a      	ldr	r2, [r3, #24]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0204 	bic.w	r2, r2, #4
 800ced2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6999      	ldr	r1, [r3, #24]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	691a      	ldr	r2, [r3, #16]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	619a      	str	r2, [r3, #24]
      break;
 800cee6:	e062      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68b9      	ldr	r1, [r7, #8]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 fa80 	bl	800d3f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	699a      	ldr	r2, [r3, #24]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	699a      	ldr	r2, [r3, #24]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6999      	ldr	r1, [r3, #24]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	021a      	lsls	r2, r3, #8
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	430a      	orrs	r2, r1
 800cf26:	619a      	str	r2, [r3, #24]
      break;
 800cf28:	e041      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68b9      	ldr	r1, [r7, #8]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 fad5 	bl	800d4e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	69da      	ldr	r2, [r3, #28]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f042 0208 	orr.w	r2, r2, #8
 800cf44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	69da      	ldr	r2, [r3, #28]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f022 0204 	bic.w	r2, r2, #4
 800cf54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	69d9      	ldr	r1, [r3, #28]
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	691a      	ldr	r2, [r3, #16]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	430a      	orrs	r2, r1
 800cf66:	61da      	str	r2, [r3, #28]
      break;
 800cf68:	e021      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68b9      	ldr	r1, [r7, #8]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fb29 	bl	800d5c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	69da      	ldr	r2, [r3, #28]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69da      	ldr	r2, [r3, #28]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69d9      	ldr	r1, [r3, #28]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	021a      	lsls	r2, r3, #8
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	61da      	str	r2, [r3, #28]
      break;
 800cfaa:	e000      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cfac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d101      	bne.n	800cfe0 <HAL_TIM_GenerateEvent+0x18>
 800cfdc:	2302      	movs	r3, #2
 800cfde:	e014      	b.n	800d00a <HAL_TIM_GenerateEvent+0x42>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	683a      	ldr	r2, [r7, #0]
 800cff6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr

0800d016 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d026:	2b01      	cmp	r3, #1
 800d028:	d101      	bne.n	800d02e <HAL_TIM_ConfigClockSource+0x18>
 800d02a:	2302      	movs	r3, #2
 800d02c:	e0a6      	b.n	800d17c <HAL_TIM_ConfigClockSource+0x166>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2202      	movs	r2, #2
 800d03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d04c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d054:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b40      	cmp	r3, #64	; 0x40
 800d064:	d067      	beq.n	800d136 <HAL_TIM_ConfigClockSource+0x120>
 800d066:	2b40      	cmp	r3, #64	; 0x40
 800d068:	d80b      	bhi.n	800d082 <HAL_TIM_ConfigClockSource+0x6c>
 800d06a:	2b10      	cmp	r3, #16
 800d06c:	d073      	beq.n	800d156 <HAL_TIM_ConfigClockSource+0x140>
 800d06e:	2b10      	cmp	r3, #16
 800d070:	d802      	bhi.n	800d078 <HAL_TIM_ConfigClockSource+0x62>
 800d072:	2b00      	cmp	r3, #0
 800d074:	d06f      	beq.n	800d156 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d076:	e078      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d06c      	beq.n	800d156 <HAL_TIM_ConfigClockSource+0x140>
 800d07c:	2b30      	cmp	r3, #48	; 0x30
 800d07e:	d06a      	beq.n	800d156 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d080:	e073      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d082:	2b70      	cmp	r3, #112	; 0x70
 800d084:	d00d      	beq.n	800d0a2 <HAL_TIM_ConfigClockSource+0x8c>
 800d086:	2b70      	cmp	r3, #112	; 0x70
 800d088:	d804      	bhi.n	800d094 <HAL_TIM_ConfigClockSource+0x7e>
 800d08a:	2b50      	cmp	r3, #80	; 0x50
 800d08c:	d033      	beq.n	800d0f6 <HAL_TIM_ConfigClockSource+0xe0>
 800d08e:	2b60      	cmp	r3, #96	; 0x60
 800d090:	d041      	beq.n	800d116 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d092:	e06a      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d098:	d066      	beq.n	800d168 <HAL_TIM_ConfigClockSource+0x152>
 800d09a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d09e:	d017      	beq.n	800d0d0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d0a0:	e063      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6818      	ldr	r0, [r3, #0]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	6899      	ldr	r1, [r3, #8]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	f000 fb59 	bl	800d768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	609a      	str	r2, [r3, #8]
      break;
 800d0ce:	e04c      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6818      	ldr	r0, [r3, #0]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	6899      	ldr	r1, [r3, #8]
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	f000 fb42 	bl	800d768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	689a      	ldr	r2, [r3, #8]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0f2:	609a      	str	r2, [r3, #8]
      break;
 800d0f4:	e039      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6818      	ldr	r0, [r3, #0]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	6859      	ldr	r1, [r3, #4]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	461a      	mov	r2, r3
 800d104:	f000 fab6 	bl	800d674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2150      	movs	r1, #80	; 0x50
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 fb0f 	bl	800d732 <TIM_ITRx_SetConfig>
      break;
 800d114:	e029      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	6859      	ldr	r1, [r3, #4]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	461a      	mov	r2, r3
 800d124:	f000 fad5 	bl	800d6d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2160      	movs	r1, #96	; 0x60
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 faff 	bl	800d732 <TIM_ITRx_SetConfig>
      break;
 800d134:	e019      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6818      	ldr	r0, [r3, #0]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	6859      	ldr	r1, [r3, #4]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	461a      	mov	r2, r3
 800d144:	f000 fa96 	bl	800d674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2140      	movs	r1, #64	; 0x40
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 faef 	bl	800d732 <TIM_ITRx_SetConfig>
      break;
 800d154:	e009      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f000 fae6 	bl	800d732 <TIM_ITRx_SetConfig>
      break;
 800d166:	e000      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d168:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a40      	ldr	r2, [pc, #256]	; (800d2e8 <TIM_Base_SetConfig+0x114>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d013      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1f2:	d00f      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a3d      	ldr	r2, [pc, #244]	; (800d2ec <TIM_Base_SetConfig+0x118>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d00b      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a3c      	ldr	r2, [pc, #240]	; (800d2f0 <TIM_Base_SetConfig+0x11c>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d007      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a3b      	ldr	r2, [pc, #236]	; (800d2f4 <TIM_Base_SetConfig+0x120>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d003      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a3a      	ldr	r2, [pc, #232]	; (800d2f8 <TIM_Base_SetConfig+0x124>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d108      	bne.n	800d226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	4313      	orrs	r3, r2
 800d224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a2f      	ldr	r2, [pc, #188]	; (800d2e8 <TIM_Base_SetConfig+0x114>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d02b      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d234:	d027      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a2c      	ldr	r2, [pc, #176]	; (800d2ec <TIM_Base_SetConfig+0x118>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d023      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a2b      	ldr	r2, [pc, #172]	; (800d2f0 <TIM_Base_SetConfig+0x11c>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d01f      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a2a      	ldr	r2, [pc, #168]	; (800d2f4 <TIM_Base_SetConfig+0x120>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d01b      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a29      	ldr	r2, [pc, #164]	; (800d2f8 <TIM_Base_SetConfig+0x124>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d017      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a28      	ldr	r2, [pc, #160]	; (800d2fc <TIM_Base_SetConfig+0x128>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d013      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a27      	ldr	r2, [pc, #156]	; (800d300 <TIM_Base_SetConfig+0x12c>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d00f      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a26      	ldr	r2, [pc, #152]	; (800d304 <TIM_Base_SetConfig+0x130>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d00b      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a25      	ldr	r2, [pc, #148]	; (800d308 <TIM_Base_SetConfig+0x134>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d007      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a24      	ldr	r2, [pc, #144]	; (800d30c <TIM_Base_SetConfig+0x138>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d003      	beq.n	800d286 <TIM_Base_SetConfig+0xb2>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4a23      	ldr	r2, [pc, #140]	; (800d310 <TIM_Base_SetConfig+0x13c>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d108      	bne.n	800d298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d28c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	4313      	orrs	r3, r2
 800d296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	689a      	ldr	r2, [r3, #8]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a0a      	ldr	r2, [pc, #40]	; (800d2e8 <TIM_Base_SetConfig+0x114>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d003      	beq.n	800d2cc <TIM_Base_SetConfig+0xf8>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a0c      	ldr	r2, [pc, #48]	; (800d2f8 <TIM_Base_SetConfig+0x124>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d103      	bne.n	800d2d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	691a      	ldr	r2, [r3, #16]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	615a      	str	r2, [r3, #20]
}
 800d2da:	bf00      	nop
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	40010000 	.word	0x40010000
 800d2ec:	40000400 	.word	0x40000400
 800d2f0:	40000800 	.word	0x40000800
 800d2f4:	40000c00 	.word	0x40000c00
 800d2f8:	40010400 	.word	0x40010400
 800d2fc:	40014000 	.word	0x40014000
 800d300:	40014400 	.word	0x40014400
 800d304:	40014800 	.word	0x40014800
 800d308:	40001800 	.word	0x40001800
 800d30c:	40001c00 	.word	0x40001c00
 800d310:	40002000 	.word	0x40002000

0800d314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d314:	b480      	push	{r7}
 800d316:	b087      	sub	sp, #28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	f023 0201 	bic.w	r2, r3, #1
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a1b      	ldr	r3, [r3, #32]
 800d32e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f023 0303 	bic.w	r3, r3, #3
 800d34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	f023 0302 	bic.w	r3, r3, #2
 800d35c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	4313      	orrs	r3, r2
 800d366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a20      	ldr	r2, [pc, #128]	; (800d3ec <TIM_OC1_SetConfig+0xd8>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d003      	beq.n	800d378 <TIM_OC1_SetConfig+0x64>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a1f      	ldr	r2, [pc, #124]	; (800d3f0 <TIM_OC1_SetConfig+0xdc>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d10c      	bne.n	800d392 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	f023 0308 	bic.w	r3, r3, #8
 800d37e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	697a      	ldr	r2, [r7, #20]
 800d386:	4313      	orrs	r3, r2
 800d388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f023 0304 	bic.w	r3, r3, #4
 800d390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a15      	ldr	r2, [pc, #84]	; (800d3ec <TIM_OC1_SetConfig+0xd8>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d003      	beq.n	800d3a2 <TIM_OC1_SetConfig+0x8e>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a14      	ldr	r2, [pc, #80]	; (800d3f0 <TIM_OC1_SetConfig+0xdc>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d111      	bne.n	800d3c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	693a      	ldr	r2, [r7, #16]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	621a      	str	r2, [r3, #32]
}
 800d3e0:	bf00      	nop
 800d3e2:	371c      	adds	r7, #28
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	40010000 	.word	0x40010000
 800d3f0:	40010400 	.word	0x40010400

0800d3f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b087      	sub	sp, #28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6a1b      	ldr	r3, [r3, #32]
 800d402:	f023 0210 	bic.w	r2, r3, #16
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d42a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	021b      	lsls	r3, r3, #8
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	4313      	orrs	r3, r2
 800d436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f023 0320 	bic.w	r3, r3, #32
 800d43e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	011b      	lsls	r3, r3, #4
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	4313      	orrs	r3, r2
 800d44a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a22      	ldr	r2, [pc, #136]	; (800d4d8 <TIM_OC2_SetConfig+0xe4>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d003      	beq.n	800d45c <TIM_OC2_SetConfig+0x68>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4a21      	ldr	r2, [pc, #132]	; (800d4dc <TIM_OC2_SetConfig+0xe8>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d10d      	bne.n	800d478 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	011b      	lsls	r3, r3, #4
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a17      	ldr	r2, [pc, #92]	; (800d4d8 <TIM_OC2_SetConfig+0xe4>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d003      	beq.n	800d488 <TIM_OC2_SetConfig+0x94>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a16      	ldr	r2, [pc, #88]	; (800d4dc <TIM_OC2_SetConfig+0xe8>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d113      	bne.n	800d4b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d48e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	695b      	ldr	r3, [r3, #20]
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	693a      	ldr	r2, [r7, #16]
 800d4b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	621a      	str	r2, [r3, #32]
}
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	40010000 	.word	0x40010000
 800d4dc:	40010400 	.word	0x40010400

0800d4e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b087      	sub	sp, #28
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d50e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f023 0303 	bic.w	r3, r3, #3
 800d516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	4313      	orrs	r3, r2
 800d520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	021b      	lsls	r3, r3, #8
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	4313      	orrs	r3, r2
 800d534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a21      	ldr	r2, [pc, #132]	; (800d5c0 <TIM_OC3_SetConfig+0xe0>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d003      	beq.n	800d546 <TIM_OC3_SetConfig+0x66>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a20      	ldr	r2, [pc, #128]	; (800d5c4 <TIM_OC3_SetConfig+0xe4>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d10d      	bne.n	800d562 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d54c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	021b      	lsls	r3, r3, #8
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	4313      	orrs	r3, r2
 800d558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a16      	ldr	r2, [pc, #88]	; (800d5c0 <TIM_OC3_SetConfig+0xe0>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d003      	beq.n	800d572 <TIM_OC3_SetConfig+0x92>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a15      	ldr	r2, [pc, #84]	; (800d5c4 <TIM_OC3_SetConfig+0xe4>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d113      	bne.n	800d59a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	011b      	lsls	r3, r3, #4
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	4313      	orrs	r3, r2
 800d58c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	011b      	lsls	r3, r3, #4
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	4313      	orrs	r3, r2
 800d598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	621a      	str	r2, [r3, #32]
}
 800d5b4:	bf00      	nop
 800d5b6:	371c      	adds	r7, #28
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	40010000 	.word	0x40010000
 800d5c4:	40010400 	.word	0x40010400

0800d5c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b087      	sub	sp, #28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a1b      	ldr	r3, [r3, #32]
 800d5d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a1b      	ldr	r3, [r3, #32]
 800d5e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	021b      	lsls	r3, r3, #8
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	4313      	orrs	r3, r2
 800d60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	031b      	lsls	r3, r3, #12
 800d61a:	693a      	ldr	r2, [r7, #16]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a12      	ldr	r2, [pc, #72]	; (800d66c <TIM_OC4_SetConfig+0xa4>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d003      	beq.n	800d630 <TIM_OC4_SetConfig+0x68>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a11      	ldr	r2, [pc, #68]	; (800d670 <TIM_OC4_SetConfig+0xa8>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d109      	bne.n	800d644 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	695b      	ldr	r3, [r3, #20]
 800d63c:	019b      	lsls	r3, r3, #6
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	4313      	orrs	r3, r2
 800d642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	693a      	ldr	r2, [r7, #16]
 800d65c:	621a      	str	r2, [r3, #32]
}
 800d65e:	bf00      	nop
 800d660:	371c      	adds	r7, #28
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	40010000 	.word	0x40010000
 800d670:	40010400 	.word	0x40010400

0800d674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d674:	b480      	push	{r7}
 800d676:	b087      	sub	sp, #28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6a1b      	ldr	r3, [r3, #32]
 800d684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	f023 0201 	bic.w	r2, r3, #1
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	699b      	ldr	r3, [r3, #24]
 800d696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d69e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	011b      	lsls	r3, r3, #4
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	f023 030a 	bic.w	r3, r3, #10
 800d6b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	693a      	ldr	r2, [r7, #16]
 800d6be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	621a      	str	r2, [r3, #32]
}
 800d6c6:	bf00      	nop
 800d6c8:	371c      	adds	r7, #28
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b087      	sub	sp, #28
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	60f8      	str	r0, [r7, #12]
 800d6da:	60b9      	str	r1, [r7, #8]
 800d6dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	f023 0210 	bic.w	r2, r3, #16
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6a1b      	ldr	r3, [r3, #32]
 800d6f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d6fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	031b      	lsls	r3, r3, #12
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	4313      	orrs	r3, r2
 800d706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d70e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	011b      	lsls	r3, r3, #4
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	4313      	orrs	r3, r2
 800d718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	621a      	str	r2, [r3, #32]
}
 800d726:	bf00      	nop
 800d728:	371c      	adds	r7, #28
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d732:	b480      	push	{r7}
 800d734:	b085      	sub	sp, #20
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4313      	orrs	r3, r2
 800d750:	f043 0307 	orr.w	r3, r3, #7
 800d754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	609a      	str	r2, [r3, #8]
}
 800d75c:	bf00      	nop
 800d75e:	3714      	adds	r7, #20
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d768:	b480      	push	{r7}
 800d76a:	b087      	sub	sp, #28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	021a      	lsls	r2, r3, #8
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	431a      	orrs	r2, r3
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	4313      	orrs	r3, r2
 800d790:	697a      	ldr	r2, [r7, #20]
 800d792:	4313      	orrs	r3, r2
 800d794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	609a      	str	r2, [r3, #8]
}
 800d79c:	bf00      	nop
 800d79e:	371c      	adds	r7, #28
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	f003 031f 	and.w	r3, r3, #31
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6a1a      	ldr	r2, [r3, #32]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	43db      	mvns	r3, r3
 800d7ca:	401a      	ands	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6a1a      	ldr	r2, [r3, #32]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f003 031f 	and.w	r3, r3, #31
 800d7da:	6879      	ldr	r1, [r7, #4]
 800d7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	621a      	str	r2, [r3, #32]
}
 800d7e6:	bf00      	nop
 800d7e8:	371c      	adds	r7, #28
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	2b04      	cmp	r3, #4
 800d800:	d00d      	beq.n	800d81e <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d802:	2b08      	cmp	r3, #8
 800d804:	d014      	beq.n	800d830 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d806:	2b00      	cmp	r3, #0
 800d808:	d000      	beq.n	800d80c <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d80a:	e01a      	b.n	800d842 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68da      	ldr	r2, [r3, #12]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f042 0202 	orr.w	r2, r2, #2
 800d81a:	60da      	str	r2, [r3, #12]
      break;
 800d81c:	e011      	b.n	800d842 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f042 0204 	orr.w	r2, r2, #4
 800d82c:	60da      	str	r2, [r3, #12]
      break;
 800d82e:	e008      	b.n	800d842 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68da      	ldr	r2, [r3, #12]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f042 0208 	orr.w	r2, r2, #8
 800d83e:	60da      	str	r2, [r3, #12]
      break;
 800d840:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d850:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2204      	movs	r2, #4
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 f93f 	bl	800dade <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d86e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f003 0307 	and.w	r3, r3, #7
 800d87a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b06      	cmp	r3, #6
 800d880:	d007      	beq.n	800d892 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f042 0201 	orr.w	r2, r2, #1
 800d890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	2b04      	cmp	r3, #4
 800d8aa:	d00d      	beq.n	800d8c8 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d8ac:	2b08      	cmp	r3, #8
 800d8ae:	d014      	beq.n	800d8da <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d000      	beq.n	800d8b6 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d8b4:	e01a      	b.n	800d8ec <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	68da      	ldr	r2, [r3, #12]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f022 0202 	bic.w	r2, r2, #2
 800d8c4:	60da      	str	r2, [r3, #12]
      break;
 800d8c6:	e011      	b.n	800d8ec <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68da      	ldr	r2, [r3, #12]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f022 0204 	bic.w	r2, r2, #4
 800d8d6:	60da      	str	r2, [r3, #12]
      break;
 800d8d8:	e008      	b.n	800d8ec <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68da      	ldr	r2, [r3, #12]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f022 0208 	bic.w	r2, r2, #8
 800d8e8:	60da      	str	r2, [r3, #12]
      break;
 800d8ea:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	6839      	ldr	r1, [r7, #0]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 f8f2 	bl	800dade <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6a1b      	ldr	r3, [r3, #32]
 800d900:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	f240 4344 	movw	r3, #1092	; 0x444
 800d908:	4013      	ands	r3, r2
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d107      	bne.n	800d91e <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68da      	ldr	r2, [r3, #12]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d91c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	6a1a      	ldr	r2, [r3, #32]
 800d924:	f241 1311 	movw	r3, #4369	; 0x1111
 800d928:	4013      	ands	r3, r2
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10f      	bne.n	800d94e <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6a1a      	ldr	r2, [r3, #32]
 800d934:	f240 4344 	movw	r3, #1092	; 0x444
 800d938:	4013      	ands	r3, r2
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d107      	bne.n	800d94e <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d94c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	6a1a      	ldr	r2, [r3, #32]
 800d954:	f241 1311 	movw	r3, #4369	; 0x1111
 800d958:	4013      	ands	r3, r2
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10f      	bne.n	800d97e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	6a1a      	ldr	r2, [r3, #32]
 800d964:	f240 4344 	movw	r3, #1092	; 0x444
 800d968:	4013      	ands	r3, r2
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d107      	bne.n	800d97e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f022 0201 	bic.w	r2, r2, #1
 800d97c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d101      	bne.n	800d9a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d99c:	2302      	movs	r3, #2
 800d99e:	e032      	b.n	800da06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9d8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da12:	b480      	push	{r7}
 800da14:	b085      	sub	sp, #20
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da1c:	2300      	movs	r3, #0
 800da1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da26:	2b01      	cmp	r3, #1
 800da28:	d101      	bne.n	800da2e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da2a:	2302      	movs	r3, #2
 800da2c:	e03d      	b.n	800daaa <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	4313      	orrs	r3, r2
 800da42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	4313      	orrs	r3, r2
 800da50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	4313      	orrs	r3, r2
 800da7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	695b      	ldr	r3, [r3, #20]
 800da86:	4313      	orrs	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	69db      	ldr	r3, [r3, #28]
 800da94:	4313      	orrs	r3, r2
 800da96:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b083      	sub	sp, #12
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dabe:	bf00      	nop
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800daca:	b480      	push	{r7}
 800dacc:	b083      	sub	sp, #12
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dad2:	bf00      	nop
 800dad4:	370c      	adds	r7, #12
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800dade:	b480      	push	{r7}
 800dae0:	b087      	sub	sp, #28
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	60f8      	str	r0, [r7, #12]
 800dae6:	60b9      	str	r1, [r7, #8]
 800dae8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	f003 031f 	and.w	r3, r3, #31
 800daf0:	2204      	movs	r2, #4
 800daf2:	fa02 f303 	lsl.w	r3, r2, r3
 800daf6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6a1a      	ldr	r2, [r3, #32]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	43db      	mvns	r3, r3
 800db00:	401a      	ands	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6a1a      	ldr	r2, [r3, #32]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	f003 031f 	and.w	r3, r3, #31
 800db10:	6879      	ldr	r1, [r7, #4]
 800db12:	fa01 f303 	lsl.w	r3, r1, r3
 800db16:	431a      	orrs	r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	621a      	str	r2, [r3, #32]
}
 800db1c:	bf00      	nop
 800db1e:	371c      	adds	r7, #28
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e03f      	b.n	800dbba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d106      	bne.n	800db54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f004 f820 	bl	8011b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2224      	movs	r2, #36	; 0x24
 800db58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68da      	ldr	r2, [r3, #12]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 fa65 	bl	800e03c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	691a      	ldr	r2, [r3, #16]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	695a      	ldr	r2, [r3, #20]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68da      	ldr	r2, [r3, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2220      	movs	r2, #32
 800dbac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
	...

0800dbc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	f003 030f 	and.w	r3, r3, #15
 800dbf2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10d      	bne.n	800dc16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	f003 0320 	and.w	r3, r3, #32
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d008      	beq.n	800dc16 <HAL_UART_IRQHandler+0x52>
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	f003 0320 	and.w	r3, r3, #32
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f992 	bl	800df38 <UART_Receive_IT>
      return;
 800dc14:	e0cc      	b.n	800ddb0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 80ab 	beq.w	800dd74 <HAL_UART_IRQHandler+0x1b0>
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d105      	bne.n	800dc34 <HAL_UART_IRQHandler+0x70>
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 80a0 	beq.w	800dd74 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	f003 0301 	and.w	r3, r3, #1
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00a      	beq.n	800dc54 <HAL_UART_IRQHandler+0x90>
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d005      	beq.n	800dc54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc4c:	f043 0201 	orr.w	r2, r3, #1
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	f003 0304 	and.w	r3, r3, #4
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00a      	beq.n	800dc74 <HAL_UART_IRQHandler+0xb0>
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f003 0301 	and.w	r3, r3, #1
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d005      	beq.n	800dc74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6c:	f043 0202 	orr.w	r2, r3, #2
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	f003 0302 	and.w	r3, r3, #2
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00a      	beq.n	800dc94 <HAL_UART_IRQHandler+0xd0>
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d005      	beq.n	800dc94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc8c:	f043 0204 	orr.w	r2, r3, #4
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	f003 0308 	and.w	r3, r3, #8
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00a      	beq.n	800dcb4 <HAL_UART_IRQHandler+0xf0>
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f003 0301 	and.w	r3, r3, #1
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d005      	beq.n	800dcb4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcac:	f043 0208 	orr.w	r2, r3, #8
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d078      	beq.n	800ddae <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	f003 0320 	and.w	r3, r3, #32
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d007      	beq.n	800dcd6 <HAL_UART_IRQHandler+0x112>
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	f003 0320 	and.w	r3, r3, #32
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 f931 	bl	800df38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	695b      	ldr	r3, [r3, #20]
 800dcdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce0:	2b40      	cmp	r3, #64	; 0x40
 800dce2:	bf0c      	ite	eq
 800dce4:	2301      	moveq	r3, #1
 800dce6:	2300      	movne	r3, #0
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf0:	f003 0308 	and.w	r3, r3, #8
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d102      	bne.n	800dcfe <HAL_UART_IRQHandler+0x13a>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d031      	beq.n	800dd62 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f87a 	bl	800ddf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd0e:	2b40      	cmp	r3, #64	; 0x40
 800dd10:	d123      	bne.n	800dd5a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	695a      	ldr	r2, [r3, #20]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d013      	beq.n	800dd52 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd2e:	4a22      	ldr	r2, [pc, #136]	; (800ddb8 <HAL_UART_IRQHandler+0x1f4>)
 800dd30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fc fc0a 	bl	800a550 <HAL_DMA_Abort_IT>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d016      	beq.n	800dd70 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd50:	e00e      	b.n	800dd70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f846 	bl	800dde4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd58:	e00a      	b.n	800dd70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f842 	bl	800dde4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd60:	e006      	b.n	800dd70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f83e 	bl	800dde4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800dd6e:	e01e      	b.n	800ddae <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd70:	bf00      	nop
    return;
 800dd72:	e01c      	b.n	800ddae <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d008      	beq.n	800dd90 <HAL_UART_IRQHandler+0x1cc>
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d003      	beq.n	800dd90 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f867 	bl	800de5c <UART_Transmit_IT>
    return;
 800dd8e:	e00f      	b.n	800ddb0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00a      	beq.n	800ddb0 <HAL_UART_IRQHandler+0x1ec>
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d005      	beq.n	800ddb0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 f8af 	bl	800df08 <UART_EndTransmit_IT>
    return;
 800ddaa:	bf00      	nop
 800ddac:	e000      	b.n	800ddb0 <HAL_UART_IRQHandler+0x1ec>
    return;
 800ddae:	bf00      	nop
  }
}
 800ddb0:	3720      	adds	r7, #32
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	0800de35 	.word	0x0800de35

0800ddbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ddc4:	bf00      	nop
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800de0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	695a      	ldr	r2, [r3, #20]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f022 0201 	bic.w	r2, r2, #1
 800de1e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2220      	movs	r2, #32
 800de24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800de28:	bf00      	nop
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2200      	movs	r2, #0
 800de4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f7ff ffc8 	bl	800dde4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de54:	bf00      	nop
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	2b21      	cmp	r3, #33	; 0x21
 800de6e:	d144      	bne.n	800defa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de78:	d11a      	bne.n	800deb0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	461a      	mov	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de8e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d105      	bne.n	800dea4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	1c9a      	adds	r2, r3, #2
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	621a      	str	r2, [r3, #32]
 800dea2:	e00e      	b.n	800dec2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a1b      	ldr	r3, [r3, #32]
 800dea8:	1c5a      	adds	r2, r3, #1
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	621a      	str	r2, [r3, #32]
 800deae:	e008      	b.n	800dec2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	1c59      	adds	r1, r3, #1
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	6211      	str	r1, [r2, #32]
 800deba:	781a      	ldrb	r2, [r3, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	3b01      	subs	r3, #1
 800deca:	b29b      	uxth	r3, r3
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4619      	mov	r1, r3
 800ded0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10f      	bne.n	800def6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68da      	ldr	r2, [r3, #12]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dee4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68da      	ldr	r2, [r3, #12]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800def4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800def6:	2300      	movs	r3, #0
 800def8:	e000      	b.n	800defc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800defa:	2302      	movs	r3, #2
  }
}
 800defc:	4618      	mov	r0, r3
 800defe:	3714      	adds	r7, #20
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68da      	ldr	r2, [r3, #12]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2220      	movs	r2, #32
 800df24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7ff ff47 	bl	800ddbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800df46:	b2db      	uxtb	r3, r3
 800df48:	2b22      	cmp	r3, #34	; 0x22
 800df4a:	d171      	bne.n	800e030 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df54:	d123      	bne.n	800df9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10e      	bne.n	800df82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df70:	b29a      	uxth	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df7a:	1c9a      	adds	r2, r3, #2
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	629a      	str	r2, [r3, #40]	; 0x28
 800df80:	e029      	b.n	800dfd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	629a      	str	r2, [r3, #40]	; 0x28
 800df9c:	e01b      	b.n	800dfd6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	691b      	ldr	r3, [r3, #16]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10a      	bne.n	800dfbc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	6858      	ldr	r0, [r3, #4]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb0:	1c59      	adds	r1, r3, #1
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	6291      	str	r1, [r2, #40]	; 0x28
 800dfb6:	b2c2      	uxtb	r2, r0
 800dfb8:	701a      	strb	r2, [r3, #0]
 800dfba:	e00c      	b.n	800dfd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc8:	1c58      	adds	r0, r3, #1
 800dfca:	6879      	ldr	r1, [r7, #4]
 800dfcc:	6288      	str	r0, [r1, #40]	; 0x28
 800dfce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dfd2:	b2d2      	uxtb	r2, r2
 800dfd4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d120      	bne.n	800e02c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68da      	ldr	r2, [r3, #12]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f022 0220 	bic.w	r2, r2, #32
 800dff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68da      	ldr	r2, [r3, #12]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	695a      	ldr	r2, [r3, #20]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f022 0201 	bic.w	r2, r2, #1
 800e018:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2220      	movs	r2, #32
 800e01e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff fed4 	bl	800ddd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	e002      	b.n	800e032 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	e000      	b.n	800e032 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e030:	2302      	movs	r3, #2
  }
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
	...

0800e03c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e03c:	b5b0      	push	{r4, r5, r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	68da      	ldr	r2, [r3, #12]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	430a      	orrs	r2, r1
 800e058:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	689a      	ldr	r2, [r3, #8]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	431a      	orrs	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	695b      	ldr	r3, [r3, #20]
 800e068:	431a      	orrs	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	69db      	ldr	r3, [r3, #28]
 800e06e:	4313      	orrs	r3, r2
 800e070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e07c:	f023 030c 	bic.w	r3, r3, #12
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	6812      	ldr	r2, [r2, #0]
 800e084:	68f9      	ldr	r1, [r7, #12]
 800e086:	430b      	orrs	r3, r1
 800e088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	695b      	ldr	r3, [r3, #20]
 800e090:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	699a      	ldr	r2, [r3, #24]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	430a      	orrs	r2, r1
 800e09e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	69db      	ldr	r3, [r3, #28]
 800e0a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0a8:	f040 80e4 	bne.w	800e274 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4aab      	ldr	r2, [pc, #684]	; (800e360 <UART_SetConfig+0x324>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d004      	beq.n	800e0c0 <UART_SetConfig+0x84>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4aaa      	ldr	r2, [pc, #680]	; (800e364 <UART_SetConfig+0x328>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d16c      	bne.n	800e19a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e0c0:	f7fd fa7a 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	009a      	lsls	r2, r3, #2
 800e0ce:	441a      	add	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0da:	4aa3      	ldr	r2, [pc, #652]	; (800e368 <UART_SetConfig+0x32c>)
 800e0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e0:	095b      	lsrs	r3, r3, #5
 800e0e2:	011c      	lsls	r4, r3, #4
 800e0e4:	f7fd fa68 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009a      	lsls	r2, r3, #2
 800e0f2:	441a      	add	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	fbb2 f5f3 	udiv	r5, r2, r3
 800e0fe:	f7fd fa5b 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e102:	4602      	mov	r2, r0
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009a      	lsls	r2, r3, #2
 800e10c:	441a      	add	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	fbb2 f3f3 	udiv	r3, r2, r3
 800e118:	4a93      	ldr	r2, [pc, #588]	; (800e368 <UART_SetConfig+0x32c>)
 800e11a:	fba2 2303 	umull	r2, r3, r2, r3
 800e11e:	095b      	lsrs	r3, r3, #5
 800e120:	2264      	movs	r2, #100	; 0x64
 800e122:	fb02 f303 	mul.w	r3, r2, r3
 800e126:	1aeb      	subs	r3, r5, r3
 800e128:	00db      	lsls	r3, r3, #3
 800e12a:	3332      	adds	r3, #50	; 0x32
 800e12c:	4a8e      	ldr	r2, [pc, #568]	; (800e368 <UART_SetConfig+0x32c>)
 800e12e:	fba2 2303 	umull	r2, r3, r2, r3
 800e132:	095b      	lsrs	r3, r3, #5
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e13a:	441c      	add	r4, r3
 800e13c:	f7fd fa3c 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e140:	4602      	mov	r2, r0
 800e142:	4613      	mov	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	009a      	lsls	r2, r3, #2
 800e14a:	441a      	add	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	fbb2 f5f3 	udiv	r5, r2, r3
 800e156:	f7fd fa2f 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e15a:	4602      	mov	r2, r0
 800e15c:	4613      	mov	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	009a      	lsls	r2, r3, #2
 800e164:	441a      	add	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	005b      	lsls	r3, r3, #1
 800e16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e170:	4a7d      	ldr	r2, [pc, #500]	; (800e368 <UART_SetConfig+0x32c>)
 800e172:	fba2 2303 	umull	r2, r3, r2, r3
 800e176:	095b      	lsrs	r3, r3, #5
 800e178:	2264      	movs	r2, #100	; 0x64
 800e17a:	fb02 f303 	mul.w	r3, r2, r3
 800e17e:	1aeb      	subs	r3, r5, r3
 800e180:	00db      	lsls	r3, r3, #3
 800e182:	3332      	adds	r3, #50	; 0x32
 800e184:	4a78      	ldr	r2, [pc, #480]	; (800e368 <UART_SetConfig+0x32c>)
 800e186:	fba2 2303 	umull	r2, r3, r2, r3
 800e18a:	095b      	lsrs	r3, r3, #5
 800e18c:	f003 0207 	and.w	r2, r3, #7
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4422      	add	r2, r4
 800e196:	609a      	str	r2, [r3, #8]
 800e198:	e154      	b.n	800e444 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e19a:	f7fd f9f9 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	009a      	lsls	r2, r3, #2
 800e1a8:	441a      	add	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	005b      	lsls	r3, r3, #1
 800e1b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1b4:	4a6c      	ldr	r2, [pc, #432]	; (800e368 <UART_SetConfig+0x32c>)
 800e1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ba:	095b      	lsrs	r3, r3, #5
 800e1bc:	011c      	lsls	r4, r3, #4
 800e1be:	f7fd f9e7 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4413      	add	r3, r2
 800e1ca:	009a      	lsls	r2, r3, #2
 800e1cc:	441a      	add	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	fbb2 f5f3 	udiv	r5, r2, r3
 800e1d8:	f7fd f9da 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	4613      	mov	r3, r2
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4413      	add	r3, r2
 800e1e4:	009a      	lsls	r2, r3, #2
 800e1e6:	441a      	add	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	005b      	lsls	r3, r3, #1
 800e1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1f2:	4a5d      	ldr	r2, [pc, #372]	; (800e368 <UART_SetConfig+0x32c>)
 800e1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f8:	095b      	lsrs	r3, r3, #5
 800e1fa:	2264      	movs	r2, #100	; 0x64
 800e1fc:	fb02 f303 	mul.w	r3, r2, r3
 800e200:	1aeb      	subs	r3, r5, r3
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	3332      	adds	r3, #50	; 0x32
 800e206:	4a58      	ldr	r2, [pc, #352]	; (800e368 <UART_SetConfig+0x32c>)
 800e208:	fba2 2303 	umull	r2, r3, r2, r3
 800e20c:	095b      	lsrs	r3, r3, #5
 800e20e:	005b      	lsls	r3, r3, #1
 800e210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e214:	441c      	add	r4, r3
 800e216:	f7fd f9bb 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e21a:	4602      	mov	r2, r0
 800e21c:	4613      	mov	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	009a      	lsls	r2, r3, #2
 800e224:	441a      	add	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	fbb2 f5f3 	udiv	r5, r2, r3
 800e230:	f7fd f9ae 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e234:	4602      	mov	r2, r0
 800e236:	4613      	mov	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	009a      	lsls	r2, r3, #2
 800e23e:	441a      	add	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	fbb2 f3f3 	udiv	r3, r2, r3
 800e24a:	4a47      	ldr	r2, [pc, #284]	; (800e368 <UART_SetConfig+0x32c>)
 800e24c:	fba2 2303 	umull	r2, r3, r2, r3
 800e250:	095b      	lsrs	r3, r3, #5
 800e252:	2264      	movs	r2, #100	; 0x64
 800e254:	fb02 f303 	mul.w	r3, r2, r3
 800e258:	1aeb      	subs	r3, r5, r3
 800e25a:	00db      	lsls	r3, r3, #3
 800e25c:	3332      	adds	r3, #50	; 0x32
 800e25e:	4a42      	ldr	r2, [pc, #264]	; (800e368 <UART_SetConfig+0x32c>)
 800e260:	fba2 2303 	umull	r2, r3, r2, r3
 800e264:	095b      	lsrs	r3, r3, #5
 800e266:	f003 0207 	and.w	r2, r3, #7
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4422      	add	r2, r4
 800e270:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800e272:	e0e7      	b.n	800e444 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a39      	ldr	r2, [pc, #228]	; (800e360 <UART_SetConfig+0x324>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d004      	beq.n	800e288 <UART_SetConfig+0x24c>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a38      	ldr	r2, [pc, #224]	; (800e364 <UART_SetConfig+0x328>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d171      	bne.n	800e36c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e288:	f7fd f996 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e28c:	4602      	mov	r2, r0
 800e28e:	4613      	mov	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	009a      	lsls	r2, r3, #2
 800e296:	441a      	add	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a2:	4a31      	ldr	r2, [pc, #196]	; (800e368 <UART_SetConfig+0x32c>)
 800e2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2a8:	095b      	lsrs	r3, r3, #5
 800e2aa:	011c      	lsls	r4, r3, #4
 800e2ac:	f7fd f984 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	009a      	lsls	r2, r3, #2
 800e2ba:	441a      	add	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	fbb2 f5f3 	udiv	r5, r2, r3
 800e2c6:	f7fd f977 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4413      	add	r3, r2
 800e2d2:	009a      	lsls	r2, r3, #2
 800e2d4:	441a      	add	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e0:	4a21      	ldr	r2, [pc, #132]	; (800e368 <UART_SetConfig+0x32c>)
 800e2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e6:	095b      	lsrs	r3, r3, #5
 800e2e8:	2264      	movs	r2, #100	; 0x64
 800e2ea:	fb02 f303 	mul.w	r3, r2, r3
 800e2ee:	1aeb      	subs	r3, r5, r3
 800e2f0:	011b      	lsls	r3, r3, #4
 800e2f2:	3332      	adds	r3, #50	; 0x32
 800e2f4:	4a1c      	ldr	r2, [pc, #112]	; (800e368 <UART_SetConfig+0x32c>)
 800e2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2fa:	095b      	lsrs	r3, r3, #5
 800e2fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e300:	441c      	add	r4, r3
 800e302:	f7fd f959 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e306:	4602      	mov	r2, r0
 800e308:	4613      	mov	r3, r2
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	4413      	add	r3, r2
 800e30e:	009a      	lsls	r2, r3, #2
 800e310:	441a      	add	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	fbb2 f5f3 	udiv	r5, r2, r3
 800e31c:	f7fd f94c 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 800e320:	4602      	mov	r2, r0
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009a      	lsls	r2, r3, #2
 800e32a:	441a      	add	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	fbb2 f3f3 	udiv	r3, r2, r3
 800e336:	4a0c      	ldr	r2, [pc, #48]	; (800e368 <UART_SetConfig+0x32c>)
 800e338:	fba2 2303 	umull	r2, r3, r2, r3
 800e33c:	095b      	lsrs	r3, r3, #5
 800e33e:	2264      	movs	r2, #100	; 0x64
 800e340:	fb02 f303 	mul.w	r3, r2, r3
 800e344:	1aeb      	subs	r3, r5, r3
 800e346:	011b      	lsls	r3, r3, #4
 800e348:	3332      	adds	r3, #50	; 0x32
 800e34a:	4a07      	ldr	r2, [pc, #28]	; (800e368 <UART_SetConfig+0x32c>)
 800e34c:	fba2 2303 	umull	r2, r3, r2, r3
 800e350:	095b      	lsrs	r3, r3, #5
 800e352:	f003 020f 	and.w	r2, r3, #15
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4422      	add	r2, r4
 800e35c:	609a      	str	r2, [r3, #8]
 800e35e:	e071      	b.n	800e444 <UART_SetConfig+0x408>
 800e360:	40011000 	.word	0x40011000
 800e364:	40011400 	.word	0x40011400
 800e368:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e36c:	f7fd f910 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e370:	4602      	mov	r2, r0
 800e372:	4613      	mov	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	4413      	add	r3, r2
 800e378:	009a      	lsls	r2, r3, #2
 800e37a:	441a      	add	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	fbb2 f3f3 	udiv	r3, r2, r3
 800e386:	4a31      	ldr	r2, [pc, #196]	; (800e44c <UART_SetConfig+0x410>)
 800e388:	fba2 2303 	umull	r2, r3, r2, r3
 800e38c:	095b      	lsrs	r3, r3, #5
 800e38e:	011c      	lsls	r4, r3, #4
 800e390:	f7fd f8fe 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e394:	4602      	mov	r2, r0
 800e396:	4613      	mov	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	009a      	lsls	r2, r3, #2
 800e39e:	441a      	add	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	fbb2 f5f3 	udiv	r5, r2, r3
 800e3aa:	f7fd f8f1 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	009a      	lsls	r2, r3, #2
 800e3b8:	441a      	add	r2, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c4:	4a21      	ldr	r2, [pc, #132]	; (800e44c <UART_SetConfig+0x410>)
 800e3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ca:	095b      	lsrs	r3, r3, #5
 800e3cc:	2264      	movs	r2, #100	; 0x64
 800e3ce:	fb02 f303 	mul.w	r3, r2, r3
 800e3d2:	1aeb      	subs	r3, r5, r3
 800e3d4:	011b      	lsls	r3, r3, #4
 800e3d6:	3332      	adds	r3, #50	; 0x32
 800e3d8:	4a1c      	ldr	r2, [pc, #112]	; (800e44c <UART_SetConfig+0x410>)
 800e3da:	fba2 2303 	umull	r2, r3, r2, r3
 800e3de:	095b      	lsrs	r3, r3, #5
 800e3e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3e4:	441c      	add	r4, r3
 800e3e6:	f7fd f8d3 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	009a      	lsls	r2, r3, #2
 800e3f4:	441a      	add	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	fbb2 f5f3 	udiv	r5, r2, r3
 800e400:	f7fd f8c6 	bl	800b590 <HAL_RCC_GetPCLK1Freq>
 800e404:	4602      	mov	r2, r0
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009a      	lsls	r2, r3, #2
 800e40e:	441a      	add	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	fbb2 f3f3 	udiv	r3, r2, r3
 800e41a:	4a0c      	ldr	r2, [pc, #48]	; (800e44c <UART_SetConfig+0x410>)
 800e41c:	fba2 2303 	umull	r2, r3, r2, r3
 800e420:	095b      	lsrs	r3, r3, #5
 800e422:	2264      	movs	r2, #100	; 0x64
 800e424:	fb02 f303 	mul.w	r3, r2, r3
 800e428:	1aeb      	subs	r3, r5, r3
 800e42a:	011b      	lsls	r3, r3, #4
 800e42c:	3332      	adds	r3, #50	; 0x32
 800e42e:	4a07      	ldr	r2, [pc, #28]	; (800e44c <UART_SetConfig+0x410>)
 800e430:	fba2 2303 	umull	r2, r3, r2, r3
 800e434:	095b      	lsrs	r3, r3, #5
 800e436:	f003 020f 	and.w	r2, r3, #15
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4422      	add	r2, r4
 800e440:	609a      	str	r2, [r3, #8]
}
 800e442:	e7ff      	b.n	800e444 <UART_SetConfig+0x408>
 800e444:	bf00      	nop
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bdb0      	pop	{r4, r5, r7, pc}
 800e44c:	51eb851f 	.word	0x51eb851f

0800e450 <ACR_Init>:
ACR_TypeDef mainACR;



void ACR_Init()
{
 800e450:	b580      	push	{r7, lr}
 800e452:	af00      	add	r7, sp, #0

	memset(&mainACR, 0x00, sizeof(mainACR));
 800e454:	226c      	movs	r2, #108	; 0x6c
 800e456:	2100      	movs	r1, #0
 800e458:	4812      	ldr	r0, [pc, #72]	; (800e4a4 <ACR_Init+0x54>)
 800e45a:	f003 fc4a 	bl	8011cf2 <memset>

	mainACR.Init.Kp = 0.1f;
 800e45e:	4b11      	ldr	r3, [pc, #68]	; (800e4a4 <ACR_Init+0x54>)
 800e460:	4a11      	ldr	r2, [pc, #68]	; (800e4a8 <ACR_Init+0x58>)
 800e462:	601a      	str	r2, [r3, #0]
	mainACR.Init.Ki = 100.0f;
 800e464:	4b0f      	ldr	r3, [pc, #60]	; (800e4a4 <ACR_Init+0x54>)
 800e466:	4a11      	ldr	r2, [pc, #68]	; (800e4ac <ACR_Init+0x5c>)
 800e468:	605a      	str	r2, [r3, #4]

	mainACR.Init.Id_limit = 15.0f;
 800e46a:	4b0e      	ldr	r3, [pc, #56]	; (800e4a4 <ACR_Init+0x54>)
 800e46c:	4a10      	ldr	r2, [pc, #64]	; (800e4b0 <ACR_Init+0x60>)
 800e46e:	60da      	str	r2, [r3, #12]
	mainACR.Init.Iq_limit = 15.0f;
 800e470:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <ACR_Init+0x54>)
 800e472:	4a0f      	ldr	r2, [pc, #60]	; (800e4b0 <ACR_Init+0x60>)
 800e474:	611a      	str	r2, [r3, #16]

	mainACR.Init.Id_error_integ_limit = 1.0f;
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <ACR_Init+0x54>)
 800e478:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e47c:	615a      	str	r2, [r3, #20]
	mainACR.Init.Iq_error_integ_limit = 1.0f;
 800e47e:	4b09      	ldr	r3, [pc, #36]	; (800e4a4 <ACR_Init+0x54>)
 800e480:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e484:	619a      	str	r2, [r3, #24]

	mainACR.Init.cycleTime = 100E-6;
 800e486:	4b07      	ldr	r3, [pc, #28]	; (800e4a4 <ACR_Init+0x54>)
 800e488:	4a0a      	ldr	r2, [pc, #40]	; (800e4b4 <ACR_Init+0x64>)
 800e48a:	609a      	str	r2, [r3, #8]

	mainACR.Init.hEncoder = &mainEncoder;
 800e48c:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <ACR_Init+0x54>)
 800e48e:	4a0a      	ldr	r2, [pc, #40]	; (800e4b8 <ACR_Init+0x68>)
 800e490:	61da      	str	r2, [r3, #28]

	mainACR.Init.hCS = &mainCS;
 800e492:	4b04      	ldr	r3, [pc, #16]	; (800e4a4 <ACR_Init+0x54>)
 800e494:	4a09      	ldr	r2, [pc, #36]	; (800e4bc <ACR_Init+0x6c>)
 800e496:	621a      	str	r2, [r3, #32]
	mainACR.Init.htim = &htim8;
 800e498:	4b02      	ldr	r3, [pc, #8]	; (800e4a4 <ACR_Init+0x54>)
 800e49a:	4a09      	ldr	r2, [pc, #36]	; (800e4c0 <ACR_Init+0x70>)
 800e49c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800e49e:	bf00      	nop
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	200042d0 	.word	0x200042d0
 800e4a8:	3dcccccd 	.word	0x3dcccccd
 800e4ac:	42c80000 	.word	0x42c80000
 800e4b0:	41700000 	.word	0x41700000
 800e4b4:	38d1b717 	.word	0x38d1b717
 800e4b8:	200046f4 	.word	0x200046f4
 800e4bc:	200043d4 	.word	0x200043d4
 800e4c0:	200047f0 	.word	0x200047f0

0800e4c4 <ACR_Start>:



void ACR_Start(ACR_TypeDef *hACR)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]

	hACR->enable = 1;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ACR_Reset(hACR);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fa77 	bl	800e9c8 <ACR_Reset>

}
 800e4da:	bf00      	nop
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	0000      	movs	r0, r0
 800e4e4:	0000      	movs	r0, r0
	...

0800e4e8 <ACR_Refresh>:
}



inline void ACR_Refresh(ACR_TypeDef *hACR)
{
 800e4e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4ec:	b082      	sub	sp, #8
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
	static float _Id_ref;
	static float _Iq_ref;

	static ACR_InitTypeDef *hACR_Init;

	hACR_Init = &hACR->Init;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4aa8      	ldr	r2, [pc, #672]	; (800e798 <ACR_Refresh+0x2b0>)
 800e4f6:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	2140      	movs	r1, #64	; 0x40
 800e4fc:	48a7      	ldr	r0, [pc, #668]	; (800e79c <ACR_Refresh+0x2b4>)
 800e4fe:	f7fc ff3f 	bl	800b380 <HAL_GPIO_WritePin>


	CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e50e:	4ba2      	ldr	r3, [pc, #648]	; (800e798 <ACR_Refresh+0x2b0>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	69db      	ldr	r3, [r3, #28]
 800e514:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e518:	4b9f      	ldr	r3, [pc, #636]	; (800e798 <ACR_Refresh+0x2b0>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	69db      	ldr	r3, [r3, #28]
 800e51e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800e522:	eef0 0a47 	vmov.f32	s1, s14
 800e526:	eeb0 0a67 	vmov.f32	s0, s15
 800e52a:	489d      	ldr	r0, [pc, #628]	; (800e7a0 <ACR_Refresh+0x2b8>)
 800e52c:	f000 feb0 	bl	800f290 <CurrentSensor_getIdq>


	/*
	 * 強制転流
	 */
	if(hACR->forced_commute_enable)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e536:	2b00      	cmp	r3, #0
 800e538:	d03d      	beq.n	800e5b6 <ACR_Refresh+0xce>
	{

		hACR->forced_cos_theta_re = sin_table2[(int)((hACR->forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e540:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800e7a4 <ACR_Refresh+0x2bc>
 800e544:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e548:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e54c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e550:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800e7a8 <ACR_Refresh+0x2c0>
 800e554:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e55c:	ee17 3a90 	vmov	r3, s15
 800e560:	4a92      	ldr	r2, [pc, #584]	; (800e7ac <ACR_Refresh+0x2c4>)
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4413      	add	r3, r2
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	665a      	str	r2, [r3, #100]	; 0x64
		hACR->forced_sin_theta_re = sin_table2[(int)(hACR->forced_theta_re * 1591.54943f)];
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e572:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800e7b0 <ACR_Refresh+0x2c8>
 800e576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e57a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e57e:	ee17 3a90 	vmov	r3, s15
 800e582:	4a8a      	ldr	r2, [pc, #552]	; (800e7ac <ACR_Refresh+0x2c4>)
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	4413      	add	r3, r2
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	669a      	str	r2, [r3, #104]	; 0x68

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800e5a6:	eef0 0a47 	vmov.f32	s1, s14
 800e5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ae:	487c      	ldr	r0, [pc, #496]	; (800e7a0 <ACR_Refresh+0x2b8>)
 800e5b0:	f000 fe6e 	bl	800f290 <CurrentSensor_getIdq>
 800e5b4:	e016      	b.n	800e5e4 <ACR_Refresh+0xfc>

	}
	else
	{

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e5c2:	4b75      	ldr	r3, [pc, #468]	; (800e798 <ACR_Refresh+0x2b0>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	69db      	ldr	r3, [r3, #28]
 800e5c8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e5cc:	4b72      	ldr	r3, [pc, #456]	; (800e798 <ACR_Refresh+0x2b0>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	69db      	ldr	r3, [r3, #28]
 800e5d2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800e5d6:	eef0 0a47 	vmov.f32	s1, s14
 800e5da:	eeb0 0a67 	vmov.f32	s0, s15
 800e5de:	4870      	ldr	r0, [pc, #448]	; (800e7a0 <ACR_Refresh+0x2b8>)
 800e5e0:	f000 fe56 	bl	800f290 <CurrentSensor_getIdq>

	}



	if(hACR_Init->hEncoder->theta_re < M_PI)
 800e5e4:	4b6c      	ldr	r3, [pc, #432]	; (800e798 <ACR_Refresh+0x2b0>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	69db      	ldr	r3, [r3, #28]
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7f9 fe93 	bl	8008318 <__aeabi_f2d>
 800e5f2:	a367      	add	r3, pc, #412	; (adr r3, 800e790 <ACR_Refresh+0x2a8>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	f7fa f958 	bl	80088ac <__aeabi_dcmplt>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d005      	beq.n	800e60e <ACR_Refresh+0x126>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800e602:	2200      	movs	r2, #0
 800e604:	2140      	movs	r1, #64	; 0x40
 800e606:	486b      	ldr	r0, [pc, #428]	; (800e7b4 <ACR_Refresh+0x2cc>)
 800e608:	f7fc feba 	bl	800b380 <HAL_GPIO_WritePin>
 800e60c:	e004      	b.n	800e618 <ACR_Refresh+0x130>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800e60e:	2201      	movs	r2, #1
 800e610:	2140      	movs	r1, #64	; 0x40
 800e612:	4868      	ldr	r0, [pc, #416]	; (800e7b4 <ACR_Refresh+0x2cc>)
 800e614:	f7fc feb4 	bl	800b380 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(hACR->enable /*&& soundCount == -1*/)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f000 81ac 	beq.w	800e97c <ACR_Refresh+0x494>
	{

		_Id_ref = hACR->Id_ref;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e628:	4a63      	ldr	r2, [pc, #396]	; (800e7b8 <ACR_Refresh+0x2d0>)
 800e62a:	6013      	str	r3, [r2, #0]
		//_Iq_ref = hACR->Iq_ref + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
		_Iq_ref = hACR->Iq_ref;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e630:	4a62      	ldr	r2, [pc, #392]	; (800e7bc <ACR_Refresh+0x2d4>)
 800e632:	6013      	str	r3, [r2, #0]


		if(_Id_ref < -hACR_Init->Id_limit)			_Id_ref = -hACR_Init->Id_limit;
 800e634:	4b58      	ldr	r3, [pc, #352]	; (800e798 <ACR_Refresh+0x2b0>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	edd3 7a03 	vldr	s15, [r3, #12]
 800e63c:	eeb1 7a67 	vneg.f32	s14, s15
 800e640:	4b5d      	ldr	r3, [pc, #372]	; (800e7b8 <ACR_Refresh+0x2d0>)
 800e642:	edd3 7a00 	vldr	s15, [r3]
 800e646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64e:	dd09      	ble.n	800e664 <ACR_Refresh+0x17c>
 800e650:	4b51      	ldr	r3, [pc, #324]	; (800e798 <ACR_Refresh+0x2b0>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	edd3 7a03 	vldr	s15, [r3, #12]
 800e658:	eef1 7a67 	vneg.f32	s15, s15
 800e65c:	4b56      	ldr	r3, [pc, #344]	; (800e7b8 <ACR_Refresh+0x2d0>)
 800e65e:	edc3 7a00 	vstr	s15, [r3]
 800e662:	e010      	b.n	800e686 <ACR_Refresh+0x19e>
		else if(_Id_ref > hACR_Init->Id_limit)		_Id_ref = hACR_Init->Id_limit;
 800e664:	4b4c      	ldr	r3, [pc, #304]	; (800e798 <ACR_Refresh+0x2b0>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	ed93 7a03 	vldr	s14, [r3, #12]
 800e66c:	4b52      	ldr	r3, [pc, #328]	; (800e7b8 <ACR_Refresh+0x2d0>)
 800e66e:	edd3 7a00 	vldr	s15, [r3]
 800e672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67a:	d504      	bpl.n	800e686 <ACR_Refresh+0x19e>
 800e67c:	4b46      	ldr	r3, [pc, #280]	; (800e798 <ACR_Refresh+0x2b0>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	4a4d      	ldr	r2, [pc, #308]	; (800e7b8 <ACR_Refresh+0x2d0>)
 800e684:	6013      	str	r3, [r2, #0]

		if(_Iq_ref < -hACR_Init->Iq_limit)			_Iq_ref = -hACR_Init->Iq_limit;
 800e686:	4b44      	ldr	r3, [pc, #272]	; (800e798 <ACR_Refresh+0x2b0>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	edd3 7a04 	vldr	s15, [r3, #16]
 800e68e:	eeb1 7a67 	vneg.f32	s14, s15
 800e692:	4b4a      	ldr	r3, [pc, #296]	; (800e7bc <ACR_Refresh+0x2d4>)
 800e694:	edd3 7a00 	vldr	s15, [r3]
 800e698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a0:	dd09      	ble.n	800e6b6 <ACR_Refresh+0x1ce>
 800e6a2:	4b3d      	ldr	r3, [pc, #244]	; (800e798 <ACR_Refresh+0x2b0>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	edd3 7a04 	vldr	s15, [r3, #16]
 800e6aa:	eef1 7a67 	vneg.f32	s15, s15
 800e6ae:	4b43      	ldr	r3, [pc, #268]	; (800e7bc <ACR_Refresh+0x2d4>)
 800e6b0:	edc3 7a00 	vstr	s15, [r3]
 800e6b4:	e010      	b.n	800e6d8 <ACR_Refresh+0x1f0>
		else if(_Iq_ref > hACR_Init->Iq_limit)		_Iq_ref = hACR_Init->Iq_limit;
 800e6b6:	4b38      	ldr	r3, [pc, #224]	; (800e798 <ACR_Refresh+0x2b0>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	ed93 7a04 	vldr	s14, [r3, #16]
 800e6be:	4b3f      	ldr	r3, [pc, #252]	; (800e7bc <ACR_Refresh+0x2d4>)
 800e6c0:	edd3 7a00 	vldr	s15, [r3]
 800e6c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	d504      	bpl.n	800e6d8 <ACR_Refresh+0x1f0>
 800e6ce:	4b32      	ldr	r3, [pc, #200]	; (800e798 <ACR_Refresh+0x2b0>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	4a39      	ldr	r2, [pc, #228]	; (800e7bc <ACR_Refresh+0x2d4>)
 800e6d6:	6013      	str	r3, [r2, #0]


		hACR->Id_error = _Id_ref - hACR->Id;
 800e6d8:	4b37      	ldr	r3, [pc, #220]	; (800e7b8 <ACR_Refresh+0x2d0>)
 800e6da:	ed93 7a00 	vldr	s14, [r3]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e6e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		hACR->Iq_error = _Iq_ref - hACR->Iq;
 800e6ee:	4b33      	ldr	r3, [pc, #204]	; (800e7bc <ACR_Refresh+0x2d4>)
 800e6f0:	ed93 7a00 	vldr	s14, [r3]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e6fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40


		hACR->Id_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Id_error + hACR->p_Id_error);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800e70a:	4b23      	ldr	r3, [pc, #140]	; (800e798 <ACR_Refresh+0x2b0>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	edd3 7a02 	vldr	s15, [r3, #8]
 800e712:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e716:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e726:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e72a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e72e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hACR->Iq_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Iq_error + hACR->p_Iq_error);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e73e:	4b16      	ldr	r3, [pc, #88]	; (800e798 <ACR_Refresh+0x2b0>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	edd3 7a02 	vldr	s15, [r3, #8]
 800e746:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e74a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800e75a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e75e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e762:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50


		if(hACR->Id_error_integ > hACR_Init->Id_error_integ_limit)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800e772:	4b09      	ldr	r3, [pc, #36]	; (800e798 <ACR_Refresh+0x2b0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	edd3 7a05 	vldr	s15, [r3, #20]
 800e77a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e782:	dd1d      	ble.n	800e7c0 <ACR_Refresh+0x2d8>
		{
			hACR->Id_error_integ = hACR_Init->Id_error_integ_limit;
 800e784:	4b04      	ldr	r3, [pc, #16]	; (800e798 <ACR_Refresh+0x2b0>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	695a      	ldr	r2, [r3, #20]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	64da      	str	r2, [r3, #76]	; 0x4c
 800e78e:	e046      	b.n	800e81e <ACR_Refresh+0x336>
 800e790:	54442d18 	.word	0x54442d18
 800e794:	400921fb 	.word	0x400921fb
 800e798:	20000204 	.word	0x20000204
 800e79c:	40020400 	.word	0x40020400
 800e7a0:	200043d4 	.word	0x200043d4
 800e7a4:	3ea2f838 	.word	0x3ea2f838
 800e7a8:	459c4000 	.word	0x459c4000
 800e7ac:	08013960 	.word	0x08013960
 800e7b0:	44c6f195 	.word	0x44c6f195
 800e7b4:	40020000 	.word	0x40020000
 800e7b8:	20000208 	.word	0x20000208
 800e7bc:	2000020c 	.word	0x2000020c
		}
		else if(hACR->Id_error_integ < -1.0 * hACR_Init->Id_error_integ_limit)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7f9 fda7 	bl	8008318 <__aeabi_f2d>
 800e7ca:	4682      	mov	sl, r0
 800e7cc:	468b      	mov	fp, r1
 800e7ce:	4b78      	ldr	r3, [pc, #480]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	695b      	ldr	r3, [r3, #20]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f9 fd9f 	bl	8008318 <__aeabi_f2d>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	460b      	mov	r3, r1
 800e7de:	4690      	mov	r8, r2
 800e7e0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800e7e4:	4642      	mov	r2, r8
 800e7e6:	464b      	mov	r3, r9
 800e7e8:	4650      	mov	r0, sl
 800e7ea:	4659      	mov	r1, fp
 800e7ec:	f7fa f85e 	bl	80088ac <__aeabi_dcmplt>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d013      	beq.n	800e81e <ACR_Refresh+0x336>
		{
			hACR->Id_error_integ = -1.0 * hACR_Init->Id_error_integ_limit;
 800e7f6:	4b6e      	ldr	r3, [pc, #440]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	695b      	ldr	r3, [r3, #20]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7f9 fd8b 	bl	8008318 <__aeabi_f2d>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4610      	mov	r0, r2
 800e808:	4619      	mov	r1, r3
 800e80a:	f7fa f8b5 	bl	8008978 <__aeabi_d2f>
 800e80e:	4603      	mov	r3, r0
 800e810:	ee07 3a90 	vmov	s15, r3
 800e814:	eef1 7a67 	vneg.f32	s15, s15
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}

		if(hACR->Iq_error_integ > hACR_Init->Iq_error_integ_limit)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e824:	4b62      	ldr	r3, [pc, #392]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	edd3 7a06 	vldr	s15, [r3, #24]
 800e82c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e834:	dd05      	ble.n	800e842 <ACR_Refresh+0x35a>
		{
			hACR->Iq_error_integ = hACR_Init->Iq_error_integ_limit;
 800e836:	4b5e      	ldr	r3, [pc, #376]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	699a      	ldr	r2, [r3, #24]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	651a      	str	r2, [r3, #80]	; 0x50
 800e840:	e02e      	b.n	800e8a0 <ACR_Refresh+0x3b8>
		}
		else if(hACR->Iq_error_integ < -1.0 * hACR_Init->Iq_error_integ_limit)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e846:	4618      	mov	r0, r3
 800e848:	f7f9 fd66 	bl	8008318 <__aeabi_f2d>
 800e84c:	4680      	mov	r8, r0
 800e84e:	4689      	mov	r9, r1
 800e850:	4b57      	ldr	r3, [pc, #348]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	4618      	mov	r0, r3
 800e858:	f7f9 fd5e 	bl	8008318 <__aeabi_f2d>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	4614      	mov	r4, r2
 800e862:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800e866:	4622      	mov	r2, r4
 800e868:	462b      	mov	r3, r5
 800e86a:	4640      	mov	r0, r8
 800e86c:	4649      	mov	r1, r9
 800e86e:	f7fa f81d 	bl	80088ac <__aeabi_dcmplt>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d013      	beq.n	800e8a0 <ACR_Refresh+0x3b8>
		{
			hACR->Iq_error_integ = -1.0 * hACR_Init->Iq_error_integ_limit;
 800e878:	4b4d      	ldr	r3, [pc, #308]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7f9 fd4a 	bl	8008318 <__aeabi_f2d>
 800e884:	4603      	mov	r3, r0
 800e886:	460c      	mov	r4, r1
 800e888:	4618      	mov	r0, r3
 800e88a:	4621      	mov	r1, r4
 800e88c:	f7fa f874 	bl	8008978 <__aeabi_d2f>
 800e890:	4603      	mov	r3, r0
 800e892:	ee07 3a90 	vmov	s15, r3
 800e896:	eef1 7a67 	vneg.f32	s15, s15
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		}


		hACR->p_Id_error = hACR->Id_error;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	645a      	str	r2, [r3, #68]	; 0x44
		hACR->p_Iq_error = hACR->Iq_error;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	649a      	str	r2, [r3, #72]	; 0x48

		// hACR->Vd_ref = - hACR_Init->Kp * hACR->Id + hACR_Init->Ki * hACR->Id_error_integ;
		// hACR->Vq_ref = - hACR_Init->Kp * hACR->Iq + hACR_Init->Ki * hACR->Iq_error_integ;

		hACR->Vd_ref = hACR_Init->Kp * hACR->Id_error + hACR_Init->Ki * hACR->Id_error_integ;
 800e8b0:	4b3f      	ldr	r3, [pc, #252]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	ed93 7a00 	vldr	s14, [r3]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e8be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8c2:	4b3b      	ldr	r3, [pc, #236]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	edd3 6a01 	vldr	s13, [r3, #4]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800e8d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		hACR->Vq_ref = hACR_Init->Kp * hACR->Iq_error + hACR_Init->Ki * hACR->Iq_error_integ;
 800e8de:	4b34      	ldr	r3, [pc, #208]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	ed93 7a00 	vldr	s14, [r3]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8f0:	4b2f      	ldr	r3, [pc, #188]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	edd3 6a01 	vldr	s13, [r3, #4]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800e8fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e902:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


		if(hACR->forced_commute_enable)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e912:	2b00      	cmp	r3, #0
 800e914:	d017      	beq.n	800e946 <ACR_Refresh+0x45e>
		{
			setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	ed93 6a1a 	vldr	s12, [r3, #104]	; 0x68
 800e92e:	eef0 1a46 	vmov.f32	s3, s12
 800e932:	eeb0 1a66 	vmov.f32	s2, s13
 800e936:	eef0 0a47 	vmov.f32	s1, s14
 800e93a:	eeb0 0a67 	vmov.f32	s0, s15
 800e93e:	481d      	ldr	r0, [pc, #116]	; (800e9b4 <ACR_Refresh+0x4cc>)
 800e940:	f002 f9a8 	bl	8010c94 <setSVM_dq>
 800e944:	e01a      	b.n	800e97c <ACR_Refresh+0x494>
		}
		else
		{
			setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e952:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800e95c:	4b14      	ldr	r3, [pc, #80]	; (800e9b0 <ACR_Refresh+0x4c8>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800e966:	eef0 1a46 	vmov.f32	s3, s12
 800e96a:	eeb0 1a66 	vmov.f32	s2, s13
 800e96e:	eef0 0a47 	vmov.f32	s1, s14
 800e972:	eeb0 0a67 	vmov.f32	s0, s15
 800e976:	480f      	ldr	r0, [pc, #60]	; (800e9b4 <ACR_Refresh+0x4cc>)
 800e978:	f002 f98c 	bl	8010c94 <setSVM_dq>
	*/




	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e97c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e980:	480d      	ldr	r0, [pc, #52]	; (800e9b8 <ACR_Refresh+0x4d0>)
 800e982:	f7fc fce5 	bl	800b350 <HAL_GPIO_ReadPin>
#endif




	msec += 0.1f;
 800e986:	4b0d      	ldr	r3, [pc, #52]	; (800e9bc <ACR_Refresh+0x4d4>)
 800e988:	edd3 7a00 	vldr	s15, [r3]
 800e98c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e9c0 <ACR_Refresh+0x4d8>
 800e990:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e994:	4b09      	ldr	r3, [pc, #36]	; (800e9bc <ACR_Refresh+0x4d4>)
 800e996:	edc3 7a00 	vstr	s15, [r3]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e99a:	2200      	movs	r2, #0
 800e99c:	2140      	movs	r1, #64	; 0x40
 800e99e:	4809      	ldr	r0, [pc, #36]	; (800e9c4 <ACR_Refresh+0x4dc>)
 800e9a0:	f7fc fcee 	bl	800b380 <HAL_GPIO_WritePin>

	return;
 800e9a4:	bf00      	nop
}
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20000204 	.word	0x20000204
 800e9b4:	200047f0 	.word	0x200047f0
 800e9b8:	40020000 	.word	0x40020000
 800e9bc:	20000200 	.word	0x20000200
 800e9c0:	3dcccccd 	.word	0x3dcccccd
 800e9c4:	40020400 	.word	0x40020400

0800e9c8 <ACR_Reset>:



inline void ACR_Reset(ACR_TypeDef *hACR)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]

	hACR->Id_error_integ = 0.0f;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f04f 0200 	mov.w	r2, #0
 800e9d6:	64da      	str	r2, [r3, #76]	; 0x4c
	hACR->Iq_error_integ = 0.0f;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f04f 0200 	mov.w	r2, #0
 800e9de:	651a      	str	r2, [r3, #80]	; 0x50

	hACR->Id = hACR->Id_ref = 0.0f;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f04f 0200 	mov.w	r2, #0
 800e9e6:	62da      	str	r2, [r3, #44]	; 0x2c
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	635a      	str	r2, [r3, #52]	; 0x34
	hACR->Iq = hACR->Iq_ref = 0.0f;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f04f 0200 	mov.w	r2, #0
 800e9f6:	631a      	str	r2, [r3, #48]	; 0x30
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	639a      	str	r2, [r3, #56]	; 0x38

	hACR->Vd_ref = 0.0f;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f04f 0200 	mov.w	r2, #0
 800ea06:	655a      	str	r2, [r3, #84]	; 0x54
	hACR->Vq_ref = 0.0f;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f04f 0200 	mov.w	r2, #0
 800ea0e:	659a      	str	r2, [r3, #88]	; 0x58

}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <APR_Init>:

APR_TypeDef mainAPR;


void APR_Init()
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	af00      	add	r7, sp, #0
	memset(&mainAPR, 0x00, sizeof(mainAPR));
 800ea20:	2254      	movs	r2, #84	; 0x54
 800ea22:	2100      	movs	r1, #0
 800ea24:	4814      	ldr	r0, [pc, #80]	; (800ea78 <APR_Init+0x5c>)
 800ea26:	f003 f964 	bl	8011cf2 <memset>

	mainAPR.Init.Kp = 0.1f;
 800ea2a:	4b13      	ldr	r3, [pc, #76]	; (800ea78 <APR_Init+0x5c>)
 800ea2c:	4a13      	ldr	r2, [pc, #76]	; (800ea7c <APR_Init+0x60>)
 800ea2e:	601a      	str	r2, [r3, #0]
	mainAPR.Init.Ki = 0.0f;
 800ea30:	4b11      	ldr	r3, [pc, #68]	; (800ea78 <APR_Init+0x5c>)
 800ea32:	f04f 0200 	mov.w	r2, #0
 800ea36:	605a      	str	r2, [r3, #4]
	mainAPR.Init.Kd = 0.0f;
 800ea38:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <APR_Init+0x5c>)
 800ea3a:	f04f 0200 	mov.w	r2, #0
 800ea3e:	609a      	str	r2, [r3, #8]

	mainAPR.Init.theta_error_integ_limit = 10000.0f;
 800ea40:	4b0d      	ldr	r3, [pc, #52]	; (800ea78 <APR_Init+0x5c>)
 800ea42:	4a0f      	ldr	r2, [pc, #60]	; (800ea80 <APR_Init+0x64>)
 800ea44:	611a      	str	r2, [r3, #16]
	mainAPR.Init.cycleTime = 1E-3;
 800ea46:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <APR_Init+0x5c>)
 800ea48:	4a0e      	ldr	r2, [pc, #56]	; (800ea84 <APR_Init+0x68>)
 800ea4a:	60da      	str	r2, [r3, #12]
	mainAPR.Init.prescaler = 10;
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	; (800ea78 <APR_Init+0x5c>)
 800ea4e:	220a      	movs	r2, #10
 800ea50:	625a      	str	r2, [r3, #36]	; 0x24

	mainAPR.Init.hEncoder = &mainEncoder;
 800ea52:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <APR_Init+0x5c>)
 800ea54:	4a0c      	ldr	r2, [pc, #48]	; (800ea88 <APR_Init+0x6c>)
 800ea56:	615a      	str	r2, [r3, #20]
	mainAPR.Init.hASR = &mainASR;
 800ea58:	4b07      	ldr	r3, [pc, #28]	; (800ea78 <APR_Init+0x5c>)
 800ea5a:	4a0c      	ldr	r2, [pc, #48]	; (800ea8c <APR_Init+0x70>)
 800ea5c:	619a      	str	r2, [r3, #24]
	mainAPR.Init.hACR = &mainACR;
 800ea5e:	4b06      	ldr	r3, [pc, #24]	; (800ea78 <APR_Init+0x5c>)
 800ea60:	4a0b      	ldr	r2, [pc, #44]	; (800ea90 <APR_Init+0x74>)
 800ea62:	61da      	str	r2, [r3, #28]
	mainAPR.Init.htim = &htim8;
 800ea64:	4b04      	ldr	r3, [pc, #16]	; (800ea78 <APR_Init+0x5c>)
 800ea66:	4a0b      	ldr	r2, [pc, #44]	; (800ea94 <APR_Init+0x78>)
 800ea68:	621a      	str	r2, [r3, #32]

	mainAPR.MV_type = 0;
 800ea6a:	4b03      	ldr	r3, [pc, #12]	; (800ea78 <APR_Init+0x5c>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


}
 800ea72:	bf00      	nop
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	2000433c 	.word	0x2000433c
 800ea7c:	3dcccccd 	.word	0x3dcccccd
 800ea80:	461c4000 	.word	0x461c4000
 800ea84:	3a83126f 	.word	0x3a83126f
 800ea88:	200046f4 	.word	0x200046f4
 800ea8c:	20004390 	.word	0x20004390
 800ea90:	200042d0 	.word	0x200042d0
 800ea94:	200047f0 	.word	0x200047f0

0800ea98 <APR_prescaler>:

}


inline void APR_prescaler(APR_TypeDef *hAPR)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]

	hAPR->prescalerCount += 1;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	64da      	str	r2, [r3, #76]	; 0x4c

	if(hAPR->prescalerCount >= hAPR->Init.prescaler)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d306      	bcc.n	800eac4 <APR_prescaler+0x2c>
	{
		hAPR->launchFlg = 1;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2201      	movs	r2, #1
 800eaba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		hAPR->prescalerCount = 0;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	64da      	str	r2, [r3, #76]	; 0x4c
	}

}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <APR_Refresh>:


inline void APR_Refresh(APR_TypeDef *hAPR)
{
 800ead0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]

	static APR_InitTypeDef *hAPR_Init;

	// 有効時のみ実行
	if(hAPR->enable == 0)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 80c1 	beq.w	800ec68 <APR_Refresh+0x198>
	{
		return;
	}

	// プリスケーラリセット時のみ実行
	if(hAPR->launchFlg == 0)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 80bd 	beq.w	800ec6c <APR_Refresh+0x19c>
	{
		return;
	}
	hAPR->launchFlg = 0;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51


	hAPR_Init = &hAPR->Init;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4a5f      	ldr	r2, [pc, #380]	; (800ec7c <APR_Refresh+0x1ac>)
 800eafe:	6013      	str	r3, [r2, #0]

	hAPR->theta = hAPR_Init->hEncoder->theta_multiturn;
 800eb00:	4b5e      	ldr	r3, [pc, #376]	; (800ec7c <APR_Refresh+0x1ac>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	6a1a      	ldr	r2, [r3, #32]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	631a      	str	r2, [r3, #48]	; 0x30

	// 速度偏差
	hAPR->theta_error = hAPR->theta_ref - hAPR->theta;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800eb18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	// integral
	hAPR->theta_error_integ += hAPR_Init->cycleTime * 0.5 * (hAPR->theta_error + hAPR->p_theta_error);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f9 fbf6 	bl	8008318 <__aeabi_f2d>
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	460d      	mov	r5, r1
 800eb30:	4b52      	ldr	r3, [pc, #328]	; (800ec7c <APR_Refresh+0x1ac>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f9 fbee 	bl	8008318 <__aeabi_f2d>
 800eb3c:	f04f 0200 	mov.w	r2, #0
 800eb40:	4b4f      	ldr	r3, [pc, #316]	; (800ec80 <APR_Refresh+0x1b0>)
 800eb42:	f7f9 fc41 	bl	80083c8 <__aeabi_dmul>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4690      	mov	r8, r2
 800eb4c:	4699      	mov	r9, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800eb5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb5e:	ee17 0a90 	vmov	r0, s15
 800eb62:	f7f9 fbd9 	bl	8008318 <__aeabi_f2d>
 800eb66:	4602      	mov	r2, r0
 800eb68:	460b      	mov	r3, r1
 800eb6a:	4640      	mov	r0, r8
 800eb6c:	4649      	mov	r1, r9
 800eb6e:	f7f9 fc2b 	bl	80083c8 <__aeabi_dmul>
 800eb72:	4602      	mov	r2, r0
 800eb74:	460b      	mov	r3, r1
 800eb76:	4620      	mov	r0, r4
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7f9 fa6f 	bl	800805c <__adddf3>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	460c      	mov	r4, r1
 800eb82:	4618      	mov	r0, r3
 800eb84:	4621      	mov	r1, r4
 800eb86:	f7f9 fef7 	bl	8008978 <__aeabi_d2f>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	63da      	str	r2, [r3, #60]	; 0x3c

	hAPR->p_theta_error = hAPR->theta_error;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	639a      	str	r2, [r3, #56]	; 0x38

	if(hAPR->MV_type == 0)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d11f      	bne.n	800ebe2 <APR_Refresh+0x112>
	{
		// P-D型
		hAPR_Init->hASR->omega_ref = hAPR->omega_ref = hAPR_Init->Kp * hAPR->theta_error - hAPR_Init->Kd * hAPR_Init->hEncoder->omega;
 800eba2:	4b36      	ldr	r3, [pc, #216]	; (800ec7c <APR_Refresh+0x1ac>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	ed93 7a00 	vldr	s14, [r3]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ebb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebb4:	4b31      	ldr	r3, [pc, #196]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	edd3 6a02 	vldr	s13, [r3, #8]
 800ebbc:	4b2f      	ldr	r3, [pc, #188]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ebc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 800ebd4:	4b29      	ldr	r3, [pc, #164]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ebde:	625a      	str	r2, [r3, #36]	; 0x24
		setSVM_dq(&htim8, 0.0f, hAPR->Vq_ref, hAPR_Init->hEncoder->cos_theta_re, hAPR_Init->hEncoder->sin_theta_re);

	}


	return;
 800ebe0:	e046      	b.n	800ec70 <APR_Refresh+0x1a0>
	else if(hAPR->MV_type == 2)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d141      	bne.n	800ec70 <APR_Refresh+0x1a0>
				hAPR_Init->Kp * hAPR->theta_error
 800ebec:	4b23      	ldr	r3, [pc, #140]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	ed93 7a00 	vldr	s14, [r3]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ebfa:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ hAPR_Init->Ki * hAPR->theta_error_integ
 800ebfe:	4b1f      	ldr	r3, [pc, #124]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	edd3 6a01 	vldr	s13, [r3, #4]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ec0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec10:	ee37 7a27 	vadd.f32	s14, s14, s15
				- hAPR_Init->Kd * hAPR_Init->hEncoder->omega;
 800ec14:	4b19      	ldr	r3, [pc, #100]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	edd3 6a02 	vldr	s13, [r3, #8]
 800ec1c:	4b17      	ldr	r3, [pc, #92]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	695b      	ldr	r3, [r3, #20]
 800ec22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ec26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec2a:	ee77 7a67 	vsub.f32	s15, s14, s15
		hAPR->Vq_ref =
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		setSVM_dq(&htim8, 0.0f, hAPR->Vq_ref, hAPR_Init->hEncoder->cos_theta_re, hAPR_Init->hEncoder->sin_theta_re);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800ec3a:	4b10      	ldr	r3, [pc, #64]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	695b      	ldr	r3, [r3, #20]
 800ec40:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ec44:	4b0d      	ldr	r3, [pc, #52]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	695b      	ldr	r3, [r3, #20]
 800ec4a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800ec4e:	eef0 1a66 	vmov.f32	s3, s13
 800ec52:	eeb0 1a47 	vmov.f32	s2, s14
 800ec56:	eef0 0a67 	vmov.f32	s1, s15
 800ec5a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ec84 <APR_Refresh+0x1b4>
 800ec5e:	480a      	ldr	r0, [pc, #40]	; (800ec88 <APR_Refresh+0x1b8>)
 800ec60:	f002 f818 	bl	8010c94 <setSVM_dq>
	return;
 800ec64:	bf00      	nop
 800ec66:	e003      	b.n	800ec70 <APR_Refresh+0x1a0>
		return;
 800ec68:	bf00      	nop
 800ec6a:	e002      	b.n	800ec72 <APR_Refresh+0x1a2>
		return;
 800ec6c:	bf00      	nop
 800ec6e:	e000      	b.n	800ec72 <APR_Refresh+0x1a2>
	return;
 800ec70:	bf00      	nop
}
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20000210 	.word	0x20000210
 800ec80:	3fe00000 	.word	0x3fe00000
 800ec84:	00000000 	.word	0x00000000
 800ec88:	200047f0 	.word	0x200047f0

0800ec8c <ASR_Init>:

ASR_TypeDef mainASR;


void ASR_Init()
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	af00      	add	r7, sp, #0
	memset(&mainASR, 0x00, sizeof(mainASR));
 800ec90:	2244      	movs	r2, #68	; 0x44
 800ec92:	2100      	movs	r1, #0
 800ec94:	4812      	ldr	r0, [pc, #72]	; (800ece0 <ASR_Init+0x54>)
 800ec96:	f003 f82c 	bl	8011cf2 <memset>

	mainASR.Init.Kp = 0.5f;
 800ec9a:	4b11      	ldr	r3, [pc, #68]	; (800ece0 <ASR_Init+0x54>)
 800ec9c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800eca0:	601a      	str	r2, [r3, #0]
	mainASR.Init.Ki = 15.0f;
 800eca2:	4b0f      	ldr	r3, [pc, #60]	; (800ece0 <ASR_Init+0x54>)
 800eca4:	4a0f      	ldr	r2, [pc, #60]	; (800ece4 <ASR_Init+0x58>)
 800eca6:	605a      	str	r2, [r3, #4]
	mainASR.Init.omega_limit = 400.0f;
 800eca8:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <ASR_Init+0x54>)
 800ecaa:	4a0f      	ldr	r2, [pc, #60]	; (800ece8 <ASR_Init+0x5c>)
 800ecac:	60da      	str	r2, [r3, #12]
	mainASR.Init.omega_error_integ_limit = 1000.0f;
 800ecae:	4b0c      	ldr	r3, [pc, #48]	; (800ece0 <ASR_Init+0x54>)
 800ecb0:	4a0e      	ldr	r2, [pc, #56]	; (800ecec <ASR_Init+0x60>)
 800ecb2:	611a      	str	r2, [r3, #16]
	mainASR.Init.cycleTime = 1E-3;
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <ASR_Init+0x54>)
 800ecb6:	4a0e      	ldr	r2, [pc, #56]	; (800ecf0 <ASR_Init+0x64>)
 800ecb8:	609a      	str	r2, [r3, #8]
	mainASR.Init.prescaler = 10;
 800ecba:	4b09      	ldr	r3, [pc, #36]	; (800ece0 <ASR_Init+0x54>)
 800ecbc:	220a      	movs	r2, #10
 800ecbe:	61da      	str	r2, [r3, #28]

	mainASR.Init.hEncoder = &mainEncoder;
 800ecc0:	4b07      	ldr	r3, [pc, #28]	; (800ece0 <ASR_Init+0x54>)
 800ecc2:	4a0c      	ldr	r2, [pc, #48]	; (800ecf4 <ASR_Init+0x68>)
 800ecc4:	615a      	str	r2, [r3, #20]
	mainASR.Init.hACR = &mainACR;
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <ASR_Init+0x54>)
 800ecc8:	4a0b      	ldr	r2, [pc, #44]	; (800ecf8 <ASR_Init+0x6c>)
 800ecca:	619a      	str	r2, [r3, #24]

	mainASR.firstLaunch = 1;
 800eccc:	4b04      	ldr	r3, [pc, #16]	; (800ece0 <ASR_Init+0x54>)
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	mainASR.omega = 0.0f;
 800ecd4:	4b02      	ldr	r3, [pc, #8]	; (800ece0 <ASR_Init+0x54>)
 800ecd6:	f04f 0200 	mov.w	r2, #0
 800ecda:	629a      	str	r2, [r3, #40]	; 0x28

}
 800ecdc:	bf00      	nop
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	20004390 	.word	0x20004390
 800ece4:	41700000 	.word	0x41700000
 800ece8:	43c80000 	.word	0x43c80000
 800ecec:	447a0000 	.word	0x447a0000
 800ecf0:	3a83126f 	.word	0x3a83126f
 800ecf4:	200046f4 	.word	0x200046f4
 800ecf8:	200042d0 	.word	0x200042d0

0800ecfc <ASR_Start>:


void ASR_Start(ASR_TypeDef *hASR)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]

	hASR->enable = 1;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 2020 	strb.w	r2, [r3, #32]
	ASR_Reset(hASR);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 f903 	bl	800ef18 <ASR_Reset>

}
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <ASR_prescaler>:

}


inline void ASR_prescaler(ASR_TypeDef *hASR)
{
 800ed1a:	b480      	push	{r7}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]

	hASR->prescalerCount += 1;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	63da      	str	r2, [r3, #60]	; 0x3c

	if(hASR->prescalerCount >= hASR->Init.prescaler)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	69db      	ldr	r3, [r3, #28]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d306      	bcc.n	800ed46 <ASR_prescaler+0x2c>
	{
		hASR->launchFlg = 1;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hASR->prescalerCount = 0;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 800ed46:	bf00      	nop
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	0000      	movs	r0, r0
 800ed54:	0000      	movs	r0, r0
	...

0800ed58 <ASR_Refresh>:


inline void ASR_Refresh(ASR_TypeDef *hASR)
{
 800ed58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ed5c:	b082      	sub	sp, #8
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
	static float torque_ref;

	static ASR_InitTypeDef *hASR_Init;

	// 有効時のみ実行
	if(hASR->enable == 0)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 80bf 	beq.w	800eeec <ASR_Refresh+0x194>
	{
		return;
	}

	// プリスケーラリセット時のみ実行
	if(hASR->launchFlg == 0)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f000 80bb 	beq.w	800eef0 <ASR_Refresh+0x198>
	{
		return;
	}
	hASR->launchFlg = 0;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


	hASR_Init = &hASR->Init;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a60      	ldr	r2, [pc, #384]	; (800ef08 <ASR_Refresh+0x1b0>)
 800ed86:	6013      	str	r3, [r2, #0]

	hASR->omega = hASR_Init->hEncoder->omega;
 800ed88:	4b5f      	ldr	r3, [pc, #380]	; (800ef08 <ASR_Refresh+0x1b0>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	695b      	ldr	r3, [r3, #20]
 800ed8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	629a      	str	r2, [r3, #40]	; 0x28

	// 速度制限
	if(hASR->omega_ref < -hASR_Init->omega_limit)		_omega_ref = -hASR_Init->omega_limit;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800ed9a:	4b5b      	ldr	r3, [pc, #364]	; (800ef08 <ASR_Refresh+0x1b0>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	edd3 7a03 	vldr	s15, [r3, #12]
 800eda2:	eef1 7a67 	vneg.f32	s15, s15
 800eda6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edae:	d509      	bpl.n	800edc4 <ASR_Refresh+0x6c>
 800edb0:	4b55      	ldr	r3, [pc, #340]	; (800ef08 <ASR_Refresh+0x1b0>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	edd3 7a03 	vldr	s15, [r3, #12]
 800edb8:	eef1 7a67 	vneg.f32	s15, s15
 800edbc:	4b53      	ldr	r3, [pc, #332]	; (800ef0c <ASR_Refresh+0x1b4>)
 800edbe:	edc3 7a00 	vstr	s15, [r3]
 800edc2:	e015      	b.n	800edf0 <ASR_Refresh+0x98>
	else if(hASR->omega_ref > hASR_Init->omega_limit)	_omega_ref = hASR_Init->omega_limit;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800edca:	4b4f      	ldr	r3, [pc, #316]	; (800ef08 <ASR_Refresh+0x1b0>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	edd3 7a03 	vldr	s15, [r3, #12]
 800edd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edda:	dd05      	ble.n	800ede8 <ASR_Refresh+0x90>
 800eddc:	4b4a      	ldr	r3, [pc, #296]	; (800ef08 <ASR_Refresh+0x1b0>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	4a4a      	ldr	r2, [pc, #296]	; (800ef0c <ASR_Refresh+0x1b4>)
 800ede4:	6013      	str	r3, [r2, #0]
 800ede6:	e003      	b.n	800edf0 <ASR_Refresh+0x98>
	else												_omega_ref = hASR->omega_ref;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edec:	4a47      	ldr	r2, [pc, #284]	; (800ef0c <ASR_Refresh+0x1b4>)
 800edee:	6013      	str	r3, [r2, #0]

	// 速度偏差
	hASR->omega_error = _omega_ref - hASR->omega;
 800edf0:	4b46      	ldr	r3, [pc, #280]	; (800ef0c <ASR_Refresh+0x1b4>)
 800edf2:	ed93 7a00 	vldr	s14, [r3]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800edfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// integral
	hASR->omega_error_integ += hASR_Init->cycleTime * 0.5 * (hASR->omega_error + hASR->p_omega_error);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7f9 fa84 	bl	8008318 <__aeabi_f2d>
 800ee10:	4604      	mov	r4, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	4b3c      	ldr	r3, [pc, #240]	; (800ef08 <ASR_Refresh+0x1b0>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7f9 fa7c 	bl	8008318 <__aeabi_f2d>
 800ee20:	f04f 0200 	mov.w	r2, #0
 800ee24:	4b3a      	ldr	r3, [pc, #232]	; (800ef10 <ASR_Refresh+0x1b8>)
 800ee26:	f7f9 facf 	bl	80083c8 <__aeabi_dmul>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	4690      	mov	r8, r2
 800ee30:	4699      	mov	r9, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ee3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee42:	ee17 0a90 	vmov	r0, s15
 800ee46:	f7f9 fa67 	bl	8008318 <__aeabi_f2d>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	4640      	mov	r0, r8
 800ee50:	4649      	mov	r1, r9
 800ee52:	f7f9 fab9 	bl	80083c8 <__aeabi_dmul>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	f7f9 f8fd 	bl	800805c <__adddf3>
 800ee62:	4603      	mov	r3, r0
 800ee64:	460c      	mov	r4, r1
 800ee66:	4618      	mov	r0, r3
 800ee68:	4621      	mov	r1, r4
 800ee6a:	f7f9 fd85 	bl	8008978 <__aeabi_d2f>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->p_omega_error = hASR->omega_error;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	631a      	str	r2, [r3, #48]	; 0x30

	torque_ref = hASR_Init->Kp * hASR->omega_error + hASR_Init->Ki * hASR->omega_error_integ;
 800ee7c:	4b22      	ldr	r3, [pc, #136]	; (800ef08 <ASR_Refresh+0x1b0>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	ed93 7a00 	vldr	s14, [r3]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ee8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee8e:	4b1e      	ldr	r3, [pc, #120]	; (800ef08 <ASR_Refresh+0x1b0>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	edd3 6a01 	vldr	s13, [r3, #4]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ee9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eea4:	4b1b      	ldr	r3, [pc, #108]	; (800ef14 <ASR_Refresh+0x1bc>)
 800eea6:	edc3 7a00 	vstr	s15, [r3]

	hASR_Init->hACR->Id_ref = 0.0f;
 800eeaa:	4b17      	ldr	r3, [pc, #92]	; (800ef08 <ASR_Refresh+0x1b0>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	f04f 0200 	mov.w	r2, #0
 800eeb4:	62da      	str	r2, [r3, #44]	; 0x2c
	hASR_Init->hACR->Iq_ref = hASR->Iq_ref = KT * torque_ref;
 800eeb6:	4b17      	ldr	r3, [pc, #92]	; (800ef14 <ASR_Refresh+0x1bc>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7f9 fa2c 	bl	8008318 <__aeabi_f2d>
 800eec0:	a30f      	add	r3, pc, #60	; (adr r3, 800ef00 <ASR_Refresh+0x1a8>)
 800eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec6:	f7f9 fa7f 	bl	80083c8 <__aeabi_dmul>
 800eeca:	4603      	mov	r3, r0
 800eecc:	460c      	mov	r4, r1
 800eece:	4618      	mov	r0, r3
 800eed0:	4621      	mov	r1, r4
 800eed2:	f7f9 fd51 	bl	8008978 <__aeabi_d2f>
 800eed6:	4602      	mov	r2, r0
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	639a      	str	r2, [r3, #56]	; 0x38
 800eedc:	4b0a      	ldr	r3, [pc, #40]	; (800ef08 <ASR_Refresh+0x1b0>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	699b      	ldr	r3, [r3, #24]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eee6:	631a      	str	r2, [r3, #48]	; 0x30


	return;
 800eee8:	bf00      	nop
 800eeea:	e002      	b.n	800eef2 <ASR_Refresh+0x19a>
		return;
 800eeec:	bf00      	nop
 800eeee:	e000      	b.n	800eef2 <ASR_Refresh+0x19a>
		return;
 800eef0:	bf00      	nop
}
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w
 800ef00:	7b830193 	.word	0x7b830193
 800ef04:	3fd6eb16 	.word	0x3fd6eb16
 800ef08:	20000214 	.word	0x20000214
 800ef0c:	20000218 	.word	0x20000218
 800ef10:	3fe00000 	.word	0x3fe00000
 800ef14:	2000021c 	.word	0x2000021c

0800ef18 <ASR_Reset>:



inline void ASR_Reset(ASR_TypeDef *hASR)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]

	hASR->firstLaunch = 1;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hASR->omega_error_integ = 0.0f;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f04f 0200 	mov.w	r2, #0
 800ef2e:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->omega = 0.0f;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f04f 0200 	mov.w	r2, #0
 800ef36:	629a      	str	r2, [r3, #40]	; 0x28

	hASR->omega_ref = 0.0f;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f04f 0200 	mov.w	r2, #0
 800ef3e:	625a      	str	r2, [r3, #36]	; 0x24


}
 800ef40:	bf00      	nop
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <CurrentSensor_Init>:

int32_t median5(int32_t *buf);


void CurrentSensor_Init()
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0

	memcpy(&mainCS, 0x00, sizeof(mainCS));
 800ef50:	4a12      	ldr	r2, [pc, #72]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef52:	2300      	movs	r3, #0
 800ef54:	4610      	mov	r0, r2
 800ef56:	4619      	mov	r1, r3
 800ef58:	2388      	movs	r3, #136	; 0x88
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	f002 febe 	bl	8011cdc <memcpy>

	mainCS.Init.CS_Type = CS_Type_3shunt;
 800ef60:	4b0e      	ldr	r3, [pc, #56]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef62:	2200      	movs	r2, #0
 800ef64:	701a      	strb	r2, [r3, #0]
	mainCS.Init.Gain_currentSense = -10.0f; // 1 / ( R * OPAmpGain) [A / V]
 800ef66:	4b0d      	ldr	r3, [pc, #52]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef68:	4a0d      	ldr	r2, [pc, #52]	; (800efa0 <CurrentSensor_Init+0x54>)
 800ef6a:	615a      	str	r2, [r3, #20]
	mainCS.Init.V_Iu_offset = 1.710;
 800ef6c:	4b0b      	ldr	r3, [pc, #44]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef6e:	4a0d      	ldr	r2, [pc, #52]	; (800efa4 <CurrentSensor_Init+0x58>)
 800ef70:	619a      	str	r2, [r3, #24]
	mainCS.Init.V_Iv_offset = 1.683;
 800ef72:	4b0a      	ldr	r3, [pc, #40]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef74:	4a0c      	ldr	r2, [pc, #48]	; (800efa8 <CurrentSensor_Init+0x5c>)
 800ef76:	61da      	str	r2, [r3, #28]
	mainCS.Init.V_Iw_offset = 1.705;
 800ef78:	4b08      	ldr	r3, [pc, #32]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef7a:	4a0c      	ldr	r2, [pc, #48]	; (800efac <CurrentSensor_Init+0x60>)
 800ef7c:	621a      	str	r2, [r3, #32]
	mainCS.Init.hadc_Iu = &hadc1;
 800ef7e:	4b07      	ldr	r3, [pc, #28]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef80:	4a0b      	ldr	r2, [pc, #44]	; (800efb0 <CurrentSensor_Init+0x64>)
 800ef82:	605a      	str	r2, [r3, #4]
	mainCS.Init.hadc_Iv = &hadc2;
 800ef84:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef86:	4a0b      	ldr	r2, [pc, #44]	; (800efb4 <CurrentSensor_Init+0x68>)
 800ef88:	609a      	str	r2, [r3, #8]
	mainCS.Init.hadc_Iw = &hadc3;
 800ef8a:	4b04      	ldr	r3, [pc, #16]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef8c:	4a0a      	ldr	r2, [pc, #40]	; (800efb8 <CurrentSensor_Init+0x6c>)
 800ef8e:	60da      	str	r2, [r3, #12]

	mainCS.pos_MEDF_I = 0;
 800ef90:	4b02      	ldr	r3, [pc, #8]	; (800ef9c <CurrentSensor_Init+0x50>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	631a      	str	r2, [r3, #48]	; 0x30

}
 800ef96:	bf00      	nop
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	200043d4 	.word	0x200043d4
 800efa0:	c1200000 	.word	0xc1200000
 800efa4:	3fdae148 	.word	0x3fdae148
 800efa8:	3fd76c8b 	.word	0x3fd76c8b
 800efac:	3fda3d71 	.word	0x3fda3d71
 800efb0:	20004530 	.word	0x20004530
 800efb4:	20004488 	.word	0x20004488
 800efb8:	20004578 	.word	0x20004578

0800efbc <CurrentSensor_Start>:


void CurrentSensor_Start(CurrentSensor_TypeDef *hCS)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]

	switch(hCS->Init.CS_Type)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d000      	beq.n	800efce <CurrentSensor_Start+0x12>
		break;
	}



}
 800efcc:	e018      	b.n	800f000 <CurrentSensor_Start+0x44>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iu, hCS->AD_Iu, 1);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6858      	ldr	r0, [r3, #4]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	3328      	adds	r3, #40	; 0x28
 800efd6:	2201      	movs	r2, #1
 800efd8:	4619      	mov	r1, r3
 800efda:	f7f9 ff75 	bl	8008ec8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iv, hCS->AD_Iv, 1);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6898      	ldr	r0, [r3, #8]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	332a      	adds	r3, #42	; 0x2a
 800efe6:	2201      	movs	r2, #1
 800efe8:	4619      	mov	r1, r3
 800efea:	f7f9 ff6d 	bl	8008ec8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iw, hCS->AD_Iw, 1);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68d8      	ldr	r0, [r3, #12]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	332c      	adds	r3, #44	; 0x2c
 800eff6:	2201      	movs	r2, #1
 800eff8:	4619      	mov	r1, r3
 800effa:	f7f9 ff65 	bl	8008ec8 <HAL_ADC_Start_DMA>
		break;
 800effe:	bf00      	nop
}
 800f000:	bf00      	nop
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <CurrentSensor_Refresh>:
/*
 * UVWの電流値を更新するだけ
 * 座標変換とかはやらない
 */
inline void CurrentSensor_Refresh(CurrentSensor_TypeDef *hCS, uint8_t SVM_sector)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	460b      	mov	r3, r1
 800f012:	70fb      	strb	r3, [r7, #3]
	static int32_t AD_Iv_MEDF = 0;
	static int32_t AD_Iw_MEDF = 0;

	static CurrentSensor_InitTypeDef *hCS_Init;

	hCS_Init = &hCS->Init;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4a98      	ldr	r2, [pc, #608]	; (800f278 <CurrentSensor_Refresh+0x270>)
 800f018:	6013      	str	r3, [r2, #0]

	switch(hCS->Init.CS_Type)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d000      	beq.n	800f024 <CurrentSensor_Refresh+0x1c>

		break; /* CS_Type_3shunt */


		default:
			break;
 800f022:	e124      	b.n	800f26e <CurrentSensor_Refresh+0x266>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iu, hCS->AD_Iu, 1);
 800f024:	4b94      	ldr	r3, [pc, #592]	; (800f278 <CurrentSensor_Refresh+0x270>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6858      	ldr	r0, [r3, #4]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	3328      	adds	r3, #40	; 0x28
 800f02e:	2201      	movs	r2, #1
 800f030:	4619      	mov	r1, r3
 800f032:	f7f9 ff49 	bl	8008ec8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iv, hCS->AD_Iv, 1);
 800f036:	4b90      	ldr	r3, [pc, #576]	; (800f278 <CurrentSensor_Refresh+0x270>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	6898      	ldr	r0, [r3, #8]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	332a      	adds	r3, #42	; 0x2a
 800f040:	2201      	movs	r2, #1
 800f042:	4619      	mov	r1, r3
 800f044:	f7f9 ff40 	bl	8008ec8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iw, hCS->AD_Iw, 1);
 800f048:	4b8b      	ldr	r3, [pc, #556]	; (800f278 <CurrentSensor_Refresh+0x270>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68d8      	ldr	r0, [r3, #12]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	332c      	adds	r3, #44	; 0x2c
 800f052:	2201      	movs	r2, #1
 800f054:	4619      	mov	r1, r3
 800f056:	f7f9 ff37 	bl	8008ec8 <HAL_ADC_Start_DMA>
		hCS->AD_Iu_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iu[0];
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f062:	4611      	mov	r1, r2
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	330c      	adds	r3, #12
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	4413      	add	r3, r2
 800f06c:	6059      	str	r1, [r3, #4]
		hCS->AD_Iv_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iv[0];
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	3212      	adds	r2, #18
 800f07a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hCS->AD_Iw_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iw[0];
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f086:	4611      	mov	r1, r2
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	3316      	adds	r3, #22
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4413      	add	r3, r2
 800f090:	6059      	str	r1, [r3, #4]
		hCS->pos_MEDF_I += 1;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f096:	1c5a      	adds	r2, r3, #1
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	631a      	str	r2, [r3, #48]	; 0x30
		if(hCS->pos_MEDF_I >= MEDIAN_ORDER)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a0:	2b04      	cmp	r3, #4
 800f0a2:	dd02      	ble.n	800f0aa <CurrentSensor_Refresh+0xa2>
			hCS->pos_MEDF_I = 0;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	631a      	str	r2, [r3, #48]	; 0x30
		AD_Iu_MEDF = median5(hCS->AD_Iu_buf);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	3334      	adds	r3, #52	; 0x34
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f000 f974 	bl	800f39c <median5>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	4b71      	ldr	r3, [pc, #452]	; (800f27c <CurrentSensor_Refresh+0x274>)
 800f0b8:	601a      	str	r2, [r3, #0]
		AD_Iv_MEDF = median5(hCS->AD_Iv_buf);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	3348      	adds	r3, #72	; 0x48
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 f96c 	bl	800f39c <median5>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	4b6e      	ldr	r3, [pc, #440]	; (800f280 <CurrentSensor_Refresh+0x278>)
 800f0c8:	601a      	str	r2, [r3, #0]
		AD_Iw_MEDF = median5(hCS->AD_Iw_buf);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	335c      	adds	r3, #92	; 0x5c
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 f964 	bl	800f39c <median5>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	4b6b      	ldr	r3, [pc, #428]	; (800f284 <CurrentSensor_Refresh+0x27c>)
 800f0d8:	601a      	str	r2, [r3, #0]
		hCS->V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iu_offset;
 800f0da:	4b68      	ldr	r3, [pc, #416]	; (800f27c <CurrentSensor_Refresh+0x274>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	ee07 3a90 	vmov	s15, r3
 800f0e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f0e6:	eddf 7a68 	vldr	s15, [pc, #416]	; 800f288 <CurrentSensor_Refresh+0x280>
 800f0ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0f2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800f28c <CurrentSensor_Refresh+0x284>
 800f0f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f0fa:	4b5f      	ldr	r3, [pc, #380]	; (800f278 <CurrentSensor_Refresh+0x270>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	edd3 7a06 	vldr	s15, [r3, #24]
 800f102:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		hCS->V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iv_offset;
 800f10c:	4b5c      	ldr	r3, [pc, #368]	; (800f280 <CurrentSensor_Refresh+0x278>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	ee07 3a90 	vmov	s15, r3
 800f114:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f118:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f288 <CurrentSensor_Refresh+0x280>
 800f11c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f124:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f28c <CurrentSensor_Refresh+0x284>
 800f128:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f12c:	4b52      	ldr	r3, [pc, #328]	; (800f278 <CurrentSensor_Refresh+0x270>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	edd3 7a07 	vldr	s15, [r3, #28]
 800f134:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
		hCS->V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iw_offset;
 800f13e:	4b51      	ldr	r3, [pc, #324]	; (800f284 <CurrentSensor_Refresh+0x27c>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	ee07 3a90 	vmov	s15, r3
 800f146:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f14a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800f288 <CurrentSensor_Refresh+0x280>
 800f14e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f156:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f28c <CurrentSensor_Refresh+0x284>
 800f15a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f15e:	4b46      	ldr	r3, [pc, #280]	; (800f278 <CurrentSensor_Refresh+0x270>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	edd3 7a08 	vldr	s15, [r3, #32]
 800f166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		switch(SVM_sector)
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	2b05      	cmp	r3, #5
 800f174:	d87a      	bhi.n	800f26c <CurrentSensor_Refresh+0x264>
 800f176:	a201      	add	r2, pc, #4	; (adr r2, 800f17c <CurrentSensor_Refresh+0x174>)
 800f178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f17c:	0800f195 	.word	0x0800f195
 800f180:	0800f1dd 	.word	0x0800f1dd
 800f184:	0800f1dd 	.word	0x0800f1dd
 800f188:	0800f225 	.word	0x0800f225
 800f18c:	0800f225 	.word	0x0800f225
 800f190:	0800f195 	.word	0x0800f195
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	edd3 7a05 	vldr	s15, [r3, #20]
 800f1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	edd3 7a05 	vldr	s15, [r3, #20]
 800f1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			hCS->Iu = - hCS->Iv - hCS->Iw;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800f1c6:	eeb1 7a67 	vneg.f32	s14, s15
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f1d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			break;
 800f1da:	e047      	b.n	800f26c <CurrentSensor_Refresh+0x264>
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	edd3 7a05 	vldr	s15, [r3, #20]
 800f1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	edd3 7a05 	vldr	s15, [r3, #20]
 800f1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			hCS->Iv = - hCS->Iw - hCS->Iu;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f20e:	eeb1 7a67 	vneg.f32	s14, s15
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800f218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
			break;
 800f222:	e023      	b.n	800f26c <CurrentSensor_Refresh+0x264>
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	edd3 7a05 	vldr	s15, [r3, #20]
 800f230:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	edd3 7a05 	vldr	s15, [r3, #20]
 800f246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
			hCS->Iw = - hCS->Iu - hCS->Iv;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800f256:	eeb1 7a67 	vneg.f32	s14, s15
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800f260:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 800f26a:	bf00      	nop
		break; /* CS_Type_3shunt */
 800f26c:	bf00      	nop
	}




}
 800f26e:	bf00      	nop
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	20000220 	.word	0x20000220
 800f27c:	20000224 	.word	0x20000224
 800f280:	20000228 	.word	0x20000228
 800f284:	2000022c 	.word	0x2000022c
 800f288:	00001000 	.word	0x00001000
 800f28c:	40533333 	.word	0x40533333

0800f290 <CurrentSensor_getIdq>:

/*
 * 回転座標系における電流を算出
 */
inline void CurrentSensor_getIdq(CurrentSensor_TypeDef *hCS, float *Id, float *Iq, float cos_theta_re, float sin_theta_re)
{
 800f290:	b480      	push	{r7}
 800f292:	b087      	sub	sp, #28
 800f294:	af00      	add	r7, sp, #0
 800f296:	6178      	str	r0, [r7, #20]
 800f298:	6139      	str	r1, [r7, #16]
 800f29a:	60fa      	str	r2, [r7, #12]
 800f29c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f2a0:	edc7 0a01 	vstr	s1, [r7, #4]

	*Id = 0.8165f * (
			+ hCS->Iu * cos_theta_re
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800f2aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2ae:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re)
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800f2b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2bc:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f2c0:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f2c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800f2c8:	eddf 5a32 	vldr	s11, [pc, #200]	; 800f394 <CurrentSensor_getIdq+0x104>
 800f2cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f2d0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f2d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2d8:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800f2e2:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2e6:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f2ea:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f2ee:	edd7 7a01 	vldr	s15, [r7, #4]
 800f2f2:	eddf 5a28 	vldr	s11, [pc, #160]	; 800f394 <CurrentSensor_getIdq+0x104>
 800f2f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f2fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f2fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f302:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Id = 0.8165f * (
 800f306:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800f398 <CurrentSensor_getIdq+0x108>
 800f30a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	edc3 7a00 	vstr	s15, [r3]

	*Iq = 0.8165f * (
			- hCS->Iu * sin_theta_re
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800f31a:	eeb1 7a67 	vneg.f32	s14, s15
 800f31e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f322:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re)
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800f32c:	edd7 7a01 	vldr	s15, [r7, #4]
 800f330:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f334:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f338:	edd7 7a02 	vldr	s15, [r7, #8]
 800f33c:	eddf 5a15 	vldr	s11, [pc, #84]	; 800f394 <CurrentSensor_getIdq+0x104>
 800f340:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f344:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f34c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 800f356:	edd7 7a01 	vldr	s15, [r7, #4]
 800f35a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f35e:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f362:	edd7 7a02 	vldr	s15, [r7, #8]
 800f366:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800f394 <CurrentSensor_getIdq+0x104>
 800f36a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f36e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f376:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Iq = 0.8165f * (
 800f37a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f398 <CurrentSensor_getIdq+0x108>
 800f37e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	edc3 7a00 	vstr	s15, [r3]

}
 800f388:	bf00      	nop
 800f38a:	371c      	adds	r7, #28
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr
 800f394:	3f5ae148 	.word	0x3f5ae148
 800f398:	3f510625 	.word	0x3f510625

0800f39c <median5>:
	return 0;
}


inline int32_t median5(int32_t *buf)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
	static uint32_t winCount[5] = {0};

	winCount[0] = 0;
 800f3a4:	4b76      	ldr	r3, [pc, #472]	; (800f580 <median5+0x1e4>)
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	601a      	str	r2, [r3, #0]
	winCount[1] = 0;
 800f3aa:	4b75      	ldr	r3, [pc, #468]	; (800f580 <median5+0x1e4>)
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	605a      	str	r2, [r3, #4]
	winCount[2] = 0;
 800f3b0:	4b73      	ldr	r3, [pc, #460]	; (800f580 <median5+0x1e4>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	609a      	str	r2, [r3, #8]
	winCount[3] = 0;
 800f3b6:	4b72      	ldr	r3, [pc, #456]	; (800f580 <median5+0x1e4>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	60da      	str	r2, [r3, #12]
	winCount[4] = 0;
 800f3bc:	4b70      	ldr	r3, [pc, #448]	; (800f580 <median5+0x1e4>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	611a      	str	r2, [r3, #16]

	if (buf[0] > buf[1]) winCount[0]++; else winCount[1]++;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	dd05      	ble.n	800f3dc <median5+0x40>
 800f3d0:	4b6b      	ldr	r3, [pc, #428]	; (800f580 <median5+0x1e4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	4a6a      	ldr	r2, [pc, #424]	; (800f580 <median5+0x1e4>)
 800f3d8:	6013      	str	r3, [r2, #0]
 800f3da:	e004      	b.n	800f3e6 <median5+0x4a>
 800f3dc:	4b68      	ldr	r3, [pc, #416]	; (800f580 <median5+0x1e4>)
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	4a67      	ldr	r2, [pc, #412]	; (800f580 <median5+0x1e4>)
 800f3e4:	6053      	str	r3, [r2, #4]
	if (buf[0] > buf[2]) winCount[0]++; else winCount[2]++;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	dd05      	ble.n	800f400 <median5+0x64>
 800f3f4:	4b62      	ldr	r3, [pc, #392]	; (800f580 <median5+0x1e4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	4a61      	ldr	r2, [pc, #388]	; (800f580 <median5+0x1e4>)
 800f3fc:	6013      	str	r3, [r2, #0]
 800f3fe:	e004      	b.n	800f40a <median5+0x6e>
 800f400:	4b5f      	ldr	r3, [pc, #380]	; (800f580 <median5+0x1e4>)
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	3301      	adds	r3, #1
 800f406:	4a5e      	ldr	r2, [pc, #376]	; (800f580 <median5+0x1e4>)
 800f408:	6093      	str	r3, [r2, #8]
	if (buf[0] > buf[3]) winCount[0]++; else winCount[3]++;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	330c      	adds	r3, #12
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	429a      	cmp	r2, r3
 800f416:	dd05      	ble.n	800f424 <median5+0x88>
 800f418:	4b59      	ldr	r3, [pc, #356]	; (800f580 <median5+0x1e4>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	3301      	adds	r3, #1
 800f41e:	4a58      	ldr	r2, [pc, #352]	; (800f580 <median5+0x1e4>)
 800f420:	6013      	str	r3, [r2, #0]
 800f422:	e004      	b.n	800f42e <median5+0x92>
 800f424:	4b56      	ldr	r3, [pc, #344]	; (800f580 <median5+0x1e4>)
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	3301      	adds	r3, #1
 800f42a:	4a55      	ldr	r2, [pc, #340]	; (800f580 <median5+0x1e4>)
 800f42c:	60d3      	str	r3, [r2, #12]
	if (buf[0] > buf[4]) winCount[0]++; else winCount[4]++;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3310      	adds	r3, #16
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	429a      	cmp	r2, r3
 800f43a:	dd05      	ble.n	800f448 <median5+0xac>
 800f43c:	4b50      	ldr	r3, [pc, #320]	; (800f580 <median5+0x1e4>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3301      	adds	r3, #1
 800f442:	4a4f      	ldr	r2, [pc, #316]	; (800f580 <median5+0x1e4>)
 800f444:	6013      	str	r3, [r2, #0]
 800f446:	e004      	b.n	800f452 <median5+0xb6>
 800f448:	4b4d      	ldr	r3, [pc, #308]	; (800f580 <median5+0x1e4>)
 800f44a:	691b      	ldr	r3, [r3, #16]
 800f44c:	3301      	adds	r3, #1
 800f44e:	4a4c      	ldr	r2, [pc, #304]	; (800f580 <median5+0x1e4>)
 800f450:	6113      	str	r3, [r2, #16]

	if (winCount[0] == 2) return buf[0];
 800f452:	4b4b      	ldr	r3, [pc, #300]	; (800f580 <median5+0x1e4>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b02      	cmp	r3, #2
 800f458:	d102      	bne.n	800f460 <median5+0xc4>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	e088      	b.n	800f572 <median5+0x1d6>

	if (buf[1] > buf[2]) winCount[1]++; else winCount[2]++;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	3304      	adds	r3, #4
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	3308      	adds	r3, #8
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	dd05      	ble.n	800f47c <median5+0xe0>
 800f470:	4b43      	ldr	r3, [pc, #268]	; (800f580 <median5+0x1e4>)
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	3301      	adds	r3, #1
 800f476:	4a42      	ldr	r2, [pc, #264]	; (800f580 <median5+0x1e4>)
 800f478:	6053      	str	r3, [r2, #4]
 800f47a:	e004      	b.n	800f486 <median5+0xea>
 800f47c:	4b40      	ldr	r3, [pc, #256]	; (800f580 <median5+0x1e4>)
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	3301      	adds	r3, #1
 800f482:	4a3f      	ldr	r2, [pc, #252]	; (800f580 <median5+0x1e4>)
 800f484:	6093      	str	r3, [r2, #8]
	if (buf[1] > buf[3]) winCount[1]++; else winCount[3]++;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	3304      	adds	r3, #4
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	330c      	adds	r3, #12
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	429a      	cmp	r2, r3
 800f494:	dd05      	ble.n	800f4a2 <median5+0x106>
 800f496:	4b3a      	ldr	r3, [pc, #232]	; (800f580 <median5+0x1e4>)
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	3301      	adds	r3, #1
 800f49c:	4a38      	ldr	r2, [pc, #224]	; (800f580 <median5+0x1e4>)
 800f49e:	6053      	str	r3, [r2, #4]
 800f4a0:	e004      	b.n	800f4ac <median5+0x110>
 800f4a2:	4b37      	ldr	r3, [pc, #220]	; (800f580 <median5+0x1e4>)
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	4a35      	ldr	r2, [pc, #212]	; (800f580 <median5+0x1e4>)
 800f4aa:	60d3      	str	r3, [r2, #12]
	if (buf[1] > buf[4]) winCount[1]++; else winCount[4]++;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	3310      	adds	r3, #16
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	dd05      	ble.n	800f4c8 <median5+0x12c>
 800f4bc:	4b30      	ldr	r3, [pc, #192]	; (800f580 <median5+0x1e4>)
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	4a2f      	ldr	r2, [pc, #188]	; (800f580 <median5+0x1e4>)
 800f4c4:	6053      	str	r3, [r2, #4]
 800f4c6:	e004      	b.n	800f4d2 <median5+0x136>
 800f4c8:	4b2d      	ldr	r3, [pc, #180]	; (800f580 <median5+0x1e4>)
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	4a2c      	ldr	r2, [pc, #176]	; (800f580 <median5+0x1e4>)
 800f4d0:	6113      	str	r3, [r2, #16]

	if (winCount[1] == 2) return buf[1];
 800f4d2:	4b2b      	ldr	r3, [pc, #172]	; (800f580 <median5+0x1e4>)
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d102      	bne.n	800f4e0 <median5+0x144>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	e048      	b.n	800f572 <median5+0x1d6>

	if (buf[2] > buf[3]) winCount[2]++; else winCount[3]++;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	3308      	adds	r3, #8
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	330c      	adds	r3, #12
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	dd05      	ble.n	800f4fc <median5+0x160>
 800f4f0:	4b23      	ldr	r3, [pc, #140]	; (800f580 <median5+0x1e4>)
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	4a22      	ldr	r2, [pc, #136]	; (800f580 <median5+0x1e4>)
 800f4f8:	6093      	str	r3, [r2, #8]
 800f4fa:	e004      	b.n	800f506 <median5+0x16a>
 800f4fc:	4b20      	ldr	r3, [pc, #128]	; (800f580 <median5+0x1e4>)
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	3301      	adds	r3, #1
 800f502:	4a1f      	ldr	r2, [pc, #124]	; (800f580 <median5+0x1e4>)
 800f504:	60d3      	str	r3, [r2, #12]
	if (buf[2] > buf[4]) winCount[2]++; else winCount[4]++;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	3308      	adds	r3, #8
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	3310      	adds	r3, #16
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	429a      	cmp	r2, r3
 800f514:	dd05      	ble.n	800f522 <median5+0x186>
 800f516:	4b1a      	ldr	r3, [pc, #104]	; (800f580 <median5+0x1e4>)
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	3301      	adds	r3, #1
 800f51c:	4a18      	ldr	r2, [pc, #96]	; (800f580 <median5+0x1e4>)
 800f51e:	6093      	str	r3, [r2, #8]
 800f520:	e004      	b.n	800f52c <median5+0x190>
 800f522:	4b17      	ldr	r3, [pc, #92]	; (800f580 <median5+0x1e4>)
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	3301      	adds	r3, #1
 800f528:	4a15      	ldr	r2, [pc, #84]	; (800f580 <median5+0x1e4>)
 800f52a:	6113      	str	r3, [r2, #16]

	if (winCount[2] == 2) return buf[2];
 800f52c:	4b14      	ldr	r3, [pc, #80]	; (800f580 <median5+0x1e4>)
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	2b02      	cmp	r3, #2
 800f532:	d102      	bne.n	800f53a <median5+0x19e>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	e01b      	b.n	800f572 <median5+0x1d6>

	if (buf[3] > buf[4]) winCount[3]++; else winCount[4]++;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	330c      	adds	r3, #12
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3310      	adds	r3, #16
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	429a      	cmp	r2, r3
 800f548:	dd05      	ble.n	800f556 <median5+0x1ba>
 800f54a:	4b0d      	ldr	r3, [pc, #52]	; (800f580 <median5+0x1e4>)
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	3301      	adds	r3, #1
 800f550:	4a0b      	ldr	r2, [pc, #44]	; (800f580 <median5+0x1e4>)
 800f552:	60d3      	str	r3, [r2, #12]
 800f554:	e004      	b.n	800f560 <median5+0x1c4>
 800f556:	4b0a      	ldr	r3, [pc, #40]	; (800f580 <median5+0x1e4>)
 800f558:	691b      	ldr	r3, [r3, #16]
 800f55a:	3301      	adds	r3, #1
 800f55c:	4a08      	ldr	r2, [pc, #32]	; (800f580 <median5+0x1e4>)
 800f55e:	6113      	str	r3, [r2, #16]

	if (winCount[3] == 2) return buf[3];
 800f560:	4b07      	ldr	r3, [pc, #28]	; (800f580 <median5+0x1e4>)
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	2b02      	cmp	r3, #2
 800f566:	d102      	bne.n	800f56e <median5+0x1d2>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	e001      	b.n	800f572 <median5+0x1d6>

	return buf[4];
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	691b      	ldr	r3, [r3, #16]

}
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	20000230 	.word	0x20000230

0800f584 <DRV_Init>:
DRV_TypeDef drv8323;



void DRV_Init()
{
 800f584:	b480      	push	{r7}
 800f586:	af00      	add	r7, sp, #0

	drv8323.NSS_GPIOx = SPI3_NSS_GPIO_Port;
 800f588:	4b07      	ldr	r3, [pc, #28]	; (800f5a8 <DRV_Init+0x24>)
 800f58a:	4a08      	ldr	r2, [pc, #32]	; (800f5ac <DRV_Init+0x28>)
 800f58c:	621a      	str	r2, [r3, #32]
	drv8323.NSS_GPIO_Pin = SPI3_NSS_Pin;
 800f58e:	4b06      	ldr	r3, [pc, #24]	; (800f5a8 <DRV_Init+0x24>)
 800f590:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f594:	849a      	strh	r2, [r3, #36]	; 0x24
	drv8323.hspi = &hspi3;
 800f596:	4b04      	ldr	r3, [pc, #16]	; (800f5a8 <DRV_Init+0x24>)
 800f598:	4a05      	ldr	r2, [pc, #20]	; (800f5b0 <DRV_Init+0x2c>)
 800f59a:	61da      	str	r2, [r3, #28]



}
 800f59c:	bf00      	nop
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	2000445c 	.word	0x2000445c
 800f5ac:	40020000 	.word	0x40020000
 800f5b0:	20004798 	.word	0x20004798

0800f5b4 <DRV_WriteData>:


void DRV_WriteData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af02      	add	r7, sp, #8
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	460b      	mov	r3, r1
 800f5be:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = (addr << 3) | (hdrv->Reg.words[addr] >> 8);
 800f5c0:	78fb      	ldrb	r3, [r7, #3]
 800f5c2:	00db      	lsls	r3, r3, #3
 800f5c4:	b2da      	uxtb	r2, r3
 800f5c6:	78f9      	ldrb	r1, [r7, #3]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5ce:	0a1b      	lsrs	r3, r3, #8
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	b2da      	uxtb	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = hdrv->Reg.words[addr] & 0xff;
 800f5dc:	78fa      	ldrb	r2, [r7, #3]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e4:	b2da      	uxtb	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6a18      	ldr	r0, [r3, #32]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	f7fb fec2 	bl	800b380 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	69d8      	ldr	r0, [r3, #28]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f60c:	2301      	movs	r3, #1
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	2302      	movs	r3, #2
 800f612:	f7fc fc43 	bl	800be9c <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a18      	ldr	r0, [r3, #32]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f61e:	2201      	movs	r2, #1
 800f620:	4619      	mov	r1, r3
 800f622:	f7fb fead 	bl	800b380 <HAL_GPIO_WritePin>

}
 800f626:	bf00      	nop
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}

0800f62e <DRV_ReadData>:



void DRV_ReadData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800f62e:	b580      	push	{r7, lr}
 800f630:	b084      	sub	sp, #16
 800f632:	af02      	add	r7, sp, #8
 800f634:	6078      	str	r0, [r7, #4]
 800f636:	460b      	mov	r3, r1
 800f638:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = 0x80 | (addr << 3);
 800f63a:	78fb      	ldrb	r3, [r7, #3]
 800f63c:	00db      	lsls	r3, r3, #3
 800f63e:	b25b      	sxtb	r3, r3
 800f640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f644:	b25b      	sxtb	r3, r3
 800f646:	b2da      	uxtb	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = 0x00;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a18      	ldr	r0, [r3, #32]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f65e:	2200      	movs	r2, #0
 800f660:	4619      	mov	r1, r3
 800f662:	f7fb fe8d 	bl	800b380 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	69d8      	ldr	r0, [r3, #28]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f676:	2301      	movs	r3, #1
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	2302      	movs	r3, #2
 800f67c:	f7fc fc0e 	bl	800be9c <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6a18      	ldr	r0, [r3, #32]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f688:	2201      	movs	r2, #1
 800f68a:	4619      	mov	r1, r3
 800f68c:	f7fb fe78 	bl	800b380 <HAL_GPIO_WritePin>

	hdrv->Reg.words[addr] = (hdrv->rxBuf[0] << 8) | hdrv->rxBuf[1];
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f696:	021b      	lsls	r3, r3, #8
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	78fa      	ldrb	r2, [r7, #3]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800f6aa:	bf00      	nop
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
	...

0800f6b4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f6ba:	463b      	mov	r3, r7
 800f6bc:	2200      	movs	r2, #0
 800f6be:	601a      	str	r2, [r3, #0]
 800f6c0:	605a      	str	r2, [r3, #4]
 800f6c2:	609a      	str	r2, [r3, #8]
 800f6c4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800f6c6:	4b22      	ldr	r3, [pc, #136]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6c8:	4a22      	ldr	r2, [pc, #136]	; (800f754 <MX_ADC1_Init+0xa0>)
 800f6ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f6cc:	4b20      	ldr	r3, [pc, #128]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f6d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f6d4:	4b1e      	ldr	r3, [pc, #120]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800f6da:	4b1d      	ldr	r3, [pc, #116]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800f6e0:	4b1b      	ldr	r3, [pc, #108]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f6e6:	4b1a      	ldr	r3, [pc, #104]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f6ee:	4b18      	ldr	r3, [pc, #96]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f6f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f6f6:	4b16      	ldr	r3, [pc, #88]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f6f8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f6fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f6fe:	4b14      	ldr	r3, [pc, #80]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f700:	2200      	movs	r2, #0
 800f702:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800f704:	4b12      	ldr	r3, [pc, #72]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f706:	2201      	movs	r2, #1
 800f708:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f70a:	4b11      	ldr	r3, [pc, #68]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f70c:	2201      	movs	r2, #1
 800f70e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f712:	4b0f      	ldr	r3, [pc, #60]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f714:	2201      	movs	r2, #1
 800f716:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f718:	480d      	ldr	r0, [pc, #52]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f71a:	f7f9 fb91 	bl	8008e40 <HAL_ADC_Init>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800f724:	f001 fa54 	bl	8010bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800f728:	2300      	movs	r3, #0
 800f72a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f72c:	2301      	movs	r3, #1
 800f72e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f730:	2301      	movs	r3, #1
 800f732:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f734:	463b      	mov	r3, r7
 800f736:	4619      	mov	r1, r3
 800f738:	4805      	ldr	r0, [pc, #20]	; (800f750 <MX_ADC1_Init+0x9c>)
 800f73a:	f7f9 fcd5 	bl	80090e8 <HAL_ADC_ConfigChannel>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d001      	beq.n	800f748 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800f744:	f001 fa44 	bl	8010bd0 <Error_Handler>
  }

}
 800f748:	bf00      	nop
 800f74a:	3710      	adds	r7, #16
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	20004530 	.word	0x20004530
 800f754:	40012000 	.word	0x40012000

0800f758 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f75e:	463b      	mov	r3, r7
 800f760:	2200      	movs	r2, #0
 800f762:	601a      	str	r2, [r3, #0]
 800f764:	605a      	str	r2, [r3, #4]
 800f766:	609a      	str	r2, [r3, #8]
 800f768:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800f76a:	4b22      	ldr	r3, [pc, #136]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f76c:	4a22      	ldr	r2, [pc, #136]	; (800f7f8 <MX_ADC2_Init+0xa0>)
 800f76e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f770:	4b20      	ldr	r3, [pc, #128]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f772:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f776:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f778:	4b1e      	ldr	r3, [pc, #120]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800f77e:	4b1d      	ldr	r3, [pc, #116]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f780:	2200      	movs	r2, #0
 800f782:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800f784:	4b1b      	ldr	r3, [pc, #108]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f786:	2200      	movs	r2, #0
 800f788:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f78a:	4b1a      	ldr	r3, [pc, #104]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f792:	4b18      	ldr	r3, [pc, #96]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f794:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f798:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f79a:	4b16      	ldr	r3, [pc, #88]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f79c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f7a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f7a2:	4b14      	ldr	r3, [pc, #80]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800f7a8:	4b12      	ldr	r3, [pc, #72]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800f7ae:	4b11      	ldr	r3, [pc, #68]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f7b6:	4b0f      	ldr	r3, [pc, #60]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f7bc:	480d      	ldr	r0, [pc, #52]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f7be:	f7f9 fb3f 	bl	8008e40 <HAL_ADC_Init>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800f7c8:	f001 fa02 	bl	8010bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800f7cc:	2304      	movs	r3, #4
 800f7ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f7d8:	463b      	mov	r3, r7
 800f7da:	4619      	mov	r1, r3
 800f7dc:	4805      	ldr	r0, [pc, #20]	; (800f7f4 <MX_ADC2_Init+0x9c>)
 800f7de:	f7f9 fc83 	bl	80090e8 <HAL_ADC_ConfigChannel>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d001      	beq.n	800f7ec <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800f7e8:	f001 f9f2 	bl	8010bd0 <Error_Handler>
  }

}
 800f7ec:	bf00      	nop
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	20004488 	.word	0x20004488
 800f7f8:	40012100 	.word	0x40012100

0800f7fc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f802:	463b      	mov	r3, r7
 800f804:	2200      	movs	r2, #0
 800f806:	601a      	str	r2, [r3, #0]
 800f808:	605a      	str	r2, [r3, #4]
 800f80a:	609a      	str	r2, [r3, #8]
 800f80c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800f80e:	4b22      	ldr	r3, [pc, #136]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f810:	4a22      	ldr	r2, [pc, #136]	; (800f89c <MX_ADC3_Init+0xa0>)
 800f812:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f814:	4b20      	ldr	r3, [pc, #128]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f816:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f81a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800f81c:	4b1e      	ldr	r3, [pc, #120]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f81e:	2200      	movs	r2, #0
 800f820:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800f822:	4b1d      	ldr	r3, [pc, #116]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f824:	2200      	movs	r2, #0
 800f826:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800f828:	4b1b      	ldr	r3, [pc, #108]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800f82e:	4b1a      	ldr	r3, [pc, #104]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f830:	2200      	movs	r2, #0
 800f832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f836:	4b18      	ldr	r3, [pc, #96]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f838:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f83c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f83e:	4b16      	ldr	r3, [pc, #88]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f840:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f846:	4b14      	ldr	r3, [pc, #80]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f848:	2200      	movs	r2, #0
 800f84a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800f84c:	4b12      	ldr	r3, [pc, #72]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f84e:	2201      	movs	r2, #1
 800f850:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800f852:	4b11      	ldr	r3, [pc, #68]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f854:	2201      	movs	r2, #1
 800f856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f85a:	4b0f      	ldr	r3, [pc, #60]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f85c:	2201      	movs	r2, #1
 800f85e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f860:	480d      	ldr	r0, [pc, #52]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f862:	f7f9 faed 	bl	8008e40 <HAL_ADC_Init>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800f86c:	f001 f9b0 	bl	8010bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800f870:	2301      	movs	r3, #1
 800f872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f874:	2301      	movs	r3, #1
 800f876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f878:	2301      	movs	r3, #1
 800f87a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f87c:	463b      	mov	r3, r7
 800f87e:	4619      	mov	r1, r3
 800f880:	4805      	ldr	r0, [pc, #20]	; (800f898 <MX_ADC3_Init+0x9c>)
 800f882:	f7f9 fc31 	bl	80090e8 <HAL_ADC_ConfigChannel>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800f88c:	f001 f9a0 	bl	8010bd0 <Error_Handler>
  }

}
 800f890:	bf00      	nop
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	20004578 	.word	0x20004578
 800f89c:	40012200 	.word	0x40012200

0800f8a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b08e      	sub	sp, #56	; 0x38
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	601a      	str	r2, [r3, #0]
 800f8b0:	605a      	str	r2, [r3, #4]
 800f8b2:	609a      	str	r2, [r3, #8]
 800f8b4:	60da      	str	r2, [r3, #12]
 800f8b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a9b      	ldr	r2, [pc, #620]	; (800fb2c <HAL_ADC_MspInit+0x28c>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d172      	bne.n	800f9a8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	623b      	str	r3, [r7, #32]
 800f8c6:	4b9a      	ldr	r3, [pc, #616]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ca:	4a99      	ldr	r2, [pc, #612]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f8cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8d0:	6453      	str	r3, [r2, #68]	; 0x44
 800f8d2:	4b97      	ldr	r3, [pc, #604]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8da:	623b      	str	r3, [r7, #32]
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f8de:	2300      	movs	r3, #0
 800f8e0:	61fb      	str	r3, [r7, #28]
 800f8e2:	4b93      	ldr	r3, [pc, #588]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e6:	4a92      	ldr	r2, [pc, #584]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f8e8:	f043 0304 	orr.w	r3, r3, #4
 800f8ec:	6313      	str	r3, [r2, #48]	; 0x30
 800f8ee:	4b90      	ldr	r3, [pc, #576]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f2:	f003 0304 	and.w	r3, r3, #4
 800f8f6:	61fb      	str	r3, [r7, #28]
 800f8f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	61bb      	str	r3, [r7, #24]
 800f8fe:	4b8c      	ldr	r3, [pc, #560]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f902:	4a8b      	ldr	r2, [pc, #556]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f904:	f043 0301 	orr.w	r3, r3, #1
 800f908:	6313      	str	r3, [r2, #48]	; 0x30
 800f90a:	4b89      	ldr	r3, [pc, #548]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90e:	f003 0301 	and.w	r3, r3, #1
 800f912:	61bb      	str	r3, [r7, #24]
 800f914:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f916:	2301      	movs	r3, #1
 800f918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f91a:	2303      	movs	r3, #3
 800f91c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f91e:	2300      	movs	r3, #0
 800f920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f926:	4619      	mov	r1, r3
 800f928:	4882      	ldr	r0, [pc, #520]	; (800fb34 <HAL_ADC_MspInit+0x294>)
 800f92a:	f7fb fb7f 	bl	800b02c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f92e:	2301      	movs	r3, #1
 800f930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f932:	2303      	movs	r3, #3
 800f934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f936:	2300      	movs	r3, #0
 800f938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f93a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f93e:	4619      	mov	r1, r3
 800f940:	487d      	ldr	r0, [pc, #500]	; (800fb38 <HAL_ADC_MspInit+0x298>)
 800f942:	f7fb fb73 	bl	800b02c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f946:	4b7d      	ldr	r3, [pc, #500]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f948:	4a7d      	ldr	r2, [pc, #500]	; (800fb40 <HAL_ADC_MspInit+0x2a0>)
 800f94a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f94c:	4b7b      	ldr	r3, [pc, #492]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f94e:	2200      	movs	r2, #0
 800f950:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f952:	4b7a      	ldr	r3, [pc, #488]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f954:	2200      	movs	r2, #0
 800f956:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f958:	4b78      	ldr	r3, [pc, #480]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f95e:	4b77      	ldr	r3, [pc, #476]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f964:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f966:	4b75      	ldr	r3, [pc, #468]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f96c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f96e:	4b73      	ldr	r3, [pc, #460]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f970:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f974:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f976:	4b71      	ldr	r3, [pc, #452]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f978:	2200      	movs	r2, #0
 800f97a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800f97c:	4b6f      	ldr	r3, [pc, #444]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f97e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f982:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f984:	4b6d      	ldr	r3, [pc, #436]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f986:	2200      	movs	r2, #0
 800f988:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f98a:	486c      	ldr	r0, [pc, #432]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f98c:	f7fa fcd2 	bl	800a334 <HAL_DMA_Init>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d001      	beq.n	800f99a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800f996:	f001 f91b 	bl	8010bd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4a67      	ldr	r2, [pc, #412]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f99e:	639a      	str	r2, [r3, #56]	; 0x38
 800f9a0:	4a66      	ldr	r2, [pc, #408]	; (800fb3c <HAL_ADC_MspInit+0x29c>)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800f9a6:	e0bc      	b.n	800fb22 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a65      	ldr	r2, [pc, #404]	; (800fb44 <HAL_ADC_MspInit+0x2a4>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d159      	bne.n	800fa66 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	617b      	str	r3, [r7, #20]
 800f9b6:	4b5e      	ldr	r3, [pc, #376]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ba:	4a5d      	ldr	r2, [pc, #372]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f9bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f9c0:	6453      	str	r3, [r2, #68]	; 0x44
 800f9c2:	4b5b      	ldr	r3, [pc, #364]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f9ca:	617b      	str	r3, [r7, #20]
 800f9cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	613b      	str	r3, [r7, #16]
 800f9d2:	4b57      	ldr	r3, [pc, #348]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9d6:	4a56      	ldr	r2, [pc, #344]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f9d8:	f043 0301 	orr.w	r3, r3, #1
 800f9dc:	6313      	str	r3, [r2, #48]	; 0x30
 800f9de:	4b54      	ldr	r3, [pc, #336]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800f9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e2:	f003 0301 	and.w	r3, r3, #1
 800f9e6:	613b      	str	r3, [r7, #16]
 800f9e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800f9ea:	2310      	movs	r3, #16
 800f9ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	484e      	ldr	r0, [pc, #312]	; (800fb38 <HAL_ADC_MspInit+0x298>)
 800f9fe:	f7fb fb15 	bl	800b02c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800fa02:	4b51      	ldr	r3, [pc, #324]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa04:	4a51      	ldr	r2, [pc, #324]	; (800fb4c <HAL_ADC_MspInit+0x2ac>)
 800fa06:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800fa08:	4b4f      	ldr	r3, [pc, #316]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800fa0e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fa10:	4b4d      	ldr	r3, [pc, #308]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800fa16:	4b4c      	ldr	r3, [pc, #304]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800fa1c:	4b4a      	ldr	r3, [pc, #296]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa22:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fa24:	4b48      	ldr	r3, [pc, #288]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa2a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fa2c:	4b46      	ldr	r3, [pc, #280]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fa32:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800fa34:	4b44      	ldr	r3, [pc, #272]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800fa3a:	4b43      	ldr	r3, [pc, #268]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fa40:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fa42:	4b41      	ldr	r3, [pc, #260]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa44:	2200      	movs	r2, #0
 800fa46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800fa48:	483f      	ldr	r0, [pc, #252]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa4a:	f7fa fc73 	bl	800a334 <HAL_DMA_Init>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d001      	beq.n	800fa58 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800fa54:	f001 f8bc 	bl	8010bd0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a3b      	ldr	r2, [pc, #236]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa5c:	639a      	str	r2, [r3, #56]	; 0x38
 800fa5e:	4a3a      	ldr	r2, [pc, #232]	; (800fb48 <HAL_ADC_MspInit+0x2a8>)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fa64:	e05d      	b.n	800fb22 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a39      	ldr	r2, [pc, #228]	; (800fb50 <HAL_ADC_MspInit+0x2b0>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d158      	bne.n	800fb22 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800fa70:	2300      	movs	r3, #0
 800fa72:	60fb      	str	r3, [r7, #12]
 800fa74:	4b2e      	ldr	r3, [pc, #184]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800fa76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa78:	4a2d      	ldr	r2, [pc, #180]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800fa7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fa7e:	6453      	str	r3, [r2, #68]	; 0x44
 800fa80:	4b2b      	ldr	r3, [pc, #172]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800fa82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa88:	60fb      	str	r3, [r7, #12]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	60bb      	str	r3, [r7, #8]
 800fa90:	4b27      	ldr	r3, [pc, #156]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800fa92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa94:	4a26      	ldr	r2, [pc, #152]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800fa96:	f043 0301 	orr.w	r3, r3, #1
 800fa9a:	6313      	str	r3, [r2, #48]	; 0x30
 800fa9c:	4b24      	ldr	r3, [pc, #144]	; (800fb30 <HAL_ADC_MspInit+0x290>)
 800fa9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa0:	f003 0301 	and.w	r3, r3, #1
 800faa4:	60bb      	str	r3, [r7, #8]
 800faa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800faa8:	2302      	movs	r3, #2
 800faaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800faac:	2303      	movs	r3, #3
 800faae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fab0:	2300      	movs	r3, #0
 800fab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fab8:	4619      	mov	r1, r3
 800faba:	481f      	ldr	r0, [pc, #124]	; (800fb38 <HAL_ADC_MspInit+0x298>)
 800fabc:	f7fb fab6 	bl	800b02c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800fac0:	4b24      	ldr	r3, [pc, #144]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fac2:	4a25      	ldr	r2, [pc, #148]	; (800fb58 <HAL_ADC_MspInit+0x2b8>)
 800fac4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800fac6:	4b23      	ldr	r3, [pc, #140]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fac8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800facc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800face:	4b21      	ldr	r3, [pc, #132]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fad0:	2200      	movs	r2, #0
 800fad2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800fad4:	4b1f      	ldr	r3, [pc, #124]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800fada:	4b1e      	ldr	r3, [pc, #120]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fadc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fae0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fae2:	4b1c      	ldr	r3, [pc, #112]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fae8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800faea:	4b1a      	ldr	r3, [pc, #104]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800faec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800faf0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800faf2:	4b18      	ldr	r3, [pc, #96]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800faf8:	4b16      	ldr	r3, [pc, #88]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fafa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fafe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fb00:	4b14      	ldr	r3, [pc, #80]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fb02:	2200      	movs	r2, #0
 800fb04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800fb06:	4813      	ldr	r0, [pc, #76]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fb08:	f7fa fc14 	bl	800a334 <HAL_DMA_Init>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800fb12:	f001 f85d 	bl	8010bd0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4a0e      	ldr	r2, [pc, #56]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fb1a:	639a      	str	r2, [r3, #56]	; 0x38
 800fb1c:	4a0d      	ldr	r2, [pc, #52]	; (800fb54 <HAL_ADC_MspInit+0x2b4>)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fb22:	bf00      	nop
 800fb24:	3738      	adds	r7, #56	; 0x38
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	40012000 	.word	0x40012000
 800fb30:	40023800 	.word	0x40023800
 800fb34:	40020800 	.word	0x40020800
 800fb38:	40020000 	.word	0x40020000
 800fb3c:	200045c0 	.word	0x200045c0
 800fb40:	40026410 	.word	0x40026410
 800fb44:	40012100 	.word	0x40012100
 800fb48:	20004620 	.word	0x20004620
 800fb4c:	40026440 	.word	0x40026440
 800fb50:	40012200 	.word	0x40012200
 800fb54:	200044d0 	.word	0x200044d0
 800fb58:	40026428 	.word	0x40026428

0800fb5c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800fb60:	4b18      	ldr	r3, [pc, #96]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb62:	4a19      	ldr	r2, [pc, #100]	; (800fbc8 <MX_CAN1_Init+0x6c>)
 800fb64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800fb66:	4b17      	ldr	r3, [pc, #92]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb68:	2204      	movs	r2, #4
 800fb6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800fb6c:	4b15      	ldr	r3, [pc, #84]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800fb72:	4b14      	ldr	r3, [pc, #80]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fb78:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800fb7a:	4b12      	ldr	r3, [pc, #72]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb7c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800fb80:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800fb82:	4b10      	ldr	r3, [pc, #64]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fb88:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800fb8a:	4b0e      	ldr	r3, [pc, #56]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800fb90:	4b0c      	ldr	r3, [pc, #48]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800fb96:	4b0b      	ldr	r3, [pc, #44]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800fb9c:	4b09      	ldr	r3, [pc, #36]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800fba2:	4b08      	ldr	r3, [pc, #32]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800fba8:	4b06      	ldr	r3, [pc, #24]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800fbae:	4805      	ldr	r0, [pc, #20]	; (800fbc4 <MX_CAN1_Init+0x68>)
 800fbb0:	f7f9 fd4a 	bl	8009648 <HAL_CAN_Init>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800fbba:	f001 f809 	bl	8010bd0 <Error_Handler>
  }

}
 800fbbe:	bf00      	nop
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	200046cc 	.word	0x200046cc
 800fbc8:	40006400 	.word	0x40006400

0800fbcc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b08a      	sub	sp, #40	; 0x28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fbd4:	f107 0314 	add.w	r3, r7, #20
 800fbd8:	2200      	movs	r2, #0
 800fbda:	601a      	str	r2, [r3, #0]
 800fbdc:	605a      	str	r2, [r3, #4]
 800fbde:	609a      	str	r2, [r3, #8]
 800fbe0:	60da      	str	r2, [r3, #12]
 800fbe2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a21      	ldr	r2, [pc, #132]	; (800fc70 <HAL_CAN_MspInit+0xa4>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d13c      	bne.n	800fc68 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800fbee:	2300      	movs	r3, #0
 800fbf0:	613b      	str	r3, [r7, #16]
 800fbf2:	4b20      	ldr	r3, [pc, #128]	; (800fc74 <HAL_CAN_MspInit+0xa8>)
 800fbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf6:	4a1f      	ldr	r2, [pc, #124]	; (800fc74 <HAL_CAN_MspInit+0xa8>)
 800fbf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fbfc:	6413      	str	r3, [r2, #64]	; 0x40
 800fbfe:	4b1d      	ldr	r3, [pc, #116]	; (800fc74 <HAL_CAN_MspInit+0xa8>)
 800fc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc06:	613b      	str	r3, [r7, #16]
 800fc08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	60fb      	str	r3, [r7, #12]
 800fc0e:	4b19      	ldr	r3, [pc, #100]	; (800fc74 <HAL_CAN_MspInit+0xa8>)
 800fc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc12:	4a18      	ldr	r2, [pc, #96]	; (800fc74 <HAL_CAN_MspInit+0xa8>)
 800fc14:	f043 0301 	orr.w	r3, r3, #1
 800fc18:	6313      	str	r3, [r2, #48]	; 0x30
 800fc1a:	4b16      	ldr	r3, [pc, #88]	; (800fc74 <HAL_CAN_MspInit+0xa8>)
 800fc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fc26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fc2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc30:	2300      	movs	r3, #0
 800fc32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc34:	2303      	movs	r3, #3
 800fc36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800fc38:	2309      	movs	r3, #9
 800fc3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc3c:	f107 0314 	add.w	r3, r7, #20
 800fc40:	4619      	mov	r1, r3
 800fc42:	480d      	ldr	r0, [pc, #52]	; (800fc78 <HAL_CAN_MspInit+0xac>)
 800fc44:	f7fb f9f2 	bl	800b02c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	2013      	movs	r0, #19
 800fc4e:	f7fa fb3a 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800fc52:	2013      	movs	r0, #19
 800fc54:	f7fa fb53 	bl	800a2fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800fc58:	2200      	movs	r2, #0
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	2014      	movs	r0, #20
 800fc5e:	f7fa fb32 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800fc62:	2014      	movs	r0, #20
 800fc64:	f7fa fb4b 	bl	800a2fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800fc68:	bf00      	nop
 800fc6a:	3728      	adds	r7, #40	; 0x28
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	40006400 	.word	0x40006400
 800fc74:	40023800 	.word	0x40023800
 800fc78:	40020000 	.word	0x40020000

0800fc7c <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 800fc80:	f000 f84a 	bl	800fd18 <getChannel>
 800fc84:	4603      	mov	r3, r0
 800fc86:	461a      	mov	r2, r3
 800fc88:	4b20      	ldr	r3, [pc, #128]	; (800fd0c <CAN_Init+0x90>)
 800fc8a:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 800fc8c:	4b20      	ldr	r3, [pc, #128]	; (800fd10 <CAN_Init+0x94>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800fc92:	4b1f      	ldr	r3, [pc, #124]	; (800fd10 <CAN_Init+0x94>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800fc98:	4b1d      	ldr	r3, [pc, #116]	; (800fd10 <CAN_Init+0x94>)
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 800fc9e:	4b1b      	ldr	r3, [pc, #108]	; (800fd0c <CAN_Init+0x90>)
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	029b      	lsls	r3, r3, #10
 800fca4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4b19      	ldr	r3, [pc, #100]	; (800fd10 <CAN_Init+0x94>)
 800fcac:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800fcae:	4b18      	ldr	r3, [pc, #96]	; (800fd10 <CAN_Init+0x94>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 800fcb4:	4b16      	ldr	r3, [pc, #88]	; (800fd10 <CAN_Init+0x94>)
 800fcb6:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800fcba:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 800fcbc:	4b14      	ldr	r3, [pc, #80]	; (800fd10 <CAN_Init+0x94>)
 800fcbe:	2206      	movs	r2, #6
 800fcc0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800fcc2:	4b13      	ldr	r3, [pc, #76]	; (800fd10 <CAN_Init+0x94>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800fcc8:	4b11      	ldr	r3, [pc, #68]	; (800fd10 <CAN_Init+0x94>)
 800fcca:	2201      	movs	r2, #1
 800fccc:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800fcce:	4b10      	ldr	r3, [pc, #64]	; (800fd10 <CAN_Init+0x94>)
 800fcd0:	220e      	movs	r2, #14
 800fcd2:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800fcd4:	490e      	ldr	r1, [pc, #56]	; (800fd10 <CAN_Init+0x94>)
 800fcd6:	480f      	ldr	r0, [pc, #60]	; (800fd14 <CAN_Init+0x98>)
 800fcd8:	f7f9 fdb2 	bl	8009840 <HAL_CAN_ConfigFilter>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d001      	beq.n	800fce6 <CAN_Init+0x6a>
	{
	  Error_Handler();
 800fce2:	f000 ff75 	bl	8010bd0 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800fce6:	480b      	ldr	r0, [pc, #44]	; (800fd14 <CAN_Init+0x98>)
 800fce8:	f7f9 fe8a 	bl	8009a00 <HAL_CAN_Start>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <CAN_Init+0x7a>
	{
	  Error_Handler();
 800fcf2:	f000 ff6d 	bl	8010bd0 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800fcf6:	2103      	movs	r1, #3
 800fcf8:	4806      	ldr	r0, [pc, #24]	; (800fd14 <CAN_Init+0x98>)
 800fcfa:	f7f9 ffd8 	bl	8009cae <HAL_CAN_ActivateNotification>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <CAN_Init+0x8c>
	{
	  Error_Handler();
 800fd04:	f000 ff64 	bl	8010bd0 <Error_Handler>
	}


}
 800fd08:	bf00      	nop
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	20000244 	.word	0x20000244
 800fd10:	20004680 	.word	0x20004680
 800fd14:	200046cc 	.word	0x200046cc

0800fd18 <getChannel>:


uint8_t getChannel()
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800fd22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fd26:	481b      	ldr	r0, [pc, #108]	; (800fd94 <getChannel+0x7c>)
 800fd28:	f7fb fb12 	bl	800b350 <HAL_GPIO_ReadPin>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	bf0c      	ite	eq
 800fd32:	2301      	moveq	r3, #1
 800fd34:	2300      	movne	r3, #0
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	b25a      	sxtb	r2, r3
 800fd3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	b25b      	sxtb	r3, r3
 800fd42:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800fd44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd48:	4812      	ldr	r0, [pc, #72]	; (800fd94 <getChannel+0x7c>)
 800fd4a:	f7fb fb01 	bl	800b350 <HAL_GPIO_ReadPin>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d101      	bne.n	800fd58 <getChannel+0x40>
 800fd54:	2302      	movs	r3, #2
 800fd56:	e000      	b.n	800fd5a <getChannel+0x42>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	b25a      	sxtb	r2, r3
 800fd5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	b25b      	sxtb	r3, r3
 800fd64:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800fd66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fd6a:	480a      	ldr	r0, [pc, #40]	; (800fd94 <getChannel+0x7c>)
 800fd6c:	f7fb faf0 	bl	800b350 <HAL_GPIO_ReadPin>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d101      	bne.n	800fd7a <getChannel+0x62>
 800fd76:	2304      	movs	r3, #4
 800fd78:	e000      	b.n	800fd7c <getChannel+0x64>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	b25a      	sxtb	r2, r3
 800fd7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	b25b      	sxtb	r3, r3
 800fd86:	71fb      	strb	r3, [r7, #7]

	return ch;
 800fd88:	79fb      	ldrb	r3, [r7, #7]
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3708      	adds	r7, #8
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	40020400 	.word	0x40020400

0800fd98 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800fda0:	2200      	movs	r2, #0
 800fda2:	2140      	movs	r1, #64	; 0x40
 800fda4:	4803      	ldr	r0, [pc, #12]	; (800fdb4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800fda6:	f7fb faeb 	bl	800b380 <HAL_GPIO_WritePin>

}
 800fdaa:	bf00      	nop
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	40020400 	.word	0x40020400

0800fdb8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	2140      	movs	r1, #64	; 0x40
 800fdc4:	4803      	ldr	r0, [pc, #12]	; (800fdd4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800fdc6:	f7fb fadb 	bl	800b380 <HAL_GPIO_WritePin>

}
 800fdca:	bf00      	nop
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	40020400 	.word	0x40020400

0800fdd8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800fde0:	2200      	movs	r2, #0
 800fde2:	2140      	movs	r1, #64	; 0x40
 800fde4:	4803      	ldr	r0, [pc, #12]	; (800fdf4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800fde6:	f7fb facb 	bl	800b380 <HAL_GPIO_WritePin>

}
 800fdea:	bf00      	nop
 800fdec:	3708      	adds	r7, #8
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	40020400 	.word	0x40020400

0800fdf8 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800fe00:	4b24      	ldr	r3, [pc, #144]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe02:	4a25      	ldr	r2, [pc, #148]	; (800fe98 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fe04:	2100      	movs	r1, #0
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7f9 fe3e 	bl	8009a88 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800fe0c:	4b23      	ldr	r3, [pc, #140]	; (800fe9c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800fe0e:	2201      	movs	r2, #1
 800fe10:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800fe12:	4b21      	ldr	r3, [pc, #132]	; (800fe98 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	089b      	lsrs	r3, r3, #2
 800fe18:	f003 0307 	and.w	r3, r3, #7
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d114      	bne.n	800fe4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800fe20:	4b1d      	ldr	r3, [pc, #116]	; (800fe98 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	2b04      	cmp	r3, #4
 800fe26:	d110      	bne.n	800fe4a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800fe28:	4b1a      	ldr	r3, [pc, #104]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800fe2e:	4b19      	ldr	r3, [pc, #100]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe30:	785b      	ldrb	r3, [r3, #1]
 800fe32:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800fe34:	4b17      	ldr	r3, [pc, #92]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe36:	789b      	ldrb	r3, [r3, #2]
 800fe38:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800fe3a:	4b16      	ldr	r3, [pc, #88]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe3c:	78db      	ldrb	r3, [r3, #3]
 800fe3e:	73fb      	strb	r3, [r7, #15]

		mainASR.omega_ref = controlRef.fval;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4a17      	ldr	r2, [pc, #92]	; (800fea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800fe44:	6253      	str	r3, [r2, #36]	; 0x24

		timeoutReset();
 800fe46:	f000 fea1 	bl	8010b8c <timeoutReset>

	}


	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x02 && can1RxHeader.DLC == 0x4)
 800fe4a:	4b13      	ldr	r3, [pc, #76]	; (800fe98 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	089b      	lsrs	r3, r3, #2
 800fe50:	f003 0307 	and.w	r3, r3, #7
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	d114      	bne.n	800fe82 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 800fe58:	4b0f      	ldr	r3, [pc, #60]	; (800fe98 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fe5a:	691b      	ldr	r3, [r3, #16]
 800fe5c:	2b04      	cmp	r3, #4
 800fe5e:	d110      	bne.n	800fe82 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	{
		controlRef.byte[0] = can1RxData[0];
 800fe60:	4b0c      	ldr	r3, [pc, #48]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800fe66:	4b0b      	ldr	r3, [pc, #44]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe68:	785b      	ldrb	r3, [r3, #1]
 800fe6a:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800fe6c:	4b09      	ldr	r3, [pc, #36]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe6e:	789b      	ldrb	r3, [r3, #2]
 800fe70:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800fe72:	4b08      	ldr	r3, [pc, #32]	; (800fe94 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe74:	78db      	ldrb	r3, [r3, #3]
 800fe76:	73fb      	strb	r3, [r7, #15]

		mainAPR.theta_ref = controlRef.fval;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	4a0a      	ldr	r2, [pc, #40]	; (800fea4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800fe7c:	62d3      	str	r3, [r2, #44]	; 0x2c

		timeoutReset();
 800fe7e:	f000 fe85 	bl	8010b8c <timeoutReset>
	}


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800fe82:	2201      	movs	r2, #1
 800fe84:	2140      	movs	r1, #64	; 0x40
 800fe86:	4808      	ldr	r0, [pc, #32]	; (800fea8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800fe88:	f7fb fa7a 	bl	800b380 <HAL_GPIO_WritePin>

}
 800fe8c:	bf00      	nop
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	200046c4 	.word	0x200046c4
 800fe98:	200046a8 	.word	0x200046a8
 800fe9c:	20000245 	.word	0x20000245
 800fea0:	20004390 	.word	0x20004390
 800fea4:	2000433c 	.word	0x2000433c
 800fea8:	40020000 	.word	0x40020000

0800feac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800feb2:	2300      	movs	r3, #0
 800feb4:	607b      	str	r3, [r7, #4]
 800feb6:	4b14      	ldr	r3, [pc, #80]	; (800ff08 <MX_DMA_Init+0x5c>)
 800feb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feba:	4a13      	ldr	r2, [pc, #76]	; (800ff08 <MX_DMA_Init+0x5c>)
 800febc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fec0:	6313      	str	r3, [r2, #48]	; 0x30
 800fec2:	4b11      	ldr	r3, [pc, #68]	; (800ff08 <MX_DMA_Init+0x5c>)
 800fec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800feca:	607b      	str	r3, [r7, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800fece:	2200      	movs	r2, #0
 800fed0:	2100      	movs	r1, #0
 800fed2:	2038      	movs	r0, #56	; 0x38
 800fed4:	f7fa f9f7 	bl	800a2c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fed8:	2038      	movs	r0, #56	; 0x38
 800feda:	f7fa fa10 	bl	800a2fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800fede:	2200      	movs	r2, #0
 800fee0:	2100      	movs	r1, #0
 800fee2:	2039      	movs	r0, #57	; 0x39
 800fee4:	f7fa f9ef 	bl	800a2c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800fee8:	2039      	movs	r0, #57	; 0x39
 800feea:	f7fa fa08 	bl	800a2fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800feee:	2200      	movs	r2, #0
 800fef0:	2100      	movs	r1, #0
 800fef2:	203a      	movs	r0, #58	; 0x3a
 800fef4:	f7fa f9e7 	bl	800a2c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800fef8:	203a      	movs	r0, #58	; 0x3a
 800fefa:	f7fa fa00 	bl	800a2fe <HAL_NVIC_EnableIRQ>

}
 800fefe:	bf00      	nop
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	40023800 	.word	0x40023800

0800ff0c <Encoder_Init>:
Encoder_TypeDef mainEncoder;



void Encoder_Init()
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	af00      	add	r7, sp, #0

	mainEncoder.Init.hspi = &hspi2;
 800ff10:	4b1d      	ldr	r3, [pc, #116]	; (800ff88 <Encoder_Init+0x7c>)
 800ff12:	4a1e      	ldr	r2, [pc, #120]	; (800ff8c <Encoder_Init+0x80>)
 800ff14:	60da      	str	r2, [r3, #12]
	mainEncoder.Init.SPI_NSS_Port = SPI2_NSS_GPIO_Port;
 800ff16:	4b1c      	ldr	r3, [pc, #112]	; (800ff88 <Encoder_Init+0x7c>)
 800ff18:	4a1d      	ldr	r2, [pc, #116]	; (800ff90 <Encoder_Init+0x84>)
 800ff1a:	611a      	str	r2, [r3, #16]
	mainEncoder.Init.SPI_NSS_Pin = SPI2_NSS_Pin;
 800ff1c:	4b1a      	ldr	r3, [pc, #104]	; (800ff88 <Encoder_Init+0x7c>)
 800ff1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff22:	829a      	strh	r2, [r3, #20]

	mainEncoder.Init.theta_offset = 0.0f;
 800ff24:	4b18      	ldr	r3, [pc, #96]	; (800ff88 <Encoder_Init+0x7c>)
 800ff26:	f04f 0200 	mov.w	r2, #0
 800ff2a:	601a      	str	r2, [r3, #0]
	mainEncoder.Init.theta_re_offset = -3.0723f;
 800ff2c:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <Encoder_Init+0x7c>)
 800ff2e:	4a19      	ldr	r2, [pc, #100]	; (800ff94 <Encoder_Init+0x88>)
 800ff30:	605a      	str	r2, [r3, #4]
	mainEncoder.Init.cycleTime = 100E-6;
 800ff32:	4b15      	ldr	r3, [pc, #84]	; (800ff88 <Encoder_Init+0x7c>)
 800ff34:	4a18      	ldr	r2, [pc, #96]	; (800ff98 <Encoder_Init+0x8c>)
 800ff36:	609a      	str	r2, [r3, #8]

	mainEncoder.theta = 0.0f;
 800ff38:	4b13      	ldr	r3, [pc, #76]	; (800ff88 <Encoder_Init+0x7c>)
 800ff3a:	f04f 0200 	mov.w	r2, #0
 800ff3e:	619a      	str	r2, [r3, #24]
	mainEncoder.theta_re = 0.0f;
 800ff40:	4b11      	ldr	r3, [pc, #68]	; (800ff88 <Encoder_Init+0x7c>)
 800ff42:	f04f 0200 	mov.w	r2, #0
 800ff46:	635a      	str	r2, [r3, #52]	; 0x34
	mainEncoder.forced_commute_enable = 0;
 800ff48:	4b0f      	ldr	r3, [pc, #60]	; (800ff88 <Encoder_Init+0x7c>)
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mainEncoder.cos_theta_re = 1.0f;
 800ff50:	4b0d      	ldr	r3, [pc, #52]	; (800ff88 <Encoder_Init+0x7c>)
 800ff52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ff56:	639a      	str	r2, [r3, #56]	; 0x38
	mainEncoder.sin_theta_re = 0.0f;
 800ff58:	4b0b      	ldr	r3, [pc, #44]	; (800ff88 <Encoder_Init+0x7c>)
 800ff5a:	f04f 0200 	mov.w	r2, #0
 800ff5e:	63da      	str	r2, [r3, #60]	; 0x3c


	mainEncoder.firstLaunch = 1;
 800ff60:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <Encoder_Init+0x7c>)
 800ff62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ff66:	62da      	str	r2, [r3, #44]	; 0x2c

	// SPI Interrupt Setting
	__HAL_SPI_ENABLE_IT(mainEncoder.Init.hspi, SPI_IT_TXE | SPI_IT_RXNE);
 800ff68:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <Encoder_Init+0x7c>)
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	685a      	ldr	r2, [r3, #4]
 800ff70:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <Encoder_Init+0x7c>)
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ff7a:	605a      	str	r2, [r3, #4]


}
 800ff7c:	bf00      	nop
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	200046f4 	.word	0x200046f4
 800ff8c:	20004740 	.word	0x20004740
 800ff90:	40020400 	.word	0x40020400
 800ff94:	c044a090 	.word	0xc044a090
 800ff98:	38d1b717 	.word	0x38d1b717
 800ff9c:	00000000 	.word	0x00000000

0800ffa0 <setZeroEncoder>:


#if 1

void setZeroEncoder(uint8_t exe)
{
 800ffa0:	b590      	push	{r4, r7, lr}
 800ffa2:	b08b      	sub	sp, #44	; 0x2c
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 800ffaa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ffae:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 8.0f;
 800ffb4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800ffb8:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 800ffba:	f04f 0300 	mov.w	r3, #0
 800ffbe:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 800ffc0:	f04f 0300 	mov.w	r3, #0
 800ffc4:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 800ffc6:	f04f 0300 	mov.w	r3, #0
 800ffca:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 800ffcc:	f000 fb0c 	bl	80105e8 <Flash_load>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	4b49      	ldr	r3, [pc, #292]	; (80100f8 <setZeroEncoder+0x158>)
 800ffd4:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d106      	bne.n	800ffea <setZeroEncoder+0x4a>
	{

		memcpy(&mainEncoder.Init.theta_re_offset, flash_data, 4);
 800ffdc:	4b46      	ldr	r3, [pc, #280]	; (80100f8 <setZeroEncoder+0x158>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	4b45      	ldr	r3, [pc, #276]	; (80100fc <setZeroEncoder+0x15c>)
 800ffe6:	605a      	str	r2, [r3, #4]
#if DEBUG_PRINT_ENABLE
		printf("flash_data:%d\n", mainEncoder.Init.theta_re_offset * 100000);
		printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
#endif

		return;
 800ffe8:	e077      	b.n	80100da <setZeroEncoder+0x13a>
	}


	mainACR.Id_ref = forced_I_gamma_ref;
 800ffea:	4a45      	ldr	r2, [pc, #276]	; (8010100 <setZeroEncoder+0x160>)
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	62d3      	str	r3, [r2, #44]	; 0x2c
	mainACR.Iq_ref = forced_I_delta_ref;
 800fff0:	4a43      	ldr	r2, [pc, #268]	; (8010100 <setZeroEncoder+0x160>)
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	6313      	str	r3, [r2, #48]	; 0x30

	mainEncoder.Init.theta_re_offset = 0.0f;
 800fff6:	4b41      	ldr	r3, [pc, #260]	; (80100fc <setZeroEncoder+0x15c>)
 800fff8:	f04f 0200 	mov.w	r2, #0
 800fffc:	605a      	str	r2, [r3, #4]

	mainACR.forced_theta_re = 0.0f;
 800fffe:	4b40      	ldr	r3, [pc, #256]	; (8010100 <setZeroEncoder+0x160>)
 8010000:	f04f 0200 	mov.w	r2, #0
 8010004:	661a      	str	r2, [r3, #96]	; 0x60

	mainACR.forced_commute_enable = 1;
 8010006:	4b3e      	ldr	r3, [pc, #248]	; (8010100 <setZeroEncoder+0x160>)
 8010008:	2201      	movs	r2, #1
 801000a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	HAL_Delay(1000);
 801000e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010012:	f7f8 fef3 	bl	8008dfc <HAL_Delay>


	mainEncoder.Init.theta_re_offset = 0.0f - mainEncoder.theta_re;
 8010016:	4b39      	ldr	r3, [pc, #228]	; (80100fc <setZeroEncoder+0x15c>)
 8010018:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801001c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8010104 <setZeroEncoder+0x164>
 8010020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010024:	4b35      	ldr	r3, [pc, #212]	; (80100fc <setZeroEncoder+0x15c>)
 8010026:	edc3 7a01 	vstr	s15, [r3, #4]

	mainACR.Id_ref = 0.0f;
 801002a:	4b35      	ldr	r3, [pc, #212]	; (8010100 <setZeroEncoder+0x160>)
 801002c:	f04f 0200 	mov.w	r2, #0
 8010030:	62da      	str	r2, [r3, #44]	; 0x2c
	mainACR.Iq_ref = 0.0f;
 8010032:	4b33      	ldr	r3, [pc, #204]	; (8010100 <setZeroEncoder+0x160>)
 8010034:	f04f 0200 	mov.w	r2, #0
 8010038:	631a      	str	r2, [r3, #48]	; 0x30


	while(mainEncoder.Init.theta_re_offset < -M_PI)	mainEncoder.Init.theta_re_offset += 2.0f * M_PI;
 801003a:	e012      	b.n	8010062 <setZeroEncoder+0xc2>
 801003c:	4b2f      	ldr	r3, [pc, #188]	; (80100fc <setZeroEncoder+0x15c>)
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f7f8 f969 	bl	8008318 <__aeabi_f2d>
 8010046:	a326      	add	r3, pc, #152	; (adr r3, 80100e0 <setZeroEncoder+0x140>)
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	f7f8 f806 	bl	800805c <__adddf3>
 8010050:	4603      	mov	r3, r0
 8010052:	460c      	mov	r4, r1
 8010054:	4618      	mov	r0, r3
 8010056:	4621      	mov	r1, r4
 8010058:	f7f8 fc8e 	bl	8008978 <__aeabi_d2f>
 801005c:	4602      	mov	r2, r0
 801005e:	4b27      	ldr	r3, [pc, #156]	; (80100fc <setZeroEncoder+0x15c>)
 8010060:	605a      	str	r2, [r3, #4]
 8010062:	4b26      	ldr	r3, [pc, #152]	; (80100fc <setZeroEncoder+0x15c>)
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	f7f8 f956 	bl	8008318 <__aeabi_f2d>
 801006c:	a31e      	add	r3, pc, #120	; (adr r3, 80100e8 <setZeroEncoder+0x148>)
 801006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010072:	f7f8 fc1b 	bl	80088ac <__aeabi_dcmplt>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1df      	bne.n	801003c <setZeroEncoder+0x9c>
	while(mainEncoder.Init.theta_re_offset > M_PI)	mainEncoder.Init.theta_re_offset -= 2.0f * M_PI;
 801007c:	e012      	b.n	80100a4 <setZeroEncoder+0x104>
 801007e:	4b1f      	ldr	r3, [pc, #124]	; (80100fc <setZeroEncoder+0x15c>)
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	4618      	mov	r0, r3
 8010084:	f7f8 f948 	bl	8008318 <__aeabi_f2d>
 8010088:	a315      	add	r3, pc, #84	; (adr r3, 80100e0 <setZeroEncoder+0x140>)
 801008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008e:	f7f7 ffe3 	bl	8008058 <__aeabi_dsub>
 8010092:	4603      	mov	r3, r0
 8010094:	460c      	mov	r4, r1
 8010096:	4618      	mov	r0, r3
 8010098:	4621      	mov	r1, r4
 801009a:	f7f8 fc6d 	bl	8008978 <__aeabi_d2f>
 801009e:	4602      	mov	r2, r0
 80100a0:	4b16      	ldr	r3, [pc, #88]	; (80100fc <setZeroEncoder+0x15c>)
 80100a2:	605a      	str	r2, [r3, #4]
 80100a4:	4b15      	ldr	r3, [pc, #84]	; (80100fc <setZeroEncoder+0x15c>)
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7f8 f935 	bl	8008318 <__aeabi_f2d>
 80100ae:	a310      	add	r3, pc, #64	; (adr r3, 80100f0 <setZeroEncoder+0x150>)
 80100b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b4:	f7f8 fc18 	bl	80088e8 <__aeabi_dcmpgt>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1df      	bne.n	801007e <setZeroEncoder+0xde>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset > -1.0f));

#endif

	memcpy(flash_data, &mainEncoder.Init.theta_re_offset, 4);
 80100be:	4b0e      	ldr	r3, [pc, #56]	; (80100f8 <setZeroEncoder+0x158>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a0e      	ldr	r2, [pc, #56]	; (80100fc <setZeroEncoder+0x15c>)
 80100c4:	6852      	ldr	r2, [r2, #4]
 80100c6:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 80100c8:	f000 faa0 	bl	801060c <Flash_store>
#if DEBUG_PRINT_ENABLE
	printf("flash_data:%lu\n", *flash_data);
#endif


	mainACR.forced_commute_enable = 0;
 80100cc:	4b0c      	ldr	r3, [pc, #48]	; (8010100 <setZeroEncoder+0x160>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	ACR_Reset(&mainACR);
 80100d4:	480a      	ldr	r0, [pc, #40]	; (8010100 <setZeroEncoder+0x160>)
 80100d6:	f7fe fc77 	bl	800e9c8 <ACR_Reset>


#endif


}
 80100da:	372c      	adds	r7, #44	; 0x2c
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd90      	pop	{r4, r7, pc}
 80100e0:	54442d18 	.word	0x54442d18
 80100e4:	401921fb 	.word	0x401921fb
 80100e8:	54442d18 	.word	0x54442d18
 80100ec:	c00921fb 	.word	0xc00921fb
 80100f0:	54442d18 	.word	0x54442d18
 80100f4:	400921fb 	.word	0x400921fb
 80100f8:	2000473c 	.word	0x2000473c
 80100fc:	200046f4 	.word	0x200046f4
 8010100:	200042d0 	.word	0x200042d0
 8010104:	00000000 	.word	0x00000000

08010108 <Encoder_Request>:

#endif


inline void Encoder_Request(Encoder_TypeDef *hEncoder)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]


	// Reading Encoder for next sampling
	hEncoder->spi2txBuf[0] = 0xff;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	22ff      	movs	r2, #255	; 0xff
 8010114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hEncoder->spi2txBuf[1] = 0xff;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	22ff      	movs	r2, #255	; 0xff
 801011c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_RESET);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6918      	ldr	r0, [r3, #16]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	8a9b      	ldrh	r3, [r3, #20]
 8010128:	2200      	movs	r2, #0
 801012a:	4619      	mov	r1, r3
 801012c:	f7fb f928 	bl	800b380 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_IT(hEncoder->Init.hspi, hEncoder->spi2txBuf, hEncoder->spi2rxBuf, 1);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68d8      	ldr	r0, [r3, #12]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f103 0141 	add.w	r1, r3, #65	; 0x41
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f103 0243 	add.w	r2, r3, #67	; 0x43
 8010140:	2301      	movs	r3, #1
 8010142:	f7fc f84d 	bl	800c1e0 <HAL_SPI_TransmitReceive_IT>


}
 8010146:	bf00      	nop
 8010148:	3708      	adds	r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
	...

08010150 <Encoder_Refresh>:


inline int Encoder_Refresh(Encoder_TypeDef *hEncoder)
{
 8010150:	b5b0      	push	{r4, r5, r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
	static float _theta;
	static float _theta_re;
	static float d_theta;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_SET);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6918      	ldr	r0, [r3, #16]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	8a9b      	ldrh	r3, [r3, #20]
 8010160:	2201      	movs	r2, #1
 8010162:	4619      	mov	r1, r3
 8010164:	f7fb f90c 	bl	800b380 <HAL_GPIO_WritePin>

	angle_raw = (hEncoder->spi2rxBuf[1] & 0x3f) << 8 | hEncoder->spi2rxBuf[0];
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801016e:	021b      	lsls	r3, r3, #8
 8010170:	b21b      	sxth	r3, r3
 8010172:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8010176:	b21a      	sxth	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801017e:	b21b      	sxth	r3, r3
 8010180:	4313      	orrs	r3, r2
 8010182:	b21b      	sxth	r3, r3
 8010184:	b29a      	uxth	r2, r3
 8010186:	4b62      	ldr	r3, [pc, #392]	; (8010310 <Encoder_Refresh+0x1c0>)
 8010188:	801a      	strh	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + hEncoder->Init.theta_offset;
 801018a:	4b61      	ldr	r3, [pc, #388]	; (8010310 <Encoder_Refresh+0x1c0>)
 801018c:	881b      	ldrh	r3, [r3, #0]
 801018e:	ee07 3a90 	vmov	s15, r3
 8010192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010196:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010314 <Encoder_Refresh+0x1c4>
 801019a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801019e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80101a2:	ee17 0a90 	vmov	r0, s15
 80101a6:	f7f8 f8b7 	bl	8008318 <__aeabi_f2d>
 80101aa:	a353      	add	r3, pc, #332	; (adr r3, 80102f8 <Encoder_Refresh+0x1a8>)
 80101ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b0:	f7f8 f90a 	bl	80083c8 <__aeabi_dmul>
 80101b4:	4603      	mov	r3, r0
 80101b6:	460c      	mov	r4, r1
 80101b8:	4625      	mov	r5, r4
 80101ba:	461c      	mov	r4, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f8 f8a9 	bl	8008318 <__aeabi_f2d>
 80101c6:	4602      	mov	r2, r0
 80101c8:	460b      	mov	r3, r1
 80101ca:	4620      	mov	r0, r4
 80101cc:	4629      	mov	r1, r5
 80101ce:	f7f7 ff45 	bl	800805c <__adddf3>
 80101d2:	4603      	mov	r3, r0
 80101d4:	460c      	mov	r4, r1
 80101d6:	4618      	mov	r0, r3
 80101d8:	4621      	mov	r1, r4
 80101da:	f7f8 fbcd 	bl	8008978 <__aeabi_d2f>
 80101de:	4602      	mov	r2, r0
 80101e0:	4b4d      	ldr	r3, [pc, #308]	; (8010318 <Encoder_Refresh+0x1c8>)
 80101e2:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			hEncoder->theta = _theta + 2 * M_PI;
 80101e4:	4b4c      	ldr	r3, [pc, #304]	; (8010318 <Encoder_Refresh+0x1c8>)
 80101e6:	edd3 7a00 	vldr	s15, [r3]
 80101ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f2:	d513      	bpl.n	801021c <Encoder_Refresh+0xcc>
 80101f4:	4b48      	ldr	r3, [pc, #288]	; (8010318 <Encoder_Refresh+0x1c8>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f8 f88d 	bl	8008318 <__aeabi_f2d>
 80101fe:	a340      	add	r3, pc, #256	; (adr r3, 8010300 <Encoder_Refresh+0x1b0>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7f7 ff2a 	bl	800805c <__adddf3>
 8010208:	4603      	mov	r3, r0
 801020a:	460c      	mov	r4, r1
 801020c:	4618      	mov	r0, r3
 801020e:	4621      	mov	r1, r4
 8010210:	f7f8 fbb2 	bl	8008978 <__aeabi_d2f>
 8010214:	4602      	mov	r2, r0
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	619a      	str	r2, [r3, #24]
 801021a:	e024      	b.n	8010266 <Encoder_Refresh+0x116>
	else if(_theta >= 2 * M_PI)	hEncoder->theta = _theta - 2 * M_PI;
 801021c:	4b3e      	ldr	r3, [pc, #248]	; (8010318 <Encoder_Refresh+0x1c8>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4618      	mov	r0, r3
 8010222:	f7f8 f879 	bl	8008318 <__aeabi_f2d>
 8010226:	a336      	add	r3, pc, #216	; (adr r3, 8010300 <Encoder_Refresh+0x1b0>)
 8010228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022c:	f7f8 fb52 	bl	80088d4 <__aeabi_dcmpge>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d013      	beq.n	801025e <Encoder_Refresh+0x10e>
 8010236:	4b38      	ldr	r3, [pc, #224]	; (8010318 <Encoder_Refresh+0x1c8>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4618      	mov	r0, r3
 801023c:	f7f8 f86c 	bl	8008318 <__aeabi_f2d>
 8010240:	a32f      	add	r3, pc, #188	; (adr r3, 8010300 <Encoder_Refresh+0x1b0>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	f7f7 ff07 	bl	8008058 <__aeabi_dsub>
 801024a:	4603      	mov	r3, r0
 801024c:	460c      	mov	r4, r1
 801024e:	4618      	mov	r0, r3
 8010250:	4621      	mov	r1, r4
 8010252:	f7f8 fb91 	bl	8008978 <__aeabi_d2f>
 8010256:	4602      	mov	r2, r0
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	619a      	str	r2, [r3, #24]
 801025c:	e003      	b.n	8010266 <Encoder_Refresh+0x116>
	else						hEncoder->theta = _theta;
 801025e:	4b2e      	ldr	r3, [pc, #184]	; (8010318 <Encoder_Refresh+0x1c8>)
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	619a      	str	r2, [r3, #24]


	// 差分角度計算，初めのステップは速度ゼロとする
	if(hEncoder->firstLaunch != 0)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801026c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010274:	d008      	beq.n	8010288 <Encoder_Refresh+0x138>
	{
		d_theta = 0.0f;
 8010276:	4b29      	ldr	r3, [pc, #164]	; (801031c <Encoder_Refresh+0x1cc>)
 8010278:	f04f 0200 	mov.w	r2, #0
 801027c:	601a      	str	r2, [r3, #0]
		hEncoder->firstLaunch = 0;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f04f 0200 	mov.w	r2, #0
 8010284:	62da      	str	r2, [r3, #44]	; 0x2c
 8010286:	e00a      	b.n	801029e <Encoder_Refresh+0x14e>
	}
	else
	{
		d_theta = hEncoder->theta - hEncoder->p_theta;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	ed93 7a06 	vldr	s14, [r3, #24]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010298:	4b20      	ldr	r3, [pc, #128]	; (801031c <Encoder_Refresh+0x1cc>)
 801029a:	edc3 7a00 	vstr	s15, [r3]
	}
	hEncoder->p_theta = hEncoder->theta;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	699a      	ldr	r2, [r3, #24]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	625a      	str	r2, [r3, #36]	; 0x24

	// Unwrapping Process
	if(d_theta < - M_PI)
 80102a6:	4b1d      	ldr	r3, [pc, #116]	; (801031c <Encoder_Refresh+0x1cc>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7f8 f834 	bl	8008318 <__aeabi_f2d>
 80102b0:	a315      	add	r3, pc, #84	; (adr r3, 8010308 <Encoder_Refresh+0x1b8>)
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	f7f8 faf9 	bl	80088ac <__aeabi_dcmplt>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d02f      	beq.n	8010320 <Encoder_Refresh+0x1d0>
	{
		d_theta += 2 * M_PI;
 80102c0:	4b16      	ldr	r3, [pc, #88]	; (801031c <Encoder_Refresh+0x1cc>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7f8 f827 	bl	8008318 <__aeabi_f2d>
 80102ca:	a30d      	add	r3, pc, #52	; (adr r3, 8010300 <Encoder_Refresh+0x1b0>)
 80102cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d0:	f7f7 fec4 	bl	800805c <__adddf3>
 80102d4:	4603      	mov	r3, r0
 80102d6:	460c      	mov	r4, r1
 80102d8:	4618      	mov	r0, r3
 80102da:	4621      	mov	r1, r4
 80102dc:	f7f8 fb4c 	bl	8008978 <__aeabi_d2f>
 80102e0:	4602      	mov	r2, r0
 80102e2:	4b0e      	ldr	r3, [pc, #56]	; (801031c <Encoder_Refresh+0x1cc>)
 80102e4:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += 1;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	69db      	ldr	r3, [r3, #28]
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	61da      	str	r2, [r3, #28]
 80102f0:	e03b      	b.n	801036a <Encoder_Refresh+0x21a>
 80102f2:	bf00      	nop
 80102f4:	f3af 8000 	nop.w
 80102f8:	54442d18 	.word	0x54442d18
 80102fc:	400921fb 	.word	0x400921fb
 8010300:	54442d18 	.word	0x54442d18
 8010304:	401921fb 	.word	0x401921fb
 8010308:	54442d18 	.word	0x54442d18
 801030c:	c00921fb 	.word	0xc00921fb
 8010310:	20000246 	.word	0x20000246
 8010314:	46800000 	.word	0x46800000
 8010318:	20000248 	.word	0x20000248
 801031c:	2000024c 	.word	0x2000024c
	}
	else if(d_theta > M_PI)
 8010320:	4b93      	ldr	r3, [pc, #588]	; (8010570 <Encoder_Refresh+0x420>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4618      	mov	r0, r3
 8010326:	f7f7 fff7 	bl	8008318 <__aeabi_f2d>
 801032a:	a389      	add	r3, pc, #548	; (adr r3, 8010550 <Encoder_Refresh+0x400>)
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	f7f8 fada 	bl	80088e8 <__aeabi_dcmpgt>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d017      	beq.n	801036a <Encoder_Refresh+0x21a>
	{
		d_theta -= 2 * M_PI;
 801033a:	4b8d      	ldr	r3, [pc, #564]	; (8010570 <Encoder_Refresh+0x420>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4618      	mov	r0, r3
 8010340:	f7f7 ffea 	bl	8008318 <__aeabi_f2d>
 8010344:	a384      	add	r3, pc, #528	; (adr r3, 8010558 <Encoder_Refresh+0x408>)
 8010346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034a:	f7f7 fe85 	bl	8008058 <__aeabi_dsub>
 801034e:	4603      	mov	r3, r0
 8010350:	460c      	mov	r4, r1
 8010352:	4618      	mov	r0, r3
 8010354:	4621      	mov	r1, r4
 8010356:	f7f8 fb0f 	bl	8008978 <__aeabi_d2f>
 801035a:	4602      	mov	r2, r0
 801035c:	4b84      	ldr	r3, [pc, #528]	; (8010570 <Encoder_Refresh+0x420>)
 801035e:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += -1;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	69db      	ldr	r3, [r3, #28]
 8010364:	1e5a      	subs	r2, r3, #1
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	61da      	str	r2, [r3, #28]
	}

	// 速度計算，LPF付き
	hEncoder->omega = hEncoder->omega * SPEED_LPF_COEFF + d_theta / hEncoder->Init.cycleTime * (1.0f - SPEED_LPF_COEFF);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801036e:	4618      	mov	r0, r3
 8010370:	f7f7 ffd2 	bl	8008318 <__aeabi_f2d>
 8010374:	a37a      	add	r3, pc, #488	; (adr r3, 8010560 <Encoder_Refresh+0x410>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7f8 f825 	bl	80083c8 <__aeabi_dmul>
 801037e:	4603      	mov	r3, r0
 8010380:	460c      	mov	r4, r1
 8010382:	4625      	mov	r5, r4
 8010384:	461c      	mov	r4, r3
 8010386:	4b7a      	ldr	r3, [pc, #488]	; (8010570 <Encoder_Refresh+0x420>)
 8010388:	ed93 7a00 	vldr	s14, [r3]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010396:	ee16 0a90 	vmov	r0, s13
 801039a:	f7f7 ffbd 	bl	8008318 <__aeabi_f2d>
 801039e:	a372      	add	r3, pc, #456	; (adr r3, 8010568 <Encoder_Refresh+0x418>)
 80103a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a4:	f7f8 f810 	bl	80083c8 <__aeabi_dmul>
 80103a8:	4602      	mov	r2, r0
 80103aa:	460b      	mov	r3, r1
 80103ac:	4620      	mov	r0, r4
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7f7 fe54 	bl	800805c <__adddf3>
 80103b4:	4603      	mov	r3, r0
 80103b6:	460c      	mov	r4, r1
 80103b8:	4618      	mov	r0, r3
 80103ba:	4621      	mov	r1, r4
 80103bc:	f7f8 fadc 	bl	8008978 <__aeabi_d2f>
 80103c0:	4602      	mov	r2, r0
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	629a      	str	r2, [r3, #40]	; 0x28

	// マルチターン角度更新
	hEncoder->theta_multiturn = hEncoder->theta + 2.0f * M_PI * hEncoder->turnCount;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	699b      	ldr	r3, [r3, #24]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7f7 ffa4 	bl	8008318 <__aeabi_f2d>
 80103d0:	4604      	mov	r4, r0
 80103d2:	460d      	mov	r5, r1
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	69db      	ldr	r3, [r3, #28]
 80103d8:	4618      	mov	r0, r3
 80103da:	f7f7 ff8b 	bl	80082f4 <__aeabi_i2d>
 80103de:	a35e      	add	r3, pc, #376	; (adr r3, 8010558 <Encoder_Refresh+0x408>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	f7f7 fff0 	bl	80083c8 <__aeabi_dmul>
 80103e8:	4602      	mov	r2, r0
 80103ea:	460b      	mov	r3, r1
 80103ec:	4620      	mov	r0, r4
 80103ee:	4629      	mov	r1, r5
 80103f0:	f7f7 fe34 	bl	800805c <__adddf3>
 80103f4:	4603      	mov	r3, r0
 80103f6:	460c      	mov	r4, r1
 80103f8:	4618      	mov	r0, r3
 80103fa:	4621      	mov	r1, r4
 80103fc:	f7f8 fabc 	bl	8008978 <__aeabi_d2f>
 8010400:	4602      	mov	r2, r0
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	621a      	str	r2, [r3, #32]

	// 電気角取得
	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLE_PAIRS, 2.0f * M_PI) + hEncoder->Init.theta_re_offset;
 8010406:	4b5b      	ldr	r3, [pc, #364]	; (8010574 <Encoder_Refresh+0x424>)
 8010408:	881b      	ldrh	r3, [r3, #0]
 801040a:	ee07 3a90 	vmov	s15, r3
 801040e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010412:	eddf 6a59 	vldr	s13, [pc, #356]	; 8010578 <Encoder_Refresh+0x428>
 8010416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801041a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801041e:	ee17 0a90 	vmov	r0, s15
 8010422:	f7f7 ff79 	bl	8008318 <__aeabi_f2d>
 8010426:	a34a      	add	r3, pc, #296	; (adr r3, 8010550 <Encoder_Refresh+0x400>)
 8010428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042c:	f7f7 ffcc 	bl	80083c8 <__aeabi_dmul>
 8010430:	4603      	mov	r3, r0
 8010432:	460c      	mov	r4, r1
 8010434:	4618      	mov	r0, r3
 8010436:	4621      	mov	r1, r4
 8010438:	f04f 0200 	mov.w	r2, #0
 801043c:	4b4f      	ldr	r3, [pc, #316]	; (801057c <Encoder_Refresh+0x42c>)
 801043e:	f7f7 ffc3 	bl	80083c8 <__aeabi_dmul>
 8010442:	4603      	mov	r3, r0
 8010444:	460c      	mov	r4, r1
 8010446:	4618      	mov	r0, r3
 8010448:	4621      	mov	r1, r4
 801044a:	f7f8 fa95 	bl	8008978 <__aeabi_d2f>
 801044e:	4603      	mov	r3, r0
 8010450:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8010580 <Encoder_Refresh+0x430>
 8010454:	ee00 3a10 	vmov	s0, r3
 8010458:	f003 f96e 	bl	8013738 <fmodf>
 801045c:	eeb0 7a40 	vmov.f32	s14, s0
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	edd3 7a01 	vldr	s15, [r3, #4]
 8010466:	ee77 7a27 	vadd.f32	s15, s14, s15
 801046a:	4b46      	ldr	r3, [pc, #280]	; (8010584 <Encoder_Refresh+0x434>)
 801046c:	edc3 7a00 	vstr	s15, [r3]

	if(_theta_re < 0.0f)			hEncoder->theta_re = _theta_re + 2 * M_PI;
 8010470:	4b44      	ldr	r3, [pc, #272]	; (8010584 <Encoder_Refresh+0x434>)
 8010472:	edd3 7a00 	vldr	s15, [r3]
 8010476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801047a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047e:	d513      	bpl.n	80104a8 <Encoder_Refresh+0x358>
 8010480:	4b40      	ldr	r3, [pc, #256]	; (8010584 <Encoder_Refresh+0x434>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4618      	mov	r0, r3
 8010486:	f7f7 ff47 	bl	8008318 <__aeabi_f2d>
 801048a:	a333      	add	r3, pc, #204	; (adr r3, 8010558 <Encoder_Refresh+0x408>)
 801048c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010490:	f7f7 fde4 	bl	800805c <__adddf3>
 8010494:	4603      	mov	r3, r0
 8010496:	460c      	mov	r4, r1
 8010498:	4618      	mov	r0, r3
 801049a:	4621      	mov	r1, r4
 801049c:	f7f8 fa6c 	bl	8008978 <__aeabi_d2f>
 80104a0:	4602      	mov	r2, r0
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	635a      	str	r2, [r3, #52]	; 0x34
 80104a6:	e024      	b.n	80104f2 <Encoder_Refresh+0x3a2>
	else if(_theta_re >= 2 * M_PI)	hEncoder->theta_re = _theta_re - 2 * M_PI;
 80104a8:	4b36      	ldr	r3, [pc, #216]	; (8010584 <Encoder_Refresh+0x434>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7f7 ff33 	bl	8008318 <__aeabi_f2d>
 80104b2:	a329      	add	r3, pc, #164	; (adr r3, 8010558 <Encoder_Refresh+0x408>)
 80104b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b8:	f7f8 fa0c 	bl	80088d4 <__aeabi_dcmpge>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d013      	beq.n	80104ea <Encoder_Refresh+0x39a>
 80104c2:	4b30      	ldr	r3, [pc, #192]	; (8010584 <Encoder_Refresh+0x434>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7f7 ff26 	bl	8008318 <__aeabi_f2d>
 80104cc:	a322      	add	r3, pc, #136	; (adr r3, 8010558 <Encoder_Refresh+0x408>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	f7f7 fdc1 	bl	8008058 <__aeabi_dsub>
 80104d6:	4603      	mov	r3, r0
 80104d8:	460c      	mov	r4, r1
 80104da:	4618      	mov	r0, r3
 80104dc:	4621      	mov	r1, r4
 80104de:	f7f8 fa4b 	bl	8008978 <__aeabi_d2f>
 80104e2:	4602      	mov	r2, r0
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	635a      	str	r2, [r3, #52]	; 0x34
 80104e8:	e003      	b.n	80104f2 <Encoder_Refresh+0x3a2>
	else							hEncoder->theta_re = _theta_re;
 80104ea:	4b26      	ldr	r3, [pc, #152]	; (8010584 <Encoder_Refresh+0x434>)
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	635a      	str	r2, [r3, #52]	; 0x34

	hEncoder->cos_theta_re = sin_table2[(int)((hEncoder->theta_re * 0.3183f + 0.5f) * 5000.0f)];
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80104f8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8010588 <Encoder_Refresh+0x438>
 80104fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010500:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010508:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801058c <Encoder_Refresh+0x43c>
 801050c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010514:	ee17 3a90 	vmov	r3, s15
 8010518:	4a1d      	ldr	r2, [pc, #116]	; (8010590 <Encoder_Refresh+0x440>)
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	4413      	add	r3, r2
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	639a      	str	r2, [r3, #56]	; 0x38
	hEncoder->sin_theta_re = sin_table2[(int)(hEncoder->theta_re * 1591.54943f)];
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801052a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8010594 <Encoder_Refresh+0x444>
 801052e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010536:	ee17 3a90 	vmov	r3, s15
 801053a:	4a15      	ldr	r2, [pc, #84]	; (8010590 <Encoder_Refresh+0x440>)
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	4413      	add	r3, r2
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	63da      	str	r2, [r3, #60]	; 0x3c


	return 0;
 8010546:	2300      	movs	r3, #0

}
 8010548:	4618      	mov	r0, r3
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bdb0      	pop	{r4, r5, r7, pc}
 8010550:	54442d18 	.word	0x54442d18
 8010554:	400921fb 	.word	0x400921fb
 8010558:	54442d18 	.word	0x54442d18
 801055c:	401921fb 	.word	0x401921fb
 8010560:	aa57066e 	.word	0xaa57066e
 8010564:	3fe859a4 	.word	0x3fe859a4
 8010568:	56a3e648 	.word	0x56a3e648
 801056c:	3fce996d 	.word	0x3fce996d
 8010570:	2000024c 	.word	0x2000024c
 8010574:	20000246 	.word	0x20000246
 8010578:	46800000 	.word	0x46800000
 801057c:	40280000 	.word	0x40280000
 8010580:	40c90fdb 	.word	0x40c90fdb
 8010584:	20000250 	.word	0x20000250
 8010588:	3ea2f838 	.word	0x3ea2f838
 801058c:	459c4000 	.word	0x459c4000
 8010590:	08013960 	.word	0x08013960
 8010594:	44c6f195 	.word	0x44c6f195

08010598 <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 801059e:	f7fa fab5 	bl	800ab0c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80105a2:	2300      	movs	r3, #0
 80105a4:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 80105a6:	2301      	movs	r3, #1
 80105a8:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80105aa:	2302      	movs	r3, #2
 80105ac:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 80105ae:	2301      	movs	r3, #1
 80105b0:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 80105b2:	1d3a      	adds	r2, r7, #4
 80105b4:	f107 0308 	add.w	r3, r7, #8
 80105b8:	4611      	mov	r1, r2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fa fc14 	bl	800ade8 <HAL_FLASHEx_Erase>
 80105c0:	4603      	mov	r3, r0
 80105c2:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 80105c4:	f7fa fac4 	bl	800ab50 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 80105c8:	7ffb      	ldrb	r3, [r7, #31]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d105      	bne.n	80105da <Flash_clear+0x42>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d4:	d101      	bne.n	80105da <Flash_clear+0x42>
 80105d6:	2301      	movs	r3, #1
 80105d8:	e000      	b.n	80105dc <Flash_clear+0x44>
 80105da:	2300      	movs	r3, #0
 80105dc:	b2db      	uxtb	r3, r3
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3720      	adds	r7, #32
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
	...

080105e8 <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 80105ec:	4a05      	ldr	r2, [pc, #20]	; (8010604 <Flash_load+0x1c>)
 80105ee:	4b06      	ldr	r3, [pc, #24]	; (8010608 <Flash_load+0x20>)
 80105f0:	4610      	mov	r0, r2
 80105f2:	4619      	mov	r1, r3
 80105f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80105f8:	461a      	mov	r2, r3
 80105fa:	f001 fb6f 	bl	8011cdc <memcpy>
    return work_ram;
 80105fe:	4b01      	ldr	r3, [pc, #4]	; (8010604 <Flash_load+0x1c>)
}
 8010600:	4618      	mov	r0, r3
 8010602:	bd80      	pop	{r7, pc}
 8010604:	20000254 	.word	0x20000254
 8010608:	08004000 	.word	0x08004000

0801060c <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 801060c:	b590      	push	{r4, r7, lr}
 801060e:	b085      	sub	sp, #20
 8010610:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 8010612:	f7ff ffc1 	bl	8010598 <Flash_clear>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d101      	bne.n	8010620 <Flash_store+0x14>
 801061c:	2301      	movs	r3, #1
 801061e:	e02f      	b.n	8010680 <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8010620:	4b19      	ldr	r3, [pc, #100]	; (8010688 <Flash_store+0x7c>)
 8010622:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8010624:	f7fa fa72 	bl	800ab0c <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8010628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801062c:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 801062e:	2300      	movs	r3, #0
 8010630:	60bb      	str	r3, [r7, #8]
 8010632:	e017      	b.n	8010664 <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	4a14      	ldr	r2, [pc, #80]	; (801068c <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 801063a:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	4413      	add	r3, r2
 8010644:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8010646:	f04f 0400 	mov.w	r4, #0
 801064a:	461a      	mov	r2, r3
 801064c:	4623      	mov	r3, r4
 801064e:	2002      	movs	r0, #2
 8010650:	f7fa fa08 	bl	800aa64 <HAL_FLASH_Program>
 8010654:	4603      	mov	r3, r0
 8010656:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8010658:	7bfb      	ldrb	r3, [r7, #15]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d107      	bne.n	801066e <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	3301      	adds	r3, #1
 8010662:	60bb      	str	r3, [r7, #8]
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	429a      	cmp	r2, r3
 801066a:	d3e3      	bcc.n	8010634 <Flash_store+0x28>
 801066c:	e000      	b.n	8010670 <Flash_store+0x64>
        if (result != HAL_OK) break;
 801066e:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8010670:	f7fa fa6e 	bl	800ab50 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8010674:	7bfb      	ldrb	r3, [r7, #15]
 8010676:	2b00      	cmp	r3, #0
 8010678:	bf0c      	ite	eq
 801067a:	2301      	moveq	r3, #1
 801067c:	2300      	movne	r3, #0
 801067e:	b2db      	uxtb	r3, r3
}
 8010680:	4618      	mov	r0, r3
 8010682:	3714      	adds	r7, #20
 8010684:	46bd      	mov	sp, r7
 8010686:	bd90      	pop	{r4, r7, pc}
 8010688:	20000254 	.word	0x20000254
 801068c:	08004000 	.word	0x08004000

08010690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b08a      	sub	sp, #40	; 0x28
 8010694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010696:	f107 0314 	add.w	r3, r7, #20
 801069a:	2200      	movs	r2, #0
 801069c:	601a      	str	r2, [r3, #0]
 801069e:	605a      	str	r2, [r3, #4]
 80106a0:	609a      	str	r2, [r3, #8]
 80106a2:	60da      	str	r2, [r3, #12]
 80106a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80106a6:	2300      	movs	r3, #0
 80106a8:	613b      	str	r3, [r7, #16]
 80106aa:	4b45      	ldr	r3, [pc, #276]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ae:	4a44      	ldr	r2, [pc, #272]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106b0:	f043 0304 	orr.w	r3, r3, #4
 80106b4:	6313      	str	r3, [r2, #48]	; 0x30
 80106b6:	4b42      	ldr	r3, [pc, #264]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ba:	f003 0304 	and.w	r3, r3, #4
 80106be:	613b      	str	r3, [r7, #16]
 80106c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80106c2:	2300      	movs	r3, #0
 80106c4:	60fb      	str	r3, [r7, #12]
 80106c6:	4b3e      	ldr	r3, [pc, #248]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ca:	4a3d      	ldr	r2, [pc, #244]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106d0:	6313      	str	r3, [r2, #48]	; 0x30
 80106d2:	4b3b      	ldr	r3, [pc, #236]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106da:	60fb      	str	r3, [r7, #12]
 80106dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80106de:	2300      	movs	r3, #0
 80106e0:	60bb      	str	r3, [r7, #8]
 80106e2:	4b37      	ldr	r3, [pc, #220]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e6:	4a36      	ldr	r2, [pc, #216]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106e8:	f043 0301 	orr.w	r3, r3, #1
 80106ec:	6313      	str	r3, [r2, #48]	; 0x30
 80106ee:	4b34      	ldr	r3, [pc, #208]	; (80107c0 <MX_GPIO_Init+0x130>)
 80106f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f2:	f003 0301 	and.w	r3, r3, #1
 80106f6:	60bb      	str	r3, [r7, #8]
 80106f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80106fa:	2300      	movs	r3, #0
 80106fc:	607b      	str	r3, [r7, #4]
 80106fe:	4b30      	ldr	r3, [pc, #192]	; (80107c0 <MX_GPIO_Init+0x130>)
 8010700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010702:	4a2f      	ldr	r2, [pc, #188]	; (80107c0 <MX_GPIO_Init+0x130>)
 8010704:	f043 0302 	orr.w	r3, r3, #2
 8010708:	6313      	str	r3, [r2, #48]	; 0x30
 801070a:	4b2d      	ldr	r3, [pc, #180]	; (80107c0 <MX_GPIO_Init+0x130>)
 801070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070e:	f003 0302 	and.w	r3, r3, #2
 8010712:	607b      	str	r3, [r7, #4]
 8010714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 8010716:	2200      	movs	r2, #0
 8010718:	f248 6160 	movw	r1, #34400	; 0x8660
 801071c:	4829      	ldr	r0, [pc, #164]	; (80107c4 <MX_GPIO_Init+0x134>)
 801071e:	f7fa fe2f 	bl	800b380 <HAL_GPIO_WritePin>
                          |SPI3_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 8010722:	2200      	movs	r2, #0
 8010724:	f241 0150 	movw	r1, #4176	; 0x1050
 8010728:	4827      	ldr	r0, [pc, #156]	; (80107c8 <MX_GPIO_Init+0x138>)
 801072a:	f7fa fe29 	bl	800b380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010734:	4b25      	ldr	r3, [pc, #148]	; (80107cc <MX_GPIO_Init+0x13c>)
 8010736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010738:	2300      	movs	r3, #0
 801073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801073c:	f107 0314 	add.w	r3, r7, #20
 8010740:	4619      	mov	r1, r3
 8010742:	4823      	ldr	r0, [pc, #140]	; (80107d0 <MX_GPIO_Init+0x140>)
 8010744:	f7fa fc72 	bl	800b02c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 8010748:	f248 6360 	movw	r3, #34400	; 0x8660
 801074c:	617b      	str	r3, [r7, #20]
                          |SPI3_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801074e:	2301      	movs	r3, #1
 8010750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010752:	2300      	movs	r3, #0
 8010754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010756:	2300      	movs	r3, #0
 8010758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801075a:	f107 0314 	add.w	r3, r7, #20
 801075e:	4619      	mov	r1, r3
 8010760:	4818      	ldr	r0, [pc, #96]	; (80107c4 <MX_GPIO_Init+0x134>)
 8010762:	f7fa fc63 	bl	800b02c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8010766:	f241 0350 	movw	r3, #4176	; 0x1050
 801076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801076c:	2301      	movs	r3, #1
 801076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010770:	2300      	movs	r3, #0
 8010772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010774:	2300      	movs	r3, #0
 8010776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010778:	f107 0314 	add.w	r3, r7, #20
 801077c:	4619      	mov	r1, r3
 801077e:	4812      	ldr	r0, [pc, #72]	; (80107c8 <MX_GPIO_Init+0x138>)
 8010780:	f7fa fc54 	bl	800b02c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 8010784:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8010788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801078a:	2300      	movs	r3, #0
 801078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801078e:	2301      	movs	r3, #1
 8010790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010792:	f107 0314 	add.w	r3, r7, #20
 8010796:	4619      	mov	r1, r3
 8010798:	480b      	ldr	r0, [pc, #44]	; (80107c8 <MX_GPIO_Init+0x138>)
 801079a:	f7fa fc47 	bl	800b02c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 801079e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80107a4:	2300      	movs	r3, #0
 80107a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107a8:	2300      	movs	r3, #0
 80107aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 80107ac:	f107 0314 	add.w	r3, r7, #20
 80107b0:	4619      	mov	r1, r3
 80107b2:	4804      	ldr	r0, [pc, #16]	; (80107c4 <MX_GPIO_Init+0x134>)
 80107b4:	f7fa fc3a 	bl	800b02c <HAL_GPIO_Init>

}
 80107b8:	bf00      	nop
 80107ba:	3728      	adds	r7, #40	; 0x28
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	40023800 	.word	0x40023800
 80107c4:	40020000 	.word	0x40020000
 80107c8:	40020400 	.word	0x40020400
 80107cc:	10210000 	.word	0x10210000
 80107d0:	40020800 	.word	0x40020800

080107d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80107de:	f7f8 fa9b 	bl	8008d18 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80107e2:	f000 f909 	bl	80109f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80107e6:	f7ff ff53 	bl	8010690 <MX_GPIO_Init>
  MX_DMA_Init();
 80107ea:	f7ff fb5f 	bl	800feac <MX_DMA_Init>
  MX_ADC1_Init();
 80107ee:	f7fe ff61 	bl	800f6b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80107f2:	f7fe ffb1 	bl	800f758 <MX_ADC2_Init>
  MX_ADC3_Init();
 80107f6:	f7ff f801 	bl	800f7fc <MX_ADC3_Init>
  MX_CAN1_Init();
 80107fa:	f7ff f9af 	bl	800fb5c <MX_CAN1_Init>
  MX_SPI2_Init();
 80107fe:	f000 fdfb 	bl	80113f8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8010802:	f000 fe31 	bl	8011468 <MX_SPI3_Init>
  MX_TIM8_Init();
 8010806:	f001 f841 	bl	801188c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 801080a:	f001 f999 	bl	8011b40 <MX_USART2_UART_Init>


  //initialise_monitor_handles();


  DRV_Init();
 801080e:	f7fe feb9 	bl	800f584 <DRV_Init>

#endif


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 8010812:	2201      	movs	r2, #1
 8010814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010818:	4870      	ldr	r0, [pc, #448]	; (80109dc <main+0x208>)
 801081a:	f7fa fdb1 	bl	800b380 <HAL_GPIO_WritePin>


  //printf("Hello SPI Gate Driver\n");


  DRV_ReadData(&drv8323, ADDR_OCP_Control);
 801081e:	2105      	movs	r1, #5
 8010820:	486f      	ldr	r0, [pc, #444]	; (80109e0 <main+0x20c>)
 8010822:	f7fe ff04 	bl	800f62e <DRV_ReadData>

  drv8323.Reg.OCP_Control.DEAD_TIME = 0b01; // Dead Time : 100ns
 8010826:	4a6e      	ldr	r2, [pc, #440]	; (80109e0 <main+0x20c>)
 8010828:	7d53      	ldrb	r3, [r2, #21]
 801082a:	2101      	movs	r1, #1
 801082c:	f361 0301 	bfi	r3, r1, #0, #2
 8010830:	7553      	strb	r3, [r2, #21]
  drv8323.Reg.OCP_Control.OCP_MODE = 0b00; // Overcurrentcausesa latchedfault
 8010832:	4a6b      	ldr	r2, [pc, #428]	; (80109e0 <main+0x20c>)
 8010834:	7d13      	ldrb	r3, [r2, #20]
 8010836:	f36f 1387 	bfc	r3, #6, #2
 801083a:	7513      	strb	r3, [r2, #20]
  drv8323.Reg.OCP_Control.OCP_DEG = 0b11; // Deglitch Time of 8us
 801083c:	4a68      	ldr	r2, [pc, #416]	; (80109e0 <main+0x20c>)
 801083e:	7d13      	ldrb	r3, [r2, #20]
 8010840:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8010844:	7513      	strb	r3, [r2, #20]
  drv8323.Reg.OCP_Control.VDS_LVL = 0b1001; // VDS = 0.75V -> ID = 75A
 8010846:	4a66      	ldr	r2, [pc, #408]	; (80109e0 <main+0x20c>)
 8010848:	7d13      	ldrb	r3, [r2, #20]
 801084a:	2109      	movs	r1, #9
 801084c:	f361 0303 	bfi	r3, r1, #0, #4
 8010850:	7513      	strb	r3, [r2, #20]

  DRV_WriteData(&drv8323, ADDR_OCP_Control);
 8010852:	2105      	movs	r1, #5
 8010854:	4862      	ldr	r0, [pc, #392]	; (80109e0 <main+0x20c>)
 8010856:	f7fe fead 	bl	800f5b4 <DRV_WriteData>


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 801085a:	2106      	movs	r1, #6
 801085c:	4860      	ldr	r0, [pc, #384]	; (80109e0 <main+0x20c>)
 801085e:	f7fe fee6 	bl	800f62e <DRV_ReadData>

  drv8323.Reg.CSA_Control.SEN_LVL = 0b11; // Vsense = 0.5V -> 50A
 8010862:	4a5f      	ldr	r2, [pc, #380]	; (80109e0 <main+0x20c>)
 8010864:	7e13      	ldrb	r3, [r2, #24]
 8010866:	f043 0303 	orr.w	r3, r3, #3
 801086a:	7613      	strb	r3, [r2, #24]

  DRV_WriteData(&drv8323, ADDR_CSA_Control);
 801086c:	2106      	movs	r1, #6
 801086e:	485c      	ldr	r0, [pc, #368]	; (80109e0 <main+0x20c>)
 8010870:	f7fe fea0 	bl	800f5b4 <DRV_WriteData>
  PRINT_HEX(drv8323.Reg.CSA_Control.word);

#endif

  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8010874:	2201      	movs	r2, #1
 8010876:	f44f 7100 	mov.w	r1, #512	; 0x200
 801087a:	4858      	ldr	r0, [pc, #352]	; (80109dc <main+0x208>)
 801087c:	f7fa fd80 	bl	800b380 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8010880:	200a      	movs	r0, #10
 8010882:	f7f8 fabb 	bl	8008dfc <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 8010886:	2200      	movs	r2, #0
 8010888:	f44f 7100 	mov.w	r1, #512	; 0x200
 801088c:	4853      	ldr	r0, [pc, #332]	; (80109dc <main+0x208>)
 801088e:	f7fa fd77 	bl	800b380 <HAL_GPIO_WritePin>


  /******** DEBUG ********/


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 8010892:	2106      	movs	r1, #6
 8010894:	4852      	ldr	r0, [pc, #328]	; (80109e0 <main+0x20c>)
 8010896:	f7fe feca 	bl	800f62e <DRV_ReadData>

#if DEBUG_PRINT_ENABLE
  PRINT_HEX(drv8323.Reg.CSA_Control.word);
#endif

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 801089a:	2200      	movs	r2, #0
 801089c:	2140      	movs	r1, #64	; 0x40
 801089e:	484f      	ldr	r0, [pc, #316]	; (80109dc <main+0x208>)
 80108a0:	f7fa fd6e 	bl	800b380 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80108a4:	2200      	movs	r2, #0
 80108a6:	2110      	movs	r1, #16
 80108a8:	484e      	ldr	r0, [pc, #312]	; (80109e4 <main+0x210>)
 80108aa:	f7fa fd69 	bl	800b380 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 80108ae:	f7ff fa33 	bl	800fd18 <getChannel>
 80108b2:	4603      	mov	r3, r0
 80108b4:	70fb      	strb	r3, [r7, #3]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80108b6:	2201      	movs	r2, #1
 80108b8:	2120      	movs	r1, #32
 80108ba:	4848      	ldr	r0, [pc, #288]	; (80109dc <main+0x208>)
 80108bc:	f7fa fd60 	bl	800b380 <HAL_GPIO_WritePin>
 80108c0:	2064      	movs	r0, #100	; 0x64
 80108c2:	f7f8 fa9b 	bl	8008dfc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 80108c6:	2200      	movs	r2, #0
 80108c8:	2120      	movs	r1, #32
 80108ca:	4844      	ldr	r0, [pc, #272]	; (80109dc <main+0x208>)
 80108cc:	f7fa fd58 	bl	800b380 <HAL_GPIO_WritePin>
 80108d0:	2064      	movs	r0, #100	; 0x64
 80108d2:	f7f8 fa93 	bl	8008dfc <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80108d6:	2201      	movs	r2, #1
 80108d8:	2120      	movs	r1, #32
 80108da:	4840      	ldr	r0, [pc, #256]	; (80109dc <main+0x208>)
 80108dc:	f7fa fd50 	bl	800b380 <HAL_GPIO_WritePin>
 80108e0:	2064      	movs	r0, #100	; 0x64
 80108e2:	f7f8 fa8b 	bl	8008dfc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 80108e6:	2200      	movs	r2, #0
 80108e8:	2120      	movs	r1, #32
 80108ea:	483c      	ldr	r0, [pc, #240]	; (80109dc <main+0x208>)
 80108ec:	f7fa fd48 	bl	800b380 <HAL_GPIO_WritePin>
 80108f0:	2064      	movs	r0, #100	; 0x64
 80108f2:	f7f8 fa83 	bl	8008dfc <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80108f6:	2201      	movs	r2, #1
 80108f8:	2120      	movs	r1, #32
 80108fa:	4838      	ldr	r0, [pc, #224]	; (80109dc <main+0x208>)
 80108fc:	f7fa fd40 	bl	800b380 <HAL_GPIO_WritePin>
 8010900:	2064      	movs	r0, #100	; 0x64
 8010902:	f7f8 fa7b 	bl	8008dfc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010906:	2200      	movs	r2, #0
 8010908:	2120      	movs	r1, #32
 801090a:	4834      	ldr	r0, [pc, #208]	; (80109dc <main+0x208>)
 801090c:	f7fa fd38 	bl	800b380 <HAL_GPIO_WritePin>
 8010910:	2064      	movs	r0, #100	; 0x64
 8010912:	f7f8 fa73 	bl	8008dfc <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010916:	2201      	movs	r2, #1
 8010918:	2120      	movs	r1, #32
 801091a:	4830      	ldr	r0, [pc, #192]	; (80109dc <main+0x208>)
 801091c:	f7fa fd30 	bl	800b380 <HAL_GPIO_WritePin>
 8010920:	2064      	movs	r0, #100	; 0x64
 8010922:	f7f8 fa6b 	bl	8008dfc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010926:	2200      	movs	r2, #0
 8010928:	2120      	movs	r1, #32
 801092a:	482c      	ldr	r0, [pc, #176]	; (80109dc <main+0x208>)
 801092c:	f7fa fd28 	bl	800b380 <HAL_GPIO_WritePin>
 8010930:	2064      	movs	r0, #100	; 0x64
 8010932:	f7f8 fa63 	bl	8008dfc <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010936:	2201      	movs	r2, #1
 8010938:	2120      	movs	r1, #32
 801093a:	4828      	ldr	r0, [pc, #160]	; (80109dc <main+0x208>)
 801093c:	f7fa fd20 	bl	800b380 <HAL_GPIO_WritePin>
 8010940:	2064      	movs	r0, #100	; 0x64
 8010942:	f7f8 fa5b 	bl	8008dfc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010946:	2200      	movs	r2, #0
 8010948:	2120      	movs	r1, #32
 801094a:	4824      	ldr	r0, [pc, #144]	; (80109dc <main+0x208>)
 801094c:	f7fa fd18 	bl	800b380 <HAL_GPIO_WritePin>
 8010950:	2064      	movs	r0, #100	; 0x64
 8010952:	f7f8 fa53 	bl	8008dfc <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010956:	2201      	movs	r2, #1
 8010958:	2120      	movs	r1, #32
 801095a:	4820      	ldr	r0, [pc, #128]	; (80109dc <main+0x208>)
 801095c:	f7fa fd10 	bl	800b380 <HAL_GPIO_WritePin>
 8010960:	2064      	movs	r0, #100	; 0x64
 8010962:	f7f8 fa4b 	bl	8008dfc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010966:	2200      	movs	r2, #0
 8010968:	2120      	movs	r1, #32
 801096a:	481c      	ldr	r0, [pc, #112]	; (80109dc <main+0x208>)
 801096c:	f7fa fd08 	bl	800b380 <HAL_GPIO_WritePin>
 8010970:	2064      	movs	r0, #100	; 0x64
 8010972:	f7f8 fa43 	bl	8008dfc <HAL_Delay>


  ch = getChannel();
 8010976:	f7ff f9cf 	bl	800fd18 <getChannel>
 801097a:	4603      	mov	r3, r0
 801097c:	70bb      	strb	r3, [r7, #2]




  CAN_Init();
 801097e:	f7ff f97d 	bl	800fc7c <CAN_Init>


  Encoder_Init();
 8010982:	f7ff fac3 	bl	800ff0c <Encoder_Init>


  HAL_Delay(100);
 8010986:	2064      	movs	r0, #100	; 0x64
 8010988:	f7f8 fa38 	bl	8008dfc <HAL_Delay>

  CurrentSensor_Init();
 801098c:	f7fe fade 	bl	800ef4c <CurrentSensor_Init>

  CurrentSensor_Start(&mainCS);
 8010990:	4815      	ldr	r0, [pc, #84]	; (80109e8 <main+0x214>)
 8010992:	f7fe fb13 	bl	800efbc <CurrentSensor_Start>


  ACR_Init();
 8010996:	f7fd fd5b 	bl	800e450 <ACR_Init>

  ASR_Init();
 801099a:	f7fe f977 	bl	800ec8c <ASR_Init>

  APR_Init();
 801099e:	f7fe f83d 	bl	800ea1c <APR_Init>

  PWM_Init();
 80109a2:	f000 f91d 	bl	8010be0 <PWM_Init>

  HAL_Delay(1);
 80109a6:	2001      	movs	r0, #1
 80109a8:	f7f8 fa28 	bl	8008dfc <HAL_Delay>

  ACR_Start(&mainACR);
 80109ac:	480f      	ldr	r0, [pc, #60]	; (80109ec <main+0x218>)
 80109ae:	f7fd fd89 	bl	800e4c4 <ACR_Start>

  setZeroEncoder((p_ch != ch)? 1: 0);
 80109b2:	78fa      	ldrb	r2, [r7, #3]
 80109b4:	78bb      	ldrb	r3, [r7, #2]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	bf14      	ite	ne
 80109ba:	2301      	movne	r3, #1
 80109bc:	2300      	moveq	r3, #0
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7ff faed 	bl	800ffa0 <setZeroEncoder>


  ASR_Start(&mainASR);
 80109c6:	480a      	ldr	r0, [pc, #40]	; (80109f0 <main+0x21c>)
 80109c8:	f7fe f998 	bl	800ecfc <ASR_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  APR_Refresh(&mainAPR);
 80109cc:	4809      	ldr	r0, [pc, #36]	; (80109f4 <main+0x220>)
 80109ce:	f7fe f87f 	bl	800ead0 <APR_Refresh>

	  ASR_Refresh(&mainASR);
 80109d2:	4807      	ldr	r0, [pc, #28]	; (80109f0 <main+0x21c>)
 80109d4:	f7fe f9c0 	bl	800ed58 <ASR_Refresh>
	  APR_Refresh(&mainAPR);
 80109d8:	e7f8      	b.n	80109cc <main+0x1f8>
 80109da:	bf00      	nop
 80109dc:	40020000 	.word	0x40020000
 80109e0:	2000445c 	.word	0x2000445c
 80109e4:	40020400 	.word	0x40020400
 80109e8:	200043d4 	.word	0x200043d4
 80109ec:	200042d0 	.word	0x200042d0
 80109f0:	20004390 	.word	0x20004390
 80109f4:	2000433c 	.word	0x2000433c

080109f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b094      	sub	sp, #80	; 0x50
 80109fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80109fe:	f107 031c 	add.w	r3, r7, #28
 8010a02:	2234      	movs	r2, #52	; 0x34
 8010a04:	2100      	movs	r1, #0
 8010a06:	4618      	mov	r0, r3
 8010a08:	f001 f973 	bl	8011cf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	605a      	str	r2, [r3, #4]
 8010a16:	609a      	str	r2, [r3, #8]
 8010a18:	60da      	str	r2, [r3, #12]
 8010a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	607b      	str	r3, [r7, #4]
 8010a20:	4b29      	ldr	r3, [pc, #164]	; (8010ac8 <SystemClock_Config+0xd0>)
 8010a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a24:	4a28      	ldr	r2, [pc, #160]	; (8010ac8 <SystemClock_Config+0xd0>)
 8010a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8010a2c:	4b26      	ldr	r3, [pc, #152]	; (8010ac8 <SystemClock_Config+0xd0>)
 8010a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a34:	607b      	str	r3, [r7, #4]
 8010a36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010a38:	2300      	movs	r3, #0
 8010a3a:	603b      	str	r3, [r7, #0]
 8010a3c:	4b23      	ldr	r3, [pc, #140]	; (8010acc <SystemClock_Config+0xd4>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a22      	ldr	r2, [pc, #136]	; (8010acc <SystemClock_Config+0xd4>)
 8010a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010a46:	6013      	str	r3, [r2, #0]
 8010a48:	4b20      	ldr	r3, [pc, #128]	; (8010acc <SystemClock_Config+0xd4>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010a50:	603b      	str	r3, [r7, #0]
 8010a52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010a54:	2302      	movs	r3, #2
 8010a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010a5c:	2310      	movs	r3, #16
 8010a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010a60:	2302      	movs	r3, #2
 8010a62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010a64:	2300      	movs	r3, #0
 8010a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8010a68:	2310      	movs	r3, #16
 8010a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8010a6c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010a72:	2302      	movs	r3, #2
 8010a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010a76:	2302      	movs	r3, #2
 8010a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010a7a:	2302      	movs	r3, #2
 8010a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010a7e:	f107 031c 	add.w	r3, r7, #28
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fa ff4c 	bl	800b920 <HAL_RCC_OscConfig>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8010a8e:	f000 f89f 	bl	8010bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010a92:	230f      	movs	r3, #15
 8010a94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010a96:	2302      	movs	r3, #2
 8010a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010a9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010aa8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010aaa:	f107 0308 	add.w	r3, r7, #8
 8010aae:	2105      	movs	r1, #5
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fa fc7f 	bl	800b3b4 <HAL_RCC_ClockConfig>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8010abc:	f000 f888 	bl	8010bd0 <Error_Handler>
  }
}
 8010ac0:	bf00      	nop
 8010ac2:	3750      	adds	r7, #80	; 0x50
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	40023800 	.word	0x40023800
 8010acc:	40007000 	.word	0x40007000

08010ad0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_SET);
 8010ad8:	2201      	movs	r2, #1
 8010ada:	2110      	movs	r1, #16
 8010adc:	4820      	ldr	r0, [pc, #128]	; (8010b60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010ade:	f7fa fc4f 	bl	800b380 <HAL_GPIO_WritePin>

	if(htim->Instance == TIM8 && !__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a1f      	ldr	r2, [pc, #124]	; (8010b64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d130      	bne.n	8010b4e <HAL_TIM_PeriodElapsedCallback+0x7e>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f003 0310 	and.w	r3, r3, #16
 8010af6:	2b10      	cmp	r3, #16
 8010af8:	d029      	beq.n	8010b4e <HAL_TIM_PeriodElapsedCallback+0x7e>
	{

		Encoder_Refresh(&mainEncoder);
 8010afa:	481b      	ldr	r0, [pc, #108]	; (8010b68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8010afc:	f7ff fb28 	bl	8010150 <Encoder_Refresh>

		CurrentSensor_Refresh(&mainCS, sector_SVM);
 8010b00:	4b1a      	ldr	r3, [pc, #104]	; (8010b6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	4619      	mov	r1, r3
 8010b08:	4819      	ldr	r0, [pc, #100]	; (8010b70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8010b0a:	f7fe fa7d 	bl	800f008 <CurrentSensor_Refresh>

		ACR_Refresh(&mainACR);
 8010b0e:	4819      	ldr	r0, [pc, #100]	; (8010b74 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8010b10:	f7fd fcea 	bl	800e4e8 <ACR_Refresh>

		ASR_prescaler(&mainASR);
 8010b14:	4818      	ldr	r0, [pc, #96]	; (8010b78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8010b16:	f7fe f900 	bl	800ed1a <ASR_prescaler>

		APR_prescaler(&mainAPR);
 8010b1a:	4818      	ldr	r0, [pc, #96]	; (8010b7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8010b1c:	f7fd ffbc 	bl	800ea98 <APR_prescaler>

		Encoder_Request(&mainEncoder);
 8010b20:	4811      	ldr	r0, [pc, #68]	; (8010b68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8010b22:	f7ff faf1 	bl	8010108 <Encoder_Request>


		// timeout control
		if(timeoutCount < TIMEOUT_MS * TIMEOUT_BASE_FREQ / 1000)
 8010b26:	4b16      	ldr	r3, [pc, #88]	; (8010b80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010b2e:	d205      	bcs.n	8010b3c <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			timeoutCount += 1;
 8010b30:	4b13      	ldr	r3, [pc, #76]	; (8010b80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	3301      	adds	r3, #1
 8010b36:	4a12      	ldr	r2, [pc, #72]	; (8010b80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8010b38:	6013      	str	r3, [r2, #0]
 8010b3a:	e008      	b.n	8010b4e <HAL_TIM_PeriodElapsedCallback+0x7e>
		}
		else
		{
			stopPWM(&htim8);
 8010b3c:	4811      	ldr	r0, [pc, #68]	; (8010b84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8010b3e:	f000 f889 	bl	8010c54 <stopPWM>
			timeoutCount = 0;
 8010b42:	4b0f      	ldr	r3, [pc, #60]	; (8010b80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8010b44:	2200      	movs	r2, #0
 8010b46:	601a      	str	r2, [r3, #0]
			timeoutState = 1;
 8010b48:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	701a      	strb	r2, [r3, #0]
#endif


	}

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8010b4e:	2200      	movs	r2, #0
 8010b50:	2110      	movs	r1, #16
 8010b52:	4803      	ldr	r0, [pc, #12]	; (8010b60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8010b54:	f7fa fc14 	bl	800b380 <HAL_GPIO_WritePin>

}
 8010b58:	bf00      	nop
 8010b5a:	3708      	adds	r7, #8
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	40020400 	.word	0x40020400
 8010b64:	40010400 	.word	0x40010400
 8010b68:	200046f4 	.word	0x200046f4
 8010b6c:	20004268 	.word	0x20004268
 8010b70:	200043d4 	.word	0x200043d4
 8010b74:	200042d0 	.word	0x200042d0
 8010b78:	20004390 	.word	0x20004390
 8010b7c:	2000433c 	.word	0x2000433c
 8010b80:	20004254 	.word	0x20004254
 8010b84:	200047f0 	.word	0x200047f0
 8010b88:	20004258 	.word	0x20004258

08010b8c <timeoutReset>:



inline void timeoutReset()
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8010b90:	4b0a      	ldr	r3, [pc, #40]	; (8010bbc <timeoutReset+0x30>)
 8010b92:	2200      	movs	r2, #0
 8010b94:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 8010b96:	4b0a      	ldr	r3, [pc, #40]	; (8010bc0 <timeoutReset+0x34>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d10b      	bne.n	8010bb8 <timeoutReset+0x2c>
	{
		timeoutState = 0;
 8010ba0:	4b07      	ldr	r3, [pc, #28]	; (8010bc0 <timeoutReset+0x34>)
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	701a      	strb	r2, [r3, #0]
		ASR_Reset(&mainASR);
 8010ba6:	4807      	ldr	r0, [pc, #28]	; (8010bc4 <timeoutReset+0x38>)
 8010ba8:	f7fe f9b6 	bl	800ef18 <ASR_Reset>
		ACR_Reset(&mainACR);
 8010bac:	4806      	ldr	r0, [pc, #24]	; (8010bc8 <timeoutReset+0x3c>)
 8010bae:	f7fd ff0b 	bl	800e9c8 <ACR_Reset>
		startPWM(&htim8);
 8010bb2:	4806      	ldr	r0, [pc, #24]	; (8010bcc <timeoutReset+0x40>)
 8010bb4:	f000 f82e 	bl	8010c14 <startPWM>
	}
}
 8010bb8:	bf00      	nop
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	20004254 	.word	0x20004254
 8010bc0:	20004258 	.word	0x20004258
 8010bc4:	20004390 	.word	0x20004390
 8010bc8:	200042d0 	.word	0x200042d0
 8010bcc:	200047f0 	.word	0x200047f0

08010bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8010bd4:	bf00      	nop
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
	...

08010be0 <PWM_Init>:

volatile int sector_SVM = 0;


void PWM_Init()
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8010be4:	4b0a      	ldr	r3, [pc, #40]	; (8010c10 <PWM_Init+0x30>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f06f 0201 	mvn.w	r2, #1
 8010bec:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8010bee:	4b08      	ldr	r3, [pc, #32]	; (8010c10 <PWM_Init+0x30>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	68da      	ldr	r2, [r3, #12]
 8010bf4:	4b06      	ldr	r3, [pc, #24]	; (8010c10 <PWM_Init+0x30>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f042 0201 	orr.w	r2, r2, #1
 8010bfc:	60da      	str	r2, [r3, #12]


	HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 8010bfe:	2101      	movs	r1, #1
 8010c00:	4803      	ldr	r0, [pc, #12]	; (8010c10 <PWM_Init+0x30>)
 8010c02:	f7fc f9e1 	bl	800cfc8 <HAL_TIM_GenerateEvent>
	//HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);


	startPWM(&htim8);
 8010c06:	4802      	ldr	r0, [pc, #8]	; (8010c10 <PWM_Init+0x30>)
 8010c08:	f000 f804 	bl	8010c14 <startPWM>

}
 8010c0c:	bf00      	nop
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	200047f0 	.word	0x200047f0

08010c14 <startPWM>:


inline void startPWM(TIM_HandleTypeDef *htim)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f7fb fee6 	bl	800c9f0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 8010c24:	2104      	movs	r1, #4
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7fb fee2 	bl	800c9f0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 8010c2c:	2108      	movs	r1, #8
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f7fb fede 	bl	800c9f0 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_1);
 8010c34:	2100      	movs	r1, #0
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7fc fddb 	bl	800d7f2 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_2);
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7fc fdd7 	bl	800d7f2 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_3);
 8010c44:	2108      	movs	r1, #8
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7fc fdd3 	bl	800d7f2 <HAL_TIMEx_PWMN_Start_IT>

}
 8010c4c:	bf00      	nop
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <stopPWM>:



inline void stopPWM(TIM_HandleTypeDef *htim)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7fb ff4a 	bl	800caf8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 8010c64:	2104      	movs	r1, #4
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7fb ff46 	bl	800caf8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_3);
 8010c6c:	2108      	movs	r1, #8
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f7fb ff42 	bl	800caf8 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_1);
 8010c74:	2100      	movs	r1, #0
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7fc fe10 	bl	800d89c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_2);
 8010c7c:	2104      	movs	r1, #4
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f7fc fe0c 	bl	800d89c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_3);
 8010c84:	2108      	movs	r1, #8
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f7fc fe08 	bl	800d89c <HAL_TIMEx_PWMN_Stop_IT>

}
 8010c8c:	bf00      	nop
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <setSVM_dq>:


inline void setSVM_dq(TIM_HandleTypeDef *htim, float Vd_ref, float Vq_ref, float cos_theta_re, float sin_theta_re)
{
 8010c94:	b5b0      	push	{r4, r5, r7, lr}
 8010c96:	b086      	sub	sp, #24
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6178      	str	r0, [r7, #20]
 8010c9c:	ed87 0a04 	vstr	s0, [r7, #16]
 8010ca0:	edc7 0a03 	vstr	s1, [r7, #12]
 8010ca4:	ed87 1a02 	vstr	s2, [r7, #8]
 8010ca8:	edc7 1a01 	vstr	s3, [r7, #4]
	static float x1, y1, x2, y2;
	static float x, y;
	static float vect1, vect2;


	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 8010cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8010cb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8010cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010cb8:	edd7 6a03 	vldr	s13, [r7, #12]
 8010cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8010cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cc8:	4bad      	ldr	r3, [pc, #692]	; (8010f80 <setSVM_dq+0x2ec>)
 8010cca:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 8010cce:	ed97 7a04 	vldr	s14, [r7, #16]
 8010cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8010cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010cda:	edd7 6a03 	vldr	s13, [r7, #12]
 8010cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8010ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cea:	4ba6      	ldr	r3, [pc, #664]	; (8010f84 <setSVM_dq+0x2f0>)
 8010cec:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 8010cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cf4:	4ba3      	ldr	r3, [pc, #652]	; (8010f84 <setSVM_dq+0x2f0>)
 8010cf6:	edd3 7a00 	vldr	s15, [r3]
 8010cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010cfe:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8010f88 <setSVM_dq+0x2f4>
 8010d02:	4b9f      	ldr	r3, [pc, #636]	; (8010f80 <setSVM_dq+0x2ec>)
 8010d04:	edd3 7a00 	vldr	s15, [r3]
 8010d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d10:	4b9e      	ldr	r3, [pc, #632]	; (8010f8c <setSVM_dq+0x2f8>)
 8010d12:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8010d16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010d1a:	4b9a      	ldr	r3, [pc, #616]	; (8010f84 <setSVM_dq+0x2f0>)
 8010d1c:	edd3 7a00 	vldr	s15, [r3]
 8010d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d24:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8010f90 <setSVM_dq+0x2fc>
 8010d28:	4b95      	ldr	r3, [pc, #596]	; (8010f80 <setSVM_dq+0x2ec>)
 8010d2a:	edd3 7a00 	vldr	s15, [r3]
 8010d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d36:	4b97      	ldr	r3, [pc, #604]	; (8010f94 <setSVM_dq+0x300>)
 8010d38:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8010d3c:	4b93      	ldr	r3, [pc, #588]	; (8010f8c <setSVM_dq+0x2f8>)
 8010d3e:	edd3 7a00 	vldr	s15, [r3]
 8010d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4a:	db1e      	blt.n	8010d8a <setSVM_dq+0xf6>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8010d4c:	4b91      	ldr	r3, [pc, #580]	; (8010f94 <setSVM_dq+0x300>)
 8010d4e:	edd3 7a00 	vldr	s15, [r3]
 8010d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5a:	d803      	bhi.n	8010d64 <setSVM_dq+0xd0>
 8010d5c:	4b8e      	ldr	r3, [pc, #568]	; (8010f98 <setSVM_dq+0x304>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	e030      	b.n	8010dc6 <setSVM_dq+0x132>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8010d64:	4b89      	ldr	r3, [pc, #548]	; (8010f8c <setSVM_dq+0x2f8>)
 8010d66:	ed93 7a00 	vldr	s14, [r3]
 8010d6a:	4b8a      	ldr	r3, [pc, #552]	; (8010f94 <setSVM_dq+0x300>)
 8010d6c:	edd3 7a00 	vldr	s15, [r3]
 8010d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d78:	db03      	blt.n	8010d82 <setSVM_dq+0xee>
 8010d7a:	4b87      	ldr	r3, [pc, #540]	; (8010f98 <setSVM_dq+0x304>)
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	601a      	str	r2, [r3, #0]
 8010d80:	e021      	b.n	8010dc6 <setSVM_dq+0x132>
		else						sector_SVM = 2;
 8010d82:	4b85      	ldr	r3, [pc, #532]	; (8010f98 <setSVM_dq+0x304>)
 8010d84:	2202      	movs	r2, #2
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	e01d      	b.n	8010dc6 <setSVM_dq+0x132>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 8010d8a:	4b82      	ldr	r3, [pc, #520]	; (8010f94 <setSVM_dq+0x300>)
 8010d8c:	edd3 7a00 	vldr	s15, [r3]
 8010d90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d98:	db03      	blt.n	8010da2 <setSVM_dq+0x10e>
 8010d9a:	4b7f      	ldr	r3, [pc, #508]	; (8010f98 <setSVM_dq+0x304>)
 8010d9c:	2203      	movs	r2, #3
 8010d9e:	601a      	str	r2, [r3, #0]
 8010da0:	e011      	b.n	8010dc6 <setSVM_dq+0x132>
		else if(cross0 <= cross1)	sector_SVM = 4;
 8010da2:	4b7a      	ldr	r3, [pc, #488]	; (8010f8c <setSVM_dq+0x2f8>)
 8010da4:	ed93 7a00 	vldr	s14, [r3]
 8010da8:	4b7a      	ldr	r3, [pc, #488]	; (8010f94 <setSVM_dq+0x300>)
 8010daa:	edd3 7a00 	vldr	s15, [r3]
 8010dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db6:	d803      	bhi.n	8010dc0 <setSVM_dq+0x12c>
 8010db8:	4b77      	ldr	r3, [pc, #476]	; (8010f98 <setSVM_dq+0x304>)
 8010dba:	2204      	movs	r2, #4
 8010dbc:	601a      	str	r2, [r3, #0]
 8010dbe:	e002      	b.n	8010dc6 <setSVM_dq+0x132>
		else						sector_SVM = 5;
 8010dc0:	4b75      	ldr	r3, [pc, #468]	; (8010f98 <setSVM_dq+0x304>)
 8010dc2:	2205      	movs	r2, #5
 8010dc4:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 8010dc6:	4b74      	ldr	r3, [pc, #464]	; (8010f98 <setSVM_dq+0x304>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4a74      	ldr	r2, [pc, #464]	; (8010f9c <setSVM_dq+0x308>)
 8010dcc:	00db      	lsls	r3, r3, #3
 8010dce:	4413      	add	r3, r2
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a73      	ldr	r2, [pc, #460]	; (8010fa0 <setSVM_dq+0x30c>)
 8010dd4:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 8010dd6:	4b70      	ldr	r3, [pc, #448]	; (8010f98 <setSVM_dq+0x304>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4a70      	ldr	r2, [pc, #448]	; (8010f9c <setSVM_dq+0x308>)
 8010ddc:	00db      	lsls	r3, r3, #3
 8010dde:	4413      	add	r3, r2
 8010de0:	3304      	adds	r3, #4
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4a6f      	ldr	r2, [pc, #444]	; (8010fa4 <setSVM_dq+0x310>)
 8010de6:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 8010de8:	4b6b      	ldr	r3, [pc, #428]	; (8010f98 <setSVM_dq+0x304>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	3301      	adds	r3, #1
 8010dee:	4a6b      	ldr	r2, [pc, #428]	; (8010f9c <setSVM_dq+0x308>)
 8010df0:	00db      	lsls	r3, r3, #3
 8010df2:	4413      	add	r3, r2
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4a6c      	ldr	r2, [pc, #432]	; (8010fa8 <setSVM_dq+0x314>)
 8010df8:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 8010dfa:	4b67      	ldr	r3, [pc, #412]	; (8010f98 <setSVM_dq+0x304>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	4a66      	ldr	r2, [pc, #408]	; (8010f9c <setSVM_dq+0x308>)
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	4413      	add	r3, r2
 8010e06:	3304      	adds	r3, #4
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a68      	ldr	r2, [pc, #416]	; (8010fac <setSVM_dq+0x318>)
 8010e0c:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8010e0e:	4b67      	ldr	r3, [pc, #412]	; (8010fac <setSVM_dq+0x318>)
 8010e10:	ed93 7a00 	vldr	s14, [r3]
 8010e14:	4b5a      	ldr	r3, [pc, #360]	; (8010f80 <setSVM_dq+0x2ec>)
 8010e16:	edd3 7a00 	vldr	s15, [r3]
 8010e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e1e:	4b62      	ldr	r3, [pc, #392]	; (8010fa8 <setSVM_dq+0x314>)
 8010e20:	edd3 6a00 	vldr	s13, [r3]
 8010e24:	4b57      	ldr	r3, [pc, #348]	; (8010f84 <setSVM_dq+0x2f0>)
 8010e26:	edd3 7a00 	vldr	s15, [r3]
 8010e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8010e32:	4b5b      	ldr	r3, [pc, #364]	; (8010fa0 <setSVM_dq+0x30c>)
 8010e34:	ed93 7a00 	vldr	s14, [r3]
 8010e38:	4b5c      	ldr	r3, [pc, #368]	; (8010fac <setSVM_dq+0x318>)
 8010e3a:	edd3 7a00 	vldr	s15, [r3]
 8010e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e42:	4b58      	ldr	r3, [pc, #352]	; (8010fa4 <setSVM_dq+0x310>)
 8010e44:	ed93 6a00 	vldr	s12, [r3]
 8010e48:	4b57      	ldr	r3, [pc, #348]	; (8010fa8 <setSVM_dq+0x314>)
 8010e4a:	edd3 7a00 	vldr	s15, [r3]
 8010e4e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e56:	4b56      	ldr	r3, [pc, #344]	; (8010fb0 <setSVM_dq+0x31c>)
 8010e58:	edd3 7a00 	vldr	s15, [r3]
 8010e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e64:	4b53      	ldr	r3, [pc, #332]	; (8010fb4 <setSVM_dq+0x320>)
 8010e66:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8010e6a:	4b4e      	ldr	r3, [pc, #312]	; (8010fa4 <setSVM_dq+0x310>)
 8010e6c:	edd3 7a00 	vldr	s15, [r3]
 8010e70:	eeb1 7a67 	vneg.f32	s14, s15
 8010e74:	4b42      	ldr	r3, [pc, #264]	; (8010f80 <setSVM_dq+0x2ec>)
 8010e76:	edd3 7a00 	vldr	s15, [r3]
 8010e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e7e:	4b48      	ldr	r3, [pc, #288]	; (8010fa0 <setSVM_dq+0x30c>)
 8010e80:	edd3 6a00 	vldr	s13, [r3]
 8010e84:	4b3f      	ldr	r3, [pc, #252]	; (8010f84 <setSVM_dq+0x2f0>)
 8010e86:	edd3 7a00 	vldr	s15, [r3]
 8010e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e8e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010e92:	4b43      	ldr	r3, [pc, #268]	; (8010fa0 <setSVM_dq+0x30c>)
 8010e94:	ed93 7a00 	vldr	s14, [r3]
 8010e98:	4b44      	ldr	r3, [pc, #272]	; (8010fac <setSVM_dq+0x318>)
 8010e9a:	edd3 7a00 	vldr	s15, [r3]
 8010e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ea2:	4b40      	ldr	r3, [pc, #256]	; (8010fa4 <setSVM_dq+0x310>)
 8010ea4:	ed93 6a00 	vldr	s12, [r3]
 8010ea8:	4b3f      	ldr	r3, [pc, #252]	; (8010fa8 <setSVM_dq+0x314>)
 8010eaa:	edd3 7a00 	vldr	s15, [r3]
 8010eae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010eb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010eb6:	4b3e      	ldr	r3, [pc, #248]	; (8010fb0 <setSVM_dq+0x31c>)
 8010eb8:	edd3 7a00 	vldr	s15, [r3]
 8010ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ec4:	4b3c      	ldr	r3, [pc, #240]	; (8010fb8 <setSVM_dq+0x324>)
 8010ec6:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 8010eca:	4b33      	ldr	r3, [pc, #204]	; (8010f98 <setSVM_dq+0x304>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b05      	cmp	r3, #5
 8010ed0:	f200 81d8 	bhi.w	8011284 <setSVM_dq+0x5f0>
 8010ed4:	a201      	add	r2, pc, #4	; (adr r2, 8010edc <setSVM_dq+0x248>)
 8010ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eda:	bf00      	nop
 8010edc:	08010ef5 	.word	0x08010ef5
 8010ee0:	08010fc9 	.word	0x08010fc9
 8010ee4:	08011055 	.word	0x08011055
 8010ee8:	080110e1 	.word	0x080110e1
 8010eec:	0801116d 	.word	0x0801116d
 8010ef0:	080111f9 	.word	0x080111f9
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8010ef4:	4b2f      	ldr	r3, [pc, #188]	; (8010fb4 <setSVM_dq+0x320>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7f7 fa0d 	bl	8008318 <__aeabi_f2d>
 8010efe:	4603      	mov	r3, r0
 8010f00:	460c      	mov	r4, r1
 8010f02:	461a      	mov	r2, r3
 8010f04:	4623      	mov	r3, r4
 8010f06:	f04f 0000 	mov.w	r0, #0
 8010f0a:	492c      	ldr	r1, [pc, #176]	; (8010fbc <setSVM_dq+0x328>)
 8010f0c:	f7f7 f8a4 	bl	8008058 <__aeabi_dsub>
 8010f10:	4603      	mov	r3, r0
 8010f12:	460c      	mov	r4, r1
 8010f14:	4625      	mov	r5, r4
 8010f16:	461c      	mov	r4, r3
 8010f18:	4b27      	ldr	r3, [pc, #156]	; (8010fb8 <setSVM_dq+0x324>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7f7 f9fb 	bl	8008318 <__aeabi_f2d>
 8010f22:	4602      	mov	r2, r0
 8010f24:	460b      	mov	r3, r1
 8010f26:	4620      	mov	r0, r4
 8010f28:	4629      	mov	r1, r5
 8010f2a:	f7f7 f895 	bl	8008058 <__aeabi_dsub>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	460c      	mov	r4, r1
 8010f32:	4618      	mov	r0, r3
 8010f34:	4621      	mov	r1, r4
 8010f36:	f04f 0200 	mov.w	r2, #0
 8010f3a:	4b21      	ldr	r3, [pc, #132]	; (8010fc0 <setSVM_dq+0x32c>)
 8010f3c:	f7f7 fa44 	bl	80083c8 <__aeabi_dmul>
 8010f40:	4603      	mov	r3, r0
 8010f42:	460c      	mov	r4, r1
 8010f44:	4618      	mov	r0, r3
 8010f46:	4621      	mov	r1, r4
 8010f48:	f7f7 fd16 	bl	8008978 <__aeabi_d2f>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	4b1d      	ldr	r3, [pc, #116]	; (8010fc4 <setSVM_dq+0x330>)
 8010f50:	609a      	str	r2, [r3, #8]
 8010f52:	4b1c      	ldr	r3, [pc, #112]	; (8010fc4 <setSVM_dq+0x330>)
 8010f54:	ed93 7a02 	vldr	s14, [r3, #8]
 8010f58:	4b17      	ldr	r3, [pc, #92]	; (8010fb8 <setSVM_dq+0x324>)
 8010f5a:	edd3 7a00 	vldr	s15, [r3]
 8010f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f62:	4b18      	ldr	r3, [pc, #96]	; (8010fc4 <setSVM_dq+0x330>)
 8010f64:	edc3 7a01 	vstr	s15, [r3, #4]
 8010f68:	4b16      	ldr	r3, [pc, #88]	; (8010fc4 <setSVM_dq+0x330>)
 8010f6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8010f6e:	4b11      	ldr	r3, [pc, #68]	; (8010fb4 <setSVM_dq+0x320>)
 8010f70:	edd3 7a00 	vldr	s15, [r3]
 8010f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f78:	4b12      	ldr	r3, [pc, #72]	; (8010fc4 <setSVM_dq+0x330>)
 8010f7a:	edc3 7a00 	vstr	s15, [r3]
 8010f7e:	e181      	b.n	8011284 <setSVM_dq+0x5f0>
 8010f80:	2000426c 	.word	0x2000426c
 8010f84:	20004270 	.word	0x20004270
 8010f88:	00000000 	.word	0x00000000
 8010f8c:	20004274 	.word	0x20004274
 8010f90:	3f5db22d 	.word	0x3f5db22d
 8010f94:	20004278 	.word	0x20004278
 8010f98:	20004268 	.word	0x20004268
 8010f9c:	08013928 	.word	0x08013928
 8010fa0:	2000427c 	.word	0x2000427c
 8010fa4:	20004280 	.word	0x20004280
 8010fa8:	20004284 	.word	0x20004284
 8010fac:	20004288 	.word	0x20004288
 8010fb0:	20000008 	.word	0x20000008
 8010fb4:	2000428c 	.word	0x2000428c
 8010fb8:	20004290 	.word	0x20004290
 8010fbc:	3ff00000 	.word	0x3ff00000
 8010fc0:	3fe00000 	.word	0x3fe00000
 8010fc4:	20004294 	.word	0x20004294
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 8010fc8:	4bc3      	ldr	r3, [pc, #780]	; (80112d8 <setSVM_dq+0x644>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7f7 f9a3 	bl	8008318 <__aeabi_f2d>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	460c      	mov	r4, r1
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	4623      	mov	r3, r4
 8010fda:	f04f 0000 	mov.w	r0, #0
 8010fde:	49bf      	ldr	r1, [pc, #764]	; (80112dc <setSVM_dq+0x648>)
 8010fe0:	f7f7 f83a 	bl	8008058 <__aeabi_dsub>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	460c      	mov	r4, r1
 8010fe8:	4625      	mov	r5, r4
 8010fea:	461c      	mov	r4, r3
 8010fec:	4bbc      	ldr	r3, [pc, #752]	; (80112e0 <setSVM_dq+0x64c>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7f7 f991 	bl	8008318 <__aeabi_f2d>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	f7f7 f82b 	bl	8008058 <__aeabi_dsub>
 8011002:	4603      	mov	r3, r0
 8011004:	460c      	mov	r4, r1
 8011006:	4618      	mov	r0, r3
 8011008:	4621      	mov	r1, r4
 801100a:	f04f 0200 	mov.w	r2, #0
 801100e:	4bb5      	ldr	r3, [pc, #724]	; (80112e4 <setSVM_dq+0x650>)
 8011010:	f7f7 f9da 	bl	80083c8 <__aeabi_dmul>
 8011014:	4603      	mov	r3, r0
 8011016:	460c      	mov	r4, r1
 8011018:	4618      	mov	r0, r3
 801101a:	4621      	mov	r1, r4
 801101c:	f7f7 fcac 	bl	8008978 <__aeabi_d2f>
 8011020:	4602      	mov	r2, r0
 8011022:	4bb1      	ldr	r3, [pc, #708]	; (80112e8 <setSVM_dq+0x654>)
 8011024:	609a      	str	r2, [r3, #8]
 8011026:	4bb0      	ldr	r3, [pc, #704]	; (80112e8 <setSVM_dq+0x654>)
 8011028:	ed93 7a02 	vldr	s14, [r3, #8]
 801102c:	4baa      	ldr	r3, [pc, #680]	; (80112d8 <setSVM_dq+0x644>)
 801102e:	edd3 7a00 	vldr	s15, [r3]
 8011032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011036:	4bac      	ldr	r3, [pc, #688]	; (80112e8 <setSVM_dq+0x654>)
 8011038:	edc3 7a00 	vstr	s15, [r3]
 801103c:	4baa      	ldr	r3, [pc, #680]	; (80112e8 <setSVM_dq+0x654>)
 801103e:	ed93 7a00 	vldr	s14, [r3]
 8011042:	4ba7      	ldr	r3, [pc, #668]	; (80112e0 <setSVM_dq+0x64c>)
 8011044:	edd3 7a00 	vldr	s15, [r3]
 8011048:	ee77 7a27 	vadd.f32	s15, s14, s15
 801104c:	4ba6      	ldr	r3, [pc, #664]	; (80112e8 <setSVM_dq+0x654>)
 801104e:	edc3 7a01 	vstr	s15, [r3, #4]
 8011052:	e117      	b.n	8011284 <setSVM_dq+0x5f0>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8011054:	4ba0      	ldr	r3, [pc, #640]	; (80112d8 <setSVM_dq+0x644>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4618      	mov	r0, r3
 801105a:	f7f7 f95d 	bl	8008318 <__aeabi_f2d>
 801105e:	4603      	mov	r3, r0
 8011060:	460c      	mov	r4, r1
 8011062:	461a      	mov	r2, r3
 8011064:	4623      	mov	r3, r4
 8011066:	f04f 0000 	mov.w	r0, #0
 801106a:	499c      	ldr	r1, [pc, #624]	; (80112dc <setSVM_dq+0x648>)
 801106c:	f7f6 fff4 	bl	8008058 <__aeabi_dsub>
 8011070:	4603      	mov	r3, r0
 8011072:	460c      	mov	r4, r1
 8011074:	4625      	mov	r5, r4
 8011076:	461c      	mov	r4, r3
 8011078:	4b99      	ldr	r3, [pc, #612]	; (80112e0 <setSVM_dq+0x64c>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4618      	mov	r0, r3
 801107e:	f7f7 f94b 	bl	8008318 <__aeabi_f2d>
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	4620      	mov	r0, r4
 8011088:	4629      	mov	r1, r5
 801108a:	f7f6 ffe5 	bl	8008058 <__aeabi_dsub>
 801108e:	4603      	mov	r3, r0
 8011090:	460c      	mov	r4, r1
 8011092:	4618      	mov	r0, r3
 8011094:	4621      	mov	r1, r4
 8011096:	f04f 0200 	mov.w	r2, #0
 801109a:	4b92      	ldr	r3, [pc, #584]	; (80112e4 <setSVM_dq+0x650>)
 801109c:	f7f7 f994 	bl	80083c8 <__aeabi_dmul>
 80110a0:	4603      	mov	r3, r0
 80110a2:	460c      	mov	r4, r1
 80110a4:	4618      	mov	r0, r3
 80110a6:	4621      	mov	r1, r4
 80110a8:	f7f7 fc66 	bl	8008978 <__aeabi_d2f>
 80110ac:	4602      	mov	r2, r0
 80110ae:	4b8e      	ldr	r3, [pc, #568]	; (80112e8 <setSVM_dq+0x654>)
 80110b0:	601a      	str	r2, [r3, #0]
 80110b2:	4b8d      	ldr	r3, [pc, #564]	; (80112e8 <setSVM_dq+0x654>)
 80110b4:	ed93 7a00 	vldr	s14, [r3]
 80110b8:	4b89      	ldr	r3, [pc, #548]	; (80112e0 <setSVM_dq+0x64c>)
 80110ba:	edd3 7a00 	vldr	s15, [r3]
 80110be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110c2:	4b89      	ldr	r3, [pc, #548]	; (80112e8 <setSVM_dq+0x654>)
 80110c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80110c8:	4b87      	ldr	r3, [pc, #540]	; (80112e8 <setSVM_dq+0x654>)
 80110ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80110ce:	4b82      	ldr	r3, [pc, #520]	; (80112d8 <setSVM_dq+0x644>)
 80110d0:	edd3 7a00 	vldr	s15, [r3]
 80110d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110d8:	4b83      	ldr	r3, [pc, #524]	; (80112e8 <setSVM_dq+0x654>)
 80110da:	edc3 7a01 	vstr	s15, [r3, #4]
 80110de:	e0d1      	b.n	8011284 <setSVM_dq+0x5f0>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 80110e0:	4b7d      	ldr	r3, [pc, #500]	; (80112d8 <setSVM_dq+0x644>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7f7 f917 	bl	8008318 <__aeabi_f2d>
 80110ea:	4603      	mov	r3, r0
 80110ec:	460c      	mov	r4, r1
 80110ee:	461a      	mov	r2, r3
 80110f0:	4623      	mov	r3, r4
 80110f2:	f04f 0000 	mov.w	r0, #0
 80110f6:	4979      	ldr	r1, [pc, #484]	; (80112dc <setSVM_dq+0x648>)
 80110f8:	f7f6 ffae 	bl	8008058 <__aeabi_dsub>
 80110fc:	4603      	mov	r3, r0
 80110fe:	460c      	mov	r4, r1
 8011100:	4625      	mov	r5, r4
 8011102:	461c      	mov	r4, r3
 8011104:	4b76      	ldr	r3, [pc, #472]	; (80112e0 <setSVM_dq+0x64c>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	4618      	mov	r0, r3
 801110a:	f7f7 f905 	bl	8008318 <__aeabi_f2d>
 801110e:	4602      	mov	r2, r0
 8011110:	460b      	mov	r3, r1
 8011112:	4620      	mov	r0, r4
 8011114:	4629      	mov	r1, r5
 8011116:	f7f6 ff9f 	bl	8008058 <__aeabi_dsub>
 801111a:	4603      	mov	r3, r0
 801111c:	460c      	mov	r4, r1
 801111e:	4618      	mov	r0, r3
 8011120:	4621      	mov	r1, r4
 8011122:	f04f 0200 	mov.w	r2, #0
 8011126:	4b6f      	ldr	r3, [pc, #444]	; (80112e4 <setSVM_dq+0x650>)
 8011128:	f7f7 f94e 	bl	80083c8 <__aeabi_dmul>
 801112c:	4603      	mov	r3, r0
 801112e:	460c      	mov	r4, r1
 8011130:	4618      	mov	r0, r3
 8011132:	4621      	mov	r1, r4
 8011134:	f7f7 fc20 	bl	8008978 <__aeabi_d2f>
 8011138:	4602      	mov	r2, r0
 801113a:	4b6b      	ldr	r3, [pc, #428]	; (80112e8 <setSVM_dq+0x654>)
 801113c:	601a      	str	r2, [r3, #0]
 801113e:	4b6a      	ldr	r3, [pc, #424]	; (80112e8 <setSVM_dq+0x654>)
 8011140:	ed93 7a00 	vldr	s14, [r3]
 8011144:	4b64      	ldr	r3, [pc, #400]	; (80112d8 <setSVM_dq+0x644>)
 8011146:	edd3 7a00 	vldr	s15, [r3]
 801114a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801114e:	4b66      	ldr	r3, [pc, #408]	; (80112e8 <setSVM_dq+0x654>)
 8011150:	edc3 7a01 	vstr	s15, [r3, #4]
 8011154:	4b64      	ldr	r3, [pc, #400]	; (80112e8 <setSVM_dq+0x654>)
 8011156:	ed93 7a01 	vldr	s14, [r3, #4]
 801115a:	4b61      	ldr	r3, [pc, #388]	; (80112e0 <setSVM_dq+0x64c>)
 801115c:	edd3 7a00 	vldr	s15, [r3]
 8011160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011164:	4b60      	ldr	r3, [pc, #384]	; (80112e8 <setSVM_dq+0x654>)
 8011166:	edc3 7a02 	vstr	s15, [r3, #8]
 801116a:	e08b      	b.n	8011284 <setSVM_dq+0x5f0>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 801116c:	4b5a      	ldr	r3, [pc, #360]	; (80112d8 <setSVM_dq+0x644>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	4618      	mov	r0, r3
 8011172:	f7f7 f8d1 	bl	8008318 <__aeabi_f2d>
 8011176:	4603      	mov	r3, r0
 8011178:	460c      	mov	r4, r1
 801117a:	461a      	mov	r2, r3
 801117c:	4623      	mov	r3, r4
 801117e:	f04f 0000 	mov.w	r0, #0
 8011182:	4956      	ldr	r1, [pc, #344]	; (80112dc <setSVM_dq+0x648>)
 8011184:	f7f6 ff68 	bl	8008058 <__aeabi_dsub>
 8011188:	4603      	mov	r3, r0
 801118a:	460c      	mov	r4, r1
 801118c:	4625      	mov	r5, r4
 801118e:	461c      	mov	r4, r3
 8011190:	4b53      	ldr	r3, [pc, #332]	; (80112e0 <setSVM_dq+0x64c>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	4618      	mov	r0, r3
 8011196:	f7f7 f8bf 	bl	8008318 <__aeabi_f2d>
 801119a:	4602      	mov	r2, r0
 801119c:	460b      	mov	r3, r1
 801119e:	4620      	mov	r0, r4
 80111a0:	4629      	mov	r1, r5
 80111a2:	f7f6 ff59 	bl	8008058 <__aeabi_dsub>
 80111a6:	4603      	mov	r3, r0
 80111a8:	460c      	mov	r4, r1
 80111aa:	4618      	mov	r0, r3
 80111ac:	4621      	mov	r1, r4
 80111ae:	f04f 0200 	mov.w	r2, #0
 80111b2:	4b4c      	ldr	r3, [pc, #304]	; (80112e4 <setSVM_dq+0x650>)
 80111b4:	f7f7 f908 	bl	80083c8 <__aeabi_dmul>
 80111b8:	4603      	mov	r3, r0
 80111ba:	460c      	mov	r4, r1
 80111bc:	4618      	mov	r0, r3
 80111be:	4621      	mov	r1, r4
 80111c0:	f7f7 fbda 	bl	8008978 <__aeabi_d2f>
 80111c4:	4602      	mov	r2, r0
 80111c6:	4b48      	ldr	r3, [pc, #288]	; (80112e8 <setSVM_dq+0x654>)
 80111c8:	605a      	str	r2, [r3, #4]
 80111ca:	4b47      	ldr	r3, [pc, #284]	; (80112e8 <setSVM_dq+0x654>)
 80111cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80111d0:	4b43      	ldr	r3, [pc, #268]	; (80112e0 <setSVM_dq+0x64c>)
 80111d2:	edd3 7a00 	vldr	s15, [r3]
 80111d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111da:	4b43      	ldr	r3, [pc, #268]	; (80112e8 <setSVM_dq+0x654>)
 80111dc:	edc3 7a00 	vstr	s15, [r3]
 80111e0:	4b41      	ldr	r3, [pc, #260]	; (80112e8 <setSVM_dq+0x654>)
 80111e2:	ed93 7a00 	vldr	s14, [r3]
 80111e6:	4b3c      	ldr	r3, [pc, #240]	; (80112d8 <setSVM_dq+0x644>)
 80111e8:	edd3 7a00 	vldr	s15, [r3]
 80111ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111f0:	4b3d      	ldr	r3, [pc, #244]	; (80112e8 <setSVM_dq+0x654>)
 80111f2:	edc3 7a02 	vstr	s15, [r3, #8]
 80111f6:	e045      	b.n	8011284 <setSVM_dq+0x5f0>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 80111f8:	4b37      	ldr	r3, [pc, #220]	; (80112d8 <setSVM_dq+0x644>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7f7 f88b 	bl	8008318 <__aeabi_f2d>
 8011202:	4603      	mov	r3, r0
 8011204:	460c      	mov	r4, r1
 8011206:	461a      	mov	r2, r3
 8011208:	4623      	mov	r3, r4
 801120a:	f04f 0000 	mov.w	r0, #0
 801120e:	4933      	ldr	r1, [pc, #204]	; (80112dc <setSVM_dq+0x648>)
 8011210:	f7f6 ff22 	bl	8008058 <__aeabi_dsub>
 8011214:	4603      	mov	r3, r0
 8011216:	460c      	mov	r4, r1
 8011218:	4625      	mov	r5, r4
 801121a:	461c      	mov	r4, r3
 801121c:	4b30      	ldr	r3, [pc, #192]	; (80112e0 <setSVM_dq+0x64c>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4618      	mov	r0, r3
 8011222:	f7f7 f879 	bl	8008318 <__aeabi_f2d>
 8011226:	4602      	mov	r2, r0
 8011228:	460b      	mov	r3, r1
 801122a:	4620      	mov	r0, r4
 801122c:	4629      	mov	r1, r5
 801122e:	f7f6 ff13 	bl	8008058 <__aeabi_dsub>
 8011232:	4603      	mov	r3, r0
 8011234:	460c      	mov	r4, r1
 8011236:	4618      	mov	r0, r3
 8011238:	4621      	mov	r1, r4
 801123a:	f04f 0200 	mov.w	r2, #0
 801123e:	4b29      	ldr	r3, [pc, #164]	; (80112e4 <setSVM_dq+0x650>)
 8011240:	f7f7 f8c2 	bl	80083c8 <__aeabi_dmul>
 8011244:	4603      	mov	r3, r0
 8011246:	460c      	mov	r4, r1
 8011248:	4618      	mov	r0, r3
 801124a:	4621      	mov	r1, r4
 801124c:	f7f7 fb94 	bl	8008978 <__aeabi_d2f>
 8011250:	4602      	mov	r2, r0
 8011252:	4b25      	ldr	r3, [pc, #148]	; (80112e8 <setSVM_dq+0x654>)
 8011254:	605a      	str	r2, [r3, #4]
 8011256:	4b24      	ldr	r3, [pc, #144]	; (80112e8 <setSVM_dq+0x654>)
 8011258:	ed93 7a01 	vldr	s14, [r3, #4]
 801125c:	4b1e      	ldr	r3, [pc, #120]	; (80112d8 <setSVM_dq+0x644>)
 801125e:	edd3 7a00 	vldr	s15, [r3]
 8011262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011266:	4b20      	ldr	r3, [pc, #128]	; (80112e8 <setSVM_dq+0x654>)
 8011268:	edc3 7a02 	vstr	s15, [r3, #8]
 801126c:	4b1e      	ldr	r3, [pc, #120]	; (80112e8 <setSVM_dq+0x654>)
 801126e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011272:	4b1b      	ldr	r3, [pc, #108]	; (80112e0 <setSVM_dq+0x64c>)
 8011274:	edd3 7a00 	vldr	s15, [r3]
 8011278:	ee77 7a27 	vadd.f32	s15, s14, s15
 801127c:	4b1a      	ldr	r3, [pc, #104]	; (80112e8 <setSVM_dq+0x654>)
 801127e:	edc3 7a00 	vstr	s15, [r3]
 8011282:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8011284:	4b18      	ldr	r3, [pc, #96]	; (80112e8 <setSVM_dq+0x654>)
 8011286:	edd3 7a00 	vldr	s15, [r3]
 801128a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801128e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011296:	d503      	bpl.n	80112a0 <setSVM_dq+0x60c>
 8011298:	4b13      	ldr	r3, [pc, #76]	; (80112e8 <setSVM_dq+0x654>)
 801129a:	4a14      	ldr	r2, [pc, #80]	; (80112ec <setSVM_dq+0x658>)
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	e00d      	b.n	80112bc <setSVM_dq+0x628>
 80112a0:	4b11      	ldr	r3, [pc, #68]	; (80112e8 <setSVM_dq+0x654>)
 80112a2:	edd3 7a00 	vldr	s15, [r3]
 80112a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b2:	dd03      	ble.n	80112bc <setSVM_dq+0x628>
 80112b4:	4b0c      	ldr	r3, [pc, #48]	; (80112e8 <setSVM_dq+0x654>)
 80112b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80112ba:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 80112bc:	4b0a      	ldr	r3, [pc, #40]	; (80112e8 <setSVM_dq+0x654>)
 80112be:	edd3 7a01 	vldr	s15, [r3, #4]
 80112c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80112c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ce:	d50f      	bpl.n	80112f0 <setSVM_dq+0x65c>
 80112d0:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <setSVM_dq+0x654>)
 80112d2:	4a06      	ldr	r2, [pc, #24]	; (80112ec <setSVM_dq+0x658>)
 80112d4:	605a      	str	r2, [r3, #4]
 80112d6:	e019      	b.n	801130c <setSVM_dq+0x678>
 80112d8:	2000428c 	.word	0x2000428c
 80112dc:	3ff00000 	.word	0x3ff00000
 80112e0:	20004290 	.word	0x20004290
 80112e4:	3fe00000 	.word	0x3fe00000
 80112e8:	20004294 	.word	0x20004294
 80112ec:	bf800000 	.word	0xbf800000
 80112f0:	4b3c      	ldr	r3, [pc, #240]	; (80113e4 <setSVM_dq+0x750>)
 80112f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80112f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011302:	dd03      	ble.n	801130c <setSVM_dq+0x678>
 8011304:	4b37      	ldr	r3, [pc, #220]	; (80113e4 <setSVM_dq+0x750>)
 8011306:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801130a:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 801130c:	4b35      	ldr	r3, [pc, #212]	; (80113e4 <setSVM_dq+0x750>)
 801130e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011312:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011316:	eef4 7ac7 	vcmpe.f32	s15, s14
 801131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131e:	d503      	bpl.n	8011328 <setSVM_dq+0x694>
 8011320:	4b30      	ldr	r3, [pc, #192]	; (80113e4 <setSVM_dq+0x750>)
 8011322:	4a31      	ldr	r2, [pc, #196]	; (80113e8 <setSVM_dq+0x754>)
 8011324:	609a      	str	r2, [r3, #8]
 8011326:	e00d      	b.n	8011344 <setSVM_dq+0x6b0>
 8011328:	4b2e      	ldr	r3, [pc, #184]	; (80113e4 <setSVM_dq+0x750>)
 801132a:	edd3 7a02 	vldr	s15, [r3, #8]
 801132e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133a:	dd03      	ble.n	8011344 <setSVM_dq+0x6b0>
 801133c:	4b29      	ldr	r3, [pc, #164]	; (80113e4 <setSVM_dq+0x750>)
 801133e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011342:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, htim->Init.Period * (1.0f - (amp_u = duty[0])));
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	ee07 3a90 	vmov	s15, r3
 801134c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011350:	4b24      	ldr	r3, [pc, #144]	; (80113e4 <setSVM_dq+0x750>)
 8011352:	edd3 7a00 	vldr	s15, [r3]
 8011356:	4b25      	ldr	r3, [pc, #148]	; (80113ec <setSVM_dq+0x758>)
 8011358:	edc3 7a00 	vstr	s15, [r3]
 801135c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011360:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011370:	ee17 2a90 	vmov	r2, s15
 8011374:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, htim->Init.Period * (1.0f - (amp_v = duty[1])));
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	ee07 3a90 	vmov	s15, r3
 801137e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011382:	4b18      	ldr	r3, [pc, #96]	; (80113e4 <setSVM_dq+0x750>)
 8011384:	edd3 7a01 	vldr	s15, [r3, #4]
 8011388:	4b19      	ldr	r3, [pc, #100]	; (80113f0 <setSVM_dq+0x75c>)
 801138a:	edc3 7a00 	vstr	s15, [r3]
 801138e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011392:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011396:	ee67 7a27 	vmul.f32	s15, s14, s15
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113a2:	ee17 2a90 	vmov	r2, s15
 80113a6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, htim->Init.Period * (1.0f - (amp_w = duty[2])));
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	ee07 3a90 	vmov	s15, r3
 80113b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80113b4:	4b0b      	ldr	r3, [pc, #44]	; (80113e4 <setSVM_dq+0x750>)
 80113b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80113ba:	4b0e      	ldr	r3, [pc, #56]	; (80113f4 <setSVM_dq+0x760>)
 80113bc:	edc3 7a00 	vstr	s15, [r3]
 80113c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80113c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113d4:	ee17 2a90 	vmov	r2, s15
 80113d8:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 80113da:	bf00      	nop
}
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bdb0      	pop	{r4, r5, r7, pc}
 80113e2:	bf00      	nop
 80113e4:	20004294 	.word	0x20004294
 80113e8:	bf800000 	.word	0xbf800000
 80113ec:	2000425c 	.word	0x2000425c
 80113f0:	20004260 	.word	0x20004260
 80113f4:	20004264 	.word	0x20004264

080113f8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80113fc:	4b18      	ldr	r3, [pc, #96]	; (8011460 <MX_SPI2_Init+0x68>)
 80113fe:	4a19      	ldr	r2, [pc, #100]	; (8011464 <MX_SPI2_Init+0x6c>)
 8011400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011402:	4b17      	ldr	r3, [pc, #92]	; (8011460 <MX_SPI2_Init+0x68>)
 8011404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801140a:	4b15      	ldr	r3, [pc, #84]	; (8011460 <MX_SPI2_Init+0x68>)
 801140c:	2200      	movs	r2, #0
 801140e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8011410:	4b13      	ldr	r3, [pc, #76]	; (8011460 <MX_SPI2_Init+0x68>)
 8011412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011416:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011418:	4b11      	ldr	r3, [pc, #68]	; (8011460 <MX_SPI2_Init+0x68>)
 801141a:	2200      	movs	r2, #0
 801141c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 801141e:	4b10      	ldr	r3, [pc, #64]	; (8011460 <MX_SPI2_Init+0x68>)
 8011420:	2201      	movs	r2, #1
 8011422:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011424:	4b0e      	ldr	r3, [pc, #56]	; (8011460 <MX_SPI2_Init+0x68>)
 8011426:	f44f 7200 	mov.w	r2, #512	; 0x200
 801142a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801142c:	4b0c      	ldr	r3, [pc, #48]	; (8011460 <MX_SPI2_Init+0x68>)
 801142e:	2218      	movs	r2, #24
 8011430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011432:	4b0b      	ldr	r3, [pc, #44]	; (8011460 <MX_SPI2_Init+0x68>)
 8011434:	2200      	movs	r2, #0
 8011436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011438:	4b09      	ldr	r3, [pc, #36]	; (8011460 <MX_SPI2_Init+0x68>)
 801143a:	2200      	movs	r2, #0
 801143c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801143e:	4b08      	ldr	r3, [pc, #32]	; (8011460 <MX_SPI2_Init+0x68>)
 8011440:	2200      	movs	r2, #0
 8011442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8011444:	4b06      	ldr	r3, [pc, #24]	; (8011460 <MX_SPI2_Init+0x68>)
 8011446:	220a      	movs	r2, #10
 8011448:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801144a:	4805      	ldr	r0, [pc, #20]	; (8011460 <MX_SPI2_Init+0x68>)
 801144c:	f7fa fcc2 	bl	800bdd4 <HAL_SPI_Init>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d001      	beq.n	801145a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8011456:	f7ff fbbb 	bl	8010bd0 <Error_Handler>
  }

}
 801145a:	bf00      	nop
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	20004740 	.word	0x20004740
 8011464:	40003800 	.word	0x40003800

08011468 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 801146c:	4b17      	ldr	r3, [pc, #92]	; (80114cc <MX_SPI3_Init+0x64>)
 801146e:	4a18      	ldr	r2, [pc, #96]	; (80114d0 <MX_SPI3_Init+0x68>)
 8011470:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8011472:	4b16      	ldr	r3, [pc, #88]	; (80114cc <MX_SPI3_Init+0x64>)
 8011474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011478:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801147a:	4b14      	ldr	r3, [pc, #80]	; (80114cc <MX_SPI3_Init+0x64>)
 801147c:	2200      	movs	r2, #0
 801147e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8011480:	4b12      	ldr	r3, [pc, #72]	; (80114cc <MX_SPI3_Init+0x64>)
 8011482:	2200      	movs	r2, #0
 8011484:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011486:	4b11      	ldr	r3, [pc, #68]	; (80114cc <MX_SPI3_Init+0x64>)
 8011488:	2200      	movs	r2, #0
 801148a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801148c:	4b0f      	ldr	r3, [pc, #60]	; (80114cc <MX_SPI3_Init+0x64>)
 801148e:	2201      	movs	r2, #1
 8011490:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011492:	4b0e      	ldr	r3, [pc, #56]	; (80114cc <MX_SPI3_Init+0x64>)
 8011494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011498:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 801149a:	4b0c      	ldr	r3, [pc, #48]	; (80114cc <MX_SPI3_Init+0x64>)
 801149c:	2220      	movs	r2, #32
 801149e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80114a0:	4b0a      	ldr	r3, [pc, #40]	; (80114cc <MX_SPI3_Init+0x64>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80114a6:	4b09      	ldr	r3, [pc, #36]	; (80114cc <MX_SPI3_Init+0x64>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80114ac:	4b07      	ldr	r3, [pc, #28]	; (80114cc <MX_SPI3_Init+0x64>)
 80114ae:	2200      	movs	r2, #0
 80114b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80114b2:	4b06      	ldr	r3, [pc, #24]	; (80114cc <MX_SPI3_Init+0x64>)
 80114b4:	220a      	movs	r2, #10
 80114b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80114b8:	4804      	ldr	r0, [pc, #16]	; (80114cc <MX_SPI3_Init+0x64>)
 80114ba:	f7fa fc8b 	bl	800bdd4 <HAL_SPI_Init>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80114c4:	f7ff fb84 	bl	8010bd0 <Error_Handler>
  }

}
 80114c8:	bf00      	nop
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	20004798 	.word	0x20004798
 80114d0:	40003c00 	.word	0x40003c00

080114d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b08e      	sub	sp, #56	; 0x38
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80114dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114e0:	2200      	movs	r2, #0
 80114e2:	601a      	str	r2, [r3, #0]
 80114e4:	605a      	str	r2, [r3, #4]
 80114e6:	609a      	str	r2, [r3, #8]
 80114e8:	60da      	str	r2, [r3, #12]
 80114ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4a5d      	ldr	r2, [pc, #372]	; (8011668 <HAL_SPI_MspInit+0x194>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d163      	bne.n	80115be <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80114f6:	2300      	movs	r3, #0
 80114f8:	623b      	str	r3, [r7, #32]
 80114fa:	4b5c      	ldr	r3, [pc, #368]	; (801166c <HAL_SPI_MspInit+0x198>)
 80114fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fe:	4a5b      	ldr	r2, [pc, #364]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011504:	6413      	str	r3, [r2, #64]	; 0x40
 8011506:	4b59      	ldr	r3, [pc, #356]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801150e:	623b      	str	r3, [r7, #32]
 8011510:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011512:	2300      	movs	r3, #0
 8011514:	61fb      	str	r3, [r7, #28]
 8011516:	4b55      	ldr	r3, [pc, #340]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801151a:	4a54      	ldr	r2, [pc, #336]	; (801166c <HAL_SPI_MspInit+0x198>)
 801151c:	f043 0304 	orr.w	r3, r3, #4
 8011520:	6313      	str	r3, [r2, #48]	; 0x30
 8011522:	4b52      	ldr	r3, [pc, #328]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011526:	f003 0304 	and.w	r3, r3, #4
 801152a:	61fb      	str	r3, [r7, #28]
 801152c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801152e:	2300      	movs	r3, #0
 8011530:	61bb      	str	r3, [r7, #24]
 8011532:	4b4e      	ldr	r3, [pc, #312]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011536:	4a4d      	ldr	r2, [pc, #308]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011538:	f043 0302 	orr.w	r3, r3, #2
 801153c:	6313      	str	r3, [r2, #48]	; 0x30
 801153e:	4b4b      	ldr	r3, [pc, #300]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011542:	f003 0302 	and.w	r3, r3, #2
 8011546:	61bb      	str	r3, [r7, #24]
 8011548:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801154a:	2302      	movs	r3, #2
 801154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801154e:	2302      	movs	r3, #2
 8011550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011552:	2300      	movs	r3, #0
 8011554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011556:	2303      	movs	r3, #3
 8011558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 801155a:	2307      	movs	r3, #7
 801155c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011562:	4619      	mov	r1, r3
 8011564:	4842      	ldr	r0, [pc, #264]	; (8011670 <HAL_SPI_MspInit+0x19c>)
 8011566:	f7f9 fd61 	bl	800b02c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801156a:	2304      	movs	r3, #4
 801156c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801156e:	2302      	movs	r3, #2
 8011570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011572:	2300      	movs	r3, #0
 8011574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011576:	2303      	movs	r3, #3
 8011578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801157a:	2305      	movs	r3, #5
 801157c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011582:	4619      	mov	r1, r3
 8011584:	483a      	ldr	r0, [pc, #232]	; (8011670 <HAL_SPI_MspInit+0x19c>)
 8011586:	f7f9 fd51 	bl	800b02c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801158a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801158e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011590:	2302      	movs	r3, #2
 8011592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011594:	2300      	movs	r3, #0
 8011596:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011598:	2303      	movs	r3, #3
 801159a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801159c:	2305      	movs	r3, #5
 801159e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80115a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115a4:	4619      	mov	r1, r3
 80115a6:	4833      	ldr	r0, [pc, #204]	; (8011674 <HAL_SPI_MspInit+0x1a0>)
 80115a8:	f7f9 fd40 	bl	800b02c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80115ac:	2200      	movs	r2, #0
 80115ae:	2100      	movs	r1, #0
 80115b0:	2024      	movs	r0, #36	; 0x24
 80115b2:	f7f8 fe88 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80115b6:	2024      	movs	r0, #36	; 0x24
 80115b8:	f7f8 fea1 	bl	800a2fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80115bc:	e04f      	b.n	801165e <HAL_SPI_MspInit+0x18a>
  else if(spiHandle->Instance==SPI3)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4a2d      	ldr	r2, [pc, #180]	; (8011678 <HAL_SPI_MspInit+0x1a4>)
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d14a      	bne.n	801165e <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80115c8:	2300      	movs	r3, #0
 80115ca:	617b      	str	r3, [r7, #20]
 80115cc:	4b27      	ldr	r3, [pc, #156]	; (801166c <HAL_SPI_MspInit+0x198>)
 80115ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115d0:	4a26      	ldr	r2, [pc, #152]	; (801166c <HAL_SPI_MspInit+0x198>)
 80115d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115d6:	6413      	str	r3, [r2, #64]	; 0x40
 80115d8:	4b24      	ldr	r3, [pc, #144]	; (801166c <HAL_SPI_MspInit+0x198>)
 80115da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80115e0:	617b      	str	r3, [r7, #20]
 80115e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80115e4:	2300      	movs	r3, #0
 80115e6:	613b      	str	r3, [r7, #16]
 80115e8:	4b20      	ldr	r3, [pc, #128]	; (801166c <HAL_SPI_MspInit+0x198>)
 80115ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ec:	4a1f      	ldr	r2, [pc, #124]	; (801166c <HAL_SPI_MspInit+0x198>)
 80115ee:	f043 0302 	orr.w	r3, r3, #2
 80115f2:	6313      	str	r3, [r2, #48]	; 0x30
 80115f4:	4b1d      	ldr	r3, [pc, #116]	; (801166c <HAL_SPI_MspInit+0x198>)
 80115f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115f8:	f003 0302 	and.w	r3, r3, #2
 80115fc:	613b      	str	r3, [r7, #16]
 80115fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011600:	2300      	movs	r3, #0
 8011602:	60fb      	str	r3, [r7, #12]
 8011604:	4b19      	ldr	r3, [pc, #100]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011608:	4a18      	ldr	r2, [pc, #96]	; (801166c <HAL_SPI_MspInit+0x198>)
 801160a:	f043 0304 	orr.w	r3, r3, #4
 801160e:	6313      	str	r3, [r2, #48]	; 0x30
 8011610:	4b16      	ldr	r3, [pc, #88]	; (801166c <HAL_SPI_MspInit+0x198>)
 8011612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011614:	f003 0304 	and.w	r3, r3, #4
 8011618:	60fb      	str	r3, [r7, #12]
 801161a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801161c:	2304      	movs	r3, #4
 801161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011620:	2302      	movs	r3, #2
 8011622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011624:	2300      	movs	r3, #0
 8011626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011628:	2303      	movs	r3, #3
 801162a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 801162c:	2307      	movs	r3, #7
 801162e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011634:	4619      	mov	r1, r3
 8011636:	480f      	ldr	r0, [pc, #60]	; (8011674 <HAL_SPI_MspInit+0x1a0>)
 8011638:	f7f9 fcf8 	bl	800b02c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801163c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011642:	2302      	movs	r3, #2
 8011644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011646:	2300      	movs	r3, #0
 8011648:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801164a:	2303      	movs	r3, #3
 801164c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801164e:	2306      	movs	r3, #6
 8011650:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011656:	4619      	mov	r1, r3
 8011658:	4805      	ldr	r0, [pc, #20]	; (8011670 <HAL_SPI_MspInit+0x19c>)
 801165a:	f7f9 fce7 	bl	800b02c <HAL_GPIO_Init>
}
 801165e:	bf00      	nop
 8011660:	3738      	adds	r7, #56	; 0x38
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	40003800 	.word	0x40003800
 801166c:	40023800 	.word	0x40023800
 8011670:	40020800 	.word	0x40020800
 8011674:	40020400 	.word	0x40020400
 8011678:	40003c00 	.word	0x40003c00

0801167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011682:	2300      	movs	r3, #0
 8011684:	607b      	str	r3, [r7, #4]
 8011686:	4b10      	ldr	r3, [pc, #64]	; (80116c8 <HAL_MspInit+0x4c>)
 8011688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801168a:	4a0f      	ldr	r2, [pc, #60]	; (80116c8 <HAL_MspInit+0x4c>)
 801168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011690:	6453      	str	r3, [r2, #68]	; 0x44
 8011692:	4b0d      	ldr	r3, [pc, #52]	; (80116c8 <HAL_MspInit+0x4c>)
 8011694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801169a:	607b      	str	r3, [r7, #4]
 801169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801169e:	2300      	movs	r3, #0
 80116a0:	603b      	str	r3, [r7, #0]
 80116a2:	4b09      	ldr	r3, [pc, #36]	; (80116c8 <HAL_MspInit+0x4c>)
 80116a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116a6:	4a08      	ldr	r2, [pc, #32]	; (80116c8 <HAL_MspInit+0x4c>)
 80116a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116ac:	6413      	str	r3, [r2, #64]	; 0x40
 80116ae:	4b06      	ldr	r3, [pc, #24]	; (80116c8 <HAL_MspInit+0x4c>)
 80116b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80116b6:	603b      	str	r3, [r7, #0]
 80116b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80116ba:	2007      	movs	r0, #7
 80116bc:	f7f8 fdf8 	bl	800a2b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80116c0:	bf00      	nop
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	40023800 	.word	0x40023800

080116cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80116cc:	b480      	push	{r7}
 80116ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80116d0:	bf00      	nop
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr

080116da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80116da:	b480      	push	{r7}
 80116dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80116de:	e7fe      	b.n	80116de <HardFault_Handler+0x4>

080116e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80116e0:	b480      	push	{r7}
 80116e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80116e4:	e7fe      	b.n	80116e4 <MemManage_Handler+0x4>

080116e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80116e6:	b480      	push	{r7}
 80116e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80116ea:	e7fe      	b.n	80116ea <BusFault_Handler+0x4>

080116ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80116ec:	b480      	push	{r7}
 80116ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80116f0:	e7fe      	b.n	80116f0 <UsageFault_Handler+0x4>

080116f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80116f2:	b480      	push	{r7}
 80116f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80116f6:	bf00      	nop
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011700:	b480      	push	{r7}
 8011702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011704:	bf00      	nop
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801170e:	b480      	push	{r7}
 8011710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011712:	bf00      	nop
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr

0801171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011720:	f7f7 fb4c 	bl	8008dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011724:	bf00      	nop
 8011726:	bd80      	pop	{r7, pc}

08011728 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 801172c:	4802      	ldr	r0, [pc, #8]	; (8011738 <CAN1_TX_IRQHandler+0x10>)
 801172e:	f7f8 fae4 	bl	8009cfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8011732:	bf00      	nop
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	200046cc 	.word	0x200046cc

0801173c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011740:	4802      	ldr	r0, [pc, #8]	; (801174c <CAN1_RX0_IRQHandler+0x10>)
 8011742:	f7f8 fada 	bl	8009cfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8011746:	bf00      	nop
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	200046cc 	.word	0x200046cc

08011750 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8011754:	4802      	ldr	r0, [pc, #8]	; (8011760 <SPI2_IRQHandler+0x10>)
 8011756:	f7fa fdd7 	bl	800c308 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801175a:	bf00      	nop
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	20004740 	.word	0x20004740

08011764 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8011768:	4802      	ldr	r0, [pc, #8]	; (8011774 <USART2_IRQHandler+0x10>)
 801176a:	f7fc fa2b 	bl	800dbc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801176e:	bf00      	nop
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	20004830 	.word	0x20004830

08011778 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801177c:	4802      	ldr	r0, [pc, #8]	; (8011788 <TIM8_UP_TIM13_IRQHandler+0x10>)
 801177e:	f7fb fa55 	bl	800cc2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8011782:	bf00      	nop
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	200047f0 	.word	0x200047f0

0801178c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011790:	4802      	ldr	r0, [pc, #8]	; (801179c <DMA2_Stream0_IRQHandler+0x10>)
 8011792:	f7f8 feff 	bl	800a594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8011796:	bf00      	nop
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	200045c0 	.word	0x200045c0

080117a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80117a4:	4802      	ldr	r0, [pc, #8]	; (80117b0 <DMA2_Stream1_IRQHandler+0x10>)
 80117a6:	f7f8 fef5 	bl	800a594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80117aa:	bf00      	nop
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	200044d0 	.word	0x200044d0

080117b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80117b8:	4802      	ldr	r0, [pc, #8]	; (80117c4 <DMA2_Stream2_IRQHandler+0x10>)
 80117ba:	f7f8 feeb 	bl	800a594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80117be:	bf00      	nop
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	20004620 	.word	0x20004620

080117c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80117d0:	4b11      	ldr	r3, [pc, #68]	; (8011818 <_sbrk+0x50>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d102      	bne.n	80117de <_sbrk+0x16>
		heap_end = &end;
 80117d8:	4b0f      	ldr	r3, [pc, #60]	; (8011818 <_sbrk+0x50>)
 80117da:	4a10      	ldr	r2, [pc, #64]	; (801181c <_sbrk+0x54>)
 80117dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80117de:	4b0e      	ldr	r3, [pc, #56]	; (8011818 <_sbrk+0x50>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80117e4:	4b0c      	ldr	r3, [pc, #48]	; (8011818 <_sbrk+0x50>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4413      	add	r3, r2
 80117ec:	466a      	mov	r2, sp
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d907      	bls.n	8011802 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80117f2:	f000 fa49 	bl	8011c88 <__errno>
 80117f6:	4602      	mov	r2, r0
 80117f8:	230c      	movs	r3, #12
 80117fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80117fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011800:	e006      	b.n	8011810 <_sbrk+0x48>
	}

	heap_end += incr;
 8011802:	4b05      	ldr	r3, [pc, #20]	; (8011818 <_sbrk+0x50>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	4413      	add	r3, r2
 801180a:	4a03      	ldr	r2, [pc, #12]	; (8011818 <_sbrk+0x50>)
 801180c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801180e:	68fb      	ldr	r3, [r7, #12]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	200042a0 	.word	0x200042a0
 801181c:	20004878 	.word	0x20004878

08011820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011820:	b480      	push	{r7}
 8011822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011824:	4b16      	ldr	r3, [pc, #88]	; (8011880 <SystemInit+0x60>)
 8011826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801182a:	4a15      	ldr	r2, [pc, #84]	; (8011880 <SystemInit+0x60>)
 801182c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011834:	4b13      	ldr	r3, [pc, #76]	; (8011884 <SystemInit+0x64>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	4a12      	ldr	r2, [pc, #72]	; (8011884 <SystemInit+0x64>)
 801183a:	f043 0301 	orr.w	r3, r3, #1
 801183e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011840:	4b10      	ldr	r3, [pc, #64]	; (8011884 <SystemInit+0x64>)
 8011842:	2200      	movs	r2, #0
 8011844:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011846:	4b0f      	ldr	r3, [pc, #60]	; (8011884 <SystemInit+0x64>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	4a0e      	ldr	r2, [pc, #56]	; (8011884 <SystemInit+0x64>)
 801184c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011854:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011856:	4b0b      	ldr	r3, [pc, #44]	; (8011884 <SystemInit+0x64>)
 8011858:	4a0b      	ldr	r2, [pc, #44]	; (8011888 <SystemInit+0x68>)
 801185a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801185c:	4b09      	ldr	r3, [pc, #36]	; (8011884 <SystemInit+0x64>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a08      	ldr	r2, [pc, #32]	; (8011884 <SystemInit+0x64>)
 8011862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011866:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011868:	4b06      	ldr	r3, [pc, #24]	; (8011884 <SystemInit+0x64>)
 801186a:	2200      	movs	r2, #0
 801186c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801186e:	4b04      	ldr	r3, [pc, #16]	; (8011880 <SystemInit+0x60>)
 8011870:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011874:	609a      	str	r2, [r3, #8]
#endif
}
 8011876:	bf00      	nop
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	e000ed00 	.word	0xe000ed00
 8011884:	40023800 	.word	0x40023800
 8011888:	24003010 	.word	0x24003010

0801188c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b096      	sub	sp, #88	; 0x58
 8011890:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011892:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011896:	2200      	movs	r2, #0
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	605a      	str	r2, [r3, #4]
 801189c:	609a      	str	r2, [r3, #8]
 801189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80118a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]
 80118a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80118aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118ae:	2200      	movs	r2, #0
 80118b0:	601a      	str	r2, [r3, #0]
 80118b2:	605a      	str	r2, [r3, #4]
 80118b4:	609a      	str	r2, [r3, #8]
 80118b6:	60da      	str	r2, [r3, #12]
 80118b8:	611a      	str	r2, [r3, #16]
 80118ba:	615a      	str	r2, [r3, #20]
 80118bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80118be:	1d3b      	adds	r3, r7, #4
 80118c0:	2220      	movs	r2, #32
 80118c2:	2100      	movs	r1, #0
 80118c4:	4618      	mov	r0, r3
 80118c6:	f000 fa14 	bl	8011cf2 <memset>

  htim8.Instance = TIM8;
 80118ca:	4b4a      	ldr	r3, [pc, #296]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118cc:	4a4a      	ldr	r2, [pc, #296]	; (80119f8 <MX_TIM8_Init+0x16c>)
 80118ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80118d0:	4b48      	ldr	r3, [pc, #288]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118d2:	2200      	movs	r2, #0
 80118d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80118d6:	4b47      	ldr	r3, [pc, #284]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118d8:	2220      	movs	r2, #32
 80118da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 80118dc:	4b45      	ldr	r3, [pc, #276]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80118e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80118e4:	4b43      	ldr	r3, [pc, #268]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80118ea:	4b42      	ldr	r3, [pc, #264]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118ec:	2200      	movs	r2, #0
 80118ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80118f0:	4b40      	ldr	r3, [pc, #256]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118f2:	2200      	movs	r2, #0
 80118f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80118f6:	483f      	ldr	r0, [pc, #252]	; (80119f4 <MX_TIM8_Init+0x168>)
 80118f8:	f7fb f81a 	bl	800c930 <HAL_TIM_Base_Init>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d001      	beq.n	8011906 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8011902:	f7ff f965 	bl	8010bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801190a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801190c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011910:	4619      	mov	r1, r3
 8011912:	4838      	ldr	r0, [pc, #224]	; (80119f4 <MX_TIM8_Init+0x168>)
 8011914:	f7fb fb7f 	bl	800d016 <HAL_TIM_ConfigClockSource>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 801191e:	f7ff f957 	bl	8010bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8011922:	4834      	ldr	r0, [pc, #208]	; (80119f4 <MX_TIM8_Init+0x168>)
 8011924:	f7fb f82f 	bl	800c986 <HAL_TIM_PWM_Init>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	d001      	beq.n	8011932 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 801192e:	f7ff f94f 	bl	8010bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011932:	2320      	movs	r3, #32
 8011934:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011936:	2300      	movs	r3, #0
 8011938:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801193a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801193e:	4619      	mov	r1, r3
 8011940:	482c      	ldr	r0, [pc, #176]	; (80119f4 <MX_TIM8_Init+0x168>)
 8011942:	f7fc f821 	bl	800d988 <HAL_TIMEx_MasterConfigSynchronization>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d001      	beq.n	8011950 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 801194c:	f7ff f940 	bl	8010bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011950:	2360      	movs	r3, #96	; 0x60
 8011952:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8011954:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011958:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801195a:	2300      	movs	r3, #0
 801195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801195e:	2300      	movs	r3, #0
 8011960:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011962:	2300      	movs	r3, #0
 8011964:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011966:	2300      	movs	r3, #0
 8011968:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801196a:	2300      	movs	r3, #0
 801196c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011972:	2200      	movs	r2, #0
 8011974:	4619      	mov	r1, r3
 8011976:	481f      	ldr	r0, [pc, #124]	; (80119f4 <MX_TIM8_Init+0x168>)
 8011978:	f7fb fa60 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8011982:	f7ff f925 	bl	8010bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801198a:	2204      	movs	r2, #4
 801198c:	4619      	mov	r1, r3
 801198e:	4819      	ldr	r0, [pc, #100]	; (80119f4 <MX_TIM8_Init+0x168>)
 8011990:	f7fb fa54 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	d001      	beq.n	801199e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 801199a:	f7ff f919 	bl	8010bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119a2:	2208      	movs	r2, #8
 80119a4:	4619      	mov	r1, r3
 80119a6:	4813      	ldr	r0, [pc, #76]	; (80119f4 <MX_TIM8_Init+0x168>)
 80119a8:	f7fb fa48 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d001      	beq.n	80119b6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80119b2:	f7ff f90d 	bl	8010bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80119b6:	2300      	movs	r3, #0
 80119b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80119ba:	2300      	movs	r3, #0
 80119bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80119be:	2300      	movs	r3, #0
 80119c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80119c2:	2300      	movs	r3, #0
 80119c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80119c6:	2300      	movs	r3, #0
 80119c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80119ca:	2300      	movs	r3, #0
 80119cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80119ce:	2300      	movs	r3, #0
 80119d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80119d2:	1d3b      	adds	r3, r7, #4
 80119d4:	4619      	mov	r1, r3
 80119d6:	4807      	ldr	r0, [pc, #28]	; (80119f4 <MX_TIM8_Init+0x168>)
 80119d8:	f7fc f81b 	bl	800da12 <HAL_TIMEx_ConfigBreakDeadTime>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d001      	beq.n	80119e6 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80119e2:	f7ff f8f5 	bl	8010bd0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80119e6:	4803      	ldr	r0, [pc, #12]	; (80119f4 <MX_TIM8_Init+0x168>)
 80119e8:	f000 f830 	bl	8011a4c <HAL_TIM_MspPostInit>

}
 80119ec:	bf00      	nop
 80119ee:	3758      	adds	r7, #88	; 0x58
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	200047f0 	.word	0x200047f0
 80119f8:	40010400 	.word	0x40010400

080119fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4a0e      	ldr	r2, [pc, #56]	; (8011a44 <HAL_TIM_Base_MspInit+0x48>)
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d115      	bne.n	8011a3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011a0e:	2300      	movs	r3, #0
 8011a10:	60fb      	str	r3, [r7, #12]
 8011a12:	4b0d      	ldr	r3, [pc, #52]	; (8011a48 <HAL_TIM_Base_MspInit+0x4c>)
 8011a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a16:	4a0c      	ldr	r2, [pc, #48]	; (8011a48 <HAL_TIM_Base_MspInit+0x4c>)
 8011a18:	f043 0302 	orr.w	r3, r3, #2
 8011a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8011a1e:	4b0a      	ldr	r3, [pc, #40]	; (8011a48 <HAL_TIM_Base_MspInit+0x4c>)
 8011a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a22:	f003 0302 	and.w	r3, r3, #2
 8011a26:	60fb      	str	r3, [r7, #12]
 8011a28:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	202c      	movs	r0, #44	; 0x2c
 8011a30:	f7f8 fc49 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8011a34:	202c      	movs	r0, #44	; 0x2c
 8011a36:	f7f8 fc62 	bl	800a2fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8011a3a:	bf00      	nop
 8011a3c:	3710      	adds	r7, #16
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	40010400 	.word	0x40010400
 8011a48:	40023800 	.word	0x40023800

08011a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b08a      	sub	sp, #40	; 0x28
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a54:	f107 0314 	add.w	r3, r7, #20
 8011a58:	2200      	movs	r2, #0
 8011a5a:	601a      	str	r2, [r3, #0]
 8011a5c:	605a      	str	r2, [r3, #4]
 8011a5e:	609a      	str	r2, [r3, #8]
 8011a60:	60da      	str	r2, [r3, #12]
 8011a62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a30      	ldr	r2, [pc, #192]	; (8011b2c <HAL_TIM_MspPostInit+0xe0>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d15a      	bne.n	8011b24 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a6e:	2300      	movs	r3, #0
 8011a70:	613b      	str	r3, [r7, #16]
 8011a72:	4b2f      	ldr	r3, [pc, #188]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a76:	4a2e      	ldr	r2, [pc, #184]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011a78:	f043 0301 	orr.w	r3, r3, #1
 8011a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8011a7e:	4b2c      	ldr	r3, [pc, #176]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	613b      	str	r3, [r7, #16]
 8011a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	60fb      	str	r3, [r7, #12]
 8011a8e:	4b28      	ldr	r3, [pc, #160]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a92:	4a27      	ldr	r2, [pc, #156]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011a94:	f043 0302 	orr.w	r3, r3, #2
 8011a98:	6313      	str	r3, [r2, #48]	; 0x30
 8011a9a:	4b25      	ldr	r3, [pc, #148]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a9e:	f003 0302 	and.w	r3, r3, #2
 8011aa2:	60fb      	str	r3, [r7, #12]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	60bb      	str	r3, [r7, #8]
 8011aaa:	4b21      	ldr	r3, [pc, #132]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aae:	4a20      	ldr	r2, [pc, #128]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011ab0:	f043 0304 	orr.w	r3, r3, #4
 8011ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8011ab6:	4b1e      	ldr	r3, [pc, #120]	; (8011b30 <HAL_TIM_MspPostInit+0xe4>)
 8011ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aba:	f003 0304 	and.w	r3, r3, #4
 8011abe:	60bb      	str	r3, [r7, #8]
 8011ac0:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8011ac2:	2380      	movs	r3, #128	; 0x80
 8011ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ac6:	2302      	movs	r3, #2
 8011ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ad6:	f107 0314 	add.w	r3, r7, #20
 8011ada:	4619      	mov	r1, r3
 8011adc:	4815      	ldr	r0, [pc, #84]	; (8011b34 <HAL_TIM_MspPostInit+0xe8>)
 8011ade:	f7f9 faa5 	bl	800b02c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011ae2:	2303      	movs	r3, #3
 8011ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ae6:	2302      	movs	r3, #2
 8011ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011aea:	2300      	movs	r3, #0
 8011aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011aee:	2300      	movs	r3, #0
 8011af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011af2:	2303      	movs	r3, #3
 8011af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011af6:	f107 0314 	add.w	r3, r7, #20
 8011afa:	4619      	mov	r1, r3
 8011afc:	480e      	ldr	r0, [pc, #56]	; (8011b38 <HAL_TIM_MspPostInit+0xec>)
 8011afe:	f7f9 fa95 	bl	800b02c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8011b02:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8011b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b08:	2302      	movs	r3, #2
 8011b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b10:	2300      	movs	r3, #0
 8011b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011b14:	2303      	movs	r3, #3
 8011b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b18:	f107 0314 	add.w	r3, r7, #20
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	4807      	ldr	r0, [pc, #28]	; (8011b3c <HAL_TIM_MspPostInit+0xf0>)
 8011b20:	f7f9 fa84 	bl	800b02c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8011b24:	bf00      	nop
 8011b26:	3728      	adds	r7, #40	; 0x28
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}
 8011b2c:	40010400 	.word	0x40010400
 8011b30:	40023800 	.word	0x40023800
 8011b34:	40020000 	.word	0x40020000
 8011b38:	40020400 	.word	0x40020400
 8011b3c:	40020800 	.word	0x40020800

08011b40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8011b44:	4b11      	ldr	r3, [pc, #68]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b46:	4a12      	ldr	r2, [pc, #72]	; (8011b90 <MX_USART2_UART_Init+0x50>)
 8011b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8011b4a:	4b10      	ldr	r3, [pc, #64]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011b52:	4b0e      	ldr	r3, [pc, #56]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b54:	2200      	movs	r2, #0
 8011b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011b58:	4b0c      	ldr	r3, [pc, #48]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011b5e:	4b0b      	ldr	r3, [pc, #44]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b60:	2200      	movs	r2, #0
 8011b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011b64:	4b09      	ldr	r3, [pc, #36]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b66:	220c      	movs	r2, #12
 8011b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011b6a:	4b08      	ldr	r3, [pc, #32]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011b70:	4b06      	ldr	r3, [pc, #24]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011b76:	4805      	ldr	r0, [pc, #20]	; (8011b8c <MX_USART2_UART_Init+0x4c>)
 8011b78:	f7fb ffd6 	bl	800db28 <HAL_UART_Init>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d001      	beq.n	8011b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8011b82:	f7ff f825 	bl	8010bd0 <Error_Handler>
  }

}
 8011b86:	bf00      	nop
 8011b88:	bd80      	pop	{r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	20004830 	.word	0x20004830
 8011b90:	40004400 	.word	0x40004400

08011b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b08a      	sub	sp, #40	; 0x28
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b9c:	f107 0314 	add.w	r3, r7, #20
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	601a      	str	r2, [r3, #0]
 8011ba4:	605a      	str	r2, [r3, #4]
 8011ba6:	609a      	str	r2, [r3, #8]
 8011ba8:	60da      	str	r2, [r3, #12]
 8011baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	4a1d      	ldr	r2, [pc, #116]	; (8011c28 <HAL_UART_MspInit+0x94>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d133      	bne.n	8011c1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	613b      	str	r3, [r7, #16]
 8011bba:	4b1c      	ldr	r3, [pc, #112]	; (8011c2c <HAL_UART_MspInit+0x98>)
 8011bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bbe:	4a1b      	ldr	r2, [pc, #108]	; (8011c2c <HAL_UART_MspInit+0x98>)
 8011bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8011bc6:	4b19      	ldr	r3, [pc, #100]	; (8011c2c <HAL_UART_MspInit+0x98>)
 8011bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bce:	613b      	str	r3, [r7, #16]
 8011bd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60fb      	str	r3, [r7, #12]
 8011bd6:	4b15      	ldr	r3, [pc, #84]	; (8011c2c <HAL_UART_MspInit+0x98>)
 8011bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bda:	4a14      	ldr	r2, [pc, #80]	; (8011c2c <HAL_UART_MspInit+0x98>)
 8011bdc:	f043 0301 	orr.w	r3, r3, #1
 8011be0:	6313      	str	r3, [r2, #48]	; 0x30
 8011be2:	4b12      	ldr	r3, [pc, #72]	; (8011c2c <HAL_UART_MspInit+0x98>)
 8011be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011be6:	f003 0301 	and.w	r3, r3, #1
 8011bea:	60fb      	str	r3, [r7, #12]
 8011bec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8011bee:	230c      	movs	r3, #12
 8011bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bfa:	2303      	movs	r3, #3
 8011bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011bfe:	2307      	movs	r3, #7
 8011c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c02:	f107 0314 	add.w	r3, r7, #20
 8011c06:	4619      	mov	r1, r3
 8011c08:	4809      	ldr	r0, [pc, #36]	; (8011c30 <HAL_UART_MspInit+0x9c>)
 8011c0a:	f7f9 fa0f 	bl	800b02c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8011c0e:	2200      	movs	r2, #0
 8011c10:	2100      	movs	r1, #0
 8011c12:	2026      	movs	r0, #38	; 0x26
 8011c14:	f7f8 fb57 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8011c18:	2026      	movs	r0, #38	; 0x26
 8011c1a:	f7f8 fb70 	bl	800a2fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8011c1e:	bf00      	nop
 8011c20:	3728      	adds	r7, #40	; 0x28
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	40004400 	.word	0x40004400
 8011c2c:	40023800 	.word	0x40023800
 8011c30:	40020000 	.word	0x40020000

08011c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011c6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011c38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011c3a:	e003      	b.n	8011c44 <LoopCopyDataInit>

08011c3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011c3c:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011c3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011c40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011c42:	3104      	adds	r1, #4

08011c44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011c44:	480b      	ldr	r0, [pc, #44]	; (8011c74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011c46:	4b0c      	ldr	r3, [pc, #48]	; (8011c78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011c48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011c4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011c4c:	d3f6      	bcc.n	8011c3c <CopyDataInit>
  ldr  r2, =_sbss
 8011c4e:	4a0b      	ldr	r2, [pc, #44]	; (8011c7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011c50:	e002      	b.n	8011c58 <LoopFillZerobss>

08011c52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011c52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011c54:	f842 3b04 	str.w	r3, [r2], #4

08011c58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011c58:	4b09      	ldr	r3, [pc, #36]	; (8011c80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011c5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011c5c:	d3f9      	bcc.n	8011c52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011c5e:	f7ff fddf 	bl	8011820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011c62:	f000 f817 	bl	8011c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011c66:	f7fe fdb5 	bl	80107d4 <main>
  bx  lr    
 8011c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011c6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8011c70:	080274a0 	.word	0x080274a0
  ldr  r0, =_sdata
 8011c74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011c78:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8011c7c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8011c80:	20004874 	.word	0x20004874

08011c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011c84:	e7fe      	b.n	8011c84 <ADC_IRQHandler>
	...

08011c88 <__errno>:
 8011c88:	4b01      	ldr	r3, [pc, #4]	; (8011c90 <__errno+0x8>)
 8011c8a:	6818      	ldr	r0, [r3, #0]
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop
 8011c90:	20000010 	.word	0x20000010

08011c94 <__libc_init_array>:
 8011c94:	b570      	push	{r4, r5, r6, lr}
 8011c96:	4e0d      	ldr	r6, [pc, #52]	; (8011ccc <__libc_init_array+0x38>)
 8011c98:	4c0d      	ldr	r4, [pc, #52]	; (8011cd0 <__libc_init_array+0x3c>)
 8011c9a:	1ba4      	subs	r4, r4, r6
 8011c9c:	10a4      	asrs	r4, r4, #2
 8011c9e:	2500      	movs	r5, #0
 8011ca0:	42a5      	cmp	r5, r4
 8011ca2:	d109      	bne.n	8011cb8 <__libc_init_array+0x24>
 8011ca4:	4e0b      	ldr	r6, [pc, #44]	; (8011cd4 <__libc_init_array+0x40>)
 8011ca6:	4c0c      	ldr	r4, [pc, #48]	; (8011cd8 <__libc_init_array+0x44>)
 8011ca8:	f001 fe2c 	bl	8013904 <_init>
 8011cac:	1ba4      	subs	r4, r4, r6
 8011cae:	10a4      	asrs	r4, r4, #2
 8011cb0:	2500      	movs	r5, #0
 8011cb2:	42a5      	cmp	r5, r4
 8011cb4:	d105      	bne.n	8011cc2 <__libc_init_array+0x2e>
 8011cb6:	bd70      	pop	{r4, r5, r6, pc}
 8011cb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011cbc:	4798      	blx	r3
 8011cbe:	3501      	adds	r5, #1
 8011cc0:	e7ee      	b.n	8011ca0 <__libc_init_array+0xc>
 8011cc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011cc6:	4798      	blx	r3
 8011cc8:	3501      	adds	r5, #1
 8011cca:	e7f2      	b.n	8011cb2 <__libc_init_array+0x1e>
 8011ccc:	08027498 	.word	0x08027498
 8011cd0:	08027498 	.word	0x08027498
 8011cd4:	08027498 	.word	0x08027498
 8011cd8:	0802749c 	.word	0x0802749c

08011cdc <memcpy>:
 8011cdc:	b510      	push	{r4, lr}
 8011cde:	1e43      	subs	r3, r0, #1
 8011ce0:	440a      	add	r2, r1
 8011ce2:	4291      	cmp	r1, r2
 8011ce4:	d100      	bne.n	8011ce8 <memcpy+0xc>
 8011ce6:	bd10      	pop	{r4, pc}
 8011ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cf0:	e7f7      	b.n	8011ce2 <memcpy+0x6>

08011cf2 <memset>:
 8011cf2:	4402      	add	r2, r0
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d100      	bne.n	8011cfc <memset+0xa>
 8011cfa:	4770      	bx	lr
 8011cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8011d00:	e7f9      	b.n	8011cf6 <memset+0x4>

08011d02 <__cvt>:
 8011d02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d06:	ec55 4b10 	vmov	r4, r5, d0
 8011d0a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011d0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011d10:	2d00      	cmp	r5, #0
 8011d12:	460e      	mov	r6, r1
 8011d14:	4691      	mov	r9, r2
 8011d16:	4619      	mov	r1, r3
 8011d18:	bfb8      	it	lt
 8011d1a:	4622      	movlt	r2, r4
 8011d1c:	462b      	mov	r3, r5
 8011d1e:	f027 0720 	bic.w	r7, r7, #32
 8011d22:	bfbb      	ittet	lt
 8011d24:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011d28:	461d      	movlt	r5, r3
 8011d2a:	2300      	movge	r3, #0
 8011d2c:	232d      	movlt	r3, #45	; 0x2d
 8011d2e:	bfb8      	it	lt
 8011d30:	4614      	movlt	r4, r2
 8011d32:	2f46      	cmp	r7, #70	; 0x46
 8011d34:	700b      	strb	r3, [r1, #0]
 8011d36:	d004      	beq.n	8011d42 <__cvt+0x40>
 8011d38:	2f45      	cmp	r7, #69	; 0x45
 8011d3a:	d100      	bne.n	8011d3e <__cvt+0x3c>
 8011d3c:	3601      	adds	r6, #1
 8011d3e:	2102      	movs	r1, #2
 8011d40:	e000      	b.n	8011d44 <__cvt+0x42>
 8011d42:	2103      	movs	r1, #3
 8011d44:	ab03      	add	r3, sp, #12
 8011d46:	9301      	str	r3, [sp, #4]
 8011d48:	ab02      	add	r3, sp, #8
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	4632      	mov	r2, r6
 8011d4e:	4653      	mov	r3, sl
 8011d50:	ec45 4b10 	vmov	d0, r4, r5
 8011d54:	f000 fbac 	bl	80124b0 <_dtoa_r>
 8011d58:	2f47      	cmp	r7, #71	; 0x47
 8011d5a:	4680      	mov	r8, r0
 8011d5c:	d102      	bne.n	8011d64 <__cvt+0x62>
 8011d5e:	f019 0f01 	tst.w	r9, #1
 8011d62:	d026      	beq.n	8011db2 <__cvt+0xb0>
 8011d64:	2f46      	cmp	r7, #70	; 0x46
 8011d66:	eb08 0906 	add.w	r9, r8, r6
 8011d6a:	d111      	bne.n	8011d90 <__cvt+0x8e>
 8011d6c:	f898 3000 	ldrb.w	r3, [r8]
 8011d70:	2b30      	cmp	r3, #48	; 0x30
 8011d72:	d10a      	bne.n	8011d8a <__cvt+0x88>
 8011d74:	2200      	movs	r2, #0
 8011d76:	2300      	movs	r3, #0
 8011d78:	4620      	mov	r0, r4
 8011d7a:	4629      	mov	r1, r5
 8011d7c:	f7f6 fd8c 	bl	8008898 <__aeabi_dcmpeq>
 8011d80:	b918      	cbnz	r0, 8011d8a <__cvt+0x88>
 8011d82:	f1c6 0601 	rsb	r6, r6, #1
 8011d86:	f8ca 6000 	str.w	r6, [sl]
 8011d8a:	f8da 3000 	ldr.w	r3, [sl]
 8011d8e:	4499      	add	r9, r3
 8011d90:	2200      	movs	r2, #0
 8011d92:	2300      	movs	r3, #0
 8011d94:	4620      	mov	r0, r4
 8011d96:	4629      	mov	r1, r5
 8011d98:	f7f6 fd7e 	bl	8008898 <__aeabi_dcmpeq>
 8011d9c:	b938      	cbnz	r0, 8011dae <__cvt+0xac>
 8011d9e:	2230      	movs	r2, #48	; 0x30
 8011da0:	9b03      	ldr	r3, [sp, #12]
 8011da2:	454b      	cmp	r3, r9
 8011da4:	d205      	bcs.n	8011db2 <__cvt+0xb0>
 8011da6:	1c59      	adds	r1, r3, #1
 8011da8:	9103      	str	r1, [sp, #12]
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	e7f8      	b.n	8011da0 <__cvt+0x9e>
 8011dae:	f8cd 900c 	str.w	r9, [sp, #12]
 8011db2:	9b03      	ldr	r3, [sp, #12]
 8011db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011db6:	eba3 0308 	sub.w	r3, r3, r8
 8011dba:	4640      	mov	r0, r8
 8011dbc:	6013      	str	r3, [r2, #0]
 8011dbe:	b004      	add	sp, #16
 8011dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011dc4 <__exponent>:
 8011dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011dc6:	2900      	cmp	r1, #0
 8011dc8:	4604      	mov	r4, r0
 8011dca:	bfba      	itte	lt
 8011dcc:	4249      	neglt	r1, r1
 8011dce:	232d      	movlt	r3, #45	; 0x2d
 8011dd0:	232b      	movge	r3, #43	; 0x2b
 8011dd2:	2909      	cmp	r1, #9
 8011dd4:	f804 2b02 	strb.w	r2, [r4], #2
 8011dd8:	7043      	strb	r3, [r0, #1]
 8011dda:	dd20      	ble.n	8011e1e <__exponent+0x5a>
 8011ddc:	f10d 0307 	add.w	r3, sp, #7
 8011de0:	461f      	mov	r7, r3
 8011de2:	260a      	movs	r6, #10
 8011de4:	fb91 f5f6 	sdiv	r5, r1, r6
 8011de8:	fb06 1115 	mls	r1, r6, r5, r1
 8011dec:	3130      	adds	r1, #48	; 0x30
 8011dee:	2d09      	cmp	r5, #9
 8011df0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011df4:	f103 32ff 	add.w	r2, r3, #4294967295
 8011df8:	4629      	mov	r1, r5
 8011dfa:	dc09      	bgt.n	8011e10 <__exponent+0x4c>
 8011dfc:	3130      	adds	r1, #48	; 0x30
 8011dfe:	3b02      	subs	r3, #2
 8011e00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011e04:	42bb      	cmp	r3, r7
 8011e06:	4622      	mov	r2, r4
 8011e08:	d304      	bcc.n	8011e14 <__exponent+0x50>
 8011e0a:	1a10      	subs	r0, r2, r0
 8011e0c:	b003      	add	sp, #12
 8011e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e10:	4613      	mov	r3, r2
 8011e12:	e7e7      	b.n	8011de4 <__exponent+0x20>
 8011e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e18:	f804 2b01 	strb.w	r2, [r4], #1
 8011e1c:	e7f2      	b.n	8011e04 <__exponent+0x40>
 8011e1e:	2330      	movs	r3, #48	; 0x30
 8011e20:	4419      	add	r1, r3
 8011e22:	7083      	strb	r3, [r0, #2]
 8011e24:	1d02      	adds	r2, r0, #4
 8011e26:	70c1      	strb	r1, [r0, #3]
 8011e28:	e7ef      	b.n	8011e0a <__exponent+0x46>
	...

08011e2c <_printf_float>:
 8011e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e30:	b08d      	sub	sp, #52	; 0x34
 8011e32:	460c      	mov	r4, r1
 8011e34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011e38:	4616      	mov	r6, r2
 8011e3a:	461f      	mov	r7, r3
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	f001 f8ef 	bl	8013020 <_localeconv_r>
 8011e42:	6803      	ldr	r3, [r0, #0]
 8011e44:	9304      	str	r3, [sp, #16]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7f6 f8fa 	bl	8008040 <strlen>
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8011e50:	f8d8 3000 	ldr.w	r3, [r8]
 8011e54:	9005      	str	r0, [sp, #20]
 8011e56:	3307      	adds	r3, #7
 8011e58:	f023 0307 	bic.w	r3, r3, #7
 8011e5c:	f103 0208 	add.w	r2, r3, #8
 8011e60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011e64:	f8d4 b000 	ldr.w	fp, [r4]
 8011e68:	f8c8 2000 	str.w	r2, [r8]
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011e74:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011e78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011e7c:	9307      	str	r3, [sp, #28]
 8011e7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011e82:	f04f 32ff 	mov.w	r2, #4294967295
 8011e86:	4ba7      	ldr	r3, [pc, #668]	; (8012124 <_printf_float+0x2f8>)
 8011e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e8c:	f7f6 fd36 	bl	80088fc <__aeabi_dcmpun>
 8011e90:	bb70      	cbnz	r0, 8011ef0 <_printf_float+0xc4>
 8011e92:	f04f 32ff 	mov.w	r2, #4294967295
 8011e96:	4ba3      	ldr	r3, [pc, #652]	; (8012124 <_printf_float+0x2f8>)
 8011e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e9c:	f7f6 fd10 	bl	80088c0 <__aeabi_dcmple>
 8011ea0:	bb30      	cbnz	r0, 8011ef0 <_printf_float+0xc4>
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	4640      	mov	r0, r8
 8011ea8:	4649      	mov	r1, r9
 8011eaa:	f7f6 fcff 	bl	80088ac <__aeabi_dcmplt>
 8011eae:	b110      	cbz	r0, 8011eb6 <_printf_float+0x8a>
 8011eb0:	232d      	movs	r3, #45	; 0x2d
 8011eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011eb6:	4a9c      	ldr	r2, [pc, #624]	; (8012128 <_printf_float+0x2fc>)
 8011eb8:	4b9c      	ldr	r3, [pc, #624]	; (801212c <_printf_float+0x300>)
 8011eba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011ebe:	bf8c      	ite	hi
 8011ec0:	4690      	movhi	r8, r2
 8011ec2:	4698      	movls	r8, r3
 8011ec4:	2303      	movs	r3, #3
 8011ec6:	f02b 0204 	bic.w	r2, fp, #4
 8011eca:	6123      	str	r3, [r4, #16]
 8011ecc:	6022      	str	r2, [r4, #0]
 8011ece:	f04f 0900 	mov.w	r9, #0
 8011ed2:	9700      	str	r7, [sp, #0]
 8011ed4:	4633      	mov	r3, r6
 8011ed6:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ed8:	4621      	mov	r1, r4
 8011eda:	4628      	mov	r0, r5
 8011edc:	f000 f9e6 	bl	80122ac <_printf_common>
 8011ee0:	3001      	adds	r0, #1
 8011ee2:	f040 808d 	bne.w	8012000 <_printf_float+0x1d4>
 8011ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eea:	b00d      	add	sp, #52	; 0x34
 8011eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef0:	4642      	mov	r2, r8
 8011ef2:	464b      	mov	r3, r9
 8011ef4:	4640      	mov	r0, r8
 8011ef6:	4649      	mov	r1, r9
 8011ef8:	f7f6 fd00 	bl	80088fc <__aeabi_dcmpun>
 8011efc:	b110      	cbz	r0, 8011f04 <_printf_float+0xd8>
 8011efe:	4a8c      	ldr	r2, [pc, #560]	; (8012130 <_printf_float+0x304>)
 8011f00:	4b8c      	ldr	r3, [pc, #560]	; (8012134 <_printf_float+0x308>)
 8011f02:	e7da      	b.n	8011eba <_printf_float+0x8e>
 8011f04:	6861      	ldr	r1, [r4, #4]
 8011f06:	1c4b      	adds	r3, r1, #1
 8011f08:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011f0c:	a80a      	add	r0, sp, #40	; 0x28
 8011f0e:	d13e      	bne.n	8011f8e <_printf_float+0x162>
 8011f10:	2306      	movs	r3, #6
 8011f12:	6063      	str	r3, [r4, #4]
 8011f14:	2300      	movs	r3, #0
 8011f16:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011f1a:	ab09      	add	r3, sp, #36	; 0x24
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	ec49 8b10 	vmov	d0, r8, r9
 8011f22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011f26:	6022      	str	r2, [r4, #0]
 8011f28:	f8cd a004 	str.w	sl, [sp, #4]
 8011f2c:	6861      	ldr	r1, [r4, #4]
 8011f2e:	4628      	mov	r0, r5
 8011f30:	f7ff fee7 	bl	8011d02 <__cvt>
 8011f34:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011f38:	2b47      	cmp	r3, #71	; 0x47
 8011f3a:	4680      	mov	r8, r0
 8011f3c:	d109      	bne.n	8011f52 <_printf_float+0x126>
 8011f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f40:	1cd8      	adds	r0, r3, #3
 8011f42:	db02      	blt.n	8011f4a <_printf_float+0x11e>
 8011f44:	6862      	ldr	r2, [r4, #4]
 8011f46:	4293      	cmp	r3, r2
 8011f48:	dd47      	ble.n	8011fda <_printf_float+0x1ae>
 8011f4a:	f1aa 0a02 	sub.w	sl, sl, #2
 8011f4e:	fa5f fa8a 	uxtb.w	sl, sl
 8011f52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011f56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f58:	d824      	bhi.n	8011fa4 <_printf_float+0x178>
 8011f5a:	3901      	subs	r1, #1
 8011f5c:	4652      	mov	r2, sl
 8011f5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011f62:	9109      	str	r1, [sp, #36]	; 0x24
 8011f64:	f7ff ff2e 	bl	8011dc4 <__exponent>
 8011f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f6a:	1813      	adds	r3, r2, r0
 8011f6c:	2a01      	cmp	r2, #1
 8011f6e:	4681      	mov	r9, r0
 8011f70:	6123      	str	r3, [r4, #16]
 8011f72:	dc02      	bgt.n	8011f7a <_printf_float+0x14e>
 8011f74:	6822      	ldr	r2, [r4, #0]
 8011f76:	07d1      	lsls	r1, r2, #31
 8011f78:	d501      	bpl.n	8011f7e <_printf_float+0x152>
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	6123      	str	r3, [r4, #16]
 8011f7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d0a5      	beq.n	8011ed2 <_printf_float+0xa6>
 8011f86:	232d      	movs	r3, #45	; 0x2d
 8011f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f8c:	e7a1      	b.n	8011ed2 <_printf_float+0xa6>
 8011f8e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011f92:	f000 8177 	beq.w	8012284 <_printf_float+0x458>
 8011f96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011f9a:	d1bb      	bne.n	8011f14 <_printf_float+0xe8>
 8011f9c:	2900      	cmp	r1, #0
 8011f9e:	d1b9      	bne.n	8011f14 <_printf_float+0xe8>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e7b6      	b.n	8011f12 <_printf_float+0xe6>
 8011fa4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011fa8:	d119      	bne.n	8011fde <_printf_float+0x1b2>
 8011faa:	2900      	cmp	r1, #0
 8011fac:	6863      	ldr	r3, [r4, #4]
 8011fae:	dd0c      	ble.n	8011fca <_printf_float+0x19e>
 8011fb0:	6121      	str	r1, [r4, #16]
 8011fb2:	b913      	cbnz	r3, 8011fba <_printf_float+0x18e>
 8011fb4:	6822      	ldr	r2, [r4, #0]
 8011fb6:	07d2      	lsls	r2, r2, #31
 8011fb8:	d502      	bpl.n	8011fc0 <_printf_float+0x194>
 8011fba:	3301      	adds	r3, #1
 8011fbc:	440b      	add	r3, r1
 8011fbe:	6123      	str	r3, [r4, #16]
 8011fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc2:	65a3      	str	r3, [r4, #88]	; 0x58
 8011fc4:	f04f 0900 	mov.w	r9, #0
 8011fc8:	e7d9      	b.n	8011f7e <_printf_float+0x152>
 8011fca:	b913      	cbnz	r3, 8011fd2 <_printf_float+0x1a6>
 8011fcc:	6822      	ldr	r2, [r4, #0]
 8011fce:	07d0      	lsls	r0, r2, #31
 8011fd0:	d501      	bpl.n	8011fd6 <_printf_float+0x1aa>
 8011fd2:	3302      	adds	r3, #2
 8011fd4:	e7f3      	b.n	8011fbe <_printf_float+0x192>
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	e7f1      	b.n	8011fbe <_printf_float+0x192>
 8011fda:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011fde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	db05      	blt.n	8011ff2 <_printf_float+0x1c6>
 8011fe6:	6822      	ldr	r2, [r4, #0]
 8011fe8:	6123      	str	r3, [r4, #16]
 8011fea:	07d1      	lsls	r1, r2, #31
 8011fec:	d5e8      	bpl.n	8011fc0 <_printf_float+0x194>
 8011fee:	3301      	adds	r3, #1
 8011ff0:	e7e5      	b.n	8011fbe <_printf_float+0x192>
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	bfd4      	ite	le
 8011ff6:	f1c3 0302 	rsble	r3, r3, #2
 8011ffa:	2301      	movgt	r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	e7de      	b.n	8011fbe <_printf_float+0x192>
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	055a      	lsls	r2, r3, #21
 8012004:	d407      	bmi.n	8012016 <_printf_float+0x1ea>
 8012006:	6923      	ldr	r3, [r4, #16]
 8012008:	4642      	mov	r2, r8
 801200a:	4631      	mov	r1, r6
 801200c:	4628      	mov	r0, r5
 801200e:	47b8      	blx	r7
 8012010:	3001      	adds	r0, #1
 8012012:	d12b      	bne.n	801206c <_printf_float+0x240>
 8012014:	e767      	b.n	8011ee6 <_printf_float+0xba>
 8012016:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801201a:	f240 80dc 	bls.w	80121d6 <_printf_float+0x3aa>
 801201e:	2200      	movs	r2, #0
 8012020:	2300      	movs	r3, #0
 8012022:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012026:	f7f6 fc37 	bl	8008898 <__aeabi_dcmpeq>
 801202a:	2800      	cmp	r0, #0
 801202c:	d033      	beq.n	8012096 <_printf_float+0x26a>
 801202e:	2301      	movs	r3, #1
 8012030:	4a41      	ldr	r2, [pc, #260]	; (8012138 <_printf_float+0x30c>)
 8012032:	4631      	mov	r1, r6
 8012034:	4628      	mov	r0, r5
 8012036:	47b8      	blx	r7
 8012038:	3001      	adds	r0, #1
 801203a:	f43f af54 	beq.w	8011ee6 <_printf_float+0xba>
 801203e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012042:	429a      	cmp	r2, r3
 8012044:	db02      	blt.n	801204c <_printf_float+0x220>
 8012046:	6823      	ldr	r3, [r4, #0]
 8012048:	07d8      	lsls	r0, r3, #31
 801204a:	d50f      	bpl.n	801206c <_printf_float+0x240>
 801204c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012050:	4631      	mov	r1, r6
 8012052:	4628      	mov	r0, r5
 8012054:	47b8      	blx	r7
 8012056:	3001      	adds	r0, #1
 8012058:	f43f af45 	beq.w	8011ee6 <_printf_float+0xba>
 801205c:	f04f 0800 	mov.w	r8, #0
 8012060:	f104 091a 	add.w	r9, r4, #26
 8012064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012066:	3b01      	subs	r3, #1
 8012068:	4543      	cmp	r3, r8
 801206a:	dc09      	bgt.n	8012080 <_printf_float+0x254>
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	079b      	lsls	r3, r3, #30
 8012070:	f100 8103 	bmi.w	801227a <_printf_float+0x44e>
 8012074:	68e0      	ldr	r0, [r4, #12]
 8012076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012078:	4298      	cmp	r0, r3
 801207a:	bfb8      	it	lt
 801207c:	4618      	movlt	r0, r3
 801207e:	e734      	b.n	8011eea <_printf_float+0xbe>
 8012080:	2301      	movs	r3, #1
 8012082:	464a      	mov	r2, r9
 8012084:	4631      	mov	r1, r6
 8012086:	4628      	mov	r0, r5
 8012088:	47b8      	blx	r7
 801208a:	3001      	adds	r0, #1
 801208c:	f43f af2b 	beq.w	8011ee6 <_printf_float+0xba>
 8012090:	f108 0801 	add.w	r8, r8, #1
 8012094:	e7e6      	b.n	8012064 <_printf_float+0x238>
 8012096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012098:	2b00      	cmp	r3, #0
 801209a:	dc2b      	bgt.n	80120f4 <_printf_float+0x2c8>
 801209c:	2301      	movs	r3, #1
 801209e:	4a26      	ldr	r2, [pc, #152]	; (8012138 <_printf_float+0x30c>)
 80120a0:	4631      	mov	r1, r6
 80120a2:	4628      	mov	r0, r5
 80120a4:	47b8      	blx	r7
 80120a6:	3001      	adds	r0, #1
 80120a8:	f43f af1d 	beq.w	8011ee6 <_printf_float+0xba>
 80120ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ae:	b923      	cbnz	r3, 80120ba <_printf_float+0x28e>
 80120b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120b2:	b913      	cbnz	r3, 80120ba <_printf_float+0x28e>
 80120b4:	6823      	ldr	r3, [r4, #0]
 80120b6:	07d9      	lsls	r1, r3, #31
 80120b8:	d5d8      	bpl.n	801206c <_printf_float+0x240>
 80120ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120be:	4631      	mov	r1, r6
 80120c0:	4628      	mov	r0, r5
 80120c2:	47b8      	blx	r7
 80120c4:	3001      	adds	r0, #1
 80120c6:	f43f af0e 	beq.w	8011ee6 <_printf_float+0xba>
 80120ca:	f04f 0900 	mov.w	r9, #0
 80120ce:	f104 0a1a 	add.w	sl, r4, #26
 80120d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d4:	425b      	negs	r3, r3
 80120d6:	454b      	cmp	r3, r9
 80120d8:	dc01      	bgt.n	80120de <_printf_float+0x2b2>
 80120da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120dc:	e794      	b.n	8012008 <_printf_float+0x1dc>
 80120de:	2301      	movs	r3, #1
 80120e0:	4652      	mov	r2, sl
 80120e2:	4631      	mov	r1, r6
 80120e4:	4628      	mov	r0, r5
 80120e6:	47b8      	blx	r7
 80120e8:	3001      	adds	r0, #1
 80120ea:	f43f aefc 	beq.w	8011ee6 <_printf_float+0xba>
 80120ee:	f109 0901 	add.w	r9, r9, #1
 80120f2:	e7ee      	b.n	80120d2 <_printf_float+0x2a6>
 80120f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80120f8:	429a      	cmp	r2, r3
 80120fa:	bfa8      	it	ge
 80120fc:	461a      	movge	r2, r3
 80120fe:	2a00      	cmp	r2, #0
 8012100:	4691      	mov	r9, r2
 8012102:	dd07      	ble.n	8012114 <_printf_float+0x2e8>
 8012104:	4613      	mov	r3, r2
 8012106:	4631      	mov	r1, r6
 8012108:	4642      	mov	r2, r8
 801210a:	4628      	mov	r0, r5
 801210c:	47b8      	blx	r7
 801210e:	3001      	adds	r0, #1
 8012110:	f43f aee9 	beq.w	8011ee6 <_printf_float+0xba>
 8012114:	f104 031a 	add.w	r3, r4, #26
 8012118:	f04f 0b00 	mov.w	fp, #0
 801211c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012120:	9306      	str	r3, [sp, #24]
 8012122:	e015      	b.n	8012150 <_printf_float+0x324>
 8012124:	7fefffff 	.word	0x7fefffff
 8012128:	080271fc 	.word	0x080271fc
 801212c:	080271f8 	.word	0x080271f8
 8012130:	08027204 	.word	0x08027204
 8012134:	08027200 	.word	0x08027200
 8012138:	08027208 	.word	0x08027208
 801213c:	2301      	movs	r3, #1
 801213e:	9a06      	ldr	r2, [sp, #24]
 8012140:	4631      	mov	r1, r6
 8012142:	4628      	mov	r0, r5
 8012144:	47b8      	blx	r7
 8012146:	3001      	adds	r0, #1
 8012148:	f43f aecd 	beq.w	8011ee6 <_printf_float+0xba>
 801214c:	f10b 0b01 	add.w	fp, fp, #1
 8012150:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012154:	ebaa 0309 	sub.w	r3, sl, r9
 8012158:	455b      	cmp	r3, fp
 801215a:	dcef      	bgt.n	801213c <_printf_float+0x310>
 801215c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012160:	429a      	cmp	r2, r3
 8012162:	44d0      	add	r8, sl
 8012164:	db15      	blt.n	8012192 <_printf_float+0x366>
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	07da      	lsls	r2, r3, #31
 801216a:	d412      	bmi.n	8012192 <_printf_float+0x366>
 801216c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801216e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012170:	eba3 020a 	sub.w	r2, r3, sl
 8012174:	eba3 0a01 	sub.w	sl, r3, r1
 8012178:	4592      	cmp	sl, r2
 801217a:	bfa8      	it	ge
 801217c:	4692      	movge	sl, r2
 801217e:	f1ba 0f00 	cmp.w	sl, #0
 8012182:	dc0e      	bgt.n	80121a2 <_printf_float+0x376>
 8012184:	f04f 0800 	mov.w	r8, #0
 8012188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801218c:	f104 091a 	add.w	r9, r4, #26
 8012190:	e019      	b.n	80121c6 <_printf_float+0x39a>
 8012192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012196:	4631      	mov	r1, r6
 8012198:	4628      	mov	r0, r5
 801219a:	47b8      	blx	r7
 801219c:	3001      	adds	r0, #1
 801219e:	d1e5      	bne.n	801216c <_printf_float+0x340>
 80121a0:	e6a1      	b.n	8011ee6 <_printf_float+0xba>
 80121a2:	4653      	mov	r3, sl
 80121a4:	4642      	mov	r2, r8
 80121a6:	4631      	mov	r1, r6
 80121a8:	4628      	mov	r0, r5
 80121aa:	47b8      	blx	r7
 80121ac:	3001      	adds	r0, #1
 80121ae:	d1e9      	bne.n	8012184 <_printf_float+0x358>
 80121b0:	e699      	b.n	8011ee6 <_printf_float+0xba>
 80121b2:	2301      	movs	r3, #1
 80121b4:	464a      	mov	r2, r9
 80121b6:	4631      	mov	r1, r6
 80121b8:	4628      	mov	r0, r5
 80121ba:	47b8      	blx	r7
 80121bc:	3001      	adds	r0, #1
 80121be:	f43f ae92 	beq.w	8011ee6 <_printf_float+0xba>
 80121c2:	f108 0801 	add.w	r8, r8, #1
 80121c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121ca:	1a9b      	subs	r3, r3, r2
 80121cc:	eba3 030a 	sub.w	r3, r3, sl
 80121d0:	4543      	cmp	r3, r8
 80121d2:	dcee      	bgt.n	80121b2 <_printf_float+0x386>
 80121d4:	e74a      	b.n	801206c <_printf_float+0x240>
 80121d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121d8:	2a01      	cmp	r2, #1
 80121da:	dc01      	bgt.n	80121e0 <_printf_float+0x3b4>
 80121dc:	07db      	lsls	r3, r3, #31
 80121de:	d53a      	bpl.n	8012256 <_printf_float+0x42a>
 80121e0:	2301      	movs	r3, #1
 80121e2:	4642      	mov	r2, r8
 80121e4:	4631      	mov	r1, r6
 80121e6:	4628      	mov	r0, r5
 80121e8:	47b8      	blx	r7
 80121ea:	3001      	adds	r0, #1
 80121ec:	f43f ae7b 	beq.w	8011ee6 <_printf_float+0xba>
 80121f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121f4:	4631      	mov	r1, r6
 80121f6:	4628      	mov	r0, r5
 80121f8:	47b8      	blx	r7
 80121fa:	3001      	adds	r0, #1
 80121fc:	f108 0801 	add.w	r8, r8, #1
 8012200:	f43f ae71 	beq.w	8011ee6 <_printf_float+0xba>
 8012204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012206:	2200      	movs	r2, #0
 8012208:	f103 3aff 	add.w	sl, r3, #4294967295
 801220c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012210:	2300      	movs	r3, #0
 8012212:	f7f6 fb41 	bl	8008898 <__aeabi_dcmpeq>
 8012216:	b9c8      	cbnz	r0, 801224c <_printf_float+0x420>
 8012218:	4653      	mov	r3, sl
 801221a:	4642      	mov	r2, r8
 801221c:	4631      	mov	r1, r6
 801221e:	4628      	mov	r0, r5
 8012220:	47b8      	blx	r7
 8012222:	3001      	adds	r0, #1
 8012224:	d10e      	bne.n	8012244 <_printf_float+0x418>
 8012226:	e65e      	b.n	8011ee6 <_printf_float+0xba>
 8012228:	2301      	movs	r3, #1
 801222a:	4652      	mov	r2, sl
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	47b8      	blx	r7
 8012232:	3001      	adds	r0, #1
 8012234:	f43f ae57 	beq.w	8011ee6 <_printf_float+0xba>
 8012238:	f108 0801 	add.w	r8, r8, #1
 801223c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801223e:	3b01      	subs	r3, #1
 8012240:	4543      	cmp	r3, r8
 8012242:	dcf1      	bgt.n	8012228 <_printf_float+0x3fc>
 8012244:	464b      	mov	r3, r9
 8012246:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801224a:	e6de      	b.n	801200a <_printf_float+0x1de>
 801224c:	f04f 0800 	mov.w	r8, #0
 8012250:	f104 0a1a 	add.w	sl, r4, #26
 8012254:	e7f2      	b.n	801223c <_printf_float+0x410>
 8012256:	2301      	movs	r3, #1
 8012258:	e7df      	b.n	801221a <_printf_float+0x3ee>
 801225a:	2301      	movs	r3, #1
 801225c:	464a      	mov	r2, r9
 801225e:	4631      	mov	r1, r6
 8012260:	4628      	mov	r0, r5
 8012262:	47b8      	blx	r7
 8012264:	3001      	adds	r0, #1
 8012266:	f43f ae3e 	beq.w	8011ee6 <_printf_float+0xba>
 801226a:	f108 0801 	add.w	r8, r8, #1
 801226e:	68e3      	ldr	r3, [r4, #12]
 8012270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012272:	1a9b      	subs	r3, r3, r2
 8012274:	4543      	cmp	r3, r8
 8012276:	dcf0      	bgt.n	801225a <_printf_float+0x42e>
 8012278:	e6fc      	b.n	8012074 <_printf_float+0x248>
 801227a:	f04f 0800 	mov.w	r8, #0
 801227e:	f104 0919 	add.w	r9, r4, #25
 8012282:	e7f4      	b.n	801226e <_printf_float+0x442>
 8012284:	2900      	cmp	r1, #0
 8012286:	f43f ae8b 	beq.w	8011fa0 <_printf_float+0x174>
 801228a:	2300      	movs	r3, #0
 801228c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012290:	ab09      	add	r3, sp, #36	; 0x24
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	ec49 8b10 	vmov	d0, r8, r9
 8012298:	6022      	str	r2, [r4, #0]
 801229a:	f8cd a004 	str.w	sl, [sp, #4]
 801229e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80122a2:	4628      	mov	r0, r5
 80122a4:	f7ff fd2d 	bl	8011d02 <__cvt>
 80122a8:	4680      	mov	r8, r0
 80122aa:	e648      	b.n	8011f3e <_printf_float+0x112>

080122ac <_printf_common>:
 80122ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b0:	4691      	mov	r9, r2
 80122b2:	461f      	mov	r7, r3
 80122b4:	688a      	ldr	r2, [r1, #8]
 80122b6:	690b      	ldr	r3, [r1, #16]
 80122b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122bc:	4293      	cmp	r3, r2
 80122be:	bfb8      	it	lt
 80122c0:	4613      	movlt	r3, r2
 80122c2:	f8c9 3000 	str.w	r3, [r9]
 80122c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122ca:	4606      	mov	r6, r0
 80122cc:	460c      	mov	r4, r1
 80122ce:	b112      	cbz	r2, 80122d6 <_printf_common+0x2a>
 80122d0:	3301      	adds	r3, #1
 80122d2:	f8c9 3000 	str.w	r3, [r9]
 80122d6:	6823      	ldr	r3, [r4, #0]
 80122d8:	0699      	lsls	r1, r3, #26
 80122da:	bf42      	ittt	mi
 80122dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80122e0:	3302      	addmi	r3, #2
 80122e2:	f8c9 3000 	strmi.w	r3, [r9]
 80122e6:	6825      	ldr	r5, [r4, #0]
 80122e8:	f015 0506 	ands.w	r5, r5, #6
 80122ec:	d107      	bne.n	80122fe <_printf_common+0x52>
 80122ee:	f104 0a19 	add.w	sl, r4, #25
 80122f2:	68e3      	ldr	r3, [r4, #12]
 80122f4:	f8d9 2000 	ldr.w	r2, [r9]
 80122f8:	1a9b      	subs	r3, r3, r2
 80122fa:	42ab      	cmp	r3, r5
 80122fc:	dc28      	bgt.n	8012350 <_printf_common+0xa4>
 80122fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012302:	6822      	ldr	r2, [r4, #0]
 8012304:	3300      	adds	r3, #0
 8012306:	bf18      	it	ne
 8012308:	2301      	movne	r3, #1
 801230a:	0692      	lsls	r2, r2, #26
 801230c:	d42d      	bmi.n	801236a <_printf_common+0xbe>
 801230e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012312:	4639      	mov	r1, r7
 8012314:	4630      	mov	r0, r6
 8012316:	47c0      	blx	r8
 8012318:	3001      	adds	r0, #1
 801231a:	d020      	beq.n	801235e <_printf_common+0xb2>
 801231c:	6823      	ldr	r3, [r4, #0]
 801231e:	68e5      	ldr	r5, [r4, #12]
 8012320:	f8d9 2000 	ldr.w	r2, [r9]
 8012324:	f003 0306 	and.w	r3, r3, #6
 8012328:	2b04      	cmp	r3, #4
 801232a:	bf08      	it	eq
 801232c:	1aad      	subeq	r5, r5, r2
 801232e:	68a3      	ldr	r3, [r4, #8]
 8012330:	6922      	ldr	r2, [r4, #16]
 8012332:	bf0c      	ite	eq
 8012334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012338:	2500      	movne	r5, #0
 801233a:	4293      	cmp	r3, r2
 801233c:	bfc4      	itt	gt
 801233e:	1a9b      	subgt	r3, r3, r2
 8012340:	18ed      	addgt	r5, r5, r3
 8012342:	f04f 0900 	mov.w	r9, #0
 8012346:	341a      	adds	r4, #26
 8012348:	454d      	cmp	r5, r9
 801234a:	d11a      	bne.n	8012382 <_printf_common+0xd6>
 801234c:	2000      	movs	r0, #0
 801234e:	e008      	b.n	8012362 <_printf_common+0xb6>
 8012350:	2301      	movs	r3, #1
 8012352:	4652      	mov	r2, sl
 8012354:	4639      	mov	r1, r7
 8012356:	4630      	mov	r0, r6
 8012358:	47c0      	blx	r8
 801235a:	3001      	adds	r0, #1
 801235c:	d103      	bne.n	8012366 <_printf_common+0xba>
 801235e:	f04f 30ff 	mov.w	r0, #4294967295
 8012362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012366:	3501      	adds	r5, #1
 8012368:	e7c3      	b.n	80122f2 <_printf_common+0x46>
 801236a:	18e1      	adds	r1, r4, r3
 801236c:	1c5a      	adds	r2, r3, #1
 801236e:	2030      	movs	r0, #48	; 0x30
 8012370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012374:	4422      	add	r2, r4
 8012376:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801237a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801237e:	3302      	adds	r3, #2
 8012380:	e7c5      	b.n	801230e <_printf_common+0x62>
 8012382:	2301      	movs	r3, #1
 8012384:	4622      	mov	r2, r4
 8012386:	4639      	mov	r1, r7
 8012388:	4630      	mov	r0, r6
 801238a:	47c0      	blx	r8
 801238c:	3001      	adds	r0, #1
 801238e:	d0e6      	beq.n	801235e <_printf_common+0xb2>
 8012390:	f109 0901 	add.w	r9, r9, #1
 8012394:	e7d8      	b.n	8012348 <_printf_common+0x9c>

08012396 <quorem>:
 8012396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801239a:	6903      	ldr	r3, [r0, #16]
 801239c:	690c      	ldr	r4, [r1, #16]
 801239e:	42a3      	cmp	r3, r4
 80123a0:	4680      	mov	r8, r0
 80123a2:	f2c0 8082 	blt.w	80124aa <quorem+0x114>
 80123a6:	3c01      	subs	r4, #1
 80123a8:	f101 0714 	add.w	r7, r1, #20
 80123ac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80123b0:	f100 0614 	add.w	r6, r0, #20
 80123b4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80123b8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80123bc:	eb06 030c 	add.w	r3, r6, ip
 80123c0:	3501      	adds	r5, #1
 80123c2:	eb07 090c 	add.w	r9, r7, ip
 80123c6:	9301      	str	r3, [sp, #4]
 80123c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80123cc:	b395      	cbz	r5, 8012434 <quorem+0x9e>
 80123ce:	f04f 0a00 	mov.w	sl, #0
 80123d2:	4638      	mov	r0, r7
 80123d4:	46b6      	mov	lr, r6
 80123d6:	46d3      	mov	fp, sl
 80123d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80123dc:	b293      	uxth	r3, r2
 80123de:	fb05 a303 	mla	r3, r5, r3, sl
 80123e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	ebab 0303 	sub.w	r3, fp, r3
 80123ec:	0c12      	lsrs	r2, r2, #16
 80123ee:	f8de b000 	ldr.w	fp, [lr]
 80123f2:	fb05 a202 	mla	r2, r5, r2, sl
 80123f6:	fa13 f38b 	uxtah	r3, r3, fp
 80123fa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80123fe:	fa1f fb82 	uxth.w	fp, r2
 8012402:	f8de 2000 	ldr.w	r2, [lr]
 8012406:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801240a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801240e:	b29b      	uxth	r3, r3
 8012410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012414:	4581      	cmp	r9, r0
 8012416:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801241a:	f84e 3b04 	str.w	r3, [lr], #4
 801241e:	d2db      	bcs.n	80123d8 <quorem+0x42>
 8012420:	f856 300c 	ldr.w	r3, [r6, ip]
 8012424:	b933      	cbnz	r3, 8012434 <quorem+0x9e>
 8012426:	9b01      	ldr	r3, [sp, #4]
 8012428:	3b04      	subs	r3, #4
 801242a:	429e      	cmp	r6, r3
 801242c:	461a      	mov	r2, r3
 801242e:	d330      	bcc.n	8012492 <quorem+0xfc>
 8012430:	f8c8 4010 	str.w	r4, [r8, #16]
 8012434:	4640      	mov	r0, r8
 8012436:	f001 f81f 	bl	8013478 <__mcmp>
 801243a:	2800      	cmp	r0, #0
 801243c:	db25      	blt.n	801248a <quorem+0xf4>
 801243e:	3501      	adds	r5, #1
 8012440:	4630      	mov	r0, r6
 8012442:	f04f 0c00 	mov.w	ip, #0
 8012446:	f857 2b04 	ldr.w	r2, [r7], #4
 801244a:	f8d0 e000 	ldr.w	lr, [r0]
 801244e:	b293      	uxth	r3, r2
 8012450:	ebac 0303 	sub.w	r3, ip, r3
 8012454:	0c12      	lsrs	r2, r2, #16
 8012456:	fa13 f38e 	uxtah	r3, r3, lr
 801245a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801245e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012462:	b29b      	uxth	r3, r3
 8012464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012468:	45b9      	cmp	r9, r7
 801246a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801246e:	f840 3b04 	str.w	r3, [r0], #4
 8012472:	d2e8      	bcs.n	8012446 <quorem+0xb0>
 8012474:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012478:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801247c:	b92a      	cbnz	r2, 801248a <quorem+0xf4>
 801247e:	3b04      	subs	r3, #4
 8012480:	429e      	cmp	r6, r3
 8012482:	461a      	mov	r2, r3
 8012484:	d30b      	bcc.n	801249e <quorem+0x108>
 8012486:	f8c8 4010 	str.w	r4, [r8, #16]
 801248a:	4628      	mov	r0, r5
 801248c:	b003      	add	sp, #12
 801248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012492:	6812      	ldr	r2, [r2, #0]
 8012494:	3b04      	subs	r3, #4
 8012496:	2a00      	cmp	r2, #0
 8012498:	d1ca      	bne.n	8012430 <quorem+0x9a>
 801249a:	3c01      	subs	r4, #1
 801249c:	e7c5      	b.n	801242a <quorem+0x94>
 801249e:	6812      	ldr	r2, [r2, #0]
 80124a0:	3b04      	subs	r3, #4
 80124a2:	2a00      	cmp	r2, #0
 80124a4:	d1ef      	bne.n	8012486 <quorem+0xf0>
 80124a6:	3c01      	subs	r4, #1
 80124a8:	e7ea      	b.n	8012480 <quorem+0xea>
 80124aa:	2000      	movs	r0, #0
 80124ac:	e7ee      	b.n	801248c <quorem+0xf6>
	...

080124b0 <_dtoa_r>:
 80124b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b4:	ec57 6b10 	vmov	r6, r7, d0
 80124b8:	b097      	sub	sp, #92	; 0x5c
 80124ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80124bc:	9106      	str	r1, [sp, #24]
 80124be:	4604      	mov	r4, r0
 80124c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80124c2:	9312      	str	r3, [sp, #72]	; 0x48
 80124c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80124c8:	e9cd 6700 	strd	r6, r7, [sp]
 80124cc:	b93d      	cbnz	r5, 80124de <_dtoa_r+0x2e>
 80124ce:	2010      	movs	r0, #16
 80124d0:	f000 fdb4 	bl	801303c <malloc>
 80124d4:	6260      	str	r0, [r4, #36]	; 0x24
 80124d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124da:	6005      	str	r5, [r0, #0]
 80124dc:	60c5      	str	r5, [r0, #12]
 80124de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124e0:	6819      	ldr	r1, [r3, #0]
 80124e2:	b151      	cbz	r1, 80124fa <_dtoa_r+0x4a>
 80124e4:	685a      	ldr	r2, [r3, #4]
 80124e6:	604a      	str	r2, [r1, #4]
 80124e8:	2301      	movs	r3, #1
 80124ea:	4093      	lsls	r3, r2
 80124ec:	608b      	str	r3, [r1, #8]
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 fde0 	bl	80130b4 <_Bfree>
 80124f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124f6:	2200      	movs	r2, #0
 80124f8:	601a      	str	r2, [r3, #0]
 80124fa:	1e3b      	subs	r3, r7, #0
 80124fc:	bfbb      	ittet	lt
 80124fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012502:	9301      	strlt	r3, [sp, #4]
 8012504:	2300      	movge	r3, #0
 8012506:	2201      	movlt	r2, #1
 8012508:	bfac      	ite	ge
 801250a:	f8c8 3000 	strge.w	r3, [r8]
 801250e:	f8c8 2000 	strlt.w	r2, [r8]
 8012512:	4baf      	ldr	r3, [pc, #700]	; (80127d0 <_dtoa_r+0x320>)
 8012514:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012518:	ea33 0308 	bics.w	r3, r3, r8
 801251c:	d114      	bne.n	8012548 <_dtoa_r+0x98>
 801251e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012520:	f242 730f 	movw	r3, #9999	; 0x270f
 8012524:	6013      	str	r3, [r2, #0]
 8012526:	9b00      	ldr	r3, [sp, #0]
 8012528:	b923      	cbnz	r3, 8012534 <_dtoa_r+0x84>
 801252a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801252e:	2800      	cmp	r0, #0
 8012530:	f000 8542 	beq.w	8012fb8 <_dtoa_r+0xb08>
 8012534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012536:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80127e4 <_dtoa_r+0x334>
 801253a:	2b00      	cmp	r3, #0
 801253c:	f000 8544 	beq.w	8012fc8 <_dtoa_r+0xb18>
 8012540:	f10b 0303 	add.w	r3, fp, #3
 8012544:	f000 bd3e 	b.w	8012fc4 <_dtoa_r+0xb14>
 8012548:	e9dd 6700 	ldrd	r6, r7, [sp]
 801254c:	2200      	movs	r2, #0
 801254e:	2300      	movs	r3, #0
 8012550:	4630      	mov	r0, r6
 8012552:	4639      	mov	r1, r7
 8012554:	f7f6 f9a0 	bl	8008898 <__aeabi_dcmpeq>
 8012558:	4681      	mov	r9, r0
 801255a:	b168      	cbz	r0, 8012578 <_dtoa_r+0xc8>
 801255c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801255e:	2301      	movs	r3, #1
 8012560:	6013      	str	r3, [r2, #0]
 8012562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012564:	2b00      	cmp	r3, #0
 8012566:	f000 8524 	beq.w	8012fb2 <_dtoa_r+0xb02>
 801256a:	4b9a      	ldr	r3, [pc, #616]	; (80127d4 <_dtoa_r+0x324>)
 801256c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801256e:	f103 3bff 	add.w	fp, r3, #4294967295
 8012572:	6013      	str	r3, [r2, #0]
 8012574:	f000 bd28 	b.w	8012fc8 <_dtoa_r+0xb18>
 8012578:	aa14      	add	r2, sp, #80	; 0x50
 801257a:	a915      	add	r1, sp, #84	; 0x54
 801257c:	ec47 6b10 	vmov	d0, r6, r7
 8012580:	4620      	mov	r0, r4
 8012582:	f000 fff0 	bl	8013566 <__d2b>
 8012586:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801258a:	9004      	str	r0, [sp, #16]
 801258c:	2d00      	cmp	r5, #0
 801258e:	d07c      	beq.n	801268a <_dtoa_r+0x1da>
 8012590:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012594:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012598:	46b2      	mov	sl, r6
 801259a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801259e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80125a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80125a6:	2200      	movs	r2, #0
 80125a8:	4b8b      	ldr	r3, [pc, #556]	; (80127d8 <_dtoa_r+0x328>)
 80125aa:	4650      	mov	r0, sl
 80125ac:	4659      	mov	r1, fp
 80125ae:	f7f5 fd53 	bl	8008058 <__aeabi_dsub>
 80125b2:	a381      	add	r3, pc, #516	; (adr r3, 80127b8 <_dtoa_r+0x308>)
 80125b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b8:	f7f5 ff06 	bl	80083c8 <__aeabi_dmul>
 80125bc:	a380      	add	r3, pc, #512	; (adr r3, 80127c0 <_dtoa_r+0x310>)
 80125be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c2:	f7f5 fd4b 	bl	800805c <__adddf3>
 80125c6:	4606      	mov	r6, r0
 80125c8:	4628      	mov	r0, r5
 80125ca:	460f      	mov	r7, r1
 80125cc:	f7f5 fe92 	bl	80082f4 <__aeabi_i2d>
 80125d0:	a37d      	add	r3, pc, #500	; (adr r3, 80127c8 <_dtoa_r+0x318>)
 80125d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d6:	f7f5 fef7 	bl	80083c8 <__aeabi_dmul>
 80125da:	4602      	mov	r2, r0
 80125dc:	460b      	mov	r3, r1
 80125de:	4630      	mov	r0, r6
 80125e0:	4639      	mov	r1, r7
 80125e2:	f7f5 fd3b 	bl	800805c <__adddf3>
 80125e6:	4606      	mov	r6, r0
 80125e8:	460f      	mov	r7, r1
 80125ea:	f7f6 f99d 	bl	8008928 <__aeabi_d2iz>
 80125ee:	2200      	movs	r2, #0
 80125f0:	4682      	mov	sl, r0
 80125f2:	2300      	movs	r3, #0
 80125f4:	4630      	mov	r0, r6
 80125f6:	4639      	mov	r1, r7
 80125f8:	f7f6 f958 	bl	80088ac <__aeabi_dcmplt>
 80125fc:	b148      	cbz	r0, 8012612 <_dtoa_r+0x162>
 80125fe:	4650      	mov	r0, sl
 8012600:	f7f5 fe78 	bl	80082f4 <__aeabi_i2d>
 8012604:	4632      	mov	r2, r6
 8012606:	463b      	mov	r3, r7
 8012608:	f7f6 f946 	bl	8008898 <__aeabi_dcmpeq>
 801260c:	b908      	cbnz	r0, 8012612 <_dtoa_r+0x162>
 801260e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012612:	f1ba 0f16 	cmp.w	sl, #22
 8012616:	d859      	bhi.n	80126cc <_dtoa_r+0x21c>
 8012618:	4970      	ldr	r1, [pc, #448]	; (80127dc <_dtoa_r+0x32c>)
 801261a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801261e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012626:	f7f6 f95f 	bl	80088e8 <__aeabi_dcmpgt>
 801262a:	2800      	cmp	r0, #0
 801262c:	d050      	beq.n	80126d0 <_dtoa_r+0x220>
 801262e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012632:	2300      	movs	r3, #0
 8012634:	930f      	str	r3, [sp, #60]	; 0x3c
 8012636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012638:	1b5d      	subs	r5, r3, r5
 801263a:	f1b5 0801 	subs.w	r8, r5, #1
 801263e:	bf49      	itett	mi
 8012640:	f1c5 0301 	rsbmi	r3, r5, #1
 8012644:	2300      	movpl	r3, #0
 8012646:	9305      	strmi	r3, [sp, #20]
 8012648:	f04f 0800 	movmi.w	r8, #0
 801264c:	bf58      	it	pl
 801264e:	9305      	strpl	r3, [sp, #20]
 8012650:	f1ba 0f00 	cmp.w	sl, #0
 8012654:	db3e      	blt.n	80126d4 <_dtoa_r+0x224>
 8012656:	2300      	movs	r3, #0
 8012658:	44d0      	add	r8, sl
 801265a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801265e:	9307      	str	r3, [sp, #28]
 8012660:	9b06      	ldr	r3, [sp, #24]
 8012662:	2b09      	cmp	r3, #9
 8012664:	f200 8090 	bhi.w	8012788 <_dtoa_r+0x2d8>
 8012668:	2b05      	cmp	r3, #5
 801266a:	bfc4      	itt	gt
 801266c:	3b04      	subgt	r3, #4
 801266e:	9306      	strgt	r3, [sp, #24]
 8012670:	9b06      	ldr	r3, [sp, #24]
 8012672:	f1a3 0302 	sub.w	r3, r3, #2
 8012676:	bfcc      	ite	gt
 8012678:	2500      	movgt	r5, #0
 801267a:	2501      	movle	r5, #1
 801267c:	2b03      	cmp	r3, #3
 801267e:	f200 808f 	bhi.w	80127a0 <_dtoa_r+0x2f0>
 8012682:	e8df f003 	tbb	[pc, r3]
 8012686:	7f7d      	.short	0x7f7d
 8012688:	7131      	.short	0x7131
 801268a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801268e:	441d      	add	r5, r3
 8012690:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012694:	2820      	cmp	r0, #32
 8012696:	dd13      	ble.n	80126c0 <_dtoa_r+0x210>
 8012698:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801269c:	9b00      	ldr	r3, [sp, #0]
 801269e:	fa08 f800 	lsl.w	r8, r8, r0
 80126a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80126a6:	fa23 f000 	lsr.w	r0, r3, r0
 80126aa:	ea48 0000 	orr.w	r0, r8, r0
 80126ae:	f7f5 fe11 	bl	80082d4 <__aeabi_ui2d>
 80126b2:	2301      	movs	r3, #1
 80126b4:	4682      	mov	sl, r0
 80126b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80126ba:	3d01      	subs	r5, #1
 80126bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80126be:	e772      	b.n	80125a6 <_dtoa_r+0xf6>
 80126c0:	9b00      	ldr	r3, [sp, #0]
 80126c2:	f1c0 0020 	rsb	r0, r0, #32
 80126c6:	fa03 f000 	lsl.w	r0, r3, r0
 80126ca:	e7f0      	b.n	80126ae <_dtoa_r+0x1fe>
 80126cc:	2301      	movs	r3, #1
 80126ce:	e7b1      	b.n	8012634 <_dtoa_r+0x184>
 80126d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80126d2:	e7b0      	b.n	8012636 <_dtoa_r+0x186>
 80126d4:	9b05      	ldr	r3, [sp, #20]
 80126d6:	eba3 030a 	sub.w	r3, r3, sl
 80126da:	9305      	str	r3, [sp, #20]
 80126dc:	f1ca 0300 	rsb	r3, sl, #0
 80126e0:	9307      	str	r3, [sp, #28]
 80126e2:	2300      	movs	r3, #0
 80126e4:	930e      	str	r3, [sp, #56]	; 0x38
 80126e6:	e7bb      	b.n	8012660 <_dtoa_r+0x1b0>
 80126e8:	2301      	movs	r3, #1
 80126ea:	930a      	str	r3, [sp, #40]	; 0x28
 80126ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	dd59      	ble.n	80127a6 <_dtoa_r+0x2f6>
 80126f2:	9302      	str	r3, [sp, #8]
 80126f4:	4699      	mov	r9, r3
 80126f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80126f8:	2200      	movs	r2, #0
 80126fa:	6072      	str	r2, [r6, #4]
 80126fc:	2204      	movs	r2, #4
 80126fe:	f102 0014 	add.w	r0, r2, #20
 8012702:	4298      	cmp	r0, r3
 8012704:	6871      	ldr	r1, [r6, #4]
 8012706:	d953      	bls.n	80127b0 <_dtoa_r+0x300>
 8012708:	4620      	mov	r0, r4
 801270a:	f000 fc9f 	bl	801304c <_Balloc>
 801270e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012710:	6030      	str	r0, [r6, #0]
 8012712:	f1b9 0f0e 	cmp.w	r9, #14
 8012716:	f8d3 b000 	ldr.w	fp, [r3]
 801271a:	f200 80e6 	bhi.w	80128ea <_dtoa_r+0x43a>
 801271e:	2d00      	cmp	r5, #0
 8012720:	f000 80e3 	beq.w	80128ea <_dtoa_r+0x43a>
 8012724:	ed9d 7b00 	vldr	d7, [sp]
 8012728:	f1ba 0f00 	cmp.w	sl, #0
 801272c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012730:	dd74      	ble.n	801281c <_dtoa_r+0x36c>
 8012732:	4a2a      	ldr	r2, [pc, #168]	; (80127dc <_dtoa_r+0x32c>)
 8012734:	f00a 030f 	and.w	r3, sl, #15
 8012738:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801273c:	ed93 7b00 	vldr	d7, [r3]
 8012740:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012744:	06f0      	lsls	r0, r6, #27
 8012746:	ed8d 7b08 	vstr	d7, [sp, #32]
 801274a:	d565      	bpl.n	8012818 <_dtoa_r+0x368>
 801274c:	4b24      	ldr	r3, [pc, #144]	; (80127e0 <_dtoa_r+0x330>)
 801274e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012752:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012756:	f7f5 ff61 	bl	800861c <__aeabi_ddiv>
 801275a:	e9cd 0100 	strd	r0, r1, [sp]
 801275e:	f006 060f 	and.w	r6, r6, #15
 8012762:	2503      	movs	r5, #3
 8012764:	4f1e      	ldr	r7, [pc, #120]	; (80127e0 <_dtoa_r+0x330>)
 8012766:	e04c      	b.n	8012802 <_dtoa_r+0x352>
 8012768:	2301      	movs	r3, #1
 801276a:	930a      	str	r3, [sp, #40]	; 0x28
 801276c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801276e:	4453      	add	r3, sl
 8012770:	f103 0901 	add.w	r9, r3, #1
 8012774:	9302      	str	r3, [sp, #8]
 8012776:	464b      	mov	r3, r9
 8012778:	2b01      	cmp	r3, #1
 801277a:	bfb8      	it	lt
 801277c:	2301      	movlt	r3, #1
 801277e:	e7ba      	b.n	80126f6 <_dtoa_r+0x246>
 8012780:	2300      	movs	r3, #0
 8012782:	e7b2      	b.n	80126ea <_dtoa_r+0x23a>
 8012784:	2300      	movs	r3, #0
 8012786:	e7f0      	b.n	801276a <_dtoa_r+0x2ba>
 8012788:	2501      	movs	r5, #1
 801278a:	2300      	movs	r3, #0
 801278c:	9306      	str	r3, [sp, #24]
 801278e:	950a      	str	r5, [sp, #40]	; 0x28
 8012790:	f04f 33ff 	mov.w	r3, #4294967295
 8012794:	9302      	str	r3, [sp, #8]
 8012796:	4699      	mov	r9, r3
 8012798:	2200      	movs	r2, #0
 801279a:	2312      	movs	r3, #18
 801279c:	920b      	str	r2, [sp, #44]	; 0x2c
 801279e:	e7aa      	b.n	80126f6 <_dtoa_r+0x246>
 80127a0:	2301      	movs	r3, #1
 80127a2:	930a      	str	r3, [sp, #40]	; 0x28
 80127a4:	e7f4      	b.n	8012790 <_dtoa_r+0x2e0>
 80127a6:	2301      	movs	r3, #1
 80127a8:	9302      	str	r3, [sp, #8]
 80127aa:	4699      	mov	r9, r3
 80127ac:	461a      	mov	r2, r3
 80127ae:	e7f5      	b.n	801279c <_dtoa_r+0x2ec>
 80127b0:	3101      	adds	r1, #1
 80127b2:	6071      	str	r1, [r6, #4]
 80127b4:	0052      	lsls	r2, r2, #1
 80127b6:	e7a2      	b.n	80126fe <_dtoa_r+0x24e>
 80127b8:	636f4361 	.word	0x636f4361
 80127bc:	3fd287a7 	.word	0x3fd287a7
 80127c0:	8b60c8b3 	.word	0x8b60c8b3
 80127c4:	3fc68a28 	.word	0x3fc68a28
 80127c8:	509f79fb 	.word	0x509f79fb
 80127cc:	3fd34413 	.word	0x3fd34413
 80127d0:	7ff00000 	.word	0x7ff00000
 80127d4:	08027209 	.word	0x08027209
 80127d8:	3ff80000 	.word	0x3ff80000
 80127dc:	080272a0 	.word	0x080272a0
 80127e0:	08027278 	.word	0x08027278
 80127e4:	08027213 	.word	0x08027213
 80127e8:	07f1      	lsls	r1, r6, #31
 80127ea:	d508      	bpl.n	80127fe <_dtoa_r+0x34e>
 80127ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80127f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80127f4:	f7f5 fde8 	bl	80083c8 <__aeabi_dmul>
 80127f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80127fc:	3501      	adds	r5, #1
 80127fe:	1076      	asrs	r6, r6, #1
 8012800:	3708      	adds	r7, #8
 8012802:	2e00      	cmp	r6, #0
 8012804:	d1f0      	bne.n	80127e8 <_dtoa_r+0x338>
 8012806:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801280a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801280e:	f7f5 ff05 	bl	800861c <__aeabi_ddiv>
 8012812:	e9cd 0100 	strd	r0, r1, [sp]
 8012816:	e01a      	b.n	801284e <_dtoa_r+0x39e>
 8012818:	2502      	movs	r5, #2
 801281a:	e7a3      	b.n	8012764 <_dtoa_r+0x2b4>
 801281c:	f000 80a0 	beq.w	8012960 <_dtoa_r+0x4b0>
 8012820:	f1ca 0600 	rsb	r6, sl, #0
 8012824:	4b9f      	ldr	r3, [pc, #636]	; (8012aa4 <_dtoa_r+0x5f4>)
 8012826:	4fa0      	ldr	r7, [pc, #640]	; (8012aa8 <_dtoa_r+0x5f8>)
 8012828:	f006 020f 	and.w	r2, r6, #15
 801282c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012834:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012838:	f7f5 fdc6 	bl	80083c8 <__aeabi_dmul>
 801283c:	e9cd 0100 	strd	r0, r1, [sp]
 8012840:	1136      	asrs	r6, r6, #4
 8012842:	2300      	movs	r3, #0
 8012844:	2502      	movs	r5, #2
 8012846:	2e00      	cmp	r6, #0
 8012848:	d17f      	bne.n	801294a <_dtoa_r+0x49a>
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1e1      	bne.n	8012812 <_dtoa_r+0x362>
 801284e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012850:	2b00      	cmp	r3, #0
 8012852:	f000 8087 	beq.w	8012964 <_dtoa_r+0x4b4>
 8012856:	e9dd 6700 	ldrd	r6, r7, [sp]
 801285a:	2200      	movs	r2, #0
 801285c:	4b93      	ldr	r3, [pc, #588]	; (8012aac <_dtoa_r+0x5fc>)
 801285e:	4630      	mov	r0, r6
 8012860:	4639      	mov	r1, r7
 8012862:	f7f6 f823 	bl	80088ac <__aeabi_dcmplt>
 8012866:	2800      	cmp	r0, #0
 8012868:	d07c      	beq.n	8012964 <_dtoa_r+0x4b4>
 801286a:	f1b9 0f00 	cmp.w	r9, #0
 801286e:	d079      	beq.n	8012964 <_dtoa_r+0x4b4>
 8012870:	9b02      	ldr	r3, [sp, #8]
 8012872:	2b00      	cmp	r3, #0
 8012874:	dd35      	ble.n	80128e2 <_dtoa_r+0x432>
 8012876:	f10a 33ff 	add.w	r3, sl, #4294967295
 801287a:	9308      	str	r3, [sp, #32]
 801287c:	4639      	mov	r1, r7
 801287e:	2200      	movs	r2, #0
 8012880:	4b8b      	ldr	r3, [pc, #556]	; (8012ab0 <_dtoa_r+0x600>)
 8012882:	4630      	mov	r0, r6
 8012884:	f7f5 fda0 	bl	80083c8 <__aeabi_dmul>
 8012888:	e9cd 0100 	strd	r0, r1, [sp]
 801288c:	9f02      	ldr	r7, [sp, #8]
 801288e:	3501      	adds	r5, #1
 8012890:	4628      	mov	r0, r5
 8012892:	f7f5 fd2f 	bl	80082f4 <__aeabi_i2d>
 8012896:	e9dd 2300 	ldrd	r2, r3, [sp]
 801289a:	f7f5 fd95 	bl	80083c8 <__aeabi_dmul>
 801289e:	2200      	movs	r2, #0
 80128a0:	4b84      	ldr	r3, [pc, #528]	; (8012ab4 <_dtoa_r+0x604>)
 80128a2:	f7f5 fbdb 	bl	800805c <__adddf3>
 80128a6:	4605      	mov	r5, r0
 80128a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80128ac:	2f00      	cmp	r7, #0
 80128ae:	d15d      	bne.n	801296c <_dtoa_r+0x4bc>
 80128b0:	2200      	movs	r2, #0
 80128b2:	4b81      	ldr	r3, [pc, #516]	; (8012ab8 <_dtoa_r+0x608>)
 80128b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128b8:	f7f5 fbce 	bl	8008058 <__aeabi_dsub>
 80128bc:	462a      	mov	r2, r5
 80128be:	4633      	mov	r3, r6
 80128c0:	e9cd 0100 	strd	r0, r1, [sp]
 80128c4:	f7f6 f810 	bl	80088e8 <__aeabi_dcmpgt>
 80128c8:	2800      	cmp	r0, #0
 80128ca:	f040 8288 	bne.w	8012dde <_dtoa_r+0x92e>
 80128ce:	462a      	mov	r2, r5
 80128d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80128d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128d8:	f7f5 ffe8 	bl	80088ac <__aeabi_dcmplt>
 80128dc:	2800      	cmp	r0, #0
 80128de:	f040 827c 	bne.w	8012dda <_dtoa_r+0x92a>
 80128e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80128e6:	e9cd 2300 	strd	r2, r3, [sp]
 80128ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f2c0 8150 	blt.w	8012b92 <_dtoa_r+0x6e2>
 80128f2:	f1ba 0f0e 	cmp.w	sl, #14
 80128f6:	f300 814c 	bgt.w	8012b92 <_dtoa_r+0x6e2>
 80128fa:	4b6a      	ldr	r3, [pc, #424]	; (8012aa4 <_dtoa_r+0x5f4>)
 80128fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012900:	ed93 7b00 	vldr	d7, [r3]
 8012904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012906:	2b00      	cmp	r3, #0
 8012908:	ed8d 7b02 	vstr	d7, [sp, #8]
 801290c:	f280 80d8 	bge.w	8012ac0 <_dtoa_r+0x610>
 8012910:	f1b9 0f00 	cmp.w	r9, #0
 8012914:	f300 80d4 	bgt.w	8012ac0 <_dtoa_r+0x610>
 8012918:	f040 825e 	bne.w	8012dd8 <_dtoa_r+0x928>
 801291c:	2200      	movs	r2, #0
 801291e:	4b66      	ldr	r3, [pc, #408]	; (8012ab8 <_dtoa_r+0x608>)
 8012920:	ec51 0b17 	vmov	r0, r1, d7
 8012924:	f7f5 fd50 	bl	80083c8 <__aeabi_dmul>
 8012928:	e9dd 2300 	ldrd	r2, r3, [sp]
 801292c:	f7f5 ffd2 	bl	80088d4 <__aeabi_dcmpge>
 8012930:	464f      	mov	r7, r9
 8012932:	464e      	mov	r6, r9
 8012934:	2800      	cmp	r0, #0
 8012936:	f040 8234 	bne.w	8012da2 <_dtoa_r+0x8f2>
 801293a:	2331      	movs	r3, #49	; 0x31
 801293c:	f10b 0501 	add.w	r5, fp, #1
 8012940:	f88b 3000 	strb.w	r3, [fp]
 8012944:	f10a 0a01 	add.w	sl, sl, #1
 8012948:	e22f      	b.n	8012daa <_dtoa_r+0x8fa>
 801294a:	07f2      	lsls	r2, r6, #31
 801294c:	d505      	bpl.n	801295a <_dtoa_r+0x4aa>
 801294e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012952:	f7f5 fd39 	bl	80083c8 <__aeabi_dmul>
 8012956:	3501      	adds	r5, #1
 8012958:	2301      	movs	r3, #1
 801295a:	1076      	asrs	r6, r6, #1
 801295c:	3708      	adds	r7, #8
 801295e:	e772      	b.n	8012846 <_dtoa_r+0x396>
 8012960:	2502      	movs	r5, #2
 8012962:	e774      	b.n	801284e <_dtoa_r+0x39e>
 8012964:	f8cd a020 	str.w	sl, [sp, #32]
 8012968:	464f      	mov	r7, r9
 801296a:	e791      	b.n	8012890 <_dtoa_r+0x3e0>
 801296c:	4b4d      	ldr	r3, [pc, #308]	; (8012aa4 <_dtoa_r+0x5f4>)
 801296e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012972:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012978:	2b00      	cmp	r3, #0
 801297a:	d047      	beq.n	8012a0c <_dtoa_r+0x55c>
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	2000      	movs	r0, #0
 8012982:	494e      	ldr	r1, [pc, #312]	; (8012abc <_dtoa_r+0x60c>)
 8012984:	f7f5 fe4a 	bl	800861c <__aeabi_ddiv>
 8012988:	462a      	mov	r2, r5
 801298a:	4633      	mov	r3, r6
 801298c:	f7f5 fb64 	bl	8008058 <__aeabi_dsub>
 8012990:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012994:	465d      	mov	r5, fp
 8012996:	e9dd 0100 	ldrd	r0, r1, [sp]
 801299a:	f7f5 ffc5 	bl	8008928 <__aeabi_d2iz>
 801299e:	4606      	mov	r6, r0
 80129a0:	f7f5 fca8 	bl	80082f4 <__aeabi_i2d>
 80129a4:	4602      	mov	r2, r0
 80129a6:	460b      	mov	r3, r1
 80129a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129ac:	f7f5 fb54 	bl	8008058 <__aeabi_dsub>
 80129b0:	3630      	adds	r6, #48	; 0x30
 80129b2:	f805 6b01 	strb.w	r6, [r5], #1
 80129b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129ba:	e9cd 0100 	strd	r0, r1, [sp]
 80129be:	f7f5 ff75 	bl	80088ac <__aeabi_dcmplt>
 80129c2:	2800      	cmp	r0, #0
 80129c4:	d163      	bne.n	8012a8e <_dtoa_r+0x5de>
 80129c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129ca:	2000      	movs	r0, #0
 80129cc:	4937      	ldr	r1, [pc, #220]	; (8012aac <_dtoa_r+0x5fc>)
 80129ce:	f7f5 fb43 	bl	8008058 <__aeabi_dsub>
 80129d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129d6:	f7f5 ff69 	bl	80088ac <__aeabi_dcmplt>
 80129da:	2800      	cmp	r0, #0
 80129dc:	f040 80b7 	bne.w	8012b4e <_dtoa_r+0x69e>
 80129e0:	eba5 030b 	sub.w	r3, r5, fp
 80129e4:	429f      	cmp	r7, r3
 80129e6:	f77f af7c 	ble.w	80128e2 <_dtoa_r+0x432>
 80129ea:	2200      	movs	r2, #0
 80129ec:	4b30      	ldr	r3, [pc, #192]	; (8012ab0 <_dtoa_r+0x600>)
 80129ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129f2:	f7f5 fce9 	bl	80083c8 <__aeabi_dmul>
 80129f6:	2200      	movs	r2, #0
 80129f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80129fc:	4b2c      	ldr	r3, [pc, #176]	; (8012ab0 <_dtoa_r+0x600>)
 80129fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a02:	f7f5 fce1 	bl	80083c8 <__aeabi_dmul>
 8012a06:	e9cd 0100 	strd	r0, r1, [sp]
 8012a0a:	e7c4      	b.n	8012996 <_dtoa_r+0x4e6>
 8012a0c:	462a      	mov	r2, r5
 8012a0e:	4633      	mov	r3, r6
 8012a10:	f7f5 fcda 	bl	80083c8 <__aeabi_dmul>
 8012a14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a18:	eb0b 0507 	add.w	r5, fp, r7
 8012a1c:	465e      	mov	r6, fp
 8012a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a22:	f7f5 ff81 	bl	8008928 <__aeabi_d2iz>
 8012a26:	4607      	mov	r7, r0
 8012a28:	f7f5 fc64 	bl	80082f4 <__aeabi_i2d>
 8012a2c:	3730      	adds	r7, #48	; 0x30
 8012a2e:	4602      	mov	r2, r0
 8012a30:	460b      	mov	r3, r1
 8012a32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a36:	f7f5 fb0f 	bl	8008058 <__aeabi_dsub>
 8012a3a:	f806 7b01 	strb.w	r7, [r6], #1
 8012a3e:	42ae      	cmp	r6, r5
 8012a40:	e9cd 0100 	strd	r0, r1, [sp]
 8012a44:	f04f 0200 	mov.w	r2, #0
 8012a48:	d126      	bne.n	8012a98 <_dtoa_r+0x5e8>
 8012a4a:	4b1c      	ldr	r3, [pc, #112]	; (8012abc <_dtoa_r+0x60c>)
 8012a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a50:	f7f5 fb04 	bl	800805c <__adddf3>
 8012a54:	4602      	mov	r2, r0
 8012a56:	460b      	mov	r3, r1
 8012a58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a5c:	f7f5 ff44 	bl	80088e8 <__aeabi_dcmpgt>
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d174      	bne.n	8012b4e <_dtoa_r+0x69e>
 8012a64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a68:	2000      	movs	r0, #0
 8012a6a:	4914      	ldr	r1, [pc, #80]	; (8012abc <_dtoa_r+0x60c>)
 8012a6c:	f7f5 faf4 	bl	8008058 <__aeabi_dsub>
 8012a70:	4602      	mov	r2, r0
 8012a72:	460b      	mov	r3, r1
 8012a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a78:	f7f5 ff18 	bl	80088ac <__aeabi_dcmplt>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	f43f af30 	beq.w	80128e2 <_dtoa_r+0x432>
 8012a82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a86:	2b30      	cmp	r3, #48	; 0x30
 8012a88:	f105 32ff 	add.w	r2, r5, #4294967295
 8012a8c:	d002      	beq.n	8012a94 <_dtoa_r+0x5e4>
 8012a8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012a92:	e04a      	b.n	8012b2a <_dtoa_r+0x67a>
 8012a94:	4615      	mov	r5, r2
 8012a96:	e7f4      	b.n	8012a82 <_dtoa_r+0x5d2>
 8012a98:	4b05      	ldr	r3, [pc, #20]	; (8012ab0 <_dtoa_r+0x600>)
 8012a9a:	f7f5 fc95 	bl	80083c8 <__aeabi_dmul>
 8012a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8012aa2:	e7bc      	b.n	8012a1e <_dtoa_r+0x56e>
 8012aa4:	080272a0 	.word	0x080272a0
 8012aa8:	08027278 	.word	0x08027278
 8012aac:	3ff00000 	.word	0x3ff00000
 8012ab0:	40240000 	.word	0x40240000
 8012ab4:	401c0000 	.word	0x401c0000
 8012ab8:	40140000 	.word	0x40140000
 8012abc:	3fe00000 	.word	0x3fe00000
 8012ac0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012ac4:	465d      	mov	r5, fp
 8012ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012aca:	4630      	mov	r0, r6
 8012acc:	4639      	mov	r1, r7
 8012ace:	f7f5 fda5 	bl	800861c <__aeabi_ddiv>
 8012ad2:	f7f5 ff29 	bl	8008928 <__aeabi_d2iz>
 8012ad6:	4680      	mov	r8, r0
 8012ad8:	f7f5 fc0c 	bl	80082f4 <__aeabi_i2d>
 8012adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ae0:	f7f5 fc72 	bl	80083c8 <__aeabi_dmul>
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	4630      	mov	r0, r6
 8012aea:	4639      	mov	r1, r7
 8012aec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012af0:	f7f5 fab2 	bl	8008058 <__aeabi_dsub>
 8012af4:	f805 6b01 	strb.w	r6, [r5], #1
 8012af8:	eba5 060b 	sub.w	r6, r5, fp
 8012afc:	45b1      	cmp	r9, r6
 8012afe:	4602      	mov	r2, r0
 8012b00:	460b      	mov	r3, r1
 8012b02:	d139      	bne.n	8012b78 <_dtoa_r+0x6c8>
 8012b04:	f7f5 faaa 	bl	800805c <__adddf3>
 8012b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b0c:	4606      	mov	r6, r0
 8012b0e:	460f      	mov	r7, r1
 8012b10:	f7f5 feea 	bl	80088e8 <__aeabi_dcmpgt>
 8012b14:	b9c8      	cbnz	r0, 8012b4a <_dtoa_r+0x69a>
 8012b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	4639      	mov	r1, r7
 8012b1e:	f7f5 febb 	bl	8008898 <__aeabi_dcmpeq>
 8012b22:	b110      	cbz	r0, 8012b2a <_dtoa_r+0x67a>
 8012b24:	f018 0f01 	tst.w	r8, #1
 8012b28:	d10f      	bne.n	8012b4a <_dtoa_r+0x69a>
 8012b2a:	9904      	ldr	r1, [sp, #16]
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f000 fac1 	bl	80130b4 <_Bfree>
 8012b32:	2300      	movs	r3, #0
 8012b34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012b36:	702b      	strb	r3, [r5, #0]
 8012b38:	f10a 0301 	add.w	r3, sl, #1
 8012b3c:	6013      	str	r3, [r2, #0]
 8012b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f000 8241 	beq.w	8012fc8 <_dtoa_r+0xb18>
 8012b46:	601d      	str	r5, [r3, #0]
 8012b48:	e23e      	b.n	8012fc8 <_dtoa_r+0xb18>
 8012b4a:	f8cd a020 	str.w	sl, [sp, #32]
 8012b4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b52:	2a39      	cmp	r2, #57	; 0x39
 8012b54:	f105 33ff 	add.w	r3, r5, #4294967295
 8012b58:	d108      	bne.n	8012b6c <_dtoa_r+0x6bc>
 8012b5a:	459b      	cmp	fp, r3
 8012b5c:	d10a      	bne.n	8012b74 <_dtoa_r+0x6c4>
 8012b5e:	9b08      	ldr	r3, [sp, #32]
 8012b60:	3301      	adds	r3, #1
 8012b62:	9308      	str	r3, [sp, #32]
 8012b64:	2330      	movs	r3, #48	; 0x30
 8012b66:	f88b 3000 	strb.w	r3, [fp]
 8012b6a:	465b      	mov	r3, fp
 8012b6c:	781a      	ldrb	r2, [r3, #0]
 8012b6e:	3201      	adds	r2, #1
 8012b70:	701a      	strb	r2, [r3, #0]
 8012b72:	e78c      	b.n	8012a8e <_dtoa_r+0x5de>
 8012b74:	461d      	mov	r5, r3
 8012b76:	e7ea      	b.n	8012b4e <_dtoa_r+0x69e>
 8012b78:	2200      	movs	r2, #0
 8012b7a:	4b9b      	ldr	r3, [pc, #620]	; (8012de8 <_dtoa_r+0x938>)
 8012b7c:	f7f5 fc24 	bl	80083c8 <__aeabi_dmul>
 8012b80:	2200      	movs	r2, #0
 8012b82:	2300      	movs	r3, #0
 8012b84:	4606      	mov	r6, r0
 8012b86:	460f      	mov	r7, r1
 8012b88:	f7f5 fe86 	bl	8008898 <__aeabi_dcmpeq>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d09a      	beq.n	8012ac6 <_dtoa_r+0x616>
 8012b90:	e7cb      	b.n	8012b2a <_dtoa_r+0x67a>
 8012b92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b94:	2a00      	cmp	r2, #0
 8012b96:	f000 808b 	beq.w	8012cb0 <_dtoa_r+0x800>
 8012b9a:	9a06      	ldr	r2, [sp, #24]
 8012b9c:	2a01      	cmp	r2, #1
 8012b9e:	dc6e      	bgt.n	8012c7e <_dtoa_r+0x7ce>
 8012ba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012ba2:	2a00      	cmp	r2, #0
 8012ba4:	d067      	beq.n	8012c76 <_dtoa_r+0x7c6>
 8012ba6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012baa:	9f07      	ldr	r7, [sp, #28]
 8012bac:	9d05      	ldr	r5, [sp, #20]
 8012bae:	9a05      	ldr	r2, [sp, #20]
 8012bb0:	2101      	movs	r1, #1
 8012bb2:	441a      	add	r2, r3
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	9205      	str	r2, [sp, #20]
 8012bb8:	4498      	add	r8, r3
 8012bba:	f000 fb1b 	bl	80131f4 <__i2b>
 8012bbe:	4606      	mov	r6, r0
 8012bc0:	2d00      	cmp	r5, #0
 8012bc2:	dd0c      	ble.n	8012bde <_dtoa_r+0x72e>
 8012bc4:	f1b8 0f00 	cmp.w	r8, #0
 8012bc8:	dd09      	ble.n	8012bde <_dtoa_r+0x72e>
 8012bca:	4545      	cmp	r5, r8
 8012bcc:	9a05      	ldr	r2, [sp, #20]
 8012bce:	462b      	mov	r3, r5
 8012bd0:	bfa8      	it	ge
 8012bd2:	4643      	movge	r3, r8
 8012bd4:	1ad2      	subs	r2, r2, r3
 8012bd6:	9205      	str	r2, [sp, #20]
 8012bd8:	1aed      	subs	r5, r5, r3
 8012bda:	eba8 0803 	sub.w	r8, r8, r3
 8012bde:	9b07      	ldr	r3, [sp, #28]
 8012be0:	b1eb      	cbz	r3, 8012c1e <_dtoa_r+0x76e>
 8012be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d067      	beq.n	8012cb8 <_dtoa_r+0x808>
 8012be8:	b18f      	cbz	r7, 8012c0e <_dtoa_r+0x75e>
 8012bea:	4631      	mov	r1, r6
 8012bec:	463a      	mov	r2, r7
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f000 fba0 	bl	8013334 <__pow5mult>
 8012bf4:	9a04      	ldr	r2, [sp, #16]
 8012bf6:	4601      	mov	r1, r0
 8012bf8:	4606      	mov	r6, r0
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f000 fb03 	bl	8013206 <__multiply>
 8012c00:	9904      	ldr	r1, [sp, #16]
 8012c02:	9008      	str	r0, [sp, #32]
 8012c04:	4620      	mov	r0, r4
 8012c06:	f000 fa55 	bl	80130b4 <_Bfree>
 8012c0a:	9b08      	ldr	r3, [sp, #32]
 8012c0c:	9304      	str	r3, [sp, #16]
 8012c0e:	9b07      	ldr	r3, [sp, #28]
 8012c10:	1bda      	subs	r2, r3, r7
 8012c12:	d004      	beq.n	8012c1e <_dtoa_r+0x76e>
 8012c14:	9904      	ldr	r1, [sp, #16]
 8012c16:	4620      	mov	r0, r4
 8012c18:	f000 fb8c 	bl	8013334 <__pow5mult>
 8012c1c:	9004      	str	r0, [sp, #16]
 8012c1e:	2101      	movs	r1, #1
 8012c20:	4620      	mov	r0, r4
 8012c22:	f000 fae7 	bl	80131f4 <__i2b>
 8012c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c28:	4607      	mov	r7, r0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f000 81d0 	beq.w	8012fd0 <_dtoa_r+0xb20>
 8012c30:	461a      	mov	r2, r3
 8012c32:	4601      	mov	r1, r0
 8012c34:	4620      	mov	r0, r4
 8012c36:	f000 fb7d 	bl	8013334 <__pow5mult>
 8012c3a:	9b06      	ldr	r3, [sp, #24]
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	4607      	mov	r7, r0
 8012c40:	dc40      	bgt.n	8012cc4 <_dtoa_r+0x814>
 8012c42:	9b00      	ldr	r3, [sp, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d139      	bne.n	8012cbc <_dtoa_r+0x80c>
 8012c48:	9b01      	ldr	r3, [sp, #4]
 8012c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d136      	bne.n	8012cc0 <_dtoa_r+0x810>
 8012c52:	9b01      	ldr	r3, [sp, #4]
 8012c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c58:	0d1b      	lsrs	r3, r3, #20
 8012c5a:	051b      	lsls	r3, r3, #20
 8012c5c:	b12b      	cbz	r3, 8012c6a <_dtoa_r+0x7ba>
 8012c5e:	9b05      	ldr	r3, [sp, #20]
 8012c60:	3301      	adds	r3, #1
 8012c62:	9305      	str	r3, [sp, #20]
 8012c64:	f108 0801 	add.w	r8, r8, #1
 8012c68:	2301      	movs	r3, #1
 8012c6a:	9307      	str	r3, [sp, #28]
 8012c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d12a      	bne.n	8012cc8 <_dtoa_r+0x818>
 8012c72:	2001      	movs	r0, #1
 8012c74:	e030      	b.n	8012cd8 <_dtoa_r+0x828>
 8012c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012c7c:	e795      	b.n	8012baa <_dtoa_r+0x6fa>
 8012c7e:	9b07      	ldr	r3, [sp, #28]
 8012c80:	f109 37ff 	add.w	r7, r9, #4294967295
 8012c84:	42bb      	cmp	r3, r7
 8012c86:	bfbf      	itttt	lt
 8012c88:	9b07      	ldrlt	r3, [sp, #28]
 8012c8a:	9707      	strlt	r7, [sp, #28]
 8012c8c:	1afa      	sublt	r2, r7, r3
 8012c8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012c90:	bfbb      	ittet	lt
 8012c92:	189b      	addlt	r3, r3, r2
 8012c94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012c96:	1bdf      	subge	r7, r3, r7
 8012c98:	2700      	movlt	r7, #0
 8012c9a:	f1b9 0f00 	cmp.w	r9, #0
 8012c9e:	bfb5      	itete	lt
 8012ca0:	9b05      	ldrlt	r3, [sp, #20]
 8012ca2:	9d05      	ldrge	r5, [sp, #20]
 8012ca4:	eba3 0509 	sublt.w	r5, r3, r9
 8012ca8:	464b      	movge	r3, r9
 8012caa:	bfb8      	it	lt
 8012cac:	2300      	movlt	r3, #0
 8012cae:	e77e      	b.n	8012bae <_dtoa_r+0x6fe>
 8012cb0:	9f07      	ldr	r7, [sp, #28]
 8012cb2:	9d05      	ldr	r5, [sp, #20]
 8012cb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012cb6:	e783      	b.n	8012bc0 <_dtoa_r+0x710>
 8012cb8:	9a07      	ldr	r2, [sp, #28]
 8012cba:	e7ab      	b.n	8012c14 <_dtoa_r+0x764>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	e7d4      	b.n	8012c6a <_dtoa_r+0x7ba>
 8012cc0:	9b00      	ldr	r3, [sp, #0]
 8012cc2:	e7d2      	b.n	8012c6a <_dtoa_r+0x7ba>
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	9307      	str	r3, [sp, #28]
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012cce:	6918      	ldr	r0, [r3, #16]
 8012cd0:	f000 fa42 	bl	8013158 <__hi0bits>
 8012cd4:	f1c0 0020 	rsb	r0, r0, #32
 8012cd8:	4440      	add	r0, r8
 8012cda:	f010 001f 	ands.w	r0, r0, #31
 8012cde:	d047      	beq.n	8012d70 <_dtoa_r+0x8c0>
 8012ce0:	f1c0 0320 	rsb	r3, r0, #32
 8012ce4:	2b04      	cmp	r3, #4
 8012ce6:	dd3b      	ble.n	8012d60 <_dtoa_r+0x8b0>
 8012ce8:	9b05      	ldr	r3, [sp, #20]
 8012cea:	f1c0 001c 	rsb	r0, r0, #28
 8012cee:	4403      	add	r3, r0
 8012cf0:	9305      	str	r3, [sp, #20]
 8012cf2:	4405      	add	r5, r0
 8012cf4:	4480      	add	r8, r0
 8012cf6:	9b05      	ldr	r3, [sp, #20]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	dd05      	ble.n	8012d08 <_dtoa_r+0x858>
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	9904      	ldr	r1, [sp, #16]
 8012d00:	4620      	mov	r0, r4
 8012d02:	f000 fb65 	bl	80133d0 <__lshift>
 8012d06:	9004      	str	r0, [sp, #16]
 8012d08:	f1b8 0f00 	cmp.w	r8, #0
 8012d0c:	dd05      	ble.n	8012d1a <_dtoa_r+0x86a>
 8012d0e:	4639      	mov	r1, r7
 8012d10:	4642      	mov	r2, r8
 8012d12:	4620      	mov	r0, r4
 8012d14:	f000 fb5c 	bl	80133d0 <__lshift>
 8012d18:	4607      	mov	r7, r0
 8012d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d1c:	b353      	cbz	r3, 8012d74 <_dtoa_r+0x8c4>
 8012d1e:	4639      	mov	r1, r7
 8012d20:	9804      	ldr	r0, [sp, #16]
 8012d22:	f000 fba9 	bl	8013478 <__mcmp>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	da24      	bge.n	8012d74 <_dtoa_r+0x8c4>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	220a      	movs	r2, #10
 8012d2e:	9904      	ldr	r1, [sp, #16]
 8012d30:	4620      	mov	r0, r4
 8012d32:	f000 f9d6 	bl	80130e2 <__multadd>
 8012d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d38:	9004      	str	r0, [sp, #16]
 8012d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	f000 814d 	beq.w	8012fde <_dtoa_r+0xb2e>
 8012d44:	2300      	movs	r3, #0
 8012d46:	4631      	mov	r1, r6
 8012d48:	220a      	movs	r2, #10
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f000 f9c9 	bl	80130e2 <__multadd>
 8012d50:	9b02      	ldr	r3, [sp, #8]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	4606      	mov	r6, r0
 8012d56:	dc4f      	bgt.n	8012df8 <_dtoa_r+0x948>
 8012d58:	9b06      	ldr	r3, [sp, #24]
 8012d5a:	2b02      	cmp	r3, #2
 8012d5c:	dd4c      	ble.n	8012df8 <_dtoa_r+0x948>
 8012d5e:	e011      	b.n	8012d84 <_dtoa_r+0x8d4>
 8012d60:	d0c9      	beq.n	8012cf6 <_dtoa_r+0x846>
 8012d62:	9a05      	ldr	r2, [sp, #20]
 8012d64:	331c      	adds	r3, #28
 8012d66:	441a      	add	r2, r3
 8012d68:	9205      	str	r2, [sp, #20]
 8012d6a:	441d      	add	r5, r3
 8012d6c:	4498      	add	r8, r3
 8012d6e:	e7c2      	b.n	8012cf6 <_dtoa_r+0x846>
 8012d70:	4603      	mov	r3, r0
 8012d72:	e7f6      	b.n	8012d62 <_dtoa_r+0x8b2>
 8012d74:	f1b9 0f00 	cmp.w	r9, #0
 8012d78:	dc38      	bgt.n	8012dec <_dtoa_r+0x93c>
 8012d7a:	9b06      	ldr	r3, [sp, #24]
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	dd35      	ble.n	8012dec <_dtoa_r+0x93c>
 8012d80:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d84:	9b02      	ldr	r3, [sp, #8]
 8012d86:	b963      	cbnz	r3, 8012da2 <_dtoa_r+0x8f2>
 8012d88:	4639      	mov	r1, r7
 8012d8a:	2205      	movs	r2, #5
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f000 f9a8 	bl	80130e2 <__multadd>
 8012d92:	4601      	mov	r1, r0
 8012d94:	4607      	mov	r7, r0
 8012d96:	9804      	ldr	r0, [sp, #16]
 8012d98:	f000 fb6e 	bl	8013478 <__mcmp>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	f73f adcc 	bgt.w	801293a <_dtoa_r+0x48a>
 8012da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012da4:	465d      	mov	r5, fp
 8012da6:	ea6f 0a03 	mvn.w	sl, r3
 8012daa:	f04f 0900 	mov.w	r9, #0
 8012dae:	4639      	mov	r1, r7
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 f97f 	bl	80130b4 <_Bfree>
 8012db6:	2e00      	cmp	r6, #0
 8012db8:	f43f aeb7 	beq.w	8012b2a <_dtoa_r+0x67a>
 8012dbc:	f1b9 0f00 	cmp.w	r9, #0
 8012dc0:	d005      	beq.n	8012dce <_dtoa_r+0x91e>
 8012dc2:	45b1      	cmp	r9, r6
 8012dc4:	d003      	beq.n	8012dce <_dtoa_r+0x91e>
 8012dc6:	4649      	mov	r1, r9
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f000 f973 	bl	80130b4 <_Bfree>
 8012dce:	4631      	mov	r1, r6
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f000 f96f 	bl	80130b4 <_Bfree>
 8012dd6:	e6a8      	b.n	8012b2a <_dtoa_r+0x67a>
 8012dd8:	2700      	movs	r7, #0
 8012dda:	463e      	mov	r6, r7
 8012ddc:	e7e1      	b.n	8012da2 <_dtoa_r+0x8f2>
 8012dde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012de2:	463e      	mov	r6, r7
 8012de4:	e5a9      	b.n	801293a <_dtoa_r+0x48a>
 8012de6:	bf00      	nop
 8012de8:	40240000 	.word	0x40240000
 8012dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dee:	f8cd 9008 	str.w	r9, [sp, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f000 80fa 	beq.w	8012fec <_dtoa_r+0xb3c>
 8012df8:	2d00      	cmp	r5, #0
 8012dfa:	dd05      	ble.n	8012e08 <_dtoa_r+0x958>
 8012dfc:	4631      	mov	r1, r6
 8012dfe:	462a      	mov	r2, r5
 8012e00:	4620      	mov	r0, r4
 8012e02:	f000 fae5 	bl	80133d0 <__lshift>
 8012e06:	4606      	mov	r6, r0
 8012e08:	9b07      	ldr	r3, [sp, #28]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d04c      	beq.n	8012ea8 <_dtoa_r+0x9f8>
 8012e0e:	6871      	ldr	r1, [r6, #4]
 8012e10:	4620      	mov	r0, r4
 8012e12:	f000 f91b 	bl	801304c <_Balloc>
 8012e16:	6932      	ldr	r2, [r6, #16]
 8012e18:	3202      	adds	r2, #2
 8012e1a:	4605      	mov	r5, r0
 8012e1c:	0092      	lsls	r2, r2, #2
 8012e1e:	f106 010c 	add.w	r1, r6, #12
 8012e22:	300c      	adds	r0, #12
 8012e24:	f7fe ff5a 	bl	8011cdc <memcpy>
 8012e28:	2201      	movs	r2, #1
 8012e2a:	4629      	mov	r1, r5
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	f000 facf 	bl	80133d0 <__lshift>
 8012e32:	9b00      	ldr	r3, [sp, #0]
 8012e34:	f8cd b014 	str.w	fp, [sp, #20]
 8012e38:	f003 0301 	and.w	r3, r3, #1
 8012e3c:	46b1      	mov	r9, r6
 8012e3e:	9307      	str	r3, [sp, #28]
 8012e40:	4606      	mov	r6, r0
 8012e42:	4639      	mov	r1, r7
 8012e44:	9804      	ldr	r0, [sp, #16]
 8012e46:	f7ff faa6 	bl	8012396 <quorem>
 8012e4a:	4649      	mov	r1, r9
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012e52:	9804      	ldr	r0, [sp, #16]
 8012e54:	f000 fb10 	bl	8013478 <__mcmp>
 8012e58:	4632      	mov	r2, r6
 8012e5a:	9000      	str	r0, [sp, #0]
 8012e5c:	4639      	mov	r1, r7
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f000 fb24 	bl	80134ac <__mdiff>
 8012e64:	68c3      	ldr	r3, [r0, #12]
 8012e66:	4602      	mov	r2, r0
 8012e68:	bb03      	cbnz	r3, 8012eac <_dtoa_r+0x9fc>
 8012e6a:	4601      	mov	r1, r0
 8012e6c:	9008      	str	r0, [sp, #32]
 8012e6e:	9804      	ldr	r0, [sp, #16]
 8012e70:	f000 fb02 	bl	8013478 <__mcmp>
 8012e74:	9a08      	ldr	r2, [sp, #32]
 8012e76:	4603      	mov	r3, r0
 8012e78:	4611      	mov	r1, r2
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	9308      	str	r3, [sp, #32]
 8012e7e:	f000 f919 	bl	80130b4 <_Bfree>
 8012e82:	9b08      	ldr	r3, [sp, #32]
 8012e84:	b9a3      	cbnz	r3, 8012eb0 <_dtoa_r+0xa00>
 8012e86:	9a06      	ldr	r2, [sp, #24]
 8012e88:	b992      	cbnz	r2, 8012eb0 <_dtoa_r+0xa00>
 8012e8a:	9a07      	ldr	r2, [sp, #28]
 8012e8c:	b982      	cbnz	r2, 8012eb0 <_dtoa_r+0xa00>
 8012e8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e92:	d029      	beq.n	8012ee8 <_dtoa_r+0xa38>
 8012e94:	9b00      	ldr	r3, [sp, #0]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	dd01      	ble.n	8012e9e <_dtoa_r+0x9ee>
 8012e9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012e9e:	9b05      	ldr	r3, [sp, #20]
 8012ea0:	1c5d      	adds	r5, r3, #1
 8012ea2:	f883 8000 	strb.w	r8, [r3]
 8012ea6:	e782      	b.n	8012dae <_dtoa_r+0x8fe>
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	e7c2      	b.n	8012e32 <_dtoa_r+0x982>
 8012eac:	2301      	movs	r3, #1
 8012eae:	e7e3      	b.n	8012e78 <_dtoa_r+0x9c8>
 8012eb0:	9a00      	ldr	r2, [sp, #0]
 8012eb2:	2a00      	cmp	r2, #0
 8012eb4:	db04      	blt.n	8012ec0 <_dtoa_r+0xa10>
 8012eb6:	d125      	bne.n	8012f04 <_dtoa_r+0xa54>
 8012eb8:	9a06      	ldr	r2, [sp, #24]
 8012eba:	bb1a      	cbnz	r2, 8012f04 <_dtoa_r+0xa54>
 8012ebc:	9a07      	ldr	r2, [sp, #28]
 8012ebe:	bb0a      	cbnz	r2, 8012f04 <_dtoa_r+0xa54>
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	ddec      	ble.n	8012e9e <_dtoa_r+0x9ee>
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	9904      	ldr	r1, [sp, #16]
 8012ec8:	4620      	mov	r0, r4
 8012eca:	f000 fa81 	bl	80133d0 <__lshift>
 8012ece:	4639      	mov	r1, r7
 8012ed0:	9004      	str	r0, [sp, #16]
 8012ed2:	f000 fad1 	bl	8013478 <__mcmp>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	dc03      	bgt.n	8012ee2 <_dtoa_r+0xa32>
 8012eda:	d1e0      	bne.n	8012e9e <_dtoa_r+0x9ee>
 8012edc:	f018 0f01 	tst.w	r8, #1
 8012ee0:	d0dd      	beq.n	8012e9e <_dtoa_r+0x9ee>
 8012ee2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012ee6:	d1d8      	bne.n	8012e9a <_dtoa_r+0x9ea>
 8012ee8:	9b05      	ldr	r3, [sp, #20]
 8012eea:	9a05      	ldr	r2, [sp, #20]
 8012eec:	1c5d      	adds	r5, r3, #1
 8012eee:	2339      	movs	r3, #57	; 0x39
 8012ef0:	7013      	strb	r3, [r2, #0]
 8012ef2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ef6:	2b39      	cmp	r3, #57	; 0x39
 8012ef8:	f105 32ff 	add.w	r2, r5, #4294967295
 8012efc:	d04f      	beq.n	8012f9e <_dtoa_r+0xaee>
 8012efe:	3301      	adds	r3, #1
 8012f00:	7013      	strb	r3, [r2, #0]
 8012f02:	e754      	b.n	8012dae <_dtoa_r+0x8fe>
 8012f04:	9a05      	ldr	r2, [sp, #20]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	f102 0501 	add.w	r5, r2, #1
 8012f0c:	dd06      	ble.n	8012f1c <_dtoa_r+0xa6c>
 8012f0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f12:	d0e9      	beq.n	8012ee8 <_dtoa_r+0xa38>
 8012f14:	f108 0801 	add.w	r8, r8, #1
 8012f18:	9b05      	ldr	r3, [sp, #20]
 8012f1a:	e7c2      	b.n	8012ea2 <_dtoa_r+0x9f2>
 8012f1c:	9a02      	ldr	r2, [sp, #8]
 8012f1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012f22:	eba5 030b 	sub.w	r3, r5, fp
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d021      	beq.n	8012f6e <_dtoa_r+0xabe>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	220a      	movs	r2, #10
 8012f2e:	9904      	ldr	r1, [sp, #16]
 8012f30:	4620      	mov	r0, r4
 8012f32:	f000 f8d6 	bl	80130e2 <__multadd>
 8012f36:	45b1      	cmp	r9, r6
 8012f38:	9004      	str	r0, [sp, #16]
 8012f3a:	f04f 0300 	mov.w	r3, #0
 8012f3e:	f04f 020a 	mov.w	r2, #10
 8012f42:	4649      	mov	r1, r9
 8012f44:	4620      	mov	r0, r4
 8012f46:	d105      	bne.n	8012f54 <_dtoa_r+0xaa4>
 8012f48:	f000 f8cb 	bl	80130e2 <__multadd>
 8012f4c:	4681      	mov	r9, r0
 8012f4e:	4606      	mov	r6, r0
 8012f50:	9505      	str	r5, [sp, #20]
 8012f52:	e776      	b.n	8012e42 <_dtoa_r+0x992>
 8012f54:	f000 f8c5 	bl	80130e2 <__multadd>
 8012f58:	4631      	mov	r1, r6
 8012f5a:	4681      	mov	r9, r0
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	220a      	movs	r2, #10
 8012f60:	4620      	mov	r0, r4
 8012f62:	f000 f8be 	bl	80130e2 <__multadd>
 8012f66:	4606      	mov	r6, r0
 8012f68:	e7f2      	b.n	8012f50 <_dtoa_r+0xaa0>
 8012f6a:	f04f 0900 	mov.w	r9, #0
 8012f6e:	2201      	movs	r2, #1
 8012f70:	9904      	ldr	r1, [sp, #16]
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 fa2c 	bl	80133d0 <__lshift>
 8012f78:	4639      	mov	r1, r7
 8012f7a:	9004      	str	r0, [sp, #16]
 8012f7c:	f000 fa7c 	bl	8013478 <__mcmp>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	dcb6      	bgt.n	8012ef2 <_dtoa_r+0xa42>
 8012f84:	d102      	bne.n	8012f8c <_dtoa_r+0xadc>
 8012f86:	f018 0f01 	tst.w	r8, #1
 8012f8a:	d1b2      	bne.n	8012ef2 <_dtoa_r+0xa42>
 8012f8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f90:	2b30      	cmp	r3, #48	; 0x30
 8012f92:	f105 32ff 	add.w	r2, r5, #4294967295
 8012f96:	f47f af0a 	bne.w	8012dae <_dtoa_r+0x8fe>
 8012f9a:	4615      	mov	r5, r2
 8012f9c:	e7f6      	b.n	8012f8c <_dtoa_r+0xadc>
 8012f9e:	4593      	cmp	fp, r2
 8012fa0:	d105      	bne.n	8012fae <_dtoa_r+0xafe>
 8012fa2:	2331      	movs	r3, #49	; 0x31
 8012fa4:	f10a 0a01 	add.w	sl, sl, #1
 8012fa8:	f88b 3000 	strb.w	r3, [fp]
 8012fac:	e6ff      	b.n	8012dae <_dtoa_r+0x8fe>
 8012fae:	4615      	mov	r5, r2
 8012fb0:	e79f      	b.n	8012ef2 <_dtoa_r+0xa42>
 8012fb2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013018 <_dtoa_r+0xb68>
 8012fb6:	e007      	b.n	8012fc8 <_dtoa_r+0xb18>
 8012fb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fba:	f8df b060 	ldr.w	fp, [pc, #96]	; 801301c <_dtoa_r+0xb6c>
 8012fbe:	b11b      	cbz	r3, 8012fc8 <_dtoa_r+0xb18>
 8012fc0:	f10b 0308 	add.w	r3, fp, #8
 8012fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012fc6:	6013      	str	r3, [r2, #0]
 8012fc8:	4658      	mov	r0, fp
 8012fca:	b017      	add	sp, #92	; 0x5c
 8012fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd0:	9b06      	ldr	r3, [sp, #24]
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	f77f ae35 	ble.w	8012c42 <_dtoa_r+0x792>
 8012fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fda:	9307      	str	r3, [sp, #28]
 8012fdc:	e649      	b.n	8012c72 <_dtoa_r+0x7c2>
 8012fde:	9b02      	ldr	r3, [sp, #8]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	dc03      	bgt.n	8012fec <_dtoa_r+0xb3c>
 8012fe4:	9b06      	ldr	r3, [sp, #24]
 8012fe6:	2b02      	cmp	r3, #2
 8012fe8:	f73f aecc 	bgt.w	8012d84 <_dtoa_r+0x8d4>
 8012fec:	465d      	mov	r5, fp
 8012fee:	4639      	mov	r1, r7
 8012ff0:	9804      	ldr	r0, [sp, #16]
 8012ff2:	f7ff f9d0 	bl	8012396 <quorem>
 8012ff6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012ffa:	f805 8b01 	strb.w	r8, [r5], #1
 8012ffe:	9a02      	ldr	r2, [sp, #8]
 8013000:	eba5 030b 	sub.w	r3, r5, fp
 8013004:	429a      	cmp	r2, r3
 8013006:	ddb0      	ble.n	8012f6a <_dtoa_r+0xaba>
 8013008:	2300      	movs	r3, #0
 801300a:	220a      	movs	r2, #10
 801300c:	9904      	ldr	r1, [sp, #16]
 801300e:	4620      	mov	r0, r4
 8013010:	f000 f867 	bl	80130e2 <__multadd>
 8013014:	9004      	str	r0, [sp, #16]
 8013016:	e7ea      	b.n	8012fee <_dtoa_r+0xb3e>
 8013018:	08027208 	.word	0x08027208
 801301c:	0802720a 	.word	0x0802720a

08013020 <_localeconv_r>:
 8013020:	4b04      	ldr	r3, [pc, #16]	; (8013034 <_localeconv_r+0x14>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	6a18      	ldr	r0, [r3, #32]
 8013026:	4b04      	ldr	r3, [pc, #16]	; (8013038 <_localeconv_r+0x18>)
 8013028:	2800      	cmp	r0, #0
 801302a:	bf08      	it	eq
 801302c:	4618      	moveq	r0, r3
 801302e:	30f0      	adds	r0, #240	; 0xf0
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	20000010 	.word	0x20000010
 8013038:	20000074 	.word	0x20000074

0801303c <malloc>:
 801303c:	4b02      	ldr	r3, [pc, #8]	; (8013048 <malloc+0xc>)
 801303e:	4601      	mov	r1, r0
 8013040:	6818      	ldr	r0, [r3, #0]
 8013042:	f000 baed 	b.w	8013620 <_malloc_r>
 8013046:	bf00      	nop
 8013048:	20000010 	.word	0x20000010

0801304c <_Balloc>:
 801304c:	b570      	push	{r4, r5, r6, lr}
 801304e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013050:	4604      	mov	r4, r0
 8013052:	460e      	mov	r6, r1
 8013054:	b93d      	cbnz	r5, 8013066 <_Balloc+0x1a>
 8013056:	2010      	movs	r0, #16
 8013058:	f7ff fff0 	bl	801303c <malloc>
 801305c:	6260      	str	r0, [r4, #36]	; 0x24
 801305e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013062:	6005      	str	r5, [r0, #0]
 8013064:	60c5      	str	r5, [r0, #12]
 8013066:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013068:	68eb      	ldr	r3, [r5, #12]
 801306a:	b183      	cbz	r3, 801308e <_Balloc+0x42>
 801306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801306e:	68db      	ldr	r3, [r3, #12]
 8013070:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013074:	b9b8      	cbnz	r0, 80130a6 <_Balloc+0x5a>
 8013076:	2101      	movs	r1, #1
 8013078:	fa01 f506 	lsl.w	r5, r1, r6
 801307c:	1d6a      	adds	r2, r5, #5
 801307e:	0092      	lsls	r2, r2, #2
 8013080:	4620      	mov	r0, r4
 8013082:	f000 fabf 	bl	8013604 <_calloc_r>
 8013086:	b160      	cbz	r0, 80130a2 <_Balloc+0x56>
 8013088:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801308c:	e00e      	b.n	80130ac <_Balloc+0x60>
 801308e:	2221      	movs	r2, #33	; 0x21
 8013090:	2104      	movs	r1, #4
 8013092:	4620      	mov	r0, r4
 8013094:	f000 fab6 	bl	8013604 <_calloc_r>
 8013098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801309a:	60e8      	str	r0, [r5, #12]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1e4      	bne.n	801306c <_Balloc+0x20>
 80130a2:	2000      	movs	r0, #0
 80130a4:	bd70      	pop	{r4, r5, r6, pc}
 80130a6:	6802      	ldr	r2, [r0, #0]
 80130a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80130ac:	2300      	movs	r3, #0
 80130ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80130b2:	e7f7      	b.n	80130a4 <_Balloc+0x58>

080130b4 <_Bfree>:
 80130b4:	b570      	push	{r4, r5, r6, lr}
 80130b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80130b8:	4606      	mov	r6, r0
 80130ba:	460d      	mov	r5, r1
 80130bc:	b93c      	cbnz	r4, 80130ce <_Bfree+0x1a>
 80130be:	2010      	movs	r0, #16
 80130c0:	f7ff ffbc 	bl	801303c <malloc>
 80130c4:	6270      	str	r0, [r6, #36]	; 0x24
 80130c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130ca:	6004      	str	r4, [r0, #0]
 80130cc:	60c4      	str	r4, [r0, #12]
 80130ce:	b13d      	cbz	r5, 80130e0 <_Bfree+0x2c>
 80130d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80130d2:	686a      	ldr	r2, [r5, #4]
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80130da:	6029      	str	r1, [r5, #0]
 80130dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80130e0:	bd70      	pop	{r4, r5, r6, pc}

080130e2 <__multadd>:
 80130e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e6:	690d      	ldr	r5, [r1, #16]
 80130e8:	461f      	mov	r7, r3
 80130ea:	4606      	mov	r6, r0
 80130ec:	460c      	mov	r4, r1
 80130ee:	f101 0c14 	add.w	ip, r1, #20
 80130f2:	2300      	movs	r3, #0
 80130f4:	f8dc 0000 	ldr.w	r0, [ip]
 80130f8:	b281      	uxth	r1, r0
 80130fa:	fb02 7101 	mla	r1, r2, r1, r7
 80130fe:	0c0f      	lsrs	r7, r1, #16
 8013100:	0c00      	lsrs	r0, r0, #16
 8013102:	fb02 7000 	mla	r0, r2, r0, r7
 8013106:	b289      	uxth	r1, r1
 8013108:	3301      	adds	r3, #1
 801310a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801310e:	429d      	cmp	r5, r3
 8013110:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013114:	f84c 1b04 	str.w	r1, [ip], #4
 8013118:	dcec      	bgt.n	80130f4 <__multadd+0x12>
 801311a:	b1d7      	cbz	r7, 8013152 <__multadd+0x70>
 801311c:	68a3      	ldr	r3, [r4, #8]
 801311e:	42ab      	cmp	r3, r5
 8013120:	dc12      	bgt.n	8013148 <__multadd+0x66>
 8013122:	6861      	ldr	r1, [r4, #4]
 8013124:	4630      	mov	r0, r6
 8013126:	3101      	adds	r1, #1
 8013128:	f7ff ff90 	bl	801304c <_Balloc>
 801312c:	6922      	ldr	r2, [r4, #16]
 801312e:	3202      	adds	r2, #2
 8013130:	f104 010c 	add.w	r1, r4, #12
 8013134:	4680      	mov	r8, r0
 8013136:	0092      	lsls	r2, r2, #2
 8013138:	300c      	adds	r0, #12
 801313a:	f7fe fdcf 	bl	8011cdc <memcpy>
 801313e:	4621      	mov	r1, r4
 8013140:	4630      	mov	r0, r6
 8013142:	f7ff ffb7 	bl	80130b4 <_Bfree>
 8013146:	4644      	mov	r4, r8
 8013148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801314c:	3501      	adds	r5, #1
 801314e:	615f      	str	r7, [r3, #20]
 8013150:	6125      	str	r5, [r4, #16]
 8013152:	4620      	mov	r0, r4
 8013154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013158 <__hi0bits>:
 8013158:	0c02      	lsrs	r2, r0, #16
 801315a:	0412      	lsls	r2, r2, #16
 801315c:	4603      	mov	r3, r0
 801315e:	b9b2      	cbnz	r2, 801318e <__hi0bits+0x36>
 8013160:	0403      	lsls	r3, r0, #16
 8013162:	2010      	movs	r0, #16
 8013164:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013168:	bf04      	itt	eq
 801316a:	021b      	lsleq	r3, r3, #8
 801316c:	3008      	addeq	r0, #8
 801316e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013172:	bf04      	itt	eq
 8013174:	011b      	lsleq	r3, r3, #4
 8013176:	3004      	addeq	r0, #4
 8013178:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801317c:	bf04      	itt	eq
 801317e:	009b      	lsleq	r3, r3, #2
 8013180:	3002      	addeq	r0, #2
 8013182:	2b00      	cmp	r3, #0
 8013184:	db06      	blt.n	8013194 <__hi0bits+0x3c>
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	d503      	bpl.n	8013192 <__hi0bits+0x3a>
 801318a:	3001      	adds	r0, #1
 801318c:	4770      	bx	lr
 801318e:	2000      	movs	r0, #0
 8013190:	e7e8      	b.n	8013164 <__hi0bits+0xc>
 8013192:	2020      	movs	r0, #32
 8013194:	4770      	bx	lr

08013196 <__lo0bits>:
 8013196:	6803      	ldr	r3, [r0, #0]
 8013198:	f013 0207 	ands.w	r2, r3, #7
 801319c:	4601      	mov	r1, r0
 801319e:	d00b      	beq.n	80131b8 <__lo0bits+0x22>
 80131a0:	07da      	lsls	r2, r3, #31
 80131a2:	d423      	bmi.n	80131ec <__lo0bits+0x56>
 80131a4:	0798      	lsls	r0, r3, #30
 80131a6:	bf49      	itett	mi
 80131a8:	085b      	lsrmi	r3, r3, #1
 80131aa:	089b      	lsrpl	r3, r3, #2
 80131ac:	2001      	movmi	r0, #1
 80131ae:	600b      	strmi	r3, [r1, #0]
 80131b0:	bf5c      	itt	pl
 80131b2:	600b      	strpl	r3, [r1, #0]
 80131b4:	2002      	movpl	r0, #2
 80131b6:	4770      	bx	lr
 80131b8:	b298      	uxth	r0, r3
 80131ba:	b9a8      	cbnz	r0, 80131e8 <__lo0bits+0x52>
 80131bc:	0c1b      	lsrs	r3, r3, #16
 80131be:	2010      	movs	r0, #16
 80131c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80131c4:	bf04      	itt	eq
 80131c6:	0a1b      	lsreq	r3, r3, #8
 80131c8:	3008      	addeq	r0, #8
 80131ca:	071a      	lsls	r2, r3, #28
 80131cc:	bf04      	itt	eq
 80131ce:	091b      	lsreq	r3, r3, #4
 80131d0:	3004      	addeq	r0, #4
 80131d2:	079a      	lsls	r2, r3, #30
 80131d4:	bf04      	itt	eq
 80131d6:	089b      	lsreq	r3, r3, #2
 80131d8:	3002      	addeq	r0, #2
 80131da:	07da      	lsls	r2, r3, #31
 80131dc:	d402      	bmi.n	80131e4 <__lo0bits+0x4e>
 80131de:	085b      	lsrs	r3, r3, #1
 80131e0:	d006      	beq.n	80131f0 <__lo0bits+0x5a>
 80131e2:	3001      	adds	r0, #1
 80131e4:	600b      	str	r3, [r1, #0]
 80131e6:	4770      	bx	lr
 80131e8:	4610      	mov	r0, r2
 80131ea:	e7e9      	b.n	80131c0 <__lo0bits+0x2a>
 80131ec:	2000      	movs	r0, #0
 80131ee:	4770      	bx	lr
 80131f0:	2020      	movs	r0, #32
 80131f2:	4770      	bx	lr

080131f4 <__i2b>:
 80131f4:	b510      	push	{r4, lr}
 80131f6:	460c      	mov	r4, r1
 80131f8:	2101      	movs	r1, #1
 80131fa:	f7ff ff27 	bl	801304c <_Balloc>
 80131fe:	2201      	movs	r2, #1
 8013200:	6144      	str	r4, [r0, #20]
 8013202:	6102      	str	r2, [r0, #16]
 8013204:	bd10      	pop	{r4, pc}

08013206 <__multiply>:
 8013206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320a:	4614      	mov	r4, r2
 801320c:	690a      	ldr	r2, [r1, #16]
 801320e:	6923      	ldr	r3, [r4, #16]
 8013210:	429a      	cmp	r2, r3
 8013212:	bfb8      	it	lt
 8013214:	460b      	movlt	r3, r1
 8013216:	4688      	mov	r8, r1
 8013218:	bfbc      	itt	lt
 801321a:	46a0      	movlt	r8, r4
 801321c:	461c      	movlt	r4, r3
 801321e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013222:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801322a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801322e:	eb07 0609 	add.w	r6, r7, r9
 8013232:	42b3      	cmp	r3, r6
 8013234:	bfb8      	it	lt
 8013236:	3101      	addlt	r1, #1
 8013238:	f7ff ff08 	bl	801304c <_Balloc>
 801323c:	f100 0514 	add.w	r5, r0, #20
 8013240:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013244:	462b      	mov	r3, r5
 8013246:	2200      	movs	r2, #0
 8013248:	4573      	cmp	r3, lr
 801324a:	d316      	bcc.n	801327a <__multiply+0x74>
 801324c:	f104 0214 	add.w	r2, r4, #20
 8013250:	f108 0114 	add.w	r1, r8, #20
 8013254:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013258:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801325c:	9300      	str	r3, [sp, #0]
 801325e:	9b00      	ldr	r3, [sp, #0]
 8013260:	9201      	str	r2, [sp, #4]
 8013262:	4293      	cmp	r3, r2
 8013264:	d80c      	bhi.n	8013280 <__multiply+0x7a>
 8013266:	2e00      	cmp	r6, #0
 8013268:	dd03      	ble.n	8013272 <__multiply+0x6c>
 801326a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801326e:	2b00      	cmp	r3, #0
 8013270:	d05d      	beq.n	801332e <__multiply+0x128>
 8013272:	6106      	str	r6, [r0, #16]
 8013274:	b003      	add	sp, #12
 8013276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801327a:	f843 2b04 	str.w	r2, [r3], #4
 801327e:	e7e3      	b.n	8013248 <__multiply+0x42>
 8013280:	f8b2 b000 	ldrh.w	fp, [r2]
 8013284:	f1bb 0f00 	cmp.w	fp, #0
 8013288:	d023      	beq.n	80132d2 <__multiply+0xcc>
 801328a:	4689      	mov	r9, r1
 801328c:	46ac      	mov	ip, r5
 801328e:	f04f 0800 	mov.w	r8, #0
 8013292:	f859 4b04 	ldr.w	r4, [r9], #4
 8013296:	f8dc a000 	ldr.w	sl, [ip]
 801329a:	b2a3      	uxth	r3, r4
 801329c:	fa1f fa8a 	uxth.w	sl, sl
 80132a0:	fb0b a303 	mla	r3, fp, r3, sl
 80132a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80132a8:	f8dc 4000 	ldr.w	r4, [ip]
 80132ac:	4443      	add	r3, r8
 80132ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80132b2:	fb0b 840a 	mla	r4, fp, sl, r8
 80132b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80132ba:	46e2      	mov	sl, ip
 80132bc:	b29b      	uxth	r3, r3
 80132be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80132c2:	454f      	cmp	r7, r9
 80132c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80132c8:	f84a 3b04 	str.w	r3, [sl], #4
 80132cc:	d82b      	bhi.n	8013326 <__multiply+0x120>
 80132ce:	f8cc 8004 	str.w	r8, [ip, #4]
 80132d2:	9b01      	ldr	r3, [sp, #4]
 80132d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80132d8:	3204      	adds	r2, #4
 80132da:	f1ba 0f00 	cmp.w	sl, #0
 80132de:	d020      	beq.n	8013322 <__multiply+0x11c>
 80132e0:	682b      	ldr	r3, [r5, #0]
 80132e2:	4689      	mov	r9, r1
 80132e4:	46a8      	mov	r8, r5
 80132e6:	f04f 0b00 	mov.w	fp, #0
 80132ea:	f8b9 c000 	ldrh.w	ip, [r9]
 80132ee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80132f2:	fb0a 440c 	mla	r4, sl, ip, r4
 80132f6:	445c      	add	r4, fp
 80132f8:	46c4      	mov	ip, r8
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013300:	f84c 3b04 	str.w	r3, [ip], #4
 8013304:	f859 3b04 	ldr.w	r3, [r9], #4
 8013308:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801330c:	0c1b      	lsrs	r3, r3, #16
 801330e:	fb0a b303 	mla	r3, sl, r3, fp
 8013312:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013316:	454f      	cmp	r7, r9
 8013318:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801331c:	d805      	bhi.n	801332a <__multiply+0x124>
 801331e:	f8c8 3004 	str.w	r3, [r8, #4]
 8013322:	3504      	adds	r5, #4
 8013324:	e79b      	b.n	801325e <__multiply+0x58>
 8013326:	46d4      	mov	ip, sl
 8013328:	e7b3      	b.n	8013292 <__multiply+0x8c>
 801332a:	46e0      	mov	r8, ip
 801332c:	e7dd      	b.n	80132ea <__multiply+0xe4>
 801332e:	3e01      	subs	r6, #1
 8013330:	e799      	b.n	8013266 <__multiply+0x60>
	...

08013334 <__pow5mult>:
 8013334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013338:	4615      	mov	r5, r2
 801333a:	f012 0203 	ands.w	r2, r2, #3
 801333e:	4606      	mov	r6, r0
 8013340:	460f      	mov	r7, r1
 8013342:	d007      	beq.n	8013354 <__pow5mult+0x20>
 8013344:	3a01      	subs	r2, #1
 8013346:	4c21      	ldr	r4, [pc, #132]	; (80133cc <__pow5mult+0x98>)
 8013348:	2300      	movs	r3, #0
 801334a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801334e:	f7ff fec8 	bl	80130e2 <__multadd>
 8013352:	4607      	mov	r7, r0
 8013354:	10ad      	asrs	r5, r5, #2
 8013356:	d035      	beq.n	80133c4 <__pow5mult+0x90>
 8013358:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801335a:	b93c      	cbnz	r4, 801336c <__pow5mult+0x38>
 801335c:	2010      	movs	r0, #16
 801335e:	f7ff fe6d 	bl	801303c <malloc>
 8013362:	6270      	str	r0, [r6, #36]	; 0x24
 8013364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013368:	6004      	str	r4, [r0, #0]
 801336a:	60c4      	str	r4, [r0, #12]
 801336c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013374:	b94c      	cbnz	r4, 801338a <__pow5mult+0x56>
 8013376:	f240 2171 	movw	r1, #625	; 0x271
 801337a:	4630      	mov	r0, r6
 801337c:	f7ff ff3a 	bl	80131f4 <__i2b>
 8013380:	2300      	movs	r3, #0
 8013382:	f8c8 0008 	str.w	r0, [r8, #8]
 8013386:	4604      	mov	r4, r0
 8013388:	6003      	str	r3, [r0, #0]
 801338a:	f04f 0800 	mov.w	r8, #0
 801338e:	07eb      	lsls	r3, r5, #31
 8013390:	d50a      	bpl.n	80133a8 <__pow5mult+0x74>
 8013392:	4639      	mov	r1, r7
 8013394:	4622      	mov	r2, r4
 8013396:	4630      	mov	r0, r6
 8013398:	f7ff ff35 	bl	8013206 <__multiply>
 801339c:	4639      	mov	r1, r7
 801339e:	4681      	mov	r9, r0
 80133a0:	4630      	mov	r0, r6
 80133a2:	f7ff fe87 	bl	80130b4 <_Bfree>
 80133a6:	464f      	mov	r7, r9
 80133a8:	106d      	asrs	r5, r5, #1
 80133aa:	d00b      	beq.n	80133c4 <__pow5mult+0x90>
 80133ac:	6820      	ldr	r0, [r4, #0]
 80133ae:	b938      	cbnz	r0, 80133c0 <__pow5mult+0x8c>
 80133b0:	4622      	mov	r2, r4
 80133b2:	4621      	mov	r1, r4
 80133b4:	4630      	mov	r0, r6
 80133b6:	f7ff ff26 	bl	8013206 <__multiply>
 80133ba:	6020      	str	r0, [r4, #0]
 80133bc:	f8c0 8000 	str.w	r8, [r0]
 80133c0:	4604      	mov	r4, r0
 80133c2:	e7e4      	b.n	801338e <__pow5mult+0x5a>
 80133c4:	4638      	mov	r0, r7
 80133c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ca:	bf00      	nop
 80133cc:	08027368 	.word	0x08027368

080133d0 <__lshift>:
 80133d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133d4:	460c      	mov	r4, r1
 80133d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133da:	6923      	ldr	r3, [r4, #16]
 80133dc:	6849      	ldr	r1, [r1, #4]
 80133de:	eb0a 0903 	add.w	r9, sl, r3
 80133e2:	68a3      	ldr	r3, [r4, #8]
 80133e4:	4607      	mov	r7, r0
 80133e6:	4616      	mov	r6, r2
 80133e8:	f109 0501 	add.w	r5, r9, #1
 80133ec:	42ab      	cmp	r3, r5
 80133ee:	db32      	blt.n	8013456 <__lshift+0x86>
 80133f0:	4638      	mov	r0, r7
 80133f2:	f7ff fe2b 	bl	801304c <_Balloc>
 80133f6:	2300      	movs	r3, #0
 80133f8:	4680      	mov	r8, r0
 80133fa:	f100 0114 	add.w	r1, r0, #20
 80133fe:	461a      	mov	r2, r3
 8013400:	4553      	cmp	r3, sl
 8013402:	db2b      	blt.n	801345c <__lshift+0x8c>
 8013404:	6920      	ldr	r0, [r4, #16]
 8013406:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801340a:	f104 0314 	add.w	r3, r4, #20
 801340e:	f016 021f 	ands.w	r2, r6, #31
 8013412:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013416:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801341a:	d025      	beq.n	8013468 <__lshift+0x98>
 801341c:	f1c2 0e20 	rsb	lr, r2, #32
 8013420:	2000      	movs	r0, #0
 8013422:	681e      	ldr	r6, [r3, #0]
 8013424:	468a      	mov	sl, r1
 8013426:	4096      	lsls	r6, r2
 8013428:	4330      	orrs	r0, r6
 801342a:	f84a 0b04 	str.w	r0, [sl], #4
 801342e:	f853 0b04 	ldr.w	r0, [r3], #4
 8013432:	459c      	cmp	ip, r3
 8013434:	fa20 f00e 	lsr.w	r0, r0, lr
 8013438:	d814      	bhi.n	8013464 <__lshift+0x94>
 801343a:	6048      	str	r0, [r1, #4]
 801343c:	b108      	cbz	r0, 8013442 <__lshift+0x72>
 801343e:	f109 0502 	add.w	r5, r9, #2
 8013442:	3d01      	subs	r5, #1
 8013444:	4638      	mov	r0, r7
 8013446:	f8c8 5010 	str.w	r5, [r8, #16]
 801344a:	4621      	mov	r1, r4
 801344c:	f7ff fe32 	bl	80130b4 <_Bfree>
 8013450:	4640      	mov	r0, r8
 8013452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013456:	3101      	adds	r1, #1
 8013458:	005b      	lsls	r3, r3, #1
 801345a:	e7c7      	b.n	80133ec <__lshift+0x1c>
 801345c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013460:	3301      	adds	r3, #1
 8013462:	e7cd      	b.n	8013400 <__lshift+0x30>
 8013464:	4651      	mov	r1, sl
 8013466:	e7dc      	b.n	8013422 <__lshift+0x52>
 8013468:	3904      	subs	r1, #4
 801346a:	f853 2b04 	ldr.w	r2, [r3], #4
 801346e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013472:	459c      	cmp	ip, r3
 8013474:	d8f9      	bhi.n	801346a <__lshift+0x9a>
 8013476:	e7e4      	b.n	8013442 <__lshift+0x72>

08013478 <__mcmp>:
 8013478:	6903      	ldr	r3, [r0, #16]
 801347a:	690a      	ldr	r2, [r1, #16]
 801347c:	1a9b      	subs	r3, r3, r2
 801347e:	b530      	push	{r4, r5, lr}
 8013480:	d10c      	bne.n	801349c <__mcmp+0x24>
 8013482:	0092      	lsls	r2, r2, #2
 8013484:	3014      	adds	r0, #20
 8013486:	3114      	adds	r1, #20
 8013488:	1884      	adds	r4, r0, r2
 801348a:	4411      	add	r1, r2
 801348c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013494:	4295      	cmp	r5, r2
 8013496:	d003      	beq.n	80134a0 <__mcmp+0x28>
 8013498:	d305      	bcc.n	80134a6 <__mcmp+0x2e>
 801349a:	2301      	movs	r3, #1
 801349c:	4618      	mov	r0, r3
 801349e:	bd30      	pop	{r4, r5, pc}
 80134a0:	42a0      	cmp	r0, r4
 80134a2:	d3f3      	bcc.n	801348c <__mcmp+0x14>
 80134a4:	e7fa      	b.n	801349c <__mcmp+0x24>
 80134a6:	f04f 33ff 	mov.w	r3, #4294967295
 80134aa:	e7f7      	b.n	801349c <__mcmp+0x24>

080134ac <__mdiff>:
 80134ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134b0:	460d      	mov	r5, r1
 80134b2:	4607      	mov	r7, r0
 80134b4:	4611      	mov	r1, r2
 80134b6:	4628      	mov	r0, r5
 80134b8:	4614      	mov	r4, r2
 80134ba:	f7ff ffdd 	bl	8013478 <__mcmp>
 80134be:	1e06      	subs	r6, r0, #0
 80134c0:	d108      	bne.n	80134d4 <__mdiff+0x28>
 80134c2:	4631      	mov	r1, r6
 80134c4:	4638      	mov	r0, r7
 80134c6:	f7ff fdc1 	bl	801304c <_Balloc>
 80134ca:	2301      	movs	r3, #1
 80134cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80134d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d4:	bfa4      	itt	ge
 80134d6:	4623      	movge	r3, r4
 80134d8:	462c      	movge	r4, r5
 80134da:	4638      	mov	r0, r7
 80134dc:	6861      	ldr	r1, [r4, #4]
 80134de:	bfa6      	itte	ge
 80134e0:	461d      	movge	r5, r3
 80134e2:	2600      	movge	r6, #0
 80134e4:	2601      	movlt	r6, #1
 80134e6:	f7ff fdb1 	bl	801304c <_Balloc>
 80134ea:	692b      	ldr	r3, [r5, #16]
 80134ec:	60c6      	str	r6, [r0, #12]
 80134ee:	6926      	ldr	r6, [r4, #16]
 80134f0:	f105 0914 	add.w	r9, r5, #20
 80134f4:	f104 0214 	add.w	r2, r4, #20
 80134f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80134fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013500:	f100 0514 	add.w	r5, r0, #20
 8013504:	f04f 0e00 	mov.w	lr, #0
 8013508:	f852 ab04 	ldr.w	sl, [r2], #4
 801350c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013510:	fa1e f18a 	uxtah	r1, lr, sl
 8013514:	b2a3      	uxth	r3, r4
 8013516:	1ac9      	subs	r1, r1, r3
 8013518:	0c23      	lsrs	r3, r4, #16
 801351a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801351e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013522:	b289      	uxth	r1, r1
 8013524:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013528:	45c8      	cmp	r8, r9
 801352a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801352e:	4694      	mov	ip, r2
 8013530:	f845 3b04 	str.w	r3, [r5], #4
 8013534:	d8e8      	bhi.n	8013508 <__mdiff+0x5c>
 8013536:	45bc      	cmp	ip, r7
 8013538:	d304      	bcc.n	8013544 <__mdiff+0x98>
 801353a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801353e:	b183      	cbz	r3, 8013562 <__mdiff+0xb6>
 8013540:	6106      	str	r6, [r0, #16]
 8013542:	e7c5      	b.n	80134d0 <__mdiff+0x24>
 8013544:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013548:	fa1e f381 	uxtah	r3, lr, r1
 801354c:	141a      	asrs	r2, r3, #16
 801354e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013552:	b29b      	uxth	r3, r3
 8013554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013558:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801355c:	f845 3b04 	str.w	r3, [r5], #4
 8013560:	e7e9      	b.n	8013536 <__mdiff+0x8a>
 8013562:	3e01      	subs	r6, #1
 8013564:	e7e9      	b.n	801353a <__mdiff+0x8e>

08013566 <__d2b>:
 8013566:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801356a:	460e      	mov	r6, r1
 801356c:	2101      	movs	r1, #1
 801356e:	ec59 8b10 	vmov	r8, r9, d0
 8013572:	4615      	mov	r5, r2
 8013574:	f7ff fd6a 	bl	801304c <_Balloc>
 8013578:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801357c:	4607      	mov	r7, r0
 801357e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013582:	bb34      	cbnz	r4, 80135d2 <__d2b+0x6c>
 8013584:	9301      	str	r3, [sp, #4]
 8013586:	f1b8 0300 	subs.w	r3, r8, #0
 801358a:	d027      	beq.n	80135dc <__d2b+0x76>
 801358c:	a802      	add	r0, sp, #8
 801358e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013592:	f7ff fe00 	bl	8013196 <__lo0bits>
 8013596:	9900      	ldr	r1, [sp, #0]
 8013598:	b1f0      	cbz	r0, 80135d8 <__d2b+0x72>
 801359a:	9a01      	ldr	r2, [sp, #4]
 801359c:	f1c0 0320 	rsb	r3, r0, #32
 80135a0:	fa02 f303 	lsl.w	r3, r2, r3
 80135a4:	430b      	orrs	r3, r1
 80135a6:	40c2      	lsrs	r2, r0
 80135a8:	617b      	str	r3, [r7, #20]
 80135aa:	9201      	str	r2, [sp, #4]
 80135ac:	9b01      	ldr	r3, [sp, #4]
 80135ae:	61bb      	str	r3, [r7, #24]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	bf14      	ite	ne
 80135b4:	2102      	movne	r1, #2
 80135b6:	2101      	moveq	r1, #1
 80135b8:	6139      	str	r1, [r7, #16]
 80135ba:	b1c4      	cbz	r4, 80135ee <__d2b+0x88>
 80135bc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80135c0:	4404      	add	r4, r0
 80135c2:	6034      	str	r4, [r6, #0]
 80135c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80135c8:	6028      	str	r0, [r5, #0]
 80135ca:	4638      	mov	r0, r7
 80135cc:	b003      	add	sp, #12
 80135ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80135d6:	e7d5      	b.n	8013584 <__d2b+0x1e>
 80135d8:	6179      	str	r1, [r7, #20]
 80135da:	e7e7      	b.n	80135ac <__d2b+0x46>
 80135dc:	a801      	add	r0, sp, #4
 80135de:	f7ff fdda 	bl	8013196 <__lo0bits>
 80135e2:	9b01      	ldr	r3, [sp, #4]
 80135e4:	617b      	str	r3, [r7, #20]
 80135e6:	2101      	movs	r1, #1
 80135e8:	6139      	str	r1, [r7, #16]
 80135ea:	3020      	adds	r0, #32
 80135ec:	e7e5      	b.n	80135ba <__d2b+0x54>
 80135ee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80135f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80135f6:	6030      	str	r0, [r6, #0]
 80135f8:	6918      	ldr	r0, [r3, #16]
 80135fa:	f7ff fdad 	bl	8013158 <__hi0bits>
 80135fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013602:	e7e1      	b.n	80135c8 <__d2b+0x62>

08013604 <_calloc_r>:
 8013604:	b538      	push	{r3, r4, r5, lr}
 8013606:	fb02 f401 	mul.w	r4, r2, r1
 801360a:	4621      	mov	r1, r4
 801360c:	f000 f808 	bl	8013620 <_malloc_r>
 8013610:	4605      	mov	r5, r0
 8013612:	b118      	cbz	r0, 801361c <_calloc_r+0x18>
 8013614:	4622      	mov	r2, r4
 8013616:	2100      	movs	r1, #0
 8013618:	f7fe fb6b 	bl	8011cf2 <memset>
 801361c:	4628      	mov	r0, r5
 801361e:	bd38      	pop	{r3, r4, r5, pc}

08013620 <_malloc_r>:
 8013620:	b570      	push	{r4, r5, r6, lr}
 8013622:	1ccd      	adds	r5, r1, #3
 8013624:	f025 0503 	bic.w	r5, r5, #3
 8013628:	3508      	adds	r5, #8
 801362a:	2d0c      	cmp	r5, #12
 801362c:	bf38      	it	cc
 801362e:	250c      	movcc	r5, #12
 8013630:	2d00      	cmp	r5, #0
 8013632:	4606      	mov	r6, r0
 8013634:	db01      	blt.n	801363a <_malloc_r+0x1a>
 8013636:	42a9      	cmp	r1, r5
 8013638:	d903      	bls.n	8013642 <_malloc_r+0x22>
 801363a:	230c      	movs	r3, #12
 801363c:	6033      	str	r3, [r6, #0]
 801363e:	2000      	movs	r0, #0
 8013640:	bd70      	pop	{r4, r5, r6, pc}
 8013642:	f000 f869 	bl	8013718 <__malloc_lock>
 8013646:	4a21      	ldr	r2, [pc, #132]	; (80136cc <_malloc_r+0xac>)
 8013648:	6814      	ldr	r4, [r2, #0]
 801364a:	4621      	mov	r1, r4
 801364c:	b991      	cbnz	r1, 8013674 <_malloc_r+0x54>
 801364e:	4c20      	ldr	r4, [pc, #128]	; (80136d0 <_malloc_r+0xb0>)
 8013650:	6823      	ldr	r3, [r4, #0]
 8013652:	b91b      	cbnz	r3, 801365c <_malloc_r+0x3c>
 8013654:	4630      	mov	r0, r6
 8013656:	f000 f83d 	bl	80136d4 <_sbrk_r>
 801365a:	6020      	str	r0, [r4, #0]
 801365c:	4629      	mov	r1, r5
 801365e:	4630      	mov	r0, r6
 8013660:	f000 f838 	bl	80136d4 <_sbrk_r>
 8013664:	1c43      	adds	r3, r0, #1
 8013666:	d124      	bne.n	80136b2 <_malloc_r+0x92>
 8013668:	230c      	movs	r3, #12
 801366a:	6033      	str	r3, [r6, #0]
 801366c:	4630      	mov	r0, r6
 801366e:	f000 f854 	bl	801371a <__malloc_unlock>
 8013672:	e7e4      	b.n	801363e <_malloc_r+0x1e>
 8013674:	680b      	ldr	r3, [r1, #0]
 8013676:	1b5b      	subs	r3, r3, r5
 8013678:	d418      	bmi.n	80136ac <_malloc_r+0x8c>
 801367a:	2b0b      	cmp	r3, #11
 801367c:	d90f      	bls.n	801369e <_malloc_r+0x7e>
 801367e:	600b      	str	r3, [r1, #0]
 8013680:	50cd      	str	r5, [r1, r3]
 8013682:	18cc      	adds	r4, r1, r3
 8013684:	4630      	mov	r0, r6
 8013686:	f000 f848 	bl	801371a <__malloc_unlock>
 801368a:	f104 000b 	add.w	r0, r4, #11
 801368e:	1d23      	adds	r3, r4, #4
 8013690:	f020 0007 	bic.w	r0, r0, #7
 8013694:	1ac3      	subs	r3, r0, r3
 8013696:	d0d3      	beq.n	8013640 <_malloc_r+0x20>
 8013698:	425a      	negs	r2, r3
 801369a:	50e2      	str	r2, [r4, r3]
 801369c:	e7d0      	b.n	8013640 <_malloc_r+0x20>
 801369e:	428c      	cmp	r4, r1
 80136a0:	684b      	ldr	r3, [r1, #4]
 80136a2:	bf16      	itet	ne
 80136a4:	6063      	strne	r3, [r4, #4]
 80136a6:	6013      	streq	r3, [r2, #0]
 80136a8:	460c      	movne	r4, r1
 80136aa:	e7eb      	b.n	8013684 <_malloc_r+0x64>
 80136ac:	460c      	mov	r4, r1
 80136ae:	6849      	ldr	r1, [r1, #4]
 80136b0:	e7cc      	b.n	801364c <_malloc_r+0x2c>
 80136b2:	1cc4      	adds	r4, r0, #3
 80136b4:	f024 0403 	bic.w	r4, r4, #3
 80136b8:	42a0      	cmp	r0, r4
 80136ba:	d005      	beq.n	80136c8 <_malloc_r+0xa8>
 80136bc:	1a21      	subs	r1, r4, r0
 80136be:	4630      	mov	r0, r6
 80136c0:	f000 f808 	bl	80136d4 <_sbrk_r>
 80136c4:	3001      	adds	r0, #1
 80136c6:	d0cf      	beq.n	8013668 <_malloc_r+0x48>
 80136c8:	6025      	str	r5, [r4, #0]
 80136ca:	e7db      	b.n	8013684 <_malloc_r+0x64>
 80136cc:	200042a4 	.word	0x200042a4
 80136d0:	200042a8 	.word	0x200042a8

080136d4 <_sbrk_r>:
 80136d4:	b538      	push	{r3, r4, r5, lr}
 80136d6:	4c06      	ldr	r4, [pc, #24]	; (80136f0 <_sbrk_r+0x1c>)
 80136d8:	2300      	movs	r3, #0
 80136da:	4605      	mov	r5, r0
 80136dc:	4608      	mov	r0, r1
 80136de:	6023      	str	r3, [r4, #0]
 80136e0:	f7fe f872 	bl	80117c8 <_sbrk>
 80136e4:	1c43      	adds	r3, r0, #1
 80136e6:	d102      	bne.n	80136ee <_sbrk_r+0x1a>
 80136e8:	6823      	ldr	r3, [r4, #0]
 80136ea:	b103      	cbz	r3, 80136ee <_sbrk_r+0x1a>
 80136ec:	602b      	str	r3, [r5, #0]
 80136ee:	bd38      	pop	{r3, r4, r5, pc}
 80136f0:	20004870 	.word	0x20004870

080136f4 <__ascii_mbtowc>:
 80136f4:	b082      	sub	sp, #8
 80136f6:	b901      	cbnz	r1, 80136fa <__ascii_mbtowc+0x6>
 80136f8:	a901      	add	r1, sp, #4
 80136fa:	b142      	cbz	r2, 801370e <__ascii_mbtowc+0x1a>
 80136fc:	b14b      	cbz	r3, 8013712 <__ascii_mbtowc+0x1e>
 80136fe:	7813      	ldrb	r3, [r2, #0]
 8013700:	600b      	str	r3, [r1, #0]
 8013702:	7812      	ldrb	r2, [r2, #0]
 8013704:	1c10      	adds	r0, r2, #0
 8013706:	bf18      	it	ne
 8013708:	2001      	movne	r0, #1
 801370a:	b002      	add	sp, #8
 801370c:	4770      	bx	lr
 801370e:	4610      	mov	r0, r2
 8013710:	e7fb      	b.n	801370a <__ascii_mbtowc+0x16>
 8013712:	f06f 0001 	mvn.w	r0, #1
 8013716:	e7f8      	b.n	801370a <__ascii_mbtowc+0x16>

08013718 <__malloc_lock>:
 8013718:	4770      	bx	lr

0801371a <__malloc_unlock>:
 801371a:	4770      	bx	lr

0801371c <__ascii_wctomb>:
 801371c:	b149      	cbz	r1, 8013732 <__ascii_wctomb+0x16>
 801371e:	2aff      	cmp	r2, #255	; 0xff
 8013720:	bf85      	ittet	hi
 8013722:	238a      	movhi	r3, #138	; 0x8a
 8013724:	6003      	strhi	r3, [r0, #0]
 8013726:	700a      	strbls	r2, [r1, #0]
 8013728:	f04f 30ff 	movhi.w	r0, #4294967295
 801372c:	bf98      	it	ls
 801372e:	2001      	movls	r0, #1
 8013730:	4770      	bx	lr
 8013732:	4608      	mov	r0, r1
 8013734:	4770      	bx	lr
	...

08013738 <fmodf>:
 8013738:	b5d0      	push	{r4, r6, r7, lr}
 801373a:	ed2d 8b02 	vpush	{d8}
 801373e:	b08a      	sub	sp, #40	; 0x28
 8013740:	eef0 8a40 	vmov.f32	s17, s0
 8013744:	eeb0 8a60 	vmov.f32	s16, s1
 8013748:	f000 f852 	bl	80137f0 <__ieee754_fmodf>
 801374c:	4b26      	ldr	r3, [pc, #152]	; (80137e8 <fmodf+0xb0>)
 801374e:	f993 4000 	ldrsb.w	r4, [r3]
 8013752:	1c63      	adds	r3, r4, #1
 8013754:	d035      	beq.n	80137c2 <fmodf+0x8a>
 8013756:	eeb4 8a48 	vcmp.f32	s16, s16
 801375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801375e:	d630      	bvs.n	80137c2 <fmodf+0x8a>
 8013760:	eef4 8a68 	vcmp.f32	s17, s17
 8013764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013768:	d62b      	bvs.n	80137c2 <fmodf+0x8a>
 801376a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013772:	d126      	bne.n	80137c2 <fmodf+0x8a>
 8013774:	2301      	movs	r3, #1
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	4b1c      	ldr	r3, [pc, #112]	; (80137ec <fmodf+0xb4>)
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	ee18 0a90 	vmov	r0, s17
 8013780:	2300      	movs	r3, #0
 8013782:	9308      	str	r3, [sp, #32]
 8013784:	f7f4 fdc8 	bl	8008318 <__aeabi_f2d>
 8013788:	4606      	mov	r6, r0
 801378a:	460f      	mov	r7, r1
 801378c:	ee18 0a10 	vmov	r0, s16
 8013790:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013794:	f7f4 fdc0 	bl	8008318 <__aeabi_f2d>
 8013798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801379c:	b9ac      	cbnz	r4, 80137ca <fmodf+0x92>
 801379e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80137a2:	4668      	mov	r0, sp
 80137a4:	f000 f8ac 	bl	8013900 <matherr>
 80137a8:	b1c8      	cbz	r0, 80137de <fmodf+0xa6>
 80137aa:	9b08      	ldr	r3, [sp, #32]
 80137ac:	b11b      	cbz	r3, 80137b6 <fmodf+0x7e>
 80137ae:	f7fe fa6b 	bl	8011c88 <__errno>
 80137b2:	9b08      	ldr	r3, [sp, #32]
 80137b4:	6003      	str	r3, [r0, #0]
 80137b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137ba:	f7f5 f8dd 	bl	8008978 <__aeabi_d2f>
 80137be:	ee00 0a10 	vmov	s0, r0
 80137c2:	b00a      	add	sp, #40	; 0x28
 80137c4:	ecbd 8b02 	vpop	{d8}
 80137c8:	bdd0      	pop	{r4, r6, r7, pc}
 80137ca:	2200      	movs	r2, #0
 80137cc:	2300      	movs	r3, #0
 80137ce:	4610      	mov	r0, r2
 80137d0:	4619      	mov	r1, r3
 80137d2:	f7f4 ff23 	bl	800861c <__aeabi_ddiv>
 80137d6:	2c02      	cmp	r4, #2
 80137d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137dc:	d1e1      	bne.n	80137a2 <fmodf+0x6a>
 80137de:	f7fe fa53 	bl	8011c88 <__errno>
 80137e2:	2321      	movs	r3, #33	; 0x21
 80137e4:	6003      	str	r3, [r0, #0]
 80137e6:	e7e0      	b.n	80137aa <fmodf+0x72>
 80137e8:	200001e0 	.word	0x200001e0
 80137ec:	0802747f 	.word	0x0802747f

080137f0 <__ieee754_fmodf>:
 80137f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137f2:	ee10 6a90 	vmov	r6, s1
 80137f6:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80137fa:	ee10 3a10 	vmov	r3, s0
 80137fe:	d009      	beq.n	8013814 <__ieee754_fmodf+0x24>
 8013800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013804:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013808:	ee10 7a10 	vmov	r7, s0
 801380c:	da02      	bge.n	8013814 <__ieee754_fmodf+0x24>
 801380e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013812:	dd0a      	ble.n	801382a <__ieee754_fmodf+0x3a>
 8013814:	ee07 3a90 	vmov	s15, r3
 8013818:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801381c:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8013820:	ee17 3a90 	vmov	r3, s15
 8013824:	ee00 3a10 	vmov	s0, r3
 8013828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801382a:	42a9      	cmp	r1, r5
 801382c:	dbfa      	blt.n	8013824 <__ieee754_fmodf+0x34>
 801382e:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8013832:	d105      	bne.n	8013840 <__ieee754_fmodf+0x50>
 8013834:	4a30      	ldr	r2, [pc, #192]	; (80138f8 <__ieee754_fmodf+0x108>)
 8013836:	0fe3      	lsrs	r3, r4, #31
 8013838:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	e7f1      	b.n	8013824 <__ieee754_fmodf+0x34>
 8013840:	4b2e      	ldr	r3, [pc, #184]	; (80138fc <__ieee754_fmodf+0x10c>)
 8013842:	4299      	cmp	r1, r3
 8013844:	dc3e      	bgt.n	80138c4 <__ieee754_fmodf+0xd4>
 8013846:	020a      	lsls	r2, r1, #8
 8013848:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 801384c:	2a00      	cmp	r2, #0
 801384e:	dc36      	bgt.n	80138be <__ieee754_fmodf+0xce>
 8013850:	429d      	cmp	r5, r3
 8013852:	dc3a      	bgt.n	80138ca <__ieee754_fmodf+0xda>
 8013854:	022b      	lsls	r3, r5, #8
 8013856:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 801385a:	005b      	lsls	r3, r3, #1
 801385c:	f102 32ff 	add.w	r2, r2, #4294967295
 8013860:	d5fb      	bpl.n	801385a <__ieee754_fmodf+0x6a>
 8013862:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8013866:	bfbb      	ittet	lt
 8013868:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 801386c:	1a1b      	sublt	r3, r3, r0
 801386e:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8013872:	4099      	lsllt	r1, r3
 8013874:	bfa8      	it	ge
 8013876:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 801387a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 801387e:	bfb5      	itete	lt
 8013880:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8013884:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8013888:	1a9b      	sublt	r3, r3, r2
 801388a:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 801388e:	bfb8      	it	lt
 8013890:	409d      	lsllt	r5, r3
 8013892:	1a80      	subs	r0, r0, r2
 8013894:	1b4b      	subs	r3, r1, r5
 8013896:	b9d8      	cbnz	r0, 80138d0 <__ieee754_fmodf+0xe0>
 8013898:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 801389c:	bf28      	it	cs
 801389e:	460b      	movcs	r3, r1
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d0c7      	beq.n	8013834 <__ieee754_fmodf+0x44>
 80138a4:	4915      	ldr	r1, [pc, #84]	; (80138fc <__ieee754_fmodf+0x10c>)
 80138a6:	428b      	cmp	r3, r1
 80138a8:	dd1a      	ble.n	80138e0 <__ieee754_fmodf+0xf0>
 80138aa:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80138ae:	db1a      	blt.n	80138e6 <__ieee754_fmodf+0xf6>
 80138b0:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80138b4:	4323      	orrs	r3, r4
 80138b6:	327f      	adds	r2, #127	; 0x7f
 80138b8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80138bc:	e7b2      	b.n	8013824 <__ieee754_fmodf+0x34>
 80138be:	3801      	subs	r0, #1
 80138c0:	0052      	lsls	r2, r2, #1
 80138c2:	e7c3      	b.n	801384c <__ieee754_fmodf+0x5c>
 80138c4:	15c8      	asrs	r0, r1, #23
 80138c6:	387f      	subs	r0, #127	; 0x7f
 80138c8:	e7c2      	b.n	8013850 <__ieee754_fmodf+0x60>
 80138ca:	15ea      	asrs	r2, r5, #23
 80138cc:	3a7f      	subs	r2, #127	; 0x7f
 80138ce:	e7c8      	b.n	8013862 <__ieee754_fmodf+0x72>
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	da02      	bge.n	80138da <__ieee754_fmodf+0xea>
 80138d4:	0049      	lsls	r1, r1, #1
 80138d6:	3801      	subs	r0, #1
 80138d8:	e7dc      	b.n	8013894 <__ieee754_fmodf+0xa4>
 80138da:	d0ab      	beq.n	8013834 <__ieee754_fmodf+0x44>
 80138dc:	0059      	lsls	r1, r3, #1
 80138de:	e7fa      	b.n	80138d6 <__ieee754_fmodf+0xe6>
 80138e0:	005b      	lsls	r3, r3, #1
 80138e2:	3a01      	subs	r2, #1
 80138e4:	e7df      	b.n	80138a6 <__ieee754_fmodf+0xb6>
 80138e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80138ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80138ee:	3282      	adds	r2, #130	; 0x82
 80138f0:	4113      	asrs	r3, r2
 80138f2:	4323      	orrs	r3, r4
 80138f4:	e796      	b.n	8013824 <__ieee754_fmodf+0x34>
 80138f6:	bf00      	nop
 80138f8:	08027488 	.word	0x08027488
 80138fc:	007fffff 	.word	0x007fffff

08013900 <matherr>:
 8013900:	2000      	movs	r0, #0
 8013902:	4770      	bx	lr

08013904 <_init>:
 8013904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013906:	bf00      	nop
 8013908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801390a:	bc08      	pop	{r3}
 801390c:	469e      	mov	lr, r3
 801390e:	4770      	bx	lr

08013910 <_fini>:
 8013910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013912:	bf00      	nop
 8013914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013916:	bc08      	pop	{r3}
 8013918:	469e      	mov	lr, r3
 801391a:	4770      	bx	lr
