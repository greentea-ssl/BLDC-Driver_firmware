
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         00009b44  08008000  08008000  00018000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013968  08011b48  08011b48  00021b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080254b0  080254b0  00040084  2**0
                  CONTENTS
  5 .ARM          00000008  080254b0  080254b0  000354b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080254b8  080254b8  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080254b8  080254b8  000354b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080254bc  080254bc  000354bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000084  20000000  080254c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000588  20000084  08025544  00040084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000060c  08025544  0004060c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f246  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003e02  00000000  00000000  0005f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013b8  00000000  00000000  00063100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011b8  00000000  00000000  000644b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026388  00000000  00000000  00065670  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00013188  00000000  00000000  0008b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000da045  00000000  00000000  0009eb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00178bc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005878  00000000  00000000  00178c40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000084 	.word	0x20000084
 800801c:	00000000 	.word	0x00000000
 8008020:	08011b2c 	.word	0x08011b2c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000088 	.word	0x20000088
 800803c:	08011b2c 	.word	0x08011b2c

08008040 <__aeabi_drsub>:
 8008040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008044:	e002      	b.n	800804c <__adddf3>
 8008046:	bf00      	nop

08008048 <__aeabi_dsub>:
 8008048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800804c <__adddf3>:
 800804c:	b530      	push	{r4, r5, lr}
 800804e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008056:	ea94 0f05 	teq	r4, r5
 800805a:	bf08      	it	eq
 800805c:	ea90 0f02 	teqeq	r0, r2
 8008060:	bf1f      	itttt	ne
 8008062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008066:	ea55 0c02 	orrsne.w	ip, r5, r2
 800806a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800806e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008072:	f000 80e2 	beq.w	800823a <__adddf3+0x1ee>
 8008076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800807a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800807e:	bfb8      	it	lt
 8008080:	426d      	neglt	r5, r5
 8008082:	dd0c      	ble.n	800809e <__adddf3+0x52>
 8008084:	442c      	add	r4, r5
 8008086:	ea80 0202 	eor.w	r2, r0, r2
 800808a:	ea81 0303 	eor.w	r3, r1, r3
 800808e:	ea82 0000 	eor.w	r0, r2, r0
 8008092:	ea83 0101 	eor.w	r1, r3, r1
 8008096:	ea80 0202 	eor.w	r2, r0, r2
 800809a:	ea81 0303 	eor.w	r3, r1, r3
 800809e:	2d36      	cmp	r5, #54	; 0x36
 80080a0:	bf88      	it	hi
 80080a2:	bd30      	pophi	{r4, r5, pc}
 80080a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80080a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80080ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80080b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80080b4:	d002      	beq.n	80080bc <__adddf3+0x70>
 80080b6:	4240      	negs	r0, r0
 80080b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80080bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80080c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80080c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80080c8:	d002      	beq.n	80080d0 <__adddf3+0x84>
 80080ca:	4252      	negs	r2, r2
 80080cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80080d0:	ea94 0f05 	teq	r4, r5
 80080d4:	f000 80a7 	beq.w	8008226 <__adddf3+0x1da>
 80080d8:	f1a4 0401 	sub.w	r4, r4, #1
 80080dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80080e0:	db0d      	blt.n	80080fe <__adddf3+0xb2>
 80080e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80080e6:	fa22 f205 	lsr.w	r2, r2, r5
 80080ea:	1880      	adds	r0, r0, r2
 80080ec:	f141 0100 	adc.w	r1, r1, #0
 80080f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80080f4:	1880      	adds	r0, r0, r2
 80080f6:	fa43 f305 	asr.w	r3, r3, r5
 80080fa:	4159      	adcs	r1, r3
 80080fc:	e00e      	b.n	800811c <__adddf3+0xd0>
 80080fe:	f1a5 0520 	sub.w	r5, r5, #32
 8008102:	f10e 0e20 	add.w	lr, lr, #32
 8008106:	2a01      	cmp	r2, #1
 8008108:	fa03 fc0e 	lsl.w	ip, r3, lr
 800810c:	bf28      	it	cs
 800810e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008112:	fa43 f305 	asr.w	r3, r3, r5
 8008116:	18c0      	adds	r0, r0, r3
 8008118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800811c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008120:	d507      	bpl.n	8008132 <__adddf3+0xe6>
 8008122:	f04f 0e00 	mov.w	lr, #0
 8008126:	f1dc 0c00 	rsbs	ip, ip, #0
 800812a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800812e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008136:	d31b      	bcc.n	8008170 <__adddf3+0x124>
 8008138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800813c:	d30c      	bcc.n	8008158 <__adddf3+0x10c>
 800813e:	0849      	lsrs	r1, r1, #1
 8008140:	ea5f 0030 	movs.w	r0, r0, rrx
 8008144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008148:	f104 0401 	add.w	r4, r4, #1
 800814c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008154:	f080 809a 	bcs.w	800828c <__adddf3+0x240>
 8008158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800815c:	bf08      	it	eq
 800815e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008162:	f150 0000 	adcs.w	r0, r0, #0
 8008166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800816a:	ea41 0105 	orr.w	r1, r1, r5
 800816e:	bd30      	pop	{r4, r5, pc}
 8008170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008174:	4140      	adcs	r0, r0
 8008176:	eb41 0101 	adc.w	r1, r1, r1
 800817a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800817e:	f1a4 0401 	sub.w	r4, r4, #1
 8008182:	d1e9      	bne.n	8008158 <__adddf3+0x10c>
 8008184:	f091 0f00 	teq	r1, #0
 8008188:	bf04      	itt	eq
 800818a:	4601      	moveq	r1, r0
 800818c:	2000      	moveq	r0, #0
 800818e:	fab1 f381 	clz	r3, r1
 8008192:	bf08      	it	eq
 8008194:	3320      	addeq	r3, #32
 8008196:	f1a3 030b 	sub.w	r3, r3, #11
 800819a:	f1b3 0220 	subs.w	r2, r3, #32
 800819e:	da0c      	bge.n	80081ba <__adddf3+0x16e>
 80081a0:	320c      	adds	r2, #12
 80081a2:	dd08      	ble.n	80081b6 <__adddf3+0x16a>
 80081a4:	f102 0c14 	add.w	ip, r2, #20
 80081a8:	f1c2 020c 	rsb	r2, r2, #12
 80081ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80081b0:	fa21 f102 	lsr.w	r1, r1, r2
 80081b4:	e00c      	b.n	80081d0 <__adddf3+0x184>
 80081b6:	f102 0214 	add.w	r2, r2, #20
 80081ba:	bfd8      	it	le
 80081bc:	f1c2 0c20 	rsble	ip, r2, #32
 80081c0:	fa01 f102 	lsl.w	r1, r1, r2
 80081c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80081c8:	bfdc      	itt	le
 80081ca:	ea41 010c 	orrle.w	r1, r1, ip
 80081ce:	4090      	lslle	r0, r2
 80081d0:	1ae4      	subs	r4, r4, r3
 80081d2:	bfa2      	ittt	ge
 80081d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80081d8:	4329      	orrge	r1, r5
 80081da:	bd30      	popge	{r4, r5, pc}
 80081dc:	ea6f 0404 	mvn.w	r4, r4
 80081e0:	3c1f      	subs	r4, #31
 80081e2:	da1c      	bge.n	800821e <__adddf3+0x1d2>
 80081e4:	340c      	adds	r4, #12
 80081e6:	dc0e      	bgt.n	8008206 <__adddf3+0x1ba>
 80081e8:	f104 0414 	add.w	r4, r4, #20
 80081ec:	f1c4 0220 	rsb	r2, r4, #32
 80081f0:	fa20 f004 	lsr.w	r0, r0, r4
 80081f4:	fa01 f302 	lsl.w	r3, r1, r2
 80081f8:	ea40 0003 	orr.w	r0, r0, r3
 80081fc:	fa21 f304 	lsr.w	r3, r1, r4
 8008200:	ea45 0103 	orr.w	r1, r5, r3
 8008204:	bd30      	pop	{r4, r5, pc}
 8008206:	f1c4 040c 	rsb	r4, r4, #12
 800820a:	f1c4 0220 	rsb	r2, r4, #32
 800820e:	fa20 f002 	lsr.w	r0, r0, r2
 8008212:	fa01 f304 	lsl.w	r3, r1, r4
 8008216:	ea40 0003 	orr.w	r0, r0, r3
 800821a:	4629      	mov	r1, r5
 800821c:	bd30      	pop	{r4, r5, pc}
 800821e:	fa21 f004 	lsr.w	r0, r1, r4
 8008222:	4629      	mov	r1, r5
 8008224:	bd30      	pop	{r4, r5, pc}
 8008226:	f094 0f00 	teq	r4, #0
 800822a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800822e:	bf06      	itte	eq
 8008230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008234:	3401      	addeq	r4, #1
 8008236:	3d01      	subne	r5, #1
 8008238:	e74e      	b.n	80080d8 <__adddf3+0x8c>
 800823a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800823e:	bf18      	it	ne
 8008240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008244:	d029      	beq.n	800829a <__adddf3+0x24e>
 8008246:	ea94 0f05 	teq	r4, r5
 800824a:	bf08      	it	eq
 800824c:	ea90 0f02 	teqeq	r0, r2
 8008250:	d005      	beq.n	800825e <__adddf3+0x212>
 8008252:	ea54 0c00 	orrs.w	ip, r4, r0
 8008256:	bf04      	itt	eq
 8008258:	4619      	moveq	r1, r3
 800825a:	4610      	moveq	r0, r2
 800825c:	bd30      	pop	{r4, r5, pc}
 800825e:	ea91 0f03 	teq	r1, r3
 8008262:	bf1e      	ittt	ne
 8008264:	2100      	movne	r1, #0
 8008266:	2000      	movne	r0, #0
 8008268:	bd30      	popne	{r4, r5, pc}
 800826a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800826e:	d105      	bne.n	800827c <__adddf3+0x230>
 8008270:	0040      	lsls	r0, r0, #1
 8008272:	4149      	adcs	r1, r1
 8008274:	bf28      	it	cs
 8008276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800827a:	bd30      	pop	{r4, r5, pc}
 800827c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008280:	bf3c      	itt	cc
 8008282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008286:	bd30      	popcc	{r4, r5, pc}
 8008288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800828c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008294:	f04f 0000 	mov.w	r0, #0
 8008298:	bd30      	pop	{r4, r5, pc}
 800829a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800829e:	bf1a      	itte	ne
 80082a0:	4619      	movne	r1, r3
 80082a2:	4610      	movne	r0, r2
 80082a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80082a8:	bf1c      	itt	ne
 80082aa:	460b      	movne	r3, r1
 80082ac:	4602      	movne	r2, r0
 80082ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80082b2:	bf06      	itte	eq
 80082b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80082b8:	ea91 0f03 	teqeq	r1, r3
 80082bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80082c0:	bd30      	pop	{r4, r5, pc}
 80082c2:	bf00      	nop

080082c4 <__aeabi_ui2d>:
 80082c4:	f090 0f00 	teq	r0, #0
 80082c8:	bf04      	itt	eq
 80082ca:	2100      	moveq	r1, #0
 80082cc:	4770      	bxeq	lr
 80082ce:	b530      	push	{r4, r5, lr}
 80082d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80082d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80082d8:	f04f 0500 	mov.w	r5, #0
 80082dc:	f04f 0100 	mov.w	r1, #0
 80082e0:	e750      	b.n	8008184 <__adddf3+0x138>
 80082e2:	bf00      	nop

080082e4 <__aeabi_i2d>:
 80082e4:	f090 0f00 	teq	r0, #0
 80082e8:	bf04      	itt	eq
 80082ea:	2100      	moveq	r1, #0
 80082ec:	4770      	bxeq	lr
 80082ee:	b530      	push	{r4, r5, lr}
 80082f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80082f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80082f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80082fc:	bf48      	it	mi
 80082fe:	4240      	negmi	r0, r0
 8008300:	f04f 0100 	mov.w	r1, #0
 8008304:	e73e      	b.n	8008184 <__adddf3+0x138>
 8008306:	bf00      	nop

08008308 <__aeabi_f2d>:
 8008308:	0042      	lsls	r2, r0, #1
 800830a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800830e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008316:	bf1f      	itttt	ne
 8008318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800831c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008324:	4770      	bxne	lr
 8008326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800832a:	bf08      	it	eq
 800832c:	4770      	bxeq	lr
 800832e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008332:	bf04      	itt	eq
 8008334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008338:	4770      	bxeq	lr
 800833a:	b530      	push	{r4, r5, lr}
 800833c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008348:	e71c      	b.n	8008184 <__adddf3+0x138>
 800834a:	bf00      	nop

0800834c <__aeabi_ul2d>:
 800834c:	ea50 0201 	orrs.w	r2, r0, r1
 8008350:	bf08      	it	eq
 8008352:	4770      	bxeq	lr
 8008354:	b530      	push	{r4, r5, lr}
 8008356:	f04f 0500 	mov.w	r5, #0
 800835a:	e00a      	b.n	8008372 <__aeabi_l2d+0x16>

0800835c <__aeabi_l2d>:
 800835c:	ea50 0201 	orrs.w	r2, r0, r1
 8008360:	bf08      	it	eq
 8008362:	4770      	bxeq	lr
 8008364:	b530      	push	{r4, r5, lr}
 8008366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800836a:	d502      	bpl.n	8008372 <__aeabi_l2d+0x16>
 800836c:	4240      	negs	r0, r0
 800836e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800837a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800837e:	f43f aed8 	beq.w	8008132 <__adddf3+0xe6>
 8008382:	f04f 0203 	mov.w	r2, #3
 8008386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800838a:	bf18      	it	ne
 800838c:	3203      	addne	r2, #3
 800838e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008392:	bf18      	it	ne
 8008394:	3203      	addne	r2, #3
 8008396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800839a:	f1c2 0320 	rsb	r3, r2, #32
 800839e:	fa00 fc03 	lsl.w	ip, r0, r3
 80083a2:	fa20 f002 	lsr.w	r0, r0, r2
 80083a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80083aa:	ea40 000e 	orr.w	r0, r0, lr
 80083ae:	fa21 f102 	lsr.w	r1, r1, r2
 80083b2:	4414      	add	r4, r2
 80083b4:	e6bd      	b.n	8008132 <__adddf3+0xe6>
 80083b6:	bf00      	nop

080083b8 <__aeabi_dmul>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80083be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80083c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80083c6:	bf1d      	ittte	ne
 80083c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80083cc:	ea94 0f0c 	teqne	r4, ip
 80083d0:	ea95 0f0c 	teqne	r5, ip
 80083d4:	f000 f8de 	bleq	8008594 <__aeabi_dmul+0x1dc>
 80083d8:	442c      	add	r4, r5
 80083da:	ea81 0603 	eor.w	r6, r1, r3
 80083de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80083e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80083e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80083ea:	bf18      	it	ne
 80083ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80083f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80083f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f8:	d038      	beq.n	800846c <__aeabi_dmul+0xb4>
 80083fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80083fe:	f04f 0500 	mov.w	r5, #0
 8008402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800840a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800840e:	f04f 0600 	mov.w	r6, #0
 8008412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008416:	f09c 0f00 	teq	ip, #0
 800841a:	bf18      	it	ne
 800841c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800842c:	d204      	bcs.n	8008438 <__aeabi_dmul+0x80>
 800842e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008432:	416d      	adcs	r5, r5
 8008434:	eb46 0606 	adc.w	r6, r6, r6
 8008438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800843c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800844c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008450:	bf88      	it	hi
 8008452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008456:	d81e      	bhi.n	8008496 <__aeabi_dmul+0xde>
 8008458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800845c:	bf08      	it	eq
 800845e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008462:	f150 0000 	adcs.w	r0, r0, #0
 8008466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800846a:	bd70      	pop	{r4, r5, r6, pc}
 800846c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008470:	ea46 0101 	orr.w	r1, r6, r1
 8008474:	ea40 0002 	orr.w	r0, r0, r2
 8008478:	ea81 0103 	eor.w	r1, r1, r3
 800847c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008480:	bfc2      	ittt	gt
 8008482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800848a:	bd70      	popgt	{r4, r5, r6, pc}
 800848c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008490:	f04f 0e00 	mov.w	lr, #0
 8008494:	3c01      	subs	r4, #1
 8008496:	f300 80ab 	bgt.w	80085f0 <__aeabi_dmul+0x238>
 800849a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800849e:	bfde      	ittt	le
 80084a0:	2000      	movle	r0, #0
 80084a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80084a6:	bd70      	pople	{r4, r5, r6, pc}
 80084a8:	f1c4 0400 	rsb	r4, r4, #0
 80084ac:	3c20      	subs	r4, #32
 80084ae:	da35      	bge.n	800851c <__aeabi_dmul+0x164>
 80084b0:	340c      	adds	r4, #12
 80084b2:	dc1b      	bgt.n	80084ec <__aeabi_dmul+0x134>
 80084b4:	f104 0414 	add.w	r4, r4, #20
 80084b8:	f1c4 0520 	rsb	r5, r4, #32
 80084bc:	fa00 f305 	lsl.w	r3, r0, r5
 80084c0:	fa20 f004 	lsr.w	r0, r0, r4
 80084c4:	fa01 f205 	lsl.w	r2, r1, r5
 80084c8:	ea40 0002 	orr.w	r0, r0, r2
 80084cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80084d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80084d8:	fa21 f604 	lsr.w	r6, r1, r4
 80084dc:	eb42 0106 	adc.w	r1, r2, r6
 80084e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80084e4:	bf08      	it	eq
 80084e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	f1c4 040c 	rsb	r4, r4, #12
 80084f0:	f1c4 0520 	rsb	r5, r4, #32
 80084f4:	fa00 f304 	lsl.w	r3, r0, r4
 80084f8:	fa20 f005 	lsr.w	r0, r0, r5
 80084fc:	fa01 f204 	lsl.w	r2, r1, r4
 8008500:	ea40 0002 	orr.w	r0, r0, r2
 8008504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800850c:	f141 0100 	adc.w	r1, r1, #0
 8008510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008514:	bf08      	it	eq
 8008516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f1c4 0520 	rsb	r5, r4, #32
 8008520:	fa00 f205 	lsl.w	r2, r0, r5
 8008524:	ea4e 0e02 	orr.w	lr, lr, r2
 8008528:	fa20 f304 	lsr.w	r3, r0, r4
 800852c:	fa01 f205 	lsl.w	r2, r1, r5
 8008530:	ea43 0302 	orr.w	r3, r3, r2
 8008534:	fa21 f004 	lsr.w	r0, r1, r4
 8008538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800853c:	fa21 f204 	lsr.w	r2, r1, r4
 8008540:	ea20 0002 	bic.w	r0, r0, r2
 8008544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800854c:	bf08      	it	eq
 800854e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	f094 0f00 	teq	r4, #0
 8008558:	d10f      	bne.n	800857a <__aeabi_dmul+0x1c2>
 800855a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800855e:	0040      	lsls	r0, r0, #1
 8008560:	eb41 0101 	adc.w	r1, r1, r1
 8008564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008568:	bf08      	it	eq
 800856a:	3c01      	subeq	r4, #1
 800856c:	d0f7      	beq.n	800855e <__aeabi_dmul+0x1a6>
 800856e:	ea41 0106 	orr.w	r1, r1, r6
 8008572:	f095 0f00 	teq	r5, #0
 8008576:	bf18      	it	ne
 8008578:	4770      	bxne	lr
 800857a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800857e:	0052      	lsls	r2, r2, #1
 8008580:	eb43 0303 	adc.w	r3, r3, r3
 8008584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008588:	bf08      	it	eq
 800858a:	3d01      	subeq	r5, #1
 800858c:	d0f7      	beq.n	800857e <__aeabi_dmul+0x1c6>
 800858e:	ea43 0306 	orr.w	r3, r3, r6
 8008592:	4770      	bx	lr
 8008594:	ea94 0f0c 	teq	r4, ip
 8008598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800859c:	bf18      	it	ne
 800859e:	ea95 0f0c 	teqne	r5, ip
 80085a2:	d00c      	beq.n	80085be <__aeabi_dmul+0x206>
 80085a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085a8:	bf18      	it	ne
 80085aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085ae:	d1d1      	bne.n	8008554 <__aeabi_dmul+0x19c>
 80085b0:	ea81 0103 	eor.w	r1, r1, r3
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	f04f 0000 	mov.w	r0, #0
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085c2:	bf06      	itte	eq
 80085c4:	4610      	moveq	r0, r2
 80085c6:	4619      	moveq	r1, r3
 80085c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085cc:	d019      	beq.n	8008602 <__aeabi_dmul+0x24a>
 80085ce:	ea94 0f0c 	teq	r4, ip
 80085d2:	d102      	bne.n	80085da <__aeabi_dmul+0x222>
 80085d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80085d8:	d113      	bne.n	8008602 <__aeabi_dmul+0x24a>
 80085da:	ea95 0f0c 	teq	r5, ip
 80085de:	d105      	bne.n	80085ec <__aeabi_dmul+0x234>
 80085e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80085e4:	bf1c      	itt	ne
 80085e6:	4610      	movne	r0, r2
 80085e8:	4619      	movne	r1, r3
 80085ea:	d10a      	bne.n	8008602 <__aeabi_dmul+0x24a>
 80085ec:	ea81 0103 	eor.w	r1, r1, r3
 80085f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80085f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085fc:	f04f 0000 	mov.w	r0, #0
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <__aeabi_ddiv>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800861a:	bf1d      	ittte	ne
 800861c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008620:	ea94 0f0c 	teqne	r4, ip
 8008624:	ea95 0f0c 	teqne	r5, ip
 8008628:	f000 f8a7 	bleq	800877a <__aeabi_ddiv+0x16e>
 800862c:	eba4 0405 	sub.w	r4, r4, r5
 8008630:	ea81 0e03 	eor.w	lr, r1, r3
 8008634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800863c:	f000 8088 	beq.w	8008750 <__aeabi_ddiv+0x144>
 8008640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800864c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800865c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008664:	429d      	cmp	r5, r3
 8008666:	bf08      	it	eq
 8008668:	4296      	cmpeq	r6, r2
 800866a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800866e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008672:	d202      	bcs.n	800867a <__aeabi_ddiv+0x6e>
 8008674:	085b      	lsrs	r3, r3, #1
 8008676:	ea4f 0232 	mov.w	r2, r2, rrx
 800867a:	1ab6      	subs	r6, r6, r2
 800867c:	eb65 0503 	sbc.w	r5, r5, r3
 8008680:	085b      	lsrs	r3, r3, #1
 8008682:	ea4f 0232 	mov.w	r2, r2, rrx
 8008686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800868a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800868e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008696:	bf22      	ittt	cs
 8008698:	1ab6      	subcs	r6, r6, r2
 800869a:	4675      	movcs	r5, lr
 800869c:	ea40 000c 	orrcs.w	r0, r0, ip
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80086aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086ae:	bf22      	ittt	cs
 80086b0:	1ab6      	subcs	r6, r6, r2
 80086b2:	4675      	movcs	r5, lr
 80086b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80086b8:	085b      	lsrs	r3, r3, #1
 80086ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80086be:	ebb6 0e02 	subs.w	lr, r6, r2
 80086c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086c6:	bf22      	ittt	cs
 80086c8:	1ab6      	subcs	r6, r6, r2
 80086ca:	4675      	movcs	r5, lr
 80086cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80086da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086de:	bf22      	ittt	cs
 80086e0:	1ab6      	subcs	r6, r6, r2
 80086e2:	4675      	movcs	r5, lr
 80086e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80086e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80086ec:	d018      	beq.n	8008720 <__aeabi_ddiv+0x114>
 80086ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80086f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80086f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80086fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80086fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800870a:	d1c0      	bne.n	800868e <__aeabi_ddiv+0x82>
 800870c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008710:	d10b      	bne.n	800872a <__aeabi_ddiv+0x11e>
 8008712:	ea41 0100 	orr.w	r1, r1, r0
 8008716:	f04f 0000 	mov.w	r0, #0
 800871a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800871e:	e7b6      	b.n	800868e <__aeabi_ddiv+0x82>
 8008720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008724:	bf04      	itt	eq
 8008726:	4301      	orreq	r1, r0
 8008728:	2000      	moveq	r0, #0
 800872a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800872e:	bf88      	it	hi
 8008730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008734:	f63f aeaf 	bhi.w	8008496 <__aeabi_dmul+0xde>
 8008738:	ebb5 0c03 	subs.w	ip, r5, r3
 800873c:	bf04      	itt	eq
 800873e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008746:	f150 0000 	adcs.w	r0, r0, #0
 800874a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800875c:	bfc2      	ittt	gt
 800875e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008766:	bd70      	popgt	{r4, r5, r6, pc}
 8008768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800876c:	f04f 0e00 	mov.w	lr, #0
 8008770:	3c01      	subs	r4, #1
 8008772:	e690      	b.n	8008496 <__aeabi_dmul+0xde>
 8008774:	ea45 0e06 	orr.w	lr, r5, r6
 8008778:	e68d      	b.n	8008496 <__aeabi_dmul+0xde>
 800877a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800877e:	ea94 0f0c 	teq	r4, ip
 8008782:	bf08      	it	eq
 8008784:	ea95 0f0c 	teqeq	r5, ip
 8008788:	f43f af3b 	beq.w	8008602 <__aeabi_dmul+0x24a>
 800878c:	ea94 0f0c 	teq	r4, ip
 8008790:	d10a      	bne.n	80087a8 <__aeabi_ddiv+0x19c>
 8008792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008796:	f47f af34 	bne.w	8008602 <__aeabi_dmul+0x24a>
 800879a:	ea95 0f0c 	teq	r5, ip
 800879e:	f47f af25 	bne.w	80085ec <__aeabi_dmul+0x234>
 80087a2:	4610      	mov	r0, r2
 80087a4:	4619      	mov	r1, r3
 80087a6:	e72c      	b.n	8008602 <__aeabi_dmul+0x24a>
 80087a8:	ea95 0f0c 	teq	r5, ip
 80087ac:	d106      	bne.n	80087bc <__aeabi_ddiv+0x1b0>
 80087ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80087b2:	f43f aefd 	beq.w	80085b0 <__aeabi_dmul+0x1f8>
 80087b6:	4610      	mov	r0, r2
 80087b8:	4619      	mov	r1, r3
 80087ba:	e722      	b.n	8008602 <__aeabi_dmul+0x24a>
 80087bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087c0:	bf18      	it	ne
 80087c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087c6:	f47f aec5 	bne.w	8008554 <__aeabi_dmul+0x19c>
 80087ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80087ce:	f47f af0d 	bne.w	80085ec <__aeabi_dmul+0x234>
 80087d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80087d6:	f47f aeeb 	bne.w	80085b0 <__aeabi_dmul+0x1f8>
 80087da:	e712      	b.n	8008602 <__aeabi_dmul+0x24a>

080087dc <__gedf2>:
 80087dc:	f04f 3cff 	mov.w	ip, #4294967295
 80087e0:	e006      	b.n	80087f0 <__cmpdf2+0x4>
 80087e2:	bf00      	nop

080087e4 <__ledf2>:
 80087e4:	f04f 0c01 	mov.w	ip, #1
 80087e8:	e002      	b.n	80087f0 <__cmpdf2+0x4>
 80087ea:	bf00      	nop

080087ec <__cmpdf2>:
 80087ec:	f04f 0c01 	mov.w	ip, #1
 80087f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80087f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80087f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80087fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008800:	bf18      	it	ne
 8008802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008806:	d01b      	beq.n	8008840 <__cmpdf2+0x54>
 8008808:	b001      	add	sp, #4
 800880a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800880e:	bf0c      	ite	eq
 8008810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008814:	ea91 0f03 	teqne	r1, r3
 8008818:	bf02      	ittt	eq
 800881a:	ea90 0f02 	teqeq	r0, r2
 800881e:	2000      	moveq	r0, #0
 8008820:	4770      	bxeq	lr
 8008822:	f110 0f00 	cmn.w	r0, #0
 8008826:	ea91 0f03 	teq	r1, r3
 800882a:	bf58      	it	pl
 800882c:	4299      	cmppl	r1, r3
 800882e:	bf08      	it	eq
 8008830:	4290      	cmpeq	r0, r2
 8008832:	bf2c      	ite	cs
 8008834:	17d8      	asrcs	r0, r3, #31
 8008836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800883a:	f040 0001 	orr.w	r0, r0, #1
 800883e:	4770      	bx	lr
 8008840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008848:	d102      	bne.n	8008850 <__cmpdf2+0x64>
 800884a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800884e:	d107      	bne.n	8008860 <__cmpdf2+0x74>
 8008850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008858:	d1d6      	bne.n	8008808 <__cmpdf2+0x1c>
 800885a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800885e:	d0d3      	beq.n	8008808 <__cmpdf2+0x1c>
 8008860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop

08008868 <__aeabi_cdrcmple>:
 8008868:	4684      	mov	ip, r0
 800886a:	4610      	mov	r0, r2
 800886c:	4662      	mov	r2, ip
 800886e:	468c      	mov	ip, r1
 8008870:	4619      	mov	r1, r3
 8008872:	4663      	mov	r3, ip
 8008874:	e000      	b.n	8008878 <__aeabi_cdcmpeq>
 8008876:	bf00      	nop

08008878 <__aeabi_cdcmpeq>:
 8008878:	b501      	push	{r0, lr}
 800887a:	f7ff ffb7 	bl	80087ec <__cmpdf2>
 800887e:	2800      	cmp	r0, #0
 8008880:	bf48      	it	mi
 8008882:	f110 0f00 	cmnmi.w	r0, #0
 8008886:	bd01      	pop	{r0, pc}

08008888 <__aeabi_dcmpeq>:
 8008888:	f84d ed08 	str.w	lr, [sp, #-8]!
 800888c:	f7ff fff4 	bl	8008878 <__aeabi_cdcmpeq>
 8008890:	bf0c      	ite	eq
 8008892:	2001      	moveq	r0, #1
 8008894:	2000      	movne	r0, #0
 8008896:	f85d fb08 	ldr.w	pc, [sp], #8
 800889a:	bf00      	nop

0800889c <__aeabi_dcmplt>:
 800889c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088a0:	f7ff ffea 	bl	8008878 <__aeabi_cdcmpeq>
 80088a4:	bf34      	ite	cc
 80088a6:	2001      	movcc	r0, #1
 80088a8:	2000      	movcs	r0, #0
 80088aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80088ae:	bf00      	nop

080088b0 <__aeabi_dcmple>:
 80088b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088b4:	f7ff ffe0 	bl	8008878 <__aeabi_cdcmpeq>
 80088b8:	bf94      	ite	ls
 80088ba:	2001      	movls	r0, #1
 80088bc:	2000      	movhi	r0, #0
 80088be:	f85d fb08 	ldr.w	pc, [sp], #8
 80088c2:	bf00      	nop

080088c4 <__aeabi_dcmpge>:
 80088c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088c8:	f7ff ffce 	bl	8008868 <__aeabi_cdrcmple>
 80088cc:	bf94      	ite	ls
 80088ce:	2001      	movls	r0, #1
 80088d0:	2000      	movhi	r0, #0
 80088d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80088d6:	bf00      	nop

080088d8 <__aeabi_dcmpgt>:
 80088d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088dc:	f7ff ffc4 	bl	8008868 <__aeabi_cdrcmple>
 80088e0:	bf34      	ite	cc
 80088e2:	2001      	movcc	r0, #1
 80088e4:	2000      	movcs	r0, #0
 80088e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80088ea:	bf00      	nop

080088ec <__aeabi_dcmpun>:
 80088ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f4:	d102      	bne.n	80088fc <__aeabi_dcmpun+0x10>
 80088f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fa:	d10a      	bne.n	8008912 <__aeabi_dcmpun+0x26>
 80088fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008904:	d102      	bne.n	800890c <__aeabi_dcmpun+0x20>
 8008906:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890a:	d102      	bne.n	8008912 <__aeabi_dcmpun+0x26>
 800890c:	f04f 0000 	mov.w	r0, #0
 8008910:	4770      	bx	lr
 8008912:	f04f 0001 	mov.w	r0, #1
 8008916:	4770      	bx	lr

08008918 <__aeabi_d2iz>:
 8008918:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800891c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008920:	d215      	bcs.n	800894e <__aeabi_d2iz+0x36>
 8008922:	d511      	bpl.n	8008948 <__aeabi_d2iz+0x30>
 8008924:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008928:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800892c:	d912      	bls.n	8008954 <__aeabi_d2iz+0x3c>
 800892e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008936:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800893a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800893e:	fa23 f002 	lsr.w	r0, r3, r2
 8008942:	bf18      	it	ne
 8008944:	4240      	negne	r0, r0
 8008946:	4770      	bx	lr
 8008948:	f04f 0000 	mov.w	r0, #0
 800894c:	4770      	bx	lr
 800894e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008952:	d105      	bne.n	8008960 <__aeabi_d2iz+0x48>
 8008954:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008958:	bf08      	it	eq
 800895a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800895e:	4770      	bx	lr
 8008960:	f04f 0000 	mov.w	r0, #0
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop

08008968 <__aeabi_d2f>:
 8008968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800896c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008970:	bf24      	itt	cs
 8008972:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008976:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800897a:	d90d      	bls.n	8008998 <__aeabi_d2f+0x30>
 800897c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008980:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008984:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008988:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800898c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008990:	bf08      	it	eq
 8008992:	f020 0001 	biceq.w	r0, r0, #1
 8008996:	4770      	bx	lr
 8008998:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800899c:	d121      	bne.n	80089e2 <__aeabi_d2f+0x7a>
 800899e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80089a2:	bfbc      	itt	lt
 80089a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80089a8:	4770      	bxlt	lr
 80089aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80089b2:	f1c2 0218 	rsb	r2, r2, #24
 80089b6:	f1c2 0c20 	rsb	ip, r2, #32
 80089ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80089be:	fa20 f002 	lsr.w	r0, r0, r2
 80089c2:	bf18      	it	ne
 80089c4:	f040 0001 	orrne.w	r0, r0, #1
 80089c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80089d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80089d4:	ea40 000c 	orr.w	r0, r0, ip
 80089d8:	fa23 f302 	lsr.w	r3, r3, r2
 80089dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089e0:	e7cc      	b.n	800897c <__aeabi_d2f+0x14>
 80089e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80089e6:	d107      	bne.n	80089f8 <__aeabi_d2f+0x90>
 80089e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80089ec:	bf1e      	ittt	ne
 80089ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80089f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80089f6:	4770      	bxne	lr
 80089f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80089fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop

08008a08 <__aeabi_uldivmod>:
 8008a08:	b953      	cbnz	r3, 8008a20 <__aeabi_uldivmod+0x18>
 8008a0a:	b94a      	cbnz	r2, 8008a20 <__aeabi_uldivmod+0x18>
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	bf08      	it	eq
 8008a10:	2800      	cmpeq	r0, #0
 8008a12:	bf1c      	itt	ne
 8008a14:	f04f 31ff 	movne.w	r1, #4294967295
 8008a18:	f04f 30ff 	movne.w	r0, #4294967295
 8008a1c:	f000 b972 	b.w	8008d04 <__aeabi_idiv0>
 8008a20:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a28:	f000 f806 	bl	8008a38 <__udivmoddi4>
 8008a2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a34:	b004      	add	sp, #16
 8008a36:	4770      	bx	lr

08008a38 <__udivmoddi4>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	9e08      	ldr	r6, [sp, #32]
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4688      	mov	r8, r1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d14b      	bne.n	8008ade <__udivmoddi4+0xa6>
 8008a46:	428a      	cmp	r2, r1
 8008a48:	4615      	mov	r5, r2
 8008a4a:	d967      	bls.n	8008b1c <__udivmoddi4+0xe4>
 8008a4c:	fab2 f282 	clz	r2, r2
 8008a50:	b14a      	cbz	r2, 8008a66 <__udivmoddi4+0x2e>
 8008a52:	f1c2 0720 	rsb	r7, r2, #32
 8008a56:	fa01 f302 	lsl.w	r3, r1, r2
 8008a5a:	fa20 f707 	lsr.w	r7, r0, r7
 8008a5e:	4095      	lsls	r5, r2
 8008a60:	ea47 0803 	orr.w	r8, r7, r3
 8008a64:	4094      	lsls	r4, r2
 8008a66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008a6a:	0c23      	lsrs	r3, r4, #16
 8008a6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008a70:	fa1f fc85 	uxth.w	ip, r5
 8008a74:	fb0e 8817 	mls	r8, lr, r7, r8
 8008a78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008a7c:	fb07 f10c 	mul.w	r1, r7, ip
 8008a80:	4299      	cmp	r1, r3
 8008a82:	d909      	bls.n	8008a98 <__udivmoddi4+0x60>
 8008a84:	18eb      	adds	r3, r5, r3
 8008a86:	f107 30ff 	add.w	r0, r7, #4294967295
 8008a8a:	f080 811b 	bcs.w	8008cc4 <__udivmoddi4+0x28c>
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	f240 8118 	bls.w	8008cc4 <__udivmoddi4+0x28c>
 8008a94:	3f02      	subs	r7, #2
 8008a96:	442b      	add	r3, r5
 8008a98:	1a5b      	subs	r3, r3, r1
 8008a9a:	b2a4      	uxth	r4, r4
 8008a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8008aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008aa8:	fb00 fc0c 	mul.w	ip, r0, ip
 8008aac:	45a4      	cmp	ip, r4
 8008aae:	d909      	bls.n	8008ac4 <__udivmoddi4+0x8c>
 8008ab0:	192c      	adds	r4, r5, r4
 8008ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ab6:	f080 8107 	bcs.w	8008cc8 <__udivmoddi4+0x290>
 8008aba:	45a4      	cmp	ip, r4
 8008abc:	f240 8104 	bls.w	8008cc8 <__udivmoddi4+0x290>
 8008ac0:	3802      	subs	r0, #2
 8008ac2:	442c      	add	r4, r5
 8008ac4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008ac8:	eba4 040c 	sub.w	r4, r4, ip
 8008acc:	2700      	movs	r7, #0
 8008ace:	b11e      	cbz	r6, 8008ad8 <__udivmoddi4+0xa0>
 8008ad0:	40d4      	lsrs	r4, r2
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e9c6 4300 	strd	r4, r3, [r6]
 8008ad8:	4639      	mov	r1, r7
 8008ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ade:	428b      	cmp	r3, r1
 8008ae0:	d909      	bls.n	8008af6 <__udivmoddi4+0xbe>
 8008ae2:	2e00      	cmp	r6, #0
 8008ae4:	f000 80eb 	beq.w	8008cbe <__udivmoddi4+0x286>
 8008ae8:	2700      	movs	r7, #0
 8008aea:	e9c6 0100 	strd	r0, r1, [r6]
 8008aee:	4638      	mov	r0, r7
 8008af0:	4639      	mov	r1, r7
 8008af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af6:	fab3 f783 	clz	r7, r3
 8008afa:	2f00      	cmp	r7, #0
 8008afc:	d147      	bne.n	8008b8e <__udivmoddi4+0x156>
 8008afe:	428b      	cmp	r3, r1
 8008b00:	d302      	bcc.n	8008b08 <__udivmoddi4+0xd0>
 8008b02:	4282      	cmp	r2, r0
 8008b04:	f200 80fa 	bhi.w	8008cfc <__udivmoddi4+0x2c4>
 8008b08:	1a84      	subs	r4, r0, r2
 8008b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8008b0e:	2001      	movs	r0, #1
 8008b10:	4698      	mov	r8, r3
 8008b12:	2e00      	cmp	r6, #0
 8008b14:	d0e0      	beq.n	8008ad8 <__udivmoddi4+0xa0>
 8008b16:	e9c6 4800 	strd	r4, r8, [r6]
 8008b1a:	e7dd      	b.n	8008ad8 <__udivmoddi4+0xa0>
 8008b1c:	b902      	cbnz	r2, 8008b20 <__udivmoddi4+0xe8>
 8008b1e:	deff      	udf	#255	; 0xff
 8008b20:	fab2 f282 	clz	r2, r2
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	f040 808f 	bne.w	8008c48 <__udivmoddi4+0x210>
 8008b2a:	1b49      	subs	r1, r1, r5
 8008b2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b30:	fa1f f885 	uxth.w	r8, r5
 8008b34:	2701      	movs	r7, #1
 8008b36:	fbb1 fcfe 	udiv	ip, r1, lr
 8008b3a:	0c23      	lsrs	r3, r4, #16
 8008b3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008b40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b44:	fb08 f10c 	mul.w	r1, r8, ip
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	d907      	bls.n	8008b5c <__udivmoddi4+0x124>
 8008b4c:	18eb      	adds	r3, r5, r3
 8008b4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008b52:	d202      	bcs.n	8008b5a <__udivmoddi4+0x122>
 8008b54:	4299      	cmp	r1, r3
 8008b56:	f200 80cd 	bhi.w	8008cf4 <__udivmoddi4+0x2bc>
 8008b5a:	4684      	mov	ip, r0
 8008b5c:	1a59      	subs	r1, r3, r1
 8008b5e:	b2a3      	uxth	r3, r4
 8008b60:	fbb1 f0fe 	udiv	r0, r1, lr
 8008b64:	fb0e 1410 	mls	r4, lr, r0, r1
 8008b68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b6c:	fb08 f800 	mul.w	r8, r8, r0
 8008b70:	45a0      	cmp	r8, r4
 8008b72:	d907      	bls.n	8008b84 <__udivmoddi4+0x14c>
 8008b74:	192c      	adds	r4, r5, r4
 8008b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7a:	d202      	bcs.n	8008b82 <__udivmoddi4+0x14a>
 8008b7c:	45a0      	cmp	r8, r4
 8008b7e:	f200 80b6 	bhi.w	8008cee <__udivmoddi4+0x2b6>
 8008b82:	4618      	mov	r0, r3
 8008b84:	eba4 0408 	sub.w	r4, r4, r8
 8008b88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008b8c:	e79f      	b.n	8008ace <__udivmoddi4+0x96>
 8008b8e:	f1c7 0c20 	rsb	ip, r7, #32
 8008b92:	40bb      	lsls	r3, r7
 8008b94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008b98:	ea4e 0e03 	orr.w	lr, lr, r3
 8008b9c:	fa01 f407 	lsl.w	r4, r1, r7
 8008ba0:	fa20 f50c 	lsr.w	r5, r0, ip
 8008ba4:	fa21 f30c 	lsr.w	r3, r1, ip
 8008ba8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008bac:	4325      	orrs	r5, r4
 8008bae:	fbb3 f9f8 	udiv	r9, r3, r8
 8008bb2:	0c2c      	lsrs	r4, r5, #16
 8008bb4:	fb08 3319 	mls	r3, r8, r9, r3
 8008bb8:	fa1f fa8e 	uxth.w	sl, lr
 8008bbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008bc0:	fb09 f40a 	mul.w	r4, r9, sl
 8008bc4:	429c      	cmp	r4, r3
 8008bc6:	fa02 f207 	lsl.w	r2, r2, r7
 8008bca:	fa00 f107 	lsl.w	r1, r0, r7
 8008bce:	d90b      	bls.n	8008be8 <__udivmoddi4+0x1b0>
 8008bd0:	eb1e 0303 	adds.w	r3, lr, r3
 8008bd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008bd8:	f080 8087 	bcs.w	8008cea <__udivmoddi4+0x2b2>
 8008bdc:	429c      	cmp	r4, r3
 8008bde:	f240 8084 	bls.w	8008cea <__udivmoddi4+0x2b2>
 8008be2:	f1a9 0902 	sub.w	r9, r9, #2
 8008be6:	4473      	add	r3, lr
 8008be8:	1b1b      	subs	r3, r3, r4
 8008bea:	b2ad      	uxth	r5, r5
 8008bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8008bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8008bf4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008bf8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008bfc:	45a2      	cmp	sl, r4
 8008bfe:	d908      	bls.n	8008c12 <__udivmoddi4+0x1da>
 8008c00:	eb1e 0404 	adds.w	r4, lr, r4
 8008c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c08:	d26b      	bcs.n	8008ce2 <__udivmoddi4+0x2aa>
 8008c0a:	45a2      	cmp	sl, r4
 8008c0c:	d969      	bls.n	8008ce2 <__udivmoddi4+0x2aa>
 8008c0e:	3802      	subs	r0, #2
 8008c10:	4474      	add	r4, lr
 8008c12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008c16:	fba0 8902 	umull	r8, r9, r0, r2
 8008c1a:	eba4 040a 	sub.w	r4, r4, sl
 8008c1e:	454c      	cmp	r4, r9
 8008c20:	46c2      	mov	sl, r8
 8008c22:	464b      	mov	r3, r9
 8008c24:	d354      	bcc.n	8008cd0 <__udivmoddi4+0x298>
 8008c26:	d051      	beq.n	8008ccc <__udivmoddi4+0x294>
 8008c28:	2e00      	cmp	r6, #0
 8008c2a:	d069      	beq.n	8008d00 <__udivmoddi4+0x2c8>
 8008c2c:	ebb1 050a 	subs.w	r5, r1, sl
 8008c30:	eb64 0403 	sbc.w	r4, r4, r3
 8008c34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008c38:	40fd      	lsrs	r5, r7
 8008c3a:	40fc      	lsrs	r4, r7
 8008c3c:	ea4c 0505 	orr.w	r5, ip, r5
 8008c40:	e9c6 5400 	strd	r5, r4, [r6]
 8008c44:	2700      	movs	r7, #0
 8008c46:	e747      	b.n	8008ad8 <__udivmoddi4+0xa0>
 8008c48:	f1c2 0320 	rsb	r3, r2, #32
 8008c4c:	fa20 f703 	lsr.w	r7, r0, r3
 8008c50:	4095      	lsls	r5, r2
 8008c52:	fa01 f002 	lsl.w	r0, r1, r2
 8008c56:	fa21 f303 	lsr.w	r3, r1, r3
 8008c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c5e:	4338      	orrs	r0, r7
 8008c60:	0c01      	lsrs	r1, r0, #16
 8008c62:	fbb3 f7fe 	udiv	r7, r3, lr
 8008c66:	fa1f f885 	uxth.w	r8, r5
 8008c6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008c6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c72:	fb07 f308 	mul.w	r3, r7, r8
 8008c76:	428b      	cmp	r3, r1
 8008c78:	fa04 f402 	lsl.w	r4, r4, r2
 8008c7c:	d907      	bls.n	8008c8e <__udivmoddi4+0x256>
 8008c7e:	1869      	adds	r1, r5, r1
 8008c80:	f107 3cff 	add.w	ip, r7, #4294967295
 8008c84:	d22f      	bcs.n	8008ce6 <__udivmoddi4+0x2ae>
 8008c86:	428b      	cmp	r3, r1
 8008c88:	d92d      	bls.n	8008ce6 <__udivmoddi4+0x2ae>
 8008c8a:	3f02      	subs	r7, #2
 8008c8c:	4429      	add	r1, r5
 8008c8e:	1acb      	subs	r3, r1, r3
 8008c90:	b281      	uxth	r1, r0
 8008c92:	fbb3 f0fe 	udiv	r0, r3, lr
 8008c96:	fb0e 3310 	mls	r3, lr, r0, r3
 8008c9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c9e:	fb00 f308 	mul.w	r3, r0, r8
 8008ca2:	428b      	cmp	r3, r1
 8008ca4:	d907      	bls.n	8008cb6 <__udivmoddi4+0x27e>
 8008ca6:	1869      	adds	r1, r5, r1
 8008ca8:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cac:	d217      	bcs.n	8008cde <__udivmoddi4+0x2a6>
 8008cae:	428b      	cmp	r3, r1
 8008cb0:	d915      	bls.n	8008cde <__udivmoddi4+0x2a6>
 8008cb2:	3802      	subs	r0, #2
 8008cb4:	4429      	add	r1, r5
 8008cb6:	1ac9      	subs	r1, r1, r3
 8008cb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008cbc:	e73b      	b.n	8008b36 <__udivmoddi4+0xfe>
 8008cbe:	4637      	mov	r7, r6
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	e709      	b.n	8008ad8 <__udivmoddi4+0xa0>
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	e6e7      	b.n	8008a98 <__udivmoddi4+0x60>
 8008cc8:	4618      	mov	r0, r3
 8008cca:	e6fb      	b.n	8008ac4 <__udivmoddi4+0x8c>
 8008ccc:	4541      	cmp	r1, r8
 8008cce:	d2ab      	bcs.n	8008c28 <__udivmoddi4+0x1f0>
 8008cd0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008cd4:	eb69 020e 	sbc.w	r2, r9, lr
 8008cd8:	3801      	subs	r0, #1
 8008cda:	4613      	mov	r3, r2
 8008cdc:	e7a4      	b.n	8008c28 <__udivmoddi4+0x1f0>
 8008cde:	4660      	mov	r0, ip
 8008ce0:	e7e9      	b.n	8008cb6 <__udivmoddi4+0x27e>
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	e795      	b.n	8008c12 <__udivmoddi4+0x1da>
 8008ce6:	4667      	mov	r7, ip
 8008ce8:	e7d1      	b.n	8008c8e <__udivmoddi4+0x256>
 8008cea:	4681      	mov	r9, r0
 8008cec:	e77c      	b.n	8008be8 <__udivmoddi4+0x1b0>
 8008cee:	3802      	subs	r0, #2
 8008cf0:	442c      	add	r4, r5
 8008cf2:	e747      	b.n	8008b84 <__udivmoddi4+0x14c>
 8008cf4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008cf8:	442b      	add	r3, r5
 8008cfa:	e72f      	b.n	8008b5c <__udivmoddi4+0x124>
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	e708      	b.n	8008b12 <__udivmoddi4+0xda>
 8008d00:	4637      	mov	r7, r6
 8008d02:	e6e9      	b.n	8008ad8 <__udivmoddi4+0xa0>

08008d04 <__aeabi_idiv0>:
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop

08008d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <HAL_Init+0x40>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0d      	ldr	r2, [pc, #52]	; (8008d48 <HAL_Init+0x40>)
 8008d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d18:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <HAL_Init+0x40>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a0a      	ldr	r2, [pc, #40]	; (8008d48 <HAL_Init+0x40>)
 8008d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d24:	4b08      	ldr	r3, [pc, #32]	; (8008d48 <HAL_Init+0x40>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a07      	ldr	r2, [pc, #28]	; (8008d48 <HAL_Init+0x40>)
 8008d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d30:	2003      	movs	r0, #3
 8008d32:	f001 fab5 	bl	800a2a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d36:	2000      	movs	r0, #0
 8008d38:	f000 f808 	bl	8008d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d3c:	f007 fc2c 	bl	8010598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	40023c00 	.word	0x40023c00

08008d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d54:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <HAL_InitTick+0x54>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <HAL_InitTick+0x58>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 facd 	bl	800a30a <HAL_SYSTICK_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e00e      	b.n	8008d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b0f      	cmp	r3, #15
 8008d7e:	d80a      	bhi.n	8008d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d80:	2200      	movs	r2, #0
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	f001 fa95 	bl	800a2b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d8c:	4a06      	ldr	r2, [pc, #24]	; (8008da8 <HAL_InitTick+0x5c>)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e000      	b.n	8008d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20000018 	.word	0x20000018
 8008da4:	20000004 	.word	0x20000004
 8008da8:	20000000 	.word	0x20000000

08008dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008db0:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <HAL_IncTick+0x20>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <HAL_IncTick+0x24>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4413      	add	r3, r2
 8008dbc:	4a04      	ldr	r2, [pc, #16]	; (8008dd0 <HAL_IncTick+0x24>)
 8008dbe:	6013      	str	r3, [r2, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20000004 	.word	0x20000004
 8008dd0:	20000154 	.word	0x20000154

08008dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8008dd8:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <HAL_GetTick+0x14>)
 8008dda:	681b      	ldr	r3, [r3, #0]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20000154 	.word	0x20000154

08008dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008df4:	f7ff ffee 	bl	8008dd4 <HAL_GetTick>
 8008df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d005      	beq.n	8008e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <HAL_Delay+0x40>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e12:	bf00      	nop
 8008e14:	f7ff ffde 	bl	8008dd4 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d8f7      	bhi.n	8008e14 <HAL_Delay+0x28>
  {
  }
}
 8008e24:	bf00      	nop
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000004 	.word	0x20000004

08008e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e033      	b.n	8008eae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f005 ff48 	bl	800ece4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	f003 0310 	and.w	r3, r3, #16
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d118      	bne.n	8008ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e76:	f023 0302 	bic.w	r3, r3, #2
 8008e7a:	f043 0202 	orr.w	r2, r3, #2
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa5a 	bl	800933c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	f023 0303 	bic.w	r3, r3, #3
 8008e96:	f043 0201 	orr.w	r2, r3, #1
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8008e9e:	e001      	b.n	8008ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d101      	bne.n	8008ed6 <HAL_ADC_Start_DMA+0x1e>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e0cc      	b.n	8009070 <HAL_ADC_Start_DMA+0x1b8>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d018      	beq.n	8008f1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0201 	orr.w	r2, r2, #1
 8008efa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008efc:	4b5e      	ldr	r3, [pc, #376]	; (8009078 <HAL_ADC_Start_DMA+0x1c0>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a5e      	ldr	r2, [pc, #376]	; (800907c <HAL_ADC_Start_DMA+0x1c4>)
 8008f02:	fba2 2303 	umull	r2, r3, r2, r3
 8008f06:	0c9a      	lsrs	r2, r3, #18
 8008f08:	4613      	mov	r3, r2
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	4413      	add	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f10:	e002      	b.n	8008f18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1f9      	bne.n	8008f12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	f040 80a0 	bne.w	800906e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6c:	d106      	bne.n	8008f7c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f72:	f023 0206 	bic.w	r2, r3, #6
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	645a      	str	r2, [r3, #68]	; 0x44
 8008f7a:	e002      	b.n	8008f82 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f8a:	4b3d      	ldr	r3, [pc, #244]	; (8009080 <HAL_ADC_Start_DMA+0x1c8>)
 8008f8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	4a3c      	ldr	r2, [pc, #240]	; (8009084 <HAL_ADC_Start_DMA+0x1cc>)
 8008f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	4a3b      	ldr	r2, [pc, #236]	; (8009088 <HAL_ADC_Start_DMA+0x1d0>)
 8008f9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa2:	4a3a      	ldr	r2, [pc, #232]	; (800908c <HAL_ADC_Start_DMA+0x1d4>)
 8008fa4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008fae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fbe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	334c      	adds	r3, #76	; 0x4c
 8008fda:	4619      	mov	r1, r3
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f001 fa4e 	bl	800a480 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d12a      	bne.n	8009046 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a26      	ldr	r2, [pc, #152]	; (8009090 <HAL_ADC_Start_DMA+0x1d8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d015      	beq.n	8009026 <HAL_ADC_Start_DMA+0x16e>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a25      	ldr	r2, [pc, #148]	; (8009094 <HAL_ADC_Start_DMA+0x1dc>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d105      	bne.n	8009010 <HAL_ADC_Start_DMA+0x158>
 8009004:	4b1e      	ldr	r3, [pc, #120]	; (8009080 <HAL_ADC_Start_DMA+0x1c8>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00a      	beq.n	8009026 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a20      	ldr	r2, [pc, #128]	; (8009098 <HAL_ADC_Start_DMA+0x1e0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d129      	bne.n	800906e <HAL_ADC_Start_DMA+0x1b6>
 800901a:	4b19      	ldr	r3, [pc, #100]	; (8009080 <HAL_ADC_Start_DMA+0x1c8>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f003 031f 	and.w	r3, r3, #31
 8009022:	2b0f      	cmp	r3, #15
 8009024:	d823      	bhi.n	800906e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d11c      	bne.n	800906e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009042:	609a      	str	r2, [r3, #8]
 8009044:	e013      	b.n	800906e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a11      	ldr	r2, [pc, #68]	; (8009090 <HAL_ADC_Start_DMA+0x1d8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d10e      	bne.n	800906e <HAL_ADC_Start_DMA+0x1b6>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d107      	bne.n	800906e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800906c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	20000018 	.word	0x20000018
 800907c:	431bde83 	.word	0x431bde83
 8009080:	40012300 	.word	0x40012300
 8009084:	08009535 	.word	0x08009535
 8009088:	080095ef 	.word	0x080095ef
 800908c:	0800960b 	.word	0x0800960b
 8009090:	40012000 	.word	0x40012000
 8009094:	40012100 	.word	0x40012100
 8009098:	40012200 	.word	0x40012200

0800909c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_ADC_ConfigChannel+0x1c>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e113      	b.n	800931c <HAL_ADC_ConfigChannel+0x244>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b09      	cmp	r3, #9
 8009102:	d925      	bls.n	8009150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68d9      	ldr	r1, [r3, #12]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	b29b      	uxth	r3, r3
 8009110:	461a      	mov	r2, r3
 8009112:	4613      	mov	r3, r2
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	4413      	add	r3, r2
 8009118:	3b1e      	subs	r3, #30
 800911a:	2207      	movs	r2, #7
 800911c:	fa02 f303 	lsl.w	r3, r2, r3
 8009120:	43da      	mvns	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	400a      	ands	r2, r1
 8009128:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68d9      	ldr	r1, [r3, #12]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	4618      	mov	r0, r3
 800913c:	4603      	mov	r3, r0
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	4403      	add	r3, r0
 8009142:	3b1e      	subs	r3, #30
 8009144:	409a      	lsls	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	60da      	str	r2, [r3, #12]
 800914e:	e022      	b.n	8009196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6919      	ldr	r1, [r3, #16]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	461a      	mov	r2, r3
 800915e:	4613      	mov	r3, r2
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4413      	add	r3, r2
 8009164:	2207      	movs	r2, #7
 8009166:	fa02 f303 	lsl.w	r3, r2, r3
 800916a:	43da      	mvns	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	400a      	ands	r2, r1
 8009172:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6919      	ldr	r1, [r3, #16]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	4618      	mov	r0, r3
 8009186:	4603      	mov	r3, r0
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	4403      	add	r3, r0
 800918c:	409a      	lsls	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b06      	cmp	r3, #6
 800919c:	d824      	bhi.n	80091e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	3b05      	subs	r3, #5
 80091b0:	221f      	movs	r2, #31
 80091b2:	fa02 f303 	lsl.w	r3, r2, r3
 80091b6:	43da      	mvns	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	400a      	ands	r2, r1
 80091be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	4618      	mov	r0, r3
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	3b05      	subs	r3, #5
 80091da:	fa00 f203 	lsl.w	r2, r0, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	635a      	str	r2, [r3, #52]	; 0x34
 80091e6:	e04c      	b.n	8009282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b0c      	cmp	r3, #12
 80091ee:	d824      	bhi.n	800923a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	3b23      	subs	r3, #35	; 0x23
 8009202:	221f      	movs	r2, #31
 8009204:	fa02 f303 	lsl.w	r3, r2, r3
 8009208:	43da      	mvns	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	400a      	ands	r2, r1
 8009210:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	4618      	mov	r0, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	3b23      	subs	r3, #35	; 0x23
 800922c:	fa00 f203 	lsl.w	r2, r0, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	631a      	str	r2, [r3, #48]	; 0x30
 8009238:	e023      	b.n	8009282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	3b41      	subs	r3, #65	; 0x41
 800924c:	221f      	movs	r2, #31
 800924e:	fa02 f303 	lsl.w	r3, r2, r3
 8009252:	43da      	mvns	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	400a      	ands	r2, r1
 800925a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	b29b      	uxth	r3, r3
 8009268:	4618      	mov	r0, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	3b41      	subs	r3, #65	; 0x41
 8009276:	fa00 f203 	lsl.w	r2, r0, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009282:	4b29      	ldr	r3, [pc, #164]	; (8009328 <HAL_ADC_ConfigChannel+0x250>)
 8009284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a28      	ldr	r2, [pc, #160]	; (800932c <HAL_ADC_ConfigChannel+0x254>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d10f      	bne.n	80092b0 <HAL_ADC_ConfigChannel+0x1d8>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b12      	cmp	r3, #18
 8009296:	d10b      	bne.n	80092b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1d      	ldr	r2, [pc, #116]	; (800932c <HAL_ADC_ConfigChannel+0x254>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d12b      	bne.n	8009312 <HAL_ADC_ConfigChannel+0x23a>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1c      	ldr	r2, [pc, #112]	; (8009330 <HAL_ADC_ConfigChannel+0x258>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d003      	beq.n	80092cc <HAL_ADC_ConfigChannel+0x1f4>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b11      	cmp	r3, #17
 80092ca:	d122      	bne.n	8009312 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a11      	ldr	r2, [pc, #68]	; (8009330 <HAL_ADC_ConfigChannel+0x258>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d111      	bne.n	8009312 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092ee:	4b11      	ldr	r3, [pc, #68]	; (8009334 <HAL_ADC_ConfigChannel+0x25c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a11      	ldr	r2, [pc, #68]	; (8009338 <HAL_ADC_ConfigChannel+0x260>)
 80092f4:	fba2 2303 	umull	r2, r3, r2, r3
 80092f8:	0c9a      	lsrs	r2, r3, #18
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009304:	e002      	b.n	800930c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	3b01      	subs	r3, #1
 800930a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f9      	bne.n	8009306 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	40012300 	.word	0x40012300
 800932c:	40012000 	.word	0x40012000
 8009330:	10000012 	.word	0x10000012
 8009334:	20000018 	.word	0x20000018
 8009338:	431bde83 	.word	0x431bde83

0800933c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009344:	4b79      	ldr	r3, [pc, #484]	; (800952c <ADC_Init+0x1f0>)
 8009346:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	431a      	orrs	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6859      	ldr	r1, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	021a      	lsls	r2, r3, #8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	430a      	orrs	r2, r1
 80093a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6899      	ldr	r1, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	4a58      	ldr	r2, [pc, #352]	; (8009530 <ADC_Init+0x1f4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d022      	beq.n	800941a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6899      	ldr	r1, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6899      	ldr	r1, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	609a      	str	r2, [r3, #8]
 8009418:	e00f      	b.n	800943a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009438:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0202 	bic.w	r2, r2, #2
 8009448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6899      	ldr	r1, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	7e1b      	ldrb	r3, [r3, #24]
 8009454:	005a      	lsls	r2, r3, #1
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01b      	beq.n	80094a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009476:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6859      	ldr	r1, [r3, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	3b01      	subs	r3, #1
 8009494:	035a      	lsls	r2, r3, #13
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	e007      	b.n	80094b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80094be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	051a      	lsls	r2, r3, #20
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6899      	ldr	r1, [r3, #8]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094f2:	025a      	lsls	r2, r3, #9
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689a      	ldr	r2, [r3, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800950a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6899      	ldr	r1, [r3, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	029a      	lsls	r2, r3, #10
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	609a      	str	r2, [r3, #8]
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	40012300 	.word	0x40012300
 8009530:	0f000001 	.word	0x0f000001

08009534 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800954a:	2b00      	cmp	r3, #0
 800954c:	d13c      	bne.n	80095c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d12b      	bne.n	80095c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800956c:	2b00      	cmp	r3, #0
 800956e:	d127      	bne.n	80095c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800957a:	2b00      	cmp	r3, #0
 800957c:	d006      	beq.n	800958c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009588:	2b00      	cmp	r3, #0
 800958a:	d119      	bne.n	80095c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0220 	bic.w	r2, r2, #32
 800959a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d105      	bne.n	80095c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	f043 0201 	orr.w	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff fd6b 	bl	800909c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095c6:	e00e      	b.n	80095e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095cc:	f003 0310 	and.w	r3, r3, #16
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff fd75 	bl	80090c4 <HAL_ADC_ErrorCallback>
}
 80095da:	e004      	b.n	80095e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f7ff fd57 	bl	80090b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2240      	movs	r2, #64	; 0x40
 800961c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009622:	f043 0204 	orr.w	r2, r3, #4
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff fd4a 	bl	80090c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e0ed      	b.n	8009826 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d102      	bne.n	800965c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f005 fcda 	bl	800f010 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0202 	bic.w	r2, r2, #2
 800966a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800966c:	f7ff fbb2 	bl	8008dd4 <HAL_GetTick>
 8009670:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009672:	e012      	b.n	800969a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009674:	f7ff fbae 	bl	8008dd4 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b0a      	cmp	r3, #10
 8009680:	d90b      	bls.n	800969a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2205      	movs	r2, #5
 8009692:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e0c5      	b.n	8009826 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e5      	bne.n	8009674 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f042 0201 	orr.w	r2, r2, #1
 80096b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096b8:	f7ff fb8c 	bl	8008dd4 <HAL_GetTick>
 80096bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80096be:	e012      	b.n	80096e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096c0:	f7ff fb88 	bl	8008dd4 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b0a      	cmp	r3, #10
 80096cc:	d90b      	bls.n	80096e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2205      	movs	r2, #5
 80096de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e09f      	b.n	8009826 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d0e5      	beq.n	80096c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	7e1b      	ldrb	r3, [r3, #24]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d108      	bne.n	800970e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	e007      	b.n	800971e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800971c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	7e5b      	ldrb	r3, [r3, #25]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d108      	bne.n	8009738 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	e007      	b.n	8009748 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009746:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7e9b      	ldrb	r3, [r3, #26]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d108      	bne.n	8009762 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f042 0220 	orr.w	r2, r2, #32
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	e007      	b.n	8009772 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0220 	bic.w	r2, r2, #32
 8009770:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	7edb      	ldrb	r3, [r3, #27]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d108      	bne.n	800978c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0210 	bic.w	r2, r2, #16
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	e007      	b.n	800979c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f042 0210 	orr.w	r2, r2, #16
 800979a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	7f1b      	ldrb	r3, [r3, #28]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d108      	bne.n	80097b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0208 	orr.w	r2, r2, #8
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	e007      	b.n	80097c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0208 	bic.w	r2, r2, #8
 80097c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	7f5b      	ldrb	r3, [r3, #29]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d108      	bne.n	80097e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f042 0204 	orr.w	r2, r2, #4
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	e007      	b.n	80097f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0204 	bic.w	r2, r2, #4
 80097ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	ea42 0103 	orr.w	r1, r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	1e5a      	subs	r2, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009846:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009848:	7cfb      	ldrb	r3, [r7, #19]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d003      	beq.n	8009856 <HAL_CAN_ConfigFilter+0x26>
 800984e:	7cfb      	ldrb	r3, [r7, #19]
 8009850:	2b02      	cmp	r3, #2
 8009852:	f040 80be 	bne.w	80099d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009856:	4b65      	ldr	r3, [pc, #404]	; (80099ec <HAL_CAN_ConfigFilter+0x1bc>)
 8009858:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009860:	f043 0201 	orr.w	r2, r3, #1
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009870:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	431a      	orrs	r2, r3
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f003 031f 	and.w	r3, r3, #31
 8009896:	2201      	movs	r2, #1
 8009898:	fa02 f303 	lsl.w	r3, r2, r3
 800989c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	43db      	mvns	r3, r3
 80098a8:	401a      	ands	r2, r3
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d123      	bne.n	8009900 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	43db      	mvns	r3, r3
 80098c2:	401a      	ands	r2, r3
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	3248      	adds	r2, #72	; 0x48
 80098e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80098f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80098f6:	6979      	ldr	r1, [r7, #20]
 80098f8:	3348      	adds	r3, #72	; 0x48
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	440b      	add	r3, r1
 80098fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d122      	bne.n	800994e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	431a      	orrs	r2, r3
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009928:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	3248      	adds	r2, #72	; 0x48
 800992e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009942:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009944:	6979      	ldr	r1, [r7, #20]
 8009946:	3348      	adds	r3, #72	; 0x48
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	440b      	add	r3, r1
 800994c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d109      	bne.n	800996a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	43db      	mvns	r3, r3
 8009960:	401a      	ands	r2, r3
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009968:	e007      	b.n	800997a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	431a      	orrs	r2, r3
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	43db      	mvns	r3, r3
 800998c:	401a      	ands	r2, r3
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009994:	e007      	b.n	80099a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	431a      	orrs	r2, r3
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d107      	bne.n	80099be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	431a      	orrs	r2, r3
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099c4:	f023 0201 	bic.w	r2, r3, #1
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e006      	b.n	80099e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
  }
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	40006400 	.word	0x40006400

080099f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d12e      	bne.n	8009a62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0201 	bic.w	r2, r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a1c:	f7ff f9da 	bl	8008dd4 <HAL_GetTick>
 8009a20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a22:	e012      	b.n	8009a4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a24:	f7ff f9d6 	bl	8008dd4 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2b0a      	cmp	r3, #10
 8009a30:	d90b      	bls.n	8009a4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2205      	movs	r2, #5
 8009a42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e012      	b.n	8009a70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e5      	bne.n	8009a24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e006      	b.n	8009a70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
  }
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a8c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d003      	beq.n	8009a9c <HAL_CAN_GetRxMessage+0x24>
 8009a94:	7dfb      	ldrb	r3, [r7, #23]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	f040 80f4 	bne.w	8009c84 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10e      	bne.n	8009ac0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f003 0303 	and.w	r3, r3, #3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d116      	bne.n	8009ade <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e0e8      	b.n	8009c92 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f003 0303 	and.w	r3, r3, #3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d107      	bne.n	8009ade <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e0d9      	b.n	8009c92 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	331b      	adds	r3, #27
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	4413      	add	r3, r2
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0204 	and.w	r2, r3, #4
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10c      	bne.n	8009b16 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	331b      	adds	r3, #27
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	4413      	add	r3, r2
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	0d5b      	lsrs	r3, r3, #21
 8009b0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	e00b      	b.n	8009b2e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	331b      	adds	r3, #27
 8009b1e:	011b      	lsls	r3, r3, #4
 8009b20:	4413      	add	r3, r2
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	08db      	lsrs	r3, r3, #3
 8009b26:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	331b      	adds	r3, #27
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	4413      	add	r3, r2
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	085b      	lsrs	r3, r3, #1
 8009b3e:	f003 0201 	and.w	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	331b      	adds	r3, #27
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	4413      	add	r3, r2
 8009b52:	3304      	adds	r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 020f 	and.w	r2, r3, #15
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	331b      	adds	r3, #27
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	4413      	add	r3, r2
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	0a1b      	lsrs	r3, r3, #8
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	331b      	adds	r3, #27
 8009b7e:	011b      	lsls	r3, r3, #4
 8009b80:	4413      	add	r3, r2
 8009b82:	3304      	adds	r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	0c1b      	lsrs	r3, r3, #16
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	0a1a      	lsrs	r2, r3, #8
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	0c1a      	lsrs	r2, r3, #16
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	3302      	adds	r3, #2
 8009bd4:	b2d2      	uxtb	r2, r2
 8009bd6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	0e1a      	lsrs	r2, r3, #24
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	3303      	adds	r3, #3
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	3304      	adds	r3, #4
 8009c06:	b2d2      	uxtb	r2, r2
 8009c08:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	011b      	lsls	r3, r3, #4
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	0a1a      	lsrs	r2, r3, #8
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3305      	adds	r3, #5
 8009c20:	b2d2      	uxtb	r2, r2
 8009c22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	0c1a      	lsrs	r2, r3, #16
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	3306      	adds	r3, #6
 8009c3a:	b2d2      	uxtb	r2, r2
 8009c3c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	0e1a      	lsrs	r2, r3, #24
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	3307      	adds	r3, #7
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d108      	bne.n	8009c70 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68da      	ldr	r2, [r3, #12]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 0220 	orr.w	r2, r2, #32
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	e007      	b.n	8009c80 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691a      	ldr	r2, [r3, #16]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0220 	orr.w	r2, r2, #32
 8009c7e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e006      	b.n	8009c92 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d002      	beq.n	8009cbc <HAL_CAN_ActivateNotification+0x1e>
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d109      	bne.n	8009cd0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6959      	ldr	r1, [r3, #20]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	e006      	b.n	8009cde <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
  }
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b08a      	sub	sp, #40	; 0x28
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d07c      	beq.n	8009e2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d023      	beq.n	8009d82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f005 fa45 	bl	800f1dc <HAL_CAN_TxMailbox0CompleteCallback>
 8009d52:	e016      	b.n	8009d82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f003 0304 	and.w	r3, r3, #4
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d64:	627b      	str	r3, [r7, #36]	; 0x24
 8009d66:	e00c      	b.n	8009d82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d004      	beq.n	8009d7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d78:	627b      	str	r3, [r7, #36]	; 0x24
 8009d7a:	e002      	b.n	8009d82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f965 	bl	800a04c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d024      	beq.n	8009dd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f005 fa2b 	bl	800f1fc <HAL_CAN_TxMailbox1CompleteCallback>
 8009da6:	e016      	b.n	8009dd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d004      	beq.n	8009dbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dba:	e00c      	b.n	8009dd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d004      	beq.n	8009dd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dce:	e002      	b.n	8009dd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f945 	bl	800a060 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d024      	beq.n	8009e2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009de8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f005 fa11 	bl	800f21c <HAL_CAN_TxMailbox2CompleteCallback>
 8009dfa:	e016      	b.n	8009e2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d004      	beq.n	8009e10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e0e:	e00c      	b.n	8009e2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
 8009e22:	e002      	b.n	8009e2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f925 	bl	800a074 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00c      	beq.n	8009e4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2210      	movs	r2, #16
 8009e4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d006      	beq.n	8009e70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2208      	movs	r2, #8
 8009e68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f90c 	bl	800a088 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d009      	beq.n	8009e8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f005 f9d7 	bl	800f23c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2210      	movs	r2, #16
 8009eb0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	f003 0320 	and.w	r3, r3, #32
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2208      	movs	r2, #8
 8009ecc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f8ee 	bl	800a0b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d009      	beq.n	8009ef2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	f003 0303 	and.w	r3, r3, #3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f8d5 	bl	800a09c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2210      	movs	r2, #16
 8009f0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f8d8 	bl	800a0c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00b      	beq.n	8009f36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	f003 0308 	and.w	r3, r3, #8
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d006      	beq.n	8009f36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f8d1 	bl	800a0d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d075      	beq.n	800a02c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f003 0304 	and.w	r3, r3, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d06c      	beq.n	800a024 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d008      	beq.n	8009f66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	f043 0301 	orr.w	r3, r3, #1
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	f043 0302 	orr.w	r3, r3, #2
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	f043 0304 	orr.w	r3, r3, #4
 8009f9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d03d      	beq.n	800a024 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d038      	beq.n	800a024 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fb8:	2b30      	cmp	r3, #48	; 0x30
 8009fba:	d017      	beq.n	8009fec <HAL_CAN_IRQHandler+0x302>
 8009fbc:	2b30      	cmp	r3, #48	; 0x30
 8009fbe:	d804      	bhi.n	8009fca <HAL_CAN_IRQHandler+0x2e0>
 8009fc0:	2b10      	cmp	r3, #16
 8009fc2:	d009      	beq.n	8009fd8 <HAL_CAN_IRQHandler+0x2ee>
 8009fc4:	2b20      	cmp	r3, #32
 8009fc6:	d00c      	beq.n	8009fe2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009fc8:	e024      	b.n	800a014 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009fca:	2b50      	cmp	r3, #80	; 0x50
 8009fcc:	d018      	beq.n	800a000 <HAL_CAN_IRQHandler+0x316>
 8009fce:	2b60      	cmp	r3, #96	; 0x60
 8009fd0:	d01b      	beq.n	800a00a <HAL_CAN_IRQHandler+0x320>
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	d00f      	beq.n	8009ff6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009fd6:	e01d      	b.n	800a014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	f043 0308 	orr.w	r3, r3, #8
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009fe0:	e018      	b.n	800a014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	f043 0310 	orr.w	r3, r3, #16
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009fea:	e013      	b.n	800a014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	f043 0320 	orr.w	r3, r3, #32
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ff4:	e00e      	b.n	800a014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ffe:	e009      	b.n	800a014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a008:	e004      	b.n	800a014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a012:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699a      	ldr	r2, [r3, #24]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a022:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2204      	movs	r2, #4
 800a02a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d008      	beq.n	800a044 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	431a      	orrs	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f854 	bl	800a0ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a044:	bf00      	nop
 800a046:	3728      	adds	r7, #40	; 0x28
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a110:	4b0c      	ldr	r3, [pc, #48]	; (800a144 <__NVIC_SetPriorityGrouping+0x44>)
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a11c:	4013      	ands	r3, r2
 800a11e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a12c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a132:	4a04      	ldr	r2, [pc, #16]	; (800a144 <__NVIC_SetPriorityGrouping+0x44>)
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	60d3      	str	r3, [r2, #12]
}
 800a138:	bf00      	nop
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	e000ed00 	.word	0xe000ed00

0800a148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a148:	b480      	push	{r7}
 800a14a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <__NVIC_GetPriorityGrouping+0x18>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	0a1b      	lsrs	r3, r3, #8
 800a152:	f003 0307 	and.w	r3, r3, #7
}
 800a156:	4618      	mov	r0, r3
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	e000ed00 	.word	0xe000ed00

0800a164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a16e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a172:	2b00      	cmp	r3, #0
 800a174:	db0b      	blt.n	800a18e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a176:	79fb      	ldrb	r3, [r7, #7]
 800a178:	f003 021f 	and.w	r2, r3, #31
 800a17c:	4907      	ldr	r1, [pc, #28]	; (800a19c <__NVIC_EnableIRQ+0x38>)
 800a17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a182:	095b      	lsrs	r3, r3, #5
 800a184:	2001      	movs	r0, #1
 800a186:	fa00 f202 	lsl.w	r2, r0, r2
 800a18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a18e:	bf00      	nop
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	e000e100 	.word	0xe000e100

0800a1a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	6039      	str	r1, [r7, #0]
 800a1aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	db0a      	blt.n	800a1ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	490c      	ldr	r1, [pc, #48]	; (800a1ec <__NVIC_SetPriority+0x4c>)
 800a1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1be:	0112      	lsls	r2, r2, #4
 800a1c0:	b2d2      	uxtb	r2, r2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1c8:	e00a      	b.n	800a1e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	4908      	ldr	r1, [pc, #32]	; (800a1f0 <__NVIC_SetPriority+0x50>)
 800a1d0:	79fb      	ldrb	r3, [r7, #7]
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	3b04      	subs	r3, #4
 800a1d8:	0112      	lsls	r2, r2, #4
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	440b      	add	r3, r1
 800a1de:	761a      	strb	r2, [r3, #24]
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	e000e100 	.word	0xe000e100
 800a1f0:	e000ed00 	.word	0xe000ed00

0800a1f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b089      	sub	sp, #36	; 0x24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f003 0307 	and.w	r3, r3, #7
 800a206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	f1c3 0307 	rsb	r3, r3, #7
 800a20e:	2b04      	cmp	r3, #4
 800a210:	bf28      	it	cs
 800a212:	2304      	movcs	r3, #4
 800a214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	3304      	adds	r3, #4
 800a21a:	2b06      	cmp	r3, #6
 800a21c:	d902      	bls.n	800a224 <NVIC_EncodePriority+0x30>
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	3b03      	subs	r3, #3
 800a222:	e000      	b.n	800a226 <NVIC_EncodePriority+0x32>
 800a224:	2300      	movs	r3, #0
 800a226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a228:	f04f 32ff 	mov.w	r2, #4294967295
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	43da      	mvns	r2, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	401a      	ands	r2, r3
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a23c:	f04f 31ff 	mov.w	r1, #4294967295
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	fa01 f303 	lsl.w	r3, r1, r3
 800a246:	43d9      	mvns	r1, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a24c:	4313      	orrs	r3, r2
         );
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3724      	adds	r7, #36	; 0x24
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
	...

0800a25c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3b01      	subs	r3, #1
 800a268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a26c:	d301      	bcc.n	800a272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a26e:	2301      	movs	r3, #1
 800a270:	e00f      	b.n	800a292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a272:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <SysTick_Config+0x40>)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3b01      	subs	r3, #1
 800a278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a27a:	210f      	movs	r1, #15
 800a27c:	f04f 30ff 	mov.w	r0, #4294967295
 800a280:	f7ff ff8e 	bl	800a1a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <SysTick_Config+0x40>)
 800a286:	2200      	movs	r2, #0
 800a288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a28a:	4b04      	ldr	r3, [pc, #16]	; (800a29c <SysTick_Config+0x40>)
 800a28c:	2207      	movs	r2, #7
 800a28e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	e000e010 	.word	0xe000e010

0800a2a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff ff29 	bl	800a100 <__NVIC_SetPriorityGrouping>
}
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	4603      	mov	r3, r0
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2c8:	f7ff ff3e 	bl	800a148 <__NVIC_GetPriorityGrouping>
 800a2cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	f7ff ff8e 	bl	800a1f4 <NVIC_EncodePriority>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff ff5d 	bl	800a1a0 <__NVIC_SetPriority>
}
 800a2e6:	bf00      	nop
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a2f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff ff31 	bl	800a164 <__NVIC_EnableIRQ>
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff ffa2 	bl	800a25c <SysTick_Config>
 800a318:	4603      	mov	r3, r0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a32c:	2300      	movs	r3, #0
 800a32e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a330:	f7fe fd50 	bl	8008dd4 <HAL_GetTick>
 800a334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e099      	b.n	800a474 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0201 	bic.w	r2, r2, #1
 800a35e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a360:	e00f      	b.n	800a382 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a362:	f7fe fd37 	bl	8008dd4 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	d908      	bls.n	800a382 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2220      	movs	r2, #32
 800a374:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2203      	movs	r2, #3
 800a37a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e078      	b.n	800a474 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e8      	bne.n	800a362 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	4b38      	ldr	r3, [pc, #224]	; (800a47c <HAL_DMA_Init+0x158>)
 800a39c:	4013      	ands	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d107      	bne.n	800a3ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f023 0307 	bic.w	r3, r3, #7
 800a402:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	2b04      	cmp	r3, #4
 800a414:	d117      	bne.n	800a446 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00e      	beq.n	800a446 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa99 	bl	800a960 <DMA_CheckFifoParam>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d008      	beq.n	800a446 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2240      	movs	r2, #64	; 0x40
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a442:	2301      	movs	r3, #1
 800a444:	e016      	b.n	800a474 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fa50 	bl	800a8f4 <DMA_CalcBaseAndBitshift>
 800a454:	4603      	mov	r3, r0
 800a456:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45c:	223f      	movs	r2, #63	; 0x3f
 800a45e:	409a      	lsls	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	f010803f 	.word	0xf010803f

0800a480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a496:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d101      	bne.n	800a4a6 <HAL_DMA_Start_IT+0x26>
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	e048      	b.n	800a538 <HAL_DMA_Start_IT+0xb8>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d137      	bne.n	800a52a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 f9e2 	bl	800a898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d8:	223f      	movs	r2, #63	; 0x3f
 800a4da:	409a      	lsls	r2, r3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0216 	orr.w	r2, r2, #22
 800a4ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	695a      	ldr	r2, [r3, #20]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	d007      	beq.n	800a518 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0208 	orr.w	r2, r2, #8
 800a516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0201 	orr.w	r2, r2, #1
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	e005      	b.n	800a536 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a532:	2302      	movs	r3, #2
 800a534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a536:	7dfb      	ldrb	r3, [r7, #23]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b02      	cmp	r3, #2
 800a552:	d004      	beq.n	800a55e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2280      	movs	r2, #128	; 0x80
 800a558:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e00c      	b.n	800a578 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2205      	movs	r2, #5
 800a562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 0201 	bic.w	r2, r2, #1
 800a574:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a590:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <HAL_DMA_IRQHandler+0x258>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a92      	ldr	r2, [pc, #584]	; (800a7e0 <HAL_DMA_IRQHandler+0x25c>)
 800a596:	fba2 2303 	umull	r2, r3, r2, r3
 800a59a:	0a9b      	lsrs	r3, r3, #10
 800a59c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ae:	2208      	movs	r2, #8
 800a5b0:	409a      	lsls	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01a      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d013      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f022 0204 	bic.w	r2, r2, #4
 800a5d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5dc:	2208      	movs	r2, #8
 800a5de:	409a      	lsls	r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e8:	f043 0201 	orr.w	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	409a      	lsls	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d012      	beq.n	800a626 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a612:	2201      	movs	r2, #1
 800a614:	409a      	lsls	r2, r3
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	f043 0202 	orr.w	r2, r3, #2
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62a:	2204      	movs	r2, #4
 800a62c:	409a      	lsls	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4013      	ands	r3, r2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d012      	beq.n	800a65c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00b      	beq.n	800a65c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a648:	2204      	movs	r2, #4
 800a64a:	409a      	lsls	r2, r3
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a654:	f043 0204 	orr.w	r2, r3, #4
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a660:	2210      	movs	r2, #16
 800a662:	409a      	lsls	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d043      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	2b00      	cmp	r3, #0
 800a678:	d03c      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67e:	2210      	movs	r2, #16
 800a680:	409a      	lsls	r2, r3
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d018      	beq.n	800a6c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d108      	bne.n	800a6b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d024      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
 800a6b2:	e01f      	b.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01b      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
 800a6c4:	e016      	b.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d107      	bne.n	800a6e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0208 	bic.w	r2, r2, #8
 800a6e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	409a      	lsls	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4013      	ands	r3, r2
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 808e 	beq.w	800a822 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 8086 	beq.w	800a822 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71a:	2220      	movs	r2, #32
 800a71c:	409a      	lsls	r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	d136      	bne.n	800a79c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0216 	bic.w	r2, r2, #22
 800a73c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695a      	ldr	r2, [r3, #20]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a74c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d103      	bne.n	800a75e <HAL_DMA_IRQHandler+0x1da>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0208 	bic.w	r2, r2, #8
 800a76c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a772:	223f      	movs	r2, #63	; 0x3f
 800a774:	409a      	lsls	r2, r3
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d07d      	beq.n	800a88e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
        }
        return;
 800a79a:	e078      	b.n	800a88e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d01c      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d108      	bne.n	800a7ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d030      	beq.n	800a822 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
 800a7c8:	e02b      	b.n	800a822 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d027      	beq.n	800a822 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	e022      	b.n	800a822 <HAL_DMA_IRQHandler+0x29e>
 800a7dc:	20000018 	.word	0x20000018
 800a7e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10f      	bne.n	800a812 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0210 	bic.w	r2, r2, #16
 800a800:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a826:	2b00      	cmp	r3, #0
 800a828:	d032      	beq.n	800a890 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d022      	beq.n	800a87c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2205      	movs	r2, #5
 800a83a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 0201 	bic.w	r2, r2, #1
 800a84c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	3301      	adds	r3, #1
 800a852:	60bb      	str	r3, [r7, #8]
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	429a      	cmp	r2, r3
 800a858:	d307      	bcc.n	800a86a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1f2      	bne.n	800a84e <HAL_DMA_IRQHandler+0x2ca>
 800a868:	e000      	b.n	800a86c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a86a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	4798      	blx	r3
 800a88c:	e000      	b.n	800a890 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a88e:	bf00      	nop
    }
  }
}
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop

0800a898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	2b40      	cmp	r3, #64	; 0x40
 800a8c4:	d108      	bne.n	800a8d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a8d6:	e007      	b.n	800a8e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	60da      	str	r2, [r3, #12]
}
 800a8e8:	bf00      	nop
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	3b10      	subs	r3, #16
 800a904:	4a14      	ldr	r2, [pc, #80]	; (800a958 <DMA_CalcBaseAndBitshift+0x64>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	091b      	lsrs	r3, r3, #4
 800a90c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a90e:	4a13      	ldr	r2, [pc, #76]	; (800a95c <DMA_CalcBaseAndBitshift+0x68>)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d909      	bls.n	800a936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	1d1a      	adds	r2, r3, #4
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	659a      	str	r2, [r3, #88]	; 0x58
 800a934:	e007      	b.n	800a946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	aaaaaaab 	.word	0xaaaaaaab
 800a95c:	08011b50 	.word	0x08011b50

0800a960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d11f      	bne.n	800a9ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d855      	bhi.n	800aa2c <DMA_CheckFifoParam+0xcc>
 800a980:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <DMA_CheckFifoParam+0x28>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800a999 	.word	0x0800a999
 800a98c:	0800a9ab 	.word	0x0800a9ab
 800a990:	0800a999 	.word	0x0800a999
 800a994:	0800aa2d 	.word	0x0800aa2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d045      	beq.n	800aa30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9a8:	e042      	b.n	800aa30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9b2:	d13f      	bne.n	800aa34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9b8:	e03c      	b.n	800aa34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9c2:	d121      	bne.n	800aa08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d836      	bhi.n	800aa38 <DMA_CheckFifoParam+0xd8>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <DMA_CheckFifoParam+0x70>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800a9e1 	.word	0x0800a9e1
 800a9d4:	0800a9e7 	.word	0x0800a9e7
 800a9d8:	0800a9e1 	.word	0x0800a9e1
 800a9dc:	0800a9f9 	.word	0x0800a9f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e4:	e02f      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d024      	beq.n	800aa3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9f6:	e021      	b.n	800aa3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa00:	d11e      	bne.n	800aa40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa06:	e01b      	b.n	800aa40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d902      	bls.n	800aa14 <DMA_CheckFifoParam+0xb4>
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d003      	beq.n	800aa1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa12:	e018      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	73fb      	strb	r3, [r7, #15]
      break;
 800aa18:	e015      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	73fb      	strb	r3, [r7, #15]
      break;
 800aa2a:	e00b      	b.n	800aa44 <DMA_CheckFifoParam+0xe4>
      break;
 800aa2c:	bf00      	nop
 800aa2e:	e00a      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      break;
 800aa30:	bf00      	nop
 800aa32:	e008      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      break;
 800aa34:	bf00      	nop
 800aa36:	e006      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      break;
 800aa38:	bf00      	nop
 800aa3a:	e004      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      break;
 800aa3c:	bf00      	nop
 800aa3e:	e002      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      break;   
 800aa40:	bf00      	nop
 800aa42:	e000      	b.n	800aa46 <DMA_CheckFifoParam+0xe6>
      break;
 800aa44:	bf00      	nop
    }
  } 
  
  return status; 
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b089      	sub	sp, #36	; 0x24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	61fb      	str	r3, [r7, #28]
 800aa6e:	e165      	b.n	800ad3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aa70:	2201      	movs	r2, #1
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	fa02 f303 	lsl.w	r3, r2, r3
 800aa78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	4013      	ands	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	f040 8154 	bne.w	800ad36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d003      	beq.n	800aa9e <HAL_GPIO_Init+0x4a>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2b12      	cmp	r3, #18
 800aa9c:	d123      	bne.n	800aae6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	08da      	lsrs	r2, r3, #3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3208      	adds	r2, #8
 800aaa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f003 0307 	and.w	r3, r3, #7
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	220f      	movs	r2, #15
 800aab6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaba:	43db      	mvns	r3, r3
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	4013      	ands	r3, r2
 800aac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	691a      	ldr	r2, [r3, #16]
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	f003 0307 	and.w	r3, r3, #7
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	fa02 f303 	lsl.w	r3, r2, r3
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	08da      	lsrs	r2, r3, #3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3208      	adds	r2, #8
 800aae0:	69b9      	ldr	r1, [r7, #24]
 800aae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	2203      	movs	r2, #3
 800aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf6:	43db      	mvns	r3, r3
 800aaf8:	69ba      	ldr	r2, [r7, #24]
 800aafa:	4013      	ands	r3, r2
 800aafc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f003 0203 	and.w	r2, r3, #3
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0e:	69ba      	ldr	r2, [r7, #24]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	69ba      	ldr	r2, [r7, #24]
 800ab18:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d00b      	beq.n	800ab3a <HAL_GPIO_Init+0xe6>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d007      	beq.n	800ab3a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab2e:	2b11      	cmp	r3, #17
 800ab30:	d003      	beq.n	800ab3a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	2b12      	cmp	r3, #18
 800ab38:	d130      	bne.n	800ab9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	2203      	movs	r2, #3
 800ab46:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4a:	43db      	mvns	r3, r3
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	68da      	ldr	r2, [r3, #12]
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab70:	2201      	movs	r2, #1
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	fa02 f303 	lsl.w	r3, r2, r3
 800ab78:	43db      	mvns	r3, r3
 800ab7a:	69ba      	ldr	r2, [r7, #24]
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	091b      	lsrs	r3, r3, #4
 800ab86:	f003 0201 	and.w	r2, r3, #1
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69ba      	ldr	r2, [r7, #24]
 800ab9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	2203      	movs	r2, #3
 800aba8:	fa02 f303 	lsl.w	r3, r2, r3
 800abac:	43db      	mvns	r3, r3
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	4013      	ands	r3, r2
 800abb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	689a      	ldr	r2, [r3, #8]
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	fa02 f303 	lsl.w	r3, r2, r3
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 80ae 	beq.w	800ad36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	4b5c      	ldr	r3, [pc, #368]	; (800ad50 <HAL_GPIO_Init+0x2fc>)
 800abe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe2:	4a5b      	ldr	r2, [pc, #364]	; (800ad50 <HAL_GPIO_Init+0x2fc>)
 800abe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abe8:	6453      	str	r3, [r2, #68]	; 0x44
 800abea:	4b59      	ldr	r3, [pc, #356]	; (800ad50 <HAL_GPIO_Init+0x2fc>)
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800abf6:	4a57      	ldr	r2, [pc, #348]	; (800ad54 <HAL_GPIO_Init+0x300>)
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	089b      	lsrs	r3, r3, #2
 800abfc:	3302      	adds	r3, #2
 800abfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	220f      	movs	r2, #15
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	43db      	mvns	r3, r3
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	4013      	ands	r3, r2
 800ac18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a4e      	ldr	r2, [pc, #312]	; (800ad58 <HAL_GPIO_Init+0x304>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d025      	beq.n	800ac6e <HAL_GPIO_Init+0x21a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a4d      	ldr	r2, [pc, #308]	; (800ad5c <HAL_GPIO_Init+0x308>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d01f      	beq.n	800ac6a <HAL_GPIO_Init+0x216>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a4c      	ldr	r2, [pc, #304]	; (800ad60 <HAL_GPIO_Init+0x30c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d019      	beq.n	800ac66 <HAL_GPIO_Init+0x212>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a4b      	ldr	r2, [pc, #300]	; (800ad64 <HAL_GPIO_Init+0x310>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d013      	beq.n	800ac62 <HAL_GPIO_Init+0x20e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a4a      	ldr	r2, [pc, #296]	; (800ad68 <HAL_GPIO_Init+0x314>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d00d      	beq.n	800ac5e <HAL_GPIO_Init+0x20a>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a49      	ldr	r2, [pc, #292]	; (800ad6c <HAL_GPIO_Init+0x318>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d007      	beq.n	800ac5a <HAL_GPIO_Init+0x206>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a48      	ldr	r2, [pc, #288]	; (800ad70 <HAL_GPIO_Init+0x31c>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d101      	bne.n	800ac56 <HAL_GPIO_Init+0x202>
 800ac52:	2306      	movs	r3, #6
 800ac54:	e00c      	b.n	800ac70 <HAL_GPIO_Init+0x21c>
 800ac56:	2307      	movs	r3, #7
 800ac58:	e00a      	b.n	800ac70 <HAL_GPIO_Init+0x21c>
 800ac5a:	2305      	movs	r3, #5
 800ac5c:	e008      	b.n	800ac70 <HAL_GPIO_Init+0x21c>
 800ac5e:	2304      	movs	r3, #4
 800ac60:	e006      	b.n	800ac70 <HAL_GPIO_Init+0x21c>
 800ac62:	2303      	movs	r3, #3
 800ac64:	e004      	b.n	800ac70 <HAL_GPIO_Init+0x21c>
 800ac66:	2302      	movs	r3, #2
 800ac68:	e002      	b.n	800ac70 <HAL_GPIO_Init+0x21c>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <HAL_GPIO_Init+0x21c>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	f002 0203 	and.w	r2, r2, #3
 800ac76:	0092      	lsls	r2, r2, #2
 800ac78:	4093      	lsls	r3, r2
 800ac7a:	69ba      	ldr	r2, [r7, #24]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ac80:	4934      	ldr	r1, [pc, #208]	; (800ad54 <HAL_GPIO_Init+0x300>)
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	089b      	lsrs	r3, r3, #2
 800ac86:	3302      	adds	r3, #2
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ac8e:	4b39      	ldr	r3, [pc, #228]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	43db      	mvns	r3, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	4313      	orrs	r3, r2
 800acb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800acb2:	4a30      	ldr	r2, [pc, #192]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800acb8:	4b2e      	ldr	r3, [pc, #184]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	43db      	mvns	r3, r3
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	4013      	ands	r3, r2
 800acc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d003      	beq.n	800acdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800acdc:	4a25      	ldr	r2, [pc, #148]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ace2:	4b24      	ldr	r3, [pc, #144]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	43db      	mvns	r3, r3
 800acec:	69ba      	ldr	r2, [r7, #24]
 800acee:	4013      	ands	r3, r2
 800acf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d003      	beq.n	800ad06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad06:	4a1b      	ldr	r2, [pc, #108]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad0c:	4b19      	ldr	r3, [pc, #100]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	43db      	mvns	r3, r3
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad30:	4a10      	ldr	r2, [pc, #64]	; (800ad74 <HAL_GPIO_Init+0x320>)
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2b0f      	cmp	r3, #15
 800ad40:	f67f ae96 	bls.w	800aa70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ad44:	bf00      	nop
 800ad46:	3724      	adds	r7, #36	; 0x24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	40023800 	.word	0x40023800
 800ad54:	40013800 	.word	0x40013800
 800ad58:	40020000 	.word	0x40020000
 800ad5c:	40020400 	.word	0x40020400
 800ad60:	40020800 	.word	0x40020800
 800ad64:	40020c00 	.word	0x40020c00
 800ad68:	40021000 	.word	0x40021000
 800ad6c:	40021400 	.word	0x40021400
 800ad70:	40021800 	.word	0x40021800
 800ad74:	40013c00 	.word	0x40013c00

0800ad78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	691a      	ldr	r2, [r3, #16]
 800ad88:	887b      	ldrh	r3, [r7, #2]
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ad90:	2301      	movs	r3, #1
 800ad92:	73fb      	strb	r3, [r7, #15]
 800ad94:	e001      	b.n	800ad9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	807b      	strh	r3, [r7, #2]
 800adb4:	4613      	mov	r3, r2
 800adb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800adb8:	787b      	ldrb	r3, [r7, #1]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800adbe:	887a      	ldrh	r2, [r7, #2]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800adc4:	e003      	b.n	800adce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800adc6:	887b      	ldrh	r3, [r7, #2]
 800adc8:	041a      	lsls	r2, r3, #16
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	619a      	str	r2, [r3, #24]
}
 800adce:	bf00      	nop
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	460b      	mov	r3, r1
 800ade4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	695a      	ldr	r2, [r3, #20]
 800adea:	887b      	ldrh	r3, [r7, #2]
 800adec:	401a      	ands	r2, r3
 800adee:	887b      	ldrh	r3, [r7, #2]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d104      	bne.n	800adfe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800adf4:	887b      	ldrh	r3, [r7, #2]
 800adf6:	041a      	lsls	r2, r3, #16
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800adfc:	e002      	b.n	800ae04 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800adfe:	887a      	ldrh	r2, [r7, #2]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	619a      	str	r2, [r3, #24]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e0ca      	b.n	800afba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae24:	4b67      	ldr	r3, [pc, #412]	; (800afc4 <HAL_RCC_ClockConfig+0x1b4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d90c      	bls.n	800ae4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae32:	4b64      	ldr	r3, [pc, #400]	; (800afc4 <HAL_RCC_ClockConfig+0x1b4>)
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	b2d2      	uxtb	r2, r2
 800ae38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae3a:	4b62      	ldr	r3, [pc, #392]	; (800afc4 <HAL_RCC_ClockConfig+0x1b4>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 030f 	and.w	r3, r3, #15
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d001      	beq.n	800ae4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e0b6      	b.n	800afba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d020      	beq.n	800ae9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d005      	beq.n	800ae70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae64:	4b58      	ldr	r3, [pc, #352]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	4a57      	ldr	r2, [pc, #348]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d005      	beq.n	800ae88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae7c:	4b52      	ldr	r3, [pc, #328]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	4a51      	ldr	r2, [pc, #324]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae88:	4b4f      	ldr	r3, [pc, #316]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	494c      	ldr	r1, [pc, #304]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae96:	4313      	orrs	r3, r2
 800ae98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d044      	beq.n	800af30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d107      	bne.n	800aebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aeae:	4b46      	ldr	r3, [pc, #280]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d119      	bne.n	800aeee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e07d      	b.n	800afba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d003      	beq.n	800aece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d107      	bne.n	800aede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aece:	4b3e      	ldr	r3, [pc, #248]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d109      	bne.n	800aeee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e06d      	b.n	800afba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aede:	4b3a      	ldr	r3, [pc, #232]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e065      	b.n	800afba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aeee:	4b36      	ldr	r3, [pc, #216]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f023 0203 	bic.w	r2, r3, #3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	4933      	ldr	r1, [pc, #204]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800aefc:	4313      	orrs	r3, r2
 800aefe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af00:	f7fd ff68 	bl	8008dd4 <HAL_GetTick>
 800af04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af06:	e00a      	b.n	800af1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af08:	f7fd ff64 	bl	8008dd4 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	f241 3288 	movw	r2, #5000	; 0x1388
 800af16:	4293      	cmp	r3, r2
 800af18:	d901      	bls.n	800af1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e04d      	b.n	800afba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af1e:	4b2a      	ldr	r3, [pc, #168]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	f003 020c 	and.w	r2, r3, #12
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d1eb      	bne.n	800af08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af30:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <HAL_RCC_ClockConfig+0x1b4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 030f 	and.w	r3, r3, #15
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d20c      	bcs.n	800af58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af3e:	4b21      	ldr	r3, [pc, #132]	; (800afc4 <HAL_RCC_ClockConfig+0x1b4>)
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	b2d2      	uxtb	r2, r2
 800af44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af46:	4b1f      	ldr	r3, [pc, #124]	; (800afc4 <HAL_RCC_ClockConfig+0x1b4>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 030f 	and.w	r3, r3, #15
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d001      	beq.n	800af58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e030      	b.n	800afba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af64:	4b18      	ldr	r3, [pc, #96]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	4915      	ldr	r1, [pc, #84]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800af72:	4313      	orrs	r3, r2
 800af74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0308 	and.w	r3, r3, #8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d009      	beq.n	800af96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af82:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	490d      	ldr	r1, [pc, #52]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800af92:	4313      	orrs	r3, r2
 800af94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af96:	f000 f851 	bl	800b03c <HAL_RCC_GetSysClockFreq>
 800af9a:	4601      	mov	r1, r0
 800af9c:	4b0a      	ldr	r3, [pc, #40]	; (800afc8 <HAL_RCC_ClockConfig+0x1b8>)
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	091b      	lsrs	r3, r3, #4
 800afa2:	f003 030f 	and.w	r3, r3, #15
 800afa6:	4a09      	ldr	r2, [pc, #36]	; (800afcc <HAL_RCC_ClockConfig+0x1bc>)
 800afa8:	5cd3      	ldrb	r3, [r2, r3]
 800afaa:	fa21 f303 	lsr.w	r3, r1, r3
 800afae:	4a08      	ldr	r2, [pc, #32]	; (800afd0 <HAL_RCC_ClockConfig+0x1c0>)
 800afb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800afb2:	2000      	movs	r0, #0
 800afb4:	f7fd feca 	bl	8008d4c <HAL_InitTick>

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	40023c00 	.word	0x40023c00
 800afc8:	40023800 	.word	0x40023800
 800afcc:	08025410 	.word	0x08025410
 800afd0:	20000018 	.word	0x20000018

0800afd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afd4:	b480      	push	{r7}
 800afd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afd8:	4b03      	ldr	r3, [pc, #12]	; (800afe8 <HAL_RCC_GetHCLKFreq+0x14>)
 800afda:	681b      	ldr	r3, [r3, #0]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20000018 	.word	0x20000018

0800afec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aff0:	f7ff fff0 	bl	800afd4 <HAL_RCC_GetHCLKFreq>
 800aff4:	4601      	mov	r1, r0
 800aff6:	4b05      	ldr	r3, [pc, #20]	; (800b00c <HAL_RCC_GetPCLK1Freq+0x20>)
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	0a9b      	lsrs	r3, r3, #10
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	4a03      	ldr	r2, [pc, #12]	; (800b010 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b002:	5cd3      	ldrb	r3, [r2, r3]
 800b004:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b008:	4618      	mov	r0, r3
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	40023800 	.word	0x40023800
 800b010:	08025420 	.word	0x08025420

0800b014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b018:	f7ff ffdc 	bl	800afd4 <HAL_RCC_GetHCLKFreq>
 800b01c:	4601      	mov	r1, r0
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	0b5b      	lsrs	r3, r3, #13
 800b024:	f003 0307 	and.w	r3, r3, #7
 800b028:	4a03      	ldr	r2, [pc, #12]	; (800b038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b02a:	5cd3      	ldrb	r3, [r2, r3]
 800b02c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b030:	4618      	mov	r0, r3
 800b032:	bd80      	pop	{r7, pc}
 800b034:	40023800 	.word	0x40023800
 800b038:	08025420 	.word	0x08025420

0800b03c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b056:	4bc6      	ldr	r3, [pc, #792]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f003 030c 	and.w	r3, r3, #12
 800b05e:	2b0c      	cmp	r3, #12
 800b060:	f200 817e 	bhi.w	800b360 <HAL_RCC_GetSysClockFreq+0x324>
 800b064:	a201      	add	r2, pc, #4	; (adr r2, 800b06c <HAL_RCC_GetSysClockFreq+0x30>)
 800b066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06a:	bf00      	nop
 800b06c:	0800b0a1 	.word	0x0800b0a1
 800b070:	0800b361 	.word	0x0800b361
 800b074:	0800b361 	.word	0x0800b361
 800b078:	0800b361 	.word	0x0800b361
 800b07c:	0800b0a7 	.word	0x0800b0a7
 800b080:	0800b361 	.word	0x0800b361
 800b084:	0800b361 	.word	0x0800b361
 800b088:	0800b361 	.word	0x0800b361
 800b08c:	0800b0ad 	.word	0x0800b0ad
 800b090:	0800b361 	.word	0x0800b361
 800b094:	0800b361 	.word	0x0800b361
 800b098:	0800b361 	.word	0x0800b361
 800b09c:	0800b209 	.word	0x0800b209
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b0a0:	4bb4      	ldr	r3, [pc, #720]	; (800b374 <HAL_RCC_GetSysClockFreq+0x338>)
 800b0a2:	613b      	str	r3, [r7, #16]
       break;
 800b0a4:	e15f      	b.n	800b366 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b0a6:	4bb4      	ldr	r3, [pc, #720]	; (800b378 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b0a8:	613b      	str	r3, [r7, #16]
      break;
 800b0aa:	e15c      	b.n	800b366 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b0ac:	4bb0      	ldr	r3, [pc, #704]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b0b6:	4bae      	ldr	r3, [pc, #696]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d04a      	beq.n	800b158 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0c2:	4bab      	ldr	r3, [pc, #684]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	099b      	lsrs	r3, r3, #6
 800b0c8:	f04f 0400 	mov.w	r4, #0
 800b0cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b0d0:	f04f 0200 	mov.w	r2, #0
 800b0d4:	ea03 0501 	and.w	r5, r3, r1
 800b0d8:	ea04 0602 	and.w	r6, r4, r2
 800b0dc:	4629      	mov	r1, r5
 800b0de:	4632      	mov	r2, r6
 800b0e0:	f04f 0300 	mov.w	r3, #0
 800b0e4:	f04f 0400 	mov.w	r4, #0
 800b0e8:	0154      	lsls	r4, r2, #5
 800b0ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b0ee:	014b      	lsls	r3, r1, #5
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	1b49      	subs	r1, r1, r5
 800b0f6:	eb62 0206 	sbc.w	r2, r2, r6
 800b0fa:	f04f 0300 	mov.w	r3, #0
 800b0fe:	f04f 0400 	mov.w	r4, #0
 800b102:	0194      	lsls	r4, r2, #6
 800b104:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b108:	018b      	lsls	r3, r1, #6
 800b10a:	1a5b      	subs	r3, r3, r1
 800b10c:	eb64 0402 	sbc.w	r4, r4, r2
 800b110:	f04f 0100 	mov.w	r1, #0
 800b114:	f04f 0200 	mov.w	r2, #0
 800b118:	00e2      	lsls	r2, r4, #3
 800b11a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b11e:	00d9      	lsls	r1, r3, #3
 800b120:	460b      	mov	r3, r1
 800b122:	4614      	mov	r4, r2
 800b124:	195b      	adds	r3, r3, r5
 800b126:	eb44 0406 	adc.w	r4, r4, r6
 800b12a:	f04f 0100 	mov.w	r1, #0
 800b12e:	f04f 0200 	mov.w	r2, #0
 800b132:	0262      	lsls	r2, r4, #9
 800b134:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b138:	0259      	lsls	r1, r3, #9
 800b13a:	460b      	mov	r3, r1
 800b13c:	4614      	mov	r4, r2
 800b13e:	4618      	mov	r0, r3
 800b140:	4621      	mov	r1, r4
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f04f 0400 	mov.w	r4, #0
 800b148:	461a      	mov	r2, r3
 800b14a:	4623      	mov	r3, r4
 800b14c:	f7fd fc5c 	bl	8008a08 <__aeabi_uldivmod>
 800b150:	4603      	mov	r3, r0
 800b152:	460c      	mov	r4, r1
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	e049      	b.n	800b1ec <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b158:	4b85      	ldr	r3, [pc, #532]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	099b      	lsrs	r3, r3, #6
 800b15e:	f04f 0400 	mov.w	r4, #0
 800b162:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b166:	f04f 0200 	mov.w	r2, #0
 800b16a:	ea03 0501 	and.w	r5, r3, r1
 800b16e:	ea04 0602 	and.w	r6, r4, r2
 800b172:	4629      	mov	r1, r5
 800b174:	4632      	mov	r2, r6
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	f04f 0400 	mov.w	r4, #0
 800b17e:	0154      	lsls	r4, r2, #5
 800b180:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b184:	014b      	lsls	r3, r1, #5
 800b186:	4619      	mov	r1, r3
 800b188:	4622      	mov	r2, r4
 800b18a:	1b49      	subs	r1, r1, r5
 800b18c:	eb62 0206 	sbc.w	r2, r2, r6
 800b190:	f04f 0300 	mov.w	r3, #0
 800b194:	f04f 0400 	mov.w	r4, #0
 800b198:	0194      	lsls	r4, r2, #6
 800b19a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b19e:	018b      	lsls	r3, r1, #6
 800b1a0:	1a5b      	subs	r3, r3, r1
 800b1a2:	eb64 0402 	sbc.w	r4, r4, r2
 800b1a6:	f04f 0100 	mov.w	r1, #0
 800b1aa:	f04f 0200 	mov.w	r2, #0
 800b1ae:	00e2      	lsls	r2, r4, #3
 800b1b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b1b4:	00d9      	lsls	r1, r3, #3
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	195b      	adds	r3, r3, r5
 800b1bc:	eb44 0406 	adc.w	r4, r4, r6
 800b1c0:	f04f 0100 	mov.w	r1, #0
 800b1c4:	f04f 0200 	mov.w	r2, #0
 800b1c8:	02a2      	lsls	r2, r4, #10
 800b1ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b1ce:	0299      	lsls	r1, r3, #10
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f04f 0400 	mov.w	r4, #0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	f7fd fc11 	bl	8008a08 <__aeabi_uldivmod>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b1ec:	4b60      	ldr	r3, [pc, #384]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	0c1b      	lsrs	r3, r3, #16
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	fbb2 f3f3 	udiv	r3, r2, r3
 800b204:	613b      	str	r3, [r7, #16]
      break;
 800b206:	e0ae      	b.n	800b366 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b208:	4b59      	ldr	r3, [pc, #356]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b210:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b212:	4b57      	ldr	r3, [pc, #348]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d04a      	beq.n	800b2b4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b21e:	4b54      	ldr	r3, [pc, #336]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	099b      	lsrs	r3, r3, #6
 800b224:	f04f 0400 	mov.w	r4, #0
 800b228:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b22c:	f04f 0200 	mov.w	r2, #0
 800b230:	ea03 0501 	and.w	r5, r3, r1
 800b234:	ea04 0602 	and.w	r6, r4, r2
 800b238:	4629      	mov	r1, r5
 800b23a:	4632      	mov	r2, r6
 800b23c:	f04f 0300 	mov.w	r3, #0
 800b240:	f04f 0400 	mov.w	r4, #0
 800b244:	0154      	lsls	r4, r2, #5
 800b246:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b24a:	014b      	lsls	r3, r1, #5
 800b24c:	4619      	mov	r1, r3
 800b24e:	4622      	mov	r2, r4
 800b250:	1b49      	subs	r1, r1, r5
 800b252:	eb62 0206 	sbc.w	r2, r2, r6
 800b256:	f04f 0300 	mov.w	r3, #0
 800b25a:	f04f 0400 	mov.w	r4, #0
 800b25e:	0194      	lsls	r4, r2, #6
 800b260:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b264:	018b      	lsls	r3, r1, #6
 800b266:	1a5b      	subs	r3, r3, r1
 800b268:	eb64 0402 	sbc.w	r4, r4, r2
 800b26c:	f04f 0100 	mov.w	r1, #0
 800b270:	f04f 0200 	mov.w	r2, #0
 800b274:	00e2      	lsls	r2, r4, #3
 800b276:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b27a:	00d9      	lsls	r1, r3, #3
 800b27c:	460b      	mov	r3, r1
 800b27e:	4614      	mov	r4, r2
 800b280:	195b      	adds	r3, r3, r5
 800b282:	eb44 0406 	adc.w	r4, r4, r6
 800b286:	f04f 0100 	mov.w	r1, #0
 800b28a:	f04f 0200 	mov.w	r2, #0
 800b28e:	0262      	lsls	r2, r4, #9
 800b290:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b294:	0259      	lsls	r1, r3, #9
 800b296:	460b      	mov	r3, r1
 800b298:	4614      	mov	r4, r2
 800b29a:	4618      	mov	r0, r3
 800b29c:	4621      	mov	r1, r4
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f04f 0400 	mov.w	r4, #0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4623      	mov	r3, r4
 800b2a8:	f7fd fbae 	bl	8008a08 <__aeabi_uldivmod>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	617b      	str	r3, [r7, #20]
 800b2b2:	e049      	b.n	800b348 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2b4:	4b2e      	ldr	r3, [pc, #184]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	099b      	lsrs	r3, r3, #6
 800b2ba:	f04f 0400 	mov.w	r4, #0
 800b2be:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b2c2:	f04f 0200 	mov.w	r2, #0
 800b2c6:	ea03 0501 	and.w	r5, r3, r1
 800b2ca:	ea04 0602 	and.w	r6, r4, r2
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4632      	mov	r2, r6
 800b2d2:	f04f 0300 	mov.w	r3, #0
 800b2d6:	f04f 0400 	mov.w	r4, #0
 800b2da:	0154      	lsls	r4, r2, #5
 800b2dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b2e0:	014b      	lsls	r3, r1, #5
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	1b49      	subs	r1, r1, r5
 800b2e8:	eb62 0206 	sbc.w	r2, r2, r6
 800b2ec:	f04f 0300 	mov.w	r3, #0
 800b2f0:	f04f 0400 	mov.w	r4, #0
 800b2f4:	0194      	lsls	r4, r2, #6
 800b2f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b2fa:	018b      	lsls	r3, r1, #6
 800b2fc:	1a5b      	subs	r3, r3, r1
 800b2fe:	eb64 0402 	sbc.w	r4, r4, r2
 800b302:	f04f 0100 	mov.w	r1, #0
 800b306:	f04f 0200 	mov.w	r2, #0
 800b30a:	00e2      	lsls	r2, r4, #3
 800b30c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b310:	00d9      	lsls	r1, r3, #3
 800b312:	460b      	mov	r3, r1
 800b314:	4614      	mov	r4, r2
 800b316:	195b      	adds	r3, r3, r5
 800b318:	eb44 0406 	adc.w	r4, r4, r6
 800b31c:	f04f 0100 	mov.w	r1, #0
 800b320:	f04f 0200 	mov.w	r2, #0
 800b324:	02a2      	lsls	r2, r4, #10
 800b326:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b32a:	0299      	lsls	r1, r3, #10
 800b32c:	460b      	mov	r3, r1
 800b32e:	4614      	mov	r4, r2
 800b330:	4618      	mov	r0, r3
 800b332:	4621      	mov	r1, r4
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f04f 0400 	mov.w	r4, #0
 800b33a:	461a      	mov	r2, r3
 800b33c:	4623      	mov	r3, r4
 800b33e:	f7fd fb63 	bl	8008a08 <__aeabi_uldivmod>
 800b342:	4603      	mov	r3, r0
 800b344:	460c      	mov	r4, r1
 800b346:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b348:	4b09      	ldr	r3, [pc, #36]	; (800b370 <HAL_RCC_GetSysClockFreq+0x334>)
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	0f1b      	lsrs	r3, r3, #28
 800b34e:	f003 0307 	and.w	r3, r3, #7
 800b352:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35c:	613b      	str	r3, [r7, #16]
      break;
 800b35e:	e002      	b.n	800b366 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b360:	4b04      	ldr	r3, [pc, #16]	; (800b374 <HAL_RCC_GetSysClockFreq+0x338>)
 800b362:	613b      	str	r3, [r7, #16]
      break;
 800b364:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b366:	693b      	ldr	r3, [r7, #16]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	371c      	adds	r7, #28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b370:	40023800 	.word	0x40023800
 800b374:	00f42400 	.word	0x00f42400
 800b378:	007a1200 	.word	0x007a1200

0800b37c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b384:	2300      	movs	r3, #0
 800b386:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	f000 8083 	beq.w	800b49c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b396:	4b95      	ldr	r3, [pc, #596]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f003 030c 	and.w	r3, r3, #12
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d019      	beq.n	800b3d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b3a2:	4b92      	ldr	r3, [pc, #584]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b3aa:	2b08      	cmp	r3, #8
 800b3ac:	d106      	bne.n	800b3bc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b3ae:	4b8f      	ldr	r3, [pc, #572]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3ba:	d00c      	beq.n	800b3d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3bc:	4b8b      	ldr	r3, [pc, #556]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b3c4:	2b0c      	cmp	r3, #12
 800b3c6:	d112      	bne.n	800b3ee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3c8:	4b88      	ldr	r3, [pc, #544]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3d4:	d10b      	bne.n	800b3ee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3d6:	4b85      	ldr	r3, [pc, #532]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d05b      	beq.n	800b49a <HAL_RCC_OscConfig+0x11e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d157      	bne.n	800b49a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e216      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f6:	d106      	bne.n	800b406 <HAL_RCC_OscConfig+0x8a>
 800b3f8:	4b7c      	ldr	r3, [pc, #496]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a7b      	ldr	r2, [pc, #492]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b3fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b402:	6013      	str	r3, [r2, #0]
 800b404:	e01d      	b.n	800b442 <HAL_RCC_OscConfig+0xc6>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b40e:	d10c      	bne.n	800b42a <HAL_RCC_OscConfig+0xae>
 800b410:	4b76      	ldr	r3, [pc, #472]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a75      	ldr	r2, [pc, #468]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	4b73      	ldr	r3, [pc, #460]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a72      	ldr	r2, [pc, #456]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	e00b      	b.n	800b442 <HAL_RCC_OscConfig+0xc6>
 800b42a:	4b70      	ldr	r3, [pc, #448]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a6f      	ldr	r2, [pc, #444]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	4b6d      	ldr	r3, [pc, #436]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a6c      	ldr	r2, [pc, #432]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b43c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b440:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d013      	beq.n	800b472 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44a:	f7fd fcc3 	bl	8008dd4 <HAL_GetTick>
 800b44e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b450:	e008      	b.n	800b464 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b452:	f7fd fcbf 	bl	8008dd4 <HAL_GetTick>
 800b456:	4602      	mov	r2, r0
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	2b64      	cmp	r3, #100	; 0x64
 800b45e:	d901      	bls.n	800b464 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e1db      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b464:	4b61      	ldr	r3, [pc, #388]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d0f0      	beq.n	800b452 <HAL_RCC_OscConfig+0xd6>
 800b470:	e014      	b.n	800b49c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b472:	f7fd fcaf 	bl	8008dd4 <HAL_GetTick>
 800b476:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b478:	e008      	b.n	800b48c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b47a:	f7fd fcab 	bl	8008dd4 <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	2b64      	cmp	r3, #100	; 0x64
 800b486:	d901      	bls.n	800b48c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e1c7      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b48c:	4b57      	ldr	r3, [pc, #348]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1f0      	bne.n	800b47a <HAL_RCC_OscConfig+0xfe>
 800b498:	e000      	b.n	800b49c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b49a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d06f      	beq.n	800b588 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b4a8:	4b50      	ldr	r3, [pc, #320]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f003 030c 	and.w	r3, r3, #12
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d017      	beq.n	800b4e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4b4:	4b4d      	ldr	r3, [pc, #308]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b4bc:	2b08      	cmp	r3, #8
 800b4be:	d105      	bne.n	800b4cc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4c0:	4b4a      	ldr	r3, [pc, #296]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00b      	beq.n	800b4e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4cc:	4b47      	ldr	r3, [pc, #284]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4d4:	2b0c      	cmp	r3, #12
 800b4d6:	d11c      	bne.n	800b512 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4d8:	4b44      	ldr	r3, [pc, #272]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d116      	bne.n	800b512 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4e4:	4b41      	ldr	r3, [pc, #260]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0302 	and.w	r3, r3, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d005      	beq.n	800b4fc <HAL_RCC_OscConfig+0x180>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d001      	beq.n	800b4fc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e18f      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4fc:	4b3b      	ldr	r3, [pc, #236]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	4938      	ldr	r1, [pc, #224]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b510:	e03a      	b.n	800b588 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d020      	beq.n	800b55c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b51a:	4b35      	ldr	r3, [pc, #212]	; (800b5f0 <HAL_RCC_OscConfig+0x274>)
 800b51c:	2201      	movs	r2, #1
 800b51e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b520:	f7fd fc58 	bl	8008dd4 <HAL_GetTick>
 800b524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b526:	e008      	b.n	800b53a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b528:	f7fd fc54 	bl	8008dd4 <HAL_GetTick>
 800b52c:	4602      	mov	r2, r0
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	2b02      	cmp	r3, #2
 800b534:	d901      	bls.n	800b53a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e170      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b53a:	4b2c      	ldr	r3, [pc, #176]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d0f0      	beq.n	800b528 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b546:	4b29      	ldr	r3, [pc, #164]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	4925      	ldr	r1, [pc, #148]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b556:	4313      	orrs	r3, r2
 800b558:	600b      	str	r3, [r1, #0]
 800b55a:	e015      	b.n	800b588 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b55c:	4b24      	ldr	r3, [pc, #144]	; (800b5f0 <HAL_RCC_OscConfig+0x274>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b562:	f7fd fc37 	bl	8008dd4 <HAL_GetTick>
 800b566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b568:	e008      	b.n	800b57c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b56a:	f7fd fc33 	bl	8008dd4 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	2b02      	cmp	r3, #2
 800b576:	d901      	bls.n	800b57c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e14f      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b57c:	4b1b      	ldr	r3, [pc, #108]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0302 	and.w	r3, r3, #2
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1f0      	bne.n	800b56a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0308 	and.w	r3, r3, #8
 800b590:	2b00      	cmp	r3, #0
 800b592:	d037      	beq.n	800b604 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d016      	beq.n	800b5ca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b59c:	4b15      	ldr	r3, [pc, #84]	; (800b5f4 <HAL_RCC_OscConfig+0x278>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5a2:	f7fd fc17 	bl	8008dd4 <HAL_GetTick>
 800b5a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5a8:	e008      	b.n	800b5bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b5aa:	f7fd fc13 	bl	8008dd4 <HAL_GetTick>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d901      	bls.n	800b5bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e12f      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5bc:	4b0b      	ldr	r3, [pc, #44]	; (800b5ec <HAL_RCC_OscConfig+0x270>)
 800b5be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c0:	f003 0302 	and.w	r3, r3, #2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0f0      	beq.n	800b5aa <HAL_RCC_OscConfig+0x22e>
 800b5c8:	e01c      	b.n	800b604 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5ca:	4b0a      	ldr	r3, [pc, #40]	; (800b5f4 <HAL_RCC_OscConfig+0x278>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d0:	f7fd fc00 	bl	8008dd4 <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5d6:	e00f      	b.n	800b5f8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b5d8:	f7fd fbfc 	bl	8008dd4 <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d908      	bls.n	800b5f8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e118      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
 800b5ea:	bf00      	nop
 800b5ec:	40023800 	.word	0x40023800
 800b5f0:	42470000 	.word	0x42470000
 800b5f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5f8:	4b8a      	ldr	r3, [pc, #552]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5fc:	f003 0302 	and.w	r3, r3, #2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1e9      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 8097 	beq.w	800b740 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b612:	2300      	movs	r3, #0
 800b614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b616:	4b83      	ldr	r3, [pc, #524]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10f      	bne.n	800b642 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b622:	2300      	movs	r3, #0
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	4b7f      	ldr	r3, [pc, #508]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62a:	4a7e      	ldr	r2, [pc, #504]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b62c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b630:	6413      	str	r3, [r2, #64]	; 0x40
 800b632:	4b7c      	ldr	r3, [pc, #496]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b63e:	2301      	movs	r3, #1
 800b640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b642:	4b79      	ldr	r3, [pc, #484]	; (800b828 <HAL_RCC_OscConfig+0x4ac>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d118      	bne.n	800b680 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b64e:	4b76      	ldr	r3, [pc, #472]	; (800b828 <HAL_RCC_OscConfig+0x4ac>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a75      	ldr	r2, [pc, #468]	; (800b828 <HAL_RCC_OscConfig+0x4ac>)
 800b654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b65a:	f7fd fbbb 	bl	8008dd4 <HAL_GetTick>
 800b65e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b660:	e008      	b.n	800b674 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b662:	f7fd fbb7 	bl	8008dd4 <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d901      	bls.n	800b674 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e0d3      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b674:	4b6c      	ldr	r3, [pc, #432]	; (800b828 <HAL_RCC_OscConfig+0x4ac>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0f0      	beq.n	800b662 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d106      	bne.n	800b696 <HAL_RCC_OscConfig+0x31a>
 800b688:	4b66      	ldr	r3, [pc, #408]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68c:	4a65      	ldr	r2, [pc, #404]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b68e:	f043 0301 	orr.w	r3, r3, #1
 800b692:	6713      	str	r3, [r2, #112]	; 0x70
 800b694:	e01c      	b.n	800b6d0 <HAL_RCC_OscConfig+0x354>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b05      	cmp	r3, #5
 800b69c:	d10c      	bne.n	800b6b8 <HAL_RCC_OscConfig+0x33c>
 800b69e:	4b61      	ldr	r3, [pc, #388]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a2:	4a60      	ldr	r2, [pc, #384]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6a4:	f043 0304 	orr.w	r3, r3, #4
 800b6a8:	6713      	str	r3, [r2, #112]	; 0x70
 800b6aa:	4b5e      	ldr	r3, [pc, #376]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ae:	4a5d      	ldr	r2, [pc, #372]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6b0:	f043 0301 	orr.w	r3, r3, #1
 800b6b4:	6713      	str	r3, [r2, #112]	; 0x70
 800b6b6:	e00b      	b.n	800b6d0 <HAL_RCC_OscConfig+0x354>
 800b6b8:	4b5a      	ldr	r3, [pc, #360]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6bc:	4a59      	ldr	r2, [pc, #356]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6be:	f023 0301 	bic.w	r3, r3, #1
 800b6c2:	6713      	str	r3, [r2, #112]	; 0x70
 800b6c4:	4b57      	ldr	r3, [pc, #348]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c8:	4a56      	ldr	r2, [pc, #344]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6ca:	f023 0304 	bic.w	r3, r3, #4
 800b6ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d015      	beq.n	800b704 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6d8:	f7fd fb7c 	bl	8008dd4 <HAL_GetTick>
 800b6dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6de:	e00a      	b.n	800b6f6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6e0:	f7fd fb78 	bl	8008dd4 <HAL_GetTick>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d901      	bls.n	800b6f6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e092      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6f6:	4b4b      	ldr	r3, [pc, #300]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0ee      	beq.n	800b6e0 <HAL_RCC_OscConfig+0x364>
 800b702:	e014      	b.n	800b72e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b704:	f7fd fb66 	bl	8008dd4 <HAL_GetTick>
 800b708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b70a:	e00a      	b.n	800b722 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b70c:	f7fd fb62 	bl	8008dd4 <HAL_GetTick>
 800b710:	4602      	mov	r2, r0
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	f241 3288 	movw	r2, #5000	; 0x1388
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d901      	bls.n	800b722 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e07c      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b722:	4b40      	ldr	r3, [pc, #256]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b726:	f003 0302 	and.w	r3, r3, #2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1ee      	bne.n	800b70c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d105      	bne.n	800b740 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b734:	4b3b      	ldr	r3, [pc, #236]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b738:	4a3a      	ldr	r2, [pc, #232]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b73a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b73e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d068      	beq.n	800b81a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b748:	4b36      	ldr	r3, [pc, #216]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f003 030c 	and.w	r3, r3, #12
 800b750:	2b08      	cmp	r3, #8
 800b752:	d060      	beq.n	800b816 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d145      	bne.n	800b7e8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b75c:	4b33      	ldr	r3, [pc, #204]	; (800b82c <HAL_RCC_OscConfig+0x4b0>)
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b762:	f7fd fb37 	bl	8008dd4 <HAL_GetTick>
 800b766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b768:	e008      	b.n	800b77c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b76a:	f7fd fb33 	bl	8008dd4 <HAL_GetTick>
 800b76e:	4602      	mov	r2, r0
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	2b02      	cmp	r3, #2
 800b776:	d901      	bls.n	800b77c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e04f      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b77c:	4b29      	ldr	r3, [pc, #164]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1f0      	bne.n	800b76a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	69da      	ldr	r2, [r3, #28]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	019b      	lsls	r3, r3, #6
 800b798:	431a      	orrs	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79e:	085b      	lsrs	r3, r3, #1
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	041b      	lsls	r3, r3, #16
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	061b      	lsls	r3, r3, #24
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	071b      	lsls	r3, r3, #28
 800b7b4:	491b      	ldr	r1, [pc, #108]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b7ba:	4b1c      	ldr	r3, [pc, #112]	; (800b82c <HAL_RCC_OscConfig+0x4b0>)
 800b7bc:	2201      	movs	r2, #1
 800b7be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c0:	f7fd fb08 	bl	8008dd4 <HAL_GetTick>
 800b7c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7c6:	e008      	b.n	800b7da <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7c8:	f7fd fb04 	bl	8008dd4 <HAL_GetTick>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d901      	bls.n	800b7da <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e020      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7da:	4b12      	ldr	r3, [pc, #72]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0f0      	beq.n	800b7c8 <HAL_RCC_OscConfig+0x44c>
 800b7e6:	e018      	b.n	800b81a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7e8:	4b10      	ldr	r3, [pc, #64]	; (800b82c <HAL_RCC_OscConfig+0x4b0>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ee:	f7fd faf1 	bl	8008dd4 <HAL_GetTick>
 800b7f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7f4:	e008      	b.n	800b808 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7f6:	f7fd faed 	bl	8008dd4 <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	2b02      	cmp	r3, #2
 800b802:	d901      	bls.n	800b808 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	e009      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b808:	4b06      	ldr	r3, [pc, #24]	; (800b824 <HAL_RCC_OscConfig+0x4a8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1f0      	bne.n	800b7f6 <HAL_RCC_OscConfig+0x47a>
 800b814:	e001      	b.n	800b81a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e000      	b.n	800b81c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	40023800 	.word	0x40023800
 800b828:	40007000 	.word	0x40007000
 800b82c:	42470060 	.word	0x42470060

0800b830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e056      	b.n	800b8f0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f004 fda7 	bl	80103b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2202      	movs	r2, #2
 800b866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b878:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	685a      	ldr	r2, [r3, #4]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	431a      	orrs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	431a      	orrs	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	431a      	orrs	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	431a      	orrs	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b89e:	431a      	orrs	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	ea42 0103 	orr.w	r1, r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	0c1b      	lsrs	r3, r3, #16
 800b8c0:	f003 0104 	and.w	r1, r3, #4
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	69da      	ldr	r2, [r3, #28]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b910:	2b01      	cmp	r3, #1
 800b912:	d101      	bne.n	800b918 <HAL_SPI_TransmitReceive_IT+0x20>
 800b914:	2302      	movs	r3, #2
 800b916:	e075      	b.n	800ba04 <HAL_SPI_TransmitReceive_IT+0x10c>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b926:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b92e:	7dbb      	ldrb	r3, [r7, #22]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d00d      	beq.n	800b950 <HAL_SPI_TransmitReceive_IT+0x58>
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b93a:	d106      	bne.n	800b94a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <HAL_SPI_TransmitReceive_IT+0x52>
 800b944:	7dbb      	ldrb	r3, [r7, #22]
 800b946:	2b04      	cmp	r3, #4
 800b948:	d002      	beq.n	800b950 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800b94a:	2302      	movs	r3, #2
 800b94c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b94e:	e054      	b.n	800b9fa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d005      	beq.n	800b962 <HAL_SPI_TransmitReceive_IT+0x6a>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <HAL_SPI_TransmitReceive_IT+0x6a>
 800b95c:	887b      	ldrh	r3, [r7, #2]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d102      	bne.n	800b968 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b966:	e048      	b.n	800b9fa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b04      	cmp	r3, #4
 800b972:	d003      	beq.n	800b97c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2205      	movs	r2, #5
 800b978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	887a      	ldrh	r2, [r7, #2]
 800b98c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	887a      	ldrh	r2, [r7, #2]
 800b992:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	887a      	ldrh	r2, [r7, #2]
 800b99e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	887a      	ldrh	r2, [r7, #2]
 800b9a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	4a17      	ldr	r2, [pc, #92]	; (800ba10 <HAL_SPI_TransmitReceive_IT+0x118>)
 800b9b2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4a17      	ldr	r2, [pc, #92]	; (800ba14 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800b9b8:	645a      	str	r2, [r3, #68]	; 0x44
 800b9ba:	e005      	b.n	800b9c8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	4a16      	ldr	r2, [pc, #88]	; (800ba18 <HAL_SPI_TransmitReceive_IT+0x120>)
 800b9c0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4a15      	ldr	r2, [pc, #84]	; (800ba1c <HAL_SPI_TransmitReceive_IT+0x124>)
 800b9c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800b9d6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e2:	2b40      	cmp	r3, #64	; 0x40
 800b9e4:	d008      	beq.n	800b9f8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	e000      	b.n	800b9fa <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800b9f8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	371c      	adds	r7, #28
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	0800bd49 	.word	0x0800bd49
 800ba14:	0800bda9 	.word	0x0800bda9
 800ba18:	0800bc85 	.word	0x0800bc85
 800ba1c:	0800bce9 	.word	0x0800bce9

0800ba20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b088      	sub	sp, #32
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	099b      	lsrs	r3, r3, #6
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10f      	bne.n	800ba64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	099b      	lsrs	r3, r3, #6
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d004      	beq.n	800ba64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	4798      	blx	r3
    return;
 800ba62:	e0d8      	b.n	800bc16 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00a      	beq.n	800ba86 <HAL_SPI_IRQHandler+0x66>
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	09db      	lsrs	r3, r3, #7
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d004      	beq.n	800ba86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	4798      	blx	r3
    return;
 800ba84:	e0c7      	b.n	800bc16 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10c      	bne.n	800baac <HAL_SPI_IRQHandler+0x8c>
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	099b      	lsrs	r3, r3, #6
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <HAL_SPI_IRQHandler+0x8c>
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	0a1b      	lsrs	r3, r3, #8
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 80b5 	beq.w	800bc16 <HAL_SPI_IRQHandler+0x1f6>
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	095b      	lsrs	r3, r3, #5
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 80ae 	beq.w	800bc16 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	099b      	lsrs	r3, r3, #6
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d023      	beq.n	800bb0e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d011      	beq.n	800baf6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad6:	f043 0204 	orr.w	r2, r3, #4
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	e00b      	b.n	800bb0e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baf6:	2300      	movs	r3, #0
 800baf8:	613b      	str	r3, [r7, #16]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	613b      	str	r3, [r7, #16]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	693b      	ldr	r3, [r7, #16]
        return;
 800bb0c:	e083      	b.n	800bc16 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	095b      	lsrs	r3, r3, #5
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d014      	beq.n	800bb44 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1e:	f043 0201 	orr.w	r2, r3, #1
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb26:	2300      	movs	r3, #0
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	0a1b      	lsrs	r3, r3, #8
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00c      	beq.n	800bb6a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb54:	f043 0208 	orr.w	r2, r3, #8
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	60bb      	str	r3, [r7, #8]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	60bb      	str	r3, [r7, #8]
 800bb68:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d050      	beq.n	800bc14 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	685a      	ldr	r2, [r3, #4]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb80:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	f003 0302 	and.w	r3, r3, #2
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d104      	bne.n	800bb9e <HAL_SPI_IRQHandler+0x17e>
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d034      	beq.n	800bc08 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0203 	bic.w	r2, r2, #3
 800bbac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d011      	beq.n	800bbda <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbba:	4a18      	ldr	r2, [pc, #96]	; (800bc1c <HAL_SPI_IRQHandler+0x1fc>)
 800bbbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe fcbc 	bl	800a540 <HAL_DMA_Abort_IT>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d005      	beq.n	800bbda <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d016      	beq.n	800bc10 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbe6:	4a0d      	ldr	r2, [pc, #52]	; (800bc1c <HAL_SPI_IRQHandler+0x1fc>)
 800bbe8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fe fca6 	bl	800a540 <HAL_DMA_Abort_IT>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bc06:	e003      	b.n	800bc10 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f81d 	bl	800bc48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc0e:	e000      	b.n	800bc12 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bc10:	bf00      	nop
    return;
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
  }
}
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	0800bc5d 	.word	0x0800bc5d

0800bc20 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff ffe6 	bl	800bc48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc7c:	bf00      	nop
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f103 020c 	add.w	r2, r3, #12
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc98:	7812      	ldrb	r2, [r2, #0]
 800bc9a:	b2d2      	uxtb	r2, r2
 800bc9c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10f      	bne.n	800bce0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bcce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d102      	bne.n	800bce0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f940 	bl	800bf60 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	330c      	adds	r3, #12
 800bcfa:	7812      	ldrb	r2, [r2, #0]
 800bcfc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10f      	bne.n	800bd40 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd2e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d102      	bne.n	800bd40 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f910 	bl	800bf60 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5a:	b292      	uxth	r2, r2
 800bd5c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	1c9a      	adds	r2, r3, #2
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10f      	bne.n	800bda0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd8e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d102      	bne.n	800bda0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f8e0 	bl	800bf60 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb4:	881a      	ldrh	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc0:	1c9a      	adds	r2, r3, #2
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10f      	bne.n	800bdfe <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdec:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d102      	bne.n	800bdfe <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f8b1 	bl	800bf60 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b084      	sub	sp, #16
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	603b      	str	r3, [r7, #0]
 800be12:	4613      	mov	r3, r2
 800be14:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be16:	e04c      	b.n	800beb2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1e:	d048      	beq.n	800beb2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800be20:	f7fc ffd8 	bl	8008dd4 <HAL_GetTick>
 800be24:	4602      	mov	r2, r0
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d902      	bls.n	800be36 <SPI_WaitFlagStateUntilTimeout+0x30>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d13d      	bne.n	800beb2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be4e:	d111      	bne.n	800be74 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be58:	d004      	beq.n	800be64 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be62:	d107      	bne.n	800be74 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be7c:	d10f      	bne.n	800be9e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e00f      	b.n	800bed2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	689a      	ldr	r2, [r3, #8]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	4013      	ands	r3, r2
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	bf0c      	ite	eq
 800bec2:	2301      	moveq	r3, #1
 800bec4:	2300      	movne	r3, #0
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	461a      	mov	r2, r3
 800beca:	79fb      	ldrb	r3, [r7, #7]
 800becc:	429a      	cmp	r2, r3
 800bece:	d1a3      	bne.n	800be18 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
	...

0800bedc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b088      	sub	sp, #32
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bee8:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <SPI_EndRxTxTransaction+0x7c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a1b      	ldr	r2, [pc, #108]	; (800bf5c <SPI_EndRxTxTransaction+0x80>)
 800beee:	fba2 2303 	umull	r2, r3, r2, r3
 800bef2:	0d5b      	lsrs	r3, r3, #21
 800bef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bef8:	fb02 f303 	mul.w	r3, r2, r3
 800befc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf06:	d112      	bne.n	800bf2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2180      	movs	r1, #128	; 0x80
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff ff77 	bl	800be06 <SPI_WaitFlagStateUntilTimeout>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d016      	beq.n	800bf4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf22:	f043 0220 	orr.w	r2, r3, #32
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e00f      	b.n	800bf4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00a      	beq.n	800bf4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	3b01      	subs	r3, #1
 800bf38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf44:	2b80      	cmp	r3, #128	; 0x80
 800bf46:	d0f2      	beq.n	800bf2e <SPI_EndRxTxTransaction+0x52>
 800bf48:	e000      	b.n	800bf4c <SPI_EndRxTxTransaction+0x70>
        break;
 800bf4a:	bf00      	nop
  }

  return HAL_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20000018 	.word	0x20000018
 800bf5c:	165e9f81 	.word	0x165e9f81

0800bf60 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800bf68:	4b35      	ldr	r3, [pc, #212]	; (800c040 <SPI_CloseRxTx_ISR+0xe0>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a35      	ldr	r2, [pc, #212]	; (800c044 <SPI_CloseRxTx_ISR+0xe4>)
 800bf6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf72:	0a5b      	lsrs	r3, r3, #9
 800bf74:	2264      	movs	r2, #100	; 0x64
 800bf76:	fb02 f303 	mul.w	r3, r2, r3
 800bf7a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bf7c:	f7fc ff2a 	bl	8008dd4 <HAL_GetTick>
 800bf80:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f022 0220 	bic.w	r2, r2, #32
 800bf90:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d106      	bne.n	800bfa6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf9c:	f043 0220 	orr.w	r2, r3, #32
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bfa4:	e009      	b.n	800bfba <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d0eb      	beq.n	800bf92 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	2164      	movs	r1, #100	; 0x64
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff ff8c 	bl	800bedc <SPI_EndRxTxTransaction>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d005      	beq.n	800bfd6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfce:	f043 0220 	orr.w	r2, r3, #32
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10a      	bne.n	800bff4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60fb      	str	r3, [r7, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	60fb      	str	r3, [r7, #12]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d115      	bne.n	800c028 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b04      	cmp	r3, #4
 800c006:	d107      	bne.n	800c018 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff fe05 	bl	800bc20 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c016:	e00e      	b.n	800c036 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7ff fe07 	bl	800bc34 <HAL_SPI_TxRxCpltCallback>
}
 800c026:	e006      	b.n	800c036 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff fe09 	bl	800bc48 <HAL_SPI_ErrorCallback>
}
 800c036:	bf00      	nop
 800c038:	3718      	adds	r7, #24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20000018 	.word	0x20000018
 800c044:	057619f1 	.word	0x057619f1

0800c048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d101      	bne.n	800c05a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e01d      	b.n	800c096 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d106      	bne.n	800c074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f004 fca4 	bl	80109bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2202      	movs	r2, #2
 800c078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3304      	adds	r3, #4
 800c084:	4619      	mov	r1, r3
 800c086:	4610      	mov	r0, r2
 800c088:	f000 fc30 	bl	800c8ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e01d      	b.n	800c0ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f815 	bl	800c0f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	4619      	mov	r1, r3
 800c0dc:	4610      	mov	r0, r2
 800c0de:	f000 fc05 	bl	800c8ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b0c      	cmp	r3, #12
 800c116:	d841      	bhi.n	800c19c <HAL_TIM_PWM_Start_IT+0x94>
 800c118:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <HAL_TIM_PWM_Start_IT+0x18>)
 800c11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11e:	bf00      	nop
 800c120:	0800c155 	.word	0x0800c155
 800c124:	0800c19d 	.word	0x0800c19d
 800c128:	0800c19d 	.word	0x0800c19d
 800c12c:	0800c19d 	.word	0x0800c19d
 800c130:	0800c167 	.word	0x0800c167
 800c134:	0800c19d 	.word	0x0800c19d
 800c138:	0800c19d 	.word	0x0800c19d
 800c13c:	0800c19d 	.word	0x0800c19d
 800c140:	0800c179 	.word	0x0800c179
 800c144:	0800c19d 	.word	0x0800c19d
 800c148:	0800c19d 	.word	0x0800c19d
 800c14c:	0800c19d 	.word	0x0800c19d
 800c150:	0800c18b 	.word	0x0800c18b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68da      	ldr	r2, [r3, #12]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f042 0202 	orr.w	r2, r2, #2
 800c162:	60da      	str	r2, [r3, #12]
      break;
 800c164:	e01b      	b.n	800c19e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68da      	ldr	r2, [r3, #12]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f042 0204 	orr.w	r2, r2, #4
 800c174:	60da      	str	r2, [r3, #12]
      break;
 800c176:	e012      	b.n	800c19e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0208 	orr.w	r2, r2, #8
 800c186:	60da      	str	r2, [r3, #12]
      break;
 800c188:	e009      	b.n	800c19e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68da      	ldr	r2, [r3, #12]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f042 0210 	orr.w	r2, r2, #16
 800c198:	60da      	str	r2, [r3, #12]
      break;
 800c19a:	e000      	b.n	800c19e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800c19c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fe8a 	bl	800cec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a15      	ldr	r2, [pc, #84]	; (800c208 <HAL_TIM_PWM_Start_IT+0x100>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d004      	beq.n	800c1c0 <HAL_TIM_PWM_Start_IT+0xb8>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a14      	ldr	r2, [pc, #80]	; (800c20c <HAL_TIM_PWM_Start_IT+0x104>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d101      	bne.n	800c1c4 <HAL_TIM_PWM_Start_IT+0xbc>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e000      	b.n	800c1c6 <HAL_TIM_PWM_Start_IT+0xbe>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d007      	beq.n	800c1da <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f003 0307 	and.w	r3, r3, #7
 800c1e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b06      	cmp	r3, #6
 800c1ea:	d007      	beq.n	800c1fc <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0201 	orr.w	r2, r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	40010000 	.word	0x40010000
 800c20c:	40010400 	.word	0x40010400

0800c210 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b0c      	cmp	r3, #12
 800c21e:	d841      	bhi.n	800c2a4 <HAL_TIM_PWM_Stop_IT+0x94>
 800c220:	a201      	add	r2, pc, #4	; (adr r2, 800c228 <HAL_TIM_PWM_Stop_IT+0x18>)
 800c222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c226:	bf00      	nop
 800c228:	0800c25d 	.word	0x0800c25d
 800c22c:	0800c2a5 	.word	0x0800c2a5
 800c230:	0800c2a5 	.word	0x0800c2a5
 800c234:	0800c2a5 	.word	0x0800c2a5
 800c238:	0800c26f 	.word	0x0800c26f
 800c23c:	0800c2a5 	.word	0x0800c2a5
 800c240:	0800c2a5 	.word	0x0800c2a5
 800c244:	0800c2a5 	.word	0x0800c2a5
 800c248:	0800c281 	.word	0x0800c281
 800c24c:	0800c2a5 	.word	0x0800c2a5
 800c250:	0800c2a5 	.word	0x0800c2a5
 800c254:	0800c2a5 	.word	0x0800c2a5
 800c258:	0800c293 	.word	0x0800c293
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68da      	ldr	r2, [r3, #12]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f022 0202 	bic.w	r2, r2, #2
 800c26a:	60da      	str	r2, [r3, #12]
      break;
 800c26c:	e01b      	b.n	800c2a6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f022 0204 	bic.w	r2, r2, #4
 800c27c:	60da      	str	r2, [r3, #12]
      break;
 800c27e:	e012      	b.n	800c2a6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68da      	ldr	r2, [r3, #12]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f022 0208 	bic.w	r2, r2, #8
 800c28e:	60da      	str	r2, [r3, #12]
      break;
 800c290:	e009      	b.n	800c2a6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 0210 	bic.w	r2, r2, #16
 800c2a0:	60da      	str	r2, [r3, #12]
      break;
 800c2a2:	e000      	b.n	800c2a6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800c2a4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 fe06 	bl	800cec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a20      	ldr	r2, [pc, #128]	; (800c33c <HAL_TIM_PWM_Stop_IT+0x12c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d004      	beq.n	800c2c8 <HAL_TIM_PWM_Stop_IT+0xb8>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a1f      	ldr	r2, [pc, #124]	; (800c340 <HAL_TIM_PWM_Stop_IT+0x130>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d101      	bne.n	800c2cc <HAL_TIM_PWM_Stop_IT+0xbc>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <HAL_TIM_PWM_Stop_IT+0xbe>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d017      	beq.n	800c302 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6a1a      	ldr	r2, [r3, #32]
 800c2d8:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2dc:	4013      	ands	r3, r2
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10f      	bne.n	800c302 <HAL_TIM_PWM_Stop_IT+0xf2>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6a1a      	ldr	r2, [r3, #32]
 800c2e8:	f240 4344 	movw	r3, #1092	; 0x444
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d107      	bne.n	800c302 <HAL_TIM_PWM_Stop_IT+0xf2>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	6a1a      	ldr	r2, [r3, #32]
 800c308:	f241 1311 	movw	r3, #4369	; 0x1111
 800c30c:	4013      	ands	r3, r2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10f      	bne.n	800c332 <HAL_TIM_PWM_Stop_IT+0x122>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6a1a      	ldr	r2, [r3, #32]
 800c318:	f240 4344 	movw	r3, #1092	; 0x444
 800c31c:	4013      	ands	r3, r2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d107      	bne.n	800c332 <HAL_TIM_PWM_Stop_IT+0x122>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f022 0201 	bic.w	r2, r2, #1
 800c330:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	40010000 	.word	0x40010000
 800c340:	40010400 	.word	0x40010400

0800c344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	f003 0302 	and.w	r3, r3, #2
 800c356:	2b02      	cmp	r3, #2
 800c358:	d122      	bne.n	800c3a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	f003 0302 	and.w	r3, r3, #2
 800c364:	2b02      	cmp	r3, #2
 800c366:	d11b      	bne.n	800c3a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f06f 0202 	mvn.w	r2, #2
 800c370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2201      	movs	r2, #1
 800c376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	699b      	ldr	r3, [r3, #24]
 800c37e:	f003 0303 	and.w	r3, r3, #3
 800c382:	2b00      	cmp	r3, #0
 800c384:	d003      	beq.n	800c38e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fa92 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800c38c:	e005      	b.n	800c39a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fa84 	bl	800c89c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fa95 	bl	800c8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	f003 0304 	and.w	r3, r3, #4
 800c3aa:	2b04      	cmp	r3, #4
 800c3ac:	d122      	bne.n	800c3f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	d11b      	bne.n	800c3f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f06f 0204 	mvn.w	r2, #4
 800c3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fa68 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800c3e0:	e005      	b.n	800c3ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fa5a 	bl	800c89c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fa6b 	bl	800c8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	f003 0308 	and.w	r3, r3, #8
 800c3fe:	2b08      	cmp	r3, #8
 800c400:	d122      	bne.n	800c448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	f003 0308 	and.w	r3, r3, #8
 800c40c:	2b08      	cmp	r3, #8
 800c40e:	d11b      	bne.n	800c448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f06f 0208 	mvn.w	r2, #8
 800c418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2204      	movs	r2, #4
 800c41e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	69db      	ldr	r3, [r3, #28]
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fa3e 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800c434:	e005      	b.n	800c442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fa30 	bl	800c89c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fa41 	bl	800c8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	f003 0310 	and.w	r3, r3, #16
 800c452:	2b10      	cmp	r3, #16
 800c454:	d122      	bne.n	800c49c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	f003 0310 	and.w	r3, r3, #16
 800c460:	2b10      	cmp	r3, #16
 800c462:	d11b      	bne.n	800c49c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f06f 0210 	mvn.w	r2, #16
 800c46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2208      	movs	r2, #8
 800c472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa14 	bl	800c8b0 <HAL_TIM_IC_CaptureCallback>
 800c488:	e005      	b.n	800c496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fa06 	bl	800c89c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fa17 	bl	800c8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d10e      	bne.n	800c4c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f003 0301 	and.w	r3, r3, #1
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d107      	bne.n	800c4c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f06f 0201 	mvn.w	r2, #1
 800c4c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f004 fb36 	bl	8010b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d2:	2b80      	cmp	r3, #128	; 0x80
 800c4d4:	d10e      	bne.n	800c4f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e0:	2b80      	cmp	r3, #128	; 0x80
 800c4e2:	d107      	bne.n	800c4f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fe77 	bl	800d1e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fe:	2b40      	cmp	r3, #64	; 0x40
 800c500:	d10e      	bne.n	800c520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c50c:	2b40      	cmp	r3, #64	; 0x40
 800c50e:	d107      	bne.n	800c520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f9dc 	bl	800c8d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	f003 0320 	and.w	r3, r3, #32
 800c52a:	2b20      	cmp	r3, #32
 800c52c:	d10e      	bne.n	800c54c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	f003 0320 	and.w	r3, r3, #32
 800c538:	2b20      	cmp	r3, #32
 800c53a:	d107      	bne.n	800c54c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f06f 0220 	mvn.w	r2, #32
 800c544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fe41 	bl	800d1ce <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c54c:	bf00      	nop
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c566:	2b01      	cmp	r3, #1
 800c568:	d101      	bne.n	800c56e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c56a:	2302      	movs	r3, #2
 800c56c:	e0b4      	b.n	800c6d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2202      	movs	r2, #2
 800c57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b0c      	cmp	r3, #12
 800c582:	f200 809f 	bhi.w	800c6c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c586:	a201      	add	r2, pc, #4	; (adr r2, 800c58c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c58c:	0800c5c1 	.word	0x0800c5c1
 800c590:	0800c6c5 	.word	0x0800c6c5
 800c594:	0800c6c5 	.word	0x0800c6c5
 800c598:	0800c6c5 	.word	0x0800c6c5
 800c59c:	0800c601 	.word	0x0800c601
 800c5a0:	0800c6c5 	.word	0x0800c6c5
 800c5a4:	0800c6c5 	.word	0x0800c6c5
 800c5a8:	0800c6c5 	.word	0x0800c6c5
 800c5ac:	0800c643 	.word	0x0800c643
 800c5b0:	0800c6c5 	.word	0x0800c6c5
 800c5b4:	0800c6c5 	.word	0x0800c6c5
 800c5b8:	0800c6c5 	.word	0x0800c6c5
 800c5bc:	0800c683 	.word	0x0800c683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68b9      	ldr	r1, [r7, #8]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fa30 	bl	800ca2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	699a      	ldr	r2, [r3, #24]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f042 0208 	orr.w	r2, r2, #8
 800c5da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	699a      	ldr	r2, [r3, #24]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0204 	bic.w	r2, r2, #4
 800c5ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6999      	ldr	r1, [r3, #24]
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	691a      	ldr	r2, [r3, #16]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	619a      	str	r2, [r3, #24]
      break;
 800c5fe:	e062      	b.n	800c6c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68b9      	ldr	r1, [r7, #8]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fa80 	bl	800cb0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	699a      	ldr	r2, [r3, #24]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c61a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	699a      	ldr	r2, [r3, #24]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c62a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6999      	ldr	r1, [r3, #24]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	021a      	lsls	r2, r3, #8
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	430a      	orrs	r2, r1
 800c63e:	619a      	str	r2, [r3, #24]
      break;
 800c640:	e041      	b.n	800c6c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68b9      	ldr	r1, [r7, #8]
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fad5 	bl	800cbf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	69da      	ldr	r2, [r3, #28]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f042 0208 	orr.w	r2, r2, #8
 800c65c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69da      	ldr	r2, [r3, #28]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f022 0204 	bic.w	r2, r2, #4
 800c66c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	69d9      	ldr	r1, [r3, #28]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	691a      	ldr	r2, [r3, #16]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	430a      	orrs	r2, r1
 800c67e:	61da      	str	r2, [r3, #28]
      break;
 800c680:	e021      	b.n	800c6c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fb29 	bl	800cce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	69da      	ldr	r2, [r3, #28]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c69c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	69da      	ldr	r2, [r3, #28]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	69d9      	ldr	r1, [r3, #28]
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	021a      	lsls	r2, r3, #8
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	61da      	str	r2, [r3, #28]
      break;
 800c6c2:	e000      	b.n	800c6c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c6c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d101      	bne.n	800c6f8 <HAL_TIM_GenerateEvent+0x18>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e014      	b.n	800c722 <HAL_TIM_GenerateEvent+0x42>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d101      	bne.n	800c746 <HAL_TIM_ConfigClockSource+0x18>
 800c742:	2302      	movs	r3, #2
 800c744:	e0a6      	b.n	800c894 <HAL_TIM_ConfigClockSource+0x166>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2202      	movs	r2, #2
 800c752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c764:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c76c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b40      	cmp	r3, #64	; 0x40
 800c77c:	d067      	beq.n	800c84e <HAL_TIM_ConfigClockSource+0x120>
 800c77e:	2b40      	cmp	r3, #64	; 0x40
 800c780:	d80b      	bhi.n	800c79a <HAL_TIM_ConfigClockSource+0x6c>
 800c782:	2b10      	cmp	r3, #16
 800c784:	d073      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x140>
 800c786:	2b10      	cmp	r3, #16
 800c788:	d802      	bhi.n	800c790 <HAL_TIM_ConfigClockSource+0x62>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d06f      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c78e:	e078      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c790:	2b20      	cmp	r3, #32
 800c792:	d06c      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x140>
 800c794:	2b30      	cmp	r3, #48	; 0x30
 800c796:	d06a      	beq.n	800c86e <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c798:	e073      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c79a:	2b70      	cmp	r3, #112	; 0x70
 800c79c:	d00d      	beq.n	800c7ba <HAL_TIM_ConfigClockSource+0x8c>
 800c79e:	2b70      	cmp	r3, #112	; 0x70
 800c7a0:	d804      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x7e>
 800c7a2:	2b50      	cmp	r3, #80	; 0x50
 800c7a4:	d033      	beq.n	800c80e <HAL_TIM_ConfigClockSource+0xe0>
 800c7a6:	2b60      	cmp	r3, #96	; 0x60
 800c7a8:	d041      	beq.n	800c82e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c7aa:	e06a      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c7ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7b0:	d066      	beq.n	800c880 <HAL_TIM_ConfigClockSource+0x152>
 800c7b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7b6:	d017      	beq.n	800c7e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c7b8:	e063      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6818      	ldr	r0, [r3, #0]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	6899      	ldr	r1, [r3, #8]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	f000 fb59 	bl	800ce80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c7dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	609a      	str	r2, [r3, #8]
      break;
 800c7e6:	e04c      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6818      	ldr	r0, [r3, #0]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	6899      	ldr	r1, [r3, #8]
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	f000 fb42 	bl	800ce80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	689a      	ldr	r2, [r3, #8]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c80a:	609a      	str	r2, [r3, #8]
      break;
 800c80c:	e039      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6818      	ldr	r0, [r3, #0]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	6859      	ldr	r1, [r3, #4]
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	461a      	mov	r2, r3
 800c81c:	f000 fab6 	bl	800cd8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2150      	movs	r1, #80	; 0x50
 800c826:	4618      	mov	r0, r3
 800c828:	f000 fb0f 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c82c:	e029      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	6859      	ldr	r1, [r3, #4]
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	461a      	mov	r2, r3
 800c83c:	f000 fad5 	bl	800cdea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2160      	movs	r1, #96	; 0x60
 800c846:	4618      	mov	r0, r3
 800c848:	f000 faff 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c84c:	e019      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	6859      	ldr	r1, [r3, #4]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	461a      	mov	r2, r3
 800c85c:	f000 fa96 	bl	800cd8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2140      	movs	r1, #64	; 0x40
 800c866:	4618      	mov	r0, r3
 800c868:	f000 faef 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c86c:	e009      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f000 fae6 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c87e:	e000      	b.n	800c882 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c880:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a40      	ldr	r2, [pc, #256]	; (800ca00 <TIM_Base_SetConfig+0x114>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d013      	beq.n	800c92c <TIM_Base_SetConfig+0x40>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c90a:	d00f      	beq.n	800c92c <TIM_Base_SetConfig+0x40>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a3d      	ldr	r2, [pc, #244]	; (800ca04 <TIM_Base_SetConfig+0x118>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d00b      	beq.n	800c92c <TIM_Base_SetConfig+0x40>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a3c      	ldr	r2, [pc, #240]	; (800ca08 <TIM_Base_SetConfig+0x11c>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d007      	beq.n	800c92c <TIM_Base_SetConfig+0x40>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a3b      	ldr	r2, [pc, #236]	; (800ca0c <TIM_Base_SetConfig+0x120>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d003      	beq.n	800c92c <TIM_Base_SetConfig+0x40>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a3a      	ldr	r2, [pc, #232]	; (800ca10 <TIM_Base_SetConfig+0x124>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d108      	bne.n	800c93e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a2f      	ldr	r2, [pc, #188]	; (800ca00 <TIM_Base_SetConfig+0x114>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d02b      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c94c:	d027      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	4a2c      	ldr	r2, [pc, #176]	; (800ca04 <TIM_Base_SetConfig+0x118>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d023      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a2b      	ldr	r2, [pc, #172]	; (800ca08 <TIM_Base_SetConfig+0x11c>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d01f      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a2a      	ldr	r2, [pc, #168]	; (800ca0c <TIM_Base_SetConfig+0x120>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d01b      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a29      	ldr	r2, [pc, #164]	; (800ca10 <TIM_Base_SetConfig+0x124>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d017      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a28      	ldr	r2, [pc, #160]	; (800ca14 <TIM_Base_SetConfig+0x128>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d013      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a27      	ldr	r2, [pc, #156]	; (800ca18 <TIM_Base_SetConfig+0x12c>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d00f      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a26      	ldr	r2, [pc, #152]	; (800ca1c <TIM_Base_SetConfig+0x130>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d00b      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a25      	ldr	r2, [pc, #148]	; (800ca20 <TIM_Base_SetConfig+0x134>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d007      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a24      	ldr	r2, [pc, #144]	; (800ca24 <TIM_Base_SetConfig+0x138>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d003      	beq.n	800c99e <TIM_Base_SetConfig+0xb2>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a23      	ldr	r2, [pc, #140]	; (800ca28 <TIM_Base_SetConfig+0x13c>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d108      	bne.n	800c9b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	689a      	ldr	r2, [r3, #8]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a0a      	ldr	r2, [pc, #40]	; (800ca00 <TIM_Base_SetConfig+0x114>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d003      	beq.n	800c9e4 <TIM_Base_SetConfig+0xf8>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a0c      	ldr	r2, [pc, #48]	; (800ca10 <TIM_Base_SetConfig+0x124>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d103      	bne.n	800c9ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	691a      	ldr	r2, [r3, #16]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	615a      	str	r2, [r3, #20]
}
 800c9f2:	bf00      	nop
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	40010000 	.word	0x40010000
 800ca04:	40000400 	.word	0x40000400
 800ca08:	40000800 	.word	0x40000800
 800ca0c:	40000c00 	.word	0x40000c00
 800ca10:	40010400 	.word	0x40010400
 800ca14:	40014000 	.word	0x40014000
 800ca18:	40014400 	.word	0x40014400
 800ca1c:	40014800 	.word	0x40014800
 800ca20:	40001800 	.word	0x40001800
 800ca24:	40001c00 	.word	0x40001c00
 800ca28:	40002000 	.word	0x40002000

0800ca2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	f023 0201 	bic.w	r2, r3, #1
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f023 0303 	bic.w	r3, r3, #3
 800ca62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	f023 0302 	bic.w	r3, r3, #2
 800ca74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a20      	ldr	r2, [pc, #128]	; (800cb04 <TIM_OC1_SetConfig+0xd8>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d003      	beq.n	800ca90 <TIM_OC1_SetConfig+0x64>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a1f      	ldr	r2, [pc, #124]	; (800cb08 <TIM_OC1_SetConfig+0xdc>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d10c      	bne.n	800caaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	f023 0308 	bic.w	r3, r3, #8
 800ca96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f023 0304 	bic.w	r3, r3, #4
 800caa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4a15      	ldr	r2, [pc, #84]	; (800cb04 <TIM_OC1_SetConfig+0xd8>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d003      	beq.n	800caba <TIM_OC1_SetConfig+0x8e>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a14      	ldr	r2, [pc, #80]	; (800cb08 <TIM_OC1_SetConfig+0xdc>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d111      	bne.n	800cade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	693a      	ldr	r2, [r7, #16]
 800cada:	4313      	orrs	r3, r2
 800cadc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	685a      	ldr	r2, [r3, #4]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	621a      	str	r2, [r3, #32]
}
 800caf8:	bf00      	nop
 800cafa:	371c      	adds	r7, #28
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	40010000 	.word	0x40010000
 800cb08:	40010400 	.word	0x40010400

0800cb0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b087      	sub	sp, #28
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	f023 0210 	bic.w	r2, r3, #16
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	021b      	lsls	r3, r3, #8
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f023 0320 	bic.w	r3, r3, #32
 800cb56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	011b      	lsls	r3, r3, #4
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a22      	ldr	r2, [pc, #136]	; (800cbf0 <TIM_OC2_SetConfig+0xe4>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d003      	beq.n	800cb74 <TIM_OC2_SetConfig+0x68>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a21      	ldr	r2, [pc, #132]	; (800cbf4 <TIM_OC2_SetConfig+0xe8>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d10d      	bne.n	800cb90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	011b      	lsls	r3, r3, #4
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a17      	ldr	r2, [pc, #92]	; (800cbf0 <TIM_OC2_SetConfig+0xe4>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d003      	beq.n	800cba0 <TIM_OC2_SetConfig+0x94>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a16      	ldr	r2, [pc, #88]	; (800cbf4 <TIM_OC2_SetConfig+0xe8>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d113      	bne.n	800cbc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	693a      	ldr	r2, [r7, #16]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	693a      	ldr	r2, [r7, #16]
 800cbcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68fa      	ldr	r2, [r7, #12]
 800cbd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	621a      	str	r2, [r3, #32]
}
 800cbe2:	bf00      	nop
 800cbe4:	371c      	adds	r7, #28
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	40010000 	.word	0x40010000
 800cbf4:	40010400 	.word	0x40010400

0800cbf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f023 0303 	bic.w	r3, r3, #3
 800cc2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	021b      	lsls	r3, r3, #8
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a21      	ldr	r2, [pc, #132]	; (800ccd8 <TIM_OC3_SetConfig+0xe0>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d003      	beq.n	800cc5e <TIM_OC3_SetConfig+0x66>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a20      	ldr	r2, [pc, #128]	; (800ccdc <TIM_OC3_SetConfig+0xe4>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d10d      	bne.n	800cc7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	021b      	lsls	r3, r3, #8
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a16      	ldr	r2, [pc, #88]	; (800ccd8 <TIM_OC3_SetConfig+0xe0>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d003      	beq.n	800cc8a <TIM_OC3_SetConfig+0x92>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a15      	ldr	r2, [pc, #84]	; (800ccdc <TIM_OC3_SetConfig+0xe4>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d113      	bne.n	800ccb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	011b      	lsls	r3, r3, #4
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	011b      	lsls	r3, r3, #4
 800ccac:	693a      	ldr	r2, [r7, #16]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	621a      	str	r2, [r3, #32]
}
 800cccc:	bf00      	nop
 800ccce:	371c      	adds	r7, #28
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	40010000 	.word	0x40010000
 800ccdc:	40010400 	.word	0x40010400

0800cce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	021b      	lsls	r3, r3, #8
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	4313      	orrs	r3, r2
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	031b      	lsls	r3, r3, #12
 800cd32:	693a      	ldr	r2, [r7, #16]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a12      	ldr	r2, [pc, #72]	; (800cd84 <TIM_OC4_SetConfig+0xa4>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d003      	beq.n	800cd48 <TIM_OC4_SetConfig+0x68>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a11      	ldr	r2, [pc, #68]	; (800cd88 <TIM_OC4_SetConfig+0xa8>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d109      	bne.n	800cd5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	695b      	ldr	r3, [r3, #20]
 800cd54:	019b      	lsls	r3, r3, #6
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	621a      	str	r2, [r3, #32]
}
 800cd76:	bf00      	nop
 800cd78:	371c      	adds	r7, #28
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	40010000 	.word	0x40010000
 800cd88:	40010400 	.word	0x40010400

0800cd8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b087      	sub	sp, #28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
 800cd9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	f023 0201 	bic.w	r2, r3, #1
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cdb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f023 030a 	bic.w	r3, r3, #10
 800cdc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	621a      	str	r2, [r3, #32]
}
 800cdde:	bf00      	nop
 800cde0:	371c      	adds	r7, #28
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b087      	sub	sp, #28
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	60b9      	str	r1, [r7, #8]
 800cdf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	f023 0210 	bic.w	r2, r3, #16
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	699b      	ldr	r3, [r3, #24]
 800ce06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6a1b      	ldr	r3, [r3, #32]
 800ce0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	031b      	lsls	r3, r3, #12
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	011b      	lsls	r3, r3, #4
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	697a      	ldr	r2, [r7, #20]
 800ce36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	693a      	ldr	r2, [r7, #16]
 800ce3c:	621a      	str	r2, [r3, #32]
}
 800ce3e:	bf00      	nop
 800ce40:	371c      	adds	r7, #28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	f043 0307 	orr.w	r3, r3, #7
 800ce6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	609a      	str	r2, [r3, #8]
}
 800ce74:	bf00      	nop
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b087      	sub	sp, #28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	021a      	lsls	r2, r3, #8
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	431a      	orrs	r2, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	609a      	str	r2, [r3, #8]
}
 800ceb4:	bf00      	nop
 800ceb6:	371c      	adds	r7, #28
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b087      	sub	sp, #28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f003 031f 	and.w	r3, r3, #31
 800ced2:	2201      	movs	r2, #1
 800ced4:	fa02 f303 	lsl.w	r3, r2, r3
 800ced8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6a1a      	ldr	r2, [r3, #32]
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	43db      	mvns	r3, r3
 800cee2:	401a      	ands	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6a1a      	ldr	r2, [r3, #32]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	f003 031f 	and.w	r3, r3, #31
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	fa01 f303 	lsl.w	r3, r1, r3
 800cef8:	431a      	orrs	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	621a      	str	r2, [r3, #32]
}
 800cefe:	bf00      	nop
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b084      	sub	sp, #16
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	2b04      	cmp	r3, #4
 800cf18:	d00d      	beq.n	800cf36 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800cf1a:	2b08      	cmp	r3, #8
 800cf1c:	d014      	beq.n	800cf48 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d000      	beq.n	800cf24 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800cf22:	e01a      	b.n	800cf5a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68da      	ldr	r2, [r3, #12]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f042 0202 	orr.w	r2, r2, #2
 800cf32:	60da      	str	r2, [r3, #12]
      break;
 800cf34:	e011      	b.n	800cf5a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68da      	ldr	r2, [r3, #12]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f042 0204 	orr.w	r2, r2, #4
 800cf44:	60da      	str	r2, [r3, #12]
      break;
 800cf46:	e008      	b.n	800cf5a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68da      	ldr	r2, [r3, #12]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f042 0208 	orr.w	r2, r2, #8
 800cf56:	60da      	str	r2, [r3, #12]
      break;
 800cf58:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68da      	ldr	r2, [r3, #12]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf68:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2204      	movs	r2, #4
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 f93f 	bl	800d1f6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	f003 0307 	and.w	r3, r3, #7
 800cf92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b06      	cmp	r3, #6
 800cf98:	d007      	beq.n	800cfaa <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f042 0201 	orr.w	r2, r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	d00d      	beq.n	800cfe0 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800cfc4:	2b08      	cmp	r3, #8
 800cfc6:	d014      	beq.n	800cff2 <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d000      	beq.n	800cfce <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800cfcc:	e01a      	b.n	800d004 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68da      	ldr	r2, [r3, #12]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f022 0202 	bic.w	r2, r2, #2
 800cfdc:	60da      	str	r2, [r3, #12]
      break;
 800cfde:	e011      	b.n	800d004 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68da      	ldr	r2, [r3, #12]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f022 0204 	bic.w	r2, r2, #4
 800cfee:	60da      	str	r2, [r3, #12]
      break;
 800cff0:	e008      	b.n	800d004 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68da      	ldr	r2, [r3, #12]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f022 0208 	bic.w	r2, r2, #8
 800d000:	60da      	str	r2, [r3, #12]
      break;
 800d002:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2200      	movs	r2, #0
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 f8f2 	bl	800d1f6 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6a1b      	ldr	r3, [r3, #32]
 800d018:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	f240 4344 	movw	r3, #1092	; 0x444
 800d020:	4013      	ands	r3, r2
 800d022:	2b00      	cmp	r3, #0
 800d024:	d107      	bne.n	800d036 <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68da      	ldr	r2, [r3, #12]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d034:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	6a1a      	ldr	r2, [r3, #32]
 800d03c:	f241 1311 	movw	r3, #4369	; 0x1111
 800d040:	4013      	ands	r3, r2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10f      	bne.n	800d066 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6a1a      	ldr	r2, [r3, #32]
 800d04c:	f240 4344 	movw	r3, #1092	; 0x444
 800d050:	4013      	ands	r3, r2
 800d052:	2b00      	cmp	r3, #0
 800d054:	d107      	bne.n	800d066 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d064:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	6a1a      	ldr	r2, [r3, #32]
 800d06c:	f241 1311 	movw	r3, #4369	; 0x1111
 800d070:	4013      	ands	r3, r2
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10f      	bne.n	800d096 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6a1a      	ldr	r2, [r3, #32]
 800d07c:	f240 4344 	movw	r3, #1092	; 0x444
 800d080:	4013      	ands	r3, r2
 800d082:	2b00      	cmp	r3, #0
 800d084:	d107      	bne.n	800d096 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f022 0201 	bic.w	r2, r2, #1
 800d094:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d101      	bne.n	800d0b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0b4:	2302      	movs	r3, #2
 800d0b6:	e032      	b.n	800d11e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0f0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b085      	sub	sp, #20
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d101      	bne.n	800d146 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d142:	2302      	movs	r3, #2
 800d144:	e03d      	b.n	800d1c2 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	4313      	orrs	r3, r2
 800d15a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	4313      	orrs	r3, r2
 800d168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	4313      	orrs	r3, r2
 800d176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4313      	orrs	r3, r2
 800d184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	4313      	orrs	r3, r2
 800d192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	69db      	ldr	r3, [r3, #28]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b083      	sub	sp, #12
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d1d6:	bf00      	nop
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b083      	sub	sp, #12
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1ea:	bf00      	nop
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d1f6:	b480      	push	{r7}
 800d1f8:	b087      	sub	sp, #28
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	f003 031f 	and.w	r3, r3, #31
 800d208:	2204      	movs	r2, #4
 800d20a:	fa02 f303 	lsl.w	r3, r2, r3
 800d20e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6a1a      	ldr	r2, [r3, #32]
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	43db      	mvns	r3, r3
 800d218:	401a      	ands	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6a1a      	ldr	r2, [r3, #32]
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	f003 031f 	and.w	r3, r3, #31
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	fa01 f303 	lsl.w	r3, r1, r3
 800d22e:	431a      	orrs	r2, r3
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	621a      	str	r2, [r3, #32]
}
 800d234:	bf00      	nop
 800d236:	371c      	adds	r7, #28
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e03f      	b.n	800d2d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d106      	bne.n	800d26c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f003 fce4 	bl	8010c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2224      	movs	r2, #36	; 0x24
 800d270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68da      	ldr	r2, [r3, #12]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fa65 	bl	800d754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	691a      	ldr	r2, [r3, #16]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	695a      	ldr	r2, [r3, #20]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d2a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68da      	ldr	r2, [r3, #12]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d2b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2220      	movs	r2, #32
 800d2c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2220      	movs	r2, #32
 800d2cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d2d0:	2300      	movs	r3, #0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
	...

0800d2dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b088      	sub	sp, #32
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d300:	2300      	movs	r3, #0
 800d302:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	f003 030f 	and.w	r3, r3, #15
 800d30a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10d      	bne.n	800d32e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	f003 0320 	and.w	r3, r3, #32
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d008      	beq.n	800d32e <HAL_UART_IRQHandler+0x52>
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	f003 0320 	and.w	r3, r3, #32
 800d322:	2b00      	cmp	r3, #0
 800d324:	d003      	beq.n	800d32e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f992 	bl	800d650 <UART_Receive_IT>
      return;
 800d32c:	e0cc      	b.n	800d4c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	2b00      	cmp	r3, #0
 800d332:	f000 80ab 	beq.w	800d48c <HAL_UART_IRQHandler+0x1b0>
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f003 0301 	and.w	r3, r3, #1
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d105      	bne.n	800d34c <HAL_UART_IRQHandler+0x70>
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 80a0 	beq.w	800d48c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00a      	beq.n	800d36c <HAL_UART_IRQHandler+0x90>
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d005      	beq.n	800d36c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d364:	f043 0201 	orr.w	r2, r3, #1
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	f003 0304 	and.w	r3, r3, #4
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00a      	beq.n	800d38c <HAL_UART_IRQHandler+0xb0>
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d005      	beq.n	800d38c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d384:	f043 0202 	orr.w	r2, r3, #2
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	f003 0302 	and.w	r3, r3, #2
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <HAL_UART_IRQHandler+0xd0>
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d005      	beq.n	800d3ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a4:	f043 0204 	orr.w	r2, r3, #4
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	f003 0308 	and.w	r3, r3, #8
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00a      	beq.n	800d3cc <HAL_UART_IRQHandler+0xf0>
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d005      	beq.n	800d3cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c4:	f043 0208 	orr.w	r2, r3, #8
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d078      	beq.n	800d4c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	f003 0320 	and.w	r3, r3, #32
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d007      	beq.n	800d3ee <HAL_UART_IRQHandler+0x112>
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	f003 0320 	and.w	r3, r3, #32
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 f931 	bl	800d650 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	695b      	ldr	r3, [r3, #20]
 800d3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f8:	2b40      	cmp	r3, #64	; 0x40
 800d3fa:	bf0c      	ite	eq
 800d3fc:	2301      	moveq	r3, #1
 800d3fe:	2300      	movne	r3, #0
 800d400:	b2db      	uxtb	r3, r3
 800d402:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d408:	f003 0308 	and.w	r3, r3, #8
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <HAL_UART_IRQHandler+0x13a>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d031      	beq.n	800d47a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f87a 	bl	800d510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d426:	2b40      	cmp	r3, #64	; 0x40
 800d428:	d123      	bne.n	800d472 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	695a      	ldr	r2, [r3, #20]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d438:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d013      	beq.n	800d46a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d446:	4a22      	ldr	r2, [pc, #136]	; (800d4d0 <HAL_UART_IRQHandler+0x1f4>)
 800d448:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fd f876 	bl	800a540 <HAL_DMA_Abort_IT>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d016      	beq.n	800d488 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d464:	4610      	mov	r0, r2
 800d466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d468:	e00e      	b.n	800d488 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f846 	bl	800d4fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d470:	e00a      	b.n	800d488 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f842 	bl	800d4fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d478:	e006      	b.n	800d488 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f83e 	bl	800d4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d486:	e01e      	b.n	800d4c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d488:	bf00      	nop
    return;
 800d48a:	e01c      	b.n	800d4c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d492:	2b00      	cmp	r3, #0
 800d494:	d008      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x1cc>
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d003      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 f867 	bl	800d574 <UART_Transmit_IT>
    return;
 800d4a6:	e00f      	b.n	800d4c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00a      	beq.n	800d4c8 <HAL_UART_IRQHandler+0x1ec>
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d005      	beq.n	800d4c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f8af 	bl	800d620 <UART_EndTransmit_IT>
    return;
 800d4c2:	bf00      	nop
 800d4c4:	e000      	b.n	800d4c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 800d4c6:	bf00      	nop
  }
}
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	0800d54d 	.word	0x0800d54d

0800d4d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d504:	bf00      	nop
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68da      	ldr	r2, [r3, #12]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d526:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	695a      	ldr	r2, [r3, #20]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0201 	bic.w	r2, r2, #1
 800d536:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2220      	movs	r2, #32
 800d53c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f7ff ffc8 	bl	800d4fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d56c:	bf00      	nop
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d582:	b2db      	uxtb	r3, r3
 800d584:	2b21      	cmp	r3, #33	; 0x21
 800d586:	d144      	bne.n	800d612 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d590:	d11a      	bne.n	800d5c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a1b      	ldr	r3, [r3, #32]
 800d596:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	461a      	mov	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d105      	bne.n	800d5bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a1b      	ldr	r3, [r3, #32]
 800d5b4:	1c9a      	adds	r2, r3, #2
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	621a      	str	r2, [r3, #32]
 800d5ba:	e00e      	b.n	800d5da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6a1b      	ldr	r3, [r3, #32]
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	621a      	str	r2, [r3, #32]
 800d5c6:	e008      	b.n	800d5da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a1b      	ldr	r3, [r3, #32]
 800d5cc:	1c59      	adds	r1, r3, #1
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	6211      	str	r1, [r2, #32]
 800d5d2:	781a      	ldrb	r2, [r3, #0]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10f      	bne.n	800d60e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	68da      	ldr	r2, [r3, #12]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68da      	ldr	r2, [r3, #12]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d60c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	e000      	b.n	800d614 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d612:	2302      	movs	r3, #2
  }
}
 800d614:	4618      	mov	r0, r3
 800d616:	3714      	adds	r7, #20
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68da      	ldr	r2, [r3, #12]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d636:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2220      	movs	r2, #32
 800d63c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff ff47 	bl	800d4d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	2b22      	cmp	r3, #34	; 0x22
 800d662:	d171      	bne.n	800d748 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d66c:	d123      	bne.n	800d6b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d672:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10e      	bne.n	800d69a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	b29b      	uxth	r3, r3
 800d684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d688:	b29a      	uxth	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d692:	1c9a      	adds	r2, r3, #2
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	629a      	str	r2, [r3, #40]	; 0x28
 800d698:	e029      	b.n	800d6ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ae:	1c5a      	adds	r2, r3, #1
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	629a      	str	r2, [r3, #40]	; 0x28
 800d6b4:	e01b      	b.n	800d6ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6858      	ldr	r0, [r3, #4]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c8:	1c59      	adds	r1, r3, #1
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	6291      	str	r1, [r2, #40]	; 0x28
 800d6ce:	b2c2      	uxtb	r2, r0
 800d6d0:	701a      	strb	r2, [r3, #0]
 800d6d2:	e00c      	b.n	800d6ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e0:	1c58      	adds	r0, r3, #1
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	6288      	str	r0, [r1, #40]	; 0x28
 800d6e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d6ea:	b2d2      	uxtb	r2, r2
 800d6ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d120      	bne.n	800d744 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	68da      	ldr	r2, [r3, #12]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f022 0220 	bic.w	r2, r2, #32
 800d710:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68da      	ldr	r2, [r3, #12]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d720:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	695a      	ldr	r2, [r3, #20]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f022 0201 	bic.w	r2, r2, #1
 800d730:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2220      	movs	r2, #32
 800d736:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff fed4 	bl	800d4e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	e002      	b.n	800d74a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	e000      	b.n	800d74a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d748:	2302      	movs	r3, #2
  }
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d754:	b5b0      	push	{r4, r5, r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	691b      	ldr	r3, [r3, #16]
 800d762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	68da      	ldr	r2, [r3, #12]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	430a      	orrs	r2, r1
 800d770:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	689a      	ldr	r2, [r3, #8]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	431a      	orrs	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	431a      	orrs	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	69db      	ldr	r3, [r3, #28]
 800d786:	4313      	orrs	r3, r2
 800d788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d794:	f023 030c 	bic.w	r3, r3, #12
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	6812      	ldr	r2, [r2, #0]
 800d79c:	68f9      	ldr	r1, [r7, #12]
 800d79e:	430b      	orrs	r3, r1
 800d7a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	699a      	ldr	r2, [r3, #24]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	430a      	orrs	r2, r1
 800d7b6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	69db      	ldr	r3, [r3, #28]
 800d7bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7c0:	f040 80e4 	bne.w	800d98c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4aab      	ldr	r2, [pc, #684]	; (800da78 <UART_SetConfig+0x324>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d004      	beq.n	800d7d8 <UART_SetConfig+0x84>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4aaa      	ldr	r2, [pc, #680]	; (800da7c <UART_SetConfig+0x328>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d16c      	bne.n	800d8b2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d7d8:	f7fd fc1c 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	4613      	mov	r3, r2
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	4413      	add	r3, r2
 800d7e4:	009a      	lsls	r2, r3, #2
 800d7e6:	441a      	add	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f2:	4aa3      	ldr	r2, [pc, #652]	; (800da80 <UART_SetConfig+0x32c>)
 800d7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f8:	095b      	lsrs	r3, r3, #5
 800d7fa:	011c      	lsls	r4, r3, #4
 800d7fc:	f7fd fc0a 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d800:	4602      	mov	r2, r0
 800d802:	4613      	mov	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	009a      	lsls	r2, r3, #2
 800d80a:	441a      	add	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	fbb2 f5f3 	udiv	r5, r2, r3
 800d816:	f7fd fbfd 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d81a:	4602      	mov	r2, r0
 800d81c:	4613      	mov	r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4413      	add	r3, r2
 800d822:	009a      	lsls	r2, r3, #2
 800d824:	441a      	add	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d830:	4a93      	ldr	r2, [pc, #588]	; (800da80 <UART_SetConfig+0x32c>)
 800d832:	fba2 2303 	umull	r2, r3, r2, r3
 800d836:	095b      	lsrs	r3, r3, #5
 800d838:	2264      	movs	r2, #100	; 0x64
 800d83a:	fb02 f303 	mul.w	r3, r2, r3
 800d83e:	1aeb      	subs	r3, r5, r3
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	3332      	adds	r3, #50	; 0x32
 800d844:	4a8e      	ldr	r2, [pc, #568]	; (800da80 <UART_SetConfig+0x32c>)
 800d846:	fba2 2303 	umull	r2, r3, r2, r3
 800d84a:	095b      	lsrs	r3, r3, #5
 800d84c:	005b      	lsls	r3, r3, #1
 800d84e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d852:	441c      	add	r4, r3
 800d854:	f7fd fbde 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d858:	4602      	mov	r2, r0
 800d85a:	4613      	mov	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4413      	add	r3, r2
 800d860:	009a      	lsls	r2, r3, #2
 800d862:	441a      	add	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	005b      	lsls	r3, r3, #1
 800d86a:	fbb2 f5f3 	udiv	r5, r2, r3
 800d86e:	f7fd fbd1 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d872:	4602      	mov	r2, r0
 800d874:	4613      	mov	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	009a      	lsls	r2, r3, #2
 800d87c:	441a      	add	r2, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	fbb2 f3f3 	udiv	r3, r2, r3
 800d888:	4a7d      	ldr	r2, [pc, #500]	; (800da80 <UART_SetConfig+0x32c>)
 800d88a:	fba2 2303 	umull	r2, r3, r2, r3
 800d88e:	095b      	lsrs	r3, r3, #5
 800d890:	2264      	movs	r2, #100	; 0x64
 800d892:	fb02 f303 	mul.w	r3, r2, r3
 800d896:	1aeb      	subs	r3, r5, r3
 800d898:	00db      	lsls	r3, r3, #3
 800d89a:	3332      	adds	r3, #50	; 0x32
 800d89c:	4a78      	ldr	r2, [pc, #480]	; (800da80 <UART_SetConfig+0x32c>)
 800d89e:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a2:	095b      	lsrs	r3, r3, #5
 800d8a4:	f003 0207 	and.w	r2, r3, #7
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4422      	add	r2, r4
 800d8ae:	609a      	str	r2, [r3, #8]
 800d8b0:	e154      	b.n	800db5c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d8b2:	f7fd fb9b 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	4413      	add	r3, r2
 800d8be:	009a      	lsls	r2, r3, #2
 800d8c0:	441a      	add	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8cc:	4a6c      	ldr	r2, [pc, #432]	; (800da80 <UART_SetConfig+0x32c>)
 800d8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d8d2:	095b      	lsrs	r3, r3, #5
 800d8d4:	011c      	lsls	r4, r3, #4
 800d8d6:	f7fd fb89 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	4613      	mov	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4413      	add	r3, r2
 800d8e2:	009a      	lsls	r2, r3, #2
 800d8e4:	441a      	add	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	005b      	lsls	r3, r3, #1
 800d8ec:	fbb2 f5f3 	udiv	r5, r2, r3
 800d8f0:	f7fd fb7c 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4413      	add	r3, r2
 800d8fc:	009a      	lsls	r2, r3, #2
 800d8fe:	441a      	add	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	005b      	lsls	r3, r3, #1
 800d906:	fbb2 f3f3 	udiv	r3, r2, r3
 800d90a:	4a5d      	ldr	r2, [pc, #372]	; (800da80 <UART_SetConfig+0x32c>)
 800d90c:	fba2 2303 	umull	r2, r3, r2, r3
 800d910:	095b      	lsrs	r3, r3, #5
 800d912:	2264      	movs	r2, #100	; 0x64
 800d914:	fb02 f303 	mul.w	r3, r2, r3
 800d918:	1aeb      	subs	r3, r5, r3
 800d91a:	00db      	lsls	r3, r3, #3
 800d91c:	3332      	adds	r3, #50	; 0x32
 800d91e:	4a58      	ldr	r2, [pc, #352]	; (800da80 <UART_SetConfig+0x32c>)
 800d920:	fba2 2303 	umull	r2, r3, r2, r3
 800d924:	095b      	lsrs	r3, r3, #5
 800d926:	005b      	lsls	r3, r3, #1
 800d928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d92c:	441c      	add	r4, r3
 800d92e:	f7fd fb5d 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800d932:	4602      	mov	r2, r0
 800d934:	4613      	mov	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	009a      	lsls	r2, r3, #2
 800d93c:	441a      	add	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	005b      	lsls	r3, r3, #1
 800d944:	fbb2 f5f3 	udiv	r5, r2, r3
 800d948:	f7fd fb50 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800d94c:	4602      	mov	r2, r0
 800d94e:	4613      	mov	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	4413      	add	r3, r2
 800d954:	009a      	lsls	r2, r3, #2
 800d956:	441a      	add	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d962:	4a47      	ldr	r2, [pc, #284]	; (800da80 <UART_SetConfig+0x32c>)
 800d964:	fba2 2303 	umull	r2, r3, r2, r3
 800d968:	095b      	lsrs	r3, r3, #5
 800d96a:	2264      	movs	r2, #100	; 0x64
 800d96c:	fb02 f303 	mul.w	r3, r2, r3
 800d970:	1aeb      	subs	r3, r5, r3
 800d972:	00db      	lsls	r3, r3, #3
 800d974:	3332      	adds	r3, #50	; 0x32
 800d976:	4a42      	ldr	r2, [pc, #264]	; (800da80 <UART_SetConfig+0x32c>)
 800d978:	fba2 2303 	umull	r2, r3, r2, r3
 800d97c:	095b      	lsrs	r3, r3, #5
 800d97e:	f003 0207 	and.w	r2, r3, #7
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4422      	add	r2, r4
 800d988:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800d98a:	e0e7      	b.n	800db5c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a39      	ldr	r2, [pc, #228]	; (800da78 <UART_SetConfig+0x324>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d004      	beq.n	800d9a0 <UART_SetConfig+0x24c>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a38      	ldr	r2, [pc, #224]	; (800da7c <UART_SetConfig+0x328>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d171      	bne.n	800da84 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d9a0:	f7fd fb38 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	009a      	lsls	r2, r3, #2
 800d9ae:	441a      	add	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ba:	4a31      	ldr	r2, [pc, #196]	; (800da80 <UART_SetConfig+0x32c>)
 800d9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c0:	095b      	lsrs	r3, r3, #5
 800d9c2:	011c      	lsls	r4, r3, #4
 800d9c4:	f7fd fb26 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	009a      	lsls	r2, r3, #2
 800d9d2:	441a      	add	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	fbb2 f5f3 	udiv	r5, r2, r3
 800d9de:	f7fd fb19 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	009a      	lsls	r2, r3, #2
 800d9ec:	441a      	add	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9f8:	4a21      	ldr	r2, [pc, #132]	; (800da80 <UART_SetConfig+0x32c>)
 800d9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d9fe:	095b      	lsrs	r3, r3, #5
 800da00:	2264      	movs	r2, #100	; 0x64
 800da02:	fb02 f303 	mul.w	r3, r2, r3
 800da06:	1aeb      	subs	r3, r5, r3
 800da08:	011b      	lsls	r3, r3, #4
 800da0a:	3332      	adds	r3, #50	; 0x32
 800da0c:	4a1c      	ldr	r2, [pc, #112]	; (800da80 <UART_SetConfig+0x32c>)
 800da0e:	fba2 2303 	umull	r2, r3, r2, r3
 800da12:	095b      	lsrs	r3, r3, #5
 800da14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da18:	441c      	add	r4, r3
 800da1a:	f7fd fafb 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800da1e:	4602      	mov	r2, r0
 800da20:	4613      	mov	r3, r2
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	4413      	add	r3, r2
 800da26:	009a      	lsls	r2, r3, #2
 800da28:	441a      	add	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	fbb2 f5f3 	udiv	r5, r2, r3
 800da34:	f7fd faee 	bl	800b014 <HAL_RCC_GetPCLK2Freq>
 800da38:	4602      	mov	r2, r0
 800da3a:	4613      	mov	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4413      	add	r3, r2
 800da40:	009a      	lsls	r2, r3, #2
 800da42:	441a      	add	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da4e:	4a0c      	ldr	r2, [pc, #48]	; (800da80 <UART_SetConfig+0x32c>)
 800da50:	fba2 2303 	umull	r2, r3, r2, r3
 800da54:	095b      	lsrs	r3, r3, #5
 800da56:	2264      	movs	r2, #100	; 0x64
 800da58:	fb02 f303 	mul.w	r3, r2, r3
 800da5c:	1aeb      	subs	r3, r5, r3
 800da5e:	011b      	lsls	r3, r3, #4
 800da60:	3332      	adds	r3, #50	; 0x32
 800da62:	4a07      	ldr	r2, [pc, #28]	; (800da80 <UART_SetConfig+0x32c>)
 800da64:	fba2 2303 	umull	r2, r3, r2, r3
 800da68:	095b      	lsrs	r3, r3, #5
 800da6a:	f003 020f 	and.w	r2, r3, #15
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4422      	add	r2, r4
 800da74:	609a      	str	r2, [r3, #8]
 800da76:	e071      	b.n	800db5c <UART_SetConfig+0x408>
 800da78:	40011000 	.word	0x40011000
 800da7c:	40011400 	.word	0x40011400
 800da80:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800da84:	f7fd fab2 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800da88:	4602      	mov	r2, r0
 800da8a:	4613      	mov	r3, r2
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4413      	add	r3, r2
 800da90:	009a      	lsls	r2, r3, #2
 800da92:	441a      	add	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da9e:	4a31      	ldr	r2, [pc, #196]	; (800db64 <UART_SetConfig+0x410>)
 800daa0:	fba2 2303 	umull	r2, r3, r2, r3
 800daa4:	095b      	lsrs	r3, r3, #5
 800daa6:	011c      	lsls	r4, r3, #4
 800daa8:	f7fd faa0 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800daac:	4602      	mov	r2, r0
 800daae:	4613      	mov	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	009a      	lsls	r2, r3, #2
 800dab6:	441a      	add	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	fbb2 f5f3 	udiv	r5, r2, r3
 800dac2:	f7fd fa93 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800dac6:	4602      	mov	r2, r0
 800dac8:	4613      	mov	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4413      	add	r3, r2
 800dace:	009a      	lsls	r2, r3, #2
 800dad0:	441a      	add	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dadc:	4a21      	ldr	r2, [pc, #132]	; (800db64 <UART_SetConfig+0x410>)
 800dade:	fba2 2303 	umull	r2, r3, r2, r3
 800dae2:	095b      	lsrs	r3, r3, #5
 800dae4:	2264      	movs	r2, #100	; 0x64
 800dae6:	fb02 f303 	mul.w	r3, r2, r3
 800daea:	1aeb      	subs	r3, r5, r3
 800daec:	011b      	lsls	r3, r3, #4
 800daee:	3332      	adds	r3, #50	; 0x32
 800daf0:	4a1c      	ldr	r2, [pc, #112]	; (800db64 <UART_SetConfig+0x410>)
 800daf2:	fba2 2303 	umull	r2, r3, r2, r3
 800daf6:	095b      	lsrs	r3, r3, #5
 800daf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dafc:	441c      	add	r4, r3
 800dafe:	f7fd fa75 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800db02:	4602      	mov	r2, r0
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009a      	lsls	r2, r3, #2
 800db0c:	441a      	add	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	fbb2 f5f3 	udiv	r5, r2, r3
 800db18:	f7fd fa68 	bl	800afec <HAL_RCC_GetPCLK1Freq>
 800db1c:	4602      	mov	r2, r0
 800db1e:	4613      	mov	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4413      	add	r3, r2
 800db24:	009a      	lsls	r2, r3, #2
 800db26:	441a      	add	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db32:	4a0c      	ldr	r2, [pc, #48]	; (800db64 <UART_SetConfig+0x410>)
 800db34:	fba2 2303 	umull	r2, r3, r2, r3
 800db38:	095b      	lsrs	r3, r3, #5
 800db3a:	2264      	movs	r2, #100	; 0x64
 800db3c:	fb02 f303 	mul.w	r3, r2, r3
 800db40:	1aeb      	subs	r3, r5, r3
 800db42:	011b      	lsls	r3, r3, #4
 800db44:	3332      	adds	r3, #50	; 0x32
 800db46:	4a07      	ldr	r2, [pc, #28]	; (800db64 <UART_SetConfig+0x410>)
 800db48:	fba2 2303 	umull	r2, r3, r2, r3
 800db4c:	095b      	lsrs	r3, r3, #5
 800db4e:	f003 020f 	and.w	r2, r3, #15
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4422      	add	r2, r4
 800db58:	609a      	str	r2, [r3, #8]
}
 800db5a:	e7ff      	b.n	800db5c <UART_SetConfig+0x408>
 800db5c:	bf00      	nop
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bdb0      	pop	{r4, r5, r7, pc}
 800db64:	51eb851f 	.word	0x51eb851f

0800db68 <ACR_Init>:
ACR_TypeDef mainACR;



void ACR_Init()
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0

	memset(&mainACR, 0x00, sizeof(mainACR));
 800db6c:	226c      	movs	r2, #108	; 0x6c
 800db6e:	2100      	movs	r1, #0
 800db70:	4812      	ldr	r0, [pc, #72]	; (800dbbc <ACR_Init+0x54>)
 800db72:	f003 f90e 	bl	8010d92 <memset>

	mainACR.Init.Kp = 0.1f;
 800db76:	4b11      	ldr	r3, [pc, #68]	; (800dbbc <ACR_Init+0x54>)
 800db78:	4a11      	ldr	r2, [pc, #68]	; (800dbc0 <ACR_Init+0x58>)
 800db7a:	601a      	str	r2, [r3, #0]
	mainACR.Init.Ki = 400.0f;
 800db7c:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <ACR_Init+0x54>)
 800db7e:	4a11      	ldr	r2, [pc, #68]	; (800dbc4 <ACR_Init+0x5c>)
 800db80:	605a      	str	r2, [r3, #4]

	mainACR.Init.Id_limit = 15.0f;
 800db82:	4b0e      	ldr	r3, [pc, #56]	; (800dbbc <ACR_Init+0x54>)
 800db84:	4a10      	ldr	r2, [pc, #64]	; (800dbc8 <ACR_Init+0x60>)
 800db86:	60da      	str	r2, [r3, #12]
	mainACR.Init.Iq_limit = 15.0f;
 800db88:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <ACR_Init+0x54>)
 800db8a:	4a0f      	ldr	r2, [pc, #60]	; (800dbc8 <ACR_Init+0x60>)
 800db8c:	611a      	str	r2, [r3, #16]

	mainACR.Init.Id_error_integ_limit = 1.0f;
 800db8e:	4b0b      	ldr	r3, [pc, #44]	; (800dbbc <ACR_Init+0x54>)
 800db90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800db94:	615a      	str	r2, [r3, #20]
	mainACR.Init.Iq_error_integ_limit = 1.0f;
 800db96:	4b09      	ldr	r3, [pc, #36]	; (800dbbc <ACR_Init+0x54>)
 800db98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800db9c:	619a      	str	r2, [r3, #24]

	mainACR.Init.cycleTime = 100E-6;
 800db9e:	4b07      	ldr	r3, [pc, #28]	; (800dbbc <ACR_Init+0x54>)
 800dba0:	4a0a      	ldr	r2, [pc, #40]	; (800dbcc <ACR_Init+0x64>)
 800dba2:	609a      	str	r2, [r3, #8]

	mainACR.Init.hEncoder = &mainEncoder;
 800dba4:	4b05      	ldr	r3, [pc, #20]	; (800dbbc <ACR_Init+0x54>)
 800dba6:	4a0a      	ldr	r2, [pc, #40]	; (800dbd0 <ACR_Init+0x68>)
 800dba8:	61da      	str	r2, [r3, #28]

	mainACR.Init.hCS = &mainCS;
 800dbaa:	4b04      	ldr	r3, [pc, #16]	; (800dbbc <ACR_Init+0x54>)
 800dbac:	4a09      	ldr	r2, [pc, #36]	; (800dbd4 <ACR_Init+0x6c>)
 800dbae:	621a      	str	r2, [r3, #32]
	mainACR.Init.htim = &htim8;
 800dbb0:	4b02      	ldr	r3, [pc, #8]	; (800dbbc <ACR_Init+0x54>)
 800dbb2:	4a09      	ldr	r2, [pc, #36]	; (800dbd8 <ACR_Init+0x70>)
 800dbb4:	625a      	str	r2, [r3, #36]	; 0x24

}
 800dbb6:	bf00      	nop
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	20000158 	.word	0x20000158
 800dbc0:	3dcccccd 	.word	0x3dcccccd
 800dbc4:	43c80000 	.word	0x43c80000
 800dbc8:	41700000 	.word	0x41700000
 800dbcc:	38d1b717 	.word	0x38d1b717
 800dbd0:	200004a8 	.word	0x200004a8
 800dbd4:	200001cc 	.word	0x200001cc
 800dbd8:	20000588 	.word	0x20000588

0800dbdc <ACR_Start>:



void ACR_Start(ACR_TypeDef *hACR)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]

	hACR->enable = 1;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ACR_Reset(hACR);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 faa1 	bl	800e134 <ACR_Reset>

}
 800dbf2:	bf00      	nop
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	0000      	movs	r0, r0
 800dbfc:	0000      	movs	r0, r0
	...

0800dc00 <ACR_Refresh>:
}



inline void ACR_Refresh(ACR_TypeDef *hACR)
{
 800dc00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
	static float _Id_ref;
	static float _Iq_ref;

	static ACR_InitTypeDef *hACR_Init;

	hACR_Init = &hACR->Init;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4ab0      	ldr	r2, [pc, #704]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dc0e:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800dc10:	2201      	movs	r2, #1
 800dc12:	2140      	movs	r1, #64	; 0x40
 800dc14:	48af      	ldr	r0, [pc, #700]	; (800ded4 <ACR_Refresh+0x2d4>)
 800dc16:	f7fd f8c7 	bl	800ada8 <HAL_GPIO_WritePin>
	/*
	hACR->Id_ref = 0.0f;
	hACR->Iq_ref = 0.5f + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
	*/

	Encoder_Refresh(hACR_Init->hEncoder);
 800dc1a:	4bad      	ldr	r3, [pc, #692]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	69db      	ldr	r3, [r3, #28]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f001 fbd9 	bl	800f3d8 <Encoder_Refresh>


	CurrentSensor_Refresh(&mainCS, sector_SVM);
 800dc26:	4bac      	ldr	r3, [pc, #688]	; (800ded8 <ACR_Refresh+0x2d8>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	48ab      	ldr	r0, [pc, #684]	; (800dedc <ACR_Refresh+0x2dc>)
 800dc30:	f000 fd56 	bl	800e6e0 <CurrentSensor_Refresh>


	CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dc40:	4ba3      	ldr	r3, [pc, #652]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	69db      	ldr	r3, [r3, #28]
 800dc46:	edd3 7a07 	vldr	s15, [r3, #28]
 800dc4a:	4ba1      	ldr	r3, [pc, #644]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	69db      	ldr	r3, [r3, #28]
 800dc50:	ed93 7a08 	vldr	s14, [r3, #32]
 800dc54:	eef0 0a47 	vmov.f32	s1, s14
 800dc58:	eeb0 0a67 	vmov.f32	s0, s15
 800dc5c:	489f      	ldr	r0, [pc, #636]	; (800dedc <ACR_Refresh+0x2dc>)
 800dc5e:	f000 fe83 	bl	800e968 <CurrentSensor_getIdq>


	/*
	 * 強制転流
	 */
	if(hACR->forced_commute_enable)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d03d      	beq.n	800dce8 <ACR_Refresh+0xe8>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
		else									forced_theta_re = _forced_theta_re;

		*/

		hACR->forced_cos_theta_re = sin_table2[(int)((hACR->forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800dc72:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800dee0 <ACR_Refresh+0x2e0>
 800dc76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc82:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800dee4 <ACR_Refresh+0x2e4>
 800dc86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc8e:	ee17 3a90 	vmov	r3, s15
 800dc92:	4a95      	ldr	r2, [pc, #596]	; (800dee8 <ACR_Refresh+0x2e8>)
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	665a      	str	r2, [r3, #100]	; 0x64
		hACR->forced_sin_theta_re = sin_table2[(int)(hACR->forced_theta_re * 1591.54943f)];
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800dca4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800deec <ACR_Refresh+0x2ec>
 800dca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcb0:	ee17 3a90 	vmov	r3, s15
 800dcb4:	4a8c      	ldr	r2, [pc, #560]	; (800dee8 <ACR_Refresh+0x2e8>)
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	4413      	add	r3, r2
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	669a      	str	r2, [r3, #104]	; 0x68

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800dcd8:	eef0 0a47 	vmov.f32	s1, s14
 800dcdc:	eeb0 0a67 	vmov.f32	s0, s15
 800dce0:	487e      	ldr	r0, [pc, #504]	; (800dedc <ACR_Refresh+0x2dc>)
 800dce2:	f000 fe41 	bl	800e968 <CurrentSensor_getIdq>
 800dce6:	e016      	b.n	800dd16 <ACR_Refresh+0x116>

	}
	else
	{

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dcf4:	4b76      	ldr	r3, [pc, #472]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	69db      	ldr	r3, [r3, #28]
 800dcfa:	edd3 7a07 	vldr	s15, [r3, #28]
 800dcfe:	4b74      	ldr	r3, [pc, #464]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	ed93 7a08 	vldr	s14, [r3, #32]
 800dd08:	eef0 0a47 	vmov.f32	s1, s14
 800dd0c:	eeb0 0a67 	vmov.f32	s0, s15
 800dd10:	4872      	ldr	r0, [pc, #456]	; (800dedc <ACR_Refresh+0x2dc>)
 800dd12:	f000 fe29 	bl	800e968 <CurrentSensor_getIdq>

	// 旧実装
	//get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);


	if(hACR_Init->hEncoder->theta_re < M_PI)
 800dd16:	4b6e      	ldr	r3, [pc, #440]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	69db      	ldr	r3, [r3, #28]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fa faf2 	bl	8008308 <__aeabi_f2d>
 800dd24:	a368      	add	r3, pc, #416	; (adr r3, 800dec8 <ACR_Refresh+0x2c8>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7fa fdb7 	bl	800889c <__aeabi_dcmplt>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d005      	beq.n	800dd40 <ACR_Refresh+0x140>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800dd34:	2200      	movs	r2, #0
 800dd36:	2140      	movs	r1, #64	; 0x40
 800dd38:	486d      	ldr	r0, [pc, #436]	; (800def0 <ACR_Refresh+0x2f0>)
 800dd3a:	f7fd f835 	bl	800ada8 <HAL_GPIO_WritePin>
 800dd3e:	e004      	b.n	800dd4a <ACR_Refresh+0x14a>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800dd40:	2201      	movs	r2, #1
 800dd42:	2140      	movs	r1, #64	; 0x40
 800dd44:	486a      	ldr	r0, [pc, #424]	; (800def0 <ACR_Refresh+0x2f0>)
 800dd46:	f7fd f82f 	bl	800ada8 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(hACR->enable /*&& soundCount == -1*/)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 8179 	beq.w	800e048 <ACR_Refresh+0x448>
	{

		if(hACR->Id_ref < -hACR_Init->Id_limit)			_Id_ref = -hACR_Init->Id_limit;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800dd5c:	4b5c      	ldr	r3, [pc, #368]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	edd3 7a03 	vldr	s15, [r3, #12]
 800dd64:	eef1 7a67 	vneg.f32	s15, s15
 800dd68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd70:	d509      	bpl.n	800dd86 <ACR_Refresh+0x186>
 800dd72:	4b57      	ldr	r3, [pc, #348]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	edd3 7a03 	vldr	s15, [r3, #12]
 800dd7a:	eef1 7a67 	vneg.f32	s15, s15
 800dd7e:	4b5d      	ldr	r3, [pc, #372]	; (800def4 <ACR_Refresh+0x2f4>)
 800dd80:	edc3 7a00 	vstr	s15, [r3]
 800dd84:	e015      	b.n	800ddb2 <ACR_Refresh+0x1b2>
		else if(hACR->Id_ref > hACR_Init->Id_limit)		_Id_ref = hACR_Init->Id_limit;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800dd8c:	4b50      	ldr	r3, [pc, #320]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	edd3 7a03 	vldr	s15, [r3, #12]
 800dd94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9c:	dd05      	ble.n	800ddaa <ACR_Refresh+0x1aa>
 800dd9e:	4b4c      	ldr	r3, [pc, #304]	; (800ded0 <ACR_Refresh+0x2d0>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	4a53      	ldr	r2, [pc, #332]	; (800def4 <ACR_Refresh+0x2f4>)
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	e003      	b.n	800ddb2 <ACR_Refresh+0x1b2>
		else											_Id_ref = hACR->Id_ref;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddae:	4a51      	ldr	r2, [pc, #324]	; (800def4 <ACR_Refresh+0x2f4>)
 800ddb0:	6013      	str	r3, [r2, #0]

		if(hACR->Iq_ref < -hACR_Init->Iq_limit)			_Iq_ref = -hACR_Init->Iq_limit;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800ddb8:	4b45      	ldr	r3, [pc, #276]	; (800ded0 <ACR_Refresh+0x2d0>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	edd3 7a04 	vldr	s15, [r3, #16]
 800ddc0:	eef1 7a67 	vneg.f32	s15, s15
 800ddc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddcc:	d509      	bpl.n	800dde2 <ACR_Refresh+0x1e2>
 800ddce:	4b40      	ldr	r3, [pc, #256]	; (800ded0 <ACR_Refresh+0x2d0>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	edd3 7a04 	vldr	s15, [r3, #16]
 800ddd6:	eef1 7a67 	vneg.f32	s15, s15
 800ddda:	4b47      	ldr	r3, [pc, #284]	; (800def8 <ACR_Refresh+0x2f8>)
 800dddc:	edc3 7a00 	vstr	s15, [r3]
 800dde0:	e015      	b.n	800de0e <ACR_Refresh+0x20e>
		else if(hACR->Iq_ref > hACR_Init->Iq_limit)		_Iq_ref = hACR_Init->Iq_limit;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800dde8:	4b39      	ldr	r3, [pc, #228]	; (800ded0 <ACR_Refresh+0x2d0>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	edd3 7a04 	vldr	s15, [r3, #16]
 800ddf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf8:	dd05      	ble.n	800de06 <ACR_Refresh+0x206>
 800ddfa:	4b35      	ldr	r3, [pc, #212]	; (800ded0 <ACR_Refresh+0x2d0>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	4a3d      	ldr	r2, [pc, #244]	; (800def8 <ACR_Refresh+0x2f8>)
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	e003      	b.n	800de0e <ACR_Refresh+0x20e>
		else											_Iq_ref = hACR->Iq_ref;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de0a:	4a3b      	ldr	r2, [pc, #236]	; (800def8 <ACR_Refresh+0x2f8>)
 800de0c:	6013      	str	r3, [r2, #0]


		hACR->Id_error = _Id_ref - hACR->Id;
 800de0e:	4b39      	ldr	r3, [pc, #228]	; (800def4 <ACR_Refresh+0x2f4>)
 800de10:	ed93 7a00 	vldr	s14, [r3]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800de1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		hACR->Iq_error = _Iq_ref - hACR->Iq;
 800de24:	4b34      	ldr	r3, [pc, #208]	; (800def8 <ACR_Refresh+0x2f8>)
 800de26:	ed93 7a00 	vldr	s14, [r3]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800de30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40


		hACR->Id_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Id_error + hACR->p_Id_error);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800de40:	4b23      	ldr	r3, [pc, #140]	; (800ded0 <ACR_Refresh+0x2d0>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	edd3 7a02 	vldr	s15, [r3, #8]
 800de48:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800de4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800de5c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800de60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hACR->Iq_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Iq_error + hACR->p_Iq_error);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800de74:	4b16      	ldr	r3, [pc, #88]	; (800ded0 <ACR_Refresh+0x2d0>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	edd3 7a02 	vldr	s15, [r3, #8]
 800de7c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800de80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800de90:	ee76 7a27 	vadd.f32	s15, s12, s15
 800de94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50


		if(hACR->Id_error_integ > hACR_Init->Id_error_integ_limit)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800dea8:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <ACR_Refresh+0x2d0>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	edd3 7a05 	vldr	s15, [r3, #20]
 800deb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800deb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb8:	dd20      	ble.n	800defc <ACR_Refresh+0x2fc>
		{
			hACR->Id_error_integ = hACR_Init->Id_error_integ_limit;
 800deba:	4b05      	ldr	r3, [pc, #20]	; (800ded0 <ACR_Refresh+0x2d0>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	695a      	ldr	r2, [r3, #20]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	64da      	str	r2, [r3, #76]	; 0x4c
 800dec4:	e049      	b.n	800df5a <ACR_Refresh+0x35a>
 800dec6:	bf00      	nop
 800dec8:	54442d18 	.word	0x54442d18
 800decc:	400921fb 	.word	0x400921fb
 800ded0:	200000a4 	.word	0x200000a4
 800ded4:	40020400 	.word	0x40020400
 800ded8:	200000fc 	.word	0x200000fc
 800dedc:	200001cc 	.word	0x200001cc
 800dee0:	3ea2f838 	.word	0x3ea2f838
 800dee4:	459c4000 	.word	0x459c4000
 800dee8:	08011b90 	.word	0x08011b90
 800deec:	44c6f195 	.word	0x44c6f195
 800def0:	40020000 	.word	0x40020000
 800def4:	200000a8 	.word	0x200000a8
 800def8:	200000ac 	.word	0x200000ac
		}
		else if(hACR->Id_error_integ < -1.0 * hACR_Init->Id_error_integ_limit)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df00:	4618      	mov	r0, r3
 800df02:	f7fa fa01 	bl	8008308 <__aeabi_f2d>
 800df06:	4682      	mov	sl, r0
 800df08:	468b      	mov	fp, r1
 800df0a:	4b82      	ldr	r3, [pc, #520]	; (800e114 <ACR_Refresh+0x514>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	4618      	mov	r0, r3
 800df12:	f7fa f9f9 	bl	8008308 <__aeabi_f2d>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	4690      	mov	r8, r2
 800df1c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800df20:	4642      	mov	r2, r8
 800df22:	464b      	mov	r3, r9
 800df24:	4650      	mov	r0, sl
 800df26:	4659      	mov	r1, fp
 800df28:	f7fa fcb8 	bl	800889c <__aeabi_dcmplt>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d013      	beq.n	800df5a <ACR_Refresh+0x35a>
		{
			hACR->Id_error_integ = -1.0 * hACR_Init->Id_error_integ_limit;
 800df32:	4b78      	ldr	r3, [pc, #480]	; (800e114 <ACR_Refresh+0x514>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	695b      	ldr	r3, [r3, #20]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fa f9e5 	bl	8008308 <__aeabi_f2d>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4610      	mov	r0, r2
 800df44:	4619      	mov	r1, r3
 800df46:	f7fa fd0f 	bl	8008968 <__aeabi_d2f>
 800df4a:	4603      	mov	r3, r0
 800df4c:	ee07 3a90 	vmov	s15, r3
 800df50:	eef1 7a67 	vneg.f32	s15, s15
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}

		if(hACR->Iq_error_integ > hACR_Init->Iq_error_integ_limit)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800df60:	4b6c      	ldr	r3, [pc, #432]	; (800e114 <ACR_Refresh+0x514>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	edd3 7a06 	vldr	s15, [r3, #24]
 800df68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df70:	dd05      	ble.n	800df7e <ACR_Refresh+0x37e>
		{
			hACR->Iq_error_integ = hACR_Init->Iq_error_integ_limit;
 800df72:	4b68      	ldr	r3, [pc, #416]	; (800e114 <ACR_Refresh+0x514>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	699a      	ldr	r2, [r3, #24]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	651a      	str	r2, [r3, #80]	; 0x50
 800df7c:	e02e      	b.n	800dfdc <ACR_Refresh+0x3dc>
		}
		else if(hACR->Iq_error_integ < -1.0 * hACR_Init->Iq_error_integ_limit)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df82:	4618      	mov	r0, r3
 800df84:	f7fa f9c0 	bl	8008308 <__aeabi_f2d>
 800df88:	4680      	mov	r8, r0
 800df8a:	4689      	mov	r9, r1
 800df8c:	4b61      	ldr	r3, [pc, #388]	; (800e114 <ACR_Refresh+0x514>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	4618      	mov	r0, r3
 800df94:	f7fa f9b8 	bl	8008308 <__aeabi_f2d>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4614      	mov	r4, r2
 800df9e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	462b      	mov	r3, r5
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	4649      	mov	r1, r9
 800dfaa:	f7fa fc77 	bl	800889c <__aeabi_dcmplt>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d013      	beq.n	800dfdc <ACR_Refresh+0x3dc>
		{
			hACR->Iq_error_integ = -1.0 * hACR_Init->Iq_error_integ_limit;
 800dfb4:	4b57      	ldr	r3, [pc, #348]	; (800e114 <ACR_Refresh+0x514>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fa f9a4 	bl	8008308 <__aeabi_f2d>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	f7fa fcce 	bl	8008968 <__aeabi_d2f>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	ee07 3a90 	vmov	s15, r3
 800dfd2:	eef1 7a67 	vneg.f32	s15, s15
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		}


		hACR->p_Id_error = hACR->Id_error;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	645a      	str	r2, [r3, #68]	; 0x44
		hACR->p_Iq_error = hACR->Iq_error;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	649a      	str	r2, [r3, #72]	; 0x48
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
		*/

		hACR->Vd_ref = hACR_Init->Kp * hACR->Id_error + hACR_Init->Ki * hACR->Id_error_integ;
 800dfec:	4b49      	ldr	r3, [pc, #292]	; (800e114 <ACR_Refresh+0x514>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	ed93 7a00 	vldr	s14, [r3]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800dffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dffe:	4b45      	ldr	r3, [pc, #276]	; (800e114 <ACR_Refresh+0x514>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	edd3 6a01 	vldr	s13, [r3, #4]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800e00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e010:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		hACR->Vq_ref = hACR_Init->Kp * hACR->Iq_error + hACR_Init->Ki * hACR->Iq_error_integ;
 800e01a:	4b3e      	ldr	r3, [pc, #248]	; (800e114 <ACR_Refresh+0x514>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	ed93 7a00 	vldr	s14, [r3]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e02c:	4b39      	ldr	r3, [pc, #228]	; (800e114 <ACR_Refresh+0x514>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	edd3 6a01 	vldr	s13, [r3, #4]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800e03a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e03e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e04c:	4832      	ldr	r0, [pc, #200]	; (800e118 <ACR_Refresh+0x518>)
 800e04e:	f7fc fe93 	bl	800ad78 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	if(hACR->forced_commute_enable)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d017      	beq.n	800e08c <ACR_Refresh+0x48c>
	{
		setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	ed93 6a1a 	vldr	s12, [r3, #104]	; 0x68
 800e074:	eef0 1a46 	vmov.f32	s3, s12
 800e078:	eeb0 1a66 	vmov.f32	s2, s13
 800e07c:	eef0 0a47 	vmov.f32	s1, s14
 800e080:	eeb0 0a67 	vmov.f32	s0, s15
 800e084:	4825      	ldr	r0, [pc, #148]	; (800e11c <ACR_Refresh+0x51c>)
 800e086:	f001 fd73 	bl	800fb70 <setSVM_dq>
 800e08a:	e01a      	b.n	800e0c2 <ACR_Refresh+0x4c2>
	}
	else
	{
		setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e098:	4b1e      	ldr	r3, [pc, #120]	; (800e114 <ACR_Refresh+0x514>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	69db      	ldr	r3, [r3, #28]
 800e09e:	edd3 6a07 	vldr	s13, [r3, #28]
 800e0a2:	4b1c      	ldr	r3, [pc, #112]	; (800e114 <ACR_Refresh+0x514>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	ed93 6a08 	vldr	s12, [r3, #32]
 800e0ac:	eef0 1a46 	vmov.f32	s3, s12
 800e0b0:	eeb0 1a66 	vmov.f32	s2, s13
 800e0b4:	eef0 0a47 	vmov.f32	s1, s14
 800e0b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e0bc:	4817      	ldr	r0, [pc, #92]	; (800e11c <ACR_Refresh+0x51c>)
 800e0be:	f001 fd57 	bl	800fb70 <setSVM_dq>
	}

#endif


	Encoder_Request(hACR_Init->hEncoder);
 800e0c2:	4b14      	ldr	r3, [pc, #80]	; (800e114 <ACR_Refresh+0x514>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69db      	ldr	r3, [r3, #28]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f001 f961 	bl	800f390 <Encoder_Request>


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 800e0ce:	4b14      	ldr	r3, [pc, #80]	; (800e120 <ACR_Refresh+0x520>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	4a12      	ldr	r2, [pc, #72]	; (800e120 <ACR_Refresh+0x520>)
 800e0d6:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 800e0d8:	4b11      	ldr	r3, [pc, #68]	; (800e120 <ACR_Refresh+0x520>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b09      	cmp	r3, #9
 800e0de:	dd05      	ble.n	800e0ec <ACR_Refresh+0x4ec>
	{
		ASR_flg = 1;
 800e0e0:	4b10      	ldr	r3, [pc, #64]	; (800e124 <ACR_Refresh+0x524>)
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 800e0e6:	4b0e      	ldr	r3, [pc, #56]	; (800e120 <ACR_Refresh+0x520>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]
	}

	msec += 0.1f;
 800e0ec:	4b0e      	ldr	r3, [pc, #56]	; (800e128 <ACR_Refresh+0x528>)
 800e0ee:	edd3 7a00 	vldr	s15, [r3]
 800e0f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e12c <ACR_Refresh+0x52c>
 800e0f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0fa:	4b0b      	ldr	r3, [pc, #44]	; (800e128 <ACR_Refresh+0x528>)
 800e0fc:	edc3 7a00 	vstr	s15, [r3]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e100:	2200      	movs	r2, #0
 800e102:	2140      	movs	r1, #64	; 0x40
 800e104:	480a      	ldr	r0, [pc, #40]	; (800e130 <ACR_Refresh+0x530>)
 800e106:	f7fc fe4f 	bl	800ada8 <HAL_GPIO_WritePin>

	return;
 800e10a:	bf00      	nop
}
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e114:	200000a4 	.word	0x200000a4
 800e118:	40020000 	.word	0x40020000
 800e11c:	20000588 	.word	0x20000588
 800e120:	200000cc 	.word	0x200000cc
 800e124:	200000c8 	.word	0x200000c8
 800e128:	200000a0 	.word	0x200000a0
 800e12c:	3dcccccd 	.word	0x3dcccccd
 800e130:	40020400 	.word	0x40020400

0800e134 <ACR_Reset>:



inline void ACR_Reset(ACR_TypeDef *hACR)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]

	hACR->Id_error_integ = 0.0f;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f04f 0200 	mov.w	r2, #0
 800e142:	64da      	str	r2, [r3, #76]	; 0x4c
	hACR->Iq_error_integ = 0.0f;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f04f 0200 	mov.w	r2, #0
 800e14a:	651a      	str	r2, [r3, #80]	; 0x50

	hACR->Id = hACR->Id_ref = 0.0f;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f04f 0200 	mov.w	r2, #0
 800e152:	62da      	str	r2, [r3, #44]	; 0x2c
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	635a      	str	r2, [r3, #52]	; 0x34
	hACR->Iq = hACR->Iq_ref = 0.0f;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f04f 0200 	mov.w	r2, #0
 800e162:	631a      	str	r2, [r3, #48]	; 0x30
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	639a      	str	r2, [r3, #56]	; 0x38

	hACR->Vd_ref = 0.0f;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f04f 0200 	mov.w	r2, #0
 800e172:	655a      	str	r2, [r3, #84]	; 0x54
	hACR->Vq_ref = 0.0f;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f04f 0200 	mov.w	r2, #0
 800e17a:	659a      	str	r2, [r3, #88]	; 0x58

}
 800e17c:	bf00      	nop
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <ASR_Start>:
float omega_error_integ_temp2 = 0.0f;



void ASR_Start()
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	af00      	add	r7, sp, #0

	ASR_enable = 1;
 800e18c:	4b03      	ldr	r3, [pc, #12]	; (800e19c <ASR_Start+0x14>)
 800e18e:	2201      	movs	r2, #1
 800e190:	701a      	strb	r2, [r3, #0]
	ASR_Reset();
 800e192:	f000 fa1f 	bl	800e5d4 <ASR_Reset>

}
 800e196:	bf00      	nop
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	200000b0 	.word	0x200000b0

0800e1a0 <speedControl>:
}



inline void speedControl()
{
 800e1a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e1a4:	af00      	add	r7, sp, #0

	  if(ASR_steps <= 0)
 800e1a6:	4b86      	ldr	r3, [pc, #536]	; (800e3c0 <speedControl+0x220>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	dc04      	bgt.n	800e1b8 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 800e1ae:	4b85      	ldr	r3, [pc, #532]	; (800e3c4 <speedControl+0x224>)
 800e1b0:	f04f 0200 	mov.w	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]
 800e1b6:	e00a      	b.n	800e1ce <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = mainEncoder.theta - p_theta;
 800e1b8:	4b83      	ldr	r3, [pc, #524]	; (800e3c8 <speedControl+0x228>)
 800e1ba:	ed93 7a05 	vldr	s14, [r3, #20]
 800e1be:	4b83      	ldr	r3, [pc, #524]	; (800e3cc <speedControl+0x22c>)
 800e1c0:	edd3 7a00 	vldr	s15, [r3]
 800e1c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1c8:	4b7e      	ldr	r3, [pc, #504]	; (800e3c4 <speedControl+0x224>)
 800e1ca:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 800e1ce:	4b7c      	ldr	r3, [pc, #496]	; (800e3c0 <speedControl+0x220>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	4a7a      	ldr	r2, [pc, #488]	; (800e3c0 <speedControl+0x220>)
 800e1d6:	6013      	str	r3, [r2, #0]

	  p_theta = mainEncoder.theta;
 800e1d8:	4b7b      	ldr	r3, [pc, #492]	; (800e3c8 <speedControl+0x228>)
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	4a7b      	ldr	r2, [pc, #492]	; (800e3cc <speedControl+0x22c>)
 800e1de:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 800e1e0:	4b78      	ldr	r3, [pc, #480]	; (800e3c4 <speedControl+0x224>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fa f88f 	bl	8008308 <__aeabi_f2d>
 800e1ea:	a36f      	add	r3, pc, #444	; (adr r3, 800e3a8 <speedControl+0x208>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f7fa fb54 	bl	800889c <__aeabi_dcmplt>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d013      	beq.n	800e222 <speedControl+0x82>
 800e1fa:	4b72      	ldr	r3, [pc, #456]	; (800e3c4 <speedControl+0x224>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fa f882 	bl	8008308 <__aeabi_f2d>
 800e204:	a36a      	add	r3, pc, #424	; (adr r3, 800e3b0 <speedControl+0x210>)
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	f7f9 ff1f 	bl	800804c <__adddf3>
 800e20e:	4603      	mov	r3, r0
 800e210:	460c      	mov	r4, r1
 800e212:	4618      	mov	r0, r3
 800e214:	4621      	mov	r1, r4
 800e216:	f7fa fba7 	bl	8008968 <__aeabi_d2f>
 800e21a:	4602      	mov	r2, r0
 800e21c:	4b69      	ldr	r3, [pc, #420]	; (800e3c4 <speedControl+0x224>)
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	e01f      	b.n	800e262 <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 800e222:	4b68      	ldr	r3, [pc, #416]	; (800e3c4 <speedControl+0x224>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4618      	mov	r0, r3
 800e228:	f7fa f86e 	bl	8008308 <__aeabi_f2d>
 800e22c:	a362      	add	r3, pc, #392	; (adr r3, 800e3b8 <speedControl+0x218>)
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	f7fa fb51 	bl	80088d8 <__aeabi_dcmpgt>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d012      	beq.n	800e262 <speedControl+0xc2>
 800e23c:	4b61      	ldr	r3, [pc, #388]	; (800e3c4 <speedControl+0x224>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4618      	mov	r0, r3
 800e242:	f7fa f861 	bl	8008308 <__aeabi_f2d>
 800e246:	a35a      	add	r3, pc, #360	; (adr r3, 800e3b0 <speedControl+0x210>)
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	f7f9 fefc 	bl	8008048 <__aeabi_dsub>
 800e250:	4603      	mov	r3, r0
 800e252:	460c      	mov	r4, r1
 800e254:	4618      	mov	r0, r3
 800e256:	4621      	mov	r1, r4
 800e258:	f7fa fb86 	bl	8008968 <__aeabi_d2f>
 800e25c:	4602      	mov	r2, r0
 800e25e:	4b59      	ldr	r3, [pc, #356]	; (800e3c4 <speedControl+0x224>)
 800e260:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 800e262:	4b5b      	ldr	r3, [pc, #364]	; (800e3d0 <speedControl+0x230>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4618      	mov	r0, r3
 800e268:	f7fa f84e 	bl	8008308 <__aeabi_f2d>
 800e26c:	f04f 0200 	mov.w	r2, #0
 800e270:	4b58      	ldr	r3, [pc, #352]	; (800e3d4 <speedControl+0x234>)
 800e272:	f7fa f8a1 	bl	80083b8 <__aeabi_dmul>
 800e276:	4603      	mov	r3, r0
 800e278:	460c      	mov	r4, r1
 800e27a:	4625      	mov	r5, r4
 800e27c:	461c      	mov	r4, r3
 800e27e:	4b51      	ldr	r3, [pc, #324]	; (800e3c4 <speedControl+0x224>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f7fa f840 	bl	8008308 <__aeabi_f2d>
 800e288:	f04f 0200 	mov.w	r2, #0
 800e28c:	4b51      	ldr	r3, [pc, #324]	; (800e3d4 <speedControl+0x234>)
 800e28e:	f7fa f893 	bl	80083b8 <__aeabi_dmul>
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	4690      	mov	r8, r2
 800e298:	4699      	mov	r9, r3
 800e29a:	4b4f      	ldr	r3, [pc, #316]	; (800e3d8 <speedControl+0x238>)
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fa f833 	bl	8008308 <__aeabi_f2d>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	4649      	mov	r1, r9
 800e2aa:	f7fa f9af 	bl	800860c <__aeabi_ddiv>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	f7f9 fec9 	bl	800804c <__adddf3>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	460c      	mov	r4, r1
 800e2be:	4618      	mov	r0, r3
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	f7fa fb51 	bl	8008968 <__aeabi_d2f>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	4b41      	ldr	r3, [pc, #260]	; (800e3d0 <speedControl+0x230>)
 800e2ca:	601a      	str	r2, [r3, #0]


	  if(ASR_enable)
 800e2cc:	4b43      	ldr	r3, [pc, #268]	; (800e3dc <speedControl+0x23c>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f000 814a 	beq.w	800e56c <speedControl+0x3cc>
	  {

		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 800e2d8:	4b41      	ldr	r3, [pc, #260]	; (800e3e0 <speedControl+0x240>)
 800e2da:	edd3 7a00 	vldr	s15, [r3]
 800e2de:	eeb1 7a67 	vneg.f32	s14, s15
 800e2e2:	4b40      	ldr	r3, [pc, #256]	; (800e3e4 <speedControl+0x244>)
 800e2e4:	edd3 7a00 	vldr	s15, [r3]
 800e2e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f0:	dd08      	ble.n	800e304 <speedControl+0x164>
 800e2f2:	4b3b      	ldr	r3, [pc, #236]	; (800e3e0 <speedControl+0x240>)
 800e2f4:	edd3 7a00 	vldr	s15, [r3]
 800e2f8:	eef1 7a67 	vneg.f32	s15, s15
 800e2fc:	4b3a      	ldr	r3, [pc, #232]	; (800e3e8 <speedControl+0x248>)
 800e2fe:	edc3 7a00 	vstr	s15, [r3]
 800e302:	e013      	b.n	800e32c <speedControl+0x18c>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 800e304:	4b37      	ldr	r3, [pc, #220]	; (800e3e4 <speedControl+0x244>)
 800e306:	ed93 7a00 	vldr	s14, [r3]
 800e30a:	4b35      	ldr	r3, [pc, #212]	; (800e3e0 <speedControl+0x240>)
 800e30c:	edd3 7a00 	vldr	s15, [r3]
 800e310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e318:	dd04      	ble.n	800e324 <speedControl+0x184>
 800e31a:	4b31      	ldr	r3, [pc, #196]	; (800e3e0 <speedControl+0x240>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a32      	ldr	r2, [pc, #200]	; (800e3e8 <speedControl+0x248>)
 800e320:	6013      	str	r3, [r2, #0]
 800e322:	e003      	b.n	800e32c <speedControl+0x18c>
		  else								_omega_ref = omega_ref;
 800e324:	4b2f      	ldr	r3, [pc, #188]	; (800e3e4 <speedControl+0x244>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a2f      	ldr	r2, [pc, #188]	; (800e3e8 <speedControl+0x248>)
 800e32a:	6013      	str	r3, [r2, #0]

		  omega_error = _omega_ref - omega;
 800e32c:	4b2e      	ldr	r3, [pc, #184]	; (800e3e8 <speedControl+0x248>)
 800e32e:	ed93 7a00 	vldr	s14, [r3]
 800e332:	4b27      	ldr	r3, [pc, #156]	; (800e3d0 <speedControl+0x230>)
 800e334:	edd3 7a00 	vldr	s15, [r3]
 800e338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e33c:	4b2b      	ldr	r3, [pc, #172]	; (800e3ec <speedControl+0x24c>)
 800e33e:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 800e342:	4b2a      	ldr	r3, [pc, #168]	; (800e3ec <speedControl+0x24c>)
 800e344:	ed93 7a00 	vldr	s14, [r3]
 800e348:	4b29      	ldr	r3, [pc, #164]	; (800e3f0 <speedControl+0x250>)
 800e34a:	edd3 7a00 	vldr	s15, [r3]
 800e34e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e352:	4b28      	ldr	r3, [pc, #160]	; (800e3f4 <speedControl+0x254>)
 800e354:	edc3 7a00 	vstr	s15, [r3]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 800e358:	4b26      	ldr	r3, [pc, #152]	; (800e3f4 <speedControl+0x254>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7f9 ffd3 	bl	8008308 <__aeabi_f2d>
 800e362:	4604      	mov	r4, r0
 800e364:	460d      	mov	r5, r1
 800e366:	4b1c      	ldr	r3, [pc, #112]	; (800e3d8 <speedControl+0x238>)
 800e368:	4618      	mov	r0, r3
 800e36a:	f7f9 ffcd 	bl	8008308 <__aeabi_f2d>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	f04f 0000 	mov.w	r0, #0
 800e376:	4920      	ldr	r1, [pc, #128]	; (800e3f8 <speedControl+0x258>)
 800e378:	f7fa f948 	bl	800860c <__aeabi_ddiv>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4620      	mov	r0, r4
 800e382:	4629      	mov	r1, r5
 800e384:	f7fa fa8a 	bl	800889c <__aeabi_dcmplt>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d038      	beq.n	800e400 <speedControl+0x260>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 800e38e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800e3fc <speedControl+0x25c>
 800e392:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 800e396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e39a:	4b16      	ldr	r3, [pc, #88]	; (800e3f4 <speedControl+0x254>)
 800e39c:	edc3 7a00 	vstr	s15, [r3]
 800e3a0:	e052      	b.n	800e448 <speedControl+0x2a8>
 800e3a2:	bf00      	nop
 800e3a4:	f3af 8000 	nop.w
 800e3a8:	54442d18 	.word	0x54442d18
 800e3ac:	c00921fb 	.word	0xc00921fb
 800e3b0:	54442d18 	.word	0x54442d18
 800e3b4:	401921fb 	.word	0x401921fb
 800e3b8:	54442d18 	.word	0x54442d18
 800e3bc:	400921fb 	.word	0x400921fb
 800e3c0:	200000c4 	.word	0x200000c4
 800e3c4:	200001c4 	.word	0x200001c4
 800e3c8:	200004a8 	.word	0x200004a8
 800e3cc:	200000d4 	.word	0x200000d4
 800e3d0:	200000d0 	.word	0x200000d0
 800e3d4:	3fe00000 	.word	0x3fe00000
 800e3d8:	3a83126f 	.word	0x3a83126f
 800e3dc:	200000b0 	.word	0x200000b0
 800e3e0:	20000010 	.word	0x20000010
 800e3e4:	200000b4 	.word	0x200000b4
 800e3e8:	200001c8 	.word	0x200001c8
 800e3ec:	200000b8 	.word	0x200000b8
 800e3f0:	200000dc 	.word	0x200000dc
 800e3f4:	200000d8 	.word	0x200000d8
 800e3f8:	c0180000 	.word	0xc0180000
 800e3fc:	3a83126f 	.word	0x3a83126f
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 800e400:	4b65      	ldr	r3, [pc, #404]	; (800e598 <speedControl+0x3f8>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4618      	mov	r0, r3
 800e406:	f7f9 ff7f 	bl	8008308 <__aeabi_f2d>
 800e40a:	4604      	mov	r4, r0
 800e40c:	460d      	mov	r5, r1
 800e40e:	4b63      	ldr	r3, [pc, #396]	; (800e59c <speedControl+0x3fc>)
 800e410:	4618      	mov	r0, r3
 800e412:	f7f9 ff79 	bl	8008308 <__aeabi_f2d>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	f04f 0000 	mov.w	r0, #0
 800e41e:	4960      	ldr	r1, [pc, #384]	; (800e5a0 <speedControl+0x400>)
 800e420:	f7fa f8f4 	bl	800860c <__aeabi_ddiv>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	4620      	mov	r0, r4
 800e42a:	4629      	mov	r1, r5
 800e42c:	f7fa fa54 	bl	80088d8 <__aeabi_dcmpgt>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d008      	beq.n	800e448 <speedControl+0x2a8>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 800e436:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800e5a4 <speedControl+0x404>
 800e43a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e442:	4b55      	ldr	r3, [pc, #340]	; (800e598 <speedControl+0x3f8>)
 800e444:	edc3 7a00 	vstr	s15, [r3]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 800e448:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800e5a4 <speedControl+0x404>
 800e44c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e450:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e454:	4b50      	ldr	r3, [pc, #320]	; (800e598 <speedControl+0x3f8>)
 800e456:	edd3 6a00 	vldr	s13, [r3]
 800e45a:	4b53      	ldr	r3, [pc, #332]	; (800e5a8 <speedControl+0x408>)
 800e45c:	edd3 7a00 	vldr	s15, [r3]
 800e460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e468:	4b50      	ldr	r3, [pc, #320]	; (800e5ac <speedControl+0x40c>)
 800e46a:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 800e46e:	4b4a      	ldr	r3, [pc, #296]	; (800e598 <speedControl+0x3f8>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a4d      	ldr	r2, [pc, #308]	; (800e5a8 <speedControl+0x408>)
 800e474:	6013      	str	r3, [r2, #0]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 800e476:	4b4e      	ldr	r3, [pc, #312]	; (800e5b0 <speedControl+0x410>)
 800e478:	ed93 7a00 	vldr	s14, [r3]
 800e47c:	4b4d      	ldr	r3, [pc, #308]	; (800e5b4 <speedControl+0x414>)
 800e47e:	edd3 7a00 	vldr	s15, [r3]
 800e482:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e486:	4b4c      	ldr	r3, [pc, #304]	; (800e5b8 <speedControl+0x418>)
 800e488:	edd3 6a00 	vldr	s13, [r3]
 800e48c:	4b47      	ldr	r3, [pc, #284]	; (800e5ac <speedControl+0x40c>)
 800e48e:	edd3 7a00 	vldr	s15, [r3]
 800e492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e49a:	4b48      	ldr	r3, [pc, #288]	; (800e5bc <speedControl+0x41c>)
 800e49c:	edc3 7a00 	vstr	s15, [r3]

		  mainACR.Id_ref = 0.0f;
 800e4a0:	4b47      	ldr	r3, [pc, #284]	; (800e5c0 <speedControl+0x420>)
 800e4a2:	f04f 0200 	mov.w	r2, #0
 800e4a6:	62da      	str	r2, [r3, #44]	; 0x2c
		  mainACR.Iq_ref = KT * torque_ref + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
 800e4a8:	4b44      	ldr	r3, [pc, #272]	; (800e5bc <speedControl+0x41c>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7f9 ff2b 	bl	8008308 <__aeabi_f2d>
 800e4b2:	a331      	add	r3, pc, #196	; (adr r3, 800e578 <speedControl+0x3d8>)
 800e4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b8:	f7f9 ff7e 	bl	80083b8 <__aeabi_dmul>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	460c      	mov	r4, r1
 800e4c0:	4625      	mov	r5, r4
 800e4c2:	461c      	mov	r4, r3
 800e4c4:	4b3f      	ldr	r3, [pc, #252]	; (800e5c4 <speedControl+0x424>)
 800e4c6:	edd3 7a05 	vldr	s15, [r3, #20]
 800e4ca:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800e4ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4d2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800e5c8 <speedControl+0x428>
 800e4d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e4da:	ee17 0a90 	vmov	r0, s15
 800e4de:	f7f9 ff13 	bl	8008308 <__aeabi_f2d>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800e580 <speedControl+0x3e0>
 800e4ea:	ec43 2b10 	vmov	d0, r2, r3
 800e4ee:	f003 f8c1 	bl	8011674 <fmod>
 800e4f2:	ec51 0b10 	vmov	r0, r1, d0
 800e4f6:	a324      	add	r3, pc, #144	; (adr r3, 800e588 <speedControl+0x3e8>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f9 ff5c 	bl	80083b8 <__aeabi_dmul>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4610      	mov	r0, r2
 800e506:	4619      	mov	r1, r3
 800e508:	f04f 0200 	mov.w	r2, #0
 800e50c:	4b2f      	ldr	r3, [pc, #188]	; (800e5cc <speedControl+0x42c>)
 800e50e:	f7f9 fd9d 	bl	800804c <__adddf3>
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	4610      	mov	r0, r2
 800e518:	4619      	mov	r1, r3
 800e51a:	a31d      	add	r3, pc, #116	; (adr r3, 800e590 <speedControl+0x3f0>)
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	f7f9 ff4a 	bl	80083b8 <__aeabi_dmul>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	4610      	mov	r0, r2
 800e52a:	4619      	mov	r1, r3
 800e52c:	f7fa f9f4 	bl	8008918 <__aeabi_d2iz>
 800e530:	4603      	mov	r3, r0
 800e532:	4a27      	ldr	r2, [pc, #156]	; (800e5d0 <speedControl+0x430>)
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	edd3 7a00 	vldr	s15, [r3]
 800e53c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800e540:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e544:	ee17 0a90 	vmov	r0, s15
 800e548:	f7f9 fede 	bl	8008308 <__aeabi_f2d>
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	4620      	mov	r0, r4
 800e552:	4629      	mov	r1, r5
 800e554:	f7f9 fd7a 	bl	800804c <__adddf3>
 800e558:	4603      	mov	r3, r0
 800e55a:	460c      	mov	r4, r1
 800e55c:	4618      	mov	r0, r3
 800e55e:	4621      	mov	r1, r4
 800e560:	f7fa fa02 	bl	8008968 <__aeabi_d2f>
 800e564:	4602      	mov	r2, r0
 800e566:	4b16      	ldr	r3, [pc, #88]	; (800e5c0 <speedControl+0x420>)
 800e568:	631a      	str	r2, [r3, #48]	; 0x30
	  }




	return;
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
}
 800e56e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e572:	bf00      	nop
 800e574:	f3af 8000 	nop.w
 800e578:	8b6ec798 	.word	0x8b6ec798
 800e57c:	3fd22b62 	.word	0x3fd22b62
 800e580:	54442d18 	.word	0x54442d18
 800e584:	401921fb 	.word	0x401921fb
 800e588:	00000000 	.word	0x00000000
 800e58c:	3fd45f07 	.word	0x3fd45f07
 800e590:	00000000 	.word	0x00000000
 800e594:	40b38800 	.word	0x40b38800
 800e598:	200000d8 	.word	0x200000d8
 800e59c:	3a83126f 	.word	0x3a83126f
 800e5a0:	40180000 	.word	0x40180000
 800e5a4:	3a83126f 	.word	0x3a83126f
 800e5a8:	200000dc 	.word	0x200000dc
 800e5ac:	200000bc 	.word	0x200000bc
 800e5b0:	20000008 	.word	0x20000008
 800e5b4:	200000b8 	.word	0x200000b8
 800e5b8:	2000000c 	.word	0x2000000c
 800e5bc:	200000c0 	.word	0x200000c0
 800e5c0:	20000158 	.word	0x20000158
 800e5c4:	200004a8 	.word	0x200004a8
 800e5c8:	408487e8 	.word	0x408487e8
 800e5cc:	3fe00000 	.word	0x3fe00000
 800e5d0:	08011b90 	.word	0x08011b90

0800e5d4 <ASR_Reset>:



inline void ASR_Reset()
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 800e5d8:	4b0c      	ldr	r3, [pc, #48]	; (800e60c <ASR_Reset+0x38>)
 800e5da:	f04f 0200 	mov.w	r2, #0
 800e5de:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 800e5e0:	4b0b      	ldr	r3, [pc, #44]	; (800e610 <ASR_Reset+0x3c>)
 800e5e2:	f04f 0200 	mov.w	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 800e5e8:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <ASR_Reset+0x40>)
 800e5ea:	f04f 0200 	mov.w	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 800e5f0:	f04f 0300 	mov.w	r3, #0
 800e5f4:	4a08      	ldr	r2, [pc, #32]	; (800e618 <ASR_Reset+0x44>)
 800e5f6:	6013      	str	r3, [r2, #0]
 800e5f8:	4a08      	ldr	r2, [pc, #32]	; (800e61c <ASR_Reset+0x48>)
 800e5fa:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 800e5fc:	4b08      	ldr	r3, [pc, #32]	; (800e620 <ASR_Reset+0x4c>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	601a      	str	r2, [r3, #0]

}
 800e602:	bf00      	nop
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	200000d4 	.word	0x200000d4
 800e610:	200000d8 	.word	0x200000d8
 800e614:	200000dc 	.word	0x200000dc
 800e618:	200000b4 	.word	0x200000b4
 800e61c:	200000d0 	.word	0x200000d0
 800e620:	200000c4 	.word	0x200000c4

0800e624 <CurrentSensor_Init>:
inline int32_t median3(int32_t *buf);



void CurrentSensor_Init()
{
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0

	memcpy(&mainCS, 0x00, sizeof(mainCS));
 800e628:	4a12      	ldr	r2, [pc, #72]	; (800e674 <CurrentSensor_Init+0x50>)
 800e62a:	2300      	movs	r3, #0
 800e62c:	4610      	mov	r0, r2
 800e62e:	4619      	mov	r1, r3
 800e630:	2370      	movs	r3, #112	; 0x70
 800e632:	461a      	mov	r2, r3
 800e634:	f002 fba2 	bl	8010d7c <memcpy>

	mainCS.Init.CS_Type = CS_Type_3shunt;
 800e638:	4b0e      	ldr	r3, [pc, #56]	; (800e674 <CurrentSensor_Init+0x50>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	701a      	strb	r2, [r3, #0]
	mainCS.Init.Gain_currentSense = -10.0f; // 1 / ( R * OPAmpGain) [A / V]
 800e63e:	4b0d      	ldr	r3, [pc, #52]	; (800e674 <CurrentSensor_Init+0x50>)
 800e640:	4a0d      	ldr	r2, [pc, #52]	; (800e678 <CurrentSensor_Init+0x54>)
 800e642:	615a      	str	r2, [r3, #20]
	mainCS.Init.V_Iu_offset = 1.67497551f;
 800e644:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <CurrentSensor_Init+0x50>)
 800e646:	4a0d      	ldr	r2, [pc, #52]	; (800e67c <CurrentSensor_Init+0x58>)
 800e648:	619a      	str	r2, [r3, #24]
	mainCS.Init.V_Iv_offset = 1.67578125f;
 800e64a:	4b0a      	ldr	r3, [pc, #40]	; (800e674 <CurrentSensor_Init+0x50>)
 800e64c:	4a0c      	ldr	r2, [pc, #48]	; (800e680 <CurrentSensor_Init+0x5c>)
 800e64e:	61da      	str	r2, [r3, #28]
	mainCS.Init.V_Iw_offset = 1.67819822f;
 800e650:	4b08      	ldr	r3, [pc, #32]	; (800e674 <CurrentSensor_Init+0x50>)
 800e652:	4a0c      	ldr	r2, [pc, #48]	; (800e684 <CurrentSensor_Init+0x60>)
 800e654:	621a      	str	r2, [r3, #32]
	mainCS.Init.hadc_Iu = &hadc1;
 800e656:	4b07      	ldr	r3, [pc, #28]	; (800e674 <CurrentSensor_Init+0x50>)
 800e658:	4a0b      	ldr	r2, [pc, #44]	; (800e688 <CurrentSensor_Init+0x64>)
 800e65a:	605a      	str	r2, [r3, #4]
	mainCS.Init.hadc_Iv = &hadc2;
 800e65c:	4b05      	ldr	r3, [pc, #20]	; (800e674 <CurrentSensor_Init+0x50>)
 800e65e:	4a0b      	ldr	r2, [pc, #44]	; (800e68c <CurrentSensor_Init+0x68>)
 800e660:	609a      	str	r2, [r3, #8]
	mainCS.Init.hadc_Iw = &hadc3;
 800e662:	4b04      	ldr	r3, [pc, #16]	; (800e674 <CurrentSensor_Init+0x50>)
 800e664:	4a0a      	ldr	r2, [pc, #40]	; (800e690 <CurrentSensor_Init+0x6c>)
 800e666:	60da      	str	r2, [r3, #12]

	mainCS.pos_MEDF_I = 0;
 800e668:	4b02      	ldr	r3, [pc, #8]	; (800e674 <CurrentSensor_Init+0x50>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	631a      	str	r2, [r3, #48]	; 0x30

}
 800e66e:	bf00      	nop
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	200001cc 	.word	0x200001cc
 800e678:	c1200000 	.word	0xc1200000
 800e67c:	3fd66599 	.word	0x3fd66599
 800e680:	3fd68000 	.word	0x3fd68000
 800e684:	3fd6cf33 	.word	0x3fd6cf33
 800e688:	200002e4 	.word	0x200002e4
 800e68c:	2000023c 	.word	0x2000023c
 800e690:	2000032c 	.word	0x2000032c

0800e694 <CurrentSensor_Start>:


void CurrentSensor_Start(CurrentSensor_TypeDef *hCS)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]

	switch(hCS->Init.CS_Type)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d000      	beq.n	800e6a6 <CurrentSensor_Start+0x12>
		break;
	}



}
 800e6a4:	e018      	b.n	800e6d8 <CurrentSensor_Start+0x44>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iu, hCS->AD_Iu, 1);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6858      	ldr	r0, [r3, #4]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3328      	adds	r3, #40	; 0x28
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	f7fa fc01 	bl	8008eb8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iv, hCS->AD_Iv, 1);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6898      	ldr	r0, [r3, #8]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	332a      	adds	r3, #42	; 0x2a
 800e6be:	2201      	movs	r2, #1
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	f7fa fbf9 	bl	8008eb8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iw, hCS->AD_Iw, 1);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	68d8      	ldr	r0, [r3, #12]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	332c      	adds	r3, #44	; 0x2c
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	f7fa fbf1 	bl	8008eb8 <HAL_ADC_Start_DMA>
		break;
 800e6d6:	bf00      	nop
}
 800e6d8:	bf00      	nop
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <CurrentSensor_Refresh>:
/*
 * UVWの電流値を更新するだけ
 * 座標変換とかはやらない
 */
inline void CurrentSensor_Refresh(CurrentSensor_TypeDef *hCS, uint8_t SVM_sector)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
	static int32_t AD_Iv_MEDF = 0;
	static int32_t AD_Iw_MEDF = 0;

	static CurrentSensor_InitTypeDef *hCS_Init;

	hCS_Init = &hCS->Init;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4a98      	ldr	r2, [pc, #608]	; (800e950 <CurrentSensor_Refresh+0x270>)
 800e6f0:	6013      	str	r3, [r2, #0]

	switch(hCS->Init.CS_Type)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d000      	beq.n	800e6fc <CurrentSensor_Refresh+0x1c>

		break; /* CS_Type_3shunt */


		default:
			break;
 800e6fa:	e124      	b.n	800e946 <CurrentSensor_Refresh+0x266>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iu, hCS->AD_Iu, 1);
 800e6fc:	4b94      	ldr	r3, [pc, #592]	; (800e950 <CurrentSensor_Refresh+0x270>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6858      	ldr	r0, [r3, #4]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	3328      	adds	r3, #40	; 0x28
 800e706:	2201      	movs	r2, #1
 800e708:	4619      	mov	r1, r3
 800e70a:	f7fa fbd5 	bl	8008eb8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iv, hCS->AD_Iv, 1);
 800e70e:	4b90      	ldr	r3, [pc, #576]	; (800e950 <CurrentSensor_Refresh+0x270>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6898      	ldr	r0, [r3, #8]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	332a      	adds	r3, #42	; 0x2a
 800e718:	2201      	movs	r2, #1
 800e71a:	4619      	mov	r1, r3
 800e71c:	f7fa fbcc 	bl	8008eb8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iw, hCS->AD_Iw, 1);
 800e720:	4b8b      	ldr	r3, [pc, #556]	; (800e950 <CurrentSensor_Refresh+0x270>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	68d8      	ldr	r0, [r3, #12]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	332c      	adds	r3, #44	; 0x2c
 800e72a:	2201      	movs	r2, #1
 800e72c:	4619      	mov	r1, r3
 800e72e:	f7fa fbc3 	bl	8008eb8 <HAL_ADC_Start_DMA>
		hCS->AD_Iu_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iu[0];
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e73a:	4611      	mov	r1, r2
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	330c      	adds	r3, #12
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4413      	add	r3, r2
 800e744:	6059      	str	r1, [r3, #4]
		hCS->AD_Iv_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iv[0];
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	3210      	adds	r2, #16
 800e752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hCS->AD_Iw_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iw[0];
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e75e:	4611      	mov	r1, r2
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	3312      	adds	r3, #18
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	6059      	str	r1, [r3, #4]
		hCS->pos_MEDF_I += 1;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76e:	1c5a      	adds	r2, r3, #1
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	631a      	str	r2, [r3, #48]	; 0x30
		if(hCS->pos_MEDF_I >= 3)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e778:	2b02      	cmp	r3, #2
 800e77a:	dd02      	ble.n	800e782 <CurrentSensor_Refresh+0xa2>
			hCS->pos_MEDF_I = 0;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	631a      	str	r2, [r3, #48]	; 0x30
		AD_Iu_MEDF = median3(hCS->AD_Iu_buf);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	3334      	adds	r3, #52	; 0x34
 800e786:	4618      	mov	r0, r3
 800e788:	f000 f974 	bl	800ea74 <median3>
 800e78c:	4602      	mov	r2, r0
 800e78e:	4b71      	ldr	r3, [pc, #452]	; (800e954 <CurrentSensor_Refresh+0x274>)
 800e790:	601a      	str	r2, [r3, #0]
		AD_Iv_MEDF = median3(hCS->AD_Iv_buf);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	3340      	adds	r3, #64	; 0x40
 800e796:	4618      	mov	r0, r3
 800e798:	f000 f96c 	bl	800ea74 <median3>
 800e79c:	4602      	mov	r2, r0
 800e79e:	4b6e      	ldr	r3, [pc, #440]	; (800e958 <CurrentSensor_Refresh+0x278>)
 800e7a0:	601a      	str	r2, [r3, #0]
		AD_Iw_MEDF = median3(hCS->AD_Iw_buf);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	334c      	adds	r3, #76	; 0x4c
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 f964 	bl	800ea74 <median3>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	4b6b      	ldr	r3, [pc, #428]	; (800e95c <CurrentSensor_Refresh+0x27c>)
 800e7b0:	601a      	str	r2, [r3, #0]
		hCS->V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iu_offset;
 800e7b2:	4b68      	ldr	r3, [pc, #416]	; (800e954 <CurrentSensor_Refresh+0x274>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	ee07 3a90 	vmov	s15, r3
 800e7ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e7be:	eddf 7a68 	vldr	s15, [pc, #416]	; 800e960 <CurrentSensor_Refresh+0x280>
 800e7c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7ca:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800e964 <CurrentSensor_Refresh+0x284>
 800e7ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e7d2:	4b5f      	ldr	r3, [pc, #380]	; (800e950 <CurrentSensor_Refresh+0x270>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e7da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		hCS->V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iv_offset;
 800e7e4:	4b5c      	ldr	r3, [pc, #368]	; (800e958 <CurrentSensor_Refresh+0x278>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	ee07 3a90 	vmov	s15, r3
 800e7ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e7f0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e960 <CurrentSensor_Refresh+0x280>
 800e7f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7fc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800e964 <CurrentSensor_Refresh+0x284>
 800e800:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e804:	4b52      	ldr	r3, [pc, #328]	; (800e950 <CurrentSensor_Refresh+0x270>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	edd3 7a07 	vldr	s15, [r3, #28]
 800e80c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		hCS->V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iw_offset;
 800e816:	4b51      	ldr	r3, [pc, #324]	; (800e95c <CurrentSensor_Refresh+0x27c>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	ee07 3a90 	vmov	s15, r3
 800e81e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e822:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800e960 <CurrentSensor_Refresh+0x280>
 800e826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e82e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800e964 <CurrentSensor_Refresh+0x284>
 800e832:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e836:	4b46      	ldr	r3, [pc, #280]	; (800e950 <CurrentSensor_Refresh+0x270>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	edd3 7a08 	vldr	s15, [r3, #32]
 800e83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		switch(SVM_sector)
 800e848:	78fb      	ldrb	r3, [r7, #3]
 800e84a:	2b05      	cmp	r3, #5
 800e84c:	d87a      	bhi.n	800e944 <CurrentSensor_Refresh+0x264>
 800e84e:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <CurrentSensor_Refresh+0x174>)
 800e850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e854:	0800e86d 	.word	0x0800e86d
 800e858:	0800e8b5 	.word	0x0800e8b5
 800e85c:	0800e8b5 	.word	0x0800e8b5
 800e860:	0800e8fd 	.word	0x0800e8fd
 800e864:	0800e8fd 	.word	0x0800e8fd
 800e868:	0800e86d 	.word	0x0800e86d
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	edd3 7a05 	vldr	s15, [r3, #20]
 800e878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	edd3 7a05 	vldr	s15, [r3, #20]
 800e88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			hCS->Iu = - hCS->Iv - hCS->Iw;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800e89e:	eeb1 7a67 	vneg.f32	s14, s15
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e8a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800e8b2:	e047      	b.n	800e944 <CurrentSensor_Refresh+0x264>
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	edd3 7a05 	vldr	s15, [r3, #20]
 800e8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	edd3 7a05 	vldr	s15, [r3, #20]
 800e8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			hCS->Iv = - hCS->Iw - hCS->Iu;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e8e6:	eeb1 7a67 	vneg.f32	s14, s15
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e8f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			break;
 800e8fa:	e023      	b.n	800e944 <CurrentSensor_Refresh+0x264>
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	edd3 7a05 	vldr	s15, [r3, #20]
 800e908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	edd3 7a05 	vldr	s15, [r3, #20]
 800e91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			hCS->Iw = - hCS->Iu - hCS->Iv;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e92e:	eeb1 7a67 	vneg.f32	s14, s15
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800e938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			break;
 800e942:	bf00      	nop
		break; /* CS_Type_3shunt */
 800e944:	bf00      	nop
	}




}
 800e946:	bf00      	nop
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	200000e0 	.word	0x200000e0
 800e954:	200000e4 	.word	0x200000e4
 800e958:	200000e8 	.word	0x200000e8
 800e95c:	200000ec 	.word	0x200000ec
 800e960:	00001000 	.word	0x00001000
 800e964:	40533333 	.word	0x40533333

0800e968 <CurrentSensor_getIdq>:

/*
 * 回転座標系における電流を算出
 */
inline void CurrentSensor_getIdq(CurrentSensor_TypeDef *hCS, float *Id, float *Iq, float cos_theta_re, float sin_theta_re)
{
 800e968:	b480      	push	{r7}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6178      	str	r0, [r7, #20]
 800e970:	6139      	str	r1, [r7, #16]
 800e972:	60fa      	str	r2, [r7, #12]
 800e974:	ed87 0a02 	vstr	s0, [r7, #8]
 800e978:	edc7 0a01 	vstr	s1, [r7, #4]

	*Id = 0.8165f * (
			+ hCS->Iu * cos_theta_re
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800e982:	edd7 7a02 	vldr	s15, [r7, #8]
 800e986:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re)
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800e990:	edd7 7a02 	vldr	s15, [r7, #8]
 800e994:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800e998:	ee27 6a86 	vmul.f32	s12, s15, s12
 800e99c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9a0:	eddf 5a32 	vldr	s11, [pc, #200]	; 800ea6c <CurrentSensor_getIdq+0x104>
 800e9a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e9a8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e9ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9b0:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800e9ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9be:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800e9c2:	ee27 6a86 	vmul.f32	s12, s15, s12
 800e9c6:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9ca:	eddf 5a28 	vldr	s11, [pc, #160]	; 800ea6c <CurrentSensor_getIdq+0x104>
 800e9ce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e9d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e9d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9da:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Id = 0.8165f * (
 800e9de:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ea70 <CurrentSensor_getIdq+0x108>
 800e9e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	edc3 7a00 	vstr	s15, [r3]

	*Iq = 0.8165f * (
			- hCS->Iu * sin_theta_re
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e9f2:	eeb1 7a67 	vneg.f32	s14, s15
 800e9f6:	edd7 7a01 	vldr	s15, [r7, #4]
 800e9fa:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re)
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800ea04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea08:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ea0c:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ea10:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea14:	eddf 5a15 	vldr	s11, [pc, #84]	; 800ea6c <CurrentSensor_getIdq+0x104>
 800ea18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea1c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ea20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea24:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800ea2e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ea32:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ea36:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ea3a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea3e:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800ea6c <CurrentSensor_getIdq+0x104>
 800ea42:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea46:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ea4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea4e:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Iq = 0.8165f * (
 800ea52:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ea70 <CurrentSensor_getIdq+0x108>
 800ea56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	edc3 7a00 	vstr	s15, [r3]

}
 800ea60:	bf00      	nop
 800ea62:	371c      	adds	r7, #28
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	3f5ae148 	.word	0x3f5ae148
 800ea70:	3f510625 	.word	0x3f510625

0800ea74 <median3>:

/*
 * Length:3 のメディアンフィルタ
 */
inline int32_t median3(int32_t *buf)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	3304      	adds	r3, #4
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	da17      	bge.n	800eaba <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3308      	adds	r3, #8
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	da02      	bge.n	800ea9e <median3+0x2a>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	e025      	b.n	800eaea <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	da02      	bge.n	800eab4 <median3+0x40>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	e01a      	b.n	800eaea <median3+0x76>
		else						return buf[1];
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	e017      	b.n	800eaea <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	3308      	adds	r3, #8
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	3304      	adds	r3, #4
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	da02      	bge.n	800ead0 <median3+0x5c>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	e00c      	b.n	800eaea <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	3308      	adds	r3, #8
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	3304      	adds	r3, #4
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	429a      	cmp	r2, r3
 800eade:	da02      	bge.n	800eae6 <median3+0x72>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	e001      	b.n	800eaea <median3+0x76>
		else						return buf[0];
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
	...

0800eaf8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800eafe:	463b      	mov	r3, r7
 800eb00:	2200      	movs	r2, #0
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	605a      	str	r2, [r3, #4]
 800eb06:	609a      	str	r2, [r3, #8]
 800eb08:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800eb0a:	4b22      	ldr	r3, [pc, #136]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb0c:	4a22      	ldr	r2, [pc, #136]	; (800eb98 <MX_ADC1_Init+0xa0>)
 800eb0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800eb10:	4b20      	ldr	r3, [pc, #128]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eb16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800eb18:	4b1e      	ldr	r3, [pc, #120]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800eb1e:	4b1d      	ldr	r3, [pc, #116]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800eb24:	4b1b      	ldr	r3, [pc, #108]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eb2a:	4b1a      	ldr	r3, [pc, #104]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800eb32:	4b18      	ldr	r3, [pc, #96]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800eb38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800eb3a:	4b16      	ldr	r3, [pc, #88]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb3c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800eb40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800eb42:	4b14      	ldr	r3, [pc, #80]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800eb48:	4b12      	ldr	r3, [pc, #72]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800eb4e:	4b11      	ldr	r3, [pc, #68]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800eb56:	4b0f      	ldr	r3, [pc, #60]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb58:	2201      	movs	r2, #1
 800eb5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800eb5c:	480d      	ldr	r0, [pc, #52]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb5e:	f7fa f967 	bl	8008e30 <HAL_ADC_Init>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800eb68:	f000 ffba 	bl	800fae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800eb70:	2301      	movs	r3, #1
 800eb72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800eb74:	2301      	movs	r3, #1
 800eb76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eb78:	463b      	mov	r3, r7
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	4805      	ldr	r0, [pc, #20]	; (800eb94 <MX_ADC1_Init+0x9c>)
 800eb7e:	f7fa faab 	bl	80090d8 <HAL_ADC_ConfigChannel>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800eb88:	f000 ffaa 	bl	800fae0 <Error_Handler>
  }

}
 800eb8c:	bf00      	nop
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	200002e4 	.word	0x200002e4
 800eb98:	40012000 	.word	0x40012000

0800eb9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800eba2:	463b      	mov	r3, r7
 800eba4:	2200      	movs	r2, #0
 800eba6:	601a      	str	r2, [r3, #0]
 800eba8:	605a      	str	r2, [r3, #4]
 800ebaa:	609a      	str	r2, [r3, #8]
 800ebac:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800ebae:	4b22      	ldr	r3, [pc, #136]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebb0:	4a22      	ldr	r2, [pc, #136]	; (800ec3c <MX_ADC2_Init+0xa0>)
 800ebb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ebb4:	4b20      	ldr	r3, [pc, #128]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ebba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ebbc:	4b1e      	ldr	r3, [pc, #120]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800ebc2:	4b1d      	ldr	r3, [pc, #116]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ebc8:	4b1b      	ldr	r3, [pc, #108]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ebce:	4b1a      	ldr	r3, [pc, #104]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800ebd6:	4b18      	ldr	r3, [pc, #96]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ebdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800ebde:	4b16      	ldr	r3, [pc, #88]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebe0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ebe4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ebe6:	4b14      	ldr	r3, [pc, #80]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800ebec:	4b12      	ldr	r3, [pc, #72]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebee:	2201      	movs	r2, #1
 800ebf0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800ebf2:	4b11      	ldr	r3, [pc, #68]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ebfa:	4b0f      	ldr	r3, [pc, #60]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ec00:	480d      	ldr	r0, [pc, #52]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ec02:	f7fa f915 	bl	8008e30 <HAL_ADC_Init>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d001      	beq.n	800ec10 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800ec0c:	f000 ff68 	bl	800fae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ec10:	2304      	movs	r3, #4
 800ec12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ec14:	2301      	movs	r3, #1
 800ec16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ec1c:	463b      	mov	r3, r7
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4805      	ldr	r0, [pc, #20]	; (800ec38 <MX_ADC2_Init+0x9c>)
 800ec22:	f7fa fa59 	bl	80090d8 <HAL_ADC_ConfigChannel>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d001      	beq.n	800ec30 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800ec2c:	f000 ff58 	bl	800fae0 <Error_Handler>
  }

}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	2000023c 	.word	0x2000023c
 800ec3c:	40012100 	.word	0x40012100

0800ec40 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800ec46:	463b      	mov	r3, r7
 800ec48:	2200      	movs	r2, #0
 800ec4a:	601a      	str	r2, [r3, #0]
 800ec4c:	605a      	str	r2, [r3, #4]
 800ec4e:	609a      	str	r2, [r3, #8]
 800ec50:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800ec52:	4b22      	ldr	r3, [pc, #136]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec54:	4a22      	ldr	r2, [pc, #136]	; (800ece0 <MX_ADC3_Init+0xa0>)
 800ec56:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ec58:	4b20      	ldr	r3, [pc, #128]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ec5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800ec60:	4b1e      	ldr	r3, [pc, #120]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800ec66:	4b1d      	ldr	r3, [pc, #116]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800ec6c:	4b1b      	ldr	r3, [pc, #108]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec6e:	2200      	movs	r2, #0
 800ec70:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800ec72:	4b1a      	ldr	r3, [pc, #104]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec74:	2200      	movs	r2, #0
 800ec76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800ec7a:	4b18      	ldr	r3, [pc, #96]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ec80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800ec82:	4b16      	ldr	r3, [pc, #88]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec84:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ec88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ec8a:	4b14      	ldr	r3, [pc, #80]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800ec90:	4b12      	ldr	r3, [pc, #72]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec92:	2201      	movs	r2, #1
 800ec94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800ec96:	4b11      	ldr	r3, [pc, #68]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ec9e:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800eca0:	2201      	movs	r2, #1
 800eca2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800eca4:	480d      	ldr	r0, [pc, #52]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800eca6:	f7fa f8c3 	bl	8008e30 <HAL_ADC_Init>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d001      	beq.n	800ecb4 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800ecb0:	f000 ff16 	bl	800fae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800ecc0:	463b      	mov	r3, r7
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	4805      	ldr	r0, [pc, #20]	; (800ecdc <MX_ADC3_Init+0x9c>)
 800ecc6:	f7fa fa07 	bl	80090d8 <HAL_ADC_ConfigChannel>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d001      	beq.n	800ecd4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800ecd0:	f000 ff06 	bl	800fae0 <Error_Handler>
  }

}
 800ecd4:	bf00      	nop
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	2000032c 	.word	0x2000032c
 800ece0:	40012200 	.word	0x40012200

0800ece4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08e      	sub	sp, #56	; 0x38
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ecec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	605a      	str	r2, [r3, #4]
 800ecf6:	609a      	str	r2, [r3, #8]
 800ecf8:	60da      	str	r2, [r3, #12]
 800ecfa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a9b      	ldr	r2, [pc, #620]	; (800ef70 <HAL_ADC_MspInit+0x28c>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d172      	bne.n	800edec <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ed06:	2300      	movs	r3, #0
 800ed08:	623b      	str	r3, [r7, #32]
 800ed0a:	4b9a      	ldr	r3, [pc, #616]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed0e:	4a99      	ldr	r2, [pc, #612]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed14:	6453      	str	r3, [r2, #68]	; 0x44
 800ed16:	4b97      	ldr	r3, [pc, #604]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed1e:	623b      	str	r3, [r7, #32]
 800ed20:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed22:	2300      	movs	r3, #0
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	4b93      	ldr	r3, [pc, #588]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2a:	4a92      	ldr	r2, [pc, #584]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed2c:	f043 0304 	orr.w	r3, r3, #4
 800ed30:	6313      	str	r3, [r2, #48]	; 0x30
 800ed32:	4b90      	ldr	r3, [pc, #576]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed36:	f003 0304 	and.w	r3, r3, #4
 800ed3a:	61fb      	str	r3, [r7, #28]
 800ed3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed3e:	2300      	movs	r3, #0
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	4b8c      	ldr	r3, [pc, #560]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed46:	4a8b      	ldr	r2, [pc, #556]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed48:	f043 0301 	orr.w	r3, r3, #1
 800ed4c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed4e:	4b89      	ldr	r3, [pc, #548]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ed50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	61bb      	str	r3, [r7, #24]
 800ed58:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed62:	2300      	movs	r3, #0
 800ed64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	4882      	ldr	r0, [pc, #520]	; (800ef78 <HAL_ADC_MspInit+0x294>)
 800ed6e:	f7fb fe71 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ed72:	2301      	movs	r3, #1
 800ed74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed76:	2303      	movs	r3, #3
 800ed78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed82:	4619      	mov	r1, r3
 800ed84:	487d      	ldr	r0, [pc, #500]	; (800ef7c <HAL_ADC_MspInit+0x298>)
 800ed86:	f7fb fe65 	bl	800aa54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800ed8a:	4b7d      	ldr	r3, [pc, #500]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800ed8c:	4a7d      	ldr	r2, [pc, #500]	; (800ef84 <HAL_ADC_MspInit+0x2a0>)
 800ed8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800ed90:	4b7b      	ldr	r3, [pc, #492]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ed96:	4b7a      	ldr	r3, [pc, #488]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ed9c:	4b78      	ldr	r3, [pc, #480]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800ed9e:	2200      	movs	r2, #0
 800eda0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800eda2:	4b77      	ldr	r3, [pc, #476]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800eda4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eda8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800edaa:	4b75      	ldr	r3, [pc, #468]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800edac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800edb2:	4b73      	ldr	r3, [pc, #460]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800edb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800edb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800edba:	4b71      	ldr	r3, [pc, #452]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800edc0:	4b6f      	ldr	r3, [pc, #444]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800edc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800edc6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800edc8:	4b6d      	ldr	r3, [pc, #436]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800edca:	2200      	movs	r2, #0
 800edcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800edce:	486c      	ldr	r0, [pc, #432]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800edd0:	f7fb faa8 	bl	800a324 <HAL_DMA_Init>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d001      	beq.n	800edde <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800edda:	f000 fe81 	bl	800fae0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4a67      	ldr	r2, [pc, #412]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800ede2:	639a      	str	r2, [r3, #56]	; 0x38
 800ede4:	4a66      	ldr	r2, [pc, #408]	; (800ef80 <HAL_ADC_MspInit+0x29c>)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800edea:	e0bc      	b.n	800ef66 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a65      	ldr	r2, [pc, #404]	; (800ef88 <HAL_ADC_MspInit+0x2a4>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d159      	bne.n	800eeaa <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800edf6:	2300      	movs	r3, #0
 800edf8:	617b      	str	r3, [r7, #20]
 800edfa:	4b5e      	ldr	r3, [pc, #376]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800edfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edfe:	4a5d      	ldr	r2, [pc, #372]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ee00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee04:	6453      	str	r3, [r2, #68]	; 0x44
 800ee06:	4b5b      	ldr	r3, [pc, #364]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ee08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee12:	2300      	movs	r3, #0
 800ee14:	613b      	str	r3, [r7, #16]
 800ee16:	4b57      	ldr	r3, [pc, #348]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ee18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1a:	4a56      	ldr	r2, [pc, #344]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ee1c:	f043 0301 	orr.w	r3, r3, #1
 800ee20:	6313      	str	r3, [r2, #48]	; 0x30
 800ee22:	4b54      	ldr	r3, [pc, #336]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800ee24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee26:	f003 0301 	and.w	r3, r3, #1
 800ee2a:	613b      	str	r3, [r7, #16]
 800ee2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ee2e:	2310      	movs	r3, #16
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ee32:	2303      	movs	r3, #3
 800ee34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee36:	2300      	movs	r3, #0
 800ee38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee3e:	4619      	mov	r1, r3
 800ee40:	484e      	ldr	r0, [pc, #312]	; (800ef7c <HAL_ADC_MspInit+0x298>)
 800ee42:	f7fb fe07 	bl	800aa54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800ee46:	4b51      	ldr	r3, [pc, #324]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee48:	4a51      	ldr	r2, [pc, #324]	; (800ef90 <HAL_ADC_MspInit+0x2ac>)
 800ee4a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800ee4c:	4b4f      	ldr	r3, [pc, #316]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ee52:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ee54:	4b4d      	ldr	r3, [pc, #308]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee56:	2200      	movs	r2, #0
 800ee58:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ee5a:	4b4c      	ldr	r3, [pc, #304]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ee60:	4b4a      	ldr	r3, [pc, #296]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee66:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ee68:	4b48      	ldr	r3, [pc, #288]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee6e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ee70:	4b46      	ldr	r3, [pc, #280]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ee76:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800ee78:	4b44      	ldr	r3, [pc, #272]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800ee7e:	4b43      	ldr	r3, [pc, #268]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ee84:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ee86:	4b41      	ldr	r3, [pc, #260]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee88:	2200      	movs	r2, #0
 800ee8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800ee8c:	483f      	ldr	r0, [pc, #252]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800ee8e:	f7fb fa49 	bl	800a324 <HAL_DMA_Init>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d001      	beq.n	800ee9c <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800ee98:	f000 fe22 	bl	800fae0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a3b      	ldr	r2, [pc, #236]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800eea0:	639a      	str	r2, [r3, #56]	; 0x38
 800eea2:	4a3a      	ldr	r2, [pc, #232]	; (800ef8c <HAL_ADC_MspInit+0x2a8>)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800eea8:	e05d      	b.n	800ef66 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a39      	ldr	r2, [pc, #228]	; (800ef94 <HAL_ADC_MspInit+0x2b0>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d158      	bne.n	800ef66 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	60fb      	str	r3, [r7, #12]
 800eeb8:	4b2e      	ldr	r3, [pc, #184]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800eeba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eebc:	4a2d      	ldr	r2, [pc, #180]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800eebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eec2:	6453      	str	r3, [r2, #68]	; 0x44
 800eec4:	4b2b      	ldr	r3, [pc, #172]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800eec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eecc:	60fb      	str	r3, [r7, #12]
 800eece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eed0:	2300      	movs	r3, #0
 800eed2:	60bb      	str	r3, [r7, #8]
 800eed4:	4b27      	ldr	r3, [pc, #156]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800eed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed8:	4a26      	ldr	r2, [pc, #152]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800eeda:	f043 0301 	orr.w	r3, r3, #1
 800eede:	6313      	str	r3, [r2, #48]	; 0x30
 800eee0:	4b24      	ldr	r3, [pc, #144]	; (800ef74 <HAL_ADC_MspInit+0x290>)
 800eee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	60bb      	str	r3, [r7, #8]
 800eeea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800eeec:	2302      	movs	r3, #2
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800eef0:	2303      	movs	r3, #3
 800eef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef4:	2300      	movs	r3, #0
 800eef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eefc:	4619      	mov	r1, r3
 800eefe:	481f      	ldr	r0, [pc, #124]	; (800ef7c <HAL_ADC_MspInit+0x298>)
 800ef00:	f7fb fda8 	bl	800aa54 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800ef04:	4b24      	ldr	r3, [pc, #144]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef06:	4a25      	ldr	r2, [pc, #148]	; (800ef9c <HAL_ADC_MspInit+0x2b8>)
 800ef08:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800ef0a:	4b23      	ldr	r3, [pc, #140]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ef10:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ef12:	4b21      	ldr	r3, [pc, #132]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ef18:	4b1f      	ldr	r3, [pc, #124]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800ef1e:	4b1e      	ldr	r3, [pc, #120]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ef24:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ef26:	4b1c      	ldr	r3, [pc, #112]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef2c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ef2e:	4b1a      	ldr	r3, [pc, #104]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ef34:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800ef36:	4b18      	ldr	r3, [pc, #96]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800ef3c:	4b16      	ldr	r3, [pc, #88]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ef42:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ef44:	4b14      	ldr	r3, [pc, #80]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef46:	2200      	movs	r2, #0
 800ef48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800ef4a:	4813      	ldr	r0, [pc, #76]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef4c:	f7fb f9ea 	bl	800a324 <HAL_DMA_Init>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800ef56:	f000 fdc3 	bl	800fae0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a0e      	ldr	r2, [pc, #56]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef5e:	639a      	str	r2, [r3, #56]	; 0x38
 800ef60:	4a0d      	ldr	r2, [pc, #52]	; (800ef98 <HAL_ADC_MspInit+0x2b4>)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ef66:	bf00      	nop
 800ef68:	3738      	adds	r7, #56	; 0x38
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	40012000 	.word	0x40012000
 800ef74:	40023800 	.word	0x40023800
 800ef78:	40020800 	.word	0x40020800
 800ef7c:	40020000 	.word	0x40020000
 800ef80:	20000374 	.word	0x20000374
 800ef84:	40026410 	.word	0x40026410
 800ef88:	40012100 	.word	0x40012100
 800ef8c:	200003d4 	.word	0x200003d4
 800ef90:	40026440 	.word	0x40026440
 800ef94:	40012200 	.word	0x40012200
 800ef98:	20000284 	.word	0x20000284
 800ef9c:	40026428 	.word	0x40026428

0800efa0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800efa4:	4b18      	ldr	r3, [pc, #96]	; (800f008 <MX_CAN1_Init+0x68>)
 800efa6:	4a19      	ldr	r2, [pc, #100]	; (800f00c <MX_CAN1_Init+0x6c>)
 800efa8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800efaa:	4b17      	ldr	r3, [pc, #92]	; (800f008 <MX_CAN1_Init+0x68>)
 800efac:	2204      	movs	r2, #4
 800efae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800efb0:	4b15      	ldr	r3, [pc, #84]	; (800f008 <MX_CAN1_Init+0x68>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800efb6:	4b14      	ldr	r3, [pc, #80]	; (800f008 <MX_CAN1_Init+0x68>)
 800efb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efbc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800efbe:	4b12      	ldr	r3, [pc, #72]	; (800f008 <MX_CAN1_Init+0x68>)
 800efc0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800efc4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800efc6:	4b10      	ldr	r3, [pc, #64]	; (800f008 <MX_CAN1_Init+0x68>)
 800efc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800efcc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800efce:	4b0e      	ldr	r3, [pc, #56]	; (800f008 <MX_CAN1_Init+0x68>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800efd4:	4b0c      	ldr	r3, [pc, #48]	; (800f008 <MX_CAN1_Init+0x68>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800efda:	4b0b      	ldr	r3, [pc, #44]	; (800f008 <MX_CAN1_Init+0x68>)
 800efdc:	2200      	movs	r2, #0
 800efde:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800efe0:	4b09      	ldr	r3, [pc, #36]	; (800f008 <MX_CAN1_Init+0x68>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800efe6:	4b08      	ldr	r3, [pc, #32]	; (800f008 <MX_CAN1_Init+0x68>)
 800efe8:	2200      	movs	r2, #0
 800efea:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800efec:	4b06      	ldr	r3, [pc, #24]	; (800f008 <MX_CAN1_Init+0x68>)
 800efee:	2200      	movs	r2, #0
 800eff0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800eff2:	4805      	ldr	r0, [pc, #20]	; (800f008 <MX_CAN1_Init+0x68>)
 800eff4:	f7fa fb20 	bl	8009638 <HAL_CAN_Init>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800effe:	f000 fd6f 	bl	800fae0 <Error_Handler>
  }

}
 800f002:	bf00      	nop
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	20000480 	.word	0x20000480
 800f00c:	40006400 	.word	0x40006400

0800f010 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08a      	sub	sp, #40	; 0x28
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f018:	f107 0314 	add.w	r3, r7, #20
 800f01c:	2200      	movs	r2, #0
 800f01e:	601a      	str	r2, [r3, #0]
 800f020:	605a      	str	r2, [r3, #4]
 800f022:	609a      	str	r2, [r3, #8]
 800f024:	60da      	str	r2, [r3, #12]
 800f026:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a21      	ldr	r2, [pc, #132]	; (800f0b4 <HAL_CAN_MspInit+0xa4>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d13c      	bne.n	800f0ac <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800f032:	2300      	movs	r3, #0
 800f034:	613b      	str	r3, [r7, #16]
 800f036:	4b20      	ldr	r3, [pc, #128]	; (800f0b8 <HAL_CAN_MspInit+0xa8>)
 800f038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03a:	4a1f      	ldr	r2, [pc, #124]	; (800f0b8 <HAL_CAN_MspInit+0xa8>)
 800f03c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f040:	6413      	str	r3, [r2, #64]	; 0x40
 800f042:	4b1d      	ldr	r3, [pc, #116]	; (800f0b8 <HAL_CAN_MspInit+0xa8>)
 800f044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f04a:	613b      	str	r3, [r7, #16]
 800f04c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f04e:	2300      	movs	r3, #0
 800f050:	60fb      	str	r3, [r7, #12]
 800f052:	4b19      	ldr	r3, [pc, #100]	; (800f0b8 <HAL_CAN_MspInit+0xa8>)
 800f054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f056:	4a18      	ldr	r2, [pc, #96]	; (800f0b8 <HAL_CAN_MspInit+0xa8>)
 800f058:	f043 0301 	orr.w	r3, r3, #1
 800f05c:	6313      	str	r3, [r2, #48]	; 0x30
 800f05e:	4b16      	ldr	r3, [pc, #88]	; (800f0b8 <HAL_CAN_MspInit+0xa8>)
 800f060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f06a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f06e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f070:	2302      	movs	r3, #2
 800f072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f074:	2300      	movs	r3, #0
 800f076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f078:	2303      	movs	r3, #3
 800f07a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800f07c:	2309      	movs	r3, #9
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	4619      	mov	r1, r3
 800f086:	480d      	ldr	r0, [pc, #52]	; (800f0bc <HAL_CAN_MspInit+0xac>)
 800f088:	f7fb fce4 	bl	800aa54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800f08c:	2200      	movs	r2, #0
 800f08e:	2100      	movs	r1, #0
 800f090:	2013      	movs	r0, #19
 800f092:	f7fb f910 	bl	800a2b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800f096:	2013      	movs	r0, #19
 800f098:	f7fb f929 	bl	800a2ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800f09c:	2200      	movs	r2, #0
 800f09e:	2100      	movs	r1, #0
 800f0a0:	2014      	movs	r0, #20
 800f0a2:	f7fb f908 	bl	800a2b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800f0a6:	2014      	movs	r0, #20
 800f0a8:	f7fb f921 	bl	800a2ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800f0ac:	bf00      	nop
 800f0ae:	3728      	adds	r7, #40	; 0x28
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	40006400 	.word	0x40006400
 800f0b8:	40023800 	.word	0x40023800
 800f0bc:	40020000 	.word	0x40020000

0800f0c0 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 800f0c4:	f000 f84a 	bl	800f15c <getChannel>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	4b20      	ldr	r3, [pc, #128]	; (800f150 <CAN_Init+0x90>)
 800f0ce:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 800f0d0:	4b20      	ldr	r3, [pc, #128]	; (800f154 <CAN_Init+0x94>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800f0d6:	4b1f      	ldr	r3, [pc, #124]	; (800f154 <CAN_Init+0x94>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800f0dc:	4b1d      	ldr	r3, [pc, #116]	; (800f154 <CAN_Init+0x94>)
 800f0de:	2201      	movs	r2, #1
 800f0e0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 800f0e2:	4b1b      	ldr	r3, [pc, #108]	; (800f150 <CAN_Init+0x90>)
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	029b      	lsls	r3, r3, #10
 800f0e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	4b19      	ldr	r3, [pc, #100]	; (800f154 <CAN_Init+0x94>)
 800f0f0:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800f0f2:	4b18      	ldr	r3, [pc, #96]	; (800f154 <CAN_Init+0x94>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 800f0f8:	4b16      	ldr	r3, [pc, #88]	; (800f154 <CAN_Init+0x94>)
 800f0fa:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800f0fe:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 800f100:	4b14      	ldr	r3, [pc, #80]	; (800f154 <CAN_Init+0x94>)
 800f102:	2206      	movs	r2, #6
 800f104:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800f106:	4b13      	ldr	r3, [pc, #76]	; (800f154 <CAN_Init+0x94>)
 800f108:	2200      	movs	r2, #0
 800f10a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800f10c:	4b11      	ldr	r3, [pc, #68]	; (800f154 <CAN_Init+0x94>)
 800f10e:	2201      	movs	r2, #1
 800f110:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800f112:	4b10      	ldr	r3, [pc, #64]	; (800f154 <CAN_Init+0x94>)
 800f114:	220e      	movs	r2, #14
 800f116:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800f118:	490e      	ldr	r1, [pc, #56]	; (800f154 <CAN_Init+0x94>)
 800f11a:	480f      	ldr	r0, [pc, #60]	; (800f158 <CAN_Init+0x98>)
 800f11c:	f7fa fb88 	bl	8009830 <HAL_CAN_ConfigFilter>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <CAN_Init+0x6a>
	{
	  Error_Handler();
 800f126:	f000 fcdb 	bl	800fae0 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800f12a:	480b      	ldr	r0, [pc, #44]	; (800f158 <CAN_Init+0x98>)
 800f12c:	f7fa fc60 	bl	80099f0 <HAL_CAN_Start>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <CAN_Init+0x7a>
	{
	  Error_Handler();
 800f136:	f000 fcd3 	bl	800fae0 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800f13a:	2103      	movs	r1, #3
 800f13c:	4806      	ldr	r0, [pc, #24]	; (800f158 <CAN_Init+0x98>)
 800f13e:	f7fa fdae 	bl	8009c9e <HAL_CAN_ActivateNotification>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d001      	beq.n	800f14c <CAN_Init+0x8c>
	{
	  Error_Handler();
 800f148:	f000 fcca 	bl	800fae0 <Error_Handler>
	}


}
 800f14c:	bf00      	nop
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	200000f0 	.word	0x200000f0
 800f154:	20000434 	.word	0x20000434
 800f158:	20000480 	.word	0x20000480

0800f15c <getChannel>:


uint8_t getChannel()
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800f166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f16a:	481b      	ldr	r0, [pc, #108]	; (800f1d8 <getChannel+0x7c>)
 800f16c:	f7fb fe04 	bl	800ad78 <HAL_GPIO_ReadPin>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	bf0c      	ite	eq
 800f176:	2301      	moveq	r3, #1
 800f178:	2300      	movne	r3, #0
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	b25a      	sxtb	r2, r3
 800f17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f182:	4313      	orrs	r3, r2
 800f184:	b25b      	sxtb	r3, r3
 800f186:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800f188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f18c:	4812      	ldr	r0, [pc, #72]	; (800f1d8 <getChannel+0x7c>)
 800f18e:	f7fb fdf3 	bl	800ad78 <HAL_GPIO_ReadPin>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d101      	bne.n	800f19c <getChannel+0x40>
 800f198:	2302      	movs	r3, #2
 800f19a:	e000      	b.n	800f19e <getChannel+0x42>
 800f19c:	2300      	movs	r3, #0
 800f19e:	b25a      	sxtb	r2, r3
 800f1a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	b25b      	sxtb	r3, r3
 800f1a8:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800f1aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f1ae:	480a      	ldr	r0, [pc, #40]	; (800f1d8 <getChannel+0x7c>)
 800f1b0:	f7fb fde2 	bl	800ad78 <HAL_GPIO_ReadPin>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <getChannel+0x62>
 800f1ba:	2304      	movs	r3, #4
 800f1bc:	e000      	b.n	800f1c0 <getChannel+0x64>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	b25a      	sxtb	r2, r3
 800f1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	b25b      	sxtb	r3, r3
 800f1ca:	71fb      	strb	r3, [r7, #7]

	return ch;
 800f1cc:	79fb      	ldrb	r3, [r7, #7]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	40020400 	.word	0x40020400

0800f1dc <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2140      	movs	r1, #64	; 0x40
 800f1e8:	4803      	ldr	r0, [pc, #12]	; (800f1f8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800f1ea:	f7fb fddd 	bl	800ada8 <HAL_GPIO_WritePin>

}
 800f1ee:	bf00      	nop
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	40020400 	.word	0x40020400

0800f1fc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f204:	2200      	movs	r2, #0
 800f206:	2140      	movs	r1, #64	; 0x40
 800f208:	4803      	ldr	r0, [pc, #12]	; (800f218 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800f20a:	f7fb fdcd 	bl	800ada8 <HAL_GPIO_WritePin>

}
 800f20e:	bf00      	nop
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	40020400 	.word	0x40020400

0800f21c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f224:	2200      	movs	r2, #0
 800f226:	2140      	movs	r1, #64	; 0x40
 800f228:	4803      	ldr	r0, [pc, #12]	; (800f238 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800f22a:	f7fb fdbd 	bl	800ada8 <HAL_GPIO_WritePin>

}
 800f22e:	bf00      	nop
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	40020400 	.word	0x40020400

0800f23c <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800f244:	4b16      	ldr	r3, [pc, #88]	; (800f2a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f246:	4a17      	ldr	r2, [pc, #92]	; (800f2a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f248:	2100      	movs	r1, #0
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7fa fc14 	bl	8009a78 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800f250:	4b15      	ldr	r3, [pc, #84]	; (800f2a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800f252:	2201      	movs	r2, #1
 800f254:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800f256:	4b13      	ldr	r3, [pc, #76]	; (800f2a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	089b      	lsrs	r3, r3, #2
 800f25c:	f003 0307 	and.w	r3, r3, #7
 800f260:	2b01      	cmp	r3, #1
 800f262:	d114      	bne.n	800f28e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800f264:	4b0f      	ldr	r3, [pc, #60]	; (800f2a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f266:	691b      	ldr	r3, [r3, #16]
 800f268:	2b04      	cmp	r3, #4
 800f26a:	d110      	bne.n	800f28e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800f26c:	4b0c      	ldr	r3, [pc, #48]	; (800f2a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800f272:	4b0b      	ldr	r3, [pc, #44]	; (800f2a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f274:	785b      	ldrb	r3, [r3, #1]
 800f276:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800f278:	4b09      	ldr	r3, [pc, #36]	; (800f2a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f27a:	789b      	ldrb	r3, [r3, #2]
 800f27c:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800f27e:	4b08      	ldr	r3, [pc, #32]	; (800f2a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f280:	78db      	ldrb	r3, [r3, #3]
 800f282:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	4a09      	ldr	r2, [pc, #36]	; (800f2ac <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800f288:	6013      	str	r3, [r2, #0]

		timeoutReset();
 800f28a:	f001 fc89 	bl	8010ba0 <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800f28e:	2201      	movs	r2, #1
 800f290:	2140      	movs	r1, #64	; 0x40
 800f292:	4807      	ldr	r0, [pc, #28]	; (800f2b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800f294:	f7fb fd88 	bl	800ada8 <HAL_GPIO_WritePin>

}
 800f298:	bf00      	nop
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	20000478 	.word	0x20000478
 800f2a4:	2000045c 	.word	0x2000045c
 800f2a8:	200000f1 	.word	0x200000f1
 800f2ac:	200000b4 	.word	0x200000b4
 800f2b0:	40020000 	.word	0x40020000

0800f2b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	607b      	str	r3, [r7, #4]
 800f2be:	4b14      	ldr	r3, [pc, #80]	; (800f310 <MX_DMA_Init+0x5c>)
 800f2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c2:	4a13      	ldr	r2, [pc, #76]	; (800f310 <MX_DMA_Init+0x5c>)
 800f2c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f2c8:	6313      	str	r3, [r2, #48]	; 0x30
 800f2ca:	4b11      	ldr	r3, [pc, #68]	; (800f310 <MX_DMA_Init+0x5c>)
 800f2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2d2:	607b      	str	r3, [r7, #4]
 800f2d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	2100      	movs	r1, #0
 800f2da:	2038      	movs	r0, #56	; 0x38
 800f2dc:	f7fa ffeb 	bl	800a2b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f2e0:	2038      	movs	r0, #56	; 0x38
 800f2e2:	f7fb f804 	bl	800a2ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	2039      	movs	r0, #57	; 0x39
 800f2ec:	f7fa ffe3 	bl	800a2b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800f2f0:	2039      	movs	r0, #57	; 0x39
 800f2f2:	f7fa fffc 	bl	800a2ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	203a      	movs	r0, #58	; 0x3a
 800f2fc:	f7fa ffdb 	bl	800a2b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f300:	203a      	movs	r0, #58	; 0x3a
 800f302:	f7fa fff4 	bl	800a2ee <HAL_NVIC_EnableIRQ>

}
 800f306:	bf00      	nop
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	40023800 	.word	0x40023800

0800f314 <Encoder_Init>:
Encoder_TypeDef mainEncoder;



void Encoder_Init()
{
 800f314:	b480      	push	{r7}
 800f316:	af00      	add	r7, sp, #0

	mainEncoder.Init.hspi = &hspi2;
 800f318:	4b19      	ldr	r3, [pc, #100]	; (800f380 <Encoder_Init+0x6c>)
 800f31a:	4a1a      	ldr	r2, [pc, #104]	; (800f384 <Encoder_Init+0x70>)
 800f31c:	609a      	str	r2, [r3, #8]
	mainEncoder.Init.SPI_NSS_Port = SPI2_NSS_GPIO_Port;
 800f31e:	4b18      	ldr	r3, [pc, #96]	; (800f380 <Encoder_Init+0x6c>)
 800f320:	4a19      	ldr	r2, [pc, #100]	; (800f388 <Encoder_Init+0x74>)
 800f322:	60da      	str	r2, [r3, #12]
	mainEncoder.Init.SPI_NSS_Pin = SPI2_NSS_Pin;
 800f324:	4b16      	ldr	r3, [pc, #88]	; (800f380 <Encoder_Init+0x6c>)
 800f326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f32a:	821a      	strh	r2, [r3, #16]

	mainEncoder.Init.theta_offset = 0.0f;
 800f32c:	4b14      	ldr	r3, [pc, #80]	; (800f380 <Encoder_Init+0x6c>)
 800f32e:	f04f 0200 	mov.w	r2, #0
 800f332:	601a      	str	r2, [r3, #0]
	mainEncoder.Init.theta_re_offset = -3.0723f;
 800f334:	4b12      	ldr	r3, [pc, #72]	; (800f380 <Encoder_Init+0x6c>)
 800f336:	4a15      	ldr	r2, [pc, #84]	; (800f38c <Encoder_Init+0x78>)
 800f338:	605a      	str	r2, [r3, #4]

	mainEncoder.theta = 0.0f;
 800f33a:	4b11      	ldr	r3, [pc, #68]	; (800f380 <Encoder_Init+0x6c>)
 800f33c:	f04f 0200 	mov.w	r2, #0
 800f340:	615a      	str	r2, [r3, #20]
	mainEncoder.theta_re = 0.0f;
 800f342:	4b0f      	ldr	r3, [pc, #60]	; (800f380 <Encoder_Init+0x6c>)
 800f344:	f04f 0200 	mov.w	r2, #0
 800f348:	619a      	str	r2, [r3, #24]
	mainEncoder.forced_commute_enable = 0;
 800f34a:	4b0d      	ldr	r3, [pc, #52]	; (800f380 <Encoder_Init+0x6c>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainEncoder.cos_theta_re = 1.0f;
 800f352:	4b0b      	ldr	r3, [pc, #44]	; (800f380 <Encoder_Init+0x6c>)
 800f354:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f358:	61da      	str	r2, [r3, #28]
	mainEncoder.sin_theta_re = 0.0f;
 800f35a:	4b09      	ldr	r3, [pc, #36]	; (800f380 <Encoder_Init+0x6c>)
 800f35c:	f04f 0200 	mov.w	r2, #0
 800f360:	621a      	str	r2, [r3, #32]


	// SPI Interrupt Setting
	__HAL_SPI_ENABLE_IT(mainEncoder.Init.hspi, SPI_IT_TXE | SPI_IT_RXNE);
 800f362:	4b07      	ldr	r3, [pc, #28]	; (800f380 <Encoder_Init+0x6c>)
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	4b05      	ldr	r3, [pc, #20]	; (800f380 <Encoder_Init+0x6c>)
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800f374:	605a      	str	r2, [r3, #4]


}
 800f376:	bf00      	nop
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	200004a8 	.word	0x200004a8
 800f384:	200004d8 	.word	0x200004d8
 800f388:	40020400 	.word	0x40020400
 800f38c:	c044a090 	.word	0xc044a090

0800f390 <Encoder_Request>:

#endif


inline void Encoder_Request(Encoder_TypeDef *hEncoder)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]


	// Reading Encoder for next sampling
	hEncoder->spi2txBuf[0] = 0xff;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	22ff      	movs	r2, #255	; 0xff
 800f39c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	hEncoder->spi2txBuf[1] = 0xff;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	22ff      	movs	r2, #255	; 0xff
 800f3a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_RESET);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	68d8      	ldr	r0, [r3, #12]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	8a1b      	ldrh	r3, [r3, #16]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	f7fb fcf8 	bl	800ada8 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_IT(hEncoder->Init.hspi, hEncoder->spi2txBuf, hEncoder->spi2rxBuf, 1);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6898      	ldr	r0, [r3, #8]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f103 0227 	add.w	r2, r3, #39	; 0x27
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	f7fc fa95 	bl	800b8f8 <HAL_SPI_TransmitReceive_IT>


}
 800f3ce:	bf00      	nop
 800f3d0:	3708      	adds	r7, #8
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
	...

0800f3d8 <Encoder_Refresh>:


inline int Encoder_Refresh(Encoder_TypeDef *hEncoder)
{
 800f3d8:	b5b0      	push	{r4, r5, r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
	static uint16_t angle_raw = 0;
	static float _theta;
	static float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_SET);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	68d8      	ldr	r0, [r3, #12]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	8a1b      	ldrh	r3, [r3, #16]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	f7fb fcdc 	bl	800ada8 <HAL_GPIO_WritePin>

	angle_raw = (hEncoder->spi2rxBuf[1] & 0x3f) << 8 | hEncoder->spi2rxBuf[0];
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	021b      	lsls	r3, r3, #8
 800f3fa:	b21b      	sxth	r3, r3
 800f3fc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f400:	b21a      	sxth	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	b21b      	sxth	r3, r3
 800f40c:	4313      	orrs	r3, r2
 800f40e:	b21b      	sxth	r3, r3
 800f410:	b29a      	uxth	r2, r3
 800f412:	4b93      	ldr	r3, [pc, #588]	; (800f660 <Encoder_Refresh+0x288>)
 800f414:	801a      	strh	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + hEncoder->Init.theta_offset;
 800f416:	4b92      	ldr	r3, [pc, #584]	; (800f660 <Encoder_Refresh+0x288>)
 800f418:	881b      	ldrh	r3, [r3, #0]
 800f41a:	ee07 3a90 	vmov	s15, r3
 800f41e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f422:	eddf 6a90 	vldr	s13, [pc, #576]	; 800f664 <Encoder_Refresh+0x28c>
 800f426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f42a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f42e:	ee17 0a90 	vmov	r0, s15
 800f432:	f7f8 ff69 	bl	8008308 <__aeabi_f2d>
 800f436:	a386      	add	r3, pc, #536	; (adr r3, 800f650 <Encoder_Refresh+0x278>)
 800f438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43c:	f7f8 ffbc 	bl	80083b8 <__aeabi_dmul>
 800f440:	4603      	mov	r3, r0
 800f442:	460c      	mov	r4, r1
 800f444:	4625      	mov	r5, r4
 800f446:	461c      	mov	r4, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7f8 ff5b 	bl	8008308 <__aeabi_f2d>
 800f452:	4602      	mov	r2, r0
 800f454:	460b      	mov	r3, r1
 800f456:	4620      	mov	r0, r4
 800f458:	4629      	mov	r1, r5
 800f45a:	f7f8 fdf7 	bl	800804c <__adddf3>
 800f45e:	4603      	mov	r3, r0
 800f460:	460c      	mov	r4, r1
 800f462:	4618      	mov	r0, r3
 800f464:	4621      	mov	r1, r4
 800f466:	f7f9 fa7f 	bl	8008968 <__aeabi_d2f>
 800f46a:	4602      	mov	r2, r0
 800f46c:	4b7e      	ldr	r3, [pc, #504]	; (800f668 <Encoder_Refresh+0x290>)
 800f46e:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			hEncoder->theta = _theta + 2 * M_PI;
 800f470:	4b7d      	ldr	r3, [pc, #500]	; (800f668 <Encoder_Refresh+0x290>)
 800f472:	edd3 7a00 	vldr	s15, [r3]
 800f476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47e:	d513      	bpl.n	800f4a8 <Encoder_Refresh+0xd0>
 800f480:	4b79      	ldr	r3, [pc, #484]	; (800f668 <Encoder_Refresh+0x290>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4618      	mov	r0, r3
 800f486:	f7f8 ff3f 	bl	8008308 <__aeabi_f2d>
 800f48a:	a373      	add	r3, pc, #460	; (adr r3, 800f658 <Encoder_Refresh+0x280>)
 800f48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f490:	f7f8 fddc 	bl	800804c <__adddf3>
 800f494:	4603      	mov	r3, r0
 800f496:	460c      	mov	r4, r1
 800f498:	4618      	mov	r0, r3
 800f49a:	4621      	mov	r1, r4
 800f49c:	f7f9 fa64 	bl	8008968 <__aeabi_d2f>
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	615a      	str	r2, [r3, #20]
 800f4a6:	e024      	b.n	800f4f2 <Encoder_Refresh+0x11a>
	else if(_theta >= 2 * M_PI)	hEncoder->theta = _theta - 2 * M_PI;
 800f4a8:	4b6f      	ldr	r3, [pc, #444]	; (800f668 <Encoder_Refresh+0x290>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7f8 ff2b 	bl	8008308 <__aeabi_f2d>
 800f4b2:	a369      	add	r3, pc, #420	; (adr r3, 800f658 <Encoder_Refresh+0x280>)
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	f7f9 fa04 	bl	80088c4 <__aeabi_dcmpge>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d013      	beq.n	800f4ea <Encoder_Refresh+0x112>
 800f4c2:	4b69      	ldr	r3, [pc, #420]	; (800f668 <Encoder_Refresh+0x290>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7f8 ff1e 	bl	8008308 <__aeabi_f2d>
 800f4cc:	a362      	add	r3, pc, #392	; (adr r3, 800f658 <Encoder_Refresh+0x280>)
 800f4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d2:	f7f8 fdb9 	bl	8008048 <__aeabi_dsub>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	460c      	mov	r4, r1
 800f4da:	4618      	mov	r0, r3
 800f4dc:	4621      	mov	r1, r4
 800f4de:	f7f9 fa43 	bl	8008968 <__aeabi_d2f>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	615a      	str	r2, [r3, #20]
 800f4e8:	e003      	b.n	800f4f2 <Encoder_Refresh+0x11a>
	else						hEncoder->theta = _theta;
 800f4ea:	4b5f      	ldr	r3, [pc, #380]	; (800f668 <Encoder_Refresh+0x290>)
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	615a      	str	r2, [r3, #20]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + hEncoder->Init.theta_re_offset;
 800f4f2:	4b5b      	ldr	r3, [pc, #364]	; (800f660 <Encoder_Refresh+0x288>)
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	ee07 3a90 	vmov	s15, r3
 800f4fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f4fe:	eddf 6a59 	vldr	s13, [pc, #356]	; 800f664 <Encoder_Refresh+0x28c>
 800f502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f506:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f50a:	ee17 0a90 	vmov	r0, s15
 800f50e:	f7f8 fefb 	bl	8008308 <__aeabi_f2d>
 800f512:	a34f      	add	r3, pc, #316	; (adr r3, 800f650 <Encoder_Refresh+0x278>)
 800f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f518:	f7f8 ff4e 	bl	80083b8 <__aeabi_dmul>
 800f51c:	4603      	mov	r3, r0
 800f51e:	460c      	mov	r4, r1
 800f520:	4618      	mov	r0, r3
 800f522:	4621      	mov	r1, r4
 800f524:	f04f 0200 	mov.w	r2, #0
 800f528:	4b50      	ldr	r3, [pc, #320]	; (800f66c <Encoder_Refresh+0x294>)
 800f52a:	f7f8 ff45 	bl	80083b8 <__aeabi_dmul>
 800f52e:	4603      	mov	r3, r0
 800f530:	460c      	mov	r4, r1
 800f532:	4618      	mov	r0, r3
 800f534:	4621      	mov	r1, r4
 800f536:	f04f 0200 	mov.w	r2, #0
 800f53a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f53e:	f7f9 f865 	bl	800860c <__aeabi_ddiv>
 800f542:	4603      	mov	r3, r0
 800f544:	460c      	mov	r4, r1
 800f546:	4618      	mov	r0, r3
 800f548:	4621      	mov	r1, r4
 800f54a:	f7f9 fa0d 	bl	8008968 <__aeabi_d2f>
 800f54e:	4603      	mov	r3, r0
 800f550:	eddf 0a47 	vldr	s1, [pc, #284]	; 800f670 <Encoder_Refresh+0x298>
 800f554:	ee00 3a10 	vmov	s0, r3
 800f558:	f002 f8f0 	bl	801173c <fmodf>
 800f55c:	eeb0 7a40 	vmov.f32	s14, s0
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	edd3 7a01 	vldr	s15, [r3, #4]
 800f566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f56a:	4b42      	ldr	r3, [pc, #264]	; (800f674 <Encoder_Refresh+0x29c>)
 800f56c:	edc3 7a00 	vstr	s15, [r3]

	if(_theta_re < 0.0f)			hEncoder->theta_re = _theta_re + 2 * M_PI;
 800f570:	4b40      	ldr	r3, [pc, #256]	; (800f674 <Encoder_Refresh+0x29c>)
 800f572:	edd3 7a00 	vldr	s15, [r3]
 800f576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57e:	d513      	bpl.n	800f5a8 <Encoder_Refresh+0x1d0>
 800f580:	4b3c      	ldr	r3, [pc, #240]	; (800f674 <Encoder_Refresh+0x29c>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4618      	mov	r0, r3
 800f586:	f7f8 febf 	bl	8008308 <__aeabi_f2d>
 800f58a:	a333      	add	r3, pc, #204	; (adr r3, 800f658 <Encoder_Refresh+0x280>)
 800f58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f590:	f7f8 fd5c 	bl	800804c <__adddf3>
 800f594:	4603      	mov	r3, r0
 800f596:	460c      	mov	r4, r1
 800f598:	4618      	mov	r0, r3
 800f59a:	4621      	mov	r1, r4
 800f59c:	f7f9 f9e4 	bl	8008968 <__aeabi_d2f>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	619a      	str	r2, [r3, #24]
 800f5a6:	e024      	b.n	800f5f2 <Encoder_Refresh+0x21a>
	else if(_theta_re >= 2 * M_PI)	hEncoder->theta_re = _theta_re - 2 * M_PI;
 800f5a8:	4b32      	ldr	r3, [pc, #200]	; (800f674 <Encoder_Refresh+0x29c>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7f8 feab 	bl	8008308 <__aeabi_f2d>
 800f5b2:	a329      	add	r3, pc, #164	; (adr r3, 800f658 <Encoder_Refresh+0x280>)
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f7f9 f984 	bl	80088c4 <__aeabi_dcmpge>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d013      	beq.n	800f5ea <Encoder_Refresh+0x212>
 800f5c2:	4b2c      	ldr	r3, [pc, #176]	; (800f674 <Encoder_Refresh+0x29c>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7f8 fe9e 	bl	8008308 <__aeabi_f2d>
 800f5cc:	a322      	add	r3, pc, #136	; (adr r3, 800f658 <Encoder_Refresh+0x280>)
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	f7f8 fd39 	bl	8008048 <__aeabi_dsub>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	460c      	mov	r4, r1
 800f5da:	4618      	mov	r0, r3
 800f5dc:	4621      	mov	r1, r4
 800f5de:	f7f9 f9c3 	bl	8008968 <__aeabi_d2f>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	619a      	str	r2, [r3, #24]
 800f5e8:	e003      	b.n	800f5f2 <Encoder_Refresh+0x21a>
	else							hEncoder->theta_re = _theta_re;
 800f5ea:	4b22      	ldr	r3, [pc, #136]	; (800f674 <Encoder_Refresh+0x29c>)
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	619a      	str	r2, [r3, #24]

	hEncoder->cos_theta_re = sin_table2[(int)((hEncoder->theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	edd3 7a06 	vldr	s15, [r3, #24]
 800f5f8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f678 <Encoder_Refresh+0x2a0>
 800f5fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f600:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f604:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f608:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800f67c <Encoder_Refresh+0x2a4>
 800f60c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f614:	ee17 3a90 	vmov	r3, s15
 800f618:	4a19      	ldr	r2, [pc, #100]	; (800f680 <Encoder_Refresh+0x2a8>)
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	4413      	add	r3, r2
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	61da      	str	r2, [r3, #28]
	hEncoder->sin_theta_re = sin_table2[(int)(hEncoder->theta_re * 1591.54943f)];
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	edd3 7a06 	vldr	s15, [r3, #24]
 800f62a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800f684 <Encoder_Refresh+0x2ac>
 800f62e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f636:	ee17 3a90 	vmov	r3, s15
 800f63a:	4a11      	ldr	r2, [pc, #68]	; (800f680 <Encoder_Refresh+0x2a8>)
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	621a      	str	r2, [r3, #32]


	return 0;
 800f646:	2300      	movs	r3, #0

}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bdb0      	pop	{r4, r5, r7, pc}
 800f650:	54442d18 	.word	0x54442d18
 800f654:	400921fb 	.word	0x400921fb
 800f658:	54442d18 	.word	0x54442d18
 800f65c:	401921fb 	.word	0x401921fb
 800f660:	200000f2 	.word	0x200000f2
 800f664:	46800000 	.word	0x46800000
 800f668:	200000f4 	.word	0x200000f4
 800f66c:	40360000 	.word	0x40360000
 800f670:	40c90fdb 	.word	0x40c90fdb
 800f674:	200000f8 	.word	0x200000f8
 800f678:	3ea2f838 	.word	0x3ea2f838
 800f67c:	459c4000 	.word	0x459c4000
 800f680:	08011b90 	.word	0x08011b90
 800f684:	44c6f195 	.word	0x44c6f195

0800f688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b08a      	sub	sp, #40	; 0x28
 800f68c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f68e:	f107 0314 	add.w	r3, r7, #20
 800f692:	2200      	movs	r2, #0
 800f694:	601a      	str	r2, [r3, #0]
 800f696:	605a      	str	r2, [r3, #4]
 800f698:	609a      	str	r2, [r3, #8]
 800f69a:	60da      	str	r2, [r3, #12]
 800f69c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f69e:	2300      	movs	r3, #0
 800f6a0:	613b      	str	r3, [r7, #16]
 800f6a2:	4b45      	ldr	r3, [pc, #276]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6a6:	4a44      	ldr	r2, [pc, #272]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6a8:	f043 0304 	orr.w	r3, r3, #4
 800f6ac:	6313      	str	r3, [r2, #48]	; 0x30
 800f6ae:	4b42      	ldr	r3, [pc, #264]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6b2:	f003 0304 	and.w	r3, r3, #4
 800f6b6:	613b      	str	r3, [r7, #16]
 800f6b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60fb      	str	r3, [r7, #12]
 800f6be:	4b3e      	ldr	r3, [pc, #248]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6c2:	4a3d      	ldr	r2, [pc, #244]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800f6ca:	4b3b      	ldr	r3, [pc, #236]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60bb      	str	r3, [r7, #8]
 800f6da:	4b37      	ldr	r3, [pc, #220]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6de:	4a36      	ldr	r2, [pc, #216]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6e0:	f043 0301 	orr.w	r3, r3, #1
 800f6e4:	6313      	str	r3, [r2, #48]	; 0x30
 800f6e6:	4b34      	ldr	r3, [pc, #208]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ea:	f003 0301 	and.w	r3, r3, #1
 800f6ee:	60bb      	str	r3, [r7, #8]
 800f6f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	607b      	str	r3, [r7, #4]
 800f6f6:	4b30      	ldr	r3, [pc, #192]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6fa:	4a2f      	ldr	r2, [pc, #188]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f6fc:	f043 0302 	orr.w	r3, r3, #2
 800f700:	6313      	str	r3, [r2, #48]	; 0x30
 800f702:	4b2d      	ldr	r3, [pc, #180]	; (800f7b8 <MX_GPIO_Init+0x130>)
 800f704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f706:	f003 0302 	and.w	r3, r3, #2
 800f70a:	607b      	str	r3, [r7, #4]
 800f70c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 800f70e:	2200      	movs	r2, #0
 800f710:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 800f714:	4829      	ldr	r0, [pc, #164]	; (800f7bc <MX_GPIO_Init+0x134>)
 800f716:	f7fb fb47 	bl	800ada8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 800f71a:	2200      	movs	r2, #0
 800f71c:	f241 0150 	movw	r1, #4176	; 0x1050
 800f720:	4827      	ldr	r0, [pc, #156]	; (800f7c0 <MX_GPIO_Init+0x138>)
 800f722:	f7fb fb41 	bl	800ada8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800f726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f72a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f72c:	4b25      	ldr	r3, [pc, #148]	; (800f7c4 <MX_GPIO_Init+0x13c>)
 800f72e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f730:	2300      	movs	r3, #0
 800f732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800f734:	f107 0314 	add.w	r3, r7, #20
 800f738:	4619      	mov	r1, r3
 800f73a:	4823      	ldr	r0, [pc, #140]	; (800f7c8 <MX_GPIO_Init+0x140>)
 800f73c:	f7fb f98a 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 800f740:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800f744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f746:	2301      	movs	r3, #1
 800f748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f74e:	2300      	movs	r3, #0
 800f750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f752:	f107 0314 	add.w	r3, r7, #20
 800f756:	4619      	mov	r1, r3
 800f758:	4818      	ldr	r0, [pc, #96]	; (800f7bc <MX_GPIO_Init+0x134>)
 800f75a:	f7fb f97b 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 800f75e:	f241 0350 	movw	r3, #4176	; 0x1050
 800f762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f764:	2301      	movs	r3, #1
 800f766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f768:	2300      	movs	r3, #0
 800f76a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f76c:	2300      	movs	r3, #0
 800f76e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f770:	f107 0314 	add.w	r3, r7, #20
 800f774:	4619      	mov	r1, r3
 800f776:	4812      	ldr	r0, [pc, #72]	; (800f7c0 <MX_GPIO_Init+0x138>)
 800f778:	f7fb f96c 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 800f77c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800f780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f782:	2300      	movs	r3, #0
 800f784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f786:	2301      	movs	r3, #1
 800f788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f78a:	f107 0314 	add.w	r3, r7, #20
 800f78e:	4619      	mov	r1, r3
 800f790:	480b      	ldr	r0, [pc, #44]	; (800f7c0 <MX_GPIO_Init+0x138>)
 800f792:	f7fb f95f 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 800f796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f79a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f79c:	2300      	movs	r3, #0
 800f79e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 800f7a4:	f107 0314 	add.w	r3, r7, #20
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	4804      	ldr	r0, [pc, #16]	; (800f7bc <MX_GPIO_Init+0x134>)
 800f7ac:	f7fb f952 	bl	800aa54 <HAL_GPIO_Init>

}
 800f7b0:	bf00      	nop
 800f7b2:	3728      	adds	r7, #40	; 0x28
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	40023800 	.word	0x40023800
 800f7bc:	40020000 	.word	0x40020000
 800f7c0:	40020400 	.word	0x40020400
 800f7c4:	10210000 	.word	0x10210000
 800f7c8:	40020800 	.word	0x40020800

0800f7cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f7d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f7d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800f7dc:	f003 0301 	and.w	r3, r3, #1
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d013      	beq.n	800f80c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800f7e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f7e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800f7ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d00b      	beq.n	800f80c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800f7f4:	e000      	b.n	800f7f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 800f7f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800f7f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d0f9      	beq.n	800f7f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800f802:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	b2d2      	uxtb	r2, r2
 800f80a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800f80c:	687b      	ldr	r3, [r7, #4]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	370c      	adds	r7, #12
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr

0800f81a <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b086      	sub	sp, #24
 800f81e:	af00      	add	r7, sp, #0
 800f820:	60f8      	str	r0, [r7, #12]
 800f822:	60b9      	str	r1, [r7, #8]
 800f824:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800f826:	2300      	movs	r3, #0
 800f828:	617b      	str	r3, [r7, #20]
 800f82a:	e009      	b.n	800f840 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	60ba      	str	r2, [r7, #8]
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	4618      	mov	r0, r3
 800f836:	f7ff ffc9 	bl	800f7cc <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	3301      	adds	r3, #1
 800f83e:	617b      	str	r3, [r7, #20]
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	429a      	cmp	r2, r3
 800f846:	dbf1      	blt.n	800f82c <_write+0x12>
  }
  return len;
 800f848:	687b      	ldr	r3, [r7, #4]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3718      	adds	r7, #24
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
	...

0800f854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



	int count = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f85e:	f7f9 fa53 	bl	8008d08 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f862:	f000 f8d1 	bl	800fa08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f866:	f7ff ff0f 	bl	800f688 <MX_GPIO_Init>
  MX_DMA_Init();
 800f86a:	f7ff fd23 	bl	800f2b4 <MX_DMA_Init>
  MX_ADC1_Init();
 800f86e:	f7ff f943 	bl	800eaf8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800f872:	f7ff f993 	bl	800eb9c <MX_ADC2_Init>
  MX_ADC3_Init();
 800f876:	f7ff f9e3 	bl	800ec40 <MX_ADC3_Init>
  MX_CAN1_Init();
 800f87a:	f7ff fb91 	bl	800efa0 <MX_CAN1_Init>
  MX_SPI2_Init();
 800f87e:	f000 fd29 	bl	80102d4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800f882:	f000 fd5f 	bl	8010344 <MX_SPI3_Init>
  MX_TIM8_Init();
 800f886:	f000 ffe1 	bl	801084c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800f88a:	f001 f9a9 	bl	8010be0 <MX_USART2_UART_Init>



  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 800f88e:	4858      	ldr	r0, [pc, #352]	; (800f9f0 <main+0x19c>)
 800f890:	f001 fae4 	bl	8010e5c <puts>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 800f894:	2201      	movs	r2, #1
 800f896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f89a:	4856      	ldr	r0, [pc, #344]	; (800f9f4 <main+0x1a0>)
 800f89c:	f7fb fa84 	bl	800ada8 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f8a6:	4853      	ldr	r0, [pc, #332]	; (800f9f4 <main+0x1a0>)
 800f8a8:	f7fb fa7e 	bl	800ada8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800f8ac:	200a      	movs	r0, #10
 800f8ae:	f7f9 fa9d 	bl	8008dec <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f8b8:	484e      	ldr	r0, [pc, #312]	; (800f9f4 <main+0x1a0>)
 800f8ba:	f7fb fa75 	bl	800ada8 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800f8be:	2200      	movs	r2, #0
 800f8c0:	2140      	movs	r1, #64	; 0x40
 800f8c2:	484c      	ldr	r0, [pc, #304]	; (800f9f4 <main+0x1a0>)
 800f8c4:	f7fb fa70 	bl	800ada8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	2110      	movs	r1, #16
 800f8cc:	484a      	ldr	r0, [pc, #296]	; (800f9f8 <main+0x1a4>)
 800f8ce:	f7fb fa6b 	bl	800ada8 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 800f8d2:	f7ff fc43 	bl	800f15c <getChannel>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	70fb      	strb	r3, [r7, #3]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f8da:	2201      	movs	r2, #1
 800f8dc:	2120      	movs	r1, #32
 800f8de:	4845      	ldr	r0, [pc, #276]	; (800f9f4 <main+0x1a0>)
 800f8e0:	f7fb fa62 	bl	800ada8 <HAL_GPIO_WritePin>
 800f8e4:	2064      	movs	r0, #100	; 0x64
 800f8e6:	f7f9 fa81 	bl	8008dec <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	2120      	movs	r1, #32
 800f8ee:	4841      	ldr	r0, [pc, #260]	; (800f9f4 <main+0x1a0>)
 800f8f0:	f7fb fa5a 	bl	800ada8 <HAL_GPIO_WritePin>
 800f8f4:	2064      	movs	r0, #100	; 0x64
 800f8f6:	f7f9 fa79 	bl	8008dec <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	2120      	movs	r1, #32
 800f8fe:	483d      	ldr	r0, [pc, #244]	; (800f9f4 <main+0x1a0>)
 800f900:	f7fb fa52 	bl	800ada8 <HAL_GPIO_WritePin>
 800f904:	2064      	movs	r0, #100	; 0x64
 800f906:	f7f9 fa71 	bl	8008dec <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f90a:	2200      	movs	r2, #0
 800f90c:	2120      	movs	r1, #32
 800f90e:	4839      	ldr	r0, [pc, #228]	; (800f9f4 <main+0x1a0>)
 800f910:	f7fb fa4a 	bl	800ada8 <HAL_GPIO_WritePin>
 800f914:	2064      	movs	r0, #100	; 0x64
 800f916:	f7f9 fa69 	bl	8008dec <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f91a:	2201      	movs	r2, #1
 800f91c:	2120      	movs	r1, #32
 800f91e:	4835      	ldr	r0, [pc, #212]	; (800f9f4 <main+0x1a0>)
 800f920:	f7fb fa42 	bl	800ada8 <HAL_GPIO_WritePin>
 800f924:	2064      	movs	r0, #100	; 0x64
 800f926:	f7f9 fa61 	bl	8008dec <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f92a:	2200      	movs	r2, #0
 800f92c:	2120      	movs	r1, #32
 800f92e:	4831      	ldr	r0, [pc, #196]	; (800f9f4 <main+0x1a0>)
 800f930:	f7fb fa3a 	bl	800ada8 <HAL_GPIO_WritePin>
 800f934:	2064      	movs	r0, #100	; 0x64
 800f936:	f7f9 fa59 	bl	8008dec <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f93a:	2201      	movs	r2, #1
 800f93c:	2120      	movs	r1, #32
 800f93e:	482d      	ldr	r0, [pc, #180]	; (800f9f4 <main+0x1a0>)
 800f940:	f7fb fa32 	bl	800ada8 <HAL_GPIO_WritePin>
 800f944:	2064      	movs	r0, #100	; 0x64
 800f946:	f7f9 fa51 	bl	8008dec <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f94a:	2200      	movs	r2, #0
 800f94c:	2120      	movs	r1, #32
 800f94e:	4829      	ldr	r0, [pc, #164]	; (800f9f4 <main+0x1a0>)
 800f950:	f7fb fa2a 	bl	800ada8 <HAL_GPIO_WritePin>
 800f954:	2064      	movs	r0, #100	; 0x64
 800f956:	f7f9 fa49 	bl	8008dec <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f95a:	2201      	movs	r2, #1
 800f95c:	2120      	movs	r1, #32
 800f95e:	4825      	ldr	r0, [pc, #148]	; (800f9f4 <main+0x1a0>)
 800f960:	f7fb fa22 	bl	800ada8 <HAL_GPIO_WritePin>
 800f964:	2064      	movs	r0, #100	; 0x64
 800f966:	f7f9 fa41 	bl	8008dec <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f96a:	2200      	movs	r2, #0
 800f96c:	2120      	movs	r1, #32
 800f96e:	4821      	ldr	r0, [pc, #132]	; (800f9f4 <main+0x1a0>)
 800f970:	f7fb fa1a 	bl	800ada8 <HAL_GPIO_WritePin>
 800f974:	2064      	movs	r0, #100	; 0x64
 800f976:	f7f9 fa39 	bl	8008dec <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f97a:	2201      	movs	r2, #1
 800f97c:	2120      	movs	r1, #32
 800f97e:	481d      	ldr	r0, [pc, #116]	; (800f9f4 <main+0x1a0>)
 800f980:	f7fb fa12 	bl	800ada8 <HAL_GPIO_WritePin>
 800f984:	2064      	movs	r0, #100	; 0x64
 800f986:	f7f9 fa31 	bl	8008dec <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f98a:	2200      	movs	r2, #0
 800f98c:	2120      	movs	r1, #32
 800f98e:	4819      	ldr	r0, [pc, #100]	; (800f9f4 <main+0x1a0>)
 800f990:	f7fb fa0a 	bl	800ada8 <HAL_GPIO_WritePin>
 800f994:	2064      	movs	r0, #100	; 0x64
 800f996:	f7f9 fa29 	bl	8008dec <HAL_Delay>


  ch = getChannel();
 800f99a:	f7ff fbdf 	bl	800f15c <getChannel>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	70bb      	strb	r3, [r7, #2]




  CAN_Init();
 800f9a2:	f7ff fb8d 	bl	800f0c0 <CAN_Init>


//  SPI_Init();

  Encoder_Init();
 800f9a6:	f7ff fcb5 	bl	800f314 <Encoder_Init>


  HAL_Delay(100);
 800f9aa:	2064      	movs	r0, #100	; 0x64
 800f9ac:	f7f9 fa1e 	bl	8008dec <HAL_Delay>

  CurrentSensor_Init();
 800f9b0:	f7fe fe38 	bl	800e624 <CurrentSensor_Init>

  CurrentSensor_Start(&mainCS);
 800f9b4:	4811      	ldr	r0, [pc, #68]	; (800f9fc <main+0x1a8>)
 800f9b6:	f7fe fe6d 	bl	800e694 <CurrentSensor_Start>


  ACR_Init();
 800f9ba:	f7fe f8d5 	bl	800db68 <ACR_Init>


  TIM_Init();
 800f9be:	f001 f89f 	bl	8010b00 <TIM_Init>

//  ADC_Init();


  HAL_Delay(10);
 800f9c2:	200a      	movs	r0, #10
 800f9c4:	f7f9 fa12 	bl	8008dec <HAL_Delay>



  ACR_Start(&mainACR);
 800f9c8:	480d      	ldr	r0, [pc, #52]	; (800fa00 <main+0x1ac>)
 800f9ca:	f7fe f907 	bl	800dbdc <ACR_Start>



  //while(1);

  ASR_Start();
 800f9ce:	f7fe fbdb 	bl	800e188 <ASR_Start>


	  //mainACR.Vq_ref = 0.5;


	  if(ASR_flg == 1)
 800f9d2:	4b0c      	ldr	r3, [pc, #48]	; (800fa04 <main+0x1b0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d1fb      	bne.n	800f9d2 <main+0x17e>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 800f9da:	2110      	movs	r1, #16
 800f9dc:	4806      	ldr	r0, [pc, #24]	; (800f9f8 <main+0x1a4>)
 800f9de:	f7fb f9fc 	bl	800adda <HAL_GPIO_TogglePin>
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 800f9e2:	f7fe fbdd 	bl	800e1a0 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 800f9e6:	4b07      	ldr	r3, [pc, #28]	; (800fa04 <main+0x1b0>)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 800f9ec:	e7f1      	b.n	800f9d2 <main+0x17e>
 800f9ee:	bf00      	nop
 800f9f0:	08011b48 	.word	0x08011b48
 800f9f4:	40020000 	.word	0x40020000
 800f9f8:	40020400 	.word	0x40020400
 800f9fc:	200001cc 	.word	0x200001cc
 800fa00:	20000158 	.word	0x20000158
 800fa04:	200000c8 	.word	0x200000c8

0800fa08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b094      	sub	sp, #80	; 0x50
 800fa0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fa0e:	f107 031c 	add.w	r3, r7, #28
 800fa12:	2234      	movs	r2, #52	; 0x34
 800fa14:	2100      	movs	r1, #0
 800fa16:	4618      	mov	r0, r3
 800fa18:	f001 f9bb 	bl	8010d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fa1c:	f107 0308 	add.w	r3, r7, #8
 800fa20:	2200      	movs	r2, #0
 800fa22:	601a      	str	r2, [r3, #0]
 800fa24:	605a      	str	r2, [r3, #4]
 800fa26:	609a      	str	r2, [r3, #8]
 800fa28:	60da      	str	r2, [r3, #12]
 800fa2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	607b      	str	r3, [r7, #4]
 800fa30:	4b29      	ldr	r3, [pc, #164]	; (800fad8 <SystemClock_Config+0xd0>)
 800fa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa34:	4a28      	ldr	r2, [pc, #160]	; (800fad8 <SystemClock_Config+0xd0>)
 800fa36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa3a:	6413      	str	r3, [r2, #64]	; 0x40
 800fa3c:	4b26      	ldr	r3, [pc, #152]	; (800fad8 <SystemClock_Config+0xd0>)
 800fa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa44:	607b      	str	r3, [r7, #4]
 800fa46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fa48:	2300      	movs	r3, #0
 800fa4a:	603b      	str	r3, [r7, #0]
 800fa4c:	4b23      	ldr	r3, [pc, #140]	; (800fadc <SystemClock_Config+0xd4>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a22      	ldr	r2, [pc, #136]	; (800fadc <SystemClock_Config+0xd4>)
 800fa52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fa56:	6013      	str	r3, [r2, #0]
 800fa58:	4b20      	ldr	r3, [pc, #128]	; (800fadc <SystemClock_Config+0xd4>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fa60:	603b      	str	r3, [r7, #0]
 800fa62:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800fa64:	2302      	movs	r3, #2
 800fa66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800fa6c:	2310      	movs	r3, #16
 800fa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fa70:	2302      	movs	r3, #2
 800fa72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800fa74:	2300      	movs	r3, #0
 800fa76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800fa78:	2310      	movs	r3, #16
 800fa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 800fa7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800fa80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800fa82:	2302      	movs	r3, #2
 800fa84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800fa86:	2302      	movs	r3, #2
 800fa88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800fa8a:	2302      	movs	r3, #2
 800fa8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fa8e:	f107 031c 	add.w	r3, r7, #28
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fb fc72 	bl	800b37c <HAL_RCC_OscConfig>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800fa9e:	f000 f81f 	bl	800fae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800faa2:	230f      	movs	r3, #15
 800faa4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800faa6:	2302      	movs	r3, #2
 800faa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800faaa:	2300      	movs	r3, #0
 800faac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800faae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800fab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800fab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fab8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800faba:	f107 0308 	add.w	r3, r7, #8
 800fabe:	2105      	movs	r1, #5
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fb f9a5 	bl	800ae10 <HAL_RCC_ClockConfig>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800facc:	f000 f808 	bl	800fae0 <Error_Handler>
  }
}
 800fad0:	bf00      	nop
 800fad2:	3750      	adds	r7, #80	; 0x50
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	40023800 	.word	0x40023800
 800fadc:	40007000 	.word	0x40007000

0800fae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fae0:	b480      	push	{r7}
 800fae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800fae4:	bf00      	nop
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr

0800faee <startPWM>:




inline void startPWM(TIM_HandleTypeDef *htim)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b082      	sub	sp, #8
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 800faf6:	2100      	movs	r1, #0
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7fc fb05 	bl	800c108 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 800fafe:	2104      	movs	r1, #4
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f7fc fb01 	bl	800c108 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 800fb06:	2108      	movs	r1, #8
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7fc fafd 	bl	800c108 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_1);
 800fb0e:	2100      	movs	r1, #0
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7fd f9fa 	bl	800cf0a <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_2);
 800fb16:	2104      	movs	r1, #4
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7fd f9f6 	bl	800cf0a <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_3);
 800fb1e:	2108      	movs	r1, #8
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7fd f9f2 	bl	800cf0a <HAL_TIMEx_PWMN_Start_IT>

}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <stopPWM>:



inline void stopPWM(TIM_HandleTypeDef *htim)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 800fb36:	2100      	movs	r1, #0
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7fc fb69 	bl	800c210 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 800fb3e:	2104      	movs	r1, #4
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f7fc fb65 	bl	800c210 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_3);
 800fb46:	2108      	movs	r1, #8
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7fc fb61 	bl	800c210 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_1);
 800fb4e:	2100      	movs	r1, #0
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7fd fa2f 	bl	800cfb4 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_2);
 800fb56:	2104      	movs	r1, #4
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7fd fa2b 	bl	800cfb4 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_3);
 800fb5e:	2108      	movs	r1, #8
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7fd fa27 	bl	800cfb4 <HAL_TIMEx_PWMN_Stop_IT>

}
 800fb66:	bf00      	nop
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
	...

0800fb70 <setSVM_dq>:


inline void setSVM_dq(TIM_HandleTypeDef *htim, float Vd_ref, float Vq_ref, float cos_theta_re, float sin_theta_re)
{
 800fb70:	b5b0      	push	{r4, r5, r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6178      	str	r0, [r7, #20]
 800fb78:	ed87 0a04 	vstr	s0, [r7, #16]
 800fb7c:	edc7 0a03 	vstr	s1, [r7, #12]
 800fb80:	ed87 1a02 	vstr	s2, [r7, #8]
 800fb84:	edc7 1a01 	vstr	s3, [r7, #4]
	static float x1, y1, x2, y2;
	static float x, y;
	static float vect1, vect2;


	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 800fb88:	ed97 7a04 	vldr	s14, [r7, #16]
 800fb8c:	edd7 7a02 	vldr	s15, [r7, #8]
 800fb90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb94:	edd7 6a03 	vldr	s13, [r7, #12]
 800fb98:	edd7 7a01 	vldr	s15, [r7, #4]
 800fb9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fba4:	4bad      	ldr	r3, [pc, #692]	; (800fe5c <setSVM_dq+0x2ec>)
 800fba6:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 800fbaa:	ed97 7a04 	vldr	s14, [r7, #16]
 800fbae:	edd7 7a01 	vldr	s15, [r7, #4]
 800fbb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fbb6:	edd7 6a03 	vldr	s13, [r7, #12]
 800fbba:	edd7 7a02 	vldr	s15, [r7, #8]
 800fbbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbc6:	4ba6      	ldr	r3, [pc, #664]	; (800fe60 <setSVM_dq+0x2f0>)
 800fbc8:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 800fbcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fbd0:	4ba3      	ldr	r3, [pc, #652]	; (800fe60 <setSVM_dq+0x2f0>)
 800fbd2:	edd3 7a00 	vldr	s15, [r3]
 800fbd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fbda:	eddf 6aa2 	vldr	s13, [pc, #648]	; 800fe64 <setSVM_dq+0x2f4>
 800fbde:	4b9f      	ldr	r3, [pc, #636]	; (800fe5c <setSVM_dq+0x2ec>)
 800fbe0:	edd3 7a00 	vldr	s15, [r3]
 800fbe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbec:	4b9e      	ldr	r3, [pc, #632]	; (800fe68 <setSVM_dq+0x2f8>)
 800fbee:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 800fbf2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fbf6:	4b9a      	ldr	r3, [pc, #616]	; (800fe60 <setSVM_dq+0x2f0>)
 800fbf8:	edd3 7a00 	vldr	s15, [r3]
 800fbfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fc00:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800fe6c <setSVM_dq+0x2fc>
 800fc04:	4b95      	ldr	r3, [pc, #596]	; (800fe5c <setSVM_dq+0x2ec>)
 800fc06:	edd3 7a00 	vldr	s15, [r3]
 800fc0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc12:	4b97      	ldr	r3, [pc, #604]	; (800fe70 <setSVM_dq+0x300>)
 800fc14:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 800fc18:	4b93      	ldr	r3, [pc, #588]	; (800fe68 <setSVM_dq+0x2f8>)
 800fc1a:	edd3 7a00 	vldr	s15, [r3]
 800fc1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc26:	db1e      	blt.n	800fc66 <setSVM_dq+0xf6>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 800fc28:	4b91      	ldr	r3, [pc, #580]	; (800fe70 <setSVM_dq+0x300>)
 800fc2a:	edd3 7a00 	vldr	s15, [r3]
 800fc2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc36:	d803      	bhi.n	800fc40 <setSVM_dq+0xd0>
 800fc38:	4b8e      	ldr	r3, [pc, #568]	; (800fe74 <setSVM_dq+0x304>)
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	601a      	str	r2, [r3, #0]
 800fc3e:	e030      	b.n	800fca2 <setSVM_dq+0x132>
		else if(cross0 >= cross1)	sector_SVM = 1;
 800fc40:	4b89      	ldr	r3, [pc, #548]	; (800fe68 <setSVM_dq+0x2f8>)
 800fc42:	ed93 7a00 	vldr	s14, [r3]
 800fc46:	4b8a      	ldr	r3, [pc, #552]	; (800fe70 <setSVM_dq+0x300>)
 800fc48:	edd3 7a00 	vldr	s15, [r3]
 800fc4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc54:	db03      	blt.n	800fc5e <setSVM_dq+0xee>
 800fc56:	4b87      	ldr	r3, [pc, #540]	; (800fe74 <setSVM_dq+0x304>)
 800fc58:	2201      	movs	r2, #1
 800fc5a:	601a      	str	r2, [r3, #0]
 800fc5c:	e021      	b.n	800fca2 <setSVM_dq+0x132>
		else						sector_SVM = 2;
 800fc5e:	4b85      	ldr	r3, [pc, #532]	; (800fe74 <setSVM_dq+0x304>)
 800fc60:	2202      	movs	r2, #2
 800fc62:	601a      	str	r2, [r3, #0]
 800fc64:	e01d      	b.n	800fca2 <setSVM_dq+0x132>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 800fc66:	4b82      	ldr	r3, [pc, #520]	; (800fe70 <setSVM_dq+0x300>)
 800fc68:	edd3 7a00 	vldr	s15, [r3]
 800fc6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc74:	db03      	blt.n	800fc7e <setSVM_dq+0x10e>
 800fc76:	4b7f      	ldr	r3, [pc, #508]	; (800fe74 <setSVM_dq+0x304>)
 800fc78:	2203      	movs	r2, #3
 800fc7a:	601a      	str	r2, [r3, #0]
 800fc7c:	e011      	b.n	800fca2 <setSVM_dq+0x132>
		else if(cross0 <= cross1)	sector_SVM = 4;
 800fc7e:	4b7a      	ldr	r3, [pc, #488]	; (800fe68 <setSVM_dq+0x2f8>)
 800fc80:	ed93 7a00 	vldr	s14, [r3]
 800fc84:	4b7a      	ldr	r3, [pc, #488]	; (800fe70 <setSVM_dq+0x300>)
 800fc86:	edd3 7a00 	vldr	s15, [r3]
 800fc8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc92:	d803      	bhi.n	800fc9c <setSVM_dq+0x12c>
 800fc94:	4b77      	ldr	r3, [pc, #476]	; (800fe74 <setSVM_dq+0x304>)
 800fc96:	2204      	movs	r2, #4
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	e002      	b.n	800fca2 <setSVM_dq+0x132>
		else						sector_SVM = 5;
 800fc9c:	4b75      	ldr	r3, [pc, #468]	; (800fe74 <setSVM_dq+0x304>)
 800fc9e:	2205      	movs	r2, #5
 800fca0:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 800fca2:	4b74      	ldr	r3, [pc, #464]	; (800fe74 <setSVM_dq+0x304>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	4a74      	ldr	r2, [pc, #464]	; (800fe78 <setSVM_dq+0x308>)
 800fca8:	00db      	lsls	r3, r3, #3
 800fcaa:	4413      	add	r3, r2
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a73      	ldr	r2, [pc, #460]	; (800fe7c <setSVM_dq+0x30c>)
 800fcb0:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 800fcb2:	4b70      	ldr	r3, [pc, #448]	; (800fe74 <setSVM_dq+0x304>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a70      	ldr	r2, [pc, #448]	; (800fe78 <setSVM_dq+0x308>)
 800fcb8:	00db      	lsls	r3, r3, #3
 800fcba:	4413      	add	r3, r2
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a6f      	ldr	r2, [pc, #444]	; (800fe80 <setSVM_dq+0x310>)
 800fcc2:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 800fcc4:	4b6b      	ldr	r3, [pc, #428]	; (800fe74 <setSVM_dq+0x304>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	4a6b      	ldr	r2, [pc, #428]	; (800fe78 <setSVM_dq+0x308>)
 800fccc:	00db      	lsls	r3, r3, #3
 800fcce:	4413      	add	r3, r2
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a6c      	ldr	r2, [pc, #432]	; (800fe84 <setSVM_dq+0x314>)
 800fcd4:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 800fcd6:	4b67      	ldr	r3, [pc, #412]	; (800fe74 <setSVM_dq+0x304>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	4a66      	ldr	r2, [pc, #408]	; (800fe78 <setSVM_dq+0x308>)
 800fcde:	00db      	lsls	r3, r3, #3
 800fce0:	4413      	add	r3, r2
 800fce2:	3304      	adds	r3, #4
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a68      	ldr	r2, [pc, #416]	; (800fe88 <setSVM_dq+0x318>)
 800fce8:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800fcea:	4b67      	ldr	r3, [pc, #412]	; (800fe88 <setSVM_dq+0x318>)
 800fcec:	ed93 7a00 	vldr	s14, [r3]
 800fcf0:	4b5a      	ldr	r3, [pc, #360]	; (800fe5c <setSVM_dq+0x2ec>)
 800fcf2:	edd3 7a00 	vldr	s15, [r3]
 800fcf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fcfa:	4b62      	ldr	r3, [pc, #392]	; (800fe84 <setSVM_dq+0x314>)
 800fcfc:	edd3 6a00 	vldr	s13, [r3]
 800fd00:	4b57      	ldr	r3, [pc, #348]	; (800fe60 <setSVM_dq+0x2f0>)
 800fd02:	edd3 7a00 	vldr	s15, [r3]
 800fd06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800fd0e:	4b5b      	ldr	r3, [pc, #364]	; (800fe7c <setSVM_dq+0x30c>)
 800fd10:	ed93 7a00 	vldr	s14, [r3]
 800fd14:	4b5c      	ldr	r3, [pc, #368]	; (800fe88 <setSVM_dq+0x318>)
 800fd16:	edd3 7a00 	vldr	s15, [r3]
 800fd1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd1e:	4b58      	ldr	r3, [pc, #352]	; (800fe80 <setSVM_dq+0x310>)
 800fd20:	ed93 6a00 	vldr	s12, [r3]
 800fd24:	4b57      	ldr	r3, [pc, #348]	; (800fe84 <setSVM_dq+0x314>)
 800fd26:	edd3 7a00 	vldr	s15, [r3]
 800fd2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fd2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fd32:	4b56      	ldr	r3, [pc, #344]	; (800fe8c <setSVM_dq+0x31c>)
 800fd34:	edd3 7a00 	vldr	s15, [r3]
 800fd38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd40:	4b53      	ldr	r3, [pc, #332]	; (800fe90 <setSVM_dq+0x320>)
 800fd42:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800fd46:	4b4e      	ldr	r3, [pc, #312]	; (800fe80 <setSVM_dq+0x310>)
 800fd48:	edd3 7a00 	vldr	s15, [r3]
 800fd4c:	eeb1 7a67 	vneg.f32	s14, s15
 800fd50:	4b42      	ldr	r3, [pc, #264]	; (800fe5c <setSVM_dq+0x2ec>)
 800fd52:	edd3 7a00 	vldr	s15, [r3]
 800fd56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd5a:	4b48      	ldr	r3, [pc, #288]	; (800fe7c <setSVM_dq+0x30c>)
 800fd5c:	edd3 6a00 	vldr	s13, [r3]
 800fd60:	4b3f      	ldr	r3, [pc, #252]	; (800fe60 <setSVM_dq+0x2f0>)
 800fd62:	edd3 7a00 	vldr	s15, [r3]
 800fd66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd6a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800fd6e:	4b43      	ldr	r3, [pc, #268]	; (800fe7c <setSVM_dq+0x30c>)
 800fd70:	ed93 7a00 	vldr	s14, [r3]
 800fd74:	4b44      	ldr	r3, [pc, #272]	; (800fe88 <setSVM_dq+0x318>)
 800fd76:	edd3 7a00 	vldr	s15, [r3]
 800fd7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd7e:	4b40      	ldr	r3, [pc, #256]	; (800fe80 <setSVM_dq+0x310>)
 800fd80:	ed93 6a00 	vldr	s12, [r3]
 800fd84:	4b3f      	ldr	r3, [pc, #252]	; (800fe84 <setSVM_dq+0x314>)
 800fd86:	edd3 7a00 	vldr	s15, [r3]
 800fd8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fd8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fd92:	4b3e      	ldr	r3, [pc, #248]	; (800fe8c <setSVM_dq+0x31c>)
 800fd94:	edd3 7a00 	vldr	s15, [r3]
 800fd98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fda0:	4b3c      	ldr	r3, [pc, #240]	; (800fe94 <setSVM_dq+0x324>)
 800fda2:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 800fda6:	4b33      	ldr	r3, [pc, #204]	; (800fe74 <setSVM_dq+0x304>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b05      	cmp	r3, #5
 800fdac:	f200 81d8 	bhi.w	8010160 <setSVM_dq+0x5f0>
 800fdb0:	a201      	add	r2, pc, #4	; (adr r2, 800fdb8 <setSVM_dq+0x248>)
 800fdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdb6:	bf00      	nop
 800fdb8:	0800fdd1 	.word	0x0800fdd1
 800fdbc:	0800fea5 	.word	0x0800fea5
 800fdc0:	0800ff31 	.word	0x0800ff31
 800fdc4:	0800ffbd 	.word	0x0800ffbd
 800fdc8:	08010049 	.word	0x08010049
 800fdcc:	080100d5 	.word	0x080100d5
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 800fdd0:	4b2f      	ldr	r3, [pc, #188]	; (800fe90 <setSVM_dq+0x320>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7f8 fa97 	bl	8008308 <__aeabi_f2d>
 800fdda:	4603      	mov	r3, r0
 800fddc:	460c      	mov	r4, r1
 800fdde:	461a      	mov	r2, r3
 800fde0:	4623      	mov	r3, r4
 800fde2:	f04f 0000 	mov.w	r0, #0
 800fde6:	492c      	ldr	r1, [pc, #176]	; (800fe98 <setSVM_dq+0x328>)
 800fde8:	f7f8 f92e 	bl	8008048 <__aeabi_dsub>
 800fdec:	4603      	mov	r3, r0
 800fdee:	460c      	mov	r4, r1
 800fdf0:	4625      	mov	r5, r4
 800fdf2:	461c      	mov	r4, r3
 800fdf4:	4b27      	ldr	r3, [pc, #156]	; (800fe94 <setSVM_dq+0x324>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f8 fa85 	bl	8008308 <__aeabi_f2d>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4620      	mov	r0, r4
 800fe04:	4629      	mov	r1, r5
 800fe06:	f7f8 f91f 	bl	8008048 <__aeabi_dsub>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	4618      	mov	r0, r3
 800fe10:	4621      	mov	r1, r4
 800fe12:	f04f 0200 	mov.w	r2, #0
 800fe16:	4b21      	ldr	r3, [pc, #132]	; (800fe9c <setSVM_dq+0x32c>)
 800fe18:	f7f8 face 	bl	80083b8 <__aeabi_dmul>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	460c      	mov	r4, r1
 800fe20:	4618      	mov	r0, r3
 800fe22:	4621      	mov	r1, r4
 800fe24:	f7f8 fda0 	bl	8008968 <__aeabi_d2f>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	4b1d      	ldr	r3, [pc, #116]	; (800fea0 <setSVM_dq+0x330>)
 800fe2c:	609a      	str	r2, [r3, #8]
 800fe2e:	4b1c      	ldr	r3, [pc, #112]	; (800fea0 <setSVM_dq+0x330>)
 800fe30:	ed93 7a02 	vldr	s14, [r3, #8]
 800fe34:	4b17      	ldr	r3, [pc, #92]	; (800fe94 <setSVM_dq+0x324>)
 800fe36:	edd3 7a00 	vldr	s15, [r3]
 800fe3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe3e:	4b18      	ldr	r3, [pc, #96]	; (800fea0 <setSVM_dq+0x330>)
 800fe40:	edc3 7a01 	vstr	s15, [r3, #4]
 800fe44:	4b16      	ldr	r3, [pc, #88]	; (800fea0 <setSVM_dq+0x330>)
 800fe46:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe4a:	4b11      	ldr	r3, [pc, #68]	; (800fe90 <setSVM_dq+0x320>)
 800fe4c:	edd3 7a00 	vldr	s15, [r3]
 800fe50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe54:	4b12      	ldr	r3, [pc, #72]	; (800fea0 <setSVM_dq+0x330>)
 800fe56:	edc3 7a00 	vstr	s15, [r3]
 800fe5a:	e181      	b.n	8010160 <setSVM_dq+0x5f0>
 800fe5c:	20000100 	.word	0x20000100
 800fe60:	20000104 	.word	0x20000104
 800fe64:	00000000 	.word	0x00000000
 800fe68:	20000108 	.word	0x20000108
 800fe6c:	3f5db22d 	.word	0x3f5db22d
 800fe70:	2000010c 	.word	0x2000010c
 800fe74:	200000fc 	.word	0x200000fc
 800fe78:	08011b58 	.word	0x08011b58
 800fe7c:	20000110 	.word	0x20000110
 800fe80:	20000114 	.word	0x20000114
 800fe84:	20000118 	.word	0x20000118
 800fe88:	2000011c 	.word	0x2000011c
 800fe8c:	20000014 	.word	0x20000014
 800fe90:	20000120 	.word	0x20000120
 800fe94:	20000124 	.word	0x20000124
 800fe98:	3ff00000 	.word	0x3ff00000
 800fe9c:	3fe00000 	.word	0x3fe00000
 800fea0:	20000128 	.word	0x20000128
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 800fea4:	4bc3      	ldr	r3, [pc, #780]	; (80101b4 <setSVM_dq+0x644>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7f8 fa2d 	bl	8008308 <__aeabi_f2d>
 800feae:	4603      	mov	r3, r0
 800feb0:	460c      	mov	r4, r1
 800feb2:	461a      	mov	r2, r3
 800feb4:	4623      	mov	r3, r4
 800feb6:	f04f 0000 	mov.w	r0, #0
 800feba:	49bf      	ldr	r1, [pc, #764]	; (80101b8 <setSVM_dq+0x648>)
 800febc:	f7f8 f8c4 	bl	8008048 <__aeabi_dsub>
 800fec0:	4603      	mov	r3, r0
 800fec2:	460c      	mov	r4, r1
 800fec4:	4625      	mov	r5, r4
 800fec6:	461c      	mov	r4, r3
 800fec8:	4bbc      	ldr	r3, [pc, #752]	; (80101bc <setSVM_dq+0x64c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4618      	mov	r0, r3
 800fece:	f7f8 fa1b 	bl	8008308 <__aeabi_f2d>
 800fed2:	4602      	mov	r2, r0
 800fed4:	460b      	mov	r3, r1
 800fed6:	4620      	mov	r0, r4
 800fed8:	4629      	mov	r1, r5
 800feda:	f7f8 f8b5 	bl	8008048 <__aeabi_dsub>
 800fede:	4603      	mov	r3, r0
 800fee0:	460c      	mov	r4, r1
 800fee2:	4618      	mov	r0, r3
 800fee4:	4621      	mov	r1, r4
 800fee6:	f04f 0200 	mov.w	r2, #0
 800feea:	4bb5      	ldr	r3, [pc, #724]	; (80101c0 <setSVM_dq+0x650>)
 800feec:	f7f8 fa64 	bl	80083b8 <__aeabi_dmul>
 800fef0:	4603      	mov	r3, r0
 800fef2:	460c      	mov	r4, r1
 800fef4:	4618      	mov	r0, r3
 800fef6:	4621      	mov	r1, r4
 800fef8:	f7f8 fd36 	bl	8008968 <__aeabi_d2f>
 800fefc:	4602      	mov	r2, r0
 800fefe:	4bb1      	ldr	r3, [pc, #708]	; (80101c4 <setSVM_dq+0x654>)
 800ff00:	609a      	str	r2, [r3, #8]
 800ff02:	4bb0      	ldr	r3, [pc, #704]	; (80101c4 <setSVM_dq+0x654>)
 800ff04:	ed93 7a02 	vldr	s14, [r3, #8]
 800ff08:	4baa      	ldr	r3, [pc, #680]	; (80101b4 <setSVM_dq+0x644>)
 800ff0a:	edd3 7a00 	vldr	s15, [r3]
 800ff0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff12:	4bac      	ldr	r3, [pc, #688]	; (80101c4 <setSVM_dq+0x654>)
 800ff14:	edc3 7a00 	vstr	s15, [r3]
 800ff18:	4baa      	ldr	r3, [pc, #680]	; (80101c4 <setSVM_dq+0x654>)
 800ff1a:	ed93 7a00 	vldr	s14, [r3]
 800ff1e:	4ba7      	ldr	r3, [pc, #668]	; (80101bc <setSVM_dq+0x64c>)
 800ff20:	edd3 7a00 	vldr	s15, [r3]
 800ff24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff28:	4ba6      	ldr	r3, [pc, #664]	; (80101c4 <setSVM_dq+0x654>)
 800ff2a:	edc3 7a01 	vstr	s15, [r3, #4]
 800ff2e:	e117      	b.n	8010160 <setSVM_dq+0x5f0>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 800ff30:	4ba0      	ldr	r3, [pc, #640]	; (80101b4 <setSVM_dq+0x644>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7f8 f9e7 	bl	8008308 <__aeabi_f2d>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	460c      	mov	r4, r1
 800ff3e:	461a      	mov	r2, r3
 800ff40:	4623      	mov	r3, r4
 800ff42:	f04f 0000 	mov.w	r0, #0
 800ff46:	499c      	ldr	r1, [pc, #624]	; (80101b8 <setSVM_dq+0x648>)
 800ff48:	f7f8 f87e 	bl	8008048 <__aeabi_dsub>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	460c      	mov	r4, r1
 800ff50:	4625      	mov	r5, r4
 800ff52:	461c      	mov	r4, r3
 800ff54:	4b99      	ldr	r3, [pc, #612]	; (80101bc <setSVM_dq+0x64c>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7f8 f9d5 	bl	8008308 <__aeabi_f2d>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	4620      	mov	r0, r4
 800ff64:	4629      	mov	r1, r5
 800ff66:	f7f8 f86f 	bl	8008048 <__aeabi_dsub>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	4618      	mov	r0, r3
 800ff70:	4621      	mov	r1, r4
 800ff72:	f04f 0200 	mov.w	r2, #0
 800ff76:	4b92      	ldr	r3, [pc, #584]	; (80101c0 <setSVM_dq+0x650>)
 800ff78:	f7f8 fa1e 	bl	80083b8 <__aeabi_dmul>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	460c      	mov	r4, r1
 800ff80:	4618      	mov	r0, r3
 800ff82:	4621      	mov	r1, r4
 800ff84:	f7f8 fcf0 	bl	8008968 <__aeabi_d2f>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	4b8e      	ldr	r3, [pc, #568]	; (80101c4 <setSVM_dq+0x654>)
 800ff8c:	601a      	str	r2, [r3, #0]
 800ff8e:	4b8d      	ldr	r3, [pc, #564]	; (80101c4 <setSVM_dq+0x654>)
 800ff90:	ed93 7a00 	vldr	s14, [r3]
 800ff94:	4b89      	ldr	r3, [pc, #548]	; (80101bc <setSVM_dq+0x64c>)
 800ff96:	edd3 7a00 	vldr	s15, [r3]
 800ff9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff9e:	4b89      	ldr	r3, [pc, #548]	; (80101c4 <setSVM_dq+0x654>)
 800ffa0:	edc3 7a02 	vstr	s15, [r3, #8]
 800ffa4:	4b87      	ldr	r3, [pc, #540]	; (80101c4 <setSVM_dq+0x654>)
 800ffa6:	ed93 7a02 	vldr	s14, [r3, #8]
 800ffaa:	4b82      	ldr	r3, [pc, #520]	; (80101b4 <setSVM_dq+0x644>)
 800ffac:	edd3 7a00 	vldr	s15, [r3]
 800ffb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffb4:	4b83      	ldr	r3, [pc, #524]	; (80101c4 <setSVM_dq+0x654>)
 800ffb6:	edc3 7a01 	vstr	s15, [r3, #4]
 800ffba:	e0d1      	b.n	8010160 <setSVM_dq+0x5f0>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 800ffbc:	4b7d      	ldr	r3, [pc, #500]	; (80101b4 <setSVM_dq+0x644>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7f8 f9a1 	bl	8008308 <__aeabi_f2d>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	460c      	mov	r4, r1
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4623      	mov	r3, r4
 800ffce:	f04f 0000 	mov.w	r0, #0
 800ffd2:	4979      	ldr	r1, [pc, #484]	; (80101b8 <setSVM_dq+0x648>)
 800ffd4:	f7f8 f838 	bl	8008048 <__aeabi_dsub>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	460c      	mov	r4, r1
 800ffdc:	4625      	mov	r5, r4
 800ffde:	461c      	mov	r4, r3
 800ffe0:	4b76      	ldr	r3, [pc, #472]	; (80101bc <setSVM_dq+0x64c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f8 f98f 	bl	8008308 <__aeabi_f2d>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	4620      	mov	r0, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	f7f8 f829 	bl	8008048 <__aeabi_dsub>
 800fff6:	4603      	mov	r3, r0
 800fff8:	460c      	mov	r4, r1
 800fffa:	4618      	mov	r0, r3
 800fffc:	4621      	mov	r1, r4
 800fffe:	f04f 0200 	mov.w	r2, #0
 8010002:	4b6f      	ldr	r3, [pc, #444]	; (80101c0 <setSVM_dq+0x650>)
 8010004:	f7f8 f9d8 	bl	80083b8 <__aeabi_dmul>
 8010008:	4603      	mov	r3, r0
 801000a:	460c      	mov	r4, r1
 801000c:	4618      	mov	r0, r3
 801000e:	4621      	mov	r1, r4
 8010010:	f7f8 fcaa 	bl	8008968 <__aeabi_d2f>
 8010014:	4602      	mov	r2, r0
 8010016:	4b6b      	ldr	r3, [pc, #428]	; (80101c4 <setSVM_dq+0x654>)
 8010018:	601a      	str	r2, [r3, #0]
 801001a:	4b6a      	ldr	r3, [pc, #424]	; (80101c4 <setSVM_dq+0x654>)
 801001c:	ed93 7a00 	vldr	s14, [r3]
 8010020:	4b64      	ldr	r3, [pc, #400]	; (80101b4 <setSVM_dq+0x644>)
 8010022:	edd3 7a00 	vldr	s15, [r3]
 8010026:	ee77 7a27 	vadd.f32	s15, s14, s15
 801002a:	4b66      	ldr	r3, [pc, #408]	; (80101c4 <setSVM_dq+0x654>)
 801002c:	edc3 7a01 	vstr	s15, [r3, #4]
 8010030:	4b64      	ldr	r3, [pc, #400]	; (80101c4 <setSVM_dq+0x654>)
 8010032:	ed93 7a01 	vldr	s14, [r3, #4]
 8010036:	4b61      	ldr	r3, [pc, #388]	; (80101bc <setSVM_dq+0x64c>)
 8010038:	edd3 7a00 	vldr	s15, [r3]
 801003c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010040:	4b60      	ldr	r3, [pc, #384]	; (80101c4 <setSVM_dq+0x654>)
 8010042:	edc3 7a02 	vstr	s15, [r3, #8]
 8010046:	e08b      	b.n	8010160 <setSVM_dq+0x5f0>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8010048:	4b5a      	ldr	r3, [pc, #360]	; (80101b4 <setSVM_dq+0x644>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4618      	mov	r0, r3
 801004e:	f7f8 f95b 	bl	8008308 <__aeabi_f2d>
 8010052:	4603      	mov	r3, r0
 8010054:	460c      	mov	r4, r1
 8010056:	461a      	mov	r2, r3
 8010058:	4623      	mov	r3, r4
 801005a:	f04f 0000 	mov.w	r0, #0
 801005e:	4956      	ldr	r1, [pc, #344]	; (80101b8 <setSVM_dq+0x648>)
 8010060:	f7f7 fff2 	bl	8008048 <__aeabi_dsub>
 8010064:	4603      	mov	r3, r0
 8010066:	460c      	mov	r4, r1
 8010068:	4625      	mov	r5, r4
 801006a:	461c      	mov	r4, r3
 801006c:	4b53      	ldr	r3, [pc, #332]	; (80101bc <setSVM_dq+0x64c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4618      	mov	r0, r3
 8010072:	f7f8 f949 	bl	8008308 <__aeabi_f2d>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	4620      	mov	r0, r4
 801007c:	4629      	mov	r1, r5
 801007e:	f7f7 ffe3 	bl	8008048 <__aeabi_dsub>
 8010082:	4603      	mov	r3, r0
 8010084:	460c      	mov	r4, r1
 8010086:	4618      	mov	r0, r3
 8010088:	4621      	mov	r1, r4
 801008a:	f04f 0200 	mov.w	r2, #0
 801008e:	4b4c      	ldr	r3, [pc, #304]	; (80101c0 <setSVM_dq+0x650>)
 8010090:	f7f8 f992 	bl	80083b8 <__aeabi_dmul>
 8010094:	4603      	mov	r3, r0
 8010096:	460c      	mov	r4, r1
 8010098:	4618      	mov	r0, r3
 801009a:	4621      	mov	r1, r4
 801009c:	f7f8 fc64 	bl	8008968 <__aeabi_d2f>
 80100a0:	4602      	mov	r2, r0
 80100a2:	4b48      	ldr	r3, [pc, #288]	; (80101c4 <setSVM_dq+0x654>)
 80100a4:	605a      	str	r2, [r3, #4]
 80100a6:	4b47      	ldr	r3, [pc, #284]	; (80101c4 <setSVM_dq+0x654>)
 80100a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80100ac:	4b43      	ldr	r3, [pc, #268]	; (80101bc <setSVM_dq+0x64c>)
 80100ae:	edd3 7a00 	vldr	s15, [r3]
 80100b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100b6:	4b43      	ldr	r3, [pc, #268]	; (80101c4 <setSVM_dq+0x654>)
 80100b8:	edc3 7a00 	vstr	s15, [r3]
 80100bc:	4b41      	ldr	r3, [pc, #260]	; (80101c4 <setSVM_dq+0x654>)
 80100be:	ed93 7a00 	vldr	s14, [r3]
 80100c2:	4b3c      	ldr	r3, [pc, #240]	; (80101b4 <setSVM_dq+0x644>)
 80100c4:	edd3 7a00 	vldr	s15, [r3]
 80100c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100cc:	4b3d      	ldr	r3, [pc, #244]	; (80101c4 <setSVM_dq+0x654>)
 80100ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80100d2:	e045      	b.n	8010160 <setSVM_dq+0x5f0>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 80100d4:	4b37      	ldr	r3, [pc, #220]	; (80101b4 <setSVM_dq+0x644>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4618      	mov	r0, r3
 80100da:	f7f8 f915 	bl	8008308 <__aeabi_f2d>
 80100de:	4603      	mov	r3, r0
 80100e0:	460c      	mov	r4, r1
 80100e2:	461a      	mov	r2, r3
 80100e4:	4623      	mov	r3, r4
 80100e6:	f04f 0000 	mov.w	r0, #0
 80100ea:	4933      	ldr	r1, [pc, #204]	; (80101b8 <setSVM_dq+0x648>)
 80100ec:	f7f7 ffac 	bl	8008048 <__aeabi_dsub>
 80100f0:	4603      	mov	r3, r0
 80100f2:	460c      	mov	r4, r1
 80100f4:	4625      	mov	r5, r4
 80100f6:	461c      	mov	r4, r3
 80100f8:	4b30      	ldr	r3, [pc, #192]	; (80101bc <setSVM_dq+0x64c>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7f8 f903 	bl	8008308 <__aeabi_f2d>
 8010102:	4602      	mov	r2, r0
 8010104:	460b      	mov	r3, r1
 8010106:	4620      	mov	r0, r4
 8010108:	4629      	mov	r1, r5
 801010a:	f7f7 ff9d 	bl	8008048 <__aeabi_dsub>
 801010e:	4603      	mov	r3, r0
 8010110:	460c      	mov	r4, r1
 8010112:	4618      	mov	r0, r3
 8010114:	4621      	mov	r1, r4
 8010116:	f04f 0200 	mov.w	r2, #0
 801011a:	4b29      	ldr	r3, [pc, #164]	; (80101c0 <setSVM_dq+0x650>)
 801011c:	f7f8 f94c 	bl	80083b8 <__aeabi_dmul>
 8010120:	4603      	mov	r3, r0
 8010122:	460c      	mov	r4, r1
 8010124:	4618      	mov	r0, r3
 8010126:	4621      	mov	r1, r4
 8010128:	f7f8 fc1e 	bl	8008968 <__aeabi_d2f>
 801012c:	4602      	mov	r2, r0
 801012e:	4b25      	ldr	r3, [pc, #148]	; (80101c4 <setSVM_dq+0x654>)
 8010130:	605a      	str	r2, [r3, #4]
 8010132:	4b24      	ldr	r3, [pc, #144]	; (80101c4 <setSVM_dq+0x654>)
 8010134:	ed93 7a01 	vldr	s14, [r3, #4]
 8010138:	4b1e      	ldr	r3, [pc, #120]	; (80101b4 <setSVM_dq+0x644>)
 801013a:	edd3 7a00 	vldr	s15, [r3]
 801013e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010142:	4b20      	ldr	r3, [pc, #128]	; (80101c4 <setSVM_dq+0x654>)
 8010144:	edc3 7a02 	vstr	s15, [r3, #8]
 8010148:	4b1e      	ldr	r3, [pc, #120]	; (80101c4 <setSVM_dq+0x654>)
 801014a:	ed93 7a02 	vldr	s14, [r3, #8]
 801014e:	4b1b      	ldr	r3, [pc, #108]	; (80101bc <setSVM_dq+0x64c>)
 8010150:	edd3 7a00 	vldr	s15, [r3]
 8010154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010158:	4b1a      	ldr	r3, [pc, #104]	; (80101c4 <setSVM_dq+0x654>)
 801015a:	edc3 7a00 	vstr	s15, [r3]
 801015e:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8010160:	4b18      	ldr	r3, [pc, #96]	; (80101c4 <setSVM_dq+0x654>)
 8010162:	edd3 7a00 	vldr	s15, [r3]
 8010166:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801016a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801016e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010172:	d503      	bpl.n	801017c <setSVM_dq+0x60c>
 8010174:	4b13      	ldr	r3, [pc, #76]	; (80101c4 <setSVM_dq+0x654>)
 8010176:	4a14      	ldr	r2, [pc, #80]	; (80101c8 <setSVM_dq+0x658>)
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	e00d      	b.n	8010198 <setSVM_dq+0x628>
 801017c:	4b11      	ldr	r3, [pc, #68]	; (80101c4 <setSVM_dq+0x654>)
 801017e:	edd3 7a00 	vldr	s15, [r3]
 8010182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010186:	eef4 7ac7 	vcmpe.f32	s15, s14
 801018a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018e:	dd03      	ble.n	8010198 <setSVM_dq+0x628>
 8010190:	4b0c      	ldr	r3, [pc, #48]	; (80101c4 <setSVM_dq+0x654>)
 8010192:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010196:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8010198:	4b0a      	ldr	r3, [pc, #40]	; (80101c4 <setSVM_dq+0x654>)
 801019a:	edd3 7a01 	vldr	s15, [r3, #4]
 801019e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80101a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101aa:	d50f      	bpl.n	80101cc <setSVM_dq+0x65c>
 80101ac:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <setSVM_dq+0x654>)
 80101ae:	4a06      	ldr	r2, [pc, #24]	; (80101c8 <setSVM_dq+0x658>)
 80101b0:	605a      	str	r2, [r3, #4]
 80101b2:	e019      	b.n	80101e8 <setSVM_dq+0x678>
 80101b4:	20000120 	.word	0x20000120
 80101b8:	3ff00000 	.word	0x3ff00000
 80101bc:	20000124 	.word	0x20000124
 80101c0:	3fe00000 	.word	0x3fe00000
 80101c4:	20000128 	.word	0x20000128
 80101c8:	bf800000 	.word	0xbf800000
 80101cc:	4b3c      	ldr	r3, [pc, #240]	; (80102c0 <setSVM_dq+0x750>)
 80101ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80101d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101de:	dd03      	ble.n	80101e8 <setSVM_dq+0x678>
 80101e0:	4b37      	ldr	r3, [pc, #220]	; (80102c0 <setSVM_dq+0x750>)
 80101e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80101e6:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 80101e8:	4b35      	ldr	r3, [pc, #212]	; (80102c0 <setSVM_dq+0x750>)
 80101ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80101ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80101f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fa:	d503      	bpl.n	8010204 <setSVM_dq+0x694>
 80101fc:	4b30      	ldr	r3, [pc, #192]	; (80102c0 <setSVM_dq+0x750>)
 80101fe:	4a31      	ldr	r2, [pc, #196]	; (80102c4 <setSVM_dq+0x754>)
 8010200:	609a      	str	r2, [r3, #8]
 8010202:	e00d      	b.n	8010220 <setSVM_dq+0x6b0>
 8010204:	4b2e      	ldr	r3, [pc, #184]	; (80102c0 <setSVM_dq+0x750>)
 8010206:	edd3 7a02 	vldr	s15, [r3, #8]
 801020a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801020e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010216:	dd03      	ble.n	8010220 <setSVM_dq+0x6b0>
 8010218:	4b29      	ldr	r3, [pc, #164]	; (80102c0 <setSVM_dq+0x750>)
 801021a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801021e:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, htim->Init.Period * (1.0f - (amp_u = duty[0])));
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	ee07 3a90 	vmov	s15, r3
 8010228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801022c:	4b24      	ldr	r3, [pc, #144]	; (80102c0 <setSVM_dq+0x750>)
 801022e:	edd3 7a00 	vldr	s15, [r3]
 8010232:	4b25      	ldr	r3, [pc, #148]	; (80102c8 <setSVM_dq+0x758>)
 8010234:	edc3 7a00 	vstr	s15, [r3]
 8010238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801023c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801024c:	ee17 2a90 	vmov	r2, s15
 8010250:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, htim->Init.Period * (1.0f - (amp_v = duty[1])));
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	ee07 3a90 	vmov	s15, r3
 801025a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801025e:	4b18      	ldr	r3, [pc, #96]	; (80102c0 <setSVM_dq+0x750>)
 8010260:	edd3 7a01 	vldr	s15, [r3, #4]
 8010264:	4b19      	ldr	r3, [pc, #100]	; (80102cc <setSVM_dq+0x75c>)
 8010266:	edc3 7a00 	vstr	s15, [r3]
 801026a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801026e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801027e:	ee17 2a90 	vmov	r2, s15
 8010282:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, htim->Init.Period * (1.0f - (amp_w = duty[2])));
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	ee07 3a90 	vmov	s15, r3
 801028c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010290:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <setSVM_dq+0x750>)
 8010292:	edd3 7a02 	vldr	s15, [r3, #8]
 8010296:	4b0e      	ldr	r3, [pc, #56]	; (80102d0 <setSVM_dq+0x760>)
 8010298:	edc3 7a00 	vstr	s15, [r3]
 801029c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80102a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102b0:	ee17 2a90 	vmov	r2, s15
 80102b4:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 80102b6:	bf00      	nop
}
 80102b8:	3718      	adds	r7, #24
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bdb0      	pop	{r4, r5, r7, pc}
 80102be:	bf00      	nop
 80102c0:	20000128 	.word	0x20000128
 80102c4:	bf800000 	.word	0xbf800000
 80102c8:	20000138 	.word	0x20000138
 80102cc:	2000013c 	.word	0x2000013c
 80102d0:	20000140 	.word	0x20000140

080102d4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80102d8:	4b18      	ldr	r3, [pc, #96]	; (801033c <MX_SPI2_Init+0x68>)
 80102da:	4a19      	ldr	r2, [pc, #100]	; (8010340 <MX_SPI2_Init+0x6c>)
 80102dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80102de:	4b17      	ldr	r3, [pc, #92]	; (801033c <MX_SPI2_Init+0x68>)
 80102e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80102e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80102e6:	4b15      	ldr	r3, [pc, #84]	; (801033c <MX_SPI2_Init+0x68>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80102ec:	4b13      	ldr	r3, [pc, #76]	; (801033c <MX_SPI2_Init+0x68>)
 80102ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80102f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80102f4:	4b11      	ldr	r3, [pc, #68]	; (801033c <MX_SPI2_Init+0x68>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80102fa:	4b10      	ldr	r3, [pc, #64]	; (801033c <MX_SPI2_Init+0x68>)
 80102fc:	2201      	movs	r2, #1
 80102fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010300:	4b0e      	ldr	r3, [pc, #56]	; (801033c <MX_SPI2_Init+0x68>)
 8010302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010306:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010308:	4b0c      	ldr	r3, [pc, #48]	; (801033c <MX_SPI2_Init+0x68>)
 801030a:	2218      	movs	r2, #24
 801030c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801030e:	4b0b      	ldr	r3, [pc, #44]	; (801033c <MX_SPI2_Init+0x68>)
 8010310:	2200      	movs	r2, #0
 8010312:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010314:	4b09      	ldr	r3, [pc, #36]	; (801033c <MX_SPI2_Init+0x68>)
 8010316:	2200      	movs	r2, #0
 8010318:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801031a:	4b08      	ldr	r3, [pc, #32]	; (801033c <MX_SPI2_Init+0x68>)
 801031c:	2200      	movs	r2, #0
 801031e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8010320:	4b06      	ldr	r3, [pc, #24]	; (801033c <MX_SPI2_Init+0x68>)
 8010322:	220a      	movs	r2, #10
 8010324:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010326:	4805      	ldr	r0, [pc, #20]	; (801033c <MX_SPI2_Init+0x68>)
 8010328:	f7fb fa82 	bl	800b830 <HAL_SPI_Init>
 801032c:	4603      	mov	r3, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d001      	beq.n	8010336 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8010332:	f7ff fbd5 	bl	800fae0 <Error_Handler>
  }

}
 8010336:	bf00      	nop
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	200004d8 	.word	0x200004d8
 8010340:	40003800 	.word	0x40003800

08010344 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8010348:	4b17      	ldr	r3, [pc, #92]	; (80103a8 <MX_SPI3_Init+0x64>)
 801034a:	4a18      	ldr	r2, [pc, #96]	; (80103ac <MX_SPI3_Init+0x68>)
 801034c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801034e:	4b16      	ldr	r3, [pc, #88]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010354:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8010356:	4b14      	ldr	r3, [pc, #80]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010358:	2200      	movs	r2, #0
 801035a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 801035c:	4b12      	ldr	r3, [pc, #72]	; (80103a8 <MX_SPI3_Init+0x64>)
 801035e:	2200      	movs	r2, #0
 8010360:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010362:	4b11      	ldr	r3, [pc, #68]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010364:	2200      	movs	r2, #0
 8010366:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010368:	4b0f      	ldr	r3, [pc, #60]	; (80103a8 <MX_SPI3_Init+0x64>)
 801036a:	2200      	movs	r2, #0
 801036c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 801036e:	4b0e      	ldr	r3, [pc, #56]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010370:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010374:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010376:	4b0c      	ldr	r3, [pc, #48]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010378:	2200      	movs	r2, #0
 801037a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801037c:	4b0a      	ldr	r3, [pc, #40]	; (80103a8 <MX_SPI3_Init+0x64>)
 801037e:	2200      	movs	r2, #0
 8010380:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8010382:	4b09      	ldr	r3, [pc, #36]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010384:	2200      	movs	r2, #0
 8010386:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010388:	4b07      	ldr	r3, [pc, #28]	; (80103a8 <MX_SPI3_Init+0x64>)
 801038a:	2200      	movs	r2, #0
 801038c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 801038e:	4b06      	ldr	r3, [pc, #24]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010390:	220a      	movs	r2, #10
 8010392:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8010394:	4804      	ldr	r0, [pc, #16]	; (80103a8 <MX_SPI3_Init+0x64>)
 8010396:	f7fb fa4b 	bl	800b830 <HAL_SPI_Init>
 801039a:	4603      	mov	r3, r0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d001      	beq.n	80103a4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80103a0:	f7ff fb9e 	bl	800fae0 <Error_Handler>
  }

}
 80103a4:	bf00      	nop
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	20000530 	.word	0x20000530
 80103ac:	40003c00 	.word	0x40003c00

080103b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b08e      	sub	sp, #56	; 0x38
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103bc:	2200      	movs	r2, #0
 80103be:	601a      	str	r2, [r3, #0]
 80103c0:	605a      	str	r2, [r3, #4]
 80103c2:	609a      	str	r2, [r3, #8]
 80103c4:	60da      	str	r2, [r3, #12]
 80103c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4a6c      	ldr	r2, [pc, #432]	; (8010580 <HAL_SPI_MspInit+0x1d0>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d163      	bne.n	801049a <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80103d2:	2300      	movs	r3, #0
 80103d4:	623b      	str	r3, [r7, #32]
 80103d6:	4b6b      	ldr	r3, [pc, #428]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80103d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103da:	4a6a      	ldr	r2, [pc, #424]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80103dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80103e0:	6413      	str	r3, [r2, #64]	; 0x40
 80103e2:	4b68      	ldr	r3, [pc, #416]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80103e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103ea:	623b      	str	r3, [r7, #32]
 80103ec:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80103ee:	2300      	movs	r3, #0
 80103f0:	61fb      	str	r3, [r7, #28]
 80103f2:	4b64      	ldr	r3, [pc, #400]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80103f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103f6:	4a63      	ldr	r2, [pc, #396]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80103f8:	f043 0304 	orr.w	r3, r3, #4
 80103fc:	6313      	str	r3, [r2, #48]	; 0x30
 80103fe:	4b61      	ldr	r3, [pc, #388]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 8010400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010402:	f003 0304 	and.w	r3, r3, #4
 8010406:	61fb      	str	r3, [r7, #28]
 8010408:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801040a:	2300      	movs	r3, #0
 801040c:	61bb      	str	r3, [r7, #24]
 801040e:	4b5d      	ldr	r3, [pc, #372]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 8010410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010412:	4a5c      	ldr	r2, [pc, #368]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 8010414:	f043 0302 	orr.w	r3, r3, #2
 8010418:	6313      	str	r3, [r2, #48]	; 0x30
 801041a:	4b5a      	ldr	r3, [pc, #360]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 801041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801041e:	f003 0302 	and.w	r3, r3, #2
 8010422:	61bb      	str	r3, [r7, #24]
 8010424:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010426:	2302      	movs	r3, #2
 8010428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801042a:	2302      	movs	r3, #2
 801042c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801042e:	2300      	movs	r3, #0
 8010430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010432:	2303      	movs	r3, #3
 8010434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8010436:	2307      	movs	r3, #7
 8010438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801043a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801043e:	4619      	mov	r1, r3
 8010440:	4851      	ldr	r0, [pc, #324]	; (8010588 <HAL_SPI_MspInit+0x1d8>)
 8010442:	f7fa fb07 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010446:	2304      	movs	r3, #4
 8010448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801044a:	2302      	movs	r3, #2
 801044c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801044e:	2300      	movs	r3, #0
 8010450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010452:	2303      	movs	r3, #3
 8010454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010456:	2305      	movs	r3, #5
 8010458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801045a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801045e:	4619      	mov	r1, r3
 8010460:	4849      	ldr	r0, [pc, #292]	; (8010588 <HAL_SPI_MspInit+0x1d8>)
 8010462:	f7fa faf7 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801046a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801046c:	2302      	movs	r3, #2
 801046e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010470:	2300      	movs	r3, #0
 8010472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010474:	2303      	movs	r3, #3
 8010476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010478:	2305      	movs	r3, #5
 801047a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801047c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010480:	4619      	mov	r1, r3
 8010482:	4842      	ldr	r0, [pc, #264]	; (801058c <HAL_SPI_MspInit+0x1dc>)
 8010484:	f7fa fae6 	bl	800aa54 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8010488:	2200      	movs	r2, #0
 801048a:	2100      	movs	r1, #0
 801048c:	2024      	movs	r0, #36	; 0x24
 801048e:	f7f9 ff12 	bl	800a2b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010492:	2024      	movs	r0, #36	; 0x24
 8010494:	f7f9 ff2b 	bl	800a2ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8010498:	e06e      	b.n	8010578 <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a3c      	ldr	r2, [pc, #240]	; (8010590 <HAL_SPI_MspInit+0x1e0>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d169      	bne.n	8010578 <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80104a4:	2300      	movs	r3, #0
 80104a6:	617b      	str	r3, [r7, #20]
 80104a8:	4b36      	ldr	r3, [pc, #216]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ac:	4a35      	ldr	r2, [pc, #212]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104b2:	6413      	str	r3, [r2, #64]	; 0x40
 80104b4:	4b33      	ldr	r3, [pc, #204]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104bc:	617b      	str	r3, [r7, #20]
 80104be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80104c0:	2300      	movs	r3, #0
 80104c2:	613b      	str	r3, [r7, #16]
 80104c4:	4b2f      	ldr	r3, [pc, #188]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c8:	4a2e      	ldr	r2, [pc, #184]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104ca:	f043 0302 	orr.w	r3, r3, #2
 80104ce:	6313      	str	r3, [r2, #48]	; 0x30
 80104d0:	4b2c      	ldr	r3, [pc, #176]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d4:	f003 0302 	and.w	r3, r3, #2
 80104d8:	613b      	str	r3, [r7, #16]
 80104da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80104dc:	2300      	movs	r3, #0
 80104de:	60fb      	str	r3, [r7, #12]
 80104e0:	4b28      	ldr	r3, [pc, #160]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104e4:	4a27      	ldr	r2, [pc, #156]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104e6:	f043 0301 	orr.w	r3, r3, #1
 80104ea:	6313      	str	r3, [r2, #48]	; 0x30
 80104ec:	4b25      	ldr	r3, [pc, #148]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104f0:	f003 0301 	and.w	r3, r3, #1
 80104f4:	60fb      	str	r3, [r7, #12]
 80104f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80104f8:	2300      	movs	r3, #0
 80104fa:	60bb      	str	r3, [r7, #8]
 80104fc:	4b21      	ldr	r3, [pc, #132]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 80104fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010500:	4a20      	ldr	r2, [pc, #128]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 8010502:	f043 0304 	orr.w	r3, r3, #4
 8010506:	6313      	str	r3, [r2, #48]	; 0x30
 8010508:	4b1e      	ldr	r3, [pc, #120]	; (8010584 <HAL_SPI_MspInit+0x1d4>)
 801050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801050c:	f003 0304 	and.w	r3, r3, #4
 8010510:	60bb      	str	r3, [r7, #8]
 8010512:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010514:	2304      	movs	r3, #4
 8010516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010518:	2302      	movs	r3, #2
 801051a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801051c:	2300      	movs	r3, #0
 801051e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010520:	2303      	movs	r3, #3
 8010522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8010524:	2307      	movs	r3, #7
 8010526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801052c:	4619      	mov	r1, r3
 801052e:	4817      	ldr	r0, [pc, #92]	; (801058c <HAL_SPI_MspInit+0x1dc>)
 8010530:	f7fa fa90 	bl	800aa54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8010534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801053a:	2302      	movs	r3, #2
 801053c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801053e:	2300      	movs	r3, #0
 8010540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010542:	2303      	movs	r3, #3
 8010544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010546:	2306      	movs	r3, #6
 8010548:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801054a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801054e:	4619      	mov	r1, r3
 8010550:	4810      	ldr	r0, [pc, #64]	; (8010594 <HAL_SPI_MspInit+0x1e4>)
 8010552:	f7fa fa7f 	bl	800aa54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8010556:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801055a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801055c:	2302      	movs	r3, #2
 801055e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010560:	2300      	movs	r3, #0
 8010562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010564:	2303      	movs	r3, #3
 8010566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010568:	2306      	movs	r3, #6
 801056a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801056c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010570:	4619      	mov	r1, r3
 8010572:	4805      	ldr	r0, [pc, #20]	; (8010588 <HAL_SPI_MspInit+0x1d8>)
 8010574:	f7fa fa6e 	bl	800aa54 <HAL_GPIO_Init>
}
 8010578:	bf00      	nop
 801057a:	3738      	adds	r7, #56	; 0x38
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	40003800 	.word	0x40003800
 8010584:	40023800 	.word	0x40023800
 8010588:	40020800 	.word	0x40020800
 801058c:	40020400 	.word	0x40020400
 8010590:	40003c00 	.word	0x40003c00
 8010594:	40020000 	.word	0x40020000

08010598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801059e:	2300      	movs	r3, #0
 80105a0:	607b      	str	r3, [r7, #4]
 80105a2:	4b10      	ldr	r3, [pc, #64]	; (80105e4 <HAL_MspInit+0x4c>)
 80105a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105a6:	4a0f      	ldr	r2, [pc, #60]	; (80105e4 <HAL_MspInit+0x4c>)
 80105a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80105ac:	6453      	str	r3, [r2, #68]	; 0x44
 80105ae:	4b0d      	ldr	r3, [pc, #52]	; (80105e4 <HAL_MspInit+0x4c>)
 80105b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105b6:	607b      	str	r3, [r7, #4]
 80105b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80105ba:	2300      	movs	r3, #0
 80105bc:	603b      	str	r3, [r7, #0]
 80105be:	4b09      	ldr	r3, [pc, #36]	; (80105e4 <HAL_MspInit+0x4c>)
 80105c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c2:	4a08      	ldr	r2, [pc, #32]	; (80105e4 <HAL_MspInit+0x4c>)
 80105c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105c8:	6413      	str	r3, [r2, #64]	; 0x40
 80105ca:	4b06      	ldr	r3, [pc, #24]	; (80105e4 <HAL_MspInit+0x4c>)
 80105cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105d2:	603b      	str	r3, [r7, #0]
 80105d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80105d6:	2007      	movs	r0, #7
 80105d8:	f7f9 fe62 	bl	800a2a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80105dc:	bf00      	nop
 80105de:	3708      	adds	r7, #8
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}
 80105e4:	40023800 	.word	0x40023800

080105e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80105e8:	b480      	push	{r7}
 80105ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80105ec:	bf00      	nop
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80105f6:	b480      	push	{r7}
 80105f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80105fa:	e7fe      	b.n	80105fa <HardFault_Handler+0x4>

080105fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80105fc:	b480      	push	{r7}
 80105fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010600:	e7fe      	b.n	8010600 <MemManage_Handler+0x4>

08010602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010602:	b480      	push	{r7}
 8010604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010606:	e7fe      	b.n	8010606 <BusFault_Handler+0x4>

08010608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010608:	b480      	push	{r7}
 801060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801060c:	e7fe      	b.n	801060c <UsageFault_Handler+0x4>

0801060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801060e:	b480      	push	{r7}
 8010610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010612:	bf00      	nop
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801061c:	b480      	push	{r7}
 801061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010620:	bf00      	nop
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr

0801062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801062a:	b480      	push	{r7}
 801062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801062e:	bf00      	nop
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801063c:	f7f8 fbb6 	bl	8008dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010640:	bf00      	nop
 8010642:	bd80      	pop	{r7, pc}

08010644 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8010648:	4802      	ldr	r0, [pc, #8]	; (8010654 <CAN1_TX_IRQHandler+0x10>)
 801064a:	f7f9 fb4e 	bl	8009cea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 801064e:	bf00      	nop
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	20000480 	.word	0x20000480

08010658 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 801065c:	4802      	ldr	r0, [pc, #8]	; (8010668 <CAN1_RX0_IRQHandler+0x10>)
 801065e:	f7f9 fb44 	bl	8009cea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8010662:	bf00      	nop
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	20000480 	.word	0x20000480

0801066c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010670:	4802      	ldr	r0, [pc, #8]	; (801067c <SPI2_IRQHandler+0x10>)
 8010672:	f7fb f9d5 	bl	800ba20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8010676:	bf00      	nop
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	200004d8 	.word	0x200004d8

08010680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8010684:	4802      	ldr	r0, [pc, #8]	; (8010690 <USART2_IRQHandler+0x10>)
 8010686:	f7fc fe29 	bl	800d2dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801068a:	bf00      	nop
 801068c:	bd80      	pop	{r7, pc}
 801068e:	bf00      	nop
 8010690:	200005c8 	.word	0x200005c8

08010694 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010698:	4802      	ldr	r0, [pc, #8]	; (80106a4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 801069a:	f7fb fe53 	bl	800c344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 801069e:	bf00      	nop
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	20000588 	.word	0x20000588

080106a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80106ac:	4802      	ldr	r0, [pc, #8]	; (80106b8 <DMA2_Stream0_IRQHandler+0x10>)
 80106ae:	f7f9 ff69 	bl	800a584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80106b2:	bf00      	nop
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	20000374 	.word	0x20000374

080106bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80106c0:	4802      	ldr	r0, [pc, #8]	; (80106cc <DMA2_Stream1_IRQHandler+0x10>)
 80106c2:	f7f9 ff5f 	bl	800a584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80106c6:	bf00      	nop
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	20000284 	.word	0x20000284

080106d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80106d4:	4802      	ldr	r0, [pc, #8]	; (80106e0 <DMA2_Stream2_IRQHandler+0x10>)
 80106d6:	f7f9 ff55 	bl	800a584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80106da:	bf00      	nop
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	200003d4 	.word	0x200003d4

080106e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b086      	sub	sp, #24
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80106f0:	2300      	movs	r3, #0
 80106f2:	617b      	str	r3, [r7, #20]
 80106f4:	e00a      	b.n	801070c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80106f6:	f3af 8000 	nop.w
 80106fa:	4601      	mov	r1, r0
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	1c5a      	adds	r2, r3, #1
 8010700:	60ba      	str	r2, [r7, #8]
 8010702:	b2ca      	uxtb	r2, r1
 8010704:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	3301      	adds	r3, #1
 801070a:	617b      	str	r3, [r7, #20]
 801070c:	697a      	ldr	r2, [r7, #20]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	429a      	cmp	r2, r3
 8010712:	dbf0      	blt.n	80106f6 <_read+0x12>
	}

return len;
 8010714:	687b      	ldr	r3, [r7, #4]
}
 8010716:	4618      	mov	r0, r3
 8010718:	3718      	adds	r7, #24
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <_close>:
	}
	return len;
}

int _close(int file)
{
 801071e:	b480      	push	{r7}
 8010720:	b083      	sub	sp, #12
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
	return -1;
 8010726:	f04f 33ff 	mov.w	r3, #4294967295
}
 801072a:	4618      	mov	r0, r3
 801072c:	370c      	adds	r7, #12
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr

08010736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010736:	b480      	push	{r7}
 8010738:	b083      	sub	sp, #12
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010746:	605a      	str	r2, [r3, #4]
	return 0;
 8010748:	2300      	movs	r3, #0
}
 801074a:	4618      	mov	r0, r3
 801074c:	370c      	adds	r7, #12
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <_isatty>:

int _isatty(int file)
{
 8010756:	b480      	push	{r7}
 8010758:	b083      	sub	sp, #12
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
	return 1;
 801075e:	2301      	movs	r3, #1
}
 8010760:	4618      	mov	r0, r3
 8010762:	370c      	adds	r7, #12
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801076c:	b480      	push	{r7}
 801076e:	b085      	sub	sp, #20
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
	return 0;
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3714      	adds	r7, #20
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr
	...

08010788 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010790:	4b11      	ldr	r3, [pc, #68]	; (80107d8 <_sbrk+0x50>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d102      	bne.n	801079e <_sbrk+0x16>
		heap_end = &end;
 8010798:	4b0f      	ldr	r3, [pc, #60]	; (80107d8 <_sbrk+0x50>)
 801079a:	4a10      	ldr	r2, [pc, #64]	; (80107dc <_sbrk+0x54>)
 801079c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801079e:	4b0e      	ldr	r3, [pc, #56]	; (80107d8 <_sbrk+0x50>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80107a4:	4b0c      	ldr	r3, [pc, #48]	; (80107d8 <_sbrk+0x50>)
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4413      	add	r3, r2
 80107ac:	466a      	mov	r2, sp
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d907      	bls.n	80107c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80107b2:	f000 fab9 	bl	8010d28 <__errno>
 80107b6:	4602      	mov	r2, r0
 80107b8:	230c      	movs	r3, #12
 80107ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80107bc:	f04f 33ff 	mov.w	r3, #4294967295
 80107c0:	e006      	b.n	80107d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80107c2:	4b05      	ldr	r3, [pc, #20]	; (80107d8 <_sbrk+0x50>)
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4413      	add	r3, r2
 80107ca:	4a03      	ldr	r2, [pc, #12]	; (80107d8 <_sbrk+0x50>)
 80107cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80107ce:	68fb      	ldr	r3, [r7, #12]
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3710      	adds	r7, #16
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	20000134 	.word	0x20000134
 80107dc:	20000610 	.word	0x20000610

080107e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80107e0:	b480      	push	{r7}
 80107e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80107e4:	4b16      	ldr	r3, [pc, #88]	; (8010840 <SystemInit+0x60>)
 80107e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107ea:	4a15      	ldr	r2, [pc, #84]	; (8010840 <SystemInit+0x60>)
 80107ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80107f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80107f4:	4b13      	ldr	r3, [pc, #76]	; (8010844 <SystemInit+0x64>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4a12      	ldr	r2, [pc, #72]	; (8010844 <SystemInit+0x64>)
 80107fa:	f043 0301 	orr.w	r3, r3, #1
 80107fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010800:	4b10      	ldr	r3, [pc, #64]	; (8010844 <SystemInit+0x64>)
 8010802:	2200      	movs	r2, #0
 8010804:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010806:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <SystemInit+0x64>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a0e      	ldr	r2, [pc, #56]	; (8010844 <SystemInit+0x64>)
 801080c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010814:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010816:	4b0b      	ldr	r3, [pc, #44]	; (8010844 <SystemInit+0x64>)
 8010818:	4a0b      	ldr	r2, [pc, #44]	; (8010848 <SystemInit+0x68>)
 801081a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801081c:	4b09      	ldr	r3, [pc, #36]	; (8010844 <SystemInit+0x64>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	4a08      	ldr	r2, [pc, #32]	; (8010844 <SystemInit+0x64>)
 8010822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010828:	4b06      	ldr	r3, [pc, #24]	; (8010844 <SystemInit+0x64>)
 801082a:	2200      	movs	r2, #0
 801082c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801082e:	4b04      	ldr	r3, [pc, #16]	; (8010840 <SystemInit+0x60>)
 8010830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010834:	609a      	str	r2, [r3, #8]
#endif
}
 8010836:	bf00      	nop
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr
 8010840:	e000ed00 	.word	0xe000ed00
 8010844:	40023800 	.word	0x40023800
 8010848:	24003010 	.word	0x24003010

0801084c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b096      	sub	sp, #88	; 0x58
 8010850:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010852:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010856:	2200      	movs	r2, #0
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	605a      	str	r2, [r3, #4]
 801085c:	609a      	str	r2, [r3, #8]
 801085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010860:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010864:	2200      	movs	r2, #0
 8010866:	601a      	str	r2, [r3, #0]
 8010868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801086e:	2200      	movs	r2, #0
 8010870:	601a      	str	r2, [r3, #0]
 8010872:	605a      	str	r2, [r3, #4]
 8010874:	609a      	str	r2, [r3, #8]
 8010876:	60da      	str	r2, [r3, #12]
 8010878:	611a      	str	r2, [r3, #16]
 801087a:	615a      	str	r2, [r3, #20]
 801087c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801087e:	1d3b      	adds	r3, r7, #4
 8010880:	2220      	movs	r2, #32
 8010882:	2100      	movs	r1, #0
 8010884:	4618      	mov	r0, r3
 8010886:	f000 fa84 	bl	8010d92 <memset>

  htim8.Instance = TIM8;
 801088a:	4b4a      	ldr	r3, [pc, #296]	; (80109b4 <MX_TIM8_Init+0x168>)
 801088c:	4a4a      	ldr	r2, [pc, #296]	; (80109b8 <MX_TIM8_Init+0x16c>)
 801088e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8010890:	4b48      	ldr	r3, [pc, #288]	; (80109b4 <MX_TIM8_Init+0x168>)
 8010892:	2200      	movs	r2, #0
 8010894:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8010896:	4b47      	ldr	r3, [pc, #284]	; (80109b4 <MX_TIM8_Init+0x168>)
 8010898:	2220      	movs	r2, #32
 801089a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 801089c:	4b45      	ldr	r3, [pc, #276]	; (80109b4 <MX_TIM8_Init+0x168>)
 801089e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80108a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80108a4:	4b43      	ldr	r3, [pc, #268]	; (80109b4 <MX_TIM8_Init+0x168>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80108aa:	4b42      	ldr	r3, [pc, #264]	; (80109b4 <MX_TIM8_Init+0x168>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80108b0:	4b40      	ldr	r3, [pc, #256]	; (80109b4 <MX_TIM8_Init+0x168>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80108b6:	483f      	ldr	r0, [pc, #252]	; (80109b4 <MX_TIM8_Init+0x168>)
 80108b8:	f7fb fbc6 	bl	800c048 <HAL_TIM_Base_Init>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80108c2:	f7ff f90d 	bl	800fae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80108c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80108cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108d0:	4619      	mov	r1, r3
 80108d2:	4838      	ldr	r0, [pc, #224]	; (80109b4 <MX_TIM8_Init+0x168>)
 80108d4:	f7fb ff2b 	bl	800c72e <HAL_TIM_ConfigClockSource>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80108de:	f7ff f8ff 	bl	800fae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80108e2:	4834      	ldr	r0, [pc, #208]	; (80109b4 <MX_TIM8_Init+0x168>)
 80108e4:	f7fb fbdb 	bl	800c09e <HAL_TIM_PWM_Init>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d001      	beq.n	80108f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80108ee:	f7ff f8f7 	bl	800fae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80108f2:	2320      	movs	r3, #32
 80108f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80108f6:	2300      	movs	r3, #0
 80108f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80108fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80108fe:	4619      	mov	r1, r3
 8010900:	482c      	ldr	r0, [pc, #176]	; (80109b4 <MX_TIM8_Init+0x168>)
 8010902:	f7fc fbcd 	bl	800d0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	d001      	beq.n	8010910 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 801090c:	f7ff f8e8 	bl	800fae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010910:	2360      	movs	r3, #96	; 0x60
 8010912:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8010914:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010918:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801091a:	2300      	movs	r3, #0
 801091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801091e:	2300      	movs	r3, #0
 8010920:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010922:	2300      	movs	r3, #0
 8010924:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8010926:	2300      	movs	r3, #0
 8010928:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801092a:	2300      	movs	r3, #0
 801092c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010932:	2200      	movs	r2, #0
 8010934:	4619      	mov	r1, r3
 8010936:	481f      	ldr	r0, [pc, #124]	; (80109b4 <MX_TIM8_Init+0x168>)
 8010938:	f7fb fe0c 	bl	800c554 <HAL_TIM_PWM_ConfigChannel>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d001      	beq.n	8010946 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8010942:	f7ff f8cd 	bl	800fae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8010946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801094a:	2204      	movs	r2, #4
 801094c:	4619      	mov	r1, r3
 801094e:	4819      	ldr	r0, [pc, #100]	; (80109b4 <MX_TIM8_Init+0x168>)
 8010950:	f7fb fe00 	bl	800c554 <HAL_TIM_PWM_ConfigChannel>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d001      	beq.n	801095e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 801095a:	f7ff f8c1 	bl	800fae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010962:	2208      	movs	r2, #8
 8010964:	4619      	mov	r1, r3
 8010966:	4813      	ldr	r0, [pc, #76]	; (80109b4 <MX_TIM8_Init+0x168>)
 8010968:	f7fb fdf4 	bl	800c554 <HAL_TIM_PWM_ConfigChannel>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d001      	beq.n	8010976 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8010972:	f7ff f8b5 	bl	800fae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8010976:	2300      	movs	r3, #0
 8010978:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801097a:	2300      	movs	r3, #0
 801097c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801097e:	2300      	movs	r3, #0
 8010980:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8010986:	2300      	movs	r3, #0
 8010988:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 801098a:	2300      	movs	r3, #0
 801098c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801098e:	2300      	movs	r3, #0
 8010990:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8010992:	1d3b      	adds	r3, r7, #4
 8010994:	4619      	mov	r1, r3
 8010996:	4807      	ldr	r0, [pc, #28]	; (80109b4 <MX_TIM8_Init+0x168>)
 8010998:	f7fc fbc7 	bl	800d12a <HAL_TIMEx_ConfigBreakDeadTime>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80109a2:	f7ff f89d 	bl	800fae0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80109a6:	4803      	ldr	r0, [pc, #12]	; (80109b4 <MX_TIM8_Init+0x168>)
 80109a8:	f000 f830 	bl	8010a0c <HAL_TIM_MspPostInit>

}
 80109ac:	bf00      	nop
 80109ae:	3758      	adds	r7, #88	; 0x58
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	20000588 	.word	0x20000588
 80109b8:	40010400 	.word	0x40010400

080109bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a0e      	ldr	r2, [pc, #56]	; (8010a04 <HAL_TIM_Base_MspInit+0x48>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d115      	bne.n	80109fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80109ce:	2300      	movs	r3, #0
 80109d0:	60fb      	str	r3, [r7, #12]
 80109d2:	4b0d      	ldr	r3, [pc, #52]	; (8010a08 <HAL_TIM_Base_MspInit+0x4c>)
 80109d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109d6:	4a0c      	ldr	r2, [pc, #48]	; (8010a08 <HAL_TIM_Base_MspInit+0x4c>)
 80109d8:	f043 0302 	orr.w	r3, r3, #2
 80109dc:	6453      	str	r3, [r2, #68]	; 0x44
 80109de:	4b0a      	ldr	r3, [pc, #40]	; (8010a08 <HAL_TIM_Base_MspInit+0x4c>)
 80109e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109e2:	f003 0302 	and.w	r3, r3, #2
 80109e6:	60fb      	str	r3, [r7, #12]
 80109e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80109ea:	2200      	movs	r2, #0
 80109ec:	2100      	movs	r1, #0
 80109ee:	202c      	movs	r0, #44	; 0x2c
 80109f0:	f7f9 fc61 	bl	800a2b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80109f4:	202c      	movs	r0, #44	; 0x2c
 80109f6:	f7f9 fc7a 	bl	800a2ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80109fa:	bf00      	nop
 80109fc:	3710      	adds	r7, #16
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	40010400 	.word	0x40010400
 8010a08:	40023800 	.word	0x40023800

08010a0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b08a      	sub	sp, #40	; 0x28
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a14:	f107 0314 	add.w	r3, r7, #20
 8010a18:	2200      	movs	r2, #0
 8010a1a:	601a      	str	r2, [r3, #0]
 8010a1c:	605a      	str	r2, [r3, #4]
 8010a1e:	609a      	str	r2, [r3, #8]
 8010a20:	60da      	str	r2, [r3, #12]
 8010a22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a30      	ldr	r2, [pc, #192]	; (8010aec <HAL_TIM_MspPostInit+0xe0>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d15a      	bne.n	8010ae4 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a2e:	2300      	movs	r3, #0
 8010a30:	613b      	str	r3, [r7, #16]
 8010a32:	4b2f      	ldr	r3, [pc, #188]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a36:	4a2e      	ldr	r2, [pc, #184]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a38:	f043 0301 	orr.w	r3, r3, #1
 8010a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a3e:	4b2c      	ldr	r3, [pc, #176]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	613b      	str	r3, [r7, #16]
 8010a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	60fb      	str	r3, [r7, #12]
 8010a4e:	4b28      	ldr	r3, [pc, #160]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a52:	4a27      	ldr	r2, [pc, #156]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a54:	f043 0302 	orr.w	r3, r3, #2
 8010a58:	6313      	str	r3, [r2, #48]	; 0x30
 8010a5a:	4b25      	ldr	r3, [pc, #148]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a5e:	f003 0302 	and.w	r3, r3, #2
 8010a62:	60fb      	str	r3, [r7, #12]
 8010a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010a66:	2300      	movs	r3, #0
 8010a68:	60bb      	str	r3, [r7, #8]
 8010a6a:	4b21      	ldr	r3, [pc, #132]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a6e:	4a20      	ldr	r2, [pc, #128]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a70:	f043 0304 	orr.w	r3, r3, #4
 8010a74:	6313      	str	r3, [r2, #48]	; 0x30
 8010a76:	4b1e      	ldr	r3, [pc, #120]	; (8010af0 <HAL_TIM_MspPostInit+0xe4>)
 8010a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a7a:	f003 0304 	and.w	r3, r3, #4
 8010a7e:	60bb      	str	r3, [r7, #8]
 8010a80:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010a82:	2380      	movs	r3, #128	; 0x80
 8010a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a86:	2302      	movs	r3, #2
 8010a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010a92:	2303      	movs	r3, #3
 8010a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a96:	f107 0314 	add.w	r3, r7, #20
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	4815      	ldr	r0, [pc, #84]	; (8010af4 <HAL_TIM_MspPostInit+0xe8>)
 8010a9e:	f7f9 ffd9 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010aa2:	2303      	movs	r3, #3
 8010aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ab6:	f107 0314 	add.w	r3, r7, #20
 8010aba:	4619      	mov	r1, r3
 8010abc:	480e      	ldr	r0, [pc, #56]	; (8010af8 <HAL_TIM_MspPostInit+0xec>)
 8010abe:	f7f9 ffc9 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8010ac2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8010ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ac8:	2302      	movs	r3, #2
 8010aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010acc:	2300      	movs	r3, #0
 8010ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010ad8:	f107 0314 	add.w	r3, r7, #20
 8010adc:	4619      	mov	r1, r3
 8010ade:	4807      	ldr	r0, [pc, #28]	; (8010afc <HAL_TIM_MspPostInit+0xf0>)
 8010ae0:	f7f9 ffb8 	bl	800aa54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8010ae4:	bf00      	nop
 8010ae6:	3728      	adds	r7, #40	; 0x28
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	40010400 	.word	0x40010400
 8010af0:	40023800 	.word	0x40023800
 8010af4:	40020000 	.word	0x40020000
 8010af8:	40020400 	.word	0x40020400
 8010afc:	40020800 	.word	0x40020800

08010b00 <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8010b04:	4b0a      	ldr	r3, [pc, #40]	; (8010b30 <TIM_Init+0x30>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f06f 0201 	mvn.w	r2, #1
 8010b0c:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8010b0e:	4b08      	ldr	r3, [pc, #32]	; (8010b30 <TIM_Init+0x30>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	68da      	ldr	r2, [r3, #12]
 8010b14:	4b06      	ldr	r3, [pc, #24]	; (8010b30 <TIM_Init+0x30>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f042 0201 	orr.w	r2, r2, #1
 8010b1c:	60da      	str	r2, [r3, #12]


	  HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 8010b1e:	2101      	movs	r1, #1
 8010b20:	4803      	ldr	r0, [pc, #12]	; (8010b30 <TIM_Init+0x30>)
 8010b22:	f7fb fddd 	bl	800c6e0 <HAL_TIM_GenerateEvent>
	  //HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);


	  startPWM(&htim8);
 8010b26:	4802      	ldr	r0, [pc, #8]	; (8010b30 <TIM_Init+0x30>)
 8010b28:	f7fe ffe1 	bl	800faee <startPWM>


}
 8010b2c:	bf00      	nop
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	20000588 	.word	0x20000588

08010b34 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a12      	ldr	r2, [pc, #72]	; (8010b8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d11d      	bne.n	8010b82 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f003 0310 	and.w	r3, r3, #16
 8010b50:	2b10      	cmp	r3, #16
 8010b52:	d016      	beq.n	8010b82 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{

			ACR_Refresh(&mainACR);
 8010b54:	480e      	ldr	r0, [pc, #56]	; (8010b90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8010b56:	f7fd f853 	bl	800dc00 <ACR_Refresh>

			// timeout control
			if(timeoutCount < TIMEOUT_MS * PWM_FREQ / 1000)
 8010b5a:	4b0e      	ldr	r3, [pc, #56]	; (8010b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010b62:	d205      	bcs.n	8010b70 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				timeoutCount += 1;
 8010b64:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	4a0a      	ldr	r2, [pc, #40]	; (8010b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8010b6c:	6013      	str	r3, [r2, #0]
		}


	}

}
 8010b6e:	e008      	b.n	8010b82 <HAL_TIM_PeriodElapsedCallback+0x4e>
				stopPWM(&htim8);
 8010b70:	4809      	ldr	r0, [pc, #36]	; (8010b98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8010b72:	f7fe ffdc 	bl	800fb2e <stopPWM>
				timeoutCount = 0;
 8010b76:	4b07      	ldr	r3, [pc, #28]	; (8010b94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8010b78:	2200      	movs	r2, #0
 8010b7a:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 8010b7c:	4b07      	ldr	r3, [pc, #28]	; (8010b9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8010b7e:	2201      	movs	r2, #1
 8010b80:	701a      	strb	r2, [r3, #0]
}
 8010b82:	bf00      	nop
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	40010400 	.word	0x40010400
 8010b90:	20000158 	.word	0x20000158
 8010b94:	20000144 	.word	0x20000144
 8010b98:	20000588 	.word	0x20000588
 8010b9c:	20000148 	.word	0x20000148

08010ba0 <timeoutReset>:


inline void timeoutReset()
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8010ba4:	4b0a      	ldr	r3, [pc, #40]	; (8010bd0 <timeoutReset+0x30>)
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 8010baa:	4b0a      	ldr	r3, [pc, #40]	; (8010bd4 <timeoutReset+0x34>)
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d10a      	bne.n	8010bca <timeoutReset+0x2a>
	{
		timeoutState = 0;
 8010bb4:	4b07      	ldr	r3, [pc, #28]	; (8010bd4 <timeoutReset+0x34>)
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 8010bba:	f7fd fd0b 	bl	800e5d4 <ASR_Reset>
		ACR_Reset(&mainACR);
 8010bbe:	4806      	ldr	r0, [pc, #24]	; (8010bd8 <timeoutReset+0x38>)
 8010bc0:	f7fd fab8 	bl	800e134 <ACR_Reset>
		startPWM(&htim8);
 8010bc4:	4805      	ldr	r0, [pc, #20]	; (8010bdc <timeoutReset+0x3c>)
 8010bc6:	f7fe ff92 	bl	800faee <startPWM>
	}
}
 8010bca:	bf00      	nop
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	20000144 	.word	0x20000144
 8010bd4:	20000148 	.word	0x20000148
 8010bd8:	20000158 	.word	0x20000158
 8010bdc:	20000588 	.word	0x20000588

08010be0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8010be4:	4b11      	ldr	r3, [pc, #68]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010be6:	4a12      	ldr	r2, [pc, #72]	; (8010c30 <MX_USART2_UART_Init+0x50>)
 8010be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8010bea:	4b10      	ldr	r3, [pc, #64]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010bf2:	4b0e      	ldr	r3, [pc, #56]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010bf8:	4b0c      	ldr	r3, [pc, #48]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010bfe:	4b0b      	ldr	r3, [pc, #44]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010c00:	2200      	movs	r2, #0
 8010c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010c04:	4b09      	ldr	r3, [pc, #36]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010c06:	220c      	movs	r2, #12
 8010c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010c0a:	4b08      	ldr	r3, [pc, #32]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010c10:	4b06      	ldr	r3, [pc, #24]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010c12:	2200      	movs	r2, #0
 8010c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8010c16:	4805      	ldr	r0, [pc, #20]	; (8010c2c <MX_USART2_UART_Init+0x4c>)
 8010c18:	f7fc fb12 	bl	800d240 <HAL_UART_Init>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d001      	beq.n	8010c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8010c22:	f7fe ff5d 	bl	800fae0 <Error_Handler>
  }

}
 8010c26:	bf00      	nop
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	200005c8 	.word	0x200005c8
 8010c30:	40004400 	.word	0x40004400

08010c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b08a      	sub	sp, #40	; 0x28
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c3c:	f107 0314 	add.w	r3, r7, #20
 8010c40:	2200      	movs	r2, #0
 8010c42:	601a      	str	r2, [r3, #0]
 8010c44:	605a      	str	r2, [r3, #4]
 8010c46:	609a      	str	r2, [r3, #8]
 8010c48:	60da      	str	r2, [r3, #12]
 8010c4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a1d      	ldr	r2, [pc, #116]	; (8010cc8 <HAL_UART_MspInit+0x94>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d133      	bne.n	8010cbe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010c56:	2300      	movs	r3, #0
 8010c58:	613b      	str	r3, [r7, #16]
 8010c5a:	4b1c      	ldr	r3, [pc, #112]	; (8010ccc <HAL_UART_MspInit+0x98>)
 8010c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c5e:	4a1b      	ldr	r2, [pc, #108]	; (8010ccc <HAL_UART_MspInit+0x98>)
 8010c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c64:	6413      	str	r3, [r2, #64]	; 0x40
 8010c66:	4b19      	ldr	r3, [pc, #100]	; (8010ccc <HAL_UART_MspInit+0x98>)
 8010c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c6e:	613b      	str	r3, [r7, #16]
 8010c70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c72:	2300      	movs	r3, #0
 8010c74:	60fb      	str	r3, [r7, #12]
 8010c76:	4b15      	ldr	r3, [pc, #84]	; (8010ccc <HAL_UART_MspInit+0x98>)
 8010c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c7a:	4a14      	ldr	r2, [pc, #80]	; (8010ccc <HAL_UART_MspInit+0x98>)
 8010c7c:	f043 0301 	orr.w	r3, r3, #1
 8010c80:	6313      	str	r3, [r2, #48]	; 0x30
 8010c82:	4b12      	ldr	r3, [pc, #72]	; (8010ccc <HAL_UART_MspInit+0x98>)
 8010c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	60fb      	str	r3, [r7, #12]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8010c8e:	230c      	movs	r3, #12
 8010c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c92:	2302      	movs	r3, #2
 8010c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010c96:	2301      	movs	r3, #1
 8010c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010c9e:	2307      	movs	r3, #7
 8010ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ca2:	f107 0314 	add.w	r3, r7, #20
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	4809      	ldr	r0, [pc, #36]	; (8010cd0 <HAL_UART_MspInit+0x9c>)
 8010caa:	f7f9 fed3 	bl	800aa54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	2026      	movs	r0, #38	; 0x26
 8010cb4:	f7f9 faff 	bl	800a2b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8010cb8:	2026      	movs	r0, #38	; 0x26
 8010cba:	f7f9 fb18 	bl	800a2ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8010cbe:	bf00      	nop
 8010cc0:	3728      	adds	r7, #40	; 0x28
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	40004400 	.word	0x40004400
 8010ccc:	40023800 	.word	0x40023800
 8010cd0:	40020000 	.word	0x40020000

08010cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010d0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010cd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010cda:	e003      	b.n	8010ce4 <LoopCopyDataInit>

08010cdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010cdc:	4b0c      	ldr	r3, [pc, #48]	; (8010d10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010cde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010ce0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010ce2:	3104      	adds	r1, #4

08010ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010ce4:	480b      	ldr	r0, [pc, #44]	; (8010d14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010ce6:	4b0c      	ldr	r3, [pc, #48]	; (8010d18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010ce8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010cea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010cec:	d3f6      	bcc.n	8010cdc <CopyDataInit>
  ldr  r2, =_sbss
 8010cee:	4a0b      	ldr	r2, [pc, #44]	; (8010d1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010cf0:	e002      	b.n	8010cf8 <LoopFillZerobss>

08010cf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010cf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010cf4:	f842 3b04 	str.w	r3, [r2], #4

08010cf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010cf8:	4b09      	ldr	r3, [pc, #36]	; (8010d20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010cfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010cfc:	d3f9      	bcc.n	8010cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010cfe:	f7ff fd6f 	bl	80107e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010d02:	f000 f817 	bl	8010d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010d06:	f7fe fda5 	bl	800f854 <main>
  bx  lr    
 8010d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010d0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010d10:	080254c0 	.word	0x080254c0
  ldr  r0, =_sdata
 8010d14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010d18:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8010d1c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8010d20:	2000060c 	.word	0x2000060c

08010d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010d24:	e7fe      	b.n	8010d24 <ADC_IRQHandler>
	...

08010d28 <__errno>:
 8010d28:	4b01      	ldr	r3, [pc, #4]	; (8010d30 <__errno+0x8>)
 8010d2a:	6818      	ldr	r0, [r3, #0]
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	2000001c 	.word	0x2000001c

08010d34 <__libc_init_array>:
 8010d34:	b570      	push	{r4, r5, r6, lr}
 8010d36:	4e0d      	ldr	r6, [pc, #52]	; (8010d6c <__libc_init_array+0x38>)
 8010d38:	4c0d      	ldr	r4, [pc, #52]	; (8010d70 <__libc_init_array+0x3c>)
 8010d3a:	1ba4      	subs	r4, r4, r6
 8010d3c:	10a4      	asrs	r4, r4, #2
 8010d3e:	2500      	movs	r5, #0
 8010d40:	42a5      	cmp	r5, r4
 8010d42:	d109      	bne.n	8010d58 <__libc_init_array+0x24>
 8010d44:	4e0b      	ldr	r6, [pc, #44]	; (8010d74 <__libc_init_array+0x40>)
 8010d46:	4c0c      	ldr	r4, [pc, #48]	; (8010d78 <__libc_init_array+0x44>)
 8010d48:	f000 fef0 	bl	8011b2c <_init>
 8010d4c:	1ba4      	subs	r4, r4, r6
 8010d4e:	10a4      	asrs	r4, r4, #2
 8010d50:	2500      	movs	r5, #0
 8010d52:	42a5      	cmp	r5, r4
 8010d54:	d105      	bne.n	8010d62 <__libc_init_array+0x2e>
 8010d56:	bd70      	pop	{r4, r5, r6, pc}
 8010d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010d5c:	4798      	blx	r3
 8010d5e:	3501      	adds	r5, #1
 8010d60:	e7ee      	b.n	8010d40 <__libc_init_array+0xc>
 8010d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010d66:	4798      	blx	r3
 8010d68:	3501      	adds	r5, #1
 8010d6a:	e7f2      	b.n	8010d52 <__libc_init_array+0x1e>
 8010d6c:	080254b8 	.word	0x080254b8
 8010d70:	080254b8 	.word	0x080254b8
 8010d74:	080254b8 	.word	0x080254b8
 8010d78:	080254bc 	.word	0x080254bc

08010d7c <memcpy>:
 8010d7c:	b510      	push	{r4, lr}
 8010d7e:	1e43      	subs	r3, r0, #1
 8010d80:	440a      	add	r2, r1
 8010d82:	4291      	cmp	r1, r2
 8010d84:	d100      	bne.n	8010d88 <memcpy+0xc>
 8010d86:	bd10      	pop	{r4, pc}
 8010d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d90:	e7f7      	b.n	8010d82 <memcpy+0x6>

08010d92 <memset>:
 8010d92:	4402      	add	r2, r0
 8010d94:	4603      	mov	r3, r0
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d100      	bne.n	8010d9c <memset+0xa>
 8010d9a:	4770      	bx	lr
 8010d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8010da0:	e7f9      	b.n	8010d96 <memset+0x4>
	...

08010da4 <_puts_r>:
 8010da4:	b570      	push	{r4, r5, r6, lr}
 8010da6:	460e      	mov	r6, r1
 8010da8:	4605      	mov	r5, r0
 8010daa:	b118      	cbz	r0, 8010db4 <_puts_r+0x10>
 8010dac:	6983      	ldr	r3, [r0, #24]
 8010dae:	b90b      	cbnz	r3, 8010db4 <_puts_r+0x10>
 8010db0:	f000 fa0c 	bl	80111cc <__sinit>
 8010db4:	69ab      	ldr	r3, [r5, #24]
 8010db6:	68ac      	ldr	r4, [r5, #8]
 8010db8:	b913      	cbnz	r3, 8010dc0 <_puts_r+0x1c>
 8010dba:	4628      	mov	r0, r5
 8010dbc:	f000 fa06 	bl	80111cc <__sinit>
 8010dc0:	4b23      	ldr	r3, [pc, #140]	; (8010e50 <_puts_r+0xac>)
 8010dc2:	429c      	cmp	r4, r3
 8010dc4:	d117      	bne.n	8010df6 <_puts_r+0x52>
 8010dc6:	686c      	ldr	r4, [r5, #4]
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	071b      	lsls	r3, r3, #28
 8010dcc:	d51d      	bpl.n	8010e0a <_puts_r+0x66>
 8010dce:	6923      	ldr	r3, [r4, #16]
 8010dd0:	b1db      	cbz	r3, 8010e0a <_puts_r+0x66>
 8010dd2:	3e01      	subs	r6, #1
 8010dd4:	68a3      	ldr	r3, [r4, #8]
 8010dd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	60a3      	str	r3, [r4, #8]
 8010dde:	b9e9      	cbnz	r1, 8010e1c <_puts_r+0x78>
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	da2e      	bge.n	8010e42 <_puts_r+0x9e>
 8010de4:	4622      	mov	r2, r4
 8010de6:	210a      	movs	r1, #10
 8010de8:	4628      	mov	r0, r5
 8010dea:	f000 f83f 	bl	8010e6c <__swbuf_r>
 8010dee:	3001      	adds	r0, #1
 8010df0:	d011      	beq.n	8010e16 <_puts_r+0x72>
 8010df2:	200a      	movs	r0, #10
 8010df4:	e011      	b.n	8010e1a <_puts_r+0x76>
 8010df6:	4b17      	ldr	r3, [pc, #92]	; (8010e54 <_puts_r+0xb0>)
 8010df8:	429c      	cmp	r4, r3
 8010dfa:	d101      	bne.n	8010e00 <_puts_r+0x5c>
 8010dfc:	68ac      	ldr	r4, [r5, #8]
 8010dfe:	e7e3      	b.n	8010dc8 <_puts_r+0x24>
 8010e00:	4b15      	ldr	r3, [pc, #84]	; (8010e58 <_puts_r+0xb4>)
 8010e02:	429c      	cmp	r4, r3
 8010e04:	bf08      	it	eq
 8010e06:	68ec      	ldreq	r4, [r5, #12]
 8010e08:	e7de      	b.n	8010dc8 <_puts_r+0x24>
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f000 f87f 	bl	8010f10 <__swsetup_r>
 8010e12:	2800      	cmp	r0, #0
 8010e14:	d0dd      	beq.n	8010dd2 <_puts_r+0x2e>
 8010e16:	f04f 30ff 	mov.w	r0, #4294967295
 8010e1a:	bd70      	pop	{r4, r5, r6, pc}
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	da04      	bge.n	8010e2a <_puts_r+0x86>
 8010e20:	69a2      	ldr	r2, [r4, #24]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	dc06      	bgt.n	8010e34 <_puts_r+0x90>
 8010e26:	290a      	cmp	r1, #10
 8010e28:	d004      	beq.n	8010e34 <_puts_r+0x90>
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	1c5a      	adds	r2, r3, #1
 8010e2e:	6022      	str	r2, [r4, #0]
 8010e30:	7019      	strb	r1, [r3, #0]
 8010e32:	e7cf      	b.n	8010dd4 <_puts_r+0x30>
 8010e34:	4622      	mov	r2, r4
 8010e36:	4628      	mov	r0, r5
 8010e38:	f000 f818 	bl	8010e6c <__swbuf_r>
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	d1c9      	bne.n	8010dd4 <_puts_r+0x30>
 8010e40:	e7e9      	b.n	8010e16 <_puts_r+0x72>
 8010e42:	6823      	ldr	r3, [r4, #0]
 8010e44:	200a      	movs	r0, #10
 8010e46:	1c5a      	adds	r2, r3, #1
 8010e48:	6022      	str	r2, [r4, #0]
 8010e4a:	7018      	strb	r0, [r3, #0]
 8010e4c:	e7e5      	b.n	8010e1a <_puts_r+0x76>
 8010e4e:	bf00      	nop
 8010e50:	0802544c 	.word	0x0802544c
 8010e54:	0802546c 	.word	0x0802546c
 8010e58:	0802542c 	.word	0x0802542c

08010e5c <puts>:
 8010e5c:	4b02      	ldr	r3, [pc, #8]	; (8010e68 <puts+0xc>)
 8010e5e:	4601      	mov	r1, r0
 8010e60:	6818      	ldr	r0, [r3, #0]
 8010e62:	f7ff bf9f 	b.w	8010da4 <_puts_r>
 8010e66:	bf00      	nop
 8010e68:	2000001c 	.word	0x2000001c

08010e6c <__swbuf_r>:
 8010e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6e:	460e      	mov	r6, r1
 8010e70:	4614      	mov	r4, r2
 8010e72:	4605      	mov	r5, r0
 8010e74:	b118      	cbz	r0, 8010e7e <__swbuf_r+0x12>
 8010e76:	6983      	ldr	r3, [r0, #24]
 8010e78:	b90b      	cbnz	r3, 8010e7e <__swbuf_r+0x12>
 8010e7a:	f000 f9a7 	bl	80111cc <__sinit>
 8010e7e:	4b21      	ldr	r3, [pc, #132]	; (8010f04 <__swbuf_r+0x98>)
 8010e80:	429c      	cmp	r4, r3
 8010e82:	d12a      	bne.n	8010eda <__swbuf_r+0x6e>
 8010e84:	686c      	ldr	r4, [r5, #4]
 8010e86:	69a3      	ldr	r3, [r4, #24]
 8010e88:	60a3      	str	r3, [r4, #8]
 8010e8a:	89a3      	ldrh	r3, [r4, #12]
 8010e8c:	071a      	lsls	r2, r3, #28
 8010e8e:	d52e      	bpl.n	8010eee <__swbuf_r+0x82>
 8010e90:	6923      	ldr	r3, [r4, #16]
 8010e92:	b363      	cbz	r3, 8010eee <__swbuf_r+0x82>
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	6820      	ldr	r0, [r4, #0]
 8010e98:	1ac0      	subs	r0, r0, r3
 8010e9a:	6963      	ldr	r3, [r4, #20]
 8010e9c:	b2f6      	uxtb	r6, r6
 8010e9e:	4283      	cmp	r3, r0
 8010ea0:	4637      	mov	r7, r6
 8010ea2:	dc04      	bgt.n	8010eae <__swbuf_r+0x42>
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	f000 f926 	bl	80110f8 <_fflush_r>
 8010eac:	bb28      	cbnz	r0, 8010efa <__swbuf_r+0x8e>
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	3b01      	subs	r3, #1
 8010eb2:	60a3      	str	r3, [r4, #8]
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	1c5a      	adds	r2, r3, #1
 8010eb8:	6022      	str	r2, [r4, #0]
 8010eba:	701e      	strb	r6, [r3, #0]
 8010ebc:	6963      	ldr	r3, [r4, #20]
 8010ebe:	3001      	adds	r0, #1
 8010ec0:	4283      	cmp	r3, r0
 8010ec2:	d004      	beq.n	8010ece <__swbuf_r+0x62>
 8010ec4:	89a3      	ldrh	r3, [r4, #12]
 8010ec6:	07db      	lsls	r3, r3, #31
 8010ec8:	d519      	bpl.n	8010efe <__swbuf_r+0x92>
 8010eca:	2e0a      	cmp	r6, #10
 8010ecc:	d117      	bne.n	8010efe <__swbuf_r+0x92>
 8010ece:	4621      	mov	r1, r4
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f000 f911 	bl	80110f8 <_fflush_r>
 8010ed6:	b190      	cbz	r0, 8010efe <__swbuf_r+0x92>
 8010ed8:	e00f      	b.n	8010efa <__swbuf_r+0x8e>
 8010eda:	4b0b      	ldr	r3, [pc, #44]	; (8010f08 <__swbuf_r+0x9c>)
 8010edc:	429c      	cmp	r4, r3
 8010ede:	d101      	bne.n	8010ee4 <__swbuf_r+0x78>
 8010ee0:	68ac      	ldr	r4, [r5, #8]
 8010ee2:	e7d0      	b.n	8010e86 <__swbuf_r+0x1a>
 8010ee4:	4b09      	ldr	r3, [pc, #36]	; (8010f0c <__swbuf_r+0xa0>)
 8010ee6:	429c      	cmp	r4, r3
 8010ee8:	bf08      	it	eq
 8010eea:	68ec      	ldreq	r4, [r5, #12]
 8010eec:	e7cb      	b.n	8010e86 <__swbuf_r+0x1a>
 8010eee:	4621      	mov	r1, r4
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f000 f80d 	bl	8010f10 <__swsetup_r>
 8010ef6:	2800      	cmp	r0, #0
 8010ef8:	d0cc      	beq.n	8010e94 <__swbuf_r+0x28>
 8010efa:	f04f 37ff 	mov.w	r7, #4294967295
 8010efe:	4638      	mov	r0, r7
 8010f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f02:	bf00      	nop
 8010f04:	0802544c 	.word	0x0802544c
 8010f08:	0802546c 	.word	0x0802546c
 8010f0c:	0802542c 	.word	0x0802542c

08010f10 <__swsetup_r>:
 8010f10:	4b32      	ldr	r3, [pc, #200]	; (8010fdc <__swsetup_r+0xcc>)
 8010f12:	b570      	push	{r4, r5, r6, lr}
 8010f14:	681d      	ldr	r5, [r3, #0]
 8010f16:	4606      	mov	r6, r0
 8010f18:	460c      	mov	r4, r1
 8010f1a:	b125      	cbz	r5, 8010f26 <__swsetup_r+0x16>
 8010f1c:	69ab      	ldr	r3, [r5, #24]
 8010f1e:	b913      	cbnz	r3, 8010f26 <__swsetup_r+0x16>
 8010f20:	4628      	mov	r0, r5
 8010f22:	f000 f953 	bl	80111cc <__sinit>
 8010f26:	4b2e      	ldr	r3, [pc, #184]	; (8010fe0 <__swsetup_r+0xd0>)
 8010f28:	429c      	cmp	r4, r3
 8010f2a:	d10f      	bne.n	8010f4c <__swsetup_r+0x3c>
 8010f2c:	686c      	ldr	r4, [r5, #4]
 8010f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	0715      	lsls	r5, r2, #28
 8010f36:	d42c      	bmi.n	8010f92 <__swsetup_r+0x82>
 8010f38:	06d0      	lsls	r0, r2, #27
 8010f3a:	d411      	bmi.n	8010f60 <__swsetup_r+0x50>
 8010f3c:	2209      	movs	r2, #9
 8010f3e:	6032      	str	r2, [r6, #0]
 8010f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f44:	81a3      	strh	r3, [r4, #12]
 8010f46:	f04f 30ff 	mov.w	r0, #4294967295
 8010f4a:	e03e      	b.n	8010fca <__swsetup_r+0xba>
 8010f4c:	4b25      	ldr	r3, [pc, #148]	; (8010fe4 <__swsetup_r+0xd4>)
 8010f4e:	429c      	cmp	r4, r3
 8010f50:	d101      	bne.n	8010f56 <__swsetup_r+0x46>
 8010f52:	68ac      	ldr	r4, [r5, #8]
 8010f54:	e7eb      	b.n	8010f2e <__swsetup_r+0x1e>
 8010f56:	4b24      	ldr	r3, [pc, #144]	; (8010fe8 <__swsetup_r+0xd8>)
 8010f58:	429c      	cmp	r4, r3
 8010f5a:	bf08      	it	eq
 8010f5c:	68ec      	ldreq	r4, [r5, #12]
 8010f5e:	e7e6      	b.n	8010f2e <__swsetup_r+0x1e>
 8010f60:	0751      	lsls	r1, r2, #29
 8010f62:	d512      	bpl.n	8010f8a <__swsetup_r+0x7a>
 8010f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f66:	b141      	cbz	r1, 8010f7a <__swsetup_r+0x6a>
 8010f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f6c:	4299      	cmp	r1, r3
 8010f6e:	d002      	beq.n	8010f76 <__swsetup_r+0x66>
 8010f70:	4630      	mov	r0, r6
 8010f72:	f000 fa19 	bl	80113a8 <_free_r>
 8010f76:	2300      	movs	r3, #0
 8010f78:	6363      	str	r3, [r4, #52]	; 0x34
 8010f7a:	89a3      	ldrh	r3, [r4, #12]
 8010f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f80:	81a3      	strh	r3, [r4, #12]
 8010f82:	2300      	movs	r3, #0
 8010f84:	6063      	str	r3, [r4, #4]
 8010f86:	6923      	ldr	r3, [r4, #16]
 8010f88:	6023      	str	r3, [r4, #0]
 8010f8a:	89a3      	ldrh	r3, [r4, #12]
 8010f8c:	f043 0308 	orr.w	r3, r3, #8
 8010f90:	81a3      	strh	r3, [r4, #12]
 8010f92:	6923      	ldr	r3, [r4, #16]
 8010f94:	b94b      	cbnz	r3, 8010faa <__swsetup_r+0x9a>
 8010f96:	89a3      	ldrh	r3, [r4, #12]
 8010f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fa0:	d003      	beq.n	8010faa <__swsetup_r+0x9a>
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f000 f9bf 	bl	8011328 <__smakebuf_r>
 8010faa:	89a2      	ldrh	r2, [r4, #12]
 8010fac:	f012 0301 	ands.w	r3, r2, #1
 8010fb0:	d00c      	beq.n	8010fcc <__swsetup_r+0xbc>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	60a3      	str	r3, [r4, #8]
 8010fb6:	6963      	ldr	r3, [r4, #20]
 8010fb8:	425b      	negs	r3, r3
 8010fba:	61a3      	str	r3, [r4, #24]
 8010fbc:	6923      	ldr	r3, [r4, #16]
 8010fbe:	b953      	cbnz	r3, 8010fd6 <__swsetup_r+0xc6>
 8010fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010fc8:	d1ba      	bne.n	8010f40 <__swsetup_r+0x30>
 8010fca:	bd70      	pop	{r4, r5, r6, pc}
 8010fcc:	0792      	lsls	r2, r2, #30
 8010fce:	bf58      	it	pl
 8010fd0:	6963      	ldrpl	r3, [r4, #20]
 8010fd2:	60a3      	str	r3, [r4, #8]
 8010fd4:	e7f2      	b.n	8010fbc <__swsetup_r+0xac>
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	e7f7      	b.n	8010fca <__swsetup_r+0xba>
 8010fda:	bf00      	nop
 8010fdc:	2000001c 	.word	0x2000001c
 8010fe0:	0802544c 	.word	0x0802544c
 8010fe4:	0802546c 	.word	0x0802546c
 8010fe8:	0802542c 	.word	0x0802542c

08010fec <__sflush_r>:
 8010fec:	898a      	ldrh	r2, [r1, #12]
 8010fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	0710      	lsls	r0, r2, #28
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	d458      	bmi.n	80110ac <__sflush_r+0xc0>
 8010ffa:	684b      	ldr	r3, [r1, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	dc05      	bgt.n	801100c <__sflush_r+0x20>
 8011000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011002:	2b00      	cmp	r3, #0
 8011004:	dc02      	bgt.n	801100c <__sflush_r+0x20>
 8011006:	2000      	movs	r0, #0
 8011008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801100c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801100e:	2e00      	cmp	r6, #0
 8011010:	d0f9      	beq.n	8011006 <__sflush_r+0x1a>
 8011012:	2300      	movs	r3, #0
 8011014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011018:	682f      	ldr	r7, [r5, #0]
 801101a:	6a21      	ldr	r1, [r4, #32]
 801101c:	602b      	str	r3, [r5, #0]
 801101e:	d032      	beq.n	8011086 <__sflush_r+0x9a>
 8011020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	075a      	lsls	r2, r3, #29
 8011026:	d505      	bpl.n	8011034 <__sflush_r+0x48>
 8011028:	6863      	ldr	r3, [r4, #4]
 801102a:	1ac0      	subs	r0, r0, r3
 801102c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801102e:	b10b      	cbz	r3, 8011034 <__sflush_r+0x48>
 8011030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011032:	1ac0      	subs	r0, r0, r3
 8011034:	2300      	movs	r3, #0
 8011036:	4602      	mov	r2, r0
 8011038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801103a:	6a21      	ldr	r1, [r4, #32]
 801103c:	4628      	mov	r0, r5
 801103e:	47b0      	blx	r6
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	89a3      	ldrh	r3, [r4, #12]
 8011044:	d106      	bne.n	8011054 <__sflush_r+0x68>
 8011046:	6829      	ldr	r1, [r5, #0]
 8011048:	291d      	cmp	r1, #29
 801104a:	d848      	bhi.n	80110de <__sflush_r+0xf2>
 801104c:	4a29      	ldr	r2, [pc, #164]	; (80110f4 <__sflush_r+0x108>)
 801104e:	40ca      	lsrs	r2, r1
 8011050:	07d6      	lsls	r6, r2, #31
 8011052:	d544      	bpl.n	80110de <__sflush_r+0xf2>
 8011054:	2200      	movs	r2, #0
 8011056:	6062      	str	r2, [r4, #4]
 8011058:	04d9      	lsls	r1, r3, #19
 801105a:	6922      	ldr	r2, [r4, #16]
 801105c:	6022      	str	r2, [r4, #0]
 801105e:	d504      	bpl.n	801106a <__sflush_r+0x7e>
 8011060:	1c42      	adds	r2, r0, #1
 8011062:	d101      	bne.n	8011068 <__sflush_r+0x7c>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	b903      	cbnz	r3, 801106a <__sflush_r+0x7e>
 8011068:	6560      	str	r0, [r4, #84]	; 0x54
 801106a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801106c:	602f      	str	r7, [r5, #0]
 801106e:	2900      	cmp	r1, #0
 8011070:	d0c9      	beq.n	8011006 <__sflush_r+0x1a>
 8011072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011076:	4299      	cmp	r1, r3
 8011078:	d002      	beq.n	8011080 <__sflush_r+0x94>
 801107a:	4628      	mov	r0, r5
 801107c:	f000 f994 	bl	80113a8 <_free_r>
 8011080:	2000      	movs	r0, #0
 8011082:	6360      	str	r0, [r4, #52]	; 0x34
 8011084:	e7c0      	b.n	8011008 <__sflush_r+0x1c>
 8011086:	2301      	movs	r3, #1
 8011088:	4628      	mov	r0, r5
 801108a:	47b0      	blx	r6
 801108c:	1c41      	adds	r1, r0, #1
 801108e:	d1c8      	bne.n	8011022 <__sflush_r+0x36>
 8011090:	682b      	ldr	r3, [r5, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d0c5      	beq.n	8011022 <__sflush_r+0x36>
 8011096:	2b1d      	cmp	r3, #29
 8011098:	d001      	beq.n	801109e <__sflush_r+0xb2>
 801109a:	2b16      	cmp	r3, #22
 801109c:	d101      	bne.n	80110a2 <__sflush_r+0xb6>
 801109e:	602f      	str	r7, [r5, #0]
 80110a0:	e7b1      	b.n	8011006 <__sflush_r+0x1a>
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	e7ad      	b.n	8011008 <__sflush_r+0x1c>
 80110ac:	690f      	ldr	r7, [r1, #16]
 80110ae:	2f00      	cmp	r7, #0
 80110b0:	d0a9      	beq.n	8011006 <__sflush_r+0x1a>
 80110b2:	0793      	lsls	r3, r2, #30
 80110b4:	680e      	ldr	r6, [r1, #0]
 80110b6:	bf08      	it	eq
 80110b8:	694b      	ldreq	r3, [r1, #20]
 80110ba:	600f      	str	r7, [r1, #0]
 80110bc:	bf18      	it	ne
 80110be:	2300      	movne	r3, #0
 80110c0:	eba6 0807 	sub.w	r8, r6, r7
 80110c4:	608b      	str	r3, [r1, #8]
 80110c6:	f1b8 0f00 	cmp.w	r8, #0
 80110ca:	dd9c      	ble.n	8011006 <__sflush_r+0x1a>
 80110cc:	4643      	mov	r3, r8
 80110ce:	463a      	mov	r2, r7
 80110d0:	6a21      	ldr	r1, [r4, #32]
 80110d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110d4:	4628      	mov	r0, r5
 80110d6:	47b0      	blx	r6
 80110d8:	2800      	cmp	r0, #0
 80110da:	dc06      	bgt.n	80110ea <__sflush_r+0xfe>
 80110dc:	89a3      	ldrh	r3, [r4, #12]
 80110de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e2:	81a3      	strh	r3, [r4, #12]
 80110e4:	f04f 30ff 	mov.w	r0, #4294967295
 80110e8:	e78e      	b.n	8011008 <__sflush_r+0x1c>
 80110ea:	4407      	add	r7, r0
 80110ec:	eba8 0800 	sub.w	r8, r8, r0
 80110f0:	e7e9      	b.n	80110c6 <__sflush_r+0xda>
 80110f2:	bf00      	nop
 80110f4:	20400001 	.word	0x20400001

080110f8 <_fflush_r>:
 80110f8:	b538      	push	{r3, r4, r5, lr}
 80110fa:	690b      	ldr	r3, [r1, #16]
 80110fc:	4605      	mov	r5, r0
 80110fe:	460c      	mov	r4, r1
 8011100:	b1db      	cbz	r3, 801113a <_fflush_r+0x42>
 8011102:	b118      	cbz	r0, 801110c <_fflush_r+0x14>
 8011104:	6983      	ldr	r3, [r0, #24]
 8011106:	b90b      	cbnz	r3, 801110c <_fflush_r+0x14>
 8011108:	f000 f860 	bl	80111cc <__sinit>
 801110c:	4b0c      	ldr	r3, [pc, #48]	; (8011140 <_fflush_r+0x48>)
 801110e:	429c      	cmp	r4, r3
 8011110:	d109      	bne.n	8011126 <_fflush_r+0x2e>
 8011112:	686c      	ldr	r4, [r5, #4]
 8011114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011118:	b17b      	cbz	r3, 801113a <_fflush_r+0x42>
 801111a:	4621      	mov	r1, r4
 801111c:	4628      	mov	r0, r5
 801111e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011122:	f7ff bf63 	b.w	8010fec <__sflush_r>
 8011126:	4b07      	ldr	r3, [pc, #28]	; (8011144 <_fflush_r+0x4c>)
 8011128:	429c      	cmp	r4, r3
 801112a:	d101      	bne.n	8011130 <_fflush_r+0x38>
 801112c:	68ac      	ldr	r4, [r5, #8]
 801112e:	e7f1      	b.n	8011114 <_fflush_r+0x1c>
 8011130:	4b05      	ldr	r3, [pc, #20]	; (8011148 <_fflush_r+0x50>)
 8011132:	429c      	cmp	r4, r3
 8011134:	bf08      	it	eq
 8011136:	68ec      	ldreq	r4, [r5, #12]
 8011138:	e7ec      	b.n	8011114 <_fflush_r+0x1c>
 801113a:	2000      	movs	r0, #0
 801113c:	bd38      	pop	{r3, r4, r5, pc}
 801113e:	bf00      	nop
 8011140:	0802544c 	.word	0x0802544c
 8011144:	0802546c 	.word	0x0802546c
 8011148:	0802542c 	.word	0x0802542c

0801114c <std>:
 801114c:	2300      	movs	r3, #0
 801114e:	b510      	push	{r4, lr}
 8011150:	4604      	mov	r4, r0
 8011152:	e9c0 3300 	strd	r3, r3, [r0]
 8011156:	6083      	str	r3, [r0, #8]
 8011158:	8181      	strh	r1, [r0, #12]
 801115a:	6643      	str	r3, [r0, #100]	; 0x64
 801115c:	81c2      	strh	r2, [r0, #14]
 801115e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011162:	6183      	str	r3, [r0, #24]
 8011164:	4619      	mov	r1, r3
 8011166:	2208      	movs	r2, #8
 8011168:	305c      	adds	r0, #92	; 0x5c
 801116a:	f7ff fe12 	bl	8010d92 <memset>
 801116e:	4b05      	ldr	r3, [pc, #20]	; (8011184 <std+0x38>)
 8011170:	6263      	str	r3, [r4, #36]	; 0x24
 8011172:	4b05      	ldr	r3, [pc, #20]	; (8011188 <std+0x3c>)
 8011174:	62a3      	str	r3, [r4, #40]	; 0x28
 8011176:	4b05      	ldr	r3, [pc, #20]	; (801118c <std+0x40>)
 8011178:	62e3      	str	r3, [r4, #44]	; 0x2c
 801117a:	4b05      	ldr	r3, [pc, #20]	; (8011190 <std+0x44>)
 801117c:	6224      	str	r4, [r4, #32]
 801117e:	6323      	str	r3, [r4, #48]	; 0x30
 8011180:	bd10      	pop	{r4, pc}
 8011182:	bf00      	nop
 8011184:	08011519 	.word	0x08011519
 8011188:	0801153b 	.word	0x0801153b
 801118c:	08011573 	.word	0x08011573
 8011190:	08011597 	.word	0x08011597

08011194 <_cleanup_r>:
 8011194:	4901      	ldr	r1, [pc, #4]	; (801119c <_cleanup_r+0x8>)
 8011196:	f000 b885 	b.w	80112a4 <_fwalk_reent>
 801119a:	bf00      	nop
 801119c:	080110f9 	.word	0x080110f9

080111a0 <__sfmoreglue>:
 80111a0:	b570      	push	{r4, r5, r6, lr}
 80111a2:	1e4a      	subs	r2, r1, #1
 80111a4:	2568      	movs	r5, #104	; 0x68
 80111a6:	4355      	muls	r5, r2
 80111a8:	460e      	mov	r6, r1
 80111aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80111ae:	f000 f949 	bl	8011444 <_malloc_r>
 80111b2:	4604      	mov	r4, r0
 80111b4:	b140      	cbz	r0, 80111c8 <__sfmoreglue+0x28>
 80111b6:	2100      	movs	r1, #0
 80111b8:	e9c0 1600 	strd	r1, r6, [r0]
 80111bc:	300c      	adds	r0, #12
 80111be:	60a0      	str	r0, [r4, #8]
 80111c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80111c4:	f7ff fde5 	bl	8010d92 <memset>
 80111c8:	4620      	mov	r0, r4
 80111ca:	bd70      	pop	{r4, r5, r6, pc}

080111cc <__sinit>:
 80111cc:	6983      	ldr	r3, [r0, #24]
 80111ce:	b510      	push	{r4, lr}
 80111d0:	4604      	mov	r4, r0
 80111d2:	bb33      	cbnz	r3, 8011222 <__sinit+0x56>
 80111d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80111d8:	6503      	str	r3, [r0, #80]	; 0x50
 80111da:	4b12      	ldr	r3, [pc, #72]	; (8011224 <__sinit+0x58>)
 80111dc:	4a12      	ldr	r2, [pc, #72]	; (8011228 <__sinit+0x5c>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	6282      	str	r2, [r0, #40]	; 0x28
 80111e2:	4298      	cmp	r0, r3
 80111e4:	bf04      	itt	eq
 80111e6:	2301      	moveq	r3, #1
 80111e8:	6183      	streq	r3, [r0, #24]
 80111ea:	f000 f81f 	bl	801122c <__sfp>
 80111ee:	6060      	str	r0, [r4, #4]
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 f81b 	bl	801122c <__sfp>
 80111f6:	60a0      	str	r0, [r4, #8]
 80111f8:	4620      	mov	r0, r4
 80111fa:	f000 f817 	bl	801122c <__sfp>
 80111fe:	2200      	movs	r2, #0
 8011200:	60e0      	str	r0, [r4, #12]
 8011202:	2104      	movs	r1, #4
 8011204:	6860      	ldr	r0, [r4, #4]
 8011206:	f7ff ffa1 	bl	801114c <std>
 801120a:	2201      	movs	r2, #1
 801120c:	2109      	movs	r1, #9
 801120e:	68a0      	ldr	r0, [r4, #8]
 8011210:	f7ff ff9c 	bl	801114c <std>
 8011214:	2202      	movs	r2, #2
 8011216:	2112      	movs	r1, #18
 8011218:	68e0      	ldr	r0, [r4, #12]
 801121a:	f7ff ff97 	bl	801114c <std>
 801121e:	2301      	movs	r3, #1
 8011220:	61a3      	str	r3, [r4, #24]
 8011222:	bd10      	pop	{r4, pc}
 8011224:	08025428 	.word	0x08025428
 8011228:	08011195 	.word	0x08011195

0801122c <__sfp>:
 801122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801122e:	4b1b      	ldr	r3, [pc, #108]	; (801129c <__sfp+0x70>)
 8011230:	681e      	ldr	r6, [r3, #0]
 8011232:	69b3      	ldr	r3, [r6, #24]
 8011234:	4607      	mov	r7, r0
 8011236:	b913      	cbnz	r3, 801123e <__sfp+0x12>
 8011238:	4630      	mov	r0, r6
 801123a:	f7ff ffc7 	bl	80111cc <__sinit>
 801123e:	3648      	adds	r6, #72	; 0x48
 8011240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011244:	3b01      	subs	r3, #1
 8011246:	d503      	bpl.n	8011250 <__sfp+0x24>
 8011248:	6833      	ldr	r3, [r6, #0]
 801124a:	b133      	cbz	r3, 801125a <__sfp+0x2e>
 801124c:	6836      	ldr	r6, [r6, #0]
 801124e:	e7f7      	b.n	8011240 <__sfp+0x14>
 8011250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011254:	b16d      	cbz	r5, 8011272 <__sfp+0x46>
 8011256:	3468      	adds	r4, #104	; 0x68
 8011258:	e7f4      	b.n	8011244 <__sfp+0x18>
 801125a:	2104      	movs	r1, #4
 801125c:	4638      	mov	r0, r7
 801125e:	f7ff ff9f 	bl	80111a0 <__sfmoreglue>
 8011262:	6030      	str	r0, [r6, #0]
 8011264:	2800      	cmp	r0, #0
 8011266:	d1f1      	bne.n	801124c <__sfp+0x20>
 8011268:	230c      	movs	r3, #12
 801126a:	603b      	str	r3, [r7, #0]
 801126c:	4604      	mov	r4, r0
 801126e:	4620      	mov	r0, r4
 8011270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011272:	4b0b      	ldr	r3, [pc, #44]	; (80112a0 <__sfp+0x74>)
 8011274:	6665      	str	r5, [r4, #100]	; 0x64
 8011276:	e9c4 5500 	strd	r5, r5, [r4]
 801127a:	60a5      	str	r5, [r4, #8]
 801127c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011280:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011284:	2208      	movs	r2, #8
 8011286:	4629      	mov	r1, r5
 8011288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801128c:	f7ff fd81 	bl	8010d92 <memset>
 8011290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011298:	e7e9      	b.n	801126e <__sfp+0x42>
 801129a:	bf00      	nop
 801129c:	08025428 	.word	0x08025428
 80112a0:	ffff0001 	.word	0xffff0001

080112a4 <_fwalk_reent>:
 80112a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112a8:	4680      	mov	r8, r0
 80112aa:	4689      	mov	r9, r1
 80112ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80112b0:	2600      	movs	r6, #0
 80112b2:	b914      	cbnz	r4, 80112ba <_fwalk_reent+0x16>
 80112b4:	4630      	mov	r0, r6
 80112b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80112be:	3f01      	subs	r7, #1
 80112c0:	d501      	bpl.n	80112c6 <_fwalk_reent+0x22>
 80112c2:	6824      	ldr	r4, [r4, #0]
 80112c4:	e7f5      	b.n	80112b2 <_fwalk_reent+0xe>
 80112c6:	89ab      	ldrh	r3, [r5, #12]
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d907      	bls.n	80112dc <_fwalk_reent+0x38>
 80112cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80112d0:	3301      	adds	r3, #1
 80112d2:	d003      	beq.n	80112dc <_fwalk_reent+0x38>
 80112d4:	4629      	mov	r1, r5
 80112d6:	4640      	mov	r0, r8
 80112d8:	47c8      	blx	r9
 80112da:	4306      	orrs	r6, r0
 80112dc:	3568      	adds	r5, #104	; 0x68
 80112de:	e7ee      	b.n	80112be <_fwalk_reent+0x1a>

080112e0 <__swhatbuf_r>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	460e      	mov	r6, r1
 80112e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112e8:	2900      	cmp	r1, #0
 80112ea:	b096      	sub	sp, #88	; 0x58
 80112ec:	4614      	mov	r4, r2
 80112ee:	461d      	mov	r5, r3
 80112f0:	da07      	bge.n	8011302 <__swhatbuf_r+0x22>
 80112f2:	2300      	movs	r3, #0
 80112f4:	602b      	str	r3, [r5, #0]
 80112f6:	89b3      	ldrh	r3, [r6, #12]
 80112f8:	061a      	lsls	r2, r3, #24
 80112fa:	d410      	bmi.n	801131e <__swhatbuf_r+0x3e>
 80112fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011300:	e00e      	b.n	8011320 <__swhatbuf_r+0x40>
 8011302:	466a      	mov	r2, sp
 8011304:	f000 f96e 	bl	80115e4 <_fstat_r>
 8011308:	2800      	cmp	r0, #0
 801130a:	dbf2      	blt.n	80112f2 <__swhatbuf_r+0x12>
 801130c:	9a01      	ldr	r2, [sp, #4]
 801130e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011316:	425a      	negs	r2, r3
 8011318:	415a      	adcs	r2, r3
 801131a:	602a      	str	r2, [r5, #0]
 801131c:	e7ee      	b.n	80112fc <__swhatbuf_r+0x1c>
 801131e:	2340      	movs	r3, #64	; 0x40
 8011320:	2000      	movs	r0, #0
 8011322:	6023      	str	r3, [r4, #0]
 8011324:	b016      	add	sp, #88	; 0x58
 8011326:	bd70      	pop	{r4, r5, r6, pc}

08011328 <__smakebuf_r>:
 8011328:	898b      	ldrh	r3, [r1, #12]
 801132a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801132c:	079d      	lsls	r5, r3, #30
 801132e:	4606      	mov	r6, r0
 8011330:	460c      	mov	r4, r1
 8011332:	d507      	bpl.n	8011344 <__smakebuf_r+0x1c>
 8011334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011338:	6023      	str	r3, [r4, #0]
 801133a:	6123      	str	r3, [r4, #16]
 801133c:	2301      	movs	r3, #1
 801133e:	6163      	str	r3, [r4, #20]
 8011340:	b002      	add	sp, #8
 8011342:	bd70      	pop	{r4, r5, r6, pc}
 8011344:	ab01      	add	r3, sp, #4
 8011346:	466a      	mov	r2, sp
 8011348:	f7ff ffca 	bl	80112e0 <__swhatbuf_r>
 801134c:	9900      	ldr	r1, [sp, #0]
 801134e:	4605      	mov	r5, r0
 8011350:	4630      	mov	r0, r6
 8011352:	f000 f877 	bl	8011444 <_malloc_r>
 8011356:	b948      	cbnz	r0, 801136c <__smakebuf_r+0x44>
 8011358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801135c:	059a      	lsls	r2, r3, #22
 801135e:	d4ef      	bmi.n	8011340 <__smakebuf_r+0x18>
 8011360:	f023 0303 	bic.w	r3, r3, #3
 8011364:	f043 0302 	orr.w	r3, r3, #2
 8011368:	81a3      	strh	r3, [r4, #12]
 801136a:	e7e3      	b.n	8011334 <__smakebuf_r+0xc>
 801136c:	4b0d      	ldr	r3, [pc, #52]	; (80113a4 <__smakebuf_r+0x7c>)
 801136e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	6020      	str	r0, [r4, #0]
 8011374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011378:	81a3      	strh	r3, [r4, #12]
 801137a:	9b00      	ldr	r3, [sp, #0]
 801137c:	6163      	str	r3, [r4, #20]
 801137e:	9b01      	ldr	r3, [sp, #4]
 8011380:	6120      	str	r0, [r4, #16]
 8011382:	b15b      	cbz	r3, 801139c <__smakebuf_r+0x74>
 8011384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011388:	4630      	mov	r0, r6
 801138a:	f000 f93d 	bl	8011608 <_isatty_r>
 801138e:	b128      	cbz	r0, 801139c <__smakebuf_r+0x74>
 8011390:	89a3      	ldrh	r3, [r4, #12]
 8011392:	f023 0303 	bic.w	r3, r3, #3
 8011396:	f043 0301 	orr.w	r3, r3, #1
 801139a:	81a3      	strh	r3, [r4, #12]
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	431d      	orrs	r5, r3
 80113a0:	81a5      	strh	r5, [r4, #12]
 80113a2:	e7cd      	b.n	8011340 <__smakebuf_r+0x18>
 80113a4:	08011195 	.word	0x08011195

080113a8 <_free_r>:
 80113a8:	b538      	push	{r3, r4, r5, lr}
 80113aa:	4605      	mov	r5, r0
 80113ac:	2900      	cmp	r1, #0
 80113ae:	d045      	beq.n	801143c <_free_r+0x94>
 80113b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113b4:	1f0c      	subs	r4, r1, #4
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	bfb8      	it	lt
 80113ba:	18e4      	addlt	r4, r4, r3
 80113bc:	f000 f946 	bl	801164c <__malloc_lock>
 80113c0:	4a1f      	ldr	r2, [pc, #124]	; (8011440 <_free_r+0x98>)
 80113c2:	6813      	ldr	r3, [r2, #0]
 80113c4:	4610      	mov	r0, r2
 80113c6:	b933      	cbnz	r3, 80113d6 <_free_r+0x2e>
 80113c8:	6063      	str	r3, [r4, #4]
 80113ca:	6014      	str	r4, [r2, #0]
 80113cc:	4628      	mov	r0, r5
 80113ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113d2:	f000 b93c 	b.w	801164e <__malloc_unlock>
 80113d6:	42a3      	cmp	r3, r4
 80113d8:	d90c      	bls.n	80113f4 <_free_r+0x4c>
 80113da:	6821      	ldr	r1, [r4, #0]
 80113dc:	1862      	adds	r2, r4, r1
 80113de:	4293      	cmp	r3, r2
 80113e0:	bf04      	itt	eq
 80113e2:	681a      	ldreq	r2, [r3, #0]
 80113e4:	685b      	ldreq	r3, [r3, #4]
 80113e6:	6063      	str	r3, [r4, #4]
 80113e8:	bf04      	itt	eq
 80113ea:	1852      	addeq	r2, r2, r1
 80113ec:	6022      	streq	r2, [r4, #0]
 80113ee:	6004      	str	r4, [r0, #0]
 80113f0:	e7ec      	b.n	80113cc <_free_r+0x24>
 80113f2:	4613      	mov	r3, r2
 80113f4:	685a      	ldr	r2, [r3, #4]
 80113f6:	b10a      	cbz	r2, 80113fc <_free_r+0x54>
 80113f8:	42a2      	cmp	r2, r4
 80113fa:	d9fa      	bls.n	80113f2 <_free_r+0x4a>
 80113fc:	6819      	ldr	r1, [r3, #0]
 80113fe:	1858      	adds	r0, r3, r1
 8011400:	42a0      	cmp	r0, r4
 8011402:	d10b      	bne.n	801141c <_free_r+0x74>
 8011404:	6820      	ldr	r0, [r4, #0]
 8011406:	4401      	add	r1, r0
 8011408:	1858      	adds	r0, r3, r1
 801140a:	4282      	cmp	r2, r0
 801140c:	6019      	str	r1, [r3, #0]
 801140e:	d1dd      	bne.n	80113cc <_free_r+0x24>
 8011410:	6810      	ldr	r0, [r2, #0]
 8011412:	6852      	ldr	r2, [r2, #4]
 8011414:	605a      	str	r2, [r3, #4]
 8011416:	4401      	add	r1, r0
 8011418:	6019      	str	r1, [r3, #0]
 801141a:	e7d7      	b.n	80113cc <_free_r+0x24>
 801141c:	d902      	bls.n	8011424 <_free_r+0x7c>
 801141e:	230c      	movs	r3, #12
 8011420:	602b      	str	r3, [r5, #0]
 8011422:	e7d3      	b.n	80113cc <_free_r+0x24>
 8011424:	6820      	ldr	r0, [r4, #0]
 8011426:	1821      	adds	r1, r4, r0
 8011428:	428a      	cmp	r2, r1
 801142a:	bf04      	itt	eq
 801142c:	6811      	ldreq	r1, [r2, #0]
 801142e:	6852      	ldreq	r2, [r2, #4]
 8011430:	6062      	str	r2, [r4, #4]
 8011432:	bf04      	itt	eq
 8011434:	1809      	addeq	r1, r1, r0
 8011436:	6021      	streq	r1, [r4, #0]
 8011438:	605c      	str	r4, [r3, #4]
 801143a:	e7c7      	b.n	80113cc <_free_r+0x24>
 801143c:	bd38      	pop	{r3, r4, r5, pc}
 801143e:	bf00      	nop
 8011440:	2000014c 	.word	0x2000014c

08011444 <_malloc_r>:
 8011444:	b570      	push	{r4, r5, r6, lr}
 8011446:	1ccd      	adds	r5, r1, #3
 8011448:	f025 0503 	bic.w	r5, r5, #3
 801144c:	3508      	adds	r5, #8
 801144e:	2d0c      	cmp	r5, #12
 8011450:	bf38      	it	cc
 8011452:	250c      	movcc	r5, #12
 8011454:	2d00      	cmp	r5, #0
 8011456:	4606      	mov	r6, r0
 8011458:	db01      	blt.n	801145e <_malloc_r+0x1a>
 801145a:	42a9      	cmp	r1, r5
 801145c:	d903      	bls.n	8011466 <_malloc_r+0x22>
 801145e:	230c      	movs	r3, #12
 8011460:	6033      	str	r3, [r6, #0]
 8011462:	2000      	movs	r0, #0
 8011464:	bd70      	pop	{r4, r5, r6, pc}
 8011466:	f000 f8f1 	bl	801164c <__malloc_lock>
 801146a:	4a21      	ldr	r2, [pc, #132]	; (80114f0 <_malloc_r+0xac>)
 801146c:	6814      	ldr	r4, [r2, #0]
 801146e:	4621      	mov	r1, r4
 8011470:	b991      	cbnz	r1, 8011498 <_malloc_r+0x54>
 8011472:	4c20      	ldr	r4, [pc, #128]	; (80114f4 <_malloc_r+0xb0>)
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	b91b      	cbnz	r3, 8011480 <_malloc_r+0x3c>
 8011478:	4630      	mov	r0, r6
 801147a:	f000 f83d 	bl	80114f8 <_sbrk_r>
 801147e:	6020      	str	r0, [r4, #0]
 8011480:	4629      	mov	r1, r5
 8011482:	4630      	mov	r0, r6
 8011484:	f000 f838 	bl	80114f8 <_sbrk_r>
 8011488:	1c43      	adds	r3, r0, #1
 801148a:	d124      	bne.n	80114d6 <_malloc_r+0x92>
 801148c:	230c      	movs	r3, #12
 801148e:	6033      	str	r3, [r6, #0]
 8011490:	4630      	mov	r0, r6
 8011492:	f000 f8dc 	bl	801164e <__malloc_unlock>
 8011496:	e7e4      	b.n	8011462 <_malloc_r+0x1e>
 8011498:	680b      	ldr	r3, [r1, #0]
 801149a:	1b5b      	subs	r3, r3, r5
 801149c:	d418      	bmi.n	80114d0 <_malloc_r+0x8c>
 801149e:	2b0b      	cmp	r3, #11
 80114a0:	d90f      	bls.n	80114c2 <_malloc_r+0x7e>
 80114a2:	600b      	str	r3, [r1, #0]
 80114a4:	50cd      	str	r5, [r1, r3]
 80114a6:	18cc      	adds	r4, r1, r3
 80114a8:	4630      	mov	r0, r6
 80114aa:	f000 f8d0 	bl	801164e <__malloc_unlock>
 80114ae:	f104 000b 	add.w	r0, r4, #11
 80114b2:	1d23      	adds	r3, r4, #4
 80114b4:	f020 0007 	bic.w	r0, r0, #7
 80114b8:	1ac3      	subs	r3, r0, r3
 80114ba:	d0d3      	beq.n	8011464 <_malloc_r+0x20>
 80114bc:	425a      	negs	r2, r3
 80114be:	50e2      	str	r2, [r4, r3]
 80114c0:	e7d0      	b.n	8011464 <_malloc_r+0x20>
 80114c2:	428c      	cmp	r4, r1
 80114c4:	684b      	ldr	r3, [r1, #4]
 80114c6:	bf16      	itet	ne
 80114c8:	6063      	strne	r3, [r4, #4]
 80114ca:	6013      	streq	r3, [r2, #0]
 80114cc:	460c      	movne	r4, r1
 80114ce:	e7eb      	b.n	80114a8 <_malloc_r+0x64>
 80114d0:	460c      	mov	r4, r1
 80114d2:	6849      	ldr	r1, [r1, #4]
 80114d4:	e7cc      	b.n	8011470 <_malloc_r+0x2c>
 80114d6:	1cc4      	adds	r4, r0, #3
 80114d8:	f024 0403 	bic.w	r4, r4, #3
 80114dc:	42a0      	cmp	r0, r4
 80114de:	d005      	beq.n	80114ec <_malloc_r+0xa8>
 80114e0:	1a21      	subs	r1, r4, r0
 80114e2:	4630      	mov	r0, r6
 80114e4:	f000 f808 	bl	80114f8 <_sbrk_r>
 80114e8:	3001      	adds	r0, #1
 80114ea:	d0cf      	beq.n	801148c <_malloc_r+0x48>
 80114ec:	6025      	str	r5, [r4, #0]
 80114ee:	e7db      	b.n	80114a8 <_malloc_r+0x64>
 80114f0:	2000014c 	.word	0x2000014c
 80114f4:	20000150 	.word	0x20000150

080114f8 <_sbrk_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4c06      	ldr	r4, [pc, #24]	; (8011514 <_sbrk_r+0x1c>)
 80114fc:	2300      	movs	r3, #0
 80114fe:	4605      	mov	r5, r0
 8011500:	4608      	mov	r0, r1
 8011502:	6023      	str	r3, [r4, #0]
 8011504:	f7ff f940 	bl	8010788 <_sbrk>
 8011508:	1c43      	adds	r3, r0, #1
 801150a:	d102      	bne.n	8011512 <_sbrk_r+0x1a>
 801150c:	6823      	ldr	r3, [r4, #0]
 801150e:	b103      	cbz	r3, 8011512 <_sbrk_r+0x1a>
 8011510:	602b      	str	r3, [r5, #0]
 8011512:	bd38      	pop	{r3, r4, r5, pc}
 8011514:	20000608 	.word	0x20000608

08011518 <__sread>:
 8011518:	b510      	push	{r4, lr}
 801151a:	460c      	mov	r4, r1
 801151c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011520:	f000 f896 	bl	8011650 <_read_r>
 8011524:	2800      	cmp	r0, #0
 8011526:	bfab      	itete	ge
 8011528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801152a:	89a3      	ldrhlt	r3, [r4, #12]
 801152c:	181b      	addge	r3, r3, r0
 801152e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011532:	bfac      	ite	ge
 8011534:	6563      	strge	r3, [r4, #84]	; 0x54
 8011536:	81a3      	strhlt	r3, [r4, #12]
 8011538:	bd10      	pop	{r4, pc}

0801153a <__swrite>:
 801153a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153e:	461f      	mov	r7, r3
 8011540:	898b      	ldrh	r3, [r1, #12]
 8011542:	05db      	lsls	r3, r3, #23
 8011544:	4605      	mov	r5, r0
 8011546:	460c      	mov	r4, r1
 8011548:	4616      	mov	r6, r2
 801154a:	d505      	bpl.n	8011558 <__swrite+0x1e>
 801154c:	2302      	movs	r3, #2
 801154e:	2200      	movs	r2, #0
 8011550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011554:	f000 f868 	bl	8011628 <_lseek_r>
 8011558:	89a3      	ldrh	r3, [r4, #12]
 801155a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801155e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011562:	81a3      	strh	r3, [r4, #12]
 8011564:	4632      	mov	r2, r6
 8011566:	463b      	mov	r3, r7
 8011568:	4628      	mov	r0, r5
 801156a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801156e:	f000 b817 	b.w	80115a0 <_write_r>

08011572 <__sseek>:
 8011572:	b510      	push	{r4, lr}
 8011574:	460c      	mov	r4, r1
 8011576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157a:	f000 f855 	bl	8011628 <_lseek_r>
 801157e:	1c43      	adds	r3, r0, #1
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	bf15      	itete	ne
 8011584:	6560      	strne	r0, [r4, #84]	; 0x54
 8011586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801158a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801158e:	81a3      	strheq	r3, [r4, #12]
 8011590:	bf18      	it	ne
 8011592:	81a3      	strhne	r3, [r4, #12]
 8011594:	bd10      	pop	{r4, pc}

08011596 <__sclose>:
 8011596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801159a:	f000 b813 	b.w	80115c4 <_close_r>
	...

080115a0 <_write_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4c07      	ldr	r4, [pc, #28]	; (80115c0 <_write_r+0x20>)
 80115a4:	4605      	mov	r5, r0
 80115a6:	4608      	mov	r0, r1
 80115a8:	4611      	mov	r1, r2
 80115aa:	2200      	movs	r2, #0
 80115ac:	6022      	str	r2, [r4, #0]
 80115ae:	461a      	mov	r2, r3
 80115b0:	f7fe f933 	bl	800f81a <_write>
 80115b4:	1c43      	adds	r3, r0, #1
 80115b6:	d102      	bne.n	80115be <_write_r+0x1e>
 80115b8:	6823      	ldr	r3, [r4, #0]
 80115ba:	b103      	cbz	r3, 80115be <_write_r+0x1e>
 80115bc:	602b      	str	r3, [r5, #0]
 80115be:	bd38      	pop	{r3, r4, r5, pc}
 80115c0:	20000608 	.word	0x20000608

080115c4 <_close_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	4c06      	ldr	r4, [pc, #24]	; (80115e0 <_close_r+0x1c>)
 80115c8:	2300      	movs	r3, #0
 80115ca:	4605      	mov	r5, r0
 80115cc:	4608      	mov	r0, r1
 80115ce:	6023      	str	r3, [r4, #0]
 80115d0:	f7ff f8a5 	bl	801071e <_close>
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	d102      	bne.n	80115de <_close_r+0x1a>
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	b103      	cbz	r3, 80115de <_close_r+0x1a>
 80115dc:	602b      	str	r3, [r5, #0]
 80115de:	bd38      	pop	{r3, r4, r5, pc}
 80115e0:	20000608 	.word	0x20000608

080115e4 <_fstat_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	4c07      	ldr	r4, [pc, #28]	; (8011604 <_fstat_r+0x20>)
 80115e8:	2300      	movs	r3, #0
 80115ea:	4605      	mov	r5, r0
 80115ec:	4608      	mov	r0, r1
 80115ee:	4611      	mov	r1, r2
 80115f0:	6023      	str	r3, [r4, #0]
 80115f2:	f7ff f8a0 	bl	8010736 <_fstat>
 80115f6:	1c43      	adds	r3, r0, #1
 80115f8:	d102      	bne.n	8011600 <_fstat_r+0x1c>
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	b103      	cbz	r3, 8011600 <_fstat_r+0x1c>
 80115fe:	602b      	str	r3, [r5, #0]
 8011600:	bd38      	pop	{r3, r4, r5, pc}
 8011602:	bf00      	nop
 8011604:	20000608 	.word	0x20000608

08011608 <_isatty_r>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4c06      	ldr	r4, [pc, #24]	; (8011624 <_isatty_r+0x1c>)
 801160c:	2300      	movs	r3, #0
 801160e:	4605      	mov	r5, r0
 8011610:	4608      	mov	r0, r1
 8011612:	6023      	str	r3, [r4, #0]
 8011614:	f7ff f89f 	bl	8010756 <_isatty>
 8011618:	1c43      	adds	r3, r0, #1
 801161a:	d102      	bne.n	8011622 <_isatty_r+0x1a>
 801161c:	6823      	ldr	r3, [r4, #0]
 801161e:	b103      	cbz	r3, 8011622 <_isatty_r+0x1a>
 8011620:	602b      	str	r3, [r5, #0]
 8011622:	bd38      	pop	{r3, r4, r5, pc}
 8011624:	20000608 	.word	0x20000608

08011628 <_lseek_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	4c07      	ldr	r4, [pc, #28]	; (8011648 <_lseek_r+0x20>)
 801162c:	4605      	mov	r5, r0
 801162e:	4608      	mov	r0, r1
 8011630:	4611      	mov	r1, r2
 8011632:	2200      	movs	r2, #0
 8011634:	6022      	str	r2, [r4, #0]
 8011636:	461a      	mov	r2, r3
 8011638:	f7ff f898 	bl	801076c <_lseek>
 801163c:	1c43      	adds	r3, r0, #1
 801163e:	d102      	bne.n	8011646 <_lseek_r+0x1e>
 8011640:	6823      	ldr	r3, [r4, #0]
 8011642:	b103      	cbz	r3, 8011646 <_lseek_r+0x1e>
 8011644:	602b      	str	r3, [r5, #0]
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	20000608 	.word	0x20000608

0801164c <__malloc_lock>:
 801164c:	4770      	bx	lr

0801164e <__malloc_unlock>:
 801164e:	4770      	bx	lr

08011650 <_read_r>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	4c07      	ldr	r4, [pc, #28]	; (8011670 <_read_r+0x20>)
 8011654:	4605      	mov	r5, r0
 8011656:	4608      	mov	r0, r1
 8011658:	4611      	mov	r1, r2
 801165a:	2200      	movs	r2, #0
 801165c:	6022      	str	r2, [r4, #0]
 801165e:	461a      	mov	r2, r3
 8011660:	f7ff f840 	bl	80106e4 <_read>
 8011664:	1c43      	adds	r3, r0, #1
 8011666:	d102      	bne.n	801166e <_read_r+0x1e>
 8011668:	6823      	ldr	r3, [r4, #0]
 801166a:	b103      	cbz	r3, 801166e <_read_r+0x1e>
 801166c:	602b      	str	r3, [r5, #0]
 801166e:	bd38      	pop	{r3, r4, r5, pc}
 8011670:	20000608 	.word	0x20000608

08011674 <fmod>:
 8011674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011678:	ed2d 8b02 	vpush	{d8}
 801167c:	b08b      	sub	sp, #44	; 0x2c
 801167e:	ec55 4b10 	vmov	r4, r5, d0
 8011682:	ec57 6b11 	vmov	r6, r7, d1
 8011686:	f000 f8b5 	bl	80117f4 <__ieee754_fmod>
 801168a:	4b2a      	ldr	r3, [pc, #168]	; (8011734 <fmod+0xc0>)
 801168c:	eeb0 8a40 	vmov.f32	s16, s0
 8011690:	eef0 8a60 	vmov.f32	s17, s1
 8011694:	f993 8000 	ldrsb.w	r8, [r3]
 8011698:	f1b8 3fff 	cmp.w	r8, #4294967295
 801169c:	d030      	beq.n	8011700 <fmod+0x8c>
 801169e:	4632      	mov	r2, r6
 80116a0:	463b      	mov	r3, r7
 80116a2:	4630      	mov	r0, r6
 80116a4:	4639      	mov	r1, r7
 80116a6:	f7f7 f921 	bl	80088ec <__aeabi_dcmpun>
 80116aa:	bb48      	cbnz	r0, 8011700 <fmod+0x8c>
 80116ac:	4622      	mov	r2, r4
 80116ae:	462b      	mov	r3, r5
 80116b0:	4620      	mov	r0, r4
 80116b2:	4629      	mov	r1, r5
 80116b4:	f7f7 f91a 	bl	80088ec <__aeabi_dcmpun>
 80116b8:	4681      	mov	r9, r0
 80116ba:	bb08      	cbnz	r0, 8011700 <fmod+0x8c>
 80116bc:	2200      	movs	r2, #0
 80116be:	2300      	movs	r3, #0
 80116c0:	4630      	mov	r0, r6
 80116c2:	4639      	mov	r1, r7
 80116c4:	f7f7 f8e0 	bl	8008888 <__aeabi_dcmpeq>
 80116c8:	b1d0      	cbz	r0, 8011700 <fmod+0x8c>
 80116ca:	2301      	movs	r3, #1
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	4b1a      	ldr	r3, [pc, #104]	; (8011738 <fmod+0xc4>)
 80116d0:	9301      	str	r3, [sp, #4]
 80116d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80116d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80116da:	f8cd 9020 	str.w	r9, [sp, #32]
 80116de:	f1b8 0f00 	cmp.w	r8, #0
 80116e2:	d116      	bne.n	8011712 <fmod+0x9e>
 80116e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80116e8:	4668      	mov	r0, sp
 80116ea:	f000 fa1d 	bl	8011b28 <matherr>
 80116ee:	b1d8      	cbz	r0, 8011728 <fmod+0xb4>
 80116f0:	9b08      	ldr	r3, [sp, #32]
 80116f2:	b11b      	cbz	r3, 80116fc <fmod+0x88>
 80116f4:	f7ff fb18 	bl	8010d28 <__errno>
 80116f8:	9b08      	ldr	r3, [sp, #32]
 80116fa:	6003      	str	r3, [r0, #0]
 80116fc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011700:	eeb0 0a48 	vmov.f32	s0, s16
 8011704:	eef0 0a68 	vmov.f32	s1, s17
 8011708:	b00b      	add	sp, #44	; 0x2c
 801170a:	ecbd 8b02 	vpop	{d8}
 801170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011712:	2200      	movs	r2, #0
 8011714:	2300      	movs	r3, #0
 8011716:	4610      	mov	r0, r2
 8011718:	4619      	mov	r1, r3
 801171a:	f7f6 ff77 	bl	800860c <__aeabi_ddiv>
 801171e:	f1b8 0f02 	cmp.w	r8, #2
 8011722:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011726:	d1df      	bne.n	80116e8 <fmod+0x74>
 8011728:	f7ff fafe 	bl	8010d28 <__errno>
 801172c:	2321      	movs	r3, #33	; 0x21
 801172e:	6003      	str	r3, [r0, #0]
 8011730:	e7de      	b.n	80116f0 <fmod+0x7c>
 8011732:	bf00      	nop
 8011734:	20000080 	.word	0x20000080
 8011738:	0802548c 	.word	0x0802548c

0801173c <fmodf>:
 801173c:	b5d0      	push	{r4, r6, r7, lr}
 801173e:	ed2d 8b02 	vpush	{d8}
 8011742:	b08a      	sub	sp, #40	; 0x28
 8011744:	eef0 8a40 	vmov.f32	s17, s0
 8011748:	eeb0 8a60 	vmov.f32	s16, s1
 801174c:	f000 f964 	bl	8011a18 <__ieee754_fmodf>
 8011750:	4b26      	ldr	r3, [pc, #152]	; (80117ec <fmodf+0xb0>)
 8011752:	f993 4000 	ldrsb.w	r4, [r3]
 8011756:	1c63      	adds	r3, r4, #1
 8011758:	d035      	beq.n	80117c6 <fmodf+0x8a>
 801175a:	eeb4 8a48 	vcmp.f32	s16, s16
 801175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011762:	d630      	bvs.n	80117c6 <fmodf+0x8a>
 8011764:	eef4 8a68 	vcmp.f32	s17, s17
 8011768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801176c:	d62b      	bvs.n	80117c6 <fmodf+0x8a>
 801176e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011776:	d126      	bne.n	80117c6 <fmodf+0x8a>
 8011778:	2301      	movs	r3, #1
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	4b1c      	ldr	r3, [pc, #112]	; (80117f0 <fmodf+0xb4>)
 801177e:	9301      	str	r3, [sp, #4]
 8011780:	ee18 0a90 	vmov	r0, s17
 8011784:	2300      	movs	r3, #0
 8011786:	9308      	str	r3, [sp, #32]
 8011788:	f7f6 fdbe 	bl	8008308 <__aeabi_f2d>
 801178c:	4606      	mov	r6, r0
 801178e:	460f      	mov	r7, r1
 8011790:	ee18 0a10 	vmov	r0, s16
 8011794:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011798:	f7f6 fdb6 	bl	8008308 <__aeabi_f2d>
 801179c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117a0:	b9ac      	cbnz	r4, 80117ce <fmodf+0x92>
 80117a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80117a6:	4668      	mov	r0, sp
 80117a8:	f000 f9be 	bl	8011b28 <matherr>
 80117ac:	b1c8      	cbz	r0, 80117e2 <fmodf+0xa6>
 80117ae:	9b08      	ldr	r3, [sp, #32]
 80117b0:	b11b      	cbz	r3, 80117ba <fmodf+0x7e>
 80117b2:	f7ff fab9 	bl	8010d28 <__errno>
 80117b6:	9b08      	ldr	r3, [sp, #32]
 80117b8:	6003      	str	r3, [r0, #0]
 80117ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117be:	f7f7 f8d3 	bl	8008968 <__aeabi_d2f>
 80117c2:	ee00 0a10 	vmov	s0, r0
 80117c6:	b00a      	add	sp, #40	; 0x28
 80117c8:	ecbd 8b02 	vpop	{d8}
 80117cc:	bdd0      	pop	{r4, r6, r7, pc}
 80117ce:	2200      	movs	r2, #0
 80117d0:	2300      	movs	r3, #0
 80117d2:	4610      	mov	r0, r2
 80117d4:	4619      	mov	r1, r3
 80117d6:	f7f6 ff19 	bl	800860c <__aeabi_ddiv>
 80117da:	2c02      	cmp	r4, #2
 80117dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80117e0:	d1e1      	bne.n	80117a6 <fmodf+0x6a>
 80117e2:	f7ff faa1 	bl	8010d28 <__errno>
 80117e6:	2321      	movs	r3, #33	; 0x21
 80117e8:	6003      	str	r3, [r0, #0]
 80117ea:	e7e0      	b.n	80117ae <fmodf+0x72>
 80117ec:	20000080 	.word	0x20000080
 80117f0:	08025491 	.word	0x08025491

080117f4 <__ieee754_fmod>:
 80117f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117f8:	ec53 2b11 	vmov	r2, r3, d1
 80117fc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8011800:	ea5e 0402 	orrs.w	r4, lr, r2
 8011804:	ec51 0b10 	vmov	r0, r1, d0
 8011808:	461e      	mov	r6, r3
 801180a:	ee11 5a10 	vmov	r5, s2
 801180e:	4694      	mov	ip, r2
 8011810:	d00c      	beq.n	801182c <__ieee754_fmod+0x38>
 8011812:	4c7a      	ldr	r4, [pc, #488]	; (80119fc <__ieee754_fmod+0x208>)
 8011814:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8011818:	45a0      	cmp	r8, r4
 801181a:	4689      	mov	r9, r1
 801181c:	dc06      	bgt.n	801182c <__ieee754_fmod+0x38>
 801181e:	4254      	negs	r4, r2
 8011820:	4314      	orrs	r4, r2
 8011822:	4f77      	ldr	r7, [pc, #476]	; (8011a00 <__ieee754_fmod+0x20c>)
 8011824:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8011828:	42bc      	cmp	r4, r7
 801182a:	d909      	bls.n	8011840 <__ieee754_fmod+0x4c>
 801182c:	f7f6 fdc4 	bl	80083b8 <__aeabi_dmul>
 8011830:	4602      	mov	r2, r0
 8011832:	460b      	mov	r3, r1
 8011834:	f7f6 feea 	bl	800860c <__aeabi_ddiv>
 8011838:	ec41 0b10 	vmov	d0, r0, r1
 801183c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011840:	45f0      	cmp	r8, lr
 8011842:	ee10 2a10 	vmov	r2, s0
 8011846:	4607      	mov	r7, r0
 8011848:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 801184c:	dc0a      	bgt.n	8011864 <__ieee754_fmod+0x70>
 801184e:	dbf3      	blt.n	8011838 <__ieee754_fmod+0x44>
 8011850:	42a8      	cmp	r0, r5
 8011852:	d3f1      	bcc.n	8011838 <__ieee754_fmod+0x44>
 8011854:	d106      	bne.n	8011864 <__ieee754_fmod+0x70>
 8011856:	496b      	ldr	r1, [pc, #428]	; (8011a04 <__ieee754_fmod+0x210>)
 8011858:	0fe4      	lsrs	r4, r4, #31
 801185a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801185e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011862:	e7e9      	b.n	8011838 <__ieee754_fmod+0x44>
 8011864:	4b68      	ldr	r3, [pc, #416]	; (8011a08 <__ieee754_fmod+0x214>)
 8011866:	4598      	cmp	r8, r3
 8011868:	dc49      	bgt.n	80118fe <__ieee754_fmod+0x10a>
 801186a:	f1b8 0f00 	cmp.w	r8, #0
 801186e:	d13d      	bne.n	80118ec <__ieee754_fmod+0xf8>
 8011870:	4866      	ldr	r0, [pc, #408]	; (8011a0c <__ieee754_fmod+0x218>)
 8011872:	4611      	mov	r1, r2
 8011874:	2900      	cmp	r1, #0
 8011876:	dc36      	bgt.n	80118e6 <__ieee754_fmod+0xf2>
 8011878:	459e      	cmp	lr, r3
 801187a:	dc51      	bgt.n	8011920 <__ieee754_fmod+0x12c>
 801187c:	f1be 0f00 	cmp.w	lr, #0
 8011880:	d145      	bne.n	801190e <__ieee754_fmod+0x11a>
 8011882:	4b62      	ldr	r3, [pc, #392]	; (8011a0c <__ieee754_fmod+0x218>)
 8011884:	4629      	mov	r1, r5
 8011886:	2900      	cmp	r1, #0
 8011888:	dc3e      	bgt.n	8011908 <__ieee754_fmod+0x114>
 801188a:	4961      	ldr	r1, [pc, #388]	; (8011a10 <__ieee754_fmod+0x21c>)
 801188c:	4288      	cmp	r0, r1
 801188e:	db4c      	blt.n	801192a <__ieee754_fmod+0x136>
 8011890:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8011894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011898:	4a5d      	ldr	r2, [pc, #372]	; (8011a10 <__ieee754_fmod+0x21c>)
 801189a:	4293      	cmp	r3, r2
 801189c:	db59      	blt.n	8011952 <__ieee754_fmod+0x15e>
 801189e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80118a2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80118a6:	1ac0      	subs	r0, r0, r3
 80118a8:	1b8a      	subs	r2, r1, r6
 80118aa:	eba7 050c 	sub.w	r5, r7, ip
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d166      	bne.n	8011980 <__ieee754_fmod+0x18c>
 80118b2:	4567      	cmp	r7, ip
 80118b4:	bf38      	it	cc
 80118b6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80118ba:	2a00      	cmp	r2, #0
 80118bc:	bfbc      	itt	lt
 80118be:	463d      	movlt	r5, r7
 80118c0:	460a      	movlt	r2, r1
 80118c2:	ea52 0105 	orrs.w	r1, r2, r5
 80118c6:	d0c6      	beq.n	8011856 <__ieee754_fmod+0x62>
 80118c8:	494f      	ldr	r1, [pc, #316]	; (8011a08 <__ieee754_fmod+0x214>)
 80118ca:	428a      	cmp	r2, r1
 80118cc:	dd6d      	ble.n	80119aa <__ieee754_fmod+0x1b6>
 80118ce:	4950      	ldr	r1, [pc, #320]	; (8011a10 <__ieee754_fmod+0x21c>)
 80118d0:	428b      	cmp	r3, r1
 80118d2:	db70      	blt.n	80119b6 <__ieee754_fmod+0x1c2>
 80118d4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80118d8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80118dc:	4314      	orrs	r4, r2
 80118de:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80118e2:	4628      	mov	r0, r5
 80118e4:	e7a8      	b.n	8011838 <__ieee754_fmod+0x44>
 80118e6:	3801      	subs	r0, #1
 80118e8:	0049      	lsls	r1, r1, #1
 80118ea:	e7c3      	b.n	8011874 <__ieee754_fmod+0x80>
 80118ec:	4848      	ldr	r0, [pc, #288]	; (8011a10 <__ieee754_fmod+0x21c>)
 80118ee:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80118f2:	0049      	lsls	r1, r1, #1
 80118f4:	2900      	cmp	r1, #0
 80118f6:	f100 30ff 	add.w	r0, r0, #4294967295
 80118fa:	dcfa      	bgt.n	80118f2 <__ieee754_fmod+0xfe>
 80118fc:	e7bc      	b.n	8011878 <__ieee754_fmod+0x84>
 80118fe:	ea4f 5028 	mov.w	r0, r8, asr #20
 8011902:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011906:	e7b7      	b.n	8011878 <__ieee754_fmod+0x84>
 8011908:	3b01      	subs	r3, #1
 801190a:	0049      	lsls	r1, r1, #1
 801190c:	e7bb      	b.n	8011886 <__ieee754_fmod+0x92>
 801190e:	4b40      	ldr	r3, [pc, #256]	; (8011a10 <__ieee754_fmod+0x21c>)
 8011910:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8011914:	0049      	lsls	r1, r1, #1
 8011916:	2900      	cmp	r1, #0
 8011918:	f103 33ff 	add.w	r3, r3, #4294967295
 801191c:	dcfa      	bgt.n	8011914 <__ieee754_fmod+0x120>
 801191e:	e7b4      	b.n	801188a <__ieee754_fmod+0x96>
 8011920:	ea4f 532e 	mov.w	r3, lr, asr #20
 8011924:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011928:	e7af      	b.n	801188a <__ieee754_fmod+0x96>
 801192a:	1a0f      	subs	r7, r1, r0
 801192c:	2f1f      	cmp	r7, #31
 801192e:	dc0a      	bgt.n	8011946 <__ieee754_fmod+0x152>
 8011930:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8011934:	fa08 f807 	lsl.w	r8, r8, r7
 8011938:	fa22 f101 	lsr.w	r1, r2, r1
 801193c:	ea41 0108 	orr.w	r1, r1, r8
 8011940:	fa02 f707 	lsl.w	r7, r2, r7
 8011944:	e7a8      	b.n	8011898 <__ieee754_fmod+0xa4>
 8011946:	4933      	ldr	r1, [pc, #204]	; (8011a14 <__ieee754_fmod+0x220>)
 8011948:	1a09      	subs	r1, r1, r0
 801194a:	fa02 f101 	lsl.w	r1, r2, r1
 801194e:	2700      	movs	r7, #0
 8011950:	e7a2      	b.n	8011898 <__ieee754_fmod+0xa4>
 8011952:	eba2 0c03 	sub.w	ip, r2, r3
 8011956:	f1bc 0f1f 	cmp.w	ip, #31
 801195a:	dc0a      	bgt.n	8011972 <__ieee754_fmod+0x17e>
 801195c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8011960:	fa0e fe0c 	lsl.w	lr, lr, ip
 8011964:	fa25 f606 	lsr.w	r6, r5, r6
 8011968:	ea46 060e 	orr.w	r6, r6, lr
 801196c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8011970:	e799      	b.n	80118a6 <__ieee754_fmod+0xb2>
 8011972:	4e28      	ldr	r6, [pc, #160]	; (8011a14 <__ieee754_fmod+0x220>)
 8011974:	1af6      	subs	r6, r6, r3
 8011976:	fa05 f606 	lsl.w	r6, r5, r6
 801197a:	f04f 0c00 	mov.w	ip, #0
 801197e:	e792      	b.n	80118a6 <__ieee754_fmod+0xb2>
 8011980:	4567      	cmp	r7, ip
 8011982:	bf38      	it	cc
 8011984:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8011988:	2a00      	cmp	r2, #0
 801198a:	da05      	bge.n	8011998 <__ieee754_fmod+0x1a4>
 801198c:	0ffa      	lsrs	r2, r7, #31
 801198e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011992:	007f      	lsls	r7, r7, #1
 8011994:	3801      	subs	r0, #1
 8011996:	e787      	b.n	80118a8 <__ieee754_fmod+0xb4>
 8011998:	ea52 0105 	orrs.w	r1, r2, r5
 801199c:	f43f af5b 	beq.w	8011856 <__ieee754_fmod+0x62>
 80119a0:	0fe9      	lsrs	r1, r5, #31
 80119a2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80119a6:	006f      	lsls	r7, r5, #1
 80119a8:	e7f4      	b.n	8011994 <__ieee754_fmod+0x1a0>
 80119aa:	0fe8      	lsrs	r0, r5, #31
 80119ac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80119b0:	006d      	lsls	r5, r5, #1
 80119b2:	3b01      	subs	r3, #1
 80119b4:	e789      	b.n	80118ca <__ieee754_fmod+0xd6>
 80119b6:	1ac9      	subs	r1, r1, r3
 80119b8:	2914      	cmp	r1, #20
 80119ba:	dc0a      	bgt.n	80119d2 <__ieee754_fmod+0x1de>
 80119bc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80119c0:	fa02 f303 	lsl.w	r3, r2, r3
 80119c4:	40cd      	lsrs	r5, r1
 80119c6:	432b      	orrs	r3, r5
 80119c8:	410a      	asrs	r2, r1
 80119ca:	ea42 0104 	orr.w	r1, r2, r4
 80119ce:	4618      	mov	r0, r3
 80119d0:	e732      	b.n	8011838 <__ieee754_fmod+0x44>
 80119d2:	291f      	cmp	r1, #31
 80119d4:	dc07      	bgt.n	80119e6 <__ieee754_fmod+0x1f2>
 80119d6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80119da:	40cd      	lsrs	r5, r1
 80119dc:	fa02 f303 	lsl.w	r3, r2, r3
 80119e0:	432b      	orrs	r3, r5
 80119e2:	4622      	mov	r2, r4
 80119e4:	e7f1      	b.n	80119ca <__ieee754_fmod+0x1d6>
 80119e6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80119ea:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80119ee:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80119f2:	33e2      	adds	r3, #226	; 0xe2
 80119f4:	fa42 f303 	asr.w	r3, r2, r3
 80119f8:	e7f3      	b.n	80119e2 <__ieee754_fmod+0x1ee>
 80119fa:	bf00      	nop
 80119fc:	7fefffff 	.word	0x7fefffff
 8011a00:	7ff00000 	.word	0x7ff00000
 8011a04:	08025498 	.word	0x08025498
 8011a08:	000fffff 	.word	0x000fffff
 8011a0c:	fffffbed 	.word	0xfffffbed
 8011a10:	fffffc02 	.word	0xfffffc02
 8011a14:	fffffbe2 	.word	0xfffffbe2

08011a18 <__ieee754_fmodf>:
 8011a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a1a:	ee10 6a90 	vmov	r6, s1
 8011a1e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8011a22:	ee10 3a10 	vmov	r3, s0
 8011a26:	d009      	beq.n	8011a3c <__ieee754_fmodf+0x24>
 8011a28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011a2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011a30:	ee10 7a10 	vmov	r7, s0
 8011a34:	da02      	bge.n	8011a3c <__ieee754_fmodf+0x24>
 8011a36:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011a3a:	dd0a      	ble.n	8011a52 <__ieee754_fmodf+0x3a>
 8011a3c:	ee07 3a90 	vmov	s15, r3
 8011a40:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8011a44:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8011a48:	ee17 3a90 	vmov	r3, s15
 8011a4c:	ee00 3a10 	vmov	s0, r3
 8011a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a52:	42a9      	cmp	r1, r5
 8011a54:	dbfa      	blt.n	8011a4c <__ieee754_fmodf+0x34>
 8011a56:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8011a5a:	d105      	bne.n	8011a68 <__ieee754_fmodf+0x50>
 8011a5c:	4a30      	ldr	r2, [pc, #192]	; (8011b20 <__ieee754_fmodf+0x108>)
 8011a5e:	0fe3      	lsrs	r3, r4, #31
 8011a60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	e7f1      	b.n	8011a4c <__ieee754_fmodf+0x34>
 8011a68:	4b2e      	ldr	r3, [pc, #184]	; (8011b24 <__ieee754_fmodf+0x10c>)
 8011a6a:	4299      	cmp	r1, r3
 8011a6c:	dc3e      	bgt.n	8011aec <__ieee754_fmodf+0xd4>
 8011a6e:	020a      	lsls	r2, r1, #8
 8011a70:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011a74:	2a00      	cmp	r2, #0
 8011a76:	dc36      	bgt.n	8011ae6 <__ieee754_fmodf+0xce>
 8011a78:	429d      	cmp	r5, r3
 8011a7a:	dc3a      	bgt.n	8011af2 <__ieee754_fmodf+0xda>
 8011a7c:	022b      	lsls	r3, r5, #8
 8011a7e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	f102 32ff 	add.w	r2, r2, #4294967295
 8011a88:	d5fb      	bpl.n	8011a82 <__ieee754_fmodf+0x6a>
 8011a8a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011a8e:	bfbb      	ittet	lt
 8011a90:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8011a94:	1a1b      	sublt	r3, r3, r0
 8011a96:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8011a9a:	4099      	lsllt	r1, r3
 8011a9c:	bfa8      	it	ge
 8011a9e:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8011aa2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8011aa6:	bfb5      	itete	lt
 8011aa8:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8011aac:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8011ab0:	1a9b      	sublt	r3, r3, r2
 8011ab2:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8011ab6:	bfb8      	it	lt
 8011ab8:	409d      	lsllt	r5, r3
 8011aba:	1a80      	subs	r0, r0, r2
 8011abc:	1b4b      	subs	r3, r1, r5
 8011abe:	b9d8      	cbnz	r0, 8011af8 <__ieee754_fmodf+0xe0>
 8011ac0:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8011ac4:	bf28      	it	cs
 8011ac6:	460b      	movcs	r3, r1
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d0c7      	beq.n	8011a5c <__ieee754_fmodf+0x44>
 8011acc:	4915      	ldr	r1, [pc, #84]	; (8011b24 <__ieee754_fmodf+0x10c>)
 8011ace:	428b      	cmp	r3, r1
 8011ad0:	dd1a      	ble.n	8011b08 <__ieee754_fmodf+0xf0>
 8011ad2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8011ad6:	db1a      	blt.n	8011b0e <__ieee754_fmodf+0xf6>
 8011ad8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011adc:	4323      	orrs	r3, r4
 8011ade:	327f      	adds	r2, #127	; 0x7f
 8011ae0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011ae4:	e7b2      	b.n	8011a4c <__ieee754_fmodf+0x34>
 8011ae6:	3801      	subs	r0, #1
 8011ae8:	0052      	lsls	r2, r2, #1
 8011aea:	e7c3      	b.n	8011a74 <__ieee754_fmodf+0x5c>
 8011aec:	15c8      	asrs	r0, r1, #23
 8011aee:	387f      	subs	r0, #127	; 0x7f
 8011af0:	e7c2      	b.n	8011a78 <__ieee754_fmodf+0x60>
 8011af2:	15ea      	asrs	r2, r5, #23
 8011af4:	3a7f      	subs	r2, #127	; 0x7f
 8011af6:	e7c8      	b.n	8011a8a <__ieee754_fmodf+0x72>
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	da02      	bge.n	8011b02 <__ieee754_fmodf+0xea>
 8011afc:	0049      	lsls	r1, r1, #1
 8011afe:	3801      	subs	r0, #1
 8011b00:	e7dc      	b.n	8011abc <__ieee754_fmodf+0xa4>
 8011b02:	d0ab      	beq.n	8011a5c <__ieee754_fmodf+0x44>
 8011b04:	0059      	lsls	r1, r3, #1
 8011b06:	e7fa      	b.n	8011afe <__ieee754_fmodf+0xe6>
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	3a01      	subs	r2, #1
 8011b0c:	e7df      	b.n	8011ace <__ieee754_fmodf+0xb6>
 8011b0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011b12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011b16:	3282      	adds	r2, #130	; 0x82
 8011b18:	4113      	asrs	r3, r2
 8011b1a:	4323      	orrs	r3, r4
 8011b1c:	e796      	b.n	8011a4c <__ieee754_fmodf+0x34>
 8011b1e:	bf00      	nop
 8011b20:	080254a8 	.word	0x080254a8
 8011b24:	007fffff 	.word	0x007fffff

08011b28 <matherr>:
 8011b28:	2000      	movs	r0, #0
 8011b2a:	4770      	bx	lr

08011b2c <_init>:
 8011b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2e:	bf00      	nop
 8011b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b32:	bc08      	pop	{r3}
 8011b34:	469e      	mov	lr, r3
 8011b36:	4770      	bx	lr

08011b38 <_fini>:
 8011b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b3a:	bf00      	nop
 8011b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b3e:	bc08      	pop	{r3}
 8011b40:	469e      	mov	lr, r3
 8011b42:	4770      	bx	lr
