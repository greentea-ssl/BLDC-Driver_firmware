
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000a754  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013a70  08012754  08012754  00022754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080261c4  080261c4  00040078  2**0
                  CONTENTS
  5 .ARM          00000008  080261c4  080261c4  000361c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080261cc  080261cc  00040078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080261cc  080261cc  000361cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080261d0  080261d0  000361d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000078  20000000  080261d4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000045f0  20000078  0802624c  00040078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004668  0802624c  00044668  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e86a  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004289  00000000  00000000  0005e912  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001540  00000000  00000000  00062ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001310  00000000  00000000  000640e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002688e  00000000  00000000  000653f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014938  00000000  00000000  0008bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000da75e  00000000  00000000  000a05b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017ad14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f28  00000000  00000000  0017ad90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000078 	.word	0x20000078
 800801c:	00000000 	.word	0x00000000
 8008020:	0801273c 	.word	0x0801273c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	2000007c 	.word	0x2000007c
 800803c:	0801273c 	.word	0x0801273c

08008040 <memchr>:
 8008040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008044:	2a10      	cmp	r2, #16
 8008046:	db2b      	blt.n	80080a0 <memchr+0x60>
 8008048:	f010 0f07 	tst.w	r0, #7
 800804c:	d008      	beq.n	8008060 <memchr+0x20>
 800804e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008052:	3a01      	subs	r2, #1
 8008054:	428b      	cmp	r3, r1
 8008056:	d02d      	beq.n	80080b4 <memchr+0x74>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	b342      	cbz	r2, 80080b0 <memchr+0x70>
 800805e:	d1f6      	bne.n	800804e <memchr+0xe>
 8008060:	b4f0      	push	{r4, r5, r6, r7}
 8008062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800806a:	f022 0407 	bic.w	r4, r2, #7
 800806e:	f07f 0700 	mvns.w	r7, #0
 8008072:	2300      	movs	r3, #0
 8008074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008078:	3c08      	subs	r4, #8
 800807a:	ea85 0501 	eor.w	r5, r5, r1
 800807e:	ea86 0601 	eor.w	r6, r6, r1
 8008082:	fa85 f547 	uadd8	r5, r5, r7
 8008086:	faa3 f587 	sel	r5, r3, r7
 800808a:	fa86 f647 	uadd8	r6, r6, r7
 800808e:	faa5 f687 	sel	r6, r5, r7
 8008092:	b98e      	cbnz	r6, 80080b8 <memchr+0x78>
 8008094:	d1ee      	bne.n	8008074 <memchr+0x34>
 8008096:	bcf0      	pop	{r4, r5, r6, r7}
 8008098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800809c:	f002 0207 	and.w	r2, r2, #7
 80080a0:	b132      	cbz	r2, 80080b0 <memchr+0x70>
 80080a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080a6:	3a01      	subs	r2, #1
 80080a8:	ea83 0301 	eor.w	r3, r3, r1
 80080ac:	b113      	cbz	r3, 80080b4 <memchr+0x74>
 80080ae:	d1f8      	bne.n	80080a2 <memchr+0x62>
 80080b0:	2000      	movs	r0, #0
 80080b2:	4770      	bx	lr
 80080b4:	3801      	subs	r0, #1
 80080b6:	4770      	bx	lr
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	bf06      	itte	eq
 80080bc:	4635      	moveq	r5, r6
 80080be:	3803      	subeq	r0, #3
 80080c0:	3807      	subne	r0, #7
 80080c2:	f015 0f01 	tst.w	r5, #1
 80080c6:	d107      	bne.n	80080d8 <memchr+0x98>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080ce:	bf02      	ittt	eq
 80080d0:	3001      	addeq	r0, #1
 80080d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080d6:	3001      	addeq	r0, #1
 80080d8:	bcf0      	pop	{r4, r5, r6, r7}
 80080da:	3801      	subs	r0, #1
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <__aeabi_drsub>:
 80080e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080e4:	e002      	b.n	80080ec <__adddf3>
 80080e6:	bf00      	nop

080080e8 <__aeabi_dsub>:
 80080e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080ec <__adddf3>:
 80080ec:	b530      	push	{r4, r5, lr}
 80080ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080f6:	ea94 0f05 	teq	r4, r5
 80080fa:	bf08      	it	eq
 80080fc:	ea90 0f02 	teqeq	r0, r2
 8008100:	bf1f      	itttt	ne
 8008102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008106:	ea55 0c02 	orrsne.w	ip, r5, r2
 800810a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800810e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008112:	f000 80e2 	beq.w	80082da <__adddf3+0x1ee>
 8008116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800811a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800811e:	bfb8      	it	lt
 8008120:	426d      	neglt	r5, r5
 8008122:	dd0c      	ble.n	800813e <__adddf3+0x52>
 8008124:	442c      	add	r4, r5
 8008126:	ea80 0202 	eor.w	r2, r0, r2
 800812a:	ea81 0303 	eor.w	r3, r1, r3
 800812e:	ea82 0000 	eor.w	r0, r2, r0
 8008132:	ea83 0101 	eor.w	r1, r3, r1
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	2d36      	cmp	r5, #54	; 0x36
 8008140:	bf88      	it	hi
 8008142:	bd30      	pophi	{r4, r5, pc}
 8008144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800814c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008154:	d002      	beq.n	800815c <__adddf3+0x70>
 8008156:	4240      	negs	r0, r0
 8008158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800815c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008168:	d002      	beq.n	8008170 <__adddf3+0x84>
 800816a:	4252      	negs	r2, r2
 800816c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008170:	ea94 0f05 	teq	r4, r5
 8008174:	f000 80a7 	beq.w	80082c6 <__adddf3+0x1da>
 8008178:	f1a4 0401 	sub.w	r4, r4, #1
 800817c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008180:	db0d      	blt.n	800819e <__adddf3+0xb2>
 8008182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008186:	fa22 f205 	lsr.w	r2, r2, r5
 800818a:	1880      	adds	r0, r0, r2
 800818c:	f141 0100 	adc.w	r1, r1, #0
 8008190:	fa03 f20e 	lsl.w	r2, r3, lr
 8008194:	1880      	adds	r0, r0, r2
 8008196:	fa43 f305 	asr.w	r3, r3, r5
 800819a:	4159      	adcs	r1, r3
 800819c:	e00e      	b.n	80081bc <__adddf3+0xd0>
 800819e:	f1a5 0520 	sub.w	r5, r5, #32
 80081a2:	f10e 0e20 	add.w	lr, lr, #32
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081ac:	bf28      	it	cs
 80081ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081b2:	fa43 f305 	asr.w	r3, r3, r5
 80081b6:	18c0      	adds	r0, r0, r3
 80081b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081c0:	d507      	bpl.n	80081d2 <__adddf3+0xe6>
 80081c2:	f04f 0e00 	mov.w	lr, #0
 80081c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80081d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081d6:	d31b      	bcc.n	8008210 <__adddf3+0x124>
 80081d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081dc:	d30c      	bcc.n	80081f8 <__adddf3+0x10c>
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081e8:	f104 0401 	add.w	r4, r4, #1
 80081ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081f4:	f080 809a 	bcs.w	800832c <__adddf3+0x240>
 80081f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081fc:	bf08      	it	eq
 80081fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008202:	f150 0000 	adcs.w	r0, r0, #0
 8008206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800820a:	ea41 0105 	orr.w	r1, r1, r5
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008214:	4140      	adcs	r0, r0
 8008216:	eb41 0101 	adc.w	r1, r1, r1
 800821a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800821e:	f1a4 0401 	sub.w	r4, r4, #1
 8008222:	d1e9      	bne.n	80081f8 <__adddf3+0x10c>
 8008224:	f091 0f00 	teq	r1, #0
 8008228:	bf04      	itt	eq
 800822a:	4601      	moveq	r1, r0
 800822c:	2000      	moveq	r0, #0
 800822e:	fab1 f381 	clz	r3, r1
 8008232:	bf08      	it	eq
 8008234:	3320      	addeq	r3, #32
 8008236:	f1a3 030b 	sub.w	r3, r3, #11
 800823a:	f1b3 0220 	subs.w	r2, r3, #32
 800823e:	da0c      	bge.n	800825a <__adddf3+0x16e>
 8008240:	320c      	adds	r2, #12
 8008242:	dd08      	ble.n	8008256 <__adddf3+0x16a>
 8008244:	f102 0c14 	add.w	ip, r2, #20
 8008248:	f1c2 020c 	rsb	r2, r2, #12
 800824c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008250:	fa21 f102 	lsr.w	r1, r1, r2
 8008254:	e00c      	b.n	8008270 <__adddf3+0x184>
 8008256:	f102 0214 	add.w	r2, r2, #20
 800825a:	bfd8      	it	le
 800825c:	f1c2 0c20 	rsble	ip, r2, #32
 8008260:	fa01 f102 	lsl.w	r1, r1, r2
 8008264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008268:	bfdc      	itt	le
 800826a:	ea41 010c 	orrle.w	r1, r1, ip
 800826e:	4090      	lslle	r0, r2
 8008270:	1ae4      	subs	r4, r4, r3
 8008272:	bfa2      	ittt	ge
 8008274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008278:	4329      	orrge	r1, r5
 800827a:	bd30      	popge	{r4, r5, pc}
 800827c:	ea6f 0404 	mvn.w	r4, r4
 8008280:	3c1f      	subs	r4, #31
 8008282:	da1c      	bge.n	80082be <__adddf3+0x1d2>
 8008284:	340c      	adds	r4, #12
 8008286:	dc0e      	bgt.n	80082a6 <__adddf3+0x1ba>
 8008288:	f104 0414 	add.w	r4, r4, #20
 800828c:	f1c4 0220 	rsb	r2, r4, #32
 8008290:	fa20 f004 	lsr.w	r0, r0, r4
 8008294:	fa01 f302 	lsl.w	r3, r1, r2
 8008298:	ea40 0003 	orr.w	r0, r0, r3
 800829c:	fa21 f304 	lsr.w	r3, r1, r4
 80082a0:	ea45 0103 	orr.w	r1, r5, r3
 80082a4:	bd30      	pop	{r4, r5, pc}
 80082a6:	f1c4 040c 	rsb	r4, r4, #12
 80082aa:	f1c4 0220 	rsb	r2, r4, #32
 80082ae:	fa20 f002 	lsr.w	r0, r0, r2
 80082b2:	fa01 f304 	lsl.w	r3, r1, r4
 80082b6:	ea40 0003 	orr.w	r0, r0, r3
 80082ba:	4629      	mov	r1, r5
 80082bc:	bd30      	pop	{r4, r5, pc}
 80082be:	fa21 f004 	lsr.w	r0, r1, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	bd30      	pop	{r4, r5, pc}
 80082c6:	f094 0f00 	teq	r4, #0
 80082ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082ce:	bf06      	itte	eq
 80082d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082d4:	3401      	addeq	r4, #1
 80082d6:	3d01      	subne	r5, #1
 80082d8:	e74e      	b.n	8008178 <__adddf3+0x8c>
 80082da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082de:	bf18      	it	ne
 80082e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082e4:	d029      	beq.n	800833a <__adddf3+0x24e>
 80082e6:	ea94 0f05 	teq	r4, r5
 80082ea:	bf08      	it	eq
 80082ec:	ea90 0f02 	teqeq	r0, r2
 80082f0:	d005      	beq.n	80082fe <__adddf3+0x212>
 80082f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80082f6:	bf04      	itt	eq
 80082f8:	4619      	moveq	r1, r3
 80082fa:	4610      	moveq	r0, r2
 80082fc:	bd30      	pop	{r4, r5, pc}
 80082fe:	ea91 0f03 	teq	r1, r3
 8008302:	bf1e      	ittt	ne
 8008304:	2100      	movne	r1, #0
 8008306:	2000      	movne	r0, #0
 8008308:	bd30      	popne	{r4, r5, pc}
 800830a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800830e:	d105      	bne.n	800831c <__adddf3+0x230>
 8008310:	0040      	lsls	r0, r0, #1
 8008312:	4149      	adcs	r1, r1
 8008314:	bf28      	it	cs
 8008316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008320:	bf3c      	itt	cc
 8008322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008326:	bd30      	popcc	{r4, r5, pc}
 8008328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800832c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800833e:	bf1a      	itte	ne
 8008340:	4619      	movne	r1, r3
 8008342:	4610      	movne	r0, r2
 8008344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008348:	bf1c      	itt	ne
 800834a:	460b      	movne	r3, r1
 800834c:	4602      	movne	r2, r0
 800834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008352:	bf06      	itte	eq
 8008354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008358:	ea91 0f03 	teqeq	r1, r3
 800835c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008360:	bd30      	pop	{r4, r5, pc}
 8008362:	bf00      	nop

08008364 <__aeabi_ui2d>:
 8008364:	f090 0f00 	teq	r0, #0
 8008368:	bf04      	itt	eq
 800836a:	2100      	moveq	r1, #0
 800836c:	4770      	bxeq	lr
 800836e:	b530      	push	{r4, r5, lr}
 8008370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008378:	f04f 0500 	mov.w	r5, #0
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	e750      	b.n	8008224 <__adddf3+0x138>
 8008382:	bf00      	nop

08008384 <__aeabi_i2d>:
 8008384:	f090 0f00 	teq	r0, #0
 8008388:	bf04      	itt	eq
 800838a:	2100      	moveq	r1, #0
 800838c:	4770      	bxeq	lr
 800838e:	b530      	push	{r4, r5, lr}
 8008390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800839c:	bf48      	it	mi
 800839e:	4240      	negmi	r0, r0
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	e73e      	b.n	8008224 <__adddf3+0x138>
 80083a6:	bf00      	nop

080083a8 <__aeabi_f2d>:
 80083a8:	0042      	lsls	r2, r0, #1
 80083aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80083b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083b6:	bf1f      	itttt	ne
 80083b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083c4:	4770      	bxne	lr
 80083c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083ca:	bf08      	it	eq
 80083cc:	4770      	bxeq	lr
 80083ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083d8:	4770      	bxeq	lr
 80083da:	b530      	push	{r4, r5, lr}
 80083dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083e8:	e71c      	b.n	8008224 <__adddf3+0x138>
 80083ea:	bf00      	nop

080083ec <__aeabi_ul2d>:
 80083ec:	ea50 0201 	orrs.w	r2, r0, r1
 80083f0:	bf08      	it	eq
 80083f2:	4770      	bxeq	lr
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	f04f 0500 	mov.w	r5, #0
 80083fa:	e00a      	b.n	8008412 <__aeabi_l2d+0x16>

080083fc <__aeabi_l2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800840a:	d502      	bpl.n	8008412 <__aeabi_l2d+0x16>
 800840c:	4240      	negs	r0, r0
 800840e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800841a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800841e:	f43f aed8 	beq.w	80081d2 <__adddf3+0xe6>
 8008422:	f04f 0203 	mov.w	r2, #3
 8008426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800842a:	bf18      	it	ne
 800842c:	3203      	addne	r2, #3
 800842e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008432:	bf18      	it	ne
 8008434:	3203      	addne	r2, #3
 8008436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800843a:	f1c2 0320 	rsb	r3, r2, #32
 800843e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008442:	fa20 f002 	lsr.w	r0, r0, r2
 8008446:	fa01 fe03 	lsl.w	lr, r1, r3
 800844a:	ea40 000e 	orr.w	r0, r0, lr
 800844e:	fa21 f102 	lsr.w	r1, r1, r2
 8008452:	4414      	add	r4, r2
 8008454:	e6bd      	b.n	80081d2 <__adddf3+0xe6>
 8008456:	bf00      	nop

08008458 <__aeabi_dmul>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800845e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008466:	bf1d      	ittte	ne
 8008468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800846c:	ea94 0f0c 	teqne	r4, ip
 8008470:	ea95 0f0c 	teqne	r5, ip
 8008474:	f000 f8de 	bleq	8008634 <__aeabi_dmul+0x1dc>
 8008478:	442c      	add	r4, r5
 800847a:	ea81 0603 	eor.w	r6, r1, r3
 800847e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800848a:	bf18      	it	ne
 800848c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	d038      	beq.n	800850c <__aeabi_dmul+0xb4>
 800849a:	fba0 ce02 	umull	ip, lr, r0, r2
 800849e:	f04f 0500 	mov.w	r5, #0
 80084a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084ae:	f04f 0600 	mov.w	r6, #0
 80084b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084b6:	f09c 0f00 	teq	ip, #0
 80084ba:	bf18      	it	ne
 80084bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084cc:	d204      	bcs.n	80084d8 <__aeabi_dmul+0x80>
 80084ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084d2:	416d      	adcs	r5, r5
 80084d4:	eb46 0606 	adc.w	r6, r6, r6
 80084d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084f0:	bf88      	it	hi
 80084f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084f6:	d81e      	bhi.n	8008536 <__aeabi_dmul+0xde>
 80084f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084fc:	bf08      	it	eq
 80084fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008502:	f150 0000 	adcs.w	r0, r0, #0
 8008506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008510:	ea46 0101 	orr.w	r1, r6, r1
 8008514:	ea40 0002 	orr.w	r0, r0, r2
 8008518:	ea81 0103 	eor.w	r1, r1, r3
 800851c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008520:	bfc2      	ittt	gt
 8008522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800852a:	bd70      	popgt	{r4, r5, r6, pc}
 800852c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008530:	f04f 0e00 	mov.w	lr, #0
 8008534:	3c01      	subs	r4, #1
 8008536:	f300 80ab 	bgt.w	8008690 <__aeabi_dmul+0x238>
 800853a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800853e:	bfde      	ittt	le
 8008540:	2000      	movle	r0, #0
 8008542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008546:	bd70      	pople	{r4, r5, r6, pc}
 8008548:	f1c4 0400 	rsb	r4, r4, #0
 800854c:	3c20      	subs	r4, #32
 800854e:	da35      	bge.n	80085bc <__aeabi_dmul+0x164>
 8008550:	340c      	adds	r4, #12
 8008552:	dc1b      	bgt.n	800858c <__aeabi_dmul+0x134>
 8008554:	f104 0414 	add.w	r4, r4, #20
 8008558:	f1c4 0520 	rsb	r5, r4, #32
 800855c:	fa00 f305 	lsl.w	r3, r0, r5
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f205 	lsl.w	r2, r1, r5
 8008568:	ea40 0002 	orr.w	r0, r0, r2
 800856c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008578:	fa21 f604 	lsr.w	r6, r1, r4
 800857c:	eb42 0106 	adc.w	r1, r2, r6
 8008580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008584:	bf08      	it	eq
 8008586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f1c4 040c 	rsb	r4, r4, #12
 8008590:	f1c4 0520 	rsb	r5, r4, #32
 8008594:	fa00 f304 	lsl.w	r3, r0, r4
 8008598:	fa20 f005 	lsr.w	r0, r0, r5
 800859c:	fa01 f204 	lsl.w	r2, r1, r4
 80085a0:	ea40 0002 	orr.w	r0, r0, r2
 80085a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085ac:	f141 0100 	adc.w	r1, r1, #0
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 0520 	rsb	r5, r4, #32
 80085c0:	fa00 f205 	lsl.w	r2, r0, r5
 80085c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085c8:	fa20 f304 	lsr.w	r3, r0, r4
 80085cc:	fa01 f205 	lsl.w	r2, r1, r5
 80085d0:	ea43 0302 	orr.w	r3, r3, r2
 80085d4:	fa21 f004 	lsr.w	r0, r1, r4
 80085d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085dc:	fa21 f204 	lsr.w	r2, r1, r4
 80085e0:	ea20 0002 	bic.w	r0, r0, r2
 80085e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085ec:	bf08      	it	eq
 80085ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	f094 0f00 	teq	r4, #0
 80085f8:	d10f      	bne.n	800861a <__aeabi_dmul+0x1c2>
 80085fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085fe:	0040      	lsls	r0, r0, #1
 8008600:	eb41 0101 	adc.w	r1, r1, r1
 8008604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008608:	bf08      	it	eq
 800860a:	3c01      	subeq	r4, #1
 800860c:	d0f7      	beq.n	80085fe <__aeabi_dmul+0x1a6>
 800860e:	ea41 0106 	orr.w	r1, r1, r6
 8008612:	f095 0f00 	teq	r5, #0
 8008616:	bf18      	it	ne
 8008618:	4770      	bxne	lr
 800861a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800861e:	0052      	lsls	r2, r2, #1
 8008620:	eb43 0303 	adc.w	r3, r3, r3
 8008624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008628:	bf08      	it	eq
 800862a:	3d01      	subeq	r5, #1
 800862c:	d0f7      	beq.n	800861e <__aeabi_dmul+0x1c6>
 800862e:	ea43 0306 	orr.w	r3, r3, r6
 8008632:	4770      	bx	lr
 8008634:	ea94 0f0c 	teq	r4, ip
 8008638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800863c:	bf18      	it	ne
 800863e:	ea95 0f0c 	teqne	r5, ip
 8008642:	d00c      	beq.n	800865e <__aeabi_dmul+0x206>
 8008644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008648:	bf18      	it	ne
 800864a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800864e:	d1d1      	bne.n	80085f4 <__aeabi_dmul+0x19c>
 8008650:	ea81 0103 	eor.w	r1, r1, r3
 8008654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008658:	f04f 0000 	mov.w	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008662:	bf06      	itte	eq
 8008664:	4610      	moveq	r0, r2
 8008666:	4619      	moveq	r1, r3
 8008668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800866c:	d019      	beq.n	80086a2 <__aeabi_dmul+0x24a>
 800866e:	ea94 0f0c 	teq	r4, ip
 8008672:	d102      	bne.n	800867a <__aeabi_dmul+0x222>
 8008674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008678:	d113      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800867a:	ea95 0f0c 	teq	r5, ip
 800867e:	d105      	bne.n	800868c <__aeabi_dmul+0x234>
 8008680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008684:	bf1c      	itt	ne
 8008686:	4610      	movne	r0, r2
 8008688:	4619      	movne	r1, r3
 800868a:	d10a      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800868c:	ea81 0103 	eor.w	r1, r1, r3
 8008690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869c:	f04f 0000 	mov.w	r0, #0
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086aa:	bd70      	pop	{r4, r5, r6, pc}

080086ac <__aeabi_ddiv>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ba:	bf1d      	ittte	ne
 80086bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086c0:	ea94 0f0c 	teqne	r4, ip
 80086c4:	ea95 0f0c 	teqne	r5, ip
 80086c8:	f000 f8a7 	bleq	800881a <__aeabi_ddiv+0x16e>
 80086cc:	eba4 0405 	sub.w	r4, r4, r5
 80086d0:	ea81 0e03 	eor.w	lr, r1, r3
 80086d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086dc:	f000 8088 	beq.w	80087f0 <__aeabi_ddiv+0x144>
 80086e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008704:	429d      	cmp	r5, r3
 8008706:	bf08      	it	eq
 8008708:	4296      	cmpeq	r6, r2
 800870a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800870e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008712:	d202      	bcs.n	800871a <__aeabi_ddiv+0x6e>
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	ea4f 0232 	mov.w	r2, r2, rrx
 800871a:	1ab6      	subs	r6, r6, r2
 800871c:	eb65 0503 	sbc.w	r5, r5, r3
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	ea4f 0232 	mov.w	r2, r2, rrx
 8008726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800872a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800872e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008736:	bf22      	ittt	cs
 8008738:	1ab6      	subcs	r6, r6, r2
 800873a:	4675      	movcs	r5, lr
 800873c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	ea4f 0232 	mov.w	r2, r2, rrx
 8008746:	ebb6 0e02 	subs.w	lr, r6, r2
 800874a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800874e:	bf22      	ittt	cs
 8008750:	1ab6      	subcs	r6, r6, r2
 8008752:	4675      	movcs	r5, lr
 8008754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	ea4f 0232 	mov.w	r2, r2, rrx
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008788:	ea55 0e06 	orrs.w	lr, r5, r6
 800878c:	d018      	beq.n	80087c0 <__aeabi_ddiv+0x114>
 800878e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800879a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800879e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087aa:	d1c0      	bne.n	800872e <__aeabi_ddiv+0x82>
 80087ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087b0:	d10b      	bne.n	80087ca <__aeabi_ddiv+0x11e>
 80087b2:	ea41 0100 	orr.w	r1, r1, r0
 80087b6:	f04f 0000 	mov.w	r0, #0
 80087ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087be:	e7b6      	b.n	800872e <__aeabi_ddiv+0x82>
 80087c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c4:	bf04      	itt	eq
 80087c6:	4301      	orreq	r1, r0
 80087c8:	2000      	moveq	r0, #0
 80087ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087ce:	bf88      	it	hi
 80087d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087d4:	f63f aeaf 	bhi.w	8008536 <__aeabi_dmul+0xde>
 80087d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087dc:	bf04      	itt	eq
 80087de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087e6:	f150 0000 	adcs.w	r0, r0, #0
 80087ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087fc:	bfc2      	ittt	gt
 80087fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008806:	bd70      	popgt	{r4, r5, r6, pc}
 8008808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800880c:	f04f 0e00 	mov.w	lr, #0
 8008810:	3c01      	subs	r4, #1
 8008812:	e690      	b.n	8008536 <__aeabi_dmul+0xde>
 8008814:	ea45 0e06 	orr.w	lr, r5, r6
 8008818:	e68d      	b.n	8008536 <__aeabi_dmul+0xde>
 800881a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	bf08      	it	eq
 8008824:	ea95 0f0c 	teqeq	r5, ip
 8008828:	f43f af3b 	beq.w	80086a2 <__aeabi_dmul+0x24a>
 800882c:	ea94 0f0c 	teq	r4, ip
 8008830:	d10a      	bne.n	8008848 <__aeabi_ddiv+0x19c>
 8008832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008836:	f47f af34 	bne.w	80086a2 <__aeabi_dmul+0x24a>
 800883a:	ea95 0f0c 	teq	r5, ip
 800883e:	f47f af25 	bne.w	800868c <__aeabi_dmul+0x234>
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	e72c      	b.n	80086a2 <__aeabi_dmul+0x24a>
 8008848:	ea95 0f0c 	teq	r5, ip
 800884c:	d106      	bne.n	800885c <__aeabi_ddiv+0x1b0>
 800884e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008852:	f43f aefd 	beq.w	8008650 <__aeabi_dmul+0x1f8>
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	e722      	b.n	80086a2 <__aeabi_dmul+0x24a>
 800885c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008860:	bf18      	it	ne
 8008862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008866:	f47f aec5 	bne.w	80085f4 <__aeabi_dmul+0x19c>
 800886a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800886e:	f47f af0d 	bne.w	800868c <__aeabi_dmul+0x234>
 8008872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008876:	f47f aeeb 	bne.w	8008650 <__aeabi_dmul+0x1f8>
 800887a:	e712      	b.n	80086a2 <__aeabi_dmul+0x24a>

0800887c <__gedf2>:
 800887c:	f04f 3cff 	mov.w	ip, #4294967295
 8008880:	e006      	b.n	8008890 <__cmpdf2+0x4>
 8008882:	bf00      	nop

08008884 <__ledf2>:
 8008884:	f04f 0c01 	mov.w	ip, #1
 8008888:	e002      	b.n	8008890 <__cmpdf2+0x4>
 800888a:	bf00      	nop

0800888c <__cmpdf2>:
 800888c:	f04f 0c01 	mov.w	ip, #1
 8008890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800889c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a0:	bf18      	it	ne
 80088a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088a6:	d01b      	beq.n	80088e0 <__cmpdf2+0x54>
 80088a8:	b001      	add	sp, #4
 80088aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088ae:	bf0c      	ite	eq
 80088b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088b4:	ea91 0f03 	teqne	r1, r3
 80088b8:	bf02      	ittt	eq
 80088ba:	ea90 0f02 	teqeq	r0, r2
 80088be:	2000      	moveq	r0, #0
 80088c0:	4770      	bxeq	lr
 80088c2:	f110 0f00 	cmn.w	r0, #0
 80088c6:	ea91 0f03 	teq	r1, r3
 80088ca:	bf58      	it	pl
 80088cc:	4299      	cmppl	r1, r3
 80088ce:	bf08      	it	eq
 80088d0:	4290      	cmpeq	r0, r2
 80088d2:	bf2c      	ite	cs
 80088d4:	17d8      	asrcs	r0, r3, #31
 80088d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088da:	f040 0001 	orr.w	r0, r0, #1
 80088de:	4770      	bx	lr
 80088e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088e8:	d102      	bne.n	80088f0 <__cmpdf2+0x64>
 80088ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088ee:	d107      	bne.n	8008900 <__cmpdf2+0x74>
 80088f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d1d6      	bne.n	80088a8 <__cmpdf2+0x1c>
 80088fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088fe:	d0d3      	beq.n	80088a8 <__cmpdf2+0x1c>
 8008900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <__aeabi_cdrcmple>:
 8008908:	4684      	mov	ip, r0
 800890a:	4610      	mov	r0, r2
 800890c:	4662      	mov	r2, ip
 800890e:	468c      	mov	ip, r1
 8008910:	4619      	mov	r1, r3
 8008912:	4663      	mov	r3, ip
 8008914:	e000      	b.n	8008918 <__aeabi_cdcmpeq>
 8008916:	bf00      	nop

08008918 <__aeabi_cdcmpeq>:
 8008918:	b501      	push	{r0, lr}
 800891a:	f7ff ffb7 	bl	800888c <__cmpdf2>
 800891e:	2800      	cmp	r0, #0
 8008920:	bf48      	it	mi
 8008922:	f110 0f00 	cmnmi.w	r0, #0
 8008926:	bd01      	pop	{r0, pc}

08008928 <__aeabi_dcmpeq>:
 8008928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800892c:	f7ff fff4 	bl	8008918 <__aeabi_cdcmpeq>
 8008930:	bf0c      	ite	eq
 8008932:	2001      	moveq	r0, #1
 8008934:	2000      	movne	r0, #0
 8008936:	f85d fb08 	ldr.w	pc, [sp], #8
 800893a:	bf00      	nop

0800893c <__aeabi_dcmplt>:
 800893c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008940:	f7ff ffea 	bl	8008918 <__aeabi_cdcmpeq>
 8008944:	bf34      	ite	cc
 8008946:	2001      	movcc	r0, #1
 8008948:	2000      	movcs	r0, #0
 800894a:	f85d fb08 	ldr.w	pc, [sp], #8
 800894e:	bf00      	nop

08008950 <__aeabi_dcmple>:
 8008950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008954:	f7ff ffe0 	bl	8008918 <__aeabi_cdcmpeq>
 8008958:	bf94      	ite	ls
 800895a:	2001      	movls	r0, #1
 800895c:	2000      	movhi	r0, #0
 800895e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008962:	bf00      	nop

08008964 <__aeabi_dcmpge>:
 8008964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008968:	f7ff ffce 	bl	8008908 <__aeabi_cdrcmple>
 800896c:	bf94      	ite	ls
 800896e:	2001      	movls	r0, #1
 8008970:	2000      	movhi	r0, #0
 8008972:	f85d fb08 	ldr.w	pc, [sp], #8
 8008976:	bf00      	nop

08008978 <__aeabi_dcmpgt>:
 8008978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800897c:	f7ff ffc4 	bl	8008908 <__aeabi_cdrcmple>
 8008980:	bf34      	ite	cc
 8008982:	2001      	movcc	r0, #1
 8008984:	2000      	movcs	r0, #0
 8008986:	f85d fb08 	ldr.w	pc, [sp], #8
 800898a:	bf00      	nop

0800898c <__aeabi_d2f>:
 800898c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008994:	bf24      	itt	cs
 8008996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800899a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800899e:	d90d      	bls.n	80089bc <__aeabi_d2f+0x30>
 80089a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80089a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80089a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80089ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80089b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80089b4:	bf08      	it	eq
 80089b6:	f020 0001 	biceq.w	r0, r0, #1
 80089ba:	4770      	bx	lr
 80089bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80089c0:	d121      	bne.n	8008a06 <__aeabi_d2f+0x7a>
 80089c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80089c6:	bfbc      	itt	lt
 80089c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80089cc:	4770      	bxlt	lr
 80089ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80089d6:	f1c2 0218 	rsb	r2, r2, #24
 80089da:	f1c2 0c20 	rsb	ip, r2, #32
 80089de:	fa10 f30c 	lsls.w	r3, r0, ip
 80089e2:	fa20 f002 	lsr.w	r0, r0, r2
 80089e6:	bf18      	it	ne
 80089e8:	f040 0001 	orrne.w	r0, r0, #1
 80089ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80089f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80089f8:	ea40 000c 	orr.w	r0, r0, ip
 80089fc:	fa23 f302 	lsr.w	r3, r3, r2
 8008a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a04:	e7cc      	b.n	80089a0 <__aeabi_d2f+0x14>
 8008a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a0a:	d107      	bne.n	8008a1c <__aeabi_d2f+0x90>
 8008a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a10:	bf1e      	ittt	ne
 8008a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a1a:	4770      	bxne	lr
 8008a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop

08008a2c <__aeabi_uldivmod>:
 8008a2c:	b953      	cbnz	r3, 8008a44 <__aeabi_uldivmod+0x18>
 8008a2e:	b94a      	cbnz	r2, 8008a44 <__aeabi_uldivmod+0x18>
 8008a30:	2900      	cmp	r1, #0
 8008a32:	bf08      	it	eq
 8008a34:	2800      	cmpeq	r0, #0
 8008a36:	bf1c      	itt	ne
 8008a38:	f04f 31ff 	movne.w	r1, #4294967295
 8008a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8008a40:	f000 b972 	b.w	8008d28 <__aeabi_idiv0>
 8008a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a4c:	f000 f806 	bl	8008a5c <__udivmoddi4>
 8008a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a58:	b004      	add	sp, #16
 8008a5a:	4770      	bx	lr

08008a5c <__udivmoddi4>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	9e08      	ldr	r6, [sp, #32]
 8008a62:	4604      	mov	r4, r0
 8008a64:	4688      	mov	r8, r1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d14b      	bne.n	8008b02 <__udivmoddi4+0xa6>
 8008a6a:	428a      	cmp	r2, r1
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	d967      	bls.n	8008b40 <__udivmoddi4+0xe4>
 8008a70:	fab2 f282 	clz	r2, r2
 8008a74:	b14a      	cbz	r2, 8008a8a <__udivmoddi4+0x2e>
 8008a76:	f1c2 0720 	rsb	r7, r2, #32
 8008a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8008a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8008a82:	4095      	lsls	r5, r2
 8008a84:	ea47 0803 	orr.w	r8, r7, r3
 8008a88:	4094      	lsls	r4, r2
 8008a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008a8e:	0c23      	lsrs	r3, r4, #16
 8008a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8008a94:	fa1f fc85 	uxth.w	ip, r5
 8008a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8008a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d909      	bls.n	8008abc <__udivmoddi4+0x60>
 8008aa8:	18eb      	adds	r3, r5, r3
 8008aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8008aae:	f080 811b 	bcs.w	8008ce8 <__udivmoddi4+0x28c>
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	f240 8118 	bls.w	8008ce8 <__udivmoddi4+0x28c>
 8008ab8:	3f02      	subs	r7, #2
 8008aba:	442b      	add	r3, r5
 8008abc:	1a5b      	subs	r3, r3, r1
 8008abe:	b2a4      	uxth	r4, r4
 8008ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8008ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8008ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8008ad0:	45a4      	cmp	ip, r4
 8008ad2:	d909      	bls.n	8008ae8 <__udivmoddi4+0x8c>
 8008ad4:	192c      	adds	r4, r5, r4
 8008ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ada:	f080 8107 	bcs.w	8008cec <__udivmoddi4+0x290>
 8008ade:	45a4      	cmp	ip, r4
 8008ae0:	f240 8104 	bls.w	8008cec <__udivmoddi4+0x290>
 8008ae4:	3802      	subs	r0, #2
 8008ae6:	442c      	add	r4, r5
 8008ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008aec:	eba4 040c 	sub.w	r4, r4, ip
 8008af0:	2700      	movs	r7, #0
 8008af2:	b11e      	cbz	r6, 8008afc <__udivmoddi4+0xa0>
 8008af4:	40d4      	lsrs	r4, r2
 8008af6:	2300      	movs	r3, #0
 8008af8:	e9c6 4300 	strd	r4, r3, [r6]
 8008afc:	4639      	mov	r1, r7
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	428b      	cmp	r3, r1
 8008b04:	d909      	bls.n	8008b1a <__udivmoddi4+0xbe>
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	f000 80eb 	beq.w	8008ce2 <__udivmoddi4+0x286>
 8008b0c:	2700      	movs	r7, #0
 8008b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8008b12:	4638      	mov	r0, r7
 8008b14:	4639      	mov	r1, r7
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	fab3 f783 	clz	r7, r3
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	d147      	bne.n	8008bb2 <__udivmoddi4+0x156>
 8008b22:	428b      	cmp	r3, r1
 8008b24:	d302      	bcc.n	8008b2c <__udivmoddi4+0xd0>
 8008b26:	4282      	cmp	r2, r0
 8008b28:	f200 80fa 	bhi.w	8008d20 <__udivmoddi4+0x2c4>
 8008b2c:	1a84      	subs	r4, r0, r2
 8008b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8008b32:	2001      	movs	r0, #1
 8008b34:	4698      	mov	r8, r3
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	d0e0      	beq.n	8008afc <__udivmoddi4+0xa0>
 8008b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8008b3e:	e7dd      	b.n	8008afc <__udivmoddi4+0xa0>
 8008b40:	b902      	cbnz	r2, 8008b44 <__udivmoddi4+0xe8>
 8008b42:	deff      	udf	#255	; 0xff
 8008b44:	fab2 f282 	clz	r2, r2
 8008b48:	2a00      	cmp	r2, #0
 8008b4a:	f040 808f 	bne.w	8008c6c <__udivmoddi4+0x210>
 8008b4e:	1b49      	subs	r1, r1, r5
 8008b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b54:	fa1f f885 	uxth.w	r8, r5
 8008b58:	2701      	movs	r7, #1
 8008b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8008b5e:	0c23      	lsrs	r3, r4, #16
 8008b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8008b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b68:	fb08 f10c 	mul.w	r1, r8, ip
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	d907      	bls.n	8008b80 <__udivmoddi4+0x124>
 8008b70:	18eb      	adds	r3, r5, r3
 8008b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008b76:	d202      	bcs.n	8008b7e <__udivmoddi4+0x122>
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	f200 80cd 	bhi.w	8008d18 <__udivmoddi4+0x2bc>
 8008b7e:	4684      	mov	ip, r0
 8008b80:	1a59      	subs	r1, r3, r1
 8008b82:	b2a3      	uxth	r3, r4
 8008b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8008b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8008b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b90:	fb08 f800 	mul.w	r8, r8, r0
 8008b94:	45a0      	cmp	r8, r4
 8008b96:	d907      	bls.n	8008ba8 <__udivmoddi4+0x14c>
 8008b98:	192c      	adds	r4, r5, r4
 8008b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b9e:	d202      	bcs.n	8008ba6 <__udivmoddi4+0x14a>
 8008ba0:	45a0      	cmp	r8, r4
 8008ba2:	f200 80b6 	bhi.w	8008d12 <__udivmoddi4+0x2b6>
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	eba4 0408 	sub.w	r4, r4, r8
 8008bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008bb0:	e79f      	b.n	8008af2 <__udivmoddi4+0x96>
 8008bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8008bb6:	40bb      	lsls	r3, r7
 8008bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8008bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8008bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8008bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8008bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008bd0:	4325      	orrs	r5, r4
 8008bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8008bd6:	0c2c      	lsrs	r4, r5, #16
 8008bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8008bdc:	fa1f fa8e 	uxth.w	sl, lr
 8008be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008be4:	fb09 f40a 	mul.w	r4, r9, sl
 8008be8:	429c      	cmp	r4, r3
 8008bea:	fa02 f207 	lsl.w	r2, r2, r7
 8008bee:	fa00 f107 	lsl.w	r1, r0, r7
 8008bf2:	d90b      	bls.n	8008c0c <__udivmoddi4+0x1b0>
 8008bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8008bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8008bfc:	f080 8087 	bcs.w	8008d0e <__udivmoddi4+0x2b2>
 8008c00:	429c      	cmp	r4, r3
 8008c02:	f240 8084 	bls.w	8008d0e <__udivmoddi4+0x2b2>
 8008c06:	f1a9 0902 	sub.w	r9, r9, #2
 8008c0a:	4473      	add	r3, lr
 8008c0c:	1b1b      	subs	r3, r3, r4
 8008c0e:	b2ad      	uxth	r5, r5
 8008c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c14:	fb08 3310 	mls	r3, r8, r0, r3
 8008c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008c20:	45a2      	cmp	sl, r4
 8008c22:	d908      	bls.n	8008c36 <__udivmoddi4+0x1da>
 8008c24:	eb1e 0404 	adds.w	r4, lr, r4
 8008c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2c:	d26b      	bcs.n	8008d06 <__udivmoddi4+0x2aa>
 8008c2e:	45a2      	cmp	sl, r4
 8008c30:	d969      	bls.n	8008d06 <__udivmoddi4+0x2aa>
 8008c32:	3802      	subs	r0, #2
 8008c34:	4474      	add	r4, lr
 8008c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8008c3e:	eba4 040a 	sub.w	r4, r4, sl
 8008c42:	454c      	cmp	r4, r9
 8008c44:	46c2      	mov	sl, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	d354      	bcc.n	8008cf4 <__udivmoddi4+0x298>
 8008c4a:	d051      	beq.n	8008cf0 <__udivmoddi4+0x294>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	d069      	beq.n	8008d24 <__udivmoddi4+0x2c8>
 8008c50:	ebb1 050a 	subs.w	r5, r1, sl
 8008c54:	eb64 0403 	sbc.w	r4, r4, r3
 8008c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008c5c:	40fd      	lsrs	r5, r7
 8008c5e:	40fc      	lsrs	r4, r7
 8008c60:	ea4c 0505 	orr.w	r5, ip, r5
 8008c64:	e9c6 5400 	strd	r5, r4, [r6]
 8008c68:	2700      	movs	r7, #0
 8008c6a:	e747      	b.n	8008afc <__udivmoddi4+0xa0>
 8008c6c:	f1c2 0320 	rsb	r3, r2, #32
 8008c70:	fa20 f703 	lsr.w	r7, r0, r3
 8008c74:	4095      	lsls	r5, r2
 8008c76:	fa01 f002 	lsl.w	r0, r1, r2
 8008c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8008c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c82:	4338      	orrs	r0, r7
 8008c84:	0c01      	lsrs	r1, r0, #16
 8008c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8008c8a:	fa1f f885 	uxth.w	r8, r5
 8008c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8008c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c96:	fb07 f308 	mul.w	r3, r7, r8
 8008c9a:	428b      	cmp	r3, r1
 8008c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8008ca0:	d907      	bls.n	8008cb2 <__udivmoddi4+0x256>
 8008ca2:	1869      	adds	r1, r5, r1
 8008ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8008ca8:	d22f      	bcs.n	8008d0a <__udivmoddi4+0x2ae>
 8008caa:	428b      	cmp	r3, r1
 8008cac:	d92d      	bls.n	8008d0a <__udivmoddi4+0x2ae>
 8008cae:	3f02      	subs	r7, #2
 8008cb0:	4429      	add	r1, r5
 8008cb2:	1acb      	subs	r3, r1, r3
 8008cb4:	b281      	uxth	r1, r0
 8008cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8008cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8008cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cc2:	fb00 f308 	mul.w	r3, r0, r8
 8008cc6:	428b      	cmp	r3, r1
 8008cc8:	d907      	bls.n	8008cda <__udivmoddi4+0x27e>
 8008cca:	1869      	adds	r1, r5, r1
 8008ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cd0:	d217      	bcs.n	8008d02 <__udivmoddi4+0x2a6>
 8008cd2:	428b      	cmp	r3, r1
 8008cd4:	d915      	bls.n	8008d02 <__udivmoddi4+0x2a6>
 8008cd6:	3802      	subs	r0, #2
 8008cd8:	4429      	add	r1, r5
 8008cda:	1ac9      	subs	r1, r1, r3
 8008cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008ce0:	e73b      	b.n	8008b5a <__udivmoddi4+0xfe>
 8008ce2:	4637      	mov	r7, r6
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	e709      	b.n	8008afc <__udivmoddi4+0xa0>
 8008ce8:	4607      	mov	r7, r0
 8008cea:	e6e7      	b.n	8008abc <__udivmoddi4+0x60>
 8008cec:	4618      	mov	r0, r3
 8008cee:	e6fb      	b.n	8008ae8 <__udivmoddi4+0x8c>
 8008cf0:	4541      	cmp	r1, r8
 8008cf2:	d2ab      	bcs.n	8008c4c <__udivmoddi4+0x1f0>
 8008cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8008cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8008cfc:	3801      	subs	r0, #1
 8008cfe:	4613      	mov	r3, r2
 8008d00:	e7a4      	b.n	8008c4c <__udivmoddi4+0x1f0>
 8008d02:	4660      	mov	r0, ip
 8008d04:	e7e9      	b.n	8008cda <__udivmoddi4+0x27e>
 8008d06:	4618      	mov	r0, r3
 8008d08:	e795      	b.n	8008c36 <__udivmoddi4+0x1da>
 8008d0a:	4667      	mov	r7, ip
 8008d0c:	e7d1      	b.n	8008cb2 <__udivmoddi4+0x256>
 8008d0e:	4681      	mov	r9, r0
 8008d10:	e77c      	b.n	8008c0c <__udivmoddi4+0x1b0>
 8008d12:	3802      	subs	r0, #2
 8008d14:	442c      	add	r4, r5
 8008d16:	e747      	b.n	8008ba8 <__udivmoddi4+0x14c>
 8008d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d1c:	442b      	add	r3, r5
 8008d1e:	e72f      	b.n	8008b80 <__udivmoddi4+0x124>
 8008d20:	4638      	mov	r0, r7
 8008d22:	e708      	b.n	8008b36 <__udivmoddi4+0xda>
 8008d24:	4637      	mov	r7, r6
 8008d26:	e6e9      	b.n	8008afc <__udivmoddi4+0xa0>

08008d28 <__aeabi_idiv0>:
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop

08008d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d30:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <HAL_Init+0x40>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <HAL_Init+0x40>)
 8008d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <HAL_Init+0x40>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <HAL_Init+0x40>)
 8008d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d48:	4b08      	ldr	r3, [pc, #32]	; (8008d6c <HAL_Init+0x40>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a07      	ldr	r2, [pc, #28]	; (8008d6c <HAL_Init+0x40>)
 8008d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d54:	2003      	movs	r0, #3
 8008d56:	f001 fab5 	bl	800a2c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f000 f808 	bl	8008d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d60:	f008 f928 	bl	8010fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40023c00 	.word	0x40023c00

08008d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d78:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <HAL_InitTick+0x54>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <HAL_InitTick+0x58>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	4619      	mov	r1, r3
 8008d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 facd 	bl	800a32e <HAL_SYSTICK_Config>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e00e      	b.n	8008dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d80a      	bhi.n	8008dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008da4:	2200      	movs	r2, #0
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	f001 fa95 	bl	800a2da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008db0:	4a06      	ldr	r2, [pc, #24]	; (8008dcc <HAL_InitTick+0x5c>)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e000      	b.n	8008dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	2000000c 	.word	0x2000000c
 8008dc8:	20000004 	.word	0x20000004
 8008dcc:	20000000 	.word	0x20000000

08008dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <HAL_IncTick+0x20>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <HAL_IncTick+0x24>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4413      	add	r3, r2
 8008de0:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <HAL_IncTick+0x24>)
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000004 	.word	0x20000004
 8008df4:	20004128 	.word	0x20004128

08008df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_GetTick+0x14>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20004128 	.word	0x20004128

08008e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e18:	f7ff ffee 	bl	8008df8 <HAL_GetTick>
 8008e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d005      	beq.n	8008e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e2a:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <HAL_Delay+0x40>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e36:	bf00      	nop
 8008e38:	f7ff ffde 	bl	8008df8 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d8f7      	bhi.n	8008e38 <HAL_Delay+0x28>
  {
  }
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000004 	.word	0x20000004

08008e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e033      	b.n	8008ed2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f006 f8fe 	bl	800f074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d118      	bne.n	8008ec4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e9a:	f023 0302 	bic.w	r3, r3, #2
 8008e9e:	f043 0202 	orr.w	r2, r3, #2
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa5a 	bl	8009360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	f043 0201 	orr.w	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8008ec2:	e001      	b.n	8008ec8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <HAL_ADC_Start_DMA+0x1e>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e0cc      	b.n	8009094 <HAL_ADC_Start_DMA+0x1b8>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d018      	beq.n	8008f42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0201 	orr.w	r2, r2, #1
 8008f1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f20:	4b5e      	ldr	r3, [pc, #376]	; (800909c <HAL_ADC_Start_DMA+0x1c0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a5e      	ldr	r2, [pc, #376]	; (80090a0 <HAL_ADC_Start_DMA+0x1c4>)
 8008f26:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2a:	0c9a      	lsrs	r2, r3, #18
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f34:	e002      	b.n	8008f3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f9      	bne.n	8008f36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	f040 80a0 	bne.w	8009092 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f5a:	f023 0301 	bic.w	r3, r3, #1
 8008f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f90:	d106      	bne.n	8008fa0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f96:	f023 0206 	bic.w	r2, r3, #6
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8008f9e:	e002      	b.n	8008fa6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008fae:	4b3d      	ldr	r3, [pc, #244]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 8008fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	4a3c      	ldr	r2, [pc, #240]	; (80090a8 <HAL_ADC_Start_DMA+0x1cc>)
 8008fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	4a3b      	ldr	r2, [pc, #236]	; (80090ac <HAL_ADC_Start_DMA+0x1d0>)
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	4a3a      	ldr	r2, [pc, #232]	; (80090b0 <HAL_ADC_Start_DMA+0x1d4>)
 8008fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	334c      	adds	r3, #76	; 0x4c
 8008ffe:	4619      	mov	r1, r3
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f001 fa4e 	bl	800a4a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	2b00      	cmp	r3, #0
 8009012:	d12a      	bne.n	800906a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <HAL_ADC_Start_DMA+0x1d8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d015      	beq.n	800904a <HAL_ADC_Start_DMA+0x16e>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <HAL_ADC_Start_DMA+0x1dc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d105      	bne.n	8009034 <HAL_ADC_Start_DMA+0x158>
 8009028:	4b1e      	ldr	r3, [pc, #120]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f003 031f 	and.w	r3, r3, #31
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a20      	ldr	r2, [pc, #128]	; (80090bc <HAL_ADC_Start_DMA+0x1e0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d129      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
 800903e:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f003 031f 	and.w	r3, r3, #31
 8009046:	2b0f      	cmp	r3, #15
 8009048:	d823      	bhi.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d11c      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	e013      	b.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a11      	ldr	r2, [pc, #68]	; (80090b4 <HAL_ADC_Start_DMA+0x1d8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d10e      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d107      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009090:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	2000000c 	.word	0x2000000c
 80090a0:	431bde83 	.word	0x431bde83
 80090a4:	40012300 	.word	0x40012300
 80090a8:	08009559 	.word	0x08009559
 80090ac:	08009613 	.word	0x08009613
 80090b0:	0800962f 	.word	0x0800962f
 80090b4:	40012000 	.word	0x40012000
 80090b8:	40012100 	.word	0x40012100
 80090bc:	40012200 	.word	0x40012200

080090c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_ADC_ConfigChannel+0x1c>
 8009114:	2302      	movs	r3, #2
 8009116:	e113      	b.n	8009340 <HAL_ADC_ConfigChannel+0x244>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b09      	cmp	r3, #9
 8009126:	d925      	bls.n	8009174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68d9      	ldr	r1, [r3, #12]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	461a      	mov	r2, r3
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	3b1e      	subs	r3, #30
 800913e:	2207      	movs	r2, #7
 8009140:	fa02 f303 	lsl.w	r3, r2, r3
 8009144:	43da      	mvns	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	400a      	ands	r2, r1
 800914c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68d9      	ldr	r1, [r3, #12]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	4618      	mov	r0, r3
 8009160:	4603      	mov	r3, r0
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4403      	add	r3, r0
 8009166:	3b1e      	subs	r3, #30
 8009168:	409a      	lsls	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	e022      	b.n	80091ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6919      	ldr	r1, [r3, #16]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	4613      	mov	r3, r2
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	4413      	add	r3, r2
 8009188:	2207      	movs	r2, #7
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	43da      	mvns	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	400a      	ands	r2, r1
 8009196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6919      	ldr	r1, [r3, #16]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	4618      	mov	r0, r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4403      	add	r3, r0
 80091b0:	409a      	lsls	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d824      	bhi.n	800920c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	3b05      	subs	r3, #5
 80091d4:	221f      	movs	r2, #31
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	43da      	mvns	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	400a      	ands	r2, r1
 80091e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4618      	mov	r0, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	3b05      	subs	r3, #5
 80091fe:	fa00 f203 	lsl.w	r2, r0, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	635a      	str	r2, [r3, #52]	; 0x34
 800920a:	e04c      	b.n	80092a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b0c      	cmp	r3, #12
 8009212:	d824      	bhi.n	800925e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	3b23      	subs	r3, #35	; 0x23
 8009226:	221f      	movs	r2, #31
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	43da      	mvns	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	400a      	ands	r2, r1
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	4618      	mov	r0, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	3b23      	subs	r3, #35	; 0x23
 8009250:	fa00 f203 	lsl.w	r2, r0, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	631a      	str	r2, [r3, #48]	; 0x30
 800925c:	e023      	b.n	80092a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	3b41      	subs	r3, #65	; 0x41
 8009270:	221f      	movs	r2, #31
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
 8009276:	43da      	mvns	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	400a      	ands	r2, r1
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	4618      	mov	r0, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	3b41      	subs	r3, #65	; 0x41
 800929a:	fa00 f203 	lsl.w	r2, r0, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092a6:	4b29      	ldr	r3, [pc, #164]	; (800934c <HAL_ADC_ConfigChannel+0x250>)
 80092a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a28      	ldr	r2, [pc, #160]	; (8009350 <HAL_ADC_ConfigChannel+0x254>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d10f      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x1d8>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b12      	cmp	r3, #18
 80092ba:	d10b      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1d      	ldr	r2, [pc, #116]	; (8009350 <HAL_ADC_ConfigChannel+0x254>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d12b      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <HAL_ADC_ConfigChannel+0x258>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <HAL_ADC_ConfigChannel+0x1f4>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b11      	cmp	r3, #17
 80092ee:	d122      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <HAL_ADC_ConfigChannel+0x258>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d111      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009312:	4b11      	ldr	r3, [pc, #68]	; (8009358 <HAL_ADC_ConfigChannel+0x25c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a11      	ldr	r2, [pc, #68]	; (800935c <HAL_ADC_ConfigChannel+0x260>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	0c9a      	lsrs	r2, r3, #18
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009328:	e002      	b.n	8009330 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	3b01      	subs	r3, #1
 800932e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f9      	bne.n	800932a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40012300 	.word	0x40012300
 8009350:	40012000 	.word	0x40012000
 8009354:	10000012 	.word	0x10000012
 8009358:	2000000c 	.word	0x2000000c
 800935c:	431bde83 	.word	0x431bde83

08009360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009368:	4b79      	ldr	r3, [pc, #484]	; (8009550 <ADC_Init+0x1f0>)
 800936a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	431a      	orrs	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	021a      	lsls	r2, r3, #8
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80093b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6859      	ldr	r1, [r3, #4]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6899      	ldr	r1, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	4a58      	ldr	r2, [pc, #352]	; (8009554 <ADC_Init+0x1f4>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d022      	beq.n	800943e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6899      	ldr	r1, [r3, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6899      	ldr	r1, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	609a      	str	r2, [r3, #8]
 800943c:	e00f      	b.n	800945e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800944c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800945c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0202 	bic.w	r2, r2, #2
 800946c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6899      	ldr	r1, [r3, #8]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7e1b      	ldrb	r3, [r3, #24]
 8009478:	005a      	lsls	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01b      	beq.n	80094c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800949a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80094aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6859      	ldr	r1, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	3b01      	subs	r3, #1
 80094b8:	035a      	lsls	r2, r3, #13
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
 80094c2:	e007      	b.n	80094d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80094e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	051a      	lsls	r2, r3, #20
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6899      	ldr	r1, [r3, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009516:	025a      	lsls	r2, r3, #9
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800952e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6899      	ldr	r1, [r3, #8]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	029a      	lsls	r2, r3, #10
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	430a      	orrs	r2, r1
 8009542:	609a      	str	r2, [r3, #8]
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	40012300 	.word	0x40012300
 8009554:	0f000001 	.word	0x0f000001

08009558 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800956e:	2b00      	cmp	r3, #0
 8009570:	d13c      	bne.n	80095ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d12b      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009590:	2b00      	cmp	r3, #0
 8009592:	d127      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d119      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0220 	bic.w	r2, r2, #32
 80095be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d105      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	f043 0201 	orr.w	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fd6b 	bl	80090c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095ea:	e00e      	b.n	800960a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fd75 	bl	80090e8 <HAL_ADC_ErrorCallback>
}
 80095fe:	e004      	b.n	800960a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff fd57 	bl	80090d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2240      	movs	r2, #64	; 0x40
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	f043 0204 	orr.w	r2, r3, #4
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fd4a 	bl	80090e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e0ed      	b.n	800984a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d102      	bne.n	8009680 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f005 fe90 	bl	800f3a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0202 	bic.w	r2, r2, #2
 800968e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009690:	f7ff fbb2 	bl	8008df8 <HAL_GetTick>
 8009694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009696:	e012      	b.n	80096be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009698:	f7ff fbae 	bl	8008df8 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b0a      	cmp	r3, #10
 80096a4:	d90b      	bls.n	80096be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2205      	movs	r2, #5
 80096b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e0c5      	b.n	800984a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096dc:	f7ff fb8c 	bl	8008df8 <HAL_GetTick>
 80096e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80096e2:	e012      	b.n	800970a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096e4:	f7ff fb88 	bl	8008df8 <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	2b0a      	cmp	r3, #10
 80096f0:	d90b      	bls.n	800970a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2205      	movs	r2, #5
 8009702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e09f      	b.n	800984a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0e5      	beq.n	80096e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7e1b      	ldrb	r3, [r3, #24]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d108      	bne.n	8009732 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	e007      	b.n	8009742 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	7e5b      	ldrb	r3, [r3, #25]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d108      	bne.n	800975c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	e007      	b.n	800976c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800976a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7e9b      	ldrb	r3, [r3, #26]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d108      	bne.n	8009786 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0220 	orr.w	r2, r2, #32
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e007      	b.n	8009796 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0220 	bic.w	r2, r2, #32
 8009794:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	7edb      	ldrb	r3, [r3, #27]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d108      	bne.n	80097b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0210 	bic.w	r2, r2, #16
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	e007      	b.n	80097c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0210 	orr.w	r2, r2, #16
 80097be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7f1b      	ldrb	r3, [r3, #28]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d108      	bne.n	80097da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0208 	orr.w	r2, r2, #8
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	e007      	b.n	80097ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0208 	bic.w	r2, r2, #8
 80097e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7f5b      	ldrb	r3, [r3, #29]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d108      	bne.n	8009804 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0204 	orr.w	r2, r2, #4
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e007      	b.n	8009814 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0204 	bic.w	r2, r2, #4
 8009812:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	ea42 0103 	orr.w	r1, r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	1e5a      	subs	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800986a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800986c:	7cfb      	ldrb	r3, [r7, #19]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d003      	beq.n	800987a <HAL_CAN_ConfigFilter+0x26>
 8009872:	7cfb      	ldrb	r3, [r7, #19]
 8009874:	2b02      	cmp	r3, #2
 8009876:	f040 80be 	bne.w	80099f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800987a:	4b65      	ldr	r3, [pc, #404]	; (8009a10 <HAL_CAN_ConfigFilter+0x1bc>)
 800987c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009884:	f043 0201 	orr.w	r2, r3, #1
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009894:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	431a      	orrs	r2, r3
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	2201      	movs	r2, #1
 80098bc:	fa02 f303 	lsl.w	r3, r2, r3
 80098c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	43db      	mvns	r3, r3
 80098cc:	401a      	ands	r2, r3
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d123      	bne.n	8009924 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	43db      	mvns	r3, r3
 80098e6:	401a      	ands	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	3248      	adds	r2, #72	; 0x48
 8009904:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009918:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800991a:	6979      	ldr	r1, [r7, #20]
 800991c:	3348      	adds	r3, #72	; 0x48
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	440b      	add	r3, r1
 8009922:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d122      	bne.n	8009972 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	431a      	orrs	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800994c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	3248      	adds	r2, #72	; 0x48
 8009952:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009966:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009968:	6979      	ldr	r1, [r7, #20]
 800996a:	3348      	adds	r3, #72	; 0x48
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	440b      	add	r3, r1
 8009970:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	43db      	mvns	r3, r3
 8009984:	401a      	ands	r2, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800998c:	e007      	b.n	800999e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	431a      	orrs	r2, r3
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	43db      	mvns	r3, r3
 80099b0:	401a      	ands	r2, r3
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80099b8:	e007      	b.n	80099ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d107      	bne.n	80099e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	431a      	orrs	r2, r3
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099e8:	f023 0201 	bic.w	r2, r3, #1
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e006      	b.n	8009a04 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
  }
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	40006400 	.word	0x40006400

08009a14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d12e      	bne.n	8009a86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f022 0201 	bic.w	r2, r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a40:	f7ff f9da 	bl	8008df8 <HAL_GetTick>
 8009a44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a46:	e012      	b.n	8009a6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a48:	f7ff f9d6 	bl	8008df8 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	2b0a      	cmp	r3, #10
 8009a54:	d90b      	bls.n	8009a6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2205      	movs	r2, #5
 8009a66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e012      	b.n	8009a94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e5      	bne.n	8009a48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e006      	b.n	8009a94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
  }
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ab0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d003      	beq.n	8009ac0 <HAL_CAN_GetRxMessage+0x24>
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	f040 80f4 	bne.w	8009ca8 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10e      	bne.n	8009ae4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d116      	bne.n	8009b02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0e8      	b.n	8009cb6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d107      	bne.n	8009b02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e0d9      	b.n	8009cb6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	331b      	adds	r3, #27
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	4413      	add	r3, r2
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0204 	and.w	r2, r3, #4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10c      	bne.n	8009b3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	331b      	adds	r3, #27
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	4413      	add	r3, r2
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	0d5b      	lsrs	r3, r3, #21
 8009b30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e00b      	b.n	8009b52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	331b      	adds	r3, #27
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	4413      	add	r3, r2
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	08db      	lsrs	r3, r3, #3
 8009b4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	331b      	adds	r3, #27
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	4413      	add	r3, r2
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	085b      	lsrs	r3, r3, #1
 8009b62:	f003 0201 	and.w	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	331b      	adds	r3, #27
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	4413      	add	r3, r2
 8009b76:	3304      	adds	r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 020f 	and.w	r2, r3, #15
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	331b      	adds	r3, #27
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	4413      	add	r3, r2
 8009b8e:	3304      	adds	r3, #4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	331b      	adds	r3, #27
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	0a1a      	lsrs	r2, r3, #8
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	b2d2      	uxtb	r2, r2
 8009be0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	0c1a      	lsrs	r2, r3, #16
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	3302      	adds	r3, #2
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	0e1a      	lsrs	r2, r3, #24
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	3303      	adds	r3, #3
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	011b      	lsls	r3, r3, #4
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	0a1a      	lsrs	r2, r3, #8
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	3305      	adds	r3, #5
 8009c44:	b2d2      	uxtb	r2, r2
 8009c46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	0c1a      	lsrs	r2, r3, #16
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	3306      	adds	r3, #6
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	0e1a      	lsrs	r2, r3, #24
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	3307      	adds	r3, #7
 8009c78:	b2d2      	uxtb	r2, r2
 8009c7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d108      	bne.n	8009c94 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f042 0220 	orr.w	r2, r2, #32
 8009c90:	60da      	str	r2, [r3, #12]
 8009c92:	e007      	b.n	8009ca4 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0220 	orr.w	r2, r2, #32
 8009ca2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e006      	b.n	8009cb6 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b085      	sub	sp, #20
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d002      	beq.n	8009ce0 <HAL_CAN_ActivateNotification+0x1e>
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d109      	bne.n	8009cf4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6959      	ldr	r1, [r3, #20]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e006      	b.n	8009d02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
  }
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b08a      	sub	sp, #40	; 0x28
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d07c      	beq.n	8009e4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d023      	beq.n	8009da6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2201      	movs	r2, #1
 8009d64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f005 fbfb 	bl	800f56c <HAL_CAN_TxMailbox0CompleteCallback>
 8009d76:	e016      	b.n	8009da6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d004      	beq.n	8009d8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8a:	e00c      	b.n	8009da6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	f003 0308 	and.w	r3, r3, #8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9e:	e002      	b.n	8009da6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f965 	bl	800a070 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d024      	beq.n	8009dfa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f005 fbe1 	bl	800f58c <HAL_CAN_TxMailbox1CompleteCallback>
 8009dca:	e016      	b.n	8009dfa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dde:	e00c      	b.n	8009dfa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
 8009df2:	e002      	b.n	8009dfa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f945 	bl	800a084 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d024      	beq.n	8009e4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f005 fbc7 	bl	800f5ac <HAL_CAN_TxMailbox2CompleteCallback>
 8009e1e:	e016      	b.n	8009e4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
 8009e32:	e00c      	b.n	8009e4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
 8009e46:	e002      	b.n	8009e4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f925 	bl	800a098 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00c      	beq.n	8009e72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2210      	movs	r2, #16
 8009e70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f003 0308 	and.w	r3, r3, #8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d006      	beq.n	8009e94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f90c 	bl	800a0ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f005 fb8d 	bl	800f5cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00c      	beq.n	8009ed6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2210      	movs	r2, #16
 8009ed4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f003 0308 	and.w	r3, r3, #8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d006      	beq.n	8009ef8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2208      	movs	r2, #8
 8009ef0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f8ee 	bl	800a0d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	f003 0310 	and.w	r3, r3, #16
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f8d5 	bl	800a0c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f003 0310 	and.w	r3, r3, #16
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d006      	beq.n	8009f38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2210      	movs	r2, #16
 8009f30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f8d8 	bl	800a0e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2208      	movs	r2, #8
 8009f52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f8d1 	bl	800a0fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d075      	beq.n	800a050 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f003 0304 	and.w	r3, r3, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d06c      	beq.n	800a048 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d008      	beq.n	8009f8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	f043 0301 	orr.w	r3, r3, #1
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d008      	beq.n	8009fa6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	f043 0302 	orr.w	r3, r3, #2
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d008      	beq.n	8009fc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	f043 0304 	orr.w	r3, r3, #4
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d03d      	beq.n	800a048 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d038      	beq.n	800a048 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fdc:	2b30      	cmp	r3, #48	; 0x30
 8009fde:	d017      	beq.n	800a010 <HAL_CAN_IRQHandler+0x302>
 8009fe0:	2b30      	cmp	r3, #48	; 0x30
 8009fe2:	d804      	bhi.n	8009fee <HAL_CAN_IRQHandler+0x2e0>
 8009fe4:	2b10      	cmp	r3, #16
 8009fe6:	d009      	beq.n	8009ffc <HAL_CAN_IRQHandler+0x2ee>
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d00c      	beq.n	800a006 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009fec:	e024      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009fee:	2b50      	cmp	r3, #80	; 0x50
 8009ff0:	d018      	beq.n	800a024 <HAL_CAN_IRQHandler+0x316>
 8009ff2:	2b60      	cmp	r3, #96	; 0x60
 8009ff4:	d01b      	beq.n	800a02e <HAL_CAN_IRQHandler+0x320>
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d00f      	beq.n	800a01a <HAL_CAN_IRQHandler+0x30c>
            break;
 8009ffa:	e01d      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	f043 0308 	orr.w	r3, r3, #8
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a004:	e018      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	f043 0310 	orr.w	r3, r3, #16
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a00e:	e013      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	f043 0320 	orr.w	r3, r3, #32
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a018:	e00e      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a022:	e009      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a02c:	e004      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a036:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a046:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2204      	movs	r2, #4
 800a04e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	2b00      	cmp	r3, #0
 800a054:	d008      	beq.n	800a068 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f854 	bl	800a110 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a068:	bf00      	nop
 800a06a:	3728      	adds	r7, #40	; 0x28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a134:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <__NVIC_SetPriorityGrouping+0x44>)
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a140:	4013      	ands	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a14c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a156:	4a04      	ldr	r2, [pc, #16]	; (800a168 <__NVIC_SetPriorityGrouping+0x44>)
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	60d3      	str	r3, [r2, #12]
}
 800a15c:	bf00      	nop
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	e000ed00 	.word	0xe000ed00

0800a16c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a170:	4b04      	ldr	r3, [pc, #16]	; (800a184 <__NVIC_GetPriorityGrouping+0x18>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	0a1b      	lsrs	r3, r3, #8
 800a176:	f003 0307 	and.w	r3, r3, #7
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	e000ed00 	.word	0xe000ed00

0800a188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a196:	2b00      	cmp	r3, #0
 800a198:	db0b      	blt.n	800a1b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	f003 021f 	and.w	r2, r3, #31
 800a1a0:	4907      	ldr	r1, [pc, #28]	; (800a1c0 <__NVIC_EnableIRQ+0x38>)
 800a1a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	fa00 f202 	lsl.w	r2, r0, r2
 800a1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	e000e100 	.word	0xe000e100

0800a1c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	6039      	str	r1, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	db0a      	blt.n	800a1ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	490c      	ldr	r1, [pc, #48]	; (800a210 <__NVIC_SetPriority+0x4c>)
 800a1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e2:	0112      	lsls	r2, r2, #4
 800a1e4:	b2d2      	uxtb	r2, r2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1ec:	e00a      	b.n	800a204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	4908      	ldr	r1, [pc, #32]	; (800a214 <__NVIC_SetPriority+0x50>)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	0112      	lsls	r2, r2, #4
 800a1fe:	b2d2      	uxtb	r2, r2
 800a200:	440b      	add	r3, r1
 800a202:	761a      	strb	r2, [r3, #24]
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	e000e100 	.word	0xe000e100
 800a214:	e000ed00 	.word	0xe000ed00

0800a218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a218:	b480      	push	{r7}
 800a21a:	b089      	sub	sp, #36	; 0x24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f1c3 0307 	rsb	r3, r3, #7
 800a232:	2b04      	cmp	r3, #4
 800a234:	bf28      	it	cs
 800a236:	2304      	movcs	r3, #4
 800a238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	3304      	adds	r3, #4
 800a23e:	2b06      	cmp	r3, #6
 800a240:	d902      	bls.n	800a248 <NVIC_EncodePriority+0x30>
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	3b03      	subs	r3, #3
 800a246:	e000      	b.n	800a24a <NVIC_EncodePriority+0x32>
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	fa02 f303 	lsl.w	r3, r2, r3
 800a256:	43da      	mvns	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	401a      	ands	r2, r3
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a260:	f04f 31ff 	mov.w	r1, #4294967295
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	fa01 f303 	lsl.w	r3, r1, r3
 800a26a:	43d9      	mvns	r1, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a270:	4313      	orrs	r3, r2
         );
}
 800a272:	4618      	mov	r0, r3
 800a274:	3724      	adds	r7, #36	; 0x24
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
	...

0800a280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a290:	d301      	bcc.n	800a296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a292:	2301      	movs	r3, #1
 800a294:	e00f      	b.n	800a2b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a296:	4a0a      	ldr	r2, [pc, #40]	; (800a2c0 <SysTick_Config+0x40>)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a29e:	210f      	movs	r1, #15
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	f7ff ff8e 	bl	800a1c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <SysTick_Config+0x40>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2ae:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <SysTick_Config+0x40>)
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	e000e010 	.word	0xe000e010

0800a2c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ff29 	bl	800a124 <__NVIC_SetPriorityGrouping>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b086      	sub	sp, #24
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2ec:	f7ff ff3e 	bl	800a16c <__NVIC_GetPriorityGrouping>
 800a2f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	6978      	ldr	r0, [r7, #20]
 800a2f8:	f7ff ff8e 	bl	800a218 <NVIC_EncodePriority>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff ff5d 	bl	800a1c4 <__NVIC_SetPriority>
}
 800a30a:	bf00      	nop
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	4603      	mov	r3, r0
 800a31a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff ff31 	bl	800a188 <__NVIC_EnableIRQ>
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7ff ffa2 	bl	800a280 <SysTick_Config>
 800a33c:	4603      	mov	r3, r0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a354:	f7fe fd50 	bl	8008df8 <HAL_GetTick>
 800a358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e099      	b.n	800a498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0201 	bic.w	r2, r2, #1
 800a382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a384:	e00f      	b.n	800a3a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a386:	f7fe fd37 	bl	8008df8 <HAL_GetTick>
 800a38a:	4602      	mov	r2, r0
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	2b05      	cmp	r3, #5
 800a392:	d908      	bls.n	800a3a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2203      	movs	r2, #3
 800a39e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e078      	b.n	800a498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e8      	bne.n	800a386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	4b38      	ldr	r3, [pc, #224]	; (800a4a0 <HAL_DMA_Init+0x158>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d107      	bne.n	800a410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a408:	4313      	orrs	r3, r2
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f023 0307 	bic.w	r3, r3, #7
 800a426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b04      	cmp	r3, #4
 800a438:	d117      	bne.n	800a46a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00e      	beq.n	800a46a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa99 	bl	800a984 <DMA_CheckFifoParam>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2240      	movs	r2, #64	; 0x40
 800a45c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a466:	2301      	movs	r3, #1
 800a468:	e016      	b.n	800a498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa50 	bl	800a918 <DMA_CalcBaseAndBitshift>
 800a478:	4603      	mov	r3, r0
 800a47a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a480:	223f      	movs	r2, #63	; 0x3f
 800a482:	409a      	lsls	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	f010803f 	.word	0xf010803f

0800a4a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
 800a4b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <HAL_DMA_Start_IT+0x26>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e048      	b.n	800a55c <HAL_DMA_Start_IT+0xb8>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d137      	bne.n	800a54e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f9e2 	bl	800a8bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fc:	223f      	movs	r2, #63	; 0x3f
 800a4fe:	409a      	lsls	r2, r3
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0216 	orr.w	r2, r2, #22
 800a512:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	695a      	ldr	r2, [r3, #20]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a522:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d007      	beq.n	800a53c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0208 	orr.w	r2, r2, #8
 800a53a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f042 0201 	orr.w	r2, r2, #1
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	e005      	b.n	800a55a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a556:	2302      	movs	r3, #2
 800a558:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b02      	cmp	r3, #2
 800a576:	d004      	beq.n	800a582 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2280      	movs	r2, #128	; 0x80
 800a57c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e00c      	b.n	800a59c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2205      	movs	r2, #5
 800a586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0201 	bic.w	r2, r2, #1
 800a598:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5b4:	4b92      	ldr	r3, [pc, #584]	; (800a800 <HAL_DMA_IRQHandler+0x258>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a92      	ldr	r2, [pc, #584]	; (800a804 <HAL_DMA_IRQHandler+0x25c>)
 800a5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a5be:	0a9b      	lsrs	r3, r3, #10
 800a5c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	409a      	lsls	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01a      	beq.n	800a614 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d013      	beq.n	800a614 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0204 	bic.w	r2, r2, #4
 800a5fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a600:	2208      	movs	r2, #8
 800a602:	409a      	lsls	r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60c:	f043 0201 	orr.w	r2, r3, #1
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a618:	2201      	movs	r2, #1
 800a61a:	409a      	lsls	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d012      	beq.n	800a64a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00b      	beq.n	800a64a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a636:	2201      	movs	r2, #1
 800a638:	409a      	lsls	r2, r3
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a642:	f043 0202 	orr.w	r2, r3, #2
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64e:	2204      	movs	r2, #4
 800a650:	409a      	lsls	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4013      	ands	r3, r2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d012      	beq.n	800a680 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00b      	beq.n	800a680 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a66c:	2204      	movs	r2, #4
 800a66e:	409a      	lsls	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a678:	f043 0204 	orr.w	r2, r3, #4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a684:	2210      	movs	r2, #16
 800a686:	409a      	lsls	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4013      	ands	r3, r2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d043      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0308 	and.w	r3, r3, #8
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d03c      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a2:	2210      	movs	r2, #16
 800a6a4:	409a      	lsls	r2, r3
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d018      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d108      	bne.n	800a6d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d024      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
 800a6d6:	e01f      	b.n	800a718 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01b      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	4798      	blx	r3
 800a6e8:	e016      	b.n	800a718 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d107      	bne.n	800a708 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0208 	bic.w	r2, r2, #8
 800a706:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71c:	2220      	movs	r2, #32
 800a71e:	409a      	lsls	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4013      	ands	r3, r2
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 808e 	beq.w	800a846 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 8086 	beq.w	800a846 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a73e:	2220      	movs	r2, #32
 800a740:	409a      	lsls	r2, r3
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b05      	cmp	r3, #5
 800a750:	d136      	bne.n	800a7c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0216 	bic.w	r2, r2, #22
 800a760:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	695a      	ldr	r2, [r3, #20]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a770:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d103      	bne.n	800a782 <HAL_DMA_IRQHandler+0x1da>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 0208 	bic.w	r2, r2, #8
 800a790:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a796:	223f      	movs	r2, #63	; 0x3f
 800a798:	409a      	lsls	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d07d      	beq.n	800a8b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
        }
        return;
 800a7be:	e078      	b.n	800a8b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01c      	beq.n	800a808 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d108      	bne.n	800a7ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d030      	beq.n	800a846 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	4798      	blx	r3
 800a7ec:	e02b      	b.n	800a846 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d027      	beq.n	800a846 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	e022      	b.n	800a846 <HAL_DMA_IRQHandler+0x29e>
 800a800:	2000000c 	.word	0x2000000c
 800a804:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10f      	bne.n	800a836 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0210 	bic.w	r2, r2, #16
 800a824:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d032      	beq.n	800a8b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d022      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2205      	movs	r2, #5
 800a85e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 0201 	bic.w	r2, r2, #1
 800a870:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	3301      	adds	r3, #1
 800a876:	60bb      	str	r3, [r7, #8]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d307      	bcc.n	800a88e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f2      	bne.n	800a872 <HAL_DMA_IRQHandler+0x2ca>
 800a88c:	e000      	b.n	800a890 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a88e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d005      	beq.n	800a8b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
 800a8b0:	e000      	b.n	800a8b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a8b2:	bf00      	nop
    }
  }
}
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop

0800a8bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	2b40      	cmp	r3, #64	; 0x40
 800a8e8:	d108      	bne.n	800a8fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a8fa:	e007      	b.n	800a90c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	60da      	str	r2, [r3, #12]
}
 800a90c:	bf00      	nop
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	3b10      	subs	r3, #16
 800a928:	4a14      	ldr	r2, [pc, #80]	; (800a97c <DMA_CalcBaseAndBitshift+0x64>)
 800a92a:	fba2 2303 	umull	r2, r3, r2, r3
 800a92e:	091b      	lsrs	r3, r3, #4
 800a930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a932:	4a13      	ldr	r2, [pc, #76]	; (800a980 <DMA_CalcBaseAndBitshift+0x68>)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4413      	add	r3, r2
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b03      	cmp	r3, #3
 800a944:	d909      	bls.n	800a95a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a94e:	f023 0303 	bic.w	r3, r3, #3
 800a952:	1d1a      	adds	r2, r3, #4
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	659a      	str	r2, [r3, #88]	; 0x58
 800a958:	e007      	b.n	800a96a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a962:	f023 0303 	bic.w	r3, r3, #3
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	aaaaaaab 	.word	0xaaaaaaab
 800a980:	08012844 	.word	0x08012844

0800a984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d11f      	bne.n	800a9de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d855      	bhi.n	800aa50 <DMA_CheckFifoParam+0xcc>
 800a9a4:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <DMA_CheckFifoParam+0x28>)
 800a9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9aa:	bf00      	nop
 800a9ac:	0800a9bd 	.word	0x0800a9bd
 800a9b0:	0800a9cf 	.word	0x0800a9cf
 800a9b4:	0800a9bd 	.word	0x0800a9bd
 800a9b8:	0800aa51 	.word	0x0800aa51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d045      	beq.n	800aa54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9cc:	e042      	b.n	800aa54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9d6:	d13f      	bne.n	800aa58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9dc:	e03c      	b.n	800aa58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9e6:	d121      	bne.n	800aa2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d836      	bhi.n	800aa5c <DMA_CheckFifoParam+0xd8>
 800a9ee:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <DMA_CheckFifoParam+0x70>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa05 	.word	0x0800aa05
 800a9f8:	0800aa0b 	.word	0x0800aa0b
 800a9fc:	0800aa05 	.word	0x0800aa05
 800aa00:	0800aa1d 	.word	0x0800aa1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	73fb      	strb	r3, [r7, #15]
      break;
 800aa08:	e02f      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d024      	beq.n	800aa60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa1a:	e021      	b.n	800aa60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa24:	d11e      	bne.n	800aa64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa2a:	e01b      	b.n	800aa64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d902      	bls.n	800aa38 <DMA_CheckFifoParam+0xb4>
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d003      	beq.n	800aa3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa36:	e018      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa3c:	e015      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00e      	beq.n	800aa68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa4e:	e00b      	b.n	800aa68 <DMA_CheckFifoParam+0xe4>
      break;
 800aa50:	bf00      	nop
 800aa52:	e00a      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa54:	bf00      	nop
 800aa56:	e008      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa58:	bf00      	nop
 800aa5a:	e006      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa5c:	bf00      	nop
 800aa5e:	e004      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa60:	bf00      	nop
 800aa62:	e002      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;   
 800aa64:	bf00      	nop
 800aa66:	e000      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa68:	bf00      	nop
    }
  } 
  
  return status; 
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa8a:	4b23      	ldr	r3, [pc, #140]	; (800ab18 <HAL_FLASH_Program+0xa0>)
 800aa8c:	7e1b      	ldrb	r3, [r3, #24]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <HAL_FLASH_Program+0x1e>
 800aa92:	2302      	movs	r3, #2
 800aa94:	e03b      	b.n	800ab0e <HAL_FLASH_Program+0x96>
 800aa96:	4b20      	ldr	r3, [pc, #128]	; (800ab18 <HAL_FLASH_Program+0xa0>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aa9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaa0:	f000 f870 	bl	800ab84 <FLASH_WaitForLastOperation>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d12b      	bne.n	800ab06 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800aab4:	783b      	ldrb	r3, [r7, #0]
 800aab6:	4619      	mov	r1, r3
 800aab8:	68b8      	ldr	r0, [r7, #8]
 800aaba:	f000 f917 	bl	800acec <FLASH_Program_Byte>
 800aabe:	e016      	b.n	800aaee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d105      	bne.n	800aad2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800aac6:	883b      	ldrh	r3, [r7, #0]
 800aac8:	4619      	mov	r1, r3
 800aaca:	68b8      	ldr	r0, [r7, #8]
 800aacc:	f000 f8ea 	bl	800aca4 <FLASH_Program_HalfWord>
 800aad0:	e00d      	b.n	800aaee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d105      	bne.n	800aae4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	4619      	mov	r1, r3
 800aadc:	68b8      	ldr	r0, [r7, #8]
 800aade:	f000 f8bf 	bl	800ac60 <FLASH_Program_Word>
 800aae2:	e004      	b.n	800aaee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800aae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aae8:	68b8      	ldr	r0, [r7, #8]
 800aaea:	f000 f88b 	bl	800ac04 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aaee:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaf2:	f000 f847 	bl	800ab84 <FLASH_WaitForLastOperation>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800aafa:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <HAL_FLASH_Program+0xa4>)
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	4a07      	ldr	r2, [pc, #28]	; (800ab1c <HAL_FLASH_Program+0xa4>)
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab06:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <HAL_FLASH_Program+0xa0>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	2000412c 	.word	0x2000412c
 800ab1c:	40023c00 	.word	0x40023c00

0800ab20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab2a:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da0b      	bge.n	800ab4a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab34:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <HAL_FLASH_Unlock+0x3c>)
 800ab36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab3a:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <HAL_FLASH_Unlock+0x40>)
 800ab3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab3e:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da01      	bge.n	800ab4a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	40023c00 	.word	0x40023c00
 800ab5c:	45670123 	.word	0x45670123
 800ab60:	cdef89ab 	.word	0xcdef89ab

0800ab64 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ab64:	b480      	push	{r7}
 800ab66:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800ab68:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <HAL_FLASH_Lock+0x1c>)
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	4a04      	ldr	r2, [pc, #16]	; (800ab80 <HAL_FLASH_Lock+0x1c>)
 800ab6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab72:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	40023c00 	.word	0x40023c00

0800ab84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ab90:	4b1a      	ldr	r3, [pc, #104]	; (800abfc <FLASH_WaitForLastOperation+0x78>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ab96:	f7fe f92f 	bl	8008df8 <HAL_GetTick>
 800ab9a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ab9c:	e010      	b.n	800abc0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba4:	d00c      	beq.n	800abc0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d007      	beq.n	800abbc <FLASH_WaitForLastOperation+0x38>
 800abac:	f7fe f924 	bl	8008df8 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d201      	bcs.n	800abc0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e019      	b.n	800abf4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800abc0:	4b0f      	ldr	r3, [pc, #60]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e8      	bne.n	800ab9e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800abcc:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800abd8:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abda:	2201      	movs	r2, #1
 800abdc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800abde:	4b08      	ldr	r3, [pc, #32]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800abea:	f000 f8a1 	bl	800ad30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
  
}  
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	2000412c 	.word	0x2000412c
 800ac00:	40023c00 	.word	0x40023c00

0800ac04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ac04:	b490      	push	{r4, r7}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac10:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	4a11      	ldr	r2, [pc, #68]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ac1c:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	4a0e      	ldr	r2, [pc, #56]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac28:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac2e:	f043 0301 	orr.w	r3, r3, #1
 800ac32:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ac3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac3e:	f04f 0300 	mov.w	r3, #0
 800ac42:	f04f 0400 	mov.w	r4, #0
 800ac46:	0013      	movs	r3, r2
 800ac48:	2400      	movs	r4, #0
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	3204      	adds	r2, #4
 800ac4e:	6013      	str	r3, [r2, #0]
}
 800ac50:	bf00      	nop
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bc90      	pop	{r4, r7}
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	40023c00 	.word	0x40023c00

0800ac60 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	4a0c      	ldr	r2, [pc, #48]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ac76:	4b0a      	ldr	r3, [pc, #40]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	4a09      	ldr	r2, [pc, #36]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac82:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	4a06      	ldr	r2, [pc, #24]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac88:	f043 0301 	orr.w	r3, r3, #1
 800ac8c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	601a      	str	r2, [r3, #0]
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	40023c00 	.word	0x40023c00

0800aca4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800acb0:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	4a0c      	ldr	r2, [pc, #48]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	4a09      	ldr	r2, [pc, #36]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acc8:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	4a06      	ldr	r2, [pc, #24]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acce:	f043 0301 	orr.w	r3, r3, #1
 800acd2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	887a      	ldrh	r2, [r7, #2]
 800acd8:	801a      	strh	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	40023c00 	.word	0x40023c00

0800acec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	4a0b      	ldr	r2, [pc, #44]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800acfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ad04:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad06:	4a09      	ldr	r2, [pc, #36]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad0c:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	4a06      	ldr	r2, [pc, #24]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad12:	f043 0301 	orr.w	r3, r3, #1
 800ad16:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	78fa      	ldrb	r2, [r7, #3]
 800ad1c:	701a      	strb	r2, [r3, #0]
}
 800ad1e:	bf00      	nop
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	40023c00 	.word	0x40023c00

0800ad30 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ad34:	4b2f      	ldr	r3, [pc, #188]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f003 0310 	and.w	r3, r3, #16
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d008      	beq.n	800ad52 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ad40:	4b2d      	ldr	r3, [pc, #180]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	f043 0310 	orr.w	r3, r3, #16
 800ad48:	4a2b      	ldr	r2, [pc, #172]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad4a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ad4c:	4b29      	ldr	r3, [pc, #164]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad4e:	2210      	movs	r2, #16
 800ad50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ad52:	4b28      	ldr	r3, [pc, #160]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d008      	beq.n	800ad70 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ad5e:	4b26      	ldr	r3, [pc, #152]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	f043 0308 	orr.w	r3, r3, #8
 800ad66:	4a24      	ldr	r2, [pc, #144]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad68:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ad6a:	4b22      	ldr	r3, [pc, #136]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ad70:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d008      	beq.n	800ad8e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ad7c:	4b1e      	ldr	r3, [pc, #120]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad7e:	69db      	ldr	r3, [r3, #28]
 800ad80:	f043 0304 	orr.w	r3, r3, #4
 800ad84:	4a1c      	ldr	r2, [pc, #112]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ad88:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad8a:	2240      	movs	r2, #64	; 0x40
 800ad8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ad8e:	4b19      	ldr	r3, [pc, #100]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d008      	beq.n	800adac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ad9a:	4b17      	ldr	r3, [pc, #92]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	f043 0302 	orr.w	r3, r3, #2
 800ada2:	4a15      	ldr	r2, [pc, #84]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ada4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ada6:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ada8:	2280      	movs	r2, #128	; 0x80
 800adaa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800adac:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d009      	beq.n	800adcc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800adb8:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	f043 0301 	orr.w	r3, r3, #1
 800adc0:	4a0d      	ldr	r2, [pc, #52]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800adc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800adc4:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800adc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f003 0302 	and.w	r3, r3, #2
 800add4:	2b00      	cmp	r3, #0
 800add6:	d008      	beq.n	800adea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800add8:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	f043 0320 	orr.w	r3, r3, #32
 800ade0:	4a05      	ldr	r2, [pc, #20]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ade2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ade4:	4b03      	ldr	r3, [pc, #12]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ade6:	2202      	movs	r2, #2
 800ade8:	60da      	str	r2, [r3, #12]
  }
}
 800adea:	bf00      	nop
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40023c00 	.word	0x40023c00
 800adf8:	2000412c 	.word	0x2000412c

0800adfc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae0e:	4b31      	ldr	r3, [pc, #196]	; (800aed4 <HAL_FLASHEx_Erase+0xd8>)
 800ae10:	7e1b      	ldrb	r3, [r3, #24]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d101      	bne.n	800ae1a <HAL_FLASHEx_Erase+0x1e>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e058      	b.n	800aecc <HAL_FLASHEx_Erase+0xd0>
 800ae1a:	4b2e      	ldr	r3, [pc, #184]	; (800aed4 <HAL_FLASHEx_Erase+0xd8>)
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae20:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae24:	f7ff feae 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d148      	bne.n	800aec4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	f04f 32ff 	mov.w	r2, #4294967295
 800ae38:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d115      	bne.n	800ae6e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f000 f844 	bl	800aedc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae54:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae58:	f7ff fe94 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ae60:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	4a1c      	ldr	r2, [pc, #112]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae66:	f023 0304 	bic.w	r3, r3, #4
 800ae6a:	6113      	str	r3, [r2, #16]
 800ae6c:	e028      	b.n	800aec0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	60bb      	str	r3, [r7, #8]
 800ae74:	e01c      	b.n	800aeb0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	68b8      	ldr	r0, [r7, #8]
 800ae80:	f000 f850 	bl	800af24 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae84:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae88:	f7ff fe7c 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ae90:	4b11      	ldr	r3, [pc, #68]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	4a10      	ldr	r2, [pc, #64]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae96:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ae9a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	601a      	str	r2, [r3, #0]
          break;
 800aea8:	e00a      	b.n	800aec0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60bb      	str	r3, [r7, #8]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68da      	ldr	r2, [r3, #12]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d3da      	bcc.n	800ae76 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800aec0:	f000 f878 	bl	800afb4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aec4:	4b03      	ldr	r3, [pc, #12]	; (800aed4 <HAL_FLASHEx_Erase+0xd8>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	761a      	strb	r2, [r3, #24]

  return status;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	2000412c 	.word	0x2000412c
 800aed8:	40023c00 	.word	0x40023c00

0800aedc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aee8:	4b0d      	ldr	r3, [pc, #52]	; (800af20 <FLASH_MassErase+0x44>)
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	4a0c      	ldr	r2, [pc, #48]	; (800af20 <FLASH_MassErase+0x44>)
 800aeee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800aef4:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <FLASH_MassErase+0x44>)
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	4a09      	ldr	r2, [pc, #36]	; (800af20 <FLASH_MassErase+0x44>)
 800aefa:	f043 0304 	orr.w	r3, r3, #4
 800aefe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800af00:	4b07      	ldr	r3, [pc, #28]	; (800af20 <FLASH_MassErase+0x44>)
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	021b      	lsls	r3, r3, #8
 800af08:	4313      	orrs	r3, r2
 800af0a:	4a05      	ldr	r2, [pc, #20]	; (800af20 <FLASH_MassErase+0x44>)
 800af0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af10:	6113      	str	r3, [r2, #16]
}
 800af12:	bf00      	nop
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	40023c00 	.word	0x40023c00

0800af24 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e010      	b.n	800af62 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d103      	bne.n	800af4e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800af46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	e009      	b.n	800af62 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800af4e:	78fb      	ldrb	r3, [r7, #3]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d103      	bne.n	800af5c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800af54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	e002      	b.n	800af62 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800af5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af60:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af62:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	4a12      	ldr	r2, [pc, #72]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800af6e:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af70:	691a      	ldr	r2, [r3, #16]
 800af72:	490f      	ldr	r1, [pc, #60]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4313      	orrs	r3, r2
 800af78:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	4a0c      	ldr	r2, [pc, #48]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800af84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800af86:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af88:	691a      	ldr	r2, [r3, #16]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	4313      	orrs	r3, r2
 800af90:	4a07      	ldr	r2, [pc, #28]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af92:	f043 0302 	orr.w	r3, r3, #2
 800af96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	4a04      	ldr	r2, [pc, #16]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa2:	6113      	str	r3, [r2, #16]
}
 800afa4:	bf00      	nop
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	40023c00 	.word	0x40023c00

0800afb4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800afb8:	4b20      	ldr	r3, [pc, #128]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d017      	beq.n	800aff4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800afc4:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a1c      	ldr	r2, [pc, #112]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800afd0:	4b1a      	ldr	r3, [pc, #104]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a19      	ldr	r2, [pc, #100]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	4b17      	ldr	r3, [pc, #92]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a16      	ldr	r2, [pc, #88]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afe6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800afe8:	4b14      	ldr	r3, [pc, #80]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a13      	ldr	r2, [pc, #76]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aff2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800aff4:	4b11      	ldr	r3, [pc, #68]	; (800b03c <FLASH_FlushCaches+0x88>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800affc:	2b00      	cmp	r3, #0
 800affe:	d017      	beq.n	800b030 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b000:	4b0e      	ldr	r3, [pc, #56]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a0d      	ldr	r2, [pc, #52]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b00a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b00c:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a0a      	ldr	r2, [pc, #40]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b012:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	4b08      	ldr	r3, [pc, #32]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a07      	ldr	r2, [pc, #28]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b01e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b022:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b024:	4b05      	ldr	r3, [pc, #20]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a04      	ldr	r2, [pc, #16]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b02a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b02e:	6013      	str	r3, [r2, #0]
  }
}
 800b030:	bf00      	nop
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40023c00 	.word	0x40023c00

0800b040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b040:	b480      	push	{r7}
 800b042:	b089      	sub	sp, #36	; 0x24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b04e:	2300      	movs	r3, #0
 800b050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b052:	2300      	movs	r3, #0
 800b054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b056:	2300      	movs	r3, #0
 800b058:	61fb      	str	r3, [r7, #28]
 800b05a:	e165      	b.n	800b328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b05c:	2201      	movs	r2, #1
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	4013      	ands	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	429a      	cmp	r2, r3
 800b076:	f040 8154 	bne.w	800b322 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d003      	beq.n	800b08a <HAL_GPIO_Init+0x4a>
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b12      	cmp	r3, #18
 800b088:	d123      	bne.n	800b0d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	08da      	lsrs	r2, r3, #3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3208      	adds	r2, #8
 800b092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	f003 0307 	and.w	r3, r3, #7
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	220f      	movs	r2, #15
 800b0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a6:	43db      	mvns	r3, r3
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b0be:	69ba      	ldr	r2, [r7, #24]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	08da      	lsrs	r2, r3, #3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3208      	adds	r2, #8
 800b0cc:	69b9      	ldr	r1, [r7, #24]
 800b0ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	005b      	lsls	r3, r3, #1
 800b0dc:	2203      	movs	r2, #3
 800b0de:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e2:	43db      	mvns	r3, r3
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f003 0203 	and.w	r2, r3, #3
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d00b      	beq.n	800b126 <HAL_GPIO_Init+0xe6>
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d007      	beq.n	800b126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b11a:	2b11      	cmp	r3, #17
 800b11c:	d003      	beq.n	800b126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	2b12      	cmp	r3, #18
 800b124:	d130      	bne.n	800b188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	2203      	movs	r2, #3
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	43db      	mvns	r3, r3
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	4013      	ands	r3, r2
 800b13c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68da      	ldr	r2, [r3, #12]
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	fa02 f303 	lsl.w	r3, r2, r3
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b15c:	2201      	movs	r2, #1
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	fa02 f303 	lsl.w	r3, r2, r3
 800b164:	43db      	mvns	r3, r3
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	4013      	ands	r3, r2
 800b16a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	091b      	lsrs	r3, r3, #4
 800b172:	f003 0201 	and.w	r2, r3, #1
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	4313      	orrs	r3, r2
 800b180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	2203      	movs	r2, #3
 800b194:	fa02 f303 	lsl.w	r3, r2, r3
 800b198:	43db      	mvns	r3, r3
 800b19a:	69ba      	ldr	r2, [r7, #24]
 800b19c:	4013      	ands	r3, r2
 800b19e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	689a      	ldr	r2, [r3, #8]
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80ae 	beq.w	800b322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]
 800b1ca:	4b5c      	ldr	r3, [pc, #368]	; (800b33c <HAL_GPIO_Init+0x2fc>)
 800b1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ce:	4a5b      	ldr	r2, [pc, #364]	; (800b33c <HAL_GPIO_Init+0x2fc>)
 800b1d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1d4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1d6:	4b59      	ldr	r3, [pc, #356]	; (800b33c <HAL_GPIO_Init+0x2fc>)
 800b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b1e2:	4a57      	ldr	r2, [pc, #348]	; (800b340 <HAL_GPIO_Init+0x300>)
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	089b      	lsrs	r3, r3, #2
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	220f      	movs	r2, #15
 800b1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fe:	43db      	mvns	r3, r3
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	4013      	ands	r3, r2
 800b204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a4e      	ldr	r2, [pc, #312]	; (800b344 <HAL_GPIO_Init+0x304>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d025      	beq.n	800b25a <HAL_GPIO_Init+0x21a>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a4d      	ldr	r2, [pc, #308]	; (800b348 <HAL_GPIO_Init+0x308>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d01f      	beq.n	800b256 <HAL_GPIO_Init+0x216>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a4c      	ldr	r2, [pc, #304]	; (800b34c <HAL_GPIO_Init+0x30c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d019      	beq.n	800b252 <HAL_GPIO_Init+0x212>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a4b      	ldr	r2, [pc, #300]	; (800b350 <HAL_GPIO_Init+0x310>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d013      	beq.n	800b24e <HAL_GPIO_Init+0x20e>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a4a      	ldr	r2, [pc, #296]	; (800b354 <HAL_GPIO_Init+0x314>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d00d      	beq.n	800b24a <HAL_GPIO_Init+0x20a>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a49      	ldr	r2, [pc, #292]	; (800b358 <HAL_GPIO_Init+0x318>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d007      	beq.n	800b246 <HAL_GPIO_Init+0x206>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a48      	ldr	r2, [pc, #288]	; (800b35c <HAL_GPIO_Init+0x31c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d101      	bne.n	800b242 <HAL_GPIO_Init+0x202>
 800b23e:	2306      	movs	r3, #6
 800b240:	e00c      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b242:	2307      	movs	r3, #7
 800b244:	e00a      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b246:	2305      	movs	r3, #5
 800b248:	e008      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b24a:	2304      	movs	r3, #4
 800b24c:	e006      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b24e:	2303      	movs	r3, #3
 800b250:	e004      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b252:	2302      	movs	r3, #2
 800b254:	e002      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b256:	2301      	movs	r3, #1
 800b258:	e000      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b25a:	2300      	movs	r3, #0
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	f002 0203 	and.w	r2, r2, #3
 800b262:	0092      	lsls	r2, r2, #2
 800b264:	4093      	lsls	r3, r2
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	4313      	orrs	r3, r2
 800b26a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b26c:	4934      	ldr	r1, [pc, #208]	; (800b340 <HAL_GPIO_Init+0x300>)
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	089b      	lsrs	r3, r3, #2
 800b272:	3302      	adds	r3, #2
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b27a:	4b39      	ldr	r3, [pc, #228]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	43db      	mvns	r3, r3
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	4013      	ands	r3, r2
 800b288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b29e:	4a30      	ldr	r2, [pc, #192]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b2a4:	4b2e      	ldr	r3, [pc, #184]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	43db      	mvns	r3, r3
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b2c8:	4a25      	ldr	r2, [pc, #148]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	43db      	mvns	r3, r3
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d003      	beq.n	800b2f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b2f2:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b2f8:	4b19      	ldr	r3, [pc, #100]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	43db      	mvns	r3, r3
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	4013      	ands	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	4313      	orrs	r3, r2
 800b31a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b31c:	4a10      	ldr	r2, [pc, #64]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	3301      	adds	r3, #1
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	2b0f      	cmp	r3, #15
 800b32c:	f67f ae96 	bls.w	800b05c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b330:	bf00      	nop
 800b332:	3724      	adds	r7, #36	; 0x24
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	40023800 	.word	0x40023800
 800b340:	40013800 	.word	0x40013800
 800b344:	40020000 	.word	0x40020000
 800b348:	40020400 	.word	0x40020400
 800b34c:	40020800 	.word	0x40020800
 800b350:	40020c00 	.word	0x40020c00
 800b354:	40021000 	.word	0x40021000
 800b358:	40021400 	.word	0x40021400
 800b35c:	40021800 	.word	0x40021800
 800b360:	40013c00 	.word	0x40013c00

0800b364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	691a      	ldr	r2, [r3, #16]
 800b374:	887b      	ldrh	r3, [r7, #2]
 800b376:	4013      	ands	r3, r2
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b37c:	2301      	movs	r3, #1
 800b37e:	73fb      	strb	r3, [r7, #15]
 800b380:	e001      	b.n	800b386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b3a4:	787b      	ldrb	r3, [r7, #1]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b3aa:	887a      	ldrh	r2, [r7, #2]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b3b0:	e003      	b.n	800b3ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b3b2:	887b      	ldrh	r3, [r7, #2]
 800b3b4:	041a      	lsls	r2, r3, #16
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	619a      	str	r2, [r3, #24]
}
 800b3ba:	bf00      	nop
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
	...

0800b3c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e0ca      	b.n	800b572 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3dc:	4b67      	ldr	r3, [pc, #412]	; (800b57c <HAL_RCC_ClockConfig+0x1b4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 030f 	and.w	r3, r3, #15
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d90c      	bls.n	800b404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ea:	4b64      	ldr	r3, [pc, #400]	; (800b57c <HAL_RCC_ClockConfig+0x1b4>)
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	b2d2      	uxtb	r2, r2
 800b3f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3f2:	4b62      	ldr	r3, [pc, #392]	; (800b57c <HAL_RCC_ClockConfig+0x1b4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 030f 	and.w	r3, r3, #15
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d001      	beq.n	800b404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e0b6      	b.n	800b572 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0302 	and.w	r3, r3, #2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d020      	beq.n	800b452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b41c:	4b58      	ldr	r3, [pc, #352]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	4a57      	ldr	r2, [pc, #348]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 0308 	and.w	r3, r3, #8
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b434:	4b52      	ldr	r3, [pc, #328]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	4a51      	ldr	r2, [pc, #324]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b43a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b43e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b440:	4b4f      	ldr	r3, [pc, #316]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	494c      	ldr	r1, [pc, #304]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d044      	beq.n	800b4e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d107      	bne.n	800b476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b466:	4b46      	ldr	r3, [pc, #280]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d119      	bne.n	800b4a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e07d      	b.n	800b572 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d003      	beq.n	800b486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b482:	2b03      	cmp	r3, #3
 800b484:	d107      	bne.n	800b496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b486:	4b3e      	ldr	r3, [pc, #248]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d109      	bne.n	800b4a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e06d      	b.n	800b572 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b496:	4b3a      	ldr	r3, [pc, #232]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0302 	and.w	r3, r3, #2
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e065      	b.n	800b572 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b4a6:	4b36      	ldr	r3, [pc, #216]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f023 0203 	bic.w	r2, r3, #3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	4933      	ldr	r1, [pc, #204]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4b8:	f7fd fc9e 	bl	8008df8 <HAL_GetTick>
 800b4bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4be:	e00a      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4c0:	f7fd fc9a 	bl	8008df8 <HAL_GetTick>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d901      	bls.n	800b4d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e04d      	b.n	800b572 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4d6:	4b2a      	ldr	r3, [pc, #168]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	f003 020c 	and.w	r2, r3, #12
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d1eb      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4e8:	4b24      	ldr	r3, [pc, #144]	; (800b57c <HAL_RCC_ClockConfig+0x1b4>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 030f 	and.w	r3, r3, #15
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d20c      	bcs.n	800b510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4f6:	4b21      	ldr	r3, [pc, #132]	; (800b57c <HAL_RCC_ClockConfig+0x1b4>)
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4fe:	4b1f      	ldr	r3, [pc, #124]	; (800b57c <HAL_RCC_ClockConfig+0x1b4>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d001      	beq.n	800b510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e030      	b.n	800b572 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d008      	beq.n	800b52e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b51c:	4b18      	ldr	r3, [pc, #96]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	4915      	ldr	r1, [pc, #84]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0308 	and.w	r3, r3, #8
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b53a:	4b11      	ldr	r3, [pc, #68]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	490d      	ldr	r1, [pc, #52]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b54e:	f000 f851 	bl	800b5f4 <HAL_RCC_GetSysClockFreq>
 800b552:	4601      	mov	r1, r0
 800b554:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <HAL_RCC_ClockConfig+0x1b8>)
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	091b      	lsrs	r3, r3, #4
 800b55a:	f003 030f 	and.w	r3, r3, #15
 800b55e:	4a09      	ldr	r2, [pc, #36]	; (800b584 <HAL_RCC_ClockConfig+0x1bc>)
 800b560:	5cd3      	ldrb	r3, [r2, r3]
 800b562:	fa21 f303 	lsr.w	r3, r1, r3
 800b566:	4a08      	ldr	r2, [pc, #32]	; (800b588 <HAL_RCC_ClockConfig+0x1c0>)
 800b568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b56a:	2000      	movs	r0, #0
 800b56c:	f7fd fc00 	bl	8008d70 <HAL_InitTick>

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	40023c00 	.word	0x40023c00
 800b580:	40023800 	.word	0x40023800
 800b584:	08026104 	.word	0x08026104
 800b588:	2000000c 	.word	0x2000000c

0800b58c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b590:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b592:	681b      	ldr	r3, [r3, #0]
}
 800b594:	4618      	mov	r0, r3
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	2000000c 	.word	0x2000000c

0800b5a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b5a8:	f7ff fff0 	bl	800b58c <HAL_RCC_GetHCLKFreq>
 800b5ac:	4601      	mov	r1, r0
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	0a9b      	lsrs	r3, r3, #10
 800b5b4:	f003 0307 	and.w	r3, r3, #7
 800b5b8:	4a03      	ldr	r2, [pc, #12]	; (800b5c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5ba:	5cd3      	ldrb	r3, [r2, r3]
 800b5bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	40023800 	.word	0x40023800
 800b5c8:	08026114 	.word	0x08026114

0800b5cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b5d0:	f7ff ffdc 	bl	800b58c <HAL_RCC_GetHCLKFreq>
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	0b5b      	lsrs	r3, r3, #13
 800b5dc:	f003 0307 	and.w	r3, r3, #7
 800b5e0:	4a03      	ldr	r2, [pc, #12]	; (800b5f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5e2:	5cd3      	ldrb	r3, [r2, r3]
 800b5e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	40023800 	.word	0x40023800
 800b5f0:	08026114 	.word	0x08026114

0800b5f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b602:	2300      	movs	r3, #0
 800b604:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b60e:	4bc6      	ldr	r3, [pc, #792]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f003 030c 	and.w	r3, r3, #12
 800b616:	2b0c      	cmp	r3, #12
 800b618:	f200 817e 	bhi.w	800b918 <HAL_RCC_GetSysClockFreq+0x324>
 800b61c:	a201      	add	r2, pc, #4	; (adr r2, 800b624 <HAL_RCC_GetSysClockFreq+0x30>)
 800b61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b622:	bf00      	nop
 800b624:	0800b659 	.word	0x0800b659
 800b628:	0800b919 	.word	0x0800b919
 800b62c:	0800b919 	.word	0x0800b919
 800b630:	0800b919 	.word	0x0800b919
 800b634:	0800b65f 	.word	0x0800b65f
 800b638:	0800b919 	.word	0x0800b919
 800b63c:	0800b919 	.word	0x0800b919
 800b640:	0800b919 	.word	0x0800b919
 800b644:	0800b665 	.word	0x0800b665
 800b648:	0800b919 	.word	0x0800b919
 800b64c:	0800b919 	.word	0x0800b919
 800b650:	0800b919 	.word	0x0800b919
 800b654:	0800b7c1 	.word	0x0800b7c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b658:	4bb4      	ldr	r3, [pc, #720]	; (800b92c <HAL_RCC_GetSysClockFreq+0x338>)
 800b65a:	613b      	str	r3, [r7, #16]
       break;
 800b65c:	e15f      	b.n	800b91e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b65e:	4bb4      	ldr	r3, [pc, #720]	; (800b930 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b660:	613b      	str	r3, [r7, #16]
      break;
 800b662:	e15c      	b.n	800b91e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b664:	4bb0      	ldr	r3, [pc, #704]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b66c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b66e:	4bae      	ldr	r3, [pc, #696]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b676:	2b00      	cmp	r3, #0
 800b678:	d04a      	beq.n	800b710 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b67a:	4bab      	ldr	r3, [pc, #684]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	099b      	lsrs	r3, r3, #6
 800b680:	f04f 0400 	mov.w	r4, #0
 800b684:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b688:	f04f 0200 	mov.w	r2, #0
 800b68c:	ea03 0501 	and.w	r5, r3, r1
 800b690:	ea04 0602 	and.w	r6, r4, r2
 800b694:	4629      	mov	r1, r5
 800b696:	4632      	mov	r2, r6
 800b698:	f04f 0300 	mov.w	r3, #0
 800b69c:	f04f 0400 	mov.w	r4, #0
 800b6a0:	0154      	lsls	r4, r2, #5
 800b6a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b6a6:	014b      	lsls	r3, r1, #5
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	1b49      	subs	r1, r1, r5
 800b6ae:	eb62 0206 	sbc.w	r2, r2, r6
 800b6b2:	f04f 0300 	mov.w	r3, #0
 800b6b6:	f04f 0400 	mov.w	r4, #0
 800b6ba:	0194      	lsls	r4, r2, #6
 800b6bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b6c0:	018b      	lsls	r3, r1, #6
 800b6c2:	1a5b      	subs	r3, r3, r1
 800b6c4:	eb64 0402 	sbc.w	r4, r4, r2
 800b6c8:	f04f 0100 	mov.w	r1, #0
 800b6cc:	f04f 0200 	mov.w	r2, #0
 800b6d0:	00e2      	lsls	r2, r4, #3
 800b6d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b6d6:	00d9      	lsls	r1, r3, #3
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4614      	mov	r4, r2
 800b6dc:	195b      	adds	r3, r3, r5
 800b6de:	eb44 0406 	adc.w	r4, r4, r6
 800b6e2:	f04f 0100 	mov.w	r1, #0
 800b6e6:	f04f 0200 	mov.w	r2, #0
 800b6ea:	0262      	lsls	r2, r4, #9
 800b6ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b6f0:	0259      	lsls	r1, r3, #9
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f04f 0400 	mov.w	r4, #0
 800b700:	461a      	mov	r2, r3
 800b702:	4623      	mov	r3, r4
 800b704:	f7fd f992 	bl	8008a2c <__aeabi_uldivmod>
 800b708:	4603      	mov	r3, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	e049      	b.n	800b7a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b710:	4b85      	ldr	r3, [pc, #532]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	099b      	lsrs	r3, r3, #6
 800b716:	f04f 0400 	mov.w	r4, #0
 800b71a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b71e:	f04f 0200 	mov.w	r2, #0
 800b722:	ea03 0501 	and.w	r5, r3, r1
 800b726:	ea04 0602 	and.w	r6, r4, r2
 800b72a:	4629      	mov	r1, r5
 800b72c:	4632      	mov	r2, r6
 800b72e:	f04f 0300 	mov.w	r3, #0
 800b732:	f04f 0400 	mov.w	r4, #0
 800b736:	0154      	lsls	r4, r2, #5
 800b738:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b73c:	014b      	lsls	r3, r1, #5
 800b73e:	4619      	mov	r1, r3
 800b740:	4622      	mov	r2, r4
 800b742:	1b49      	subs	r1, r1, r5
 800b744:	eb62 0206 	sbc.w	r2, r2, r6
 800b748:	f04f 0300 	mov.w	r3, #0
 800b74c:	f04f 0400 	mov.w	r4, #0
 800b750:	0194      	lsls	r4, r2, #6
 800b752:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b756:	018b      	lsls	r3, r1, #6
 800b758:	1a5b      	subs	r3, r3, r1
 800b75a:	eb64 0402 	sbc.w	r4, r4, r2
 800b75e:	f04f 0100 	mov.w	r1, #0
 800b762:	f04f 0200 	mov.w	r2, #0
 800b766:	00e2      	lsls	r2, r4, #3
 800b768:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b76c:	00d9      	lsls	r1, r3, #3
 800b76e:	460b      	mov	r3, r1
 800b770:	4614      	mov	r4, r2
 800b772:	195b      	adds	r3, r3, r5
 800b774:	eb44 0406 	adc.w	r4, r4, r6
 800b778:	f04f 0100 	mov.w	r1, #0
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	02a2      	lsls	r2, r4, #10
 800b782:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b786:	0299      	lsls	r1, r3, #10
 800b788:	460b      	mov	r3, r1
 800b78a:	4614      	mov	r4, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	4621      	mov	r1, r4
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f04f 0400 	mov.w	r4, #0
 800b796:	461a      	mov	r2, r3
 800b798:	4623      	mov	r3, r4
 800b79a:	f7fd f947 	bl	8008a2c <__aeabi_uldivmod>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b7a4:	4b60      	ldr	r3, [pc, #384]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	0c1b      	lsrs	r3, r3, #16
 800b7aa:	f003 0303 	and.w	r3, r3, #3
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7bc:	613b      	str	r3, [r7, #16]
      break;
 800b7be:	e0ae      	b.n	800b91e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7c0:	4b59      	ldr	r3, [pc, #356]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7ca:	4b57      	ldr	r3, [pc, #348]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d04a      	beq.n	800b86c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7d6:	4b54      	ldr	r3, [pc, #336]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	099b      	lsrs	r3, r3, #6
 800b7dc:	f04f 0400 	mov.w	r4, #0
 800b7e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	ea03 0501 	and.w	r5, r3, r1
 800b7ec:	ea04 0602 	and.w	r6, r4, r2
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4632      	mov	r2, r6
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	f04f 0400 	mov.w	r4, #0
 800b7fc:	0154      	lsls	r4, r2, #5
 800b7fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b802:	014b      	lsls	r3, r1, #5
 800b804:	4619      	mov	r1, r3
 800b806:	4622      	mov	r2, r4
 800b808:	1b49      	subs	r1, r1, r5
 800b80a:	eb62 0206 	sbc.w	r2, r2, r6
 800b80e:	f04f 0300 	mov.w	r3, #0
 800b812:	f04f 0400 	mov.w	r4, #0
 800b816:	0194      	lsls	r4, r2, #6
 800b818:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b81c:	018b      	lsls	r3, r1, #6
 800b81e:	1a5b      	subs	r3, r3, r1
 800b820:	eb64 0402 	sbc.w	r4, r4, r2
 800b824:	f04f 0100 	mov.w	r1, #0
 800b828:	f04f 0200 	mov.w	r2, #0
 800b82c:	00e2      	lsls	r2, r4, #3
 800b82e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b832:	00d9      	lsls	r1, r3, #3
 800b834:	460b      	mov	r3, r1
 800b836:	4614      	mov	r4, r2
 800b838:	195b      	adds	r3, r3, r5
 800b83a:	eb44 0406 	adc.w	r4, r4, r6
 800b83e:	f04f 0100 	mov.w	r1, #0
 800b842:	f04f 0200 	mov.w	r2, #0
 800b846:	0262      	lsls	r2, r4, #9
 800b848:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b84c:	0259      	lsls	r1, r3, #9
 800b84e:	460b      	mov	r3, r1
 800b850:	4614      	mov	r4, r2
 800b852:	4618      	mov	r0, r3
 800b854:	4621      	mov	r1, r4
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f04f 0400 	mov.w	r4, #0
 800b85c:	461a      	mov	r2, r3
 800b85e:	4623      	mov	r3, r4
 800b860:	f7fd f8e4 	bl	8008a2c <__aeabi_uldivmod>
 800b864:	4603      	mov	r3, r0
 800b866:	460c      	mov	r4, r1
 800b868:	617b      	str	r3, [r7, #20]
 800b86a:	e049      	b.n	800b900 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b86c:	4b2e      	ldr	r3, [pc, #184]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	099b      	lsrs	r3, r3, #6
 800b872:	f04f 0400 	mov.w	r4, #0
 800b876:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b87a:	f04f 0200 	mov.w	r2, #0
 800b87e:	ea03 0501 	and.w	r5, r3, r1
 800b882:	ea04 0602 	and.w	r6, r4, r2
 800b886:	4629      	mov	r1, r5
 800b888:	4632      	mov	r2, r6
 800b88a:	f04f 0300 	mov.w	r3, #0
 800b88e:	f04f 0400 	mov.w	r4, #0
 800b892:	0154      	lsls	r4, r2, #5
 800b894:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b898:	014b      	lsls	r3, r1, #5
 800b89a:	4619      	mov	r1, r3
 800b89c:	4622      	mov	r2, r4
 800b89e:	1b49      	subs	r1, r1, r5
 800b8a0:	eb62 0206 	sbc.w	r2, r2, r6
 800b8a4:	f04f 0300 	mov.w	r3, #0
 800b8a8:	f04f 0400 	mov.w	r4, #0
 800b8ac:	0194      	lsls	r4, r2, #6
 800b8ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b8b2:	018b      	lsls	r3, r1, #6
 800b8b4:	1a5b      	subs	r3, r3, r1
 800b8b6:	eb64 0402 	sbc.w	r4, r4, r2
 800b8ba:	f04f 0100 	mov.w	r1, #0
 800b8be:	f04f 0200 	mov.w	r2, #0
 800b8c2:	00e2      	lsls	r2, r4, #3
 800b8c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b8c8:	00d9      	lsls	r1, r3, #3
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	195b      	adds	r3, r3, r5
 800b8d0:	eb44 0406 	adc.w	r4, r4, r6
 800b8d4:	f04f 0100 	mov.w	r1, #0
 800b8d8:	f04f 0200 	mov.w	r2, #0
 800b8dc:	02a2      	lsls	r2, r4, #10
 800b8de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b8e2:	0299      	lsls	r1, r3, #10
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f04f 0400 	mov.w	r4, #0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4623      	mov	r3, r4
 800b8f6:	f7fd f899 	bl	8008a2c <__aeabi_uldivmod>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b900:	4b09      	ldr	r3, [pc, #36]	; (800b928 <HAL_RCC_GetSysClockFreq+0x334>)
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	0f1b      	lsrs	r3, r3, #28
 800b906:	f003 0307 	and.w	r3, r3, #7
 800b90a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	fbb2 f3f3 	udiv	r3, r2, r3
 800b914:	613b      	str	r3, [r7, #16]
      break;
 800b916:	e002      	b.n	800b91e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <HAL_RCC_GetSysClockFreq+0x338>)
 800b91a:	613b      	str	r3, [r7, #16]
      break;
 800b91c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b91e:	693b      	ldr	r3, [r7, #16]
}
 800b920:	4618      	mov	r0, r3
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b928:	40023800 	.word	0x40023800
 800b92c:	00f42400 	.word	0x00f42400
 800b930:	007a1200 	.word	0x007a1200

0800b934 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 8083 	beq.w	800ba54 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b94e:	4b95      	ldr	r3, [pc, #596]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f003 030c 	and.w	r3, r3, #12
 800b956:	2b04      	cmp	r3, #4
 800b958:	d019      	beq.n	800b98e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b95a:	4b92      	ldr	r3, [pc, #584]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b962:	2b08      	cmp	r3, #8
 800b964:	d106      	bne.n	800b974 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b966:	4b8f      	ldr	r3, [pc, #572]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b96e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b972:	d00c      	beq.n	800b98e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b974:	4b8b      	ldr	r3, [pc, #556]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b97c:	2b0c      	cmp	r3, #12
 800b97e:	d112      	bne.n	800b9a6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b980:	4b88      	ldr	r3, [pc, #544]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b98c:	d10b      	bne.n	800b9a6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b98e:	4b85      	ldr	r3, [pc, #532]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d05b      	beq.n	800ba52 <HAL_RCC_OscConfig+0x11e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d157      	bne.n	800ba52 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e216      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ae:	d106      	bne.n	800b9be <HAL_RCC_OscConfig+0x8a>
 800b9b0:	4b7c      	ldr	r3, [pc, #496]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a7b      	ldr	r2, [pc, #492]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	e01d      	b.n	800b9fa <HAL_RCC_OscConfig+0xc6>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9c6:	d10c      	bne.n	800b9e2 <HAL_RCC_OscConfig+0xae>
 800b9c8:	4b76      	ldr	r3, [pc, #472]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a75      	ldr	r2, [pc, #468]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	4b73      	ldr	r3, [pc, #460]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a72      	ldr	r2, [pc, #456]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	e00b      	b.n	800b9fa <HAL_RCC_OscConfig+0xc6>
 800b9e2:	4b70      	ldr	r3, [pc, #448]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a6f      	ldr	r2, [pc, #444]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	4b6d      	ldr	r3, [pc, #436]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a6c      	ldr	r2, [pc, #432]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800b9f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d013      	beq.n	800ba2a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba02:	f7fd f9f9 	bl	8008df8 <HAL_GetTick>
 800ba06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba08:	e008      	b.n	800ba1c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba0a:	f7fd f9f5 	bl	8008df8 <HAL_GetTick>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	2b64      	cmp	r3, #100	; 0x64
 800ba16:	d901      	bls.n	800ba1c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e1db      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba1c:	4b61      	ldr	r3, [pc, #388]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d0f0      	beq.n	800ba0a <HAL_RCC_OscConfig+0xd6>
 800ba28:	e014      	b.n	800ba54 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba2a:	f7fd f9e5 	bl	8008df8 <HAL_GetTick>
 800ba2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba30:	e008      	b.n	800ba44 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba32:	f7fd f9e1 	bl	8008df8 <HAL_GetTick>
 800ba36:	4602      	mov	r2, r0
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	2b64      	cmp	r3, #100	; 0x64
 800ba3e:	d901      	bls.n	800ba44 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e1c7      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba44:	4b57      	ldr	r3, [pc, #348]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1f0      	bne.n	800ba32 <HAL_RCC_OscConfig+0xfe>
 800ba50:	e000      	b.n	800ba54 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 0302 	and.w	r3, r3, #2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d06f      	beq.n	800bb40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba60:	4b50      	ldr	r3, [pc, #320]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f003 030c 	and.w	r3, r3, #12
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d017      	beq.n	800ba9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba6c:	4b4d      	ldr	r3, [pc, #308]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba74:	2b08      	cmp	r3, #8
 800ba76:	d105      	bne.n	800ba84 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba78:	4b4a      	ldr	r3, [pc, #296]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00b      	beq.n	800ba9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba84:	4b47      	ldr	r3, [pc, #284]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba8c:	2b0c      	cmp	r3, #12
 800ba8e:	d11c      	bne.n	800baca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba90:	4b44      	ldr	r3, [pc, #272]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d116      	bne.n	800baca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba9c:	4b41      	ldr	r3, [pc, #260]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 0302 	and.w	r3, r3, #2
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d005      	beq.n	800bab4 <HAL_RCC_OscConfig+0x180>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d001      	beq.n	800bab4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e18f      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bab4:	4b3b      	ldr	r3, [pc, #236]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	4938      	ldr	r1, [pc, #224]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800bac4:	4313      	orrs	r3, r2
 800bac6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bac8:	e03a      	b.n	800bb40 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d020      	beq.n	800bb14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bad2:	4b35      	ldr	r3, [pc, #212]	; (800bba8 <HAL_RCC_OscConfig+0x274>)
 800bad4:	2201      	movs	r2, #1
 800bad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bad8:	f7fd f98e 	bl	8008df8 <HAL_GetTick>
 800badc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bade:	e008      	b.n	800baf2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bae0:	f7fd f98a 	bl	8008df8 <HAL_GetTick>
 800bae4:	4602      	mov	r2, r0
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b02      	cmp	r3, #2
 800baec:	d901      	bls.n	800baf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e170      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800baf2:	4b2c      	ldr	r3, [pc, #176]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 0302 	and.w	r3, r3, #2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0f0      	beq.n	800bae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bafe:	4b29      	ldr	r3, [pc, #164]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	4925      	ldr	r1, [pc, #148]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	600b      	str	r3, [r1, #0]
 800bb12:	e015      	b.n	800bb40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb14:	4b24      	ldr	r3, [pc, #144]	; (800bba8 <HAL_RCC_OscConfig+0x274>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb1a:	f7fd f96d 	bl	8008df8 <HAL_GetTick>
 800bb1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb20:	e008      	b.n	800bb34 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb22:	f7fd f969 	bl	8008df8 <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d901      	bls.n	800bb34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e14f      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb34:	4b1b      	ldr	r3, [pc, #108]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1f0      	bne.n	800bb22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 0308 	and.w	r3, r3, #8
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d037      	beq.n	800bbbc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d016      	beq.n	800bb82 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb54:	4b15      	ldr	r3, [pc, #84]	; (800bbac <HAL_RCC_OscConfig+0x278>)
 800bb56:	2201      	movs	r2, #1
 800bb58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb5a:	f7fd f94d 	bl	8008df8 <HAL_GetTick>
 800bb5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb60:	e008      	b.n	800bb74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb62:	f7fd f949 	bl	8008df8 <HAL_GetTick>
 800bb66:	4602      	mov	r2, r0
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d901      	bls.n	800bb74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e12f      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb74:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <HAL_RCC_OscConfig+0x270>)
 800bb76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb78:	f003 0302 	and.w	r3, r3, #2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0f0      	beq.n	800bb62 <HAL_RCC_OscConfig+0x22e>
 800bb80:	e01c      	b.n	800bbbc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb82:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <HAL_RCC_OscConfig+0x278>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb88:	f7fd f936 	bl	8008df8 <HAL_GetTick>
 800bb8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb8e:	e00f      	b.n	800bbb0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb90:	f7fd f932 	bl	8008df8 <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d908      	bls.n	800bbb0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e118      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
 800bba2:	bf00      	nop
 800bba4:	40023800 	.word	0x40023800
 800bba8:	42470000 	.word	0x42470000
 800bbac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbb0:	4b8a      	ldr	r3, [pc, #552]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bbb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb4:	f003 0302 	and.w	r3, r3, #2
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e9      	bne.n	800bb90 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 0304 	and.w	r3, r3, #4
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8097 	beq.w	800bcf8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbce:	4b83      	ldr	r3, [pc, #524]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10f      	bne.n	800bbfa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
 800bbde:	4b7f      	ldr	r3, [pc, #508]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	4a7e      	ldr	r2, [pc, #504]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bbe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbe8:	6413      	str	r3, [r2, #64]	; 0x40
 800bbea:	4b7c      	ldr	r3, [pc, #496]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbfa:	4b79      	ldr	r3, [pc, #484]	; (800bde0 <HAL_RCC_OscConfig+0x4ac>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d118      	bne.n	800bc38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc06:	4b76      	ldr	r3, [pc, #472]	; (800bde0 <HAL_RCC_OscConfig+0x4ac>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a75      	ldr	r2, [pc, #468]	; (800bde0 <HAL_RCC_OscConfig+0x4ac>)
 800bc0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc12:	f7fd f8f1 	bl	8008df8 <HAL_GetTick>
 800bc16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc18:	e008      	b.n	800bc2c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc1a:	f7fd f8ed 	bl	8008df8 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d901      	bls.n	800bc2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e0d3      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc2c:	4b6c      	ldr	r3, [pc, #432]	; (800bde0 <HAL_RCC_OscConfig+0x4ac>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0f0      	beq.n	800bc1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d106      	bne.n	800bc4e <HAL_RCC_OscConfig+0x31a>
 800bc40:	4b66      	ldr	r3, [pc, #408]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc44:	4a65      	ldr	r2, [pc, #404]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc46:	f043 0301 	orr.w	r3, r3, #1
 800bc4a:	6713      	str	r3, [r2, #112]	; 0x70
 800bc4c:	e01c      	b.n	800bc88 <HAL_RCC_OscConfig+0x354>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	2b05      	cmp	r3, #5
 800bc54:	d10c      	bne.n	800bc70 <HAL_RCC_OscConfig+0x33c>
 800bc56:	4b61      	ldr	r3, [pc, #388]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5a:	4a60      	ldr	r2, [pc, #384]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc5c:	f043 0304 	orr.w	r3, r3, #4
 800bc60:	6713      	str	r3, [r2, #112]	; 0x70
 800bc62:	4b5e      	ldr	r3, [pc, #376]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc66:	4a5d      	ldr	r2, [pc, #372]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc68:	f043 0301 	orr.w	r3, r3, #1
 800bc6c:	6713      	str	r3, [r2, #112]	; 0x70
 800bc6e:	e00b      	b.n	800bc88 <HAL_RCC_OscConfig+0x354>
 800bc70:	4b5a      	ldr	r3, [pc, #360]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc74:	4a59      	ldr	r2, [pc, #356]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc76:	f023 0301 	bic.w	r3, r3, #1
 800bc7a:	6713      	str	r3, [r2, #112]	; 0x70
 800bc7c:	4b57      	ldr	r3, [pc, #348]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc80:	4a56      	ldr	r2, [pc, #344]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bc82:	f023 0304 	bic.w	r3, r3, #4
 800bc86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d015      	beq.n	800bcbc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc90:	f7fd f8b2 	bl	8008df8 <HAL_GetTick>
 800bc94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc96:	e00a      	b.n	800bcae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc98:	f7fd f8ae 	bl	8008df8 <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d901      	bls.n	800bcae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e092      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcae:	4b4b      	ldr	r3, [pc, #300]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bcb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb2:	f003 0302 	and.w	r3, r3, #2
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d0ee      	beq.n	800bc98 <HAL_RCC_OscConfig+0x364>
 800bcba:	e014      	b.n	800bce6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcbc:	f7fd f89c 	bl	8008df8 <HAL_GetTick>
 800bcc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcc2:	e00a      	b.n	800bcda <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcc4:	f7fd f898 	bl	8008df8 <HAL_GetTick>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e07c      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcda:	4b40      	ldr	r3, [pc, #256]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1ee      	bne.n	800bcc4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d105      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bcec:	4b3b      	ldr	r3, [pc, #236]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bcee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf0:	4a3a      	ldr	r2, [pc, #232]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bcf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d068      	beq.n	800bdd2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd00:	4b36      	ldr	r3, [pc, #216]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	f003 030c 	and.w	r3, r3, #12
 800bd08:	2b08      	cmp	r3, #8
 800bd0a:	d060      	beq.n	800bdce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d145      	bne.n	800bda0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd14:	4b33      	ldr	r3, [pc, #204]	; (800bde4 <HAL_RCC_OscConfig+0x4b0>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd1a:	f7fd f86d 	bl	8008df8 <HAL_GetTick>
 800bd1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd20:	e008      	b.n	800bd34 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd22:	f7fd f869 	bl	8008df8 <HAL_GetTick>
 800bd26:	4602      	mov	r2, r0
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d901      	bls.n	800bd34 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e04f      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd34:	4b29      	ldr	r3, [pc, #164]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1f0      	bne.n	800bd22 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	69da      	ldr	r2, [r3, #28]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a1b      	ldr	r3, [r3, #32]
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4e:	019b      	lsls	r3, r3, #6
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd56:	085b      	lsrs	r3, r3, #1
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	041b      	lsls	r3, r3, #16
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	061b      	lsls	r3, r3, #24
 800bd64:	431a      	orrs	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6a:	071b      	lsls	r3, r3, #28
 800bd6c:	491b      	ldr	r1, [pc, #108]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd72:	4b1c      	ldr	r3, [pc, #112]	; (800bde4 <HAL_RCC_OscConfig+0x4b0>)
 800bd74:	2201      	movs	r2, #1
 800bd76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd78:	f7fd f83e 	bl	8008df8 <HAL_GetTick>
 800bd7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd7e:	e008      	b.n	800bd92 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd80:	f7fd f83a 	bl	8008df8 <HAL_GetTick>
 800bd84:	4602      	mov	r2, r0
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d901      	bls.n	800bd92 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e020      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd92:	4b12      	ldr	r3, [pc, #72]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0f0      	beq.n	800bd80 <HAL_RCC_OscConfig+0x44c>
 800bd9e:	e018      	b.n	800bdd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bda0:	4b10      	ldr	r3, [pc, #64]	; (800bde4 <HAL_RCC_OscConfig+0x4b0>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bda6:	f7fd f827 	bl	8008df8 <HAL_GetTick>
 800bdaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdac:	e008      	b.n	800bdc0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdae:	f7fd f823 	bl	8008df8 <HAL_GetTick>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d901      	bls.n	800bdc0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e009      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdc0:	4b06      	ldr	r3, [pc, #24]	; (800bddc <HAL_RCC_OscConfig+0x4a8>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1f0      	bne.n	800bdae <HAL_RCC_OscConfig+0x47a>
 800bdcc:	e001      	b.n	800bdd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e000      	b.n	800bdd4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	40023800 	.word	0x40023800
 800bde0:	40007000 	.word	0x40007000
 800bde4:	42470060 	.word	0x42470060

0800bde8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e056      	b.n	800bea8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d106      	bne.n	800be1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f004 ffd9 	bl	8010dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2202      	movs	r2, #2
 800be1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	431a      	orrs	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	431a      	orrs	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	431a      	orrs	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	431a      	orrs	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	ea42 0103 	orr.w	r1, r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	430a      	orrs	r2, r1
 800be70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	0c1b      	lsrs	r3, r3, #16
 800be78:	f003 0104 	and.w	r1, r3, #4
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	430a      	orrs	r2, r1
 800be86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	69da      	ldr	r2, [r3, #28]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <HAL_SPI_TransmitReceive_IT+0x20>
 800becc:	2302      	movs	r3, #2
 800bece:	e075      	b.n	800bfbc <HAL_SPI_TransmitReceive_IT+0x10c>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bede:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bee6:	7dbb      	ldrb	r3, [r7, #22]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d00d      	beq.n	800bf08 <HAL_SPI_TransmitReceive_IT+0x58>
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bef2:	d106      	bne.n	800bf02 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <HAL_SPI_TransmitReceive_IT+0x52>
 800befc:	7dbb      	ldrb	r3, [r7, #22]
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d002      	beq.n	800bf08 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800bf02:	2302      	movs	r3, #2
 800bf04:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf06:	e054      	b.n	800bfb2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d005      	beq.n	800bf1a <HAL_SPI_TransmitReceive_IT+0x6a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <HAL_SPI_TransmitReceive_IT+0x6a>
 800bf14:	887b      	ldrh	r3, [r7, #2]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d102      	bne.n	800bf20 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf1e:	e048      	b.n	800bfb2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	d003      	beq.n	800bf34 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2205      	movs	r2, #5
 800bf30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	887a      	ldrh	r2, [r7, #2]
 800bf44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	887a      	ldrh	r2, [r7, #2]
 800bf4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	887a      	ldrh	r2, [r7, #2]
 800bf56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	887a      	ldrh	r2, [r7, #2]
 800bf5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d006      	beq.n	800bf74 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	4a17      	ldr	r2, [pc, #92]	; (800bfc8 <HAL_SPI_TransmitReceive_IT+0x118>)
 800bf6a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4a17      	ldr	r2, [pc, #92]	; (800bfcc <HAL_SPI_TransmitReceive_IT+0x11c>)
 800bf70:	645a      	str	r2, [r3, #68]	; 0x44
 800bf72:	e005      	b.n	800bf80 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4a16      	ldr	r2, [pc, #88]	; (800bfd0 <HAL_SPI_TransmitReceive_IT+0x120>)
 800bf78:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	4a15      	ldr	r2, [pc, #84]	; (800bfd4 <HAL_SPI_TransmitReceive_IT+0x124>)
 800bf7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800bf8e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf9a:	2b40      	cmp	r3, #64	; 0x40
 800bf9c:	d008      	beq.n	800bfb0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	e000      	b.n	800bfb2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800bfb0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	0800c301 	.word	0x0800c301
 800bfcc:	0800c361 	.word	0x0800c361
 800bfd0:	0800c23d 	.word	0x0800c23d
 800bfd4:	0800c2a1 	.word	0x0800c2a1

0800bfd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	099b      	lsrs	r3, r3, #6
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10f      	bne.n	800c01c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00a      	beq.n	800c01c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	099b      	lsrs	r3, r3, #6
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d004      	beq.n	800c01c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	4798      	blx	r3
    return;
 800c01a:	e0d8      	b.n	800c1ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00a      	beq.n	800c03e <HAL_SPI_IRQHandler+0x66>
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	09db      	lsrs	r3, r3, #7
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d004      	beq.n	800c03e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	4798      	blx	r3
    return;
 800c03c:	e0c7      	b.n	800c1ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	095b      	lsrs	r3, r3, #5
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10c      	bne.n	800c064 <HAL_SPI_IRQHandler+0x8c>
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	099b      	lsrs	r3, r3, #6
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <HAL_SPI_IRQHandler+0x8c>
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	0a1b      	lsrs	r3, r3, #8
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 80b5 	beq.w	800c1ce <HAL_SPI_IRQHandler+0x1f6>
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	095b      	lsrs	r3, r3, #5
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 80ae 	beq.w	800c1ce <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	099b      	lsrs	r3, r3, #6
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d023      	beq.n	800c0c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c084:	b2db      	uxtb	r3, r3
 800c086:	2b03      	cmp	r3, #3
 800c088:	d011      	beq.n	800c0ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08e:	f043 0204 	orr.w	r2, r3, #4
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c096:	2300      	movs	r3, #0
 800c098:	617b      	str	r3, [r7, #20]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	617b      	str	r3, [r7, #20]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	e00b      	b.n	800c0c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	613b      	str	r3, [r7, #16]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	613b      	str	r3, [r7, #16]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	613b      	str	r3, [r7, #16]
 800c0c2:	693b      	ldr	r3, [r7, #16]
        return;
 800c0c4:	e083      	b.n	800c1ce <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	095b      	lsrs	r3, r3, #5
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d014      	beq.n	800c0fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d6:	f043 0201 	orr.w	r2, r3, #1
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60fb      	str	r3, [r7, #12]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	0a1b      	lsrs	r3, r3, #8
 800c100:	f003 0301 	and.w	r3, r3, #1
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00c      	beq.n	800c122 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10c:	f043 0208 	orr.w	r2, r3, #8
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c114:	2300      	movs	r3, #0
 800c116:	60bb      	str	r3, [r7, #8]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	60bb      	str	r3, [r7, #8]
 800c120:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c126:	2b00      	cmp	r3, #0
 800c128:	d050      	beq.n	800c1cc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c138:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	f003 0302 	and.w	r3, r3, #2
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d104      	bne.n	800c156 <HAL_SPI_IRQHandler+0x17e>
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d034      	beq.n	800c1c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f022 0203 	bic.w	r2, r2, #3
 800c164:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d011      	beq.n	800c192 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c172:	4a18      	ldr	r2, [pc, #96]	; (800c1d4 <HAL_SPI_IRQHandler+0x1fc>)
 800c174:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe f9f2 	bl	800a564 <HAL_DMA_Abort_IT>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d005      	beq.n	800c192 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c18a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c196:	2b00      	cmp	r3, #0
 800c198:	d016      	beq.n	800c1c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c19e:	4a0d      	ldr	r2, [pc, #52]	; (800c1d4 <HAL_SPI_IRQHandler+0x1fc>)
 800c1a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe f9dc 	bl	800a564 <HAL_DMA_Abort_IT>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c1be:	e003      	b.n	800c1c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f81d 	bl	800c200 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c1c6:	e000      	b.n	800c1ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c1c8:	bf00      	nop
    return;
 800c1ca:	bf00      	nop
 800c1cc:	bf00      	nop
  }
}
 800c1ce:	3720      	adds	r7, #32
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	0800c215 	.word	0x0800c215

0800c1d8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c220:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff ffe6 	bl	800c200 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c234:	bf00      	nop
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f103 020c 	add.w	r2, r3, #12
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c250:	7812      	ldrb	r2, [r2, #0]
 800c252:	b2d2      	uxtb	r2, r2
 800c254:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c264:	b29b      	uxth	r3, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	b29a      	uxth	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c272:	b29b      	uxth	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10f      	bne.n	800c298 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	685a      	ldr	r2, [r3, #4]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c286:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d102      	bne.n	800c298 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f940 	bl	800c518 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c298:	bf00      	nop
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	330c      	adds	r3, #12
 800c2b2:	7812      	ldrb	r2, [r2, #0]
 800c2b4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10f      	bne.n	800c2f8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2e6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d102      	bne.n	800c2f8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f910 	bl	800c518 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68da      	ldr	r2, [r3, #12]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c312:	b292      	uxth	r2, r2
 800c314:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	1c9a      	adds	r2, r3, #2
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c324:	b29b      	uxth	r3, r3
 800c326:	3b01      	subs	r3, #1
 800c328:	b29a      	uxth	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c332:	b29b      	uxth	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10f      	bne.n	800c358 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c346:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d102      	bne.n	800c358 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f8e0 	bl	800c518 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c358:	bf00      	nop
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36c:	881a      	ldrh	r2, [r3, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c378:	1c9a      	adds	r2, r3, #2
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c382:	b29b      	uxth	r3, r3
 800c384:	3b01      	subs	r3, #1
 800c386:	b29a      	uxth	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c390:	b29b      	uxth	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10f      	bne.n	800c3b6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3a4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f8b1 	bl	800c518 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	60b9      	str	r1, [r7, #8]
 800c3c8:	603b      	str	r3, [r7, #0]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c3ce:	e04c      	b.n	800c46a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d6:	d048      	beq.n	800c46a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c3d8:	f7fc fd0e 	bl	8008df8 <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d902      	bls.n	800c3ee <SPI_WaitFlagStateUntilTimeout+0x30>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d13d      	bne.n	800c46a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c406:	d111      	bne.n	800c42c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c410:	d004      	beq.n	800c41c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c41a:	d107      	bne.n	800c42c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c42a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c434:	d10f      	bne.n	800c456 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c466:	2303      	movs	r3, #3
 800c468:	e00f      	b.n	800c48a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	4013      	ands	r3, r2
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	429a      	cmp	r2, r3
 800c478:	bf0c      	ite	eq
 800c47a:	2301      	moveq	r3, #1
 800c47c:	2300      	movne	r3, #0
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	461a      	mov	r2, r3
 800c482:	79fb      	ldrb	r3, [r7, #7]
 800c484:	429a      	cmp	r2, r3
 800c486:	d1a3      	bne.n	800c3d0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b088      	sub	sp, #32
 800c498:	af02      	add	r7, sp, #8
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c4a0:	4b1b      	ldr	r3, [pc, #108]	; (800c510 <SPI_EndRxTxTransaction+0x7c>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a1b      	ldr	r2, [pc, #108]	; (800c514 <SPI_EndRxTxTransaction+0x80>)
 800c4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4aa:	0d5b      	lsrs	r3, r3, #21
 800c4ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c4b0:	fb02 f303 	mul.w	r3, r2, r3
 800c4b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4be:	d112      	bne.n	800c4e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2180      	movs	r1, #128	; 0x80
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7ff ff77 	bl	800c3be <SPI_WaitFlagStateUntilTimeout>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d016      	beq.n	800c504 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4da:	f043 0220 	orr.w	r2, r3, #32
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e00f      	b.n	800c506 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00a      	beq.n	800c502 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4fc:	2b80      	cmp	r3, #128	; 0x80
 800c4fe:	d0f2      	beq.n	800c4e6 <SPI_EndRxTxTransaction+0x52>
 800c500:	e000      	b.n	800c504 <SPI_EndRxTxTransaction+0x70>
        break;
 800c502:	bf00      	nop
  }

  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	2000000c 	.word	0x2000000c
 800c514:	165e9f81 	.word	0x165e9f81

0800c518 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c520:	4b35      	ldr	r3, [pc, #212]	; (800c5f8 <SPI_CloseRxTx_ISR+0xe0>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a35      	ldr	r2, [pc, #212]	; (800c5fc <SPI_CloseRxTx_ISR+0xe4>)
 800c526:	fba2 2303 	umull	r2, r3, r2, r3
 800c52a:	0a5b      	lsrs	r3, r3, #9
 800c52c:	2264      	movs	r2, #100	; 0x64
 800c52e:	fb02 f303 	mul.w	r3, r2, r3
 800c532:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c534:	f7fc fc60 	bl	8008df8 <HAL_GetTick>
 800c538:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0220 	bic.w	r2, r2, #32
 800c548:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d106      	bne.n	800c55e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c554:	f043 0220 	orr.w	r2, r3, #32
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c55c:	e009      	b.n	800c572 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	3b01      	subs	r3, #1
 800c562:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0eb      	beq.n	800c54a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	2164      	movs	r1, #100	; 0x64
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff ff8c 	bl	800c494 <SPI_EndRxTxTransaction>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d005      	beq.n	800c58e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c586:	f043 0220 	orr.w	r2, r3, #32
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10a      	bne.n	800c5ac <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	60fb      	str	r3, [r7, #12]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d115      	bne.n	800c5e0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d107      	bne.n	800c5d0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff fe05 	bl	800c1d8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c5ce:	e00e      	b.n	800c5ee <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff fe07 	bl	800c1ec <HAL_SPI_TxRxCpltCallback>
}
 800c5de:	e006      	b.n	800c5ee <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fe09 	bl	800c200 <HAL_SPI_ErrorCallback>
}
 800c5ee:	bf00      	nop
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	2000000c 	.word	0x2000000c
 800c5fc:	057619f1 	.word	0x057619f1

0800c600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	e01d      	b.n	800c64e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f004 fed6 	bl	80113d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2202      	movs	r2, #2
 800c630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3304      	adds	r3, #4
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f000 fc30 	bl	800cea4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b082      	sub	sp, #8
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e01d      	b.n	800c6a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d106      	bne.n	800c682 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f815 	bl	800c6ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2202      	movs	r2, #2
 800c686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3304      	adds	r3, #4
 800c692:	4619      	mov	r1, r3
 800c694:	4610      	mov	r0, r2
 800c696:	f000 fc05 	bl	800cea4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c6b4:	bf00      	nop
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b0c      	cmp	r3, #12
 800c6ce:	d841      	bhi.n	800c754 <HAL_TIM_PWM_Start_IT+0x94>
 800c6d0:	a201      	add	r2, pc, #4	; (adr r2, 800c6d8 <HAL_TIM_PWM_Start_IT+0x18>)
 800c6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d6:	bf00      	nop
 800c6d8:	0800c70d 	.word	0x0800c70d
 800c6dc:	0800c755 	.word	0x0800c755
 800c6e0:	0800c755 	.word	0x0800c755
 800c6e4:	0800c755 	.word	0x0800c755
 800c6e8:	0800c71f 	.word	0x0800c71f
 800c6ec:	0800c755 	.word	0x0800c755
 800c6f0:	0800c755 	.word	0x0800c755
 800c6f4:	0800c755 	.word	0x0800c755
 800c6f8:	0800c731 	.word	0x0800c731
 800c6fc:	0800c755 	.word	0x0800c755
 800c700:	0800c755 	.word	0x0800c755
 800c704:	0800c755 	.word	0x0800c755
 800c708:	0800c743 	.word	0x0800c743
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68da      	ldr	r2, [r3, #12]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f042 0202 	orr.w	r2, r2, #2
 800c71a:	60da      	str	r2, [r3, #12]
      break;
 800c71c:	e01b      	b.n	800c756 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0204 	orr.w	r2, r2, #4
 800c72c:	60da      	str	r2, [r3, #12]
      break;
 800c72e:	e012      	b.n	800c756 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68da      	ldr	r2, [r3, #12]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f042 0208 	orr.w	r2, r2, #8
 800c73e:	60da      	str	r2, [r3, #12]
      break;
 800c740:	e009      	b.n	800c756 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68da      	ldr	r2, [r3, #12]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f042 0210 	orr.w	r2, r2, #16
 800c750:	60da      	str	r2, [r3, #12]
      break;
 800c752:	e000      	b.n	800c756 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800c754:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2201      	movs	r2, #1
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fe8a 	bl	800d478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a15      	ldr	r2, [pc, #84]	; (800c7c0 <HAL_TIM_PWM_Start_IT+0x100>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d004      	beq.n	800c778 <HAL_TIM_PWM_Start_IT+0xb8>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a14      	ldr	r2, [pc, #80]	; (800c7c4 <HAL_TIM_PWM_Start_IT+0x104>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d101      	bne.n	800c77c <HAL_TIM_PWM_Start_IT+0xbc>
 800c778:	2301      	movs	r3, #1
 800c77a:	e000      	b.n	800c77e <HAL_TIM_PWM_Start_IT+0xbe>
 800c77c:	2300      	movs	r3, #0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d007      	beq.n	800c792 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f003 0307 	and.w	r3, r3, #7
 800c79c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b06      	cmp	r3, #6
 800c7a2:	d007      	beq.n	800c7b4 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f042 0201 	orr.w	r2, r2, #1
 800c7b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	40010000 	.word	0x40010000
 800c7c4:	40010400 	.word	0x40010400

0800c7c8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b0c      	cmp	r3, #12
 800c7d6:	d841      	bhi.n	800c85c <HAL_TIM_PWM_Stop_IT+0x94>
 800c7d8:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <HAL_TIM_PWM_Stop_IT+0x18>)
 800c7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7de:	bf00      	nop
 800c7e0:	0800c815 	.word	0x0800c815
 800c7e4:	0800c85d 	.word	0x0800c85d
 800c7e8:	0800c85d 	.word	0x0800c85d
 800c7ec:	0800c85d 	.word	0x0800c85d
 800c7f0:	0800c827 	.word	0x0800c827
 800c7f4:	0800c85d 	.word	0x0800c85d
 800c7f8:	0800c85d 	.word	0x0800c85d
 800c7fc:	0800c85d 	.word	0x0800c85d
 800c800:	0800c839 	.word	0x0800c839
 800c804:	0800c85d 	.word	0x0800c85d
 800c808:	0800c85d 	.word	0x0800c85d
 800c80c:	0800c85d 	.word	0x0800c85d
 800c810:	0800c84b 	.word	0x0800c84b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68da      	ldr	r2, [r3, #12]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f022 0202 	bic.w	r2, r2, #2
 800c822:	60da      	str	r2, [r3, #12]
      break;
 800c824:	e01b      	b.n	800c85e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68da      	ldr	r2, [r3, #12]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f022 0204 	bic.w	r2, r2, #4
 800c834:	60da      	str	r2, [r3, #12]
      break;
 800c836:	e012      	b.n	800c85e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68da      	ldr	r2, [r3, #12]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 0208 	bic.w	r2, r2, #8
 800c846:	60da      	str	r2, [r3, #12]
      break;
 800c848:	e009      	b.n	800c85e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68da      	ldr	r2, [r3, #12]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0210 	bic.w	r2, r2, #16
 800c858:	60da      	str	r2, [r3, #12]
      break;
 800c85a:	e000      	b.n	800c85e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800c85c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2200      	movs	r2, #0
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	4618      	mov	r0, r3
 800c868:	f000 fe06 	bl	800d478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a20      	ldr	r2, [pc, #128]	; (800c8f4 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d004      	beq.n	800c880 <HAL_TIM_PWM_Stop_IT+0xb8>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a1f      	ldr	r2, [pc, #124]	; (800c8f8 <HAL_TIM_PWM_Stop_IT+0x130>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d101      	bne.n	800c884 <HAL_TIM_PWM_Stop_IT+0xbc>
 800c880:	2301      	movs	r3, #1
 800c882:	e000      	b.n	800c886 <HAL_TIM_PWM_Stop_IT+0xbe>
 800c884:	2300      	movs	r3, #0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d017      	beq.n	800c8ba <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6a1a      	ldr	r2, [r3, #32]
 800c890:	f241 1311 	movw	r3, #4369	; 0x1111
 800c894:	4013      	ands	r3, r2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10f      	bne.n	800c8ba <HAL_TIM_PWM_Stop_IT+0xf2>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6a1a      	ldr	r2, [r3, #32]
 800c8a0:	f240 4344 	movw	r3, #1092	; 0x444
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d107      	bne.n	800c8ba <HAL_TIM_PWM_Stop_IT+0xf2>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c8b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6a1a      	ldr	r2, [r3, #32]
 800c8c0:	f241 1311 	movw	r3, #4369	; 0x1111
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10f      	bne.n	800c8ea <HAL_TIM_PWM_Stop_IT+0x122>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6a1a      	ldr	r2, [r3, #32]
 800c8d0:	f240 4344 	movw	r3, #1092	; 0x444
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d107      	bne.n	800c8ea <HAL_TIM_PWM_Stop_IT+0x122>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f022 0201 	bic.w	r2, r2, #1
 800c8e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	40010000 	.word	0x40010000
 800c8f8:	40010400 	.word	0x40010400

0800c8fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	f003 0302 	and.w	r3, r3, #2
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d122      	bne.n	800c958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f003 0302 	and.w	r3, r3, #2
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d11b      	bne.n	800c958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f06f 0202 	mvn.w	r2, #2
 800c928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	f003 0303 	and.w	r3, r3, #3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d003      	beq.n	800c946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fa92 	bl	800ce68 <HAL_TIM_IC_CaptureCallback>
 800c944:	e005      	b.n	800c952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fa84 	bl	800ce54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fa95 	bl	800ce7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	2b04      	cmp	r3, #4
 800c964:	d122      	bne.n	800c9ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	f003 0304 	and.w	r3, r3, #4
 800c970:	2b04      	cmp	r3, #4
 800c972:	d11b      	bne.n	800c9ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f06f 0204 	mvn.w	r2, #4
 800c97c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2202      	movs	r2, #2
 800c982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fa68 	bl	800ce68 <HAL_TIM_IC_CaptureCallback>
 800c998:	e005      	b.n	800c9a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fa5a 	bl	800ce54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fa6b 	bl	800ce7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	f003 0308 	and.w	r3, r3, #8
 800c9b6:	2b08      	cmp	r3, #8
 800c9b8:	d122      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	f003 0308 	and.w	r3, r3, #8
 800c9c4:	2b08      	cmp	r3, #8
 800c9c6:	d11b      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f06f 0208 	mvn.w	r2, #8
 800c9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2204      	movs	r2, #4
 800c9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	69db      	ldr	r3, [r3, #28]
 800c9de:	f003 0303 	and.w	r3, r3, #3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d003      	beq.n	800c9ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 fa3e 	bl	800ce68 <HAL_TIM_IC_CaptureCallback>
 800c9ec:	e005      	b.n	800c9fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fa30 	bl	800ce54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fa41 	bl	800ce7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f003 0310 	and.w	r3, r3, #16
 800ca0a:	2b10      	cmp	r3, #16
 800ca0c:	d122      	bne.n	800ca54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f003 0310 	and.w	r3, r3, #16
 800ca18:	2b10      	cmp	r3, #16
 800ca1a:	d11b      	bne.n	800ca54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f06f 0210 	mvn.w	r2, #16
 800ca24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2208      	movs	r2, #8
 800ca2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	69db      	ldr	r3, [r3, #28]
 800ca32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d003      	beq.n	800ca42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fa14 	bl	800ce68 <HAL_TIM_IC_CaptureCallback>
 800ca40:	e005      	b.n	800ca4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fa06 	bl	800ce54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fa17 	bl	800ce7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d10e      	bne.n	800ca80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d107      	bne.n	800ca80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f06f 0201 	mvn.w	r2, #1
 800ca78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f003 fca8 	bl	80103d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca8a:	2b80      	cmp	r3, #128	; 0x80
 800ca8c:	d10e      	bne.n	800caac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca98:	2b80      	cmp	r3, #128	; 0x80
 800ca9a:	d107      	bne.n	800caac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800caa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fe77 	bl	800d79a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab6:	2b40      	cmp	r3, #64	; 0x40
 800cab8:	d10e      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac4:	2b40      	cmp	r3, #64	; 0x40
 800cac6:	d107      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 f9dc 	bl	800ce90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	f003 0320 	and.w	r3, r3, #32
 800cae2:	2b20      	cmp	r3, #32
 800cae4:	d10e      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f003 0320 	and.w	r3, r3, #32
 800caf0:	2b20      	cmp	r3, #32
 800caf2:	d107      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f06f 0220 	mvn.w	r2, #32
 800cafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fe41 	bl	800d786 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d101      	bne.n	800cb26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cb22:	2302      	movs	r3, #2
 800cb24:	e0b4      	b.n	800cc90 <HAL_TIM_PWM_ConfigChannel+0x184>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2202      	movs	r2, #2
 800cb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b0c      	cmp	r3, #12
 800cb3a:	f200 809f 	bhi.w	800cc7c <HAL_TIM_PWM_ConfigChannel+0x170>
 800cb3e:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb44:	0800cb79 	.word	0x0800cb79
 800cb48:	0800cc7d 	.word	0x0800cc7d
 800cb4c:	0800cc7d 	.word	0x0800cc7d
 800cb50:	0800cc7d 	.word	0x0800cc7d
 800cb54:	0800cbb9 	.word	0x0800cbb9
 800cb58:	0800cc7d 	.word	0x0800cc7d
 800cb5c:	0800cc7d 	.word	0x0800cc7d
 800cb60:	0800cc7d 	.word	0x0800cc7d
 800cb64:	0800cbfb 	.word	0x0800cbfb
 800cb68:	0800cc7d 	.word	0x0800cc7d
 800cb6c:	0800cc7d 	.word	0x0800cc7d
 800cb70:	0800cc7d 	.word	0x0800cc7d
 800cb74:	0800cc3b 	.word	0x0800cc3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68b9      	ldr	r1, [r7, #8]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 fa30 	bl	800cfe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	699a      	ldr	r2, [r3, #24]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0208 	orr.w	r2, r2, #8
 800cb92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f022 0204 	bic.w	r2, r2, #4
 800cba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6999      	ldr	r1, [r3, #24]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	691a      	ldr	r2, [r3, #16]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	619a      	str	r2, [r3, #24]
      break;
 800cbb6:	e062      	b.n	800cc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68b9      	ldr	r1, [r7, #8]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 fa80 	bl	800d0c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	699a      	ldr	r2, [r3, #24]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	699a      	ldr	r2, [r3, #24]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6999      	ldr	r1, [r3, #24]
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	021a      	lsls	r2, r3, #8
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	430a      	orrs	r2, r1
 800cbf6:	619a      	str	r2, [r3, #24]
      break;
 800cbf8:	e041      	b.n	800cc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68b9      	ldr	r1, [r7, #8]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 fad5 	bl	800d1b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	69da      	ldr	r2, [r3, #28]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f042 0208 	orr.w	r2, r2, #8
 800cc14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69da      	ldr	r2, [r3, #28]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f022 0204 	bic.w	r2, r2, #4
 800cc24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	69d9      	ldr	r1, [r3, #28]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	691a      	ldr	r2, [r3, #16]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	430a      	orrs	r2, r1
 800cc36:	61da      	str	r2, [r3, #28]
      break;
 800cc38:	e021      	b.n	800cc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68b9      	ldr	r1, [r7, #8]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fb29 	bl	800d298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	69da      	ldr	r2, [r3, #28]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	69da      	ldr	r2, [r3, #28]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	69d9      	ldr	r1, [r3, #28]
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	021a      	lsls	r2, r3, #8
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	61da      	str	r2, [r3, #28]
      break;
 800cc7a:	e000      	b.n	800cc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cc7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d101      	bne.n	800ccb0 <HAL_TIM_GenerateEvent+0x18>
 800ccac:	2302      	movs	r3, #2
 800ccae:	e014      	b.n	800ccda <HAL_TIM_GenerateEvent+0x42>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2202      	movs	r2, #2
 800ccbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d101      	bne.n	800ccfe <HAL_TIM_ConfigClockSource+0x18>
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	e0a6      	b.n	800ce4c <HAL_TIM_ConfigClockSource+0x166>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2201      	movs	r2, #1
 800cd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd24:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b40      	cmp	r3, #64	; 0x40
 800cd34:	d067      	beq.n	800ce06 <HAL_TIM_ConfigClockSource+0x120>
 800cd36:	2b40      	cmp	r3, #64	; 0x40
 800cd38:	d80b      	bhi.n	800cd52 <HAL_TIM_ConfigClockSource+0x6c>
 800cd3a:	2b10      	cmp	r3, #16
 800cd3c:	d073      	beq.n	800ce26 <HAL_TIM_ConfigClockSource+0x140>
 800cd3e:	2b10      	cmp	r3, #16
 800cd40:	d802      	bhi.n	800cd48 <HAL_TIM_ConfigClockSource+0x62>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d06f      	beq.n	800ce26 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cd46:	e078      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cd48:	2b20      	cmp	r3, #32
 800cd4a:	d06c      	beq.n	800ce26 <HAL_TIM_ConfigClockSource+0x140>
 800cd4c:	2b30      	cmp	r3, #48	; 0x30
 800cd4e:	d06a      	beq.n	800ce26 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800cd50:	e073      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cd52:	2b70      	cmp	r3, #112	; 0x70
 800cd54:	d00d      	beq.n	800cd72 <HAL_TIM_ConfigClockSource+0x8c>
 800cd56:	2b70      	cmp	r3, #112	; 0x70
 800cd58:	d804      	bhi.n	800cd64 <HAL_TIM_ConfigClockSource+0x7e>
 800cd5a:	2b50      	cmp	r3, #80	; 0x50
 800cd5c:	d033      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0xe0>
 800cd5e:	2b60      	cmp	r3, #96	; 0x60
 800cd60:	d041      	beq.n	800cde6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800cd62:	e06a      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cd64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd68:	d066      	beq.n	800ce38 <HAL_TIM_ConfigClockSource+0x152>
 800cd6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd6e:	d017      	beq.n	800cda0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800cd70:	e063      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6818      	ldr	r0, [r3, #0]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	6899      	ldr	r1, [r3, #8]
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	f000 fb59 	bl	800d438 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	609a      	str	r2, [r3, #8]
      break;
 800cd9e:	e04c      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6818      	ldr	r0, [r3, #0]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	6899      	ldr	r1, [r3, #8]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f000 fb42 	bl	800d438 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	689a      	ldr	r2, [r3, #8]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cdc2:	609a      	str	r2, [r3, #8]
      break;
 800cdc4:	e039      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6818      	ldr	r0, [r3, #0]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	6859      	ldr	r1, [r3, #4]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f000 fab6 	bl	800d344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2150      	movs	r1, #80	; 0x50
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 fb0f 	bl	800d402 <TIM_ITRx_SetConfig>
      break;
 800cde4:	e029      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6818      	ldr	r0, [r3, #0]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	6859      	ldr	r1, [r3, #4]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f000 fad5 	bl	800d3a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2160      	movs	r1, #96	; 0x60
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 faff 	bl	800d402 <TIM_ITRx_SetConfig>
      break;
 800ce04:	e019      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6818      	ldr	r0, [r3, #0]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	6859      	ldr	r1, [r3, #4]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	461a      	mov	r2, r3
 800ce14:	f000 fa96 	bl	800d344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2140      	movs	r1, #64	; 0x40
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 faef 	bl	800d402 <TIM_ITRx_SetConfig>
      break;
 800ce24:	e009      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	4610      	mov	r0, r2
 800ce32:	f000 fae6 	bl	800d402 <TIM_ITRx_SetConfig>
      break;
 800ce36:	e000      	b.n	800ce3a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ce38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce5c:	bf00      	nop
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce84:	bf00      	nop
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a40      	ldr	r2, [pc, #256]	; (800cfb8 <TIM_Base_SetConfig+0x114>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d013      	beq.n	800cee4 <TIM_Base_SetConfig+0x40>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cec2:	d00f      	beq.n	800cee4 <TIM_Base_SetConfig+0x40>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4a3d      	ldr	r2, [pc, #244]	; (800cfbc <TIM_Base_SetConfig+0x118>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d00b      	beq.n	800cee4 <TIM_Base_SetConfig+0x40>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a3c      	ldr	r2, [pc, #240]	; (800cfc0 <TIM_Base_SetConfig+0x11c>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d007      	beq.n	800cee4 <TIM_Base_SetConfig+0x40>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a3b      	ldr	r2, [pc, #236]	; (800cfc4 <TIM_Base_SetConfig+0x120>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d003      	beq.n	800cee4 <TIM_Base_SetConfig+0x40>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a3a      	ldr	r2, [pc, #232]	; (800cfc8 <TIM_Base_SetConfig+0x124>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d108      	bne.n	800cef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a2f      	ldr	r2, [pc, #188]	; (800cfb8 <TIM_Base_SetConfig+0x114>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d02b      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf04:	d027      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a2c      	ldr	r2, [pc, #176]	; (800cfbc <TIM_Base_SetConfig+0x118>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d023      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a2b      	ldr	r2, [pc, #172]	; (800cfc0 <TIM_Base_SetConfig+0x11c>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d01f      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a2a      	ldr	r2, [pc, #168]	; (800cfc4 <TIM_Base_SetConfig+0x120>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d01b      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a29      	ldr	r2, [pc, #164]	; (800cfc8 <TIM_Base_SetConfig+0x124>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d017      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4a28      	ldr	r2, [pc, #160]	; (800cfcc <TIM_Base_SetConfig+0x128>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d013      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a27      	ldr	r2, [pc, #156]	; (800cfd0 <TIM_Base_SetConfig+0x12c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d00f      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4a26      	ldr	r2, [pc, #152]	; (800cfd4 <TIM_Base_SetConfig+0x130>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d00b      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a25      	ldr	r2, [pc, #148]	; (800cfd8 <TIM_Base_SetConfig+0x134>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d007      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a24      	ldr	r2, [pc, #144]	; (800cfdc <TIM_Base_SetConfig+0x138>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d003      	beq.n	800cf56 <TIM_Base_SetConfig+0xb2>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a23      	ldr	r2, [pc, #140]	; (800cfe0 <TIM_Base_SetConfig+0x13c>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d108      	bne.n	800cf68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	695b      	ldr	r3, [r3, #20]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4a0a      	ldr	r2, [pc, #40]	; (800cfb8 <TIM_Base_SetConfig+0x114>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d003      	beq.n	800cf9c <TIM_Base_SetConfig+0xf8>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a0c      	ldr	r2, [pc, #48]	; (800cfc8 <TIM_Base_SetConfig+0x124>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d103      	bne.n	800cfa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	691a      	ldr	r2, [r3, #16]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	615a      	str	r2, [r3, #20]
}
 800cfaa:	bf00      	nop
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	40010000 	.word	0x40010000
 800cfbc:	40000400 	.word	0x40000400
 800cfc0:	40000800 	.word	0x40000800
 800cfc4:	40000c00 	.word	0x40000c00
 800cfc8:	40010400 	.word	0x40010400
 800cfcc:	40014000 	.word	0x40014000
 800cfd0:	40014400 	.word	0x40014400
 800cfd4:	40014800 	.word	0x40014800
 800cfd8:	40001800 	.word	0x40001800
 800cfdc:	40001c00 	.word	0x40001c00
 800cfe0:	40002000 	.word	0x40002000

0800cfe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b087      	sub	sp, #28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	f023 0201 	bic.w	r2, r3, #1
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a1b      	ldr	r3, [r3, #32]
 800cffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f023 0303 	bic.w	r3, r3, #3
 800d01a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	4313      	orrs	r3, r2
 800d024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f023 0302 	bic.w	r3, r3, #2
 800d02c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	4313      	orrs	r3, r2
 800d036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a20      	ldr	r2, [pc, #128]	; (800d0bc <TIM_OC1_SetConfig+0xd8>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d003      	beq.n	800d048 <TIM_OC1_SetConfig+0x64>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a1f      	ldr	r2, [pc, #124]	; (800d0c0 <TIM_OC1_SetConfig+0xdc>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d10c      	bne.n	800d062 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	f023 0308 	bic.w	r3, r3, #8
 800d04e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	4313      	orrs	r3, r2
 800d058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f023 0304 	bic.w	r3, r3, #4
 800d060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a15      	ldr	r2, [pc, #84]	; (800d0bc <TIM_OC1_SetConfig+0xd8>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d003      	beq.n	800d072 <TIM_OC1_SetConfig+0x8e>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a14      	ldr	r2, [pc, #80]	; (800d0c0 <TIM_OC1_SetConfig+0xdc>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d111      	bne.n	800d096 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	695b      	ldr	r3, [r3, #20]
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	4313      	orrs	r3, r2
 800d08a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	699b      	ldr	r3, [r3, #24]
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	4313      	orrs	r3, r2
 800d094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	697a      	ldr	r2, [r7, #20]
 800d0ae:	621a      	str	r2, [r3, #32]
}
 800d0b0:	bf00      	nop
 800d0b2:	371c      	adds	r7, #28
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	40010000 	.word	0x40010000
 800d0c0:	40010400 	.word	0x40010400

0800d0c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b087      	sub	sp, #28
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	f023 0210 	bic.w	r2, r3, #16
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a1b      	ldr	r3, [r3, #32]
 800d0de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	021b      	lsls	r3, r3, #8
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	4313      	orrs	r3, r2
 800d106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f023 0320 	bic.w	r3, r3, #32
 800d10e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	011b      	lsls	r3, r3, #4
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	4313      	orrs	r3, r2
 800d11a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	4a22      	ldr	r2, [pc, #136]	; (800d1a8 <TIM_OC2_SetConfig+0xe4>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d003      	beq.n	800d12c <TIM_OC2_SetConfig+0x68>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	4a21      	ldr	r2, [pc, #132]	; (800d1ac <TIM_OC2_SetConfig+0xe8>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d10d      	bne.n	800d148 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	011b      	lsls	r3, r3, #4
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a17      	ldr	r2, [pc, #92]	; (800d1a8 <TIM_OC2_SetConfig+0xe4>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d003      	beq.n	800d158 <TIM_OC2_SetConfig+0x94>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a16      	ldr	r2, [pc, #88]	; (800d1ac <TIM_OC2_SetConfig+0xe8>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d113      	bne.n	800d180 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d15e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	4313      	orrs	r3, r2
 800d172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	685a      	ldr	r2, [r3, #4]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	697a      	ldr	r2, [r7, #20]
 800d198:	621a      	str	r2, [r3, #32]
}
 800d19a:	bf00      	nop
 800d19c:	371c      	adds	r7, #28
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	40010000 	.word	0x40010000
 800d1ac:	40010400 	.word	0x40010400

0800d1b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f023 0303 	bic.w	r3, r3, #3
 800d1e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	021b      	lsls	r3, r3, #8
 800d200:	697a      	ldr	r2, [r7, #20]
 800d202:	4313      	orrs	r3, r2
 800d204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a21      	ldr	r2, [pc, #132]	; (800d290 <TIM_OC3_SetConfig+0xe0>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d003      	beq.n	800d216 <TIM_OC3_SetConfig+0x66>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4a20      	ldr	r2, [pc, #128]	; (800d294 <TIM_OC3_SetConfig+0xe4>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d10d      	bne.n	800d232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d21c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	021b      	lsls	r3, r3, #8
 800d224:	697a      	ldr	r2, [r7, #20]
 800d226:	4313      	orrs	r3, r2
 800d228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a16      	ldr	r2, [pc, #88]	; (800d290 <TIM_OC3_SetConfig+0xe0>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d003      	beq.n	800d242 <TIM_OC3_SetConfig+0x92>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a15      	ldr	r2, [pc, #84]	; (800d294 <TIM_OC3_SetConfig+0xe4>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d113      	bne.n	800d26a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	011b      	lsls	r3, r3, #4
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	4313      	orrs	r3, r2
 800d25c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	011b      	lsls	r3, r3, #4
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	4313      	orrs	r3, r2
 800d268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	685a      	ldr	r2, [r3, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	697a      	ldr	r2, [r7, #20]
 800d282:	621a      	str	r2, [r3, #32]
}
 800d284:	bf00      	nop
 800d286:	371c      	adds	r7, #28
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	40010000 	.word	0x40010000
 800d294:	40010400 	.word	0x40010400

0800d298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a1b      	ldr	r3, [r3, #32]
 800d2a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	69db      	ldr	r3, [r3, #28]
 800d2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	021b      	lsls	r3, r3, #8
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	031b      	lsls	r3, r3, #12
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a12      	ldr	r2, [pc, #72]	; (800d33c <TIM_OC4_SetConfig+0xa4>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d003      	beq.n	800d300 <TIM_OC4_SetConfig+0x68>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a11      	ldr	r2, [pc, #68]	; (800d340 <TIM_OC4_SetConfig+0xa8>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d109      	bne.n	800d314 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	695b      	ldr	r3, [r3, #20]
 800d30c:	019b      	lsls	r3, r3, #6
 800d30e:	697a      	ldr	r2, [r7, #20]
 800d310:	4313      	orrs	r3, r2
 800d312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	685a      	ldr	r2, [r3, #4]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	621a      	str	r2, [r3, #32]
}
 800d32e:	bf00      	nop
 800d330:	371c      	adds	r7, #28
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	40010000 	.word	0x40010000
 800d340:	40010400 	.word	0x40010400

0800d344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6a1b      	ldr	r3, [r3, #32]
 800d354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	f023 0201 	bic.w	r2, r3, #1
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	011b      	lsls	r3, r3, #4
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	4313      	orrs	r3, r2
 800d378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f023 030a 	bic.w	r3, r3, #10
 800d380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	4313      	orrs	r3, r2
 800d388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	621a      	str	r2, [r3, #32]
}
 800d396:	bf00      	nop
 800d398:	371c      	adds	r7, #28
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b087      	sub	sp, #28
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	60f8      	str	r0, [r7, #12]
 800d3aa:	60b9      	str	r1, [r7, #8]
 800d3ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6a1b      	ldr	r3, [r3, #32]
 800d3b2:	f023 0210 	bic.w	r2, r3, #16
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6a1b      	ldr	r3, [r3, #32]
 800d3c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	031b      	lsls	r3, r3, #12
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d3de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	011b      	lsls	r3, r3, #4
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	621a      	str	r2, [r3, #32]
}
 800d3f6:	bf00      	nop
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d402:	b480      	push	{r7}
 800d404:	b085      	sub	sp, #20
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4313      	orrs	r3, r2
 800d420:	f043 0307 	orr.w	r3, r3, #7
 800d424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	609a      	str	r2, [r3, #8]
}
 800d42c:	bf00      	nop
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	021a      	lsls	r2, r3, #8
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	431a      	orrs	r2, r3
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	4313      	orrs	r3, r2
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	4313      	orrs	r3, r2
 800d464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	697a      	ldr	r2, [r7, #20]
 800d46a:	609a      	str	r2, [r3, #8]
}
 800d46c:	bf00      	nop
 800d46e:	371c      	adds	r7, #28
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	f003 031f 	and.w	r3, r3, #31
 800d48a:	2201      	movs	r2, #1
 800d48c:	fa02 f303 	lsl.w	r3, r2, r3
 800d490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6a1a      	ldr	r2, [r3, #32]
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	43db      	mvns	r3, r3
 800d49a:	401a      	ands	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6a1a      	ldr	r2, [r3, #32]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f003 031f 	and.w	r3, r3, #31
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	621a      	str	r2, [r3, #32]
}
 800d4b6:	bf00      	nop
 800d4b8:	371c      	adds	r7, #28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b084      	sub	sp, #16
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	2b04      	cmp	r3, #4
 800d4d0:	d00d      	beq.n	800d4ee <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d4d2:	2b08      	cmp	r3, #8
 800d4d4:	d014      	beq.n	800d500 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d000      	beq.n	800d4dc <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d4da:	e01a      	b.n	800d512 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f042 0202 	orr.w	r2, r2, #2
 800d4ea:	60da      	str	r2, [r3, #12]
      break;
 800d4ec:	e011      	b.n	800d512 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68da      	ldr	r2, [r3, #12]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f042 0204 	orr.w	r2, r2, #4
 800d4fc:	60da      	str	r2, [r3, #12]
      break;
 800d4fe:	e008      	b.n	800d512 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68da      	ldr	r2, [r3, #12]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f042 0208 	orr.w	r2, r2, #8
 800d50e:	60da      	str	r2, [r3, #12]
      break;
 800d510:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d520:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2204      	movs	r2, #4
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 f93f 	bl	800d7ae <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d53e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	689b      	ldr	r3, [r3, #8]
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b06      	cmp	r3, #6
 800d550:	d007      	beq.n	800d562 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f042 0201 	orr.w	r2, r2, #1
 800d560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b04      	cmp	r3, #4
 800d57a:	d00d      	beq.n	800d598 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d57c:	2b08      	cmp	r3, #8
 800d57e:	d014      	beq.n	800d5aa <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d580:	2b00      	cmp	r3, #0
 800d582:	d000      	beq.n	800d586 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d584:	e01a      	b.n	800d5bc <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68da      	ldr	r2, [r3, #12]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f022 0202 	bic.w	r2, r2, #2
 800d594:	60da      	str	r2, [r3, #12]
      break;
 800d596:	e011      	b.n	800d5bc <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	68da      	ldr	r2, [r3, #12]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f022 0204 	bic.w	r2, r2, #4
 800d5a6:	60da      	str	r2, [r3, #12]
      break;
 800d5a8:	e008      	b.n	800d5bc <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68da      	ldr	r2, [r3, #12]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f022 0208 	bic.w	r2, r2, #8
 800d5b8:	60da      	str	r2, [r3, #12]
      break;
 800d5ba:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f000 f8f2 	bl	800d7ae <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6a1b      	ldr	r3, [r3, #32]
 800d5d0:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	f240 4344 	movw	r3, #1092	; 0x444
 800d5d8:	4013      	ands	r3, r2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d107      	bne.n	800d5ee <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	68da      	ldr	r2, [r3, #12]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5ec:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6a1a      	ldr	r2, [r3, #32]
 800d5f4:	f241 1311 	movw	r3, #4369	; 0x1111
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10f      	bne.n	800d61e <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	6a1a      	ldr	r2, [r3, #32]
 800d604:	f240 4344 	movw	r3, #1092	; 0x444
 800d608:	4013      	ands	r3, r2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d107      	bne.n	800d61e <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d61c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6a1a      	ldr	r2, [r3, #32]
 800d624:	f241 1311 	movw	r3, #4369	; 0x1111
 800d628:	4013      	ands	r3, r2
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10f      	bne.n	800d64e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6a1a      	ldr	r2, [r3, #32]
 800d634:	f240 4344 	movw	r3, #1092	; 0x444
 800d638:	4013      	ands	r3, r2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d107      	bne.n	800d64e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f022 0201 	bic.w	r2, r2, #1
 800d64c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d101      	bne.n	800d670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d66c:	2302      	movs	r3, #2
 800d66e:	e032      	b.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2201      	movs	r2, #1
 800d674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2202      	movs	r2, #2
 800d67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6a8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3714      	adds	r7, #20
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr

0800d6e2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d6e2:	b480      	push	{r7}
 800d6e4:	b085      	sub	sp, #20
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
 800d6ea:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d101      	bne.n	800d6fe <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e03d      	b.n	800d77a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	4313      	orrs	r3, r2
 800d712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	4313      	orrs	r3, r2
 800d720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	4313      	orrs	r3, r2
 800d72e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	4313      	orrs	r3, r2
 800d74a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	695b      	ldr	r3, [r3, #20]
 800d756:	4313      	orrs	r3, r2
 800d758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	69db      	ldr	r3, [r3, #28]
 800d764:	4313      	orrs	r3, r2
 800d766:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3714      	adds	r7, #20
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d786:	b480      	push	{r7}
 800d788:	b083      	sub	sp, #12
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d78e:	bf00      	nop
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d79a:	b480      	push	{r7}
 800d79c:	b083      	sub	sp, #12
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d7a2:	bf00      	nop
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d7ae:	b480      	push	{r7}
 800d7b0:	b087      	sub	sp, #28
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	f003 031f 	and.w	r3, r3, #31
 800d7c0:	2204      	movs	r2, #4
 800d7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6a1a      	ldr	r2, [r3, #32]
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	43db      	mvns	r3, r3
 800d7d0:	401a      	ands	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6a1a      	ldr	r2, [r3, #32]
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	f003 031f 	and.w	r3, r3, #31
 800d7e0:	6879      	ldr	r1, [r7, #4]
 800d7e2:	fa01 f303 	lsl.w	r3, r1, r3
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	621a      	str	r2, [r3, #32]
}
 800d7ec:	bf00      	nop
 800d7ee:	371c      	adds	r7, #28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d101      	bne.n	800d80a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e03f      	b.n	800d88a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f003 fea6 	bl	8011570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2224      	movs	r2, #36	; 0x24
 800d828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68da      	ldr	r2, [r3, #12]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d83a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fa65 	bl	800dd0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	691a      	ldr	r2, [r3, #16]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	695a      	ldr	r2, [r3, #20]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68da      	ldr	r2, [r3, #12]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2220      	movs	r2, #32
 800d87c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2220      	movs	r2, #32
 800d884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	f003 030f 	and.w	r3, r3, #15
 800d8c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d10d      	bne.n	800d8e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	f003 0320 	and.w	r3, r3, #32
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d008      	beq.n	800d8e6 <HAL_UART_IRQHandler+0x52>
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	f003 0320 	and.w	r3, r3, #32
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f992 	bl	800dc08 <UART_Receive_IT>
      return;
 800d8e4:	e0cc      	b.n	800da80 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 80ab 	beq.w	800da44 <HAL_UART_IRQHandler+0x1b0>
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f003 0301 	and.w	r3, r3, #1
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d105      	bne.n	800d904 <HAL_UART_IRQHandler+0x70>
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f000 80a0 	beq.w	800da44 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	f003 0301 	and.w	r3, r3, #1
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00a      	beq.n	800d924 <HAL_UART_IRQHandler+0x90>
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d914:	2b00      	cmp	r3, #0
 800d916:	d005      	beq.n	800d924 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91c:	f043 0201 	orr.w	r2, r3, #1
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	f003 0304 	and.w	r3, r3, #4
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00a      	beq.n	800d944 <HAL_UART_IRQHandler+0xb0>
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	2b00      	cmp	r3, #0
 800d936:	d005      	beq.n	800d944 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d93c:	f043 0202 	orr.w	r2, r3, #2
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00a      	beq.n	800d964 <HAL_UART_IRQHandler+0xd0>
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d95c:	f043 0204 	orr.w	r2, r3, #4
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	f003 0308 	and.w	r3, r3, #8
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00a      	beq.n	800d984 <HAL_UART_IRQHandler+0xf0>
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f003 0301 	and.w	r3, r3, #1
 800d974:	2b00      	cmp	r3, #0
 800d976:	d005      	beq.n	800d984 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97c:	f043 0208 	orr.w	r2, r3, #8
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d078      	beq.n	800da7e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f003 0320 	and.w	r3, r3, #32
 800d992:	2b00      	cmp	r3, #0
 800d994:	d007      	beq.n	800d9a6 <HAL_UART_IRQHandler+0x112>
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	f003 0320 	and.w	r3, r3, #32
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d002      	beq.n	800d9a6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 f931 	bl	800dc08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b0:	2b40      	cmp	r3, #64	; 0x40
 800d9b2:	bf0c      	ite	eq
 800d9b4:	2301      	moveq	r3, #1
 800d9b6:	2300      	movne	r3, #0
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c0:	f003 0308 	and.w	r3, r3, #8
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <HAL_UART_IRQHandler+0x13a>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d031      	beq.n	800da32 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f87a 	bl	800dac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9de:	2b40      	cmp	r3, #64	; 0x40
 800d9e0:	d123      	bne.n	800da2a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	695a      	ldr	r2, [r3, #20]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d013      	beq.n	800da22 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9fe:	4a22      	ldr	r2, [pc, #136]	; (800da88 <HAL_UART_IRQHandler+0x1f4>)
 800da00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da06:	4618      	mov	r0, r3
 800da08:	f7fc fdac 	bl	800a564 <HAL_DMA_Abort_IT>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d016      	beq.n	800da40 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800da1c:	4610      	mov	r0, r2
 800da1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da20:	e00e      	b.n	800da40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f846 	bl	800dab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da28:	e00a      	b.n	800da40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f842 	bl	800dab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da30:	e006      	b.n	800da40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f83e 	bl	800dab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800da3e:	e01e      	b.n	800da7e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da40:	bf00      	nop
    return;
 800da42:	e01c      	b.n	800da7e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d008      	beq.n	800da60 <HAL_UART_IRQHandler+0x1cc>
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da54:	2b00      	cmp	r3, #0
 800da56:	d003      	beq.n	800da60 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 f867 	bl	800db2c <UART_Transmit_IT>
    return;
 800da5e:	e00f      	b.n	800da80 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <HAL_UART_IRQHandler+0x1ec>
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da70:	2b00      	cmp	r3, #0
 800da72:	d005      	beq.n	800da80 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 f8af 	bl	800dbd8 <UART_EndTransmit_IT>
    return;
 800da7a:	bf00      	nop
 800da7c:	e000      	b.n	800da80 <HAL_UART_IRQHandler+0x1ec>
    return;
 800da7e:	bf00      	nop
  }
}
 800da80:	3720      	adds	r7, #32
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	0800db05 	.word	0x0800db05

0800da8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800da94:	bf00      	nop
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	68da      	ldr	r2, [r3, #12]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dade:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	695a      	ldr	r2, [r3, #20]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f022 0201 	bic.w	r2, r2, #1
 800daee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2220      	movs	r2, #32
 800daf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f7ff ffc8 	bl	800dab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db24:	bf00      	nop
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	2b21      	cmp	r3, #33	; 0x21
 800db3e:	d144      	bne.n	800dbca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db48:	d11a      	bne.n	800db80 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	881b      	ldrh	r3, [r3, #0]
 800db54:	461a      	mov	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db5e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d105      	bne.n	800db74 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	1c9a      	adds	r2, r3, #2
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	621a      	str	r2, [r3, #32]
 800db72:	e00e      	b.n	800db92 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a1b      	ldr	r3, [r3, #32]
 800db78:	1c5a      	adds	r2, r3, #1
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	621a      	str	r2, [r3, #32]
 800db7e:	e008      	b.n	800db92 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a1b      	ldr	r3, [r3, #32]
 800db84:	1c59      	adds	r1, r3, #1
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	6211      	str	r1, [r2, #32]
 800db8a:	781a      	ldrb	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800db96:	b29b      	uxth	r3, r3
 800db98:	3b01      	subs	r3, #1
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4619      	mov	r1, r3
 800dba0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10f      	bne.n	800dbc6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	68da      	ldr	r2, [r3, #12]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68da      	ldr	r2, [r3, #12]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	e000      	b.n	800dbcc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dbca:	2302      	movs	r3, #2
  }
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3714      	adds	r7, #20
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68da      	ldr	r2, [r3, #12]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2220      	movs	r2, #32
 800dbf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff ff47 	bl	800da8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b22      	cmp	r3, #34	; 0x22
 800dc1a:	d171      	bne.n	800dd00 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc24:	d123      	bne.n	800dc6e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10e      	bne.n	800dc52 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc4a:	1c9a      	adds	r2, r3, #2
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	629a      	str	r2, [r3, #40]	; 0x28
 800dc50:	e029      	b.n	800dca6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	629a      	str	r2, [r3, #40]	; 0x28
 800dc6c:	e01b      	b.n	800dca6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d10a      	bne.n	800dc8c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6858      	ldr	r0, [r3, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc80:	1c59      	adds	r1, r3, #1
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	6291      	str	r1, [r2, #40]	; 0x28
 800dc86:	b2c2      	uxtb	r2, r0
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	e00c      	b.n	800dca6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	b2da      	uxtb	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc98:	1c58      	adds	r0, r3, #1
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	6288      	str	r0, [r1, #40]	; 0x28
 800dc9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dca2:	b2d2      	uxtb	r2, r2
 800dca4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	3b01      	subs	r3, #1
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d120      	bne.n	800dcfc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68da      	ldr	r2, [r3, #12]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f022 0220 	bic.w	r2, r2, #32
 800dcc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68da      	ldr	r2, [r3, #12]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dcd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	695a      	ldr	r2, [r3, #20]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f022 0201 	bic.w	r2, r2, #1
 800dce8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2220      	movs	r2, #32
 800dcee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff fed4 	bl	800daa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e002      	b.n	800dd02 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e000      	b.n	800dd02 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800dd00:	2302      	movs	r3, #2
  }
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
	...

0800dd0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd0c:	b5b0      	push	{r4, r5, r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	68da      	ldr	r2, [r3, #12]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	430a      	orrs	r2, r1
 800dd28:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	689a      	ldr	r2, [r3, #8]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	691b      	ldr	r3, [r3, #16]
 800dd32:	431a      	orrs	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	431a      	orrs	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	69db      	ldr	r3, [r3, #28]
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dd4c:	f023 030c 	bic.w	r3, r3, #12
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	6812      	ldr	r2, [r2, #0]
 800dd54:	68f9      	ldr	r1, [r7, #12]
 800dd56:	430b      	orrs	r3, r1
 800dd58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	699a      	ldr	r2, [r3, #24]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	69db      	ldr	r3, [r3, #28]
 800dd74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd78:	f040 80e4 	bne.w	800df44 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4aab      	ldr	r2, [pc, #684]	; (800e030 <UART_SetConfig+0x324>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d004      	beq.n	800dd90 <UART_SetConfig+0x84>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4aaa      	ldr	r2, [pc, #680]	; (800e034 <UART_SetConfig+0x328>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d16c      	bne.n	800de6a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800dd90:	f7fd fc1c 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800dd94:	4602      	mov	r2, r0
 800dd96:	4613      	mov	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4413      	add	r3, r2
 800dd9c:	009a      	lsls	r2, r3, #2
 800dd9e:	441a      	add	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddaa:	4aa3      	ldr	r2, [pc, #652]	; (800e038 <UART_SetConfig+0x32c>)
 800ddac:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb0:	095b      	lsrs	r3, r3, #5
 800ddb2:	011c      	lsls	r4, r3, #4
 800ddb4:	f7fd fc0a 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	4613      	mov	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	009a      	lsls	r2, r3, #2
 800ddc2:	441a      	add	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	fbb2 f5f3 	udiv	r5, r2, r3
 800ddce:	f7fd fbfd 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4413      	add	r3, r2
 800ddda:	009a      	lsls	r2, r3, #2
 800dddc:	441a      	add	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	005b      	lsls	r3, r3, #1
 800dde4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dde8:	4a93      	ldr	r2, [pc, #588]	; (800e038 <UART_SetConfig+0x32c>)
 800ddea:	fba2 2303 	umull	r2, r3, r2, r3
 800ddee:	095b      	lsrs	r3, r3, #5
 800ddf0:	2264      	movs	r2, #100	; 0x64
 800ddf2:	fb02 f303 	mul.w	r3, r2, r3
 800ddf6:	1aeb      	subs	r3, r5, r3
 800ddf8:	00db      	lsls	r3, r3, #3
 800ddfa:	3332      	adds	r3, #50	; 0x32
 800ddfc:	4a8e      	ldr	r2, [pc, #568]	; (800e038 <UART_SetConfig+0x32c>)
 800ddfe:	fba2 2303 	umull	r2, r3, r2, r3
 800de02:	095b      	lsrs	r3, r3, #5
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800de0a:	441c      	add	r4, r3
 800de0c:	f7fd fbde 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800de10:	4602      	mov	r2, r0
 800de12:	4613      	mov	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	4413      	add	r3, r2
 800de18:	009a      	lsls	r2, r3, #2
 800de1a:	441a      	add	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	fbb2 f5f3 	udiv	r5, r2, r3
 800de26:	f7fd fbd1 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800de2a:	4602      	mov	r2, r0
 800de2c:	4613      	mov	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	009a      	lsls	r2, r3, #2
 800de34:	441a      	add	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de40:	4a7d      	ldr	r2, [pc, #500]	; (800e038 <UART_SetConfig+0x32c>)
 800de42:	fba2 2303 	umull	r2, r3, r2, r3
 800de46:	095b      	lsrs	r3, r3, #5
 800de48:	2264      	movs	r2, #100	; 0x64
 800de4a:	fb02 f303 	mul.w	r3, r2, r3
 800de4e:	1aeb      	subs	r3, r5, r3
 800de50:	00db      	lsls	r3, r3, #3
 800de52:	3332      	adds	r3, #50	; 0x32
 800de54:	4a78      	ldr	r2, [pc, #480]	; (800e038 <UART_SetConfig+0x32c>)
 800de56:	fba2 2303 	umull	r2, r3, r2, r3
 800de5a:	095b      	lsrs	r3, r3, #5
 800de5c:	f003 0207 	and.w	r2, r3, #7
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4422      	add	r2, r4
 800de66:	609a      	str	r2, [r3, #8]
 800de68:	e154      	b.n	800e114 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800de6a:	f7fd fb9b 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800de6e:	4602      	mov	r2, r0
 800de70:	4613      	mov	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	009a      	lsls	r2, r3, #2
 800de78:	441a      	add	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	fbb2 f3f3 	udiv	r3, r2, r3
 800de84:	4a6c      	ldr	r2, [pc, #432]	; (800e038 <UART_SetConfig+0x32c>)
 800de86:	fba2 2303 	umull	r2, r3, r2, r3
 800de8a:	095b      	lsrs	r3, r3, #5
 800de8c:	011c      	lsls	r4, r3, #4
 800de8e:	f7fd fb89 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800de92:	4602      	mov	r2, r0
 800de94:	4613      	mov	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	009a      	lsls	r2, r3, #2
 800de9c:	441a      	add	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	fbb2 f5f3 	udiv	r5, r2, r3
 800dea8:	f7fd fb7c 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800deac:	4602      	mov	r2, r0
 800deae:	4613      	mov	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	009a      	lsls	r2, r3, #2
 800deb6:	441a      	add	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	005b      	lsls	r3, r3, #1
 800debe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dec2:	4a5d      	ldr	r2, [pc, #372]	; (800e038 <UART_SetConfig+0x32c>)
 800dec4:	fba2 2303 	umull	r2, r3, r2, r3
 800dec8:	095b      	lsrs	r3, r3, #5
 800deca:	2264      	movs	r2, #100	; 0x64
 800decc:	fb02 f303 	mul.w	r3, r2, r3
 800ded0:	1aeb      	subs	r3, r5, r3
 800ded2:	00db      	lsls	r3, r3, #3
 800ded4:	3332      	adds	r3, #50	; 0x32
 800ded6:	4a58      	ldr	r2, [pc, #352]	; (800e038 <UART_SetConfig+0x32c>)
 800ded8:	fba2 2303 	umull	r2, r3, r2, r3
 800dedc:	095b      	lsrs	r3, r3, #5
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dee4:	441c      	add	r4, r3
 800dee6:	f7fd fb5d 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800deea:	4602      	mov	r2, r0
 800deec:	4613      	mov	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	009a      	lsls	r2, r3, #2
 800def4:	441a      	add	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	fbb2 f5f3 	udiv	r5, r2, r3
 800df00:	f7fd fb50 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800df04:	4602      	mov	r2, r0
 800df06:	4613      	mov	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	009a      	lsls	r2, r3, #2
 800df0e:	441a      	add	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	fbb2 f3f3 	udiv	r3, r2, r3
 800df1a:	4a47      	ldr	r2, [pc, #284]	; (800e038 <UART_SetConfig+0x32c>)
 800df1c:	fba2 2303 	umull	r2, r3, r2, r3
 800df20:	095b      	lsrs	r3, r3, #5
 800df22:	2264      	movs	r2, #100	; 0x64
 800df24:	fb02 f303 	mul.w	r3, r2, r3
 800df28:	1aeb      	subs	r3, r5, r3
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	3332      	adds	r3, #50	; 0x32
 800df2e:	4a42      	ldr	r2, [pc, #264]	; (800e038 <UART_SetConfig+0x32c>)
 800df30:	fba2 2303 	umull	r2, r3, r2, r3
 800df34:	095b      	lsrs	r3, r3, #5
 800df36:	f003 0207 	and.w	r2, r3, #7
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4422      	add	r2, r4
 800df40:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800df42:	e0e7      	b.n	800e114 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a39      	ldr	r2, [pc, #228]	; (800e030 <UART_SetConfig+0x324>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d004      	beq.n	800df58 <UART_SetConfig+0x24c>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a38      	ldr	r2, [pc, #224]	; (800e034 <UART_SetConfig+0x328>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d171      	bne.n	800e03c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800df58:	f7fd fb38 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800df5c:	4602      	mov	r2, r0
 800df5e:	4613      	mov	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4413      	add	r3, r2
 800df64:	009a      	lsls	r2, r3, #2
 800df66:	441a      	add	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df72:	4a31      	ldr	r2, [pc, #196]	; (800e038 <UART_SetConfig+0x32c>)
 800df74:	fba2 2303 	umull	r2, r3, r2, r3
 800df78:	095b      	lsrs	r3, r3, #5
 800df7a:	011c      	lsls	r4, r3, #4
 800df7c:	f7fd fb26 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800df80:	4602      	mov	r2, r0
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	009a      	lsls	r2, r3, #2
 800df8a:	441a      	add	r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	fbb2 f5f3 	udiv	r5, r2, r3
 800df96:	f7fd fb19 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800df9a:	4602      	mov	r2, r0
 800df9c:	4613      	mov	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	009a      	lsls	r2, r3, #2
 800dfa4:	441a      	add	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfb0:	4a21      	ldr	r2, [pc, #132]	; (800e038 <UART_SetConfig+0x32c>)
 800dfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfb6:	095b      	lsrs	r3, r3, #5
 800dfb8:	2264      	movs	r2, #100	; 0x64
 800dfba:	fb02 f303 	mul.w	r3, r2, r3
 800dfbe:	1aeb      	subs	r3, r5, r3
 800dfc0:	011b      	lsls	r3, r3, #4
 800dfc2:	3332      	adds	r3, #50	; 0x32
 800dfc4:	4a1c      	ldr	r2, [pc, #112]	; (800e038 <UART_SetConfig+0x32c>)
 800dfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfca:	095b      	lsrs	r3, r3, #5
 800dfcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfd0:	441c      	add	r4, r3
 800dfd2:	f7fd fafb 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	4613      	mov	r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	009a      	lsls	r2, r3, #2
 800dfe0:	441a      	add	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	fbb2 f5f3 	udiv	r5, r2, r3
 800dfec:	f7fd faee 	bl	800b5cc <HAL_RCC_GetPCLK2Freq>
 800dff0:	4602      	mov	r2, r0
 800dff2:	4613      	mov	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	009a      	lsls	r2, r3, #2
 800dffa:	441a      	add	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	fbb2 f3f3 	udiv	r3, r2, r3
 800e006:	4a0c      	ldr	r2, [pc, #48]	; (800e038 <UART_SetConfig+0x32c>)
 800e008:	fba2 2303 	umull	r2, r3, r2, r3
 800e00c:	095b      	lsrs	r3, r3, #5
 800e00e:	2264      	movs	r2, #100	; 0x64
 800e010:	fb02 f303 	mul.w	r3, r2, r3
 800e014:	1aeb      	subs	r3, r5, r3
 800e016:	011b      	lsls	r3, r3, #4
 800e018:	3332      	adds	r3, #50	; 0x32
 800e01a:	4a07      	ldr	r2, [pc, #28]	; (800e038 <UART_SetConfig+0x32c>)
 800e01c:	fba2 2303 	umull	r2, r3, r2, r3
 800e020:	095b      	lsrs	r3, r3, #5
 800e022:	f003 020f 	and.w	r2, r3, #15
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4422      	add	r2, r4
 800e02c:	609a      	str	r2, [r3, #8]
 800e02e:	e071      	b.n	800e114 <UART_SetConfig+0x408>
 800e030:	40011000 	.word	0x40011000
 800e034:	40011400 	.word	0x40011400
 800e038:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e03c:	f7fd fab2 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800e040:	4602      	mov	r2, r0
 800e042:	4613      	mov	r3, r2
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	4413      	add	r3, r2
 800e048:	009a      	lsls	r2, r3, #2
 800e04a:	441a      	add	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	fbb2 f3f3 	udiv	r3, r2, r3
 800e056:	4a31      	ldr	r2, [pc, #196]	; (800e11c <UART_SetConfig+0x410>)
 800e058:	fba2 2303 	umull	r2, r3, r2, r3
 800e05c:	095b      	lsrs	r3, r3, #5
 800e05e:	011c      	lsls	r4, r3, #4
 800e060:	f7fd faa0 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800e064:	4602      	mov	r2, r0
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009a      	lsls	r2, r3, #2
 800e06e:	441a      	add	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	fbb2 f5f3 	udiv	r5, r2, r3
 800e07a:	f7fd fa93 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800e07e:	4602      	mov	r2, r0
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	009a      	lsls	r2, r3, #2
 800e088:	441a      	add	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	fbb2 f3f3 	udiv	r3, r2, r3
 800e094:	4a21      	ldr	r2, [pc, #132]	; (800e11c <UART_SetConfig+0x410>)
 800e096:	fba2 2303 	umull	r2, r3, r2, r3
 800e09a:	095b      	lsrs	r3, r3, #5
 800e09c:	2264      	movs	r2, #100	; 0x64
 800e09e:	fb02 f303 	mul.w	r3, r2, r3
 800e0a2:	1aeb      	subs	r3, r5, r3
 800e0a4:	011b      	lsls	r3, r3, #4
 800e0a6:	3332      	adds	r3, #50	; 0x32
 800e0a8:	4a1c      	ldr	r2, [pc, #112]	; (800e11c <UART_SetConfig+0x410>)
 800e0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ae:	095b      	lsrs	r3, r3, #5
 800e0b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0b4:	441c      	add	r4, r3
 800e0b6:	f7fd fa75 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	4613      	mov	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009a      	lsls	r2, r3, #2
 800e0c4:	441a      	add	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	fbb2 f5f3 	udiv	r5, r2, r3
 800e0d0:	f7fd fa68 	bl	800b5a4 <HAL_RCC_GetPCLK1Freq>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	009a      	lsls	r2, r3, #2
 800e0de:	441a      	add	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ea:	4a0c      	ldr	r2, [pc, #48]	; (800e11c <UART_SetConfig+0x410>)
 800e0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f0:	095b      	lsrs	r3, r3, #5
 800e0f2:	2264      	movs	r2, #100	; 0x64
 800e0f4:	fb02 f303 	mul.w	r3, r2, r3
 800e0f8:	1aeb      	subs	r3, r5, r3
 800e0fa:	011b      	lsls	r3, r3, #4
 800e0fc:	3332      	adds	r3, #50	; 0x32
 800e0fe:	4a07      	ldr	r2, [pc, #28]	; (800e11c <UART_SetConfig+0x410>)
 800e100:	fba2 2303 	umull	r2, r3, r2, r3
 800e104:	095b      	lsrs	r3, r3, #5
 800e106:	f003 020f 	and.w	r2, r3, #15
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4422      	add	r2, r4
 800e110:	609a      	str	r2, [r3, #8]
}
 800e112:	e7ff      	b.n	800e114 <UART_SetConfig+0x408>
 800e114:	bf00      	nop
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bdb0      	pop	{r4, r5, r7, pc}
 800e11c:	51eb851f 	.word	0x51eb851f

0800e120 <ACR_Init>:
ACR_TypeDef mainACR;



void ACR_Init()
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0

	memset(&mainACR, 0x00, sizeof(mainACR));
 800e124:	226c      	movs	r2, #108	; 0x6c
 800e126:	2100      	movs	r1, #0
 800e128:	4812      	ldr	r0, [pc, #72]	; (800e174 <ACR_Init+0x54>)
 800e12a:	f003 fad0 	bl	80116ce <memset>

	mainACR.Init.Kp = 0.1f;
 800e12e:	4b11      	ldr	r3, [pc, #68]	; (800e174 <ACR_Init+0x54>)
 800e130:	4a11      	ldr	r2, [pc, #68]	; (800e178 <ACR_Init+0x58>)
 800e132:	601a      	str	r2, [r3, #0]
	mainACR.Init.Ki = 400.0f;
 800e134:	4b0f      	ldr	r3, [pc, #60]	; (800e174 <ACR_Init+0x54>)
 800e136:	4a11      	ldr	r2, [pc, #68]	; (800e17c <ACR_Init+0x5c>)
 800e138:	605a      	str	r2, [r3, #4]

	mainACR.Init.Id_limit = 15.0f;
 800e13a:	4b0e      	ldr	r3, [pc, #56]	; (800e174 <ACR_Init+0x54>)
 800e13c:	4a10      	ldr	r2, [pc, #64]	; (800e180 <ACR_Init+0x60>)
 800e13e:	60da      	str	r2, [r3, #12]
	mainACR.Init.Iq_limit = 15.0f;
 800e140:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <ACR_Init+0x54>)
 800e142:	4a0f      	ldr	r2, [pc, #60]	; (800e180 <ACR_Init+0x60>)
 800e144:	611a      	str	r2, [r3, #16]

	mainACR.Init.Id_error_integ_limit = 1.0f;
 800e146:	4b0b      	ldr	r3, [pc, #44]	; (800e174 <ACR_Init+0x54>)
 800e148:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e14c:	615a      	str	r2, [r3, #20]
	mainACR.Init.Iq_error_integ_limit = 1.0f;
 800e14e:	4b09      	ldr	r3, [pc, #36]	; (800e174 <ACR_Init+0x54>)
 800e150:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e154:	619a      	str	r2, [r3, #24]

	mainACR.Init.cycleTime = 100E-6;
 800e156:	4b07      	ldr	r3, [pc, #28]	; (800e174 <ACR_Init+0x54>)
 800e158:	4a0a      	ldr	r2, [pc, #40]	; (800e184 <ACR_Init+0x64>)
 800e15a:	609a      	str	r2, [r3, #8]

	mainACR.Init.hEncoder = &mainEncoder;
 800e15c:	4b05      	ldr	r3, [pc, #20]	; (800e174 <ACR_Init+0x54>)
 800e15e:	4a0a      	ldr	r2, [pc, #40]	; (800e188 <ACR_Init+0x68>)
 800e160:	61da      	str	r2, [r3, #28]

	mainACR.Init.hCS = &mainCS;
 800e162:	4b04      	ldr	r3, [pc, #16]	; (800e174 <ACR_Init+0x54>)
 800e164:	4a09      	ldr	r2, [pc, #36]	; (800e18c <ACR_Init+0x6c>)
 800e166:	621a      	str	r2, [r3, #32]
	mainACR.Init.htim = &htim8;
 800e168:	4b02      	ldr	r3, [pc, #8]	; (800e174 <ACR_Init+0x54>)
 800e16a:	4a09      	ldr	r2, [pc, #36]	; (800e190 <ACR_Init+0x70>)
 800e16c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800e16e:	bf00      	nop
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	2000414c 	.word	0x2000414c
 800e178:	3dcccccd 	.word	0x3dcccccd
 800e17c:	43c80000 	.word	0x43c80000
 800e180:	41700000 	.word	0x41700000
 800e184:	38d1b717 	.word	0x38d1b717
 800e188:	200044e0 	.word	0x200044e0
 800e18c:	20004204 	.word	0x20004204
 800e190:	200045e4 	.word	0x200045e4

0800e194 <ACR_Start>:



void ACR_Start(ACR_TypeDef *hACR)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]

	hACR->enable = 1;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ACR_Reset(hACR);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fa77 	bl	800e698 <ACR_Reset>

}
 800e1aa:	bf00      	nop
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	0000      	movs	r0, r0
 800e1b4:	0000      	movs	r0, r0
	...

0800e1b8 <ACR_Refresh>:
}



inline void ACR_Refresh(ACR_TypeDef *hACR)
{
 800e1b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1bc:	b082      	sub	sp, #8
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
	static float _Id_ref;
	static float _Iq_ref;

	static ACR_InitTypeDef *hACR_Init;

	hACR_Init = &hACR->Init;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4aa8      	ldr	r2, [pc, #672]	; (800e468 <ACR_Refresh+0x2b0>)
 800e1c6:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	2140      	movs	r1, #64	; 0x40
 800e1cc:	48a7      	ldr	r0, [pc, #668]	; (800e46c <ACR_Refresh+0x2b4>)
 800e1ce:	f7fd f8e1 	bl	800b394 <HAL_GPIO_WritePin>


	CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e1de:	4ba2      	ldr	r3, [pc, #648]	; (800e468 <ACR_Refresh+0x2b0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	69db      	ldr	r3, [r3, #28]
 800e1e4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e1e8:	4b9f      	ldr	r3, [pc, #636]	; (800e468 <ACR_Refresh+0x2b0>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e1f2:	eef0 0a47 	vmov.f32	s1, s14
 800e1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800e1fa:	489d      	ldr	r0, [pc, #628]	; (800e470 <ACR_Refresh+0x2b8>)
 800e1fc:	f000 fd7c 	bl	800ecf8 <CurrentSensor_getIdq>


	/*
	 * 強制転流
	 */
	if(hACR->forced_commute_enable)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e206:	2b00      	cmp	r3, #0
 800e208:	d03d      	beq.n	800e286 <ACR_Refresh+0xce>
	{

		hACR->forced_cos_theta_re = sin_table2[(int)((hACR->forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e210:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800e474 <ACR_Refresh+0x2bc>
 800e214:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e218:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e21c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e220:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800e478 <ACR_Refresh+0x2c0>
 800e224:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e22c:	ee17 3a90 	vmov	r3, s15
 800e230:	4a92      	ldr	r2, [pc, #584]	; (800e47c <ACR_Refresh+0x2c4>)
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4413      	add	r3, r2
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	665a      	str	r2, [r3, #100]	; 0x64
		hACR->forced_sin_theta_re = sin_table2[(int)(hACR->forced_theta_re * 1591.54943f)];
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e242:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800e480 <ACR_Refresh+0x2c8>
 800e246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e24a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e24e:	ee17 3a90 	vmov	r3, s15
 800e252:	4a8a      	ldr	r2, [pc, #552]	; (800e47c <ACR_Refresh+0x2c4>)
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	4413      	add	r3, r2
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	669a      	str	r2, [r3, #104]	; 0x68

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800e276:	eef0 0a47 	vmov.f32	s1, s14
 800e27a:	eeb0 0a67 	vmov.f32	s0, s15
 800e27e:	487c      	ldr	r0, [pc, #496]	; (800e470 <ACR_Refresh+0x2b8>)
 800e280:	f000 fd3a 	bl	800ecf8 <CurrentSensor_getIdq>
 800e284:	e016      	b.n	800e2b4 <ACR_Refresh+0xfc>

	}
	else
	{

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e292:	4b75      	ldr	r3, [pc, #468]	; (800e468 <ACR_Refresh+0x2b0>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e29c:	4b72      	ldr	r3, [pc, #456]	; (800e468 <ACR_Refresh+0x2b0>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e2a6:	eef0 0a47 	vmov.f32	s1, s14
 800e2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800e2ae:	4870      	ldr	r0, [pc, #448]	; (800e470 <ACR_Refresh+0x2b8>)
 800e2b0:	f000 fd22 	bl	800ecf8 <CurrentSensor_getIdq>

	}



	if(hACR_Init->hEncoder->theta_re < M_PI)
 800e2b4:	4b6c      	ldr	r3, [pc, #432]	; (800e468 <ACR_Refresh+0x2b0>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	69db      	ldr	r3, [r3, #28]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fa f873 	bl	80083a8 <__aeabi_f2d>
 800e2c2:	a367      	add	r3, pc, #412	; (adr r3, 800e460 <ACR_Refresh+0x2a8>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	f7fa fb38 	bl	800893c <__aeabi_dcmplt>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d005      	beq.n	800e2de <ACR_Refresh+0x126>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	2140      	movs	r1, #64	; 0x40
 800e2d6:	486b      	ldr	r0, [pc, #428]	; (800e484 <ACR_Refresh+0x2cc>)
 800e2d8:	f7fd f85c 	bl	800b394 <HAL_GPIO_WritePin>
 800e2dc:	e004      	b.n	800e2e8 <ACR_Refresh+0x130>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800e2de:	2201      	movs	r2, #1
 800e2e0:	2140      	movs	r1, #64	; 0x40
 800e2e2:	4868      	ldr	r0, [pc, #416]	; (800e484 <ACR_Refresh+0x2cc>)
 800e2e4:	f7fd f856 	bl	800b394 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(hACR->enable /*&& soundCount == -1*/)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 8174 	beq.w	800e5dc <ACR_Refresh+0x424>
	{

		_Id_ref = hACR->Id_ref;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f8:	4a63      	ldr	r2, [pc, #396]	; (800e488 <ACR_Refresh+0x2d0>)
 800e2fa:	6013      	str	r3, [r2, #0]
		//_Iq_ref = hACR->Iq_ref + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
		_Iq_ref = hACR->Iq_ref;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e300:	4a62      	ldr	r2, [pc, #392]	; (800e48c <ACR_Refresh+0x2d4>)
 800e302:	6013      	str	r3, [r2, #0]


		if(_Id_ref < -hACR_Init->Id_limit)			_Id_ref = -hACR_Init->Id_limit;
 800e304:	4b58      	ldr	r3, [pc, #352]	; (800e468 <ACR_Refresh+0x2b0>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	edd3 7a03 	vldr	s15, [r3, #12]
 800e30c:	eeb1 7a67 	vneg.f32	s14, s15
 800e310:	4b5d      	ldr	r3, [pc, #372]	; (800e488 <ACR_Refresh+0x2d0>)
 800e312:	edd3 7a00 	vldr	s15, [r3]
 800e316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31e:	dd09      	ble.n	800e334 <ACR_Refresh+0x17c>
 800e320:	4b51      	ldr	r3, [pc, #324]	; (800e468 <ACR_Refresh+0x2b0>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	edd3 7a03 	vldr	s15, [r3, #12]
 800e328:	eef1 7a67 	vneg.f32	s15, s15
 800e32c:	4b56      	ldr	r3, [pc, #344]	; (800e488 <ACR_Refresh+0x2d0>)
 800e32e:	edc3 7a00 	vstr	s15, [r3]
 800e332:	e010      	b.n	800e356 <ACR_Refresh+0x19e>
		else if(_Id_ref > hACR_Init->Id_limit)		_Id_ref = hACR_Init->Id_limit;
 800e334:	4b4c      	ldr	r3, [pc, #304]	; (800e468 <ACR_Refresh+0x2b0>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	ed93 7a03 	vldr	s14, [r3, #12]
 800e33c:	4b52      	ldr	r3, [pc, #328]	; (800e488 <ACR_Refresh+0x2d0>)
 800e33e:	edd3 7a00 	vldr	s15, [r3]
 800e342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34a:	d504      	bpl.n	800e356 <ACR_Refresh+0x19e>
 800e34c:	4b46      	ldr	r3, [pc, #280]	; (800e468 <ACR_Refresh+0x2b0>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	4a4d      	ldr	r2, [pc, #308]	; (800e488 <ACR_Refresh+0x2d0>)
 800e354:	6013      	str	r3, [r2, #0]

		if(_Iq_ref < -hACR_Init->Iq_limit)			_Iq_ref = -hACR_Init->Iq_limit;
 800e356:	4b44      	ldr	r3, [pc, #272]	; (800e468 <ACR_Refresh+0x2b0>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	edd3 7a04 	vldr	s15, [r3, #16]
 800e35e:	eeb1 7a67 	vneg.f32	s14, s15
 800e362:	4b4a      	ldr	r3, [pc, #296]	; (800e48c <ACR_Refresh+0x2d4>)
 800e364:	edd3 7a00 	vldr	s15, [r3]
 800e368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e370:	dd09      	ble.n	800e386 <ACR_Refresh+0x1ce>
 800e372:	4b3d      	ldr	r3, [pc, #244]	; (800e468 <ACR_Refresh+0x2b0>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	edd3 7a04 	vldr	s15, [r3, #16]
 800e37a:	eef1 7a67 	vneg.f32	s15, s15
 800e37e:	4b43      	ldr	r3, [pc, #268]	; (800e48c <ACR_Refresh+0x2d4>)
 800e380:	edc3 7a00 	vstr	s15, [r3]
 800e384:	e010      	b.n	800e3a8 <ACR_Refresh+0x1f0>
		else if(_Iq_ref > hACR_Init->Iq_limit)		_Iq_ref = hACR_Init->Iq_limit;
 800e386:	4b38      	ldr	r3, [pc, #224]	; (800e468 <ACR_Refresh+0x2b0>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	ed93 7a04 	vldr	s14, [r3, #16]
 800e38e:	4b3f      	ldr	r3, [pc, #252]	; (800e48c <ACR_Refresh+0x2d4>)
 800e390:	edd3 7a00 	vldr	s15, [r3]
 800e394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39c:	d504      	bpl.n	800e3a8 <ACR_Refresh+0x1f0>
 800e39e:	4b32      	ldr	r3, [pc, #200]	; (800e468 <ACR_Refresh+0x2b0>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	4a39      	ldr	r2, [pc, #228]	; (800e48c <ACR_Refresh+0x2d4>)
 800e3a6:	6013      	str	r3, [r2, #0]


		hACR->Id_error = _Id_ref - hACR->Id;
 800e3a8:	4b37      	ldr	r3, [pc, #220]	; (800e488 <ACR_Refresh+0x2d0>)
 800e3aa:	ed93 7a00 	vldr	s14, [r3]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e3b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		hACR->Iq_error = _Iq_ref - hACR->Iq;
 800e3be:	4b33      	ldr	r3, [pc, #204]	; (800e48c <ACR_Refresh+0x2d4>)
 800e3c0:	ed93 7a00 	vldr	s14, [r3]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e3ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40


		hACR->Id_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Id_error + hACR->p_Id_error);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800e3da:	4b23      	ldr	r3, [pc, #140]	; (800e468 <ACR_Refresh+0x2b0>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	edd3 7a02 	vldr	s15, [r3, #8]
 800e3e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e3e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e3f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e3fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hACR->Iq_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Iq_error + hACR->p_Iq_error);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e40e:	4b16      	ldr	r3, [pc, #88]	; (800e468 <ACR_Refresh+0x2b0>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	edd3 7a02 	vldr	s15, [r3, #8]
 800e416:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e41a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800e42a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e42e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e432:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50


		if(hACR->Id_error_integ > hACR_Init->Id_error_integ_limit)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800e442:	4b09      	ldr	r3, [pc, #36]	; (800e468 <ACR_Refresh+0x2b0>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	edd3 7a05 	vldr	s15, [r3, #20]
 800e44a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e452:	dd1d      	ble.n	800e490 <ACR_Refresh+0x2d8>
		{
			hACR->Id_error_integ = hACR_Init->Id_error_integ_limit;
 800e454:	4b04      	ldr	r3, [pc, #16]	; (800e468 <ACR_Refresh+0x2b0>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	695a      	ldr	r2, [r3, #20]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	64da      	str	r2, [r3, #76]	; 0x4c
 800e45e:	e046      	b.n	800e4ee <ACR_Refresh+0x336>
 800e460:	54442d18 	.word	0x54442d18
 800e464:	400921fb 	.word	0x400921fb
 800e468:	20000098 	.word	0x20000098
 800e46c:	40020400 	.word	0x40020400
 800e470:	20004204 	.word	0x20004204
 800e474:	3ea2f838 	.word	0x3ea2f838
 800e478:	459c4000 	.word	0x459c4000
 800e47c:	08012884 	.word	0x08012884
 800e480:	44c6f195 	.word	0x44c6f195
 800e484:	40020000 	.word	0x40020000
 800e488:	2000009c 	.word	0x2000009c
 800e48c:	200000a0 	.word	0x200000a0
		}
		else if(hACR->Id_error_integ < -1.0 * hACR_Init->Id_error_integ_limit)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e494:	4618      	mov	r0, r3
 800e496:	f7f9 ff87 	bl	80083a8 <__aeabi_f2d>
 800e49a:	4682      	mov	sl, r0
 800e49c:	468b      	mov	fp, r1
 800e49e:	4b78      	ldr	r3, [pc, #480]	; (800e680 <ACR_Refresh+0x4c8>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	695b      	ldr	r3, [r3, #20]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7f9 ff7f 	bl	80083a8 <__aeabi_f2d>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	4690      	mov	r8, r2
 800e4b0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800e4b4:	4642      	mov	r2, r8
 800e4b6:	464b      	mov	r3, r9
 800e4b8:	4650      	mov	r0, sl
 800e4ba:	4659      	mov	r1, fp
 800e4bc:	f7fa fa3e 	bl	800893c <__aeabi_dcmplt>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d013      	beq.n	800e4ee <ACR_Refresh+0x336>
		{
			hACR->Id_error_integ = -1.0 * hACR_Init->Id_error_integ_limit;
 800e4c6:	4b6e      	ldr	r3, [pc, #440]	; (800e680 <ACR_Refresh+0x4c8>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	695b      	ldr	r3, [r3, #20]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7f9 ff6b 	bl	80083a8 <__aeabi_f2d>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	4619      	mov	r1, r3
 800e4da:	f7fa fa57 	bl	800898c <__aeabi_d2f>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	ee07 3a90 	vmov	s15, r3
 800e4e4:	eef1 7a67 	vneg.f32	s15, s15
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}

		if(hACR->Iq_error_integ > hACR_Init->Iq_error_integ_limit)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e4f4:	4b62      	ldr	r3, [pc, #392]	; (800e680 <ACR_Refresh+0x4c8>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	edd3 7a06 	vldr	s15, [r3, #24]
 800e4fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e504:	dd05      	ble.n	800e512 <ACR_Refresh+0x35a>
		{
			hACR->Iq_error_integ = hACR_Init->Iq_error_integ_limit;
 800e506:	4b5e      	ldr	r3, [pc, #376]	; (800e680 <ACR_Refresh+0x4c8>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	699a      	ldr	r2, [r3, #24]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	651a      	str	r2, [r3, #80]	; 0x50
 800e510:	e02e      	b.n	800e570 <ACR_Refresh+0x3b8>
		}
		else if(hACR->Iq_error_integ < -1.0 * hACR_Init->Iq_error_integ_limit)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e516:	4618      	mov	r0, r3
 800e518:	f7f9 ff46 	bl	80083a8 <__aeabi_f2d>
 800e51c:	4680      	mov	r8, r0
 800e51e:	4689      	mov	r9, r1
 800e520:	4b57      	ldr	r3, [pc, #348]	; (800e680 <ACR_Refresh+0x4c8>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	4618      	mov	r0, r3
 800e528:	f7f9 ff3e 	bl	80083a8 <__aeabi_f2d>
 800e52c:	4602      	mov	r2, r0
 800e52e:	460b      	mov	r3, r1
 800e530:	4614      	mov	r4, r2
 800e532:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800e536:	4622      	mov	r2, r4
 800e538:	462b      	mov	r3, r5
 800e53a:	4640      	mov	r0, r8
 800e53c:	4649      	mov	r1, r9
 800e53e:	f7fa f9fd 	bl	800893c <__aeabi_dcmplt>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d013      	beq.n	800e570 <ACR_Refresh+0x3b8>
		{
			hACR->Iq_error_integ = -1.0 * hACR_Init->Iq_error_integ_limit;
 800e548:	4b4d      	ldr	r3, [pc, #308]	; (800e680 <ACR_Refresh+0x4c8>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	4618      	mov	r0, r3
 800e550:	f7f9 ff2a 	bl	80083a8 <__aeabi_f2d>
 800e554:	4603      	mov	r3, r0
 800e556:	460c      	mov	r4, r1
 800e558:	4618      	mov	r0, r3
 800e55a:	4621      	mov	r1, r4
 800e55c:	f7fa fa16 	bl	800898c <__aeabi_d2f>
 800e560:	4603      	mov	r3, r0
 800e562:	ee07 3a90 	vmov	s15, r3
 800e566:	eef1 7a67 	vneg.f32	s15, s15
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		}


		hACR->p_Id_error = hACR->Id_error;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	645a      	str	r2, [r3, #68]	; 0x44
		hACR->p_Iq_error = hACR->Iq_error;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	649a      	str	r2, [r3, #72]	; 0x48

		hACR->Vd_ref = hACR_Init->Kp * hACR->Id_error + hACR_Init->Ki * hACR->Id_error_integ;
 800e580:	4b3f      	ldr	r3, [pc, #252]	; (800e680 <ACR_Refresh+0x4c8>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	ed93 7a00 	vldr	s14, [r3]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e58e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e592:	4b3b      	ldr	r3, [pc, #236]	; (800e680 <ACR_Refresh+0x4c8>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	edd3 6a01 	vldr	s13, [r3, #4]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800e5a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		hACR->Vq_ref = hACR_Init->Kp * hACR->Iq_error + hACR_Init->Ki * hACR->Iq_error_integ;
 800e5ae:	4b34      	ldr	r3, [pc, #208]	; (800e680 <ACR_Refresh+0x4c8>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	ed93 7a00 	vldr	s14, [r3]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e5bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5c0:	4b2f      	ldr	r3, [pc, #188]	; (800e680 <ACR_Refresh+0x4c8>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	edd3 6a01 	vldr	s13, [r3, #4]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800e5ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	*/




	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e5dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e5e0:	4828      	ldr	r0, [pc, #160]	; (800e684 <ACR_Refresh+0x4cc>)
 800e5e2:	f7fc febf 	bl	800b364 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	if(hACR->forced_commute_enable)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d017      	beq.n	800e620 <ACR_Refresh+0x468>
	{
		setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	ed93 6a1a 	vldr	s12, [r3, #104]	; 0x68
 800e608:	eef0 1a46 	vmov.f32	s3, s12
 800e60c:	eeb0 1a66 	vmov.f32	s2, s13
 800e610:	eef0 0a47 	vmov.f32	s1, s14
 800e614:	eeb0 0a67 	vmov.f32	s0, s15
 800e618:	481b      	ldr	r0, [pc, #108]	; (800e688 <ACR_Refresh+0x4d0>)
 800e61a:	f001 ffb7 	bl	801058c <setSVM_dq>
 800e61e:	e01a      	b.n	800e656 <ACR_Refresh+0x49e>
	}
	else
	{
		setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e62c:	4b14      	ldr	r3, [pc, #80]	; (800e680 <ACR_Refresh+0x4c8>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	69db      	ldr	r3, [r3, #28]
 800e632:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800e636:	4b12      	ldr	r3, [pc, #72]	; (800e680 <ACR_Refresh+0x4c8>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	69db      	ldr	r3, [r3, #28]
 800e63c:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800e640:	eef0 1a46 	vmov.f32	s3, s12
 800e644:	eeb0 1a66 	vmov.f32	s2, s13
 800e648:	eef0 0a47 	vmov.f32	s1, s14
 800e64c:	eeb0 0a67 	vmov.f32	s0, s15
 800e650:	480d      	ldr	r0, [pc, #52]	; (800e688 <ACR_Refresh+0x4d0>)
 800e652:	f001 ff9b 	bl	801058c <setSVM_dq>
#endif




	msec += 0.1f;
 800e656:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <ACR_Refresh+0x4d4>)
 800e658:	edd3 7a00 	vldr	s15, [r3]
 800e65c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e690 <ACR_Refresh+0x4d8>
 800e660:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e664:	4b09      	ldr	r3, [pc, #36]	; (800e68c <ACR_Refresh+0x4d4>)
 800e666:	edc3 7a00 	vstr	s15, [r3]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e66a:	2200      	movs	r2, #0
 800e66c:	2140      	movs	r1, #64	; 0x40
 800e66e:	4809      	ldr	r0, [pc, #36]	; (800e694 <ACR_Refresh+0x4dc>)
 800e670:	f7fc fe90 	bl	800b394 <HAL_GPIO_WritePin>

	return;
 800e674:	bf00      	nop
}
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e67e:	bf00      	nop
 800e680:	20000098 	.word	0x20000098
 800e684:	40020000 	.word	0x40020000
 800e688:	200045e4 	.word	0x200045e4
 800e68c:	20000094 	.word	0x20000094
 800e690:	3dcccccd 	.word	0x3dcccccd
 800e694:	40020400 	.word	0x40020400

0800e698 <ACR_Reset>:



inline void ACR_Reset(ACR_TypeDef *hACR)
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]

	hACR->Id_error_integ = 0.0f;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f04f 0200 	mov.w	r2, #0
 800e6a6:	64da      	str	r2, [r3, #76]	; 0x4c
	hACR->Iq_error_integ = 0.0f;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f04f 0200 	mov.w	r2, #0
 800e6ae:	651a      	str	r2, [r3, #80]	; 0x50

	hACR->Id = hACR->Id_ref = 0.0f;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f04f 0200 	mov.w	r2, #0
 800e6b6:	62da      	str	r2, [r3, #44]	; 0x2c
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	635a      	str	r2, [r3, #52]	; 0x34
	hACR->Iq = hACR->Iq_ref = 0.0f;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f04f 0200 	mov.w	r2, #0
 800e6c6:	631a      	str	r2, [r3, #48]	; 0x30
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	639a      	str	r2, [r3, #56]	; 0x38

	hACR->Vd_ref = 0.0f;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f04f 0200 	mov.w	r2, #0
 800e6d6:	655a      	str	r2, [r3, #84]	; 0x54
	hACR->Vq_ref = 0.0f;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f04f 0200 	mov.w	r2, #0
 800e6de:	659a      	str	r2, [r3, #88]	; 0x58

}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <ASR_Init>:

ASR_TypeDef mainASR;


void ASR_Init()
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	af00      	add	r7, sp, #0
	memset(&mainASR, 0x00, sizeof(mainASR));
 800e6f0:	224c      	movs	r2, #76	; 0x4c
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	4812      	ldr	r0, [pc, #72]	; (800e740 <ASR_Init+0x54>)
 800e6f6:	f002 ffea 	bl	80116ce <memset>

	mainASR.Init.Kp = 0.3f;
 800e6fa:	4b11      	ldr	r3, [pc, #68]	; (800e740 <ASR_Init+0x54>)
 800e6fc:	4a11      	ldr	r2, [pc, #68]	; (800e744 <ASR_Init+0x58>)
 800e6fe:	601a      	str	r2, [r3, #0]
	mainASR.Init.Ki = 20.0f;
 800e700:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <ASR_Init+0x54>)
 800e702:	4a11      	ldr	r2, [pc, #68]	; (800e748 <ASR_Init+0x5c>)
 800e704:	605a      	str	r2, [r3, #4]
	mainASR.Init.omega_limit = 400.0f;
 800e706:	4b0e      	ldr	r3, [pc, #56]	; (800e740 <ASR_Init+0x54>)
 800e708:	4a10      	ldr	r2, [pc, #64]	; (800e74c <ASR_Init+0x60>)
 800e70a:	60da      	str	r2, [r3, #12]
	mainASR.Init.omega_error_integ_limit = 10000.0f;
 800e70c:	4b0c      	ldr	r3, [pc, #48]	; (800e740 <ASR_Init+0x54>)
 800e70e:	4a10      	ldr	r2, [pc, #64]	; (800e750 <ASR_Init+0x64>)
 800e710:	611a      	str	r2, [r3, #16]
	mainASR.Init.cycleTime = 1E-3;
 800e712:	4b0b      	ldr	r3, [pc, #44]	; (800e740 <ASR_Init+0x54>)
 800e714:	4a0f      	ldr	r2, [pc, #60]	; (800e754 <ASR_Init+0x68>)
 800e716:	609a      	str	r2, [r3, #8]
	mainASR.Init.prescaler = 10;
 800e718:	4b09      	ldr	r3, [pc, #36]	; (800e740 <ASR_Init+0x54>)
 800e71a:	220a      	movs	r2, #10
 800e71c:	61da      	str	r2, [r3, #28]

	mainASR.Init.hEncoder = &mainEncoder;
 800e71e:	4b08      	ldr	r3, [pc, #32]	; (800e740 <ASR_Init+0x54>)
 800e720:	4a0d      	ldr	r2, [pc, #52]	; (800e758 <ASR_Init+0x6c>)
 800e722:	615a      	str	r2, [r3, #20]
	mainASR.Init.hACR = &mainACR;
 800e724:	4b06      	ldr	r3, [pc, #24]	; (800e740 <ASR_Init+0x54>)
 800e726:	4a0d      	ldr	r2, [pc, #52]	; (800e75c <ASR_Init+0x70>)
 800e728:	619a      	str	r2, [r3, #24]

	mainASR.firstLaunch = 1;
 800e72a:	4b05      	ldr	r3, [pc, #20]	; (800e740 <ASR_Init+0x54>)
 800e72c:	2201      	movs	r2, #1
 800e72e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	mainASR.omega = 0.0f;
 800e732:	4b03      	ldr	r3, [pc, #12]	; (800e740 <ASR_Init+0x54>)
 800e734:	f04f 0200 	mov.w	r2, #0
 800e738:	629a      	str	r2, [r3, #40]	; 0x28

}
 800e73a:	bf00      	nop
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	200041b8 	.word	0x200041b8
 800e744:	3e99999a 	.word	0x3e99999a
 800e748:	41a00000 	.word	0x41a00000
 800e74c:	43c80000 	.word	0x43c80000
 800e750:	461c4000 	.word	0x461c4000
 800e754:	3a83126f 	.word	0x3a83126f
 800e758:	200044e0 	.word	0x200044e0
 800e75c:	2000414c 	.word	0x2000414c

0800e760 <ASR_Start>:


void ASR_Start(ASR_TypeDef *hASR)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]

	hASR->enable = 1;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2201      	movs	r2, #1
 800e76c:	f883 2020 	strb.w	r2, [r3, #32]
	ASR_Reset(hASR);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 f901 	bl	800e978 <ASR_Reset>

}
 800e776:	bf00      	nop
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <ASR_prescaler>:

}


inline void ASR_prescaler(ASR_TypeDef *hASR)
{
 800e77e:	b480      	push	{r7}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]

	hASR->prescalerCount += 1;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	63da      	str	r2, [r3, #60]	; 0x3c

	if(hASR->prescalerCount >= hASR->Init.prescaler)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	69db      	ldr	r3, [r3, #28]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d306      	bcc.n	800e7aa <ASR_prescaler+0x2c>
	{
		hASR->launchFlg = 1;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		hASR->prescalerCount = 0;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 800e7aa:	bf00      	nop
 800e7ac:	370c      	adds	r7, #12
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <ASR_Refresh>:


inline void ASR_Refresh(ASR_TypeDef *hASR)
{
 800e7b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e7bc:	b082      	sub	sp, #8
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
	static float _omega_ref;
	static float torque_ref;

	static ASR_InitTypeDef *hASR_Init;

	hASR_Init = &hASR->Init;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4a68      	ldr	r2, [pc, #416]	; (800e968 <ASR_Refresh+0x1b0>)
 800e7c6:	6013      	str	r3, [r2, #0]

	// プリスケーラリセット時のみ実行
	if(hASR->launchFlg == 0)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 80bc 	beq.w	800e94c <ASR_Refresh+0x194>
	{
		return;
	}
	hASR->launchFlg = 0;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if(d_theta < - M_PI)		d_theta += 2 * M_PI;
	else if(d_theta > M_PI)		d_theta -= 2 * M_PI;

	hASR->omega = hASR->omega * 0.5f + 0.5f * d_theta / hASR_Init->cycleTime;
*/
	hASR->omega = hASR_Init->hEncoder->omega;
 800e7dc:	4b62      	ldr	r3, [pc, #392]	; (800e968 <ASR_Refresh+0x1b0>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	629a      	str	r2, [r3, #40]	; 0x28

	if(hASR->enable == 0)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 80ae 	beq.w	800e950 <ASR_Refresh+0x198>
	{
		return;
	}

	if(hASR->omega_ref < -hASR_Init->omega_limit)		_omega_ref = -hASR_Init->omega_limit;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800e7fa:	4b5b      	ldr	r3, [pc, #364]	; (800e968 <ASR_Refresh+0x1b0>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	edd3 7a03 	vldr	s15, [r3, #12]
 800e802:	eef1 7a67 	vneg.f32	s15, s15
 800e806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80e:	d509      	bpl.n	800e824 <ASR_Refresh+0x6c>
 800e810:	4b55      	ldr	r3, [pc, #340]	; (800e968 <ASR_Refresh+0x1b0>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	edd3 7a03 	vldr	s15, [r3, #12]
 800e818:	eef1 7a67 	vneg.f32	s15, s15
 800e81c:	4b53      	ldr	r3, [pc, #332]	; (800e96c <ASR_Refresh+0x1b4>)
 800e81e:	edc3 7a00 	vstr	s15, [r3]
 800e822:	e015      	b.n	800e850 <ASR_Refresh+0x98>
	else if(hASR->omega_ref > hASR_Init->omega_limit)	_omega_ref = hASR_Init->omega_limit;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800e82a:	4b4f      	ldr	r3, [pc, #316]	; (800e968 <ASR_Refresh+0x1b0>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	edd3 7a03 	vldr	s15, [r3, #12]
 800e832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83a:	dd05      	ble.n	800e848 <ASR_Refresh+0x90>
 800e83c:	4b4a      	ldr	r3, [pc, #296]	; (800e968 <ASR_Refresh+0x1b0>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	4a4a      	ldr	r2, [pc, #296]	; (800e96c <ASR_Refresh+0x1b4>)
 800e844:	6013      	str	r3, [r2, #0]
 800e846:	e003      	b.n	800e850 <ASR_Refresh+0x98>
	else												_omega_ref = hASR->omega_ref;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84c:	4a47      	ldr	r2, [pc, #284]	; (800e96c <ASR_Refresh+0x1b4>)
 800e84e:	6013      	str	r3, [r2, #0]

	hASR->omega_error = _omega_ref - hASR->omega;
 800e850:	4b46      	ldr	r3, [pc, #280]	; (800e96c <ASR_Refresh+0x1b4>)
 800e852:	ed93 7a00 	vldr	s14, [r3]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800e85c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// integral

	hASR->omega_error_integ += hASR_Init->cycleTime * 0.5 * (hASR->omega_error + hASR->p_omega_error);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7f9 fd9c 	bl	80083a8 <__aeabi_f2d>
 800e870:	4604      	mov	r4, r0
 800e872:	460d      	mov	r5, r1
 800e874:	4b3c      	ldr	r3, [pc, #240]	; (800e968 <ASR_Refresh+0x1b0>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	689b      	ldr	r3, [r3, #8]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7f9 fd94 	bl	80083a8 <__aeabi_f2d>
 800e880:	f04f 0200 	mov.w	r2, #0
 800e884:	4b3a      	ldr	r3, [pc, #232]	; (800e970 <ASR_Refresh+0x1b8>)
 800e886:	f7f9 fde7 	bl	8008458 <__aeabi_dmul>
 800e88a:	4602      	mov	r2, r0
 800e88c:	460b      	mov	r3, r1
 800e88e:	4690      	mov	r8, r2
 800e890:	4699      	mov	r9, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800e89e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8a2:	ee17 0a90 	vmov	r0, s15
 800e8a6:	f7f9 fd7f 	bl	80083a8 <__aeabi_f2d>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	4640      	mov	r0, r8
 800e8b0:	4649      	mov	r1, r9
 800e8b2:	f7f9 fdd1 	bl	8008458 <__aeabi_dmul>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	4629      	mov	r1, r5
 800e8be:	f7f9 fc15 	bl	80080ec <__adddf3>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	f7fa f85f 	bl	800898c <__aeabi_d2f>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->p_omega_error = hASR->omega_error;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	631a      	str	r2, [r3, #48]	; 0x30

	torque_ref = hASR_Init->Kp * hASR->omega_error + hASR_Init->Ki * hASR->omega_error_integ;
 800e8dc:	4b22      	ldr	r3, [pc, #136]	; (800e968 <ASR_Refresh+0x1b0>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	ed93 7a00 	vldr	s14, [r3]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800e8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8ee:	4b1e      	ldr	r3, [pc, #120]	; (800e968 <ASR_Refresh+0x1b0>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	edd3 6a01 	vldr	s13, [r3, #4]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e8fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e900:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e904:	4b1b      	ldr	r3, [pc, #108]	; (800e974 <ASR_Refresh+0x1bc>)
 800e906:	edc3 7a00 	vstr	s15, [r3]

	hASR_Init->hACR->Id_ref = 0.0f;
 800e90a:	4b17      	ldr	r3, [pc, #92]	; (800e968 <ASR_Refresh+0x1b0>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	699b      	ldr	r3, [r3, #24]
 800e910:	f04f 0200 	mov.w	r2, #0
 800e914:	62da      	str	r2, [r3, #44]	; 0x2c
	hASR_Init->hACR->Iq_ref = hASR->Iq_ref = KT * torque_ref;
 800e916:	4b17      	ldr	r3, [pc, #92]	; (800e974 <ASR_Refresh+0x1bc>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7f9 fd44 	bl	80083a8 <__aeabi_f2d>
 800e920:	a30f      	add	r3, pc, #60	; (adr r3, 800e960 <ASR_Refresh+0x1a8>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	f7f9 fd97 	bl	8008458 <__aeabi_dmul>
 800e92a:	4603      	mov	r3, r0
 800e92c:	460c      	mov	r4, r1
 800e92e:	4618      	mov	r0, r3
 800e930:	4621      	mov	r1, r4
 800e932:	f7fa f82b 	bl	800898c <__aeabi_d2f>
 800e936:	4602      	mov	r2, r0
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	639a      	str	r2, [r3, #56]	; 0x38
 800e93c:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <ASR_Refresh+0x1b0>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	699b      	ldr	r3, [r3, #24]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e946:	631a      	str	r2, [r3, #48]	; 0x30


	return;
 800e948:	bf00      	nop
 800e94a:	e002      	b.n	800e952 <ASR_Refresh+0x19a>
		return;
 800e94c:	bf00      	nop
 800e94e:	e000      	b.n	800e952 <ASR_Refresh+0x19a>
		return;
 800e950:	bf00      	nop
}
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e95a:	bf00      	nop
 800e95c:	f3af 8000 	nop.w
 800e960:	7b830193 	.word	0x7b830193
 800e964:	3fd6eb16 	.word	0x3fd6eb16
 800e968:	200000a4 	.word	0x200000a4
 800e96c:	200000a8 	.word	0x200000a8
 800e970:	3fe00000 	.word	0x3fe00000
 800e974:	200000ac 	.word	0x200000ac

0800e978 <ASR_Reset>:



inline void ASR_Reset(ASR_TypeDef *hASR)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]

	hASR->p_theta = 0.0f;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f04f 0200 	mov.w	r2, #0
 800e986:	645a      	str	r2, [r3, #68]	; 0x44

	hASR->firstLaunch = 1;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hASR->omega_error_integ = 0.0f;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f04f 0200 	mov.w	r2, #0
 800e996:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->omega = 0.0f;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f04f 0200 	mov.w	r2, #0
 800e99e:	629a      	str	r2, [r3, #40]	; 0x28

	hASR->omega_ref = 0.0f;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f04f 0200 	mov.w	r2, #0
 800e9a6:	625a      	str	r2, [r3, #36]	; 0x24


}
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <CurrentSensor_Init>:

int32_t median3(int32_t *buf);


void CurrentSensor_Init()
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0

	memcpy(&mainCS, 0x00, sizeof(mainCS));
 800e9b8:	4a12      	ldr	r2, [pc, #72]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	4610      	mov	r0, r2
 800e9be:	4619      	mov	r1, r3
 800e9c0:	2370      	movs	r3, #112	; 0x70
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	f002 fe78 	bl	80116b8 <memcpy>

	mainCS.Init.CS_Type = CS_Type_3shunt;
 800e9c8:	4b0e      	ldr	r3, [pc, #56]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	701a      	strb	r2, [r3, #0]
	mainCS.Init.Gain_currentSense = -10.0f; // 1 / ( R * OPAmpGain) [A / V]
 800e9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9d0:	4a0d      	ldr	r2, [pc, #52]	; (800ea08 <CurrentSensor_Init+0x54>)
 800e9d2:	615a      	str	r2, [r3, #20]
	mainCS.Init.V_Iu_offset = 1.67497551f;
 800e9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9d6:	4a0d      	ldr	r2, [pc, #52]	; (800ea0c <CurrentSensor_Init+0x58>)
 800e9d8:	619a      	str	r2, [r3, #24]
	mainCS.Init.V_Iv_offset = 1.67578125f;
 800e9da:	4b0a      	ldr	r3, [pc, #40]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9dc:	4a0c      	ldr	r2, [pc, #48]	; (800ea10 <CurrentSensor_Init+0x5c>)
 800e9de:	61da      	str	r2, [r3, #28]
	mainCS.Init.V_Iw_offset = 1.67819822f;
 800e9e0:	4b08      	ldr	r3, [pc, #32]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9e2:	4a0c      	ldr	r2, [pc, #48]	; (800ea14 <CurrentSensor_Init+0x60>)
 800e9e4:	621a      	str	r2, [r3, #32]
	mainCS.Init.hadc_Iu = &hadc1;
 800e9e6:	4b07      	ldr	r3, [pc, #28]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9e8:	4a0b      	ldr	r2, [pc, #44]	; (800ea18 <CurrentSensor_Init+0x64>)
 800e9ea:	605a      	str	r2, [r3, #4]
	mainCS.Init.hadc_Iv = &hadc2;
 800e9ec:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9ee:	4a0b      	ldr	r2, [pc, #44]	; (800ea1c <CurrentSensor_Init+0x68>)
 800e9f0:	609a      	str	r2, [r3, #8]
	mainCS.Init.hadc_Iw = &hadc3;
 800e9f2:	4b04      	ldr	r3, [pc, #16]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9f4:	4a0a      	ldr	r2, [pc, #40]	; (800ea20 <CurrentSensor_Init+0x6c>)
 800e9f6:	60da      	str	r2, [r3, #12]

	mainCS.pos_MEDF_I = 0;
 800e9f8:	4b02      	ldr	r3, [pc, #8]	; (800ea04 <CurrentSensor_Init+0x50>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	631a      	str	r2, [r3, #48]	; 0x30

}
 800e9fe:	bf00      	nop
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20004204 	.word	0x20004204
 800ea08:	c1200000 	.word	0xc1200000
 800ea0c:	3fd66599 	.word	0x3fd66599
 800ea10:	3fd68000 	.word	0x3fd68000
 800ea14:	3fd6cf33 	.word	0x3fd6cf33
 800ea18:	2000431c 	.word	0x2000431c
 800ea1c:	20004274 	.word	0x20004274
 800ea20:	20004364 	.word	0x20004364

0800ea24 <CurrentSensor_Start>:


void CurrentSensor_Start(CurrentSensor_TypeDef *hCS)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]

	switch(hCS->Init.CS_Type)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d000      	beq.n	800ea36 <CurrentSensor_Start+0x12>
		break;
	}



}
 800ea34:	e018      	b.n	800ea68 <CurrentSensor_Start+0x44>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iu, hCS->AD_Iu, 1);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6858      	ldr	r0, [r3, #4]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	3328      	adds	r3, #40	; 0x28
 800ea3e:	2201      	movs	r2, #1
 800ea40:	4619      	mov	r1, r3
 800ea42:	f7fa fa4b 	bl	8008edc <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iv, hCS->AD_Iv, 1);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6898      	ldr	r0, [r3, #8]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	332a      	adds	r3, #42	; 0x2a
 800ea4e:	2201      	movs	r2, #1
 800ea50:	4619      	mov	r1, r3
 800ea52:	f7fa fa43 	bl	8008edc <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iw, hCS->AD_Iw, 1);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	68d8      	ldr	r0, [r3, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	332c      	adds	r3, #44	; 0x2c
 800ea5e:	2201      	movs	r2, #1
 800ea60:	4619      	mov	r1, r3
 800ea62:	f7fa fa3b 	bl	8008edc <HAL_ADC_Start_DMA>
		break;
 800ea66:	bf00      	nop
}
 800ea68:	bf00      	nop
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <CurrentSensor_Refresh>:
/*
 * UVWの電流値を更新するだけ
 * 座標変換とかはやらない
 */
inline void CurrentSensor_Refresh(CurrentSensor_TypeDef *hCS, uint8_t SVM_sector)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	460b      	mov	r3, r1
 800ea7a:	70fb      	strb	r3, [r7, #3]
	static int32_t AD_Iv_MEDF = 0;
	static int32_t AD_Iw_MEDF = 0;

	static CurrentSensor_InitTypeDef *hCS_Init;

	hCS_Init = &hCS->Init;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a98      	ldr	r2, [pc, #608]	; (800ece0 <CurrentSensor_Refresh+0x270>)
 800ea80:	6013      	str	r3, [r2, #0]

	switch(hCS->Init.CS_Type)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d000      	beq.n	800ea8c <CurrentSensor_Refresh+0x1c>

		break; /* CS_Type_3shunt */


		default:
			break;
 800ea8a:	e124      	b.n	800ecd6 <CurrentSensor_Refresh+0x266>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iu, hCS->AD_Iu, 1);
 800ea8c:	4b94      	ldr	r3, [pc, #592]	; (800ece0 <CurrentSensor_Refresh+0x270>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6858      	ldr	r0, [r3, #4]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	3328      	adds	r3, #40	; 0x28
 800ea96:	2201      	movs	r2, #1
 800ea98:	4619      	mov	r1, r3
 800ea9a:	f7fa fa1f 	bl	8008edc <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iv, hCS->AD_Iv, 1);
 800ea9e:	4b90      	ldr	r3, [pc, #576]	; (800ece0 <CurrentSensor_Refresh+0x270>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	6898      	ldr	r0, [r3, #8]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	332a      	adds	r3, #42	; 0x2a
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	4619      	mov	r1, r3
 800eaac:	f7fa fa16 	bl	8008edc <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iw, hCS->AD_Iw, 1);
 800eab0:	4b8b      	ldr	r3, [pc, #556]	; (800ece0 <CurrentSensor_Refresh+0x270>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	68d8      	ldr	r0, [r3, #12]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	332c      	adds	r3, #44	; 0x2c
 800eaba:	2201      	movs	r2, #1
 800eabc:	4619      	mov	r1, r3
 800eabe:	f7fa fa0d 	bl	8008edc <HAL_ADC_Start_DMA>
		hCS->AD_Iu_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iu[0];
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaca:	4611      	mov	r1, r2
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	330c      	adds	r3, #12
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	4413      	add	r3, r2
 800ead4:	6059      	str	r1, [r3, #4]
		hCS->AD_Iv_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iv[0];
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	3210      	adds	r2, #16
 800eae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hCS->AD_Iw_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iw[0];
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaee:	4611      	mov	r1, r2
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	3312      	adds	r3, #18
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	4413      	add	r3, r2
 800eaf8:	6059      	str	r1, [r3, #4]
		hCS->pos_MEDF_I += 1;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafe:	1c5a      	adds	r2, r3, #1
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	631a      	str	r2, [r3, #48]	; 0x30
		if(hCS->pos_MEDF_I >= 3)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	dd02      	ble.n	800eb12 <CurrentSensor_Refresh+0xa2>
			hCS->pos_MEDF_I = 0;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	631a      	str	r2, [r3, #48]	; 0x30
		AD_Iu_MEDF = median3(hCS->AD_Iu_buf);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	3334      	adds	r3, #52	; 0x34
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 f974 	bl	800ee04 <median3>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	4b71      	ldr	r3, [pc, #452]	; (800ece4 <CurrentSensor_Refresh+0x274>)
 800eb20:	601a      	str	r2, [r3, #0]
		AD_Iv_MEDF = median3(hCS->AD_Iv_buf);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3340      	adds	r3, #64	; 0x40
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 f96c 	bl	800ee04 <median3>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	4b6e      	ldr	r3, [pc, #440]	; (800ece8 <CurrentSensor_Refresh+0x278>)
 800eb30:	601a      	str	r2, [r3, #0]
		AD_Iw_MEDF = median3(hCS->AD_Iw_buf);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	334c      	adds	r3, #76	; 0x4c
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 f964 	bl	800ee04 <median3>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	4b6b      	ldr	r3, [pc, #428]	; (800ecec <CurrentSensor_Refresh+0x27c>)
 800eb40:	601a      	str	r2, [r3, #0]
		hCS->V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iu_offset;
 800eb42:	4b68      	ldr	r3, [pc, #416]	; (800ece4 <CurrentSensor_Refresh+0x274>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	ee07 3a90 	vmov	s15, r3
 800eb4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb4e:	eddf 7a68 	vldr	s15, [pc, #416]	; 800ecf0 <CurrentSensor_Refresh+0x280>
 800eb52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb5a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800ecf4 <CurrentSensor_Refresh+0x284>
 800eb5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb62:	4b5f      	ldr	r3, [pc, #380]	; (800ece0 <CurrentSensor_Refresh+0x270>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	edd3 7a06 	vldr	s15, [r3, #24]
 800eb6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		hCS->V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iv_offset;
 800eb74:	4b5c      	ldr	r3, [pc, #368]	; (800ece8 <CurrentSensor_Refresh+0x278>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	ee07 3a90 	vmov	s15, r3
 800eb7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb80:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ecf0 <CurrentSensor_Refresh+0x280>
 800eb84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb8c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800ecf4 <CurrentSensor_Refresh+0x284>
 800eb90:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb94:	4b52      	ldr	r3, [pc, #328]	; (800ece0 <CurrentSensor_Refresh+0x270>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	edd3 7a07 	vldr	s15, [r3, #28]
 800eb9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		hCS->V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iw_offset;
 800eba6:	4b51      	ldr	r3, [pc, #324]	; (800ecec <CurrentSensor_Refresh+0x27c>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	ee07 3a90 	vmov	s15, r3
 800ebae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ebb2:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800ecf0 <CurrentSensor_Refresh+0x280>
 800ebb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ebba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebbe:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ecf4 <CurrentSensor_Refresh+0x284>
 800ebc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ebc6:	4b46      	ldr	r3, [pc, #280]	; (800ece0 <CurrentSensor_Refresh+0x270>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	edd3 7a08 	vldr	s15, [r3, #32]
 800ebce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		switch(SVM_sector)
 800ebd8:	78fb      	ldrb	r3, [r7, #3]
 800ebda:	2b05      	cmp	r3, #5
 800ebdc:	d87a      	bhi.n	800ecd4 <CurrentSensor_Refresh+0x264>
 800ebde:	a201      	add	r2, pc, #4	; (adr r2, 800ebe4 <CurrentSensor_Refresh+0x174>)
 800ebe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe4:	0800ebfd 	.word	0x0800ebfd
 800ebe8:	0800ec45 	.word	0x0800ec45
 800ebec:	0800ec45 	.word	0x0800ec45
 800ebf0:	0800ec8d 	.word	0x0800ec8d
 800ebf4:	0800ec8d 	.word	0x0800ec8d
 800ebf8:	0800ebfd 	.word	0x0800ebfd
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	edd3 7a05 	vldr	s15, [r3, #20]
 800ec08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ec1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			hCS->Iu = - hCS->Iv - hCS->Iw;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800ec2e:	eeb1 7a67 	vneg.f32	s14, s15
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ec38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800ec42:	e047      	b.n	800ecd4 <CurrentSensor_Refresh+0x264>
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	edd3 7a05 	vldr	s15, [r3, #20]
 800ec50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	edd3 7a05 	vldr	s15, [r3, #20]
 800ec66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			hCS->Iv = - hCS->Iw - hCS->Iu;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ec76:	eeb1 7a67 	vneg.f32	s14, s15
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800ec80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			break;
 800ec8a:	e023      	b.n	800ecd4 <CurrentSensor_Refresh+0x264>
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	edd3 7a05 	vldr	s15, [r3, #20]
 800ec98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	edd3 7a05 	vldr	s15, [r3, #20]
 800ecae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			hCS->Iw = - hCS->Iu - hCS->Iv;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800ecbe:	eeb1 7a67 	vneg.f32	s14, s15
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800ecc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			break;
 800ecd2:	bf00      	nop
		break; /* CS_Type_3shunt */
 800ecd4:	bf00      	nop
	}




}
 800ecd6:	bf00      	nop
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	200000b0 	.word	0x200000b0
 800ece4:	200000b4 	.word	0x200000b4
 800ece8:	200000b8 	.word	0x200000b8
 800ecec:	200000bc 	.word	0x200000bc
 800ecf0:	00001000 	.word	0x00001000
 800ecf4:	40533333 	.word	0x40533333

0800ecf8 <CurrentSensor_getIdq>:

/*
 * 回転座標系における電流を算出
 */
inline void CurrentSensor_getIdq(CurrentSensor_TypeDef *hCS, float *Id, float *Iq, float cos_theta_re, float sin_theta_re)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6178      	str	r0, [r7, #20]
 800ed00:	6139      	str	r1, [r7, #16]
 800ed02:	60fa      	str	r2, [r7, #12]
 800ed04:	ed87 0a02 	vstr	s0, [r7, #8]
 800ed08:	edc7 0a01 	vstr	s1, [r7, #4]

	*Id = 0.8165f * (
			+ hCS->Iu * cos_theta_re
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800ed12:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed16:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re)
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800ed20:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed24:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800ed28:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ed2c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed30:	eddf 5a32 	vldr	s11, [pc, #200]	; 800edfc <CurrentSensor_getIdq+0x104>
 800ed34:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ed38:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ed3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed40:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800ed4a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed4e:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800ed52:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ed56:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed5a:	eddf 5a28 	vldr	s11, [pc, #160]	; 800edfc <CurrentSensor_getIdq+0x104>
 800ed5e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ed62:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ed66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed6a:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Id = 0.8165f * (
 800ed6e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ee00 <CurrentSensor_getIdq+0x108>
 800ed72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	edc3 7a00 	vstr	s15, [r3]

	*Iq = 0.8165f * (
			- hCS->Iu * sin_theta_re
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800ed82:	eeb1 7a67 	vneg.f32	s14, s15
 800ed86:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed8a:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re)
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800ed94:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed98:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ed9c:	ee27 6a86 	vmul.f32	s12, s15, s12
 800eda0:	edd7 7a02 	vldr	s15, [r7, #8]
 800eda4:	eddf 5a15 	vldr	s11, [pc, #84]	; 800edfc <CurrentSensor_getIdq+0x104>
 800eda8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edac:	ee76 7a27 	vadd.f32	s15, s12, s15
 800edb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edb4:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800edbe:	edd7 7a01 	vldr	s15, [r7, #4]
 800edc2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800edc6:	ee27 6a86 	vmul.f32	s12, s15, s12
 800edca:	edd7 7a02 	vldr	s15, [r7, #8]
 800edce:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800edfc <CurrentSensor_getIdq+0x104>
 800edd2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edd6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800edda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edde:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Iq = 0.8165f * (
 800ede2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ee00 <CurrentSensor_getIdq+0x108>
 800ede6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	edc3 7a00 	vstr	s15, [r3]

}
 800edf0:	bf00      	nop
 800edf2:	371c      	adds	r7, #28
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr
 800edfc:	3f5ae148 	.word	0x3f5ae148
 800ee00:	3f510625 	.word	0x3f510625

0800ee04 <median3>:

/*
 * Length:3 のメディアンフィルタ
 */
inline int32_t median3(int32_t *buf)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	3304      	adds	r3, #4
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	da17      	bge.n	800ee4a <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3308      	adds	r3, #8
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	da02      	bge.n	800ee2e <median3+0x2a>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	e025      	b.n	800ee7a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	3308      	adds	r3, #8
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	3304      	adds	r3, #4
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	da02      	bge.n	800ee44 <median3+0x40>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	e01a      	b.n	800ee7a <median3+0x76>
		else						return buf[1];
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	e017      	b.n	800ee7a <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	3304      	adds	r3, #4
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	da02      	bge.n	800ee60 <median3+0x5c>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	e00c      	b.n	800ee7a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3308      	adds	r3, #8
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	3304      	adds	r3, #4
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	da02      	bge.n	800ee76 <median3+0x72>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	e001      	b.n	800ee7a <median3+0x76>
		else						return buf[0];
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
	...

0800ee88 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800ee8e:	463b      	mov	r3, r7
 800ee90:	2200      	movs	r2, #0
 800ee92:	601a      	str	r2, [r3, #0]
 800ee94:	605a      	str	r2, [r3, #4]
 800ee96:	609a      	str	r2, [r3, #8]
 800ee98:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800ee9a:	4b22      	ldr	r3, [pc, #136]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800ee9c:	4a22      	ldr	r2, [pc, #136]	; (800ef28 <MX_ADC1_Init+0xa0>)
 800ee9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800eea0:	4b20      	ldr	r3, [pc, #128]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eea6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800eea8:	4b1e      	ldr	r3, [pc, #120]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eeaa:	2200      	movs	r2, #0
 800eeac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800eeae:	4b1d      	ldr	r3, [pc, #116]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800eeb4:	4b1b      	ldr	r3, [pc, #108]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eeba:	4b1a      	ldr	r3, [pc, #104]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800eec2:	4b18      	ldr	r3, [pc, #96]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eec4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800eec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800eeca:	4b16      	ldr	r3, [pc, #88]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eecc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800eed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800eed2:	4b14      	ldr	r3, [pc, #80]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800eed8:	4b12      	ldr	r3, [pc, #72]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eeda:	2201      	movs	r2, #1
 800eedc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800eede:	4b11      	ldr	r3, [pc, #68]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eee0:	2201      	movs	r2, #1
 800eee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800eee6:	4b0f      	ldr	r3, [pc, #60]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eee8:	2201      	movs	r2, #1
 800eeea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800eeec:	480d      	ldr	r0, [pc, #52]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800eeee:	f7f9 ffb1 	bl	8008e54 <HAL_ADC_Init>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d001      	beq.n	800eefc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800eef8:	f001 fae6 	bl	80104c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ef00:	2301      	movs	r3, #1
 800ef02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800ef04:	2301      	movs	r3, #1
 800ef06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ef08:	463b      	mov	r3, r7
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	4805      	ldr	r0, [pc, #20]	; (800ef24 <MX_ADC1_Init+0x9c>)
 800ef0e:	f7fa f8f5 	bl	80090fc <HAL_ADC_ConfigChannel>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d001      	beq.n	800ef1c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800ef18:	f001 fad6 	bl	80104c8 <Error_Handler>
  }

}
 800ef1c:	bf00      	nop
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	2000431c 	.word	0x2000431c
 800ef28:	40012000 	.word	0x40012000

0800ef2c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800ef32:	463b      	mov	r3, r7
 800ef34:	2200      	movs	r2, #0
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	605a      	str	r2, [r3, #4]
 800ef3a:	609a      	str	r2, [r3, #8]
 800ef3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800ef3e:	4b22      	ldr	r3, [pc, #136]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef40:	4a22      	ldr	r2, [pc, #136]	; (800efcc <MX_ADC2_Init+0xa0>)
 800ef42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ef44:	4b20      	ldr	r3, [pc, #128]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ef4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ef4c:	4b1e      	ldr	r3, [pc, #120]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef4e:	2200      	movs	r2, #0
 800ef50:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800ef52:	4b1d      	ldr	r3, [pc, #116]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef54:	2200      	movs	r2, #0
 800ef56:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ef58:	4b1b      	ldr	r3, [pc, #108]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ef5e:	4b1a      	ldr	r3, [pc, #104]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800ef66:	4b18      	ldr	r3, [pc, #96]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ef6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800ef6e:	4b16      	ldr	r3, [pc, #88]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef70:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ef74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ef76:	4b14      	ldr	r3, [pc, #80]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800ef7c:	4b12      	ldr	r3, [pc, #72]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef7e:	2201      	movs	r2, #1
 800ef80:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800ef82:	4b11      	ldr	r3, [pc, #68]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef84:	2201      	movs	r2, #1
 800ef86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ef8a:	4b0f      	ldr	r3, [pc, #60]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ef90:	480d      	ldr	r0, [pc, #52]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800ef92:	f7f9 ff5f 	bl	8008e54 <HAL_ADC_Init>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800ef9c:	f001 fa94 	bl	80104c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800efa0:	2304      	movs	r3, #4
 800efa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800efa4:	2301      	movs	r3, #1
 800efa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800efa8:	2301      	movs	r3, #1
 800efaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800efac:	463b      	mov	r3, r7
 800efae:	4619      	mov	r1, r3
 800efb0:	4805      	ldr	r0, [pc, #20]	; (800efc8 <MX_ADC2_Init+0x9c>)
 800efb2:	f7fa f8a3 	bl	80090fc <HAL_ADC_ConfigChannel>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800efbc:	f001 fa84 	bl	80104c8 <Error_Handler>
  }

}
 800efc0:	bf00      	nop
 800efc2:	3710      	adds	r7, #16
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	20004274 	.word	0x20004274
 800efcc:	40012100 	.word	0x40012100

0800efd0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800efd6:	463b      	mov	r3, r7
 800efd8:	2200      	movs	r2, #0
 800efda:	601a      	str	r2, [r3, #0]
 800efdc:	605a      	str	r2, [r3, #4]
 800efde:	609a      	str	r2, [r3, #8]
 800efe0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800efe2:	4b22      	ldr	r3, [pc, #136]	; (800f06c <MX_ADC3_Init+0x9c>)
 800efe4:	4a22      	ldr	r2, [pc, #136]	; (800f070 <MX_ADC3_Init+0xa0>)
 800efe6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800efe8:	4b20      	ldr	r3, [pc, #128]	; (800f06c <MX_ADC3_Init+0x9c>)
 800efea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800efee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800eff0:	4b1e      	ldr	r3, [pc, #120]	; (800f06c <MX_ADC3_Init+0x9c>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800eff6:	4b1d      	ldr	r3, [pc, #116]	; (800f06c <MX_ADC3_Init+0x9c>)
 800eff8:	2200      	movs	r2, #0
 800effa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800effc:	4b1b      	ldr	r3, [pc, #108]	; (800f06c <MX_ADC3_Init+0x9c>)
 800effe:	2200      	movs	r2, #0
 800f000:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800f002:	4b1a      	ldr	r3, [pc, #104]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f00a:	4b18      	ldr	r3, [pc, #96]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f00c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f012:	4b16      	ldr	r3, [pc, #88]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f014:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f018:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f01a:	4b14      	ldr	r3, [pc, #80]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800f020:	4b12      	ldr	r3, [pc, #72]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f022:	2201      	movs	r2, #1
 800f024:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800f026:	4b11      	ldr	r3, [pc, #68]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f02e:	4b0f      	ldr	r3, [pc, #60]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f030:	2201      	movs	r2, #1
 800f032:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f034:	480d      	ldr	r0, [pc, #52]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f036:	f7f9 ff0d 	bl	8008e54 <HAL_ADC_Init>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d001      	beq.n	800f044 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800f040:	f001 fa42 	bl	80104c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800f044:	2301      	movs	r3, #1
 800f046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f048:	2301      	movs	r3, #1
 800f04a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f04c:	2301      	movs	r3, #1
 800f04e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f050:	463b      	mov	r3, r7
 800f052:	4619      	mov	r1, r3
 800f054:	4805      	ldr	r0, [pc, #20]	; (800f06c <MX_ADC3_Init+0x9c>)
 800f056:	f7fa f851 	bl	80090fc <HAL_ADC_ConfigChannel>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d001      	beq.n	800f064 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800f060:	f001 fa32 	bl	80104c8 <Error_Handler>
  }

}
 800f064:	bf00      	nop
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20004364 	.word	0x20004364
 800f070:	40012200 	.word	0x40012200

0800f074 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b08e      	sub	sp, #56	; 0x38
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f07c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f080:	2200      	movs	r2, #0
 800f082:	601a      	str	r2, [r3, #0]
 800f084:	605a      	str	r2, [r3, #4]
 800f086:	609a      	str	r2, [r3, #8]
 800f088:	60da      	str	r2, [r3, #12]
 800f08a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a9b      	ldr	r2, [pc, #620]	; (800f300 <HAL_ADC_MspInit+0x28c>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d172      	bne.n	800f17c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f096:	2300      	movs	r3, #0
 800f098:	623b      	str	r3, [r7, #32]
 800f09a:	4b9a      	ldr	r3, [pc, #616]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f09e:	4a99      	ldr	r2, [pc, #612]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0a4:	6453      	str	r3, [r2, #68]	; 0x44
 800f0a6:	4b97      	ldr	r3, [pc, #604]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0ae:	623b      	str	r3, [r7, #32]
 800f0b0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	61fb      	str	r3, [r7, #28]
 800f0b6:	4b93      	ldr	r3, [pc, #588]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ba:	4a92      	ldr	r2, [pc, #584]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0bc:	f043 0304 	orr.w	r3, r3, #4
 800f0c0:	6313      	str	r3, [r2, #48]	; 0x30
 800f0c2:	4b90      	ldr	r3, [pc, #576]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c6:	f003 0304 	and.w	r3, r3, #4
 800f0ca:	61fb      	str	r3, [r7, #28]
 800f0cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	61bb      	str	r3, [r7, #24]
 800f0d2:	4b8c      	ldr	r3, [pc, #560]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d6:	4a8b      	ldr	r2, [pc, #556]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0d8:	f043 0301 	orr.w	r3, r3, #1
 800f0dc:	6313      	str	r3, [r2, #48]	; 0x30
 800f0de:	4b89      	ldr	r3, [pc, #548]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e2:	f003 0301 	and.w	r3, r3, #1
 800f0e6:	61bb      	str	r3, [r7, #24]
 800f0e8:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f0ee:	2303      	movs	r3, #3
 800f0f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4882      	ldr	r0, [pc, #520]	; (800f308 <HAL_ADC_MspInit+0x294>)
 800f0fe:	f7fb ff9f 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f102:	2301      	movs	r3, #1
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f106:	2303      	movs	r3, #3
 800f108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f10e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f112:	4619      	mov	r1, r3
 800f114:	487d      	ldr	r0, [pc, #500]	; (800f30c <HAL_ADC_MspInit+0x298>)
 800f116:	f7fb ff93 	bl	800b040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f11a:	4b7d      	ldr	r3, [pc, #500]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f11c:	4a7d      	ldr	r2, [pc, #500]	; (800f314 <HAL_ADC_MspInit+0x2a0>)
 800f11e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f120:	4b7b      	ldr	r3, [pc, #492]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f122:	2200      	movs	r2, #0
 800f124:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f126:	4b7a      	ldr	r3, [pc, #488]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f128:	2200      	movs	r2, #0
 800f12a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f12c:	4b78      	ldr	r3, [pc, #480]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f12e:	2200      	movs	r2, #0
 800f130:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f132:	4b77      	ldr	r3, [pc, #476]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f138:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f13a:	4b75      	ldr	r3, [pc, #468]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f13c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f140:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f142:	4b73      	ldr	r3, [pc, #460]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f144:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f148:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f14a:	4b71      	ldr	r3, [pc, #452]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800f150:	4b6f      	ldr	r3, [pc, #444]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f156:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f158:	4b6d      	ldr	r3, [pc, #436]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f15e:	486c      	ldr	r0, [pc, #432]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f160:	f7fb f8f2 	bl	800a348 <HAL_DMA_Init>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d001      	beq.n	800f16e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800f16a:	f001 f9ad 	bl	80104c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a67      	ldr	r2, [pc, #412]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f172:	639a      	str	r2, [r3, #56]	; 0x38
 800f174:	4a66      	ldr	r2, [pc, #408]	; (800f310 <HAL_ADC_MspInit+0x29c>)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800f17a:	e0bc      	b.n	800f2f6 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a65      	ldr	r2, [pc, #404]	; (800f318 <HAL_ADC_MspInit+0x2a4>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d159      	bne.n	800f23a <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f186:	2300      	movs	r3, #0
 800f188:	617b      	str	r3, [r7, #20]
 800f18a:	4b5e      	ldr	r3, [pc, #376]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f18e:	4a5d      	ldr	r2, [pc, #372]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f194:	6453      	str	r3, [r2, #68]	; 0x44
 800f196:	4b5b      	ldr	r3, [pc, #364]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f19a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f19e:	617b      	str	r3, [r7, #20]
 800f1a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	613b      	str	r3, [r7, #16]
 800f1a6:	4b57      	ldr	r3, [pc, #348]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1aa:	4a56      	ldr	r2, [pc, #344]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f1ac:	f043 0301 	orr.w	r3, r3, #1
 800f1b0:	6313      	str	r3, [r2, #48]	; 0x30
 800f1b2:	4b54      	ldr	r3, [pc, #336]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	613b      	str	r3, [r7, #16]
 800f1bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800f1be:	2310      	movs	r3, #16
 800f1c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f1c2:	2303      	movs	r3, #3
 800f1c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	484e      	ldr	r0, [pc, #312]	; (800f30c <HAL_ADC_MspInit+0x298>)
 800f1d2:	f7fb ff35 	bl	800b040 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800f1d6:	4b51      	ldr	r3, [pc, #324]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f1d8:	4a51      	ldr	r2, [pc, #324]	; (800f320 <HAL_ADC_MspInit+0x2ac>)
 800f1da:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800f1dc:	4b4f      	ldr	r3, [pc, #316]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f1de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f1e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f1e4:	4b4d      	ldr	r3, [pc, #308]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800f1ea:	4b4c      	ldr	r3, [pc, #304]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800f1f0:	4b4a      	ldr	r3, [pc, #296]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f1f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f1f8:	4b48      	ldr	r3, [pc, #288]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f1fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f200:	4b46      	ldr	r3, [pc, #280]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f206:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800f208:	4b44      	ldr	r3, [pc, #272]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f20a:	2200      	movs	r2, #0
 800f20c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800f20e:	4b43      	ldr	r3, [pc, #268]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f210:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f214:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f216:	4b41      	ldr	r3, [pc, #260]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f218:	2200      	movs	r2, #0
 800f21a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800f21c:	483f      	ldr	r0, [pc, #252]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f21e:	f7fb f893 	bl	800a348 <HAL_DMA_Init>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d001      	beq.n	800f22c <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800f228:	f001 f94e 	bl	80104c8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a3b      	ldr	r2, [pc, #236]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f230:	639a      	str	r2, [r3, #56]	; 0x38
 800f232:	4a3a      	ldr	r2, [pc, #232]	; (800f31c <HAL_ADC_MspInit+0x2a8>)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f238:	e05d      	b.n	800f2f6 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4a39      	ldr	r2, [pc, #228]	; (800f324 <HAL_ADC_MspInit+0x2b0>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d158      	bne.n	800f2f6 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f244:	2300      	movs	r3, #0
 800f246:	60fb      	str	r3, [r7, #12]
 800f248:	4b2e      	ldr	r3, [pc, #184]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f24c:	4a2d      	ldr	r2, [pc, #180]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f24e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f252:	6453      	str	r3, [r2, #68]	; 0x44
 800f254:	4b2b      	ldr	r3, [pc, #172]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f25c:	60fb      	str	r3, [r7, #12]
 800f25e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f260:	2300      	movs	r3, #0
 800f262:	60bb      	str	r3, [r7, #8]
 800f264:	4b27      	ldr	r3, [pc, #156]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f268:	4a26      	ldr	r2, [pc, #152]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f26a:	f043 0301 	orr.w	r3, r3, #1
 800f26e:	6313      	str	r3, [r2, #48]	; 0x30
 800f270:	4b24      	ldr	r3, [pc, #144]	; (800f304 <HAL_ADC_MspInit+0x290>)
 800f272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	60bb      	str	r3, [r7, #8]
 800f27a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f27c:	2302      	movs	r3, #2
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f280:	2303      	movs	r3, #3
 800f282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f284:	2300      	movs	r3, #0
 800f286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f28c:	4619      	mov	r1, r3
 800f28e:	481f      	ldr	r0, [pc, #124]	; (800f30c <HAL_ADC_MspInit+0x298>)
 800f290:	f7fb fed6 	bl	800b040 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800f294:	4b24      	ldr	r3, [pc, #144]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f296:	4a25      	ldr	r2, [pc, #148]	; (800f32c <HAL_ADC_MspInit+0x2b8>)
 800f298:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800f29a:	4b23      	ldr	r3, [pc, #140]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f29c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f2a0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f2a2:	4b21      	ldr	r3, [pc, #132]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800f2a8:	4b1f      	ldr	r3, [pc, #124]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800f2ae:	4b1e      	ldr	r3, [pc, #120]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f2b4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f2b6:	4b1c      	ldr	r3, [pc, #112]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2bc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f2be:	4b1a      	ldr	r3, [pc, #104]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f2c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800f2c6:	4b18      	ldr	r3, [pc, #96]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800f2cc:	4b16      	ldr	r3, [pc, #88]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f2d2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f2d4:	4b14      	ldr	r3, [pc, #80]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800f2da:	4813      	ldr	r0, [pc, #76]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2dc:	f7fb f834 	bl	800a348 <HAL_DMA_Init>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800f2e6:	f001 f8ef 	bl	80104c8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a0e      	ldr	r2, [pc, #56]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2ee:	639a      	str	r2, [r3, #56]	; 0x38
 800f2f0:	4a0d      	ldr	r2, [pc, #52]	; (800f328 <HAL_ADC_MspInit+0x2b4>)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f2f6:	bf00      	nop
 800f2f8:	3738      	adds	r7, #56	; 0x38
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	40012000 	.word	0x40012000
 800f304:	40023800 	.word	0x40023800
 800f308:	40020800 	.word	0x40020800
 800f30c:	40020000 	.word	0x40020000
 800f310:	200043ac 	.word	0x200043ac
 800f314:	40026410 	.word	0x40026410
 800f318:	40012100 	.word	0x40012100
 800f31c:	2000440c 	.word	0x2000440c
 800f320:	40026440 	.word	0x40026440
 800f324:	40012200 	.word	0x40012200
 800f328:	200042bc 	.word	0x200042bc
 800f32c:	40026428 	.word	0x40026428

0800f330 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800f334:	4b18      	ldr	r3, [pc, #96]	; (800f398 <MX_CAN1_Init+0x68>)
 800f336:	4a19      	ldr	r2, [pc, #100]	; (800f39c <MX_CAN1_Init+0x6c>)
 800f338:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800f33a:	4b17      	ldr	r3, [pc, #92]	; (800f398 <MX_CAN1_Init+0x68>)
 800f33c:	2204      	movs	r2, #4
 800f33e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800f340:	4b15      	ldr	r3, [pc, #84]	; (800f398 <MX_CAN1_Init+0x68>)
 800f342:	2200      	movs	r2, #0
 800f344:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800f346:	4b14      	ldr	r3, [pc, #80]	; (800f398 <MX_CAN1_Init+0x68>)
 800f348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f34c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800f34e:	4b12      	ldr	r3, [pc, #72]	; (800f398 <MX_CAN1_Init+0x68>)
 800f350:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800f354:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f356:	4b10      	ldr	r3, [pc, #64]	; (800f398 <MX_CAN1_Init+0x68>)
 800f358:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f35c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800f35e:	4b0e      	ldr	r3, [pc, #56]	; (800f398 <MX_CAN1_Init+0x68>)
 800f360:	2200      	movs	r2, #0
 800f362:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800f364:	4b0c      	ldr	r3, [pc, #48]	; (800f398 <MX_CAN1_Init+0x68>)
 800f366:	2200      	movs	r2, #0
 800f368:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800f36a:	4b0b      	ldr	r3, [pc, #44]	; (800f398 <MX_CAN1_Init+0x68>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800f370:	4b09      	ldr	r3, [pc, #36]	; (800f398 <MX_CAN1_Init+0x68>)
 800f372:	2200      	movs	r2, #0
 800f374:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800f376:	4b08      	ldr	r3, [pc, #32]	; (800f398 <MX_CAN1_Init+0x68>)
 800f378:	2200      	movs	r2, #0
 800f37a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800f37c:	4b06      	ldr	r3, [pc, #24]	; (800f398 <MX_CAN1_Init+0x68>)
 800f37e:	2200      	movs	r2, #0
 800f380:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800f382:	4805      	ldr	r0, [pc, #20]	; (800f398 <MX_CAN1_Init+0x68>)
 800f384:	f7fa f96a 	bl	800965c <HAL_CAN_Init>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800f38e:	f001 f89b 	bl	80104c8 <Error_Handler>
  }

}
 800f392:	bf00      	nop
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	200044b8 	.word	0x200044b8
 800f39c:	40006400 	.word	0x40006400

0800f3a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b08a      	sub	sp, #40	; 0x28
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3a8:	f107 0314 	add.w	r3, r7, #20
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	605a      	str	r2, [r3, #4]
 800f3b2:	609a      	str	r2, [r3, #8]
 800f3b4:	60da      	str	r2, [r3, #12]
 800f3b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a21      	ldr	r2, [pc, #132]	; (800f444 <HAL_CAN_MspInit+0xa4>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d13c      	bne.n	800f43c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	613b      	str	r3, [r7, #16]
 800f3c6:	4b20      	ldr	r3, [pc, #128]	; (800f448 <HAL_CAN_MspInit+0xa8>)
 800f3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ca:	4a1f      	ldr	r2, [pc, #124]	; (800f448 <HAL_CAN_MspInit+0xa8>)
 800f3cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f3d0:	6413      	str	r3, [r2, #64]	; 0x40
 800f3d2:	4b1d      	ldr	r3, [pc, #116]	; (800f448 <HAL_CAN_MspInit+0xa8>)
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3da:	613b      	str	r3, [r7, #16]
 800f3dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f3de:	2300      	movs	r3, #0
 800f3e0:	60fb      	str	r3, [r7, #12]
 800f3e2:	4b19      	ldr	r3, [pc, #100]	; (800f448 <HAL_CAN_MspInit+0xa8>)
 800f3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e6:	4a18      	ldr	r2, [pc, #96]	; (800f448 <HAL_CAN_MspInit+0xa8>)
 800f3e8:	f043 0301 	orr.w	r3, r3, #1
 800f3ec:	6313      	str	r3, [r2, #48]	; 0x30
 800f3ee:	4b16      	ldr	r3, [pc, #88]	; (800f448 <HAL_CAN_MspInit+0xa8>)
 800f3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f3fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f3fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f400:	2302      	movs	r3, #2
 800f402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f404:	2300      	movs	r3, #0
 800f406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f408:	2303      	movs	r3, #3
 800f40a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800f40c:	2309      	movs	r3, #9
 800f40e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f410:	f107 0314 	add.w	r3, r7, #20
 800f414:	4619      	mov	r1, r3
 800f416:	480d      	ldr	r0, [pc, #52]	; (800f44c <HAL_CAN_MspInit+0xac>)
 800f418:	f7fb fe12 	bl	800b040 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800f41c:	2200      	movs	r2, #0
 800f41e:	2100      	movs	r1, #0
 800f420:	2013      	movs	r0, #19
 800f422:	f7fa ff5a 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800f426:	2013      	movs	r0, #19
 800f428:	f7fa ff73 	bl	800a312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800f42c:	2200      	movs	r2, #0
 800f42e:	2100      	movs	r1, #0
 800f430:	2014      	movs	r0, #20
 800f432:	f7fa ff52 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800f436:	2014      	movs	r0, #20
 800f438:	f7fa ff6b 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800f43c:	bf00      	nop
 800f43e:	3728      	adds	r7, #40	; 0x28
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	40006400 	.word	0x40006400
 800f448:	40023800 	.word	0x40023800
 800f44c:	40020000 	.word	0x40020000

0800f450 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 800f450:	b580      	push	{r7, lr}
 800f452:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 800f454:	f000 f84a 	bl	800f4ec <getChannel>
 800f458:	4603      	mov	r3, r0
 800f45a:	461a      	mov	r2, r3
 800f45c:	4b20      	ldr	r3, [pc, #128]	; (800f4e0 <CAN_Init+0x90>)
 800f45e:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 800f460:	4b20      	ldr	r3, [pc, #128]	; (800f4e4 <CAN_Init+0x94>)
 800f462:	2200      	movs	r2, #0
 800f464:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800f466:	4b1f      	ldr	r3, [pc, #124]	; (800f4e4 <CAN_Init+0x94>)
 800f468:	2200      	movs	r2, #0
 800f46a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800f46c:	4b1d      	ldr	r3, [pc, #116]	; (800f4e4 <CAN_Init+0x94>)
 800f46e:	2201      	movs	r2, #1
 800f470:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 800f472:	4b1b      	ldr	r3, [pc, #108]	; (800f4e0 <CAN_Init+0x90>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	029b      	lsls	r3, r3, #10
 800f478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f47c:	461a      	mov	r2, r3
 800f47e:	4b19      	ldr	r3, [pc, #100]	; (800f4e4 <CAN_Init+0x94>)
 800f480:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800f482:	4b18      	ldr	r3, [pc, #96]	; (800f4e4 <CAN_Init+0x94>)
 800f484:	2200      	movs	r2, #0
 800f486:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 800f488:	4b16      	ldr	r3, [pc, #88]	; (800f4e4 <CAN_Init+0x94>)
 800f48a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800f48e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 800f490:	4b14      	ldr	r3, [pc, #80]	; (800f4e4 <CAN_Init+0x94>)
 800f492:	2206      	movs	r2, #6
 800f494:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800f496:	4b13      	ldr	r3, [pc, #76]	; (800f4e4 <CAN_Init+0x94>)
 800f498:	2200      	movs	r2, #0
 800f49a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800f49c:	4b11      	ldr	r3, [pc, #68]	; (800f4e4 <CAN_Init+0x94>)
 800f49e:	2201      	movs	r2, #1
 800f4a0:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800f4a2:	4b10      	ldr	r3, [pc, #64]	; (800f4e4 <CAN_Init+0x94>)
 800f4a4:	220e      	movs	r2, #14
 800f4a6:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800f4a8:	490e      	ldr	r1, [pc, #56]	; (800f4e4 <CAN_Init+0x94>)
 800f4aa:	480f      	ldr	r0, [pc, #60]	; (800f4e8 <CAN_Init+0x98>)
 800f4ac:	f7fa f9d2 	bl	8009854 <HAL_CAN_ConfigFilter>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d001      	beq.n	800f4ba <CAN_Init+0x6a>
	{
	  Error_Handler();
 800f4b6:	f001 f807 	bl	80104c8 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800f4ba:	480b      	ldr	r0, [pc, #44]	; (800f4e8 <CAN_Init+0x98>)
 800f4bc:	f7fa faaa 	bl	8009a14 <HAL_CAN_Start>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <CAN_Init+0x7a>
	{
	  Error_Handler();
 800f4c6:	f000 ffff 	bl	80104c8 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800f4ca:	2103      	movs	r1, #3
 800f4cc:	4806      	ldr	r0, [pc, #24]	; (800f4e8 <CAN_Init+0x98>)
 800f4ce:	f7fa fbf8 	bl	8009cc2 <HAL_CAN_ActivateNotification>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d001      	beq.n	800f4dc <CAN_Init+0x8c>
	{
	  Error_Handler();
 800f4d8:	f000 fff6 	bl	80104c8 <Error_Handler>
	}


}
 800f4dc:	bf00      	nop
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	200000c0 	.word	0x200000c0
 800f4e4:	2000446c 	.word	0x2000446c
 800f4e8:	200044b8 	.word	0x200044b8

0800f4ec <getChannel>:


uint8_t getChannel()
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800f4f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f4fa:	481b      	ldr	r0, [pc, #108]	; (800f568 <getChannel+0x7c>)
 800f4fc:	f7fb ff32 	bl	800b364 <HAL_GPIO_ReadPin>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	bf0c      	ite	eq
 800f506:	2301      	moveq	r3, #1
 800f508:	2300      	movne	r3, #0
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	b25a      	sxtb	r2, r3
 800f50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f512:	4313      	orrs	r3, r2
 800f514:	b25b      	sxtb	r3, r3
 800f516:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800f518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f51c:	4812      	ldr	r0, [pc, #72]	; (800f568 <getChannel+0x7c>)
 800f51e:	f7fb ff21 	bl	800b364 <HAL_GPIO_ReadPin>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <getChannel+0x40>
 800f528:	2302      	movs	r3, #2
 800f52a:	e000      	b.n	800f52e <getChannel+0x42>
 800f52c:	2300      	movs	r3, #0
 800f52e:	b25a      	sxtb	r2, r3
 800f530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f534:	4313      	orrs	r3, r2
 800f536:	b25b      	sxtb	r3, r3
 800f538:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800f53a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f53e:	480a      	ldr	r0, [pc, #40]	; (800f568 <getChannel+0x7c>)
 800f540:	f7fb ff10 	bl	800b364 <HAL_GPIO_ReadPin>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d101      	bne.n	800f54e <getChannel+0x62>
 800f54a:	2304      	movs	r3, #4
 800f54c:	e000      	b.n	800f550 <getChannel+0x64>
 800f54e:	2300      	movs	r3, #0
 800f550:	b25a      	sxtb	r2, r3
 800f552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f556:	4313      	orrs	r3, r2
 800f558:	b25b      	sxtb	r3, r3
 800f55a:	71fb      	strb	r3, [r7, #7]

	return ch;
 800f55c:	79fb      	ldrb	r3, [r7, #7]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	40020400 	.word	0x40020400

0800f56c <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f574:	2200      	movs	r2, #0
 800f576:	2140      	movs	r1, #64	; 0x40
 800f578:	4803      	ldr	r0, [pc, #12]	; (800f588 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800f57a:	f7fb ff0b 	bl	800b394 <HAL_GPIO_WritePin>

}
 800f57e:	bf00      	nop
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	40020400 	.word	0x40020400

0800f58c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f594:	2200      	movs	r2, #0
 800f596:	2140      	movs	r1, #64	; 0x40
 800f598:	4803      	ldr	r0, [pc, #12]	; (800f5a8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800f59a:	f7fb fefb 	bl	800b394 <HAL_GPIO_WritePin>

}
 800f59e:	bf00      	nop
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	40020400 	.word	0x40020400

0800f5ac <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	2140      	movs	r1, #64	; 0x40
 800f5b8:	4803      	ldr	r0, [pc, #12]	; (800f5c8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800f5ba:	f7fb feeb 	bl	800b394 <HAL_GPIO_WritePin>

}
 800f5be:	bf00      	nop
 800f5c0:	3708      	adds	r7, #8
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	40020400 	.word	0x40020400

0800f5cc <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800f5d4:	4b16      	ldr	r3, [pc, #88]	; (800f630 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f5d6:	4a17      	ldr	r2, [pc, #92]	; (800f634 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f5d8:	2100      	movs	r1, #0
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7fa fa5e 	bl	8009a9c <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800f5e0:	4b15      	ldr	r3, [pc, #84]	; (800f638 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800f5e6:	4b13      	ldr	r3, [pc, #76]	; (800f634 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	089b      	lsrs	r3, r3, #2
 800f5ec:	f003 0307 	and.w	r3, r3, #7
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d114      	bne.n	800f61e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800f5f4:	4b0f      	ldr	r3, [pc, #60]	; (800f634 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	2b04      	cmp	r3, #4
 800f5fa:	d110      	bne.n	800f61e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800f5fc:	4b0c      	ldr	r3, [pc, #48]	; (800f630 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800f602:	4b0b      	ldr	r3, [pc, #44]	; (800f630 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f604:	785b      	ldrb	r3, [r3, #1]
 800f606:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800f608:	4b09      	ldr	r3, [pc, #36]	; (800f630 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f60a:	789b      	ldrb	r3, [r3, #2]
 800f60c:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800f60e:	4b08      	ldr	r3, [pc, #32]	; (800f630 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f610:	78db      	ldrb	r3, [r3, #3]
 800f612:	73fb      	strb	r3, [r7, #15]

		mainASR.omega_ref = controlRef.fval;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	4a09      	ldr	r2, [pc, #36]	; (800f63c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800f618:	6253      	str	r3, [r2, #36]	; 0x24

		timeoutReset();
 800f61a:	f000 ff33 	bl	8010484 <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800f61e:	2201      	movs	r2, #1
 800f620:	2140      	movs	r1, #64	; 0x40
 800f622:	4807      	ldr	r0, [pc, #28]	; (800f640 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800f624:	f7fb feb6 	bl	800b394 <HAL_GPIO_WritePin>

}
 800f628:	bf00      	nop
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	200044b0 	.word	0x200044b0
 800f634:	20004494 	.word	0x20004494
 800f638:	200000c1 	.word	0x200000c1
 800f63c:	200041b8 	.word	0x200041b8
 800f640:	40020000 	.word	0x40020000

0800f644 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f64a:	2300      	movs	r3, #0
 800f64c:	607b      	str	r3, [r7, #4]
 800f64e:	4b14      	ldr	r3, [pc, #80]	; (800f6a0 <MX_DMA_Init+0x5c>)
 800f650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f652:	4a13      	ldr	r2, [pc, #76]	; (800f6a0 <MX_DMA_Init+0x5c>)
 800f654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f658:	6313      	str	r3, [r2, #48]	; 0x30
 800f65a:	4b11      	ldr	r3, [pc, #68]	; (800f6a0 <MX_DMA_Init+0x5c>)
 800f65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f65e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f662:	607b      	str	r3, [r7, #4]
 800f664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f666:	2200      	movs	r2, #0
 800f668:	2100      	movs	r1, #0
 800f66a:	2038      	movs	r0, #56	; 0x38
 800f66c:	f7fa fe35 	bl	800a2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f670:	2038      	movs	r0, #56	; 0x38
 800f672:	f7fa fe4e 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800f676:	2200      	movs	r2, #0
 800f678:	2100      	movs	r1, #0
 800f67a:	2039      	movs	r0, #57	; 0x39
 800f67c:	f7fa fe2d 	bl	800a2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800f680:	2039      	movs	r0, #57	; 0x39
 800f682:	f7fa fe46 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800f686:	2200      	movs	r2, #0
 800f688:	2100      	movs	r1, #0
 800f68a:	203a      	movs	r0, #58	; 0x3a
 800f68c:	f7fa fe25 	bl	800a2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f690:	203a      	movs	r0, #58	; 0x3a
 800f692:	f7fa fe3e 	bl	800a312 <HAL_NVIC_EnableIRQ>

}
 800f696:	bf00      	nop
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	40023800 	.word	0x40023800

0800f6a4 <Encoder_Init>:
Encoder_TypeDef mainEncoder;



void Encoder_Init()
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	af00      	add	r7, sp, #0

	mainEncoder.Init.hspi = &hspi2;
 800f6a8:	4b1e      	ldr	r3, [pc, #120]	; (800f724 <Encoder_Init+0x80>)
 800f6aa:	4a1f      	ldr	r2, [pc, #124]	; (800f728 <Encoder_Init+0x84>)
 800f6ac:	60da      	str	r2, [r3, #12]
	mainEncoder.Init.SPI_NSS_Port = SPI2_NSS_GPIO_Port;
 800f6ae:	4b1d      	ldr	r3, [pc, #116]	; (800f724 <Encoder_Init+0x80>)
 800f6b0:	4a1e      	ldr	r2, [pc, #120]	; (800f72c <Encoder_Init+0x88>)
 800f6b2:	611a      	str	r2, [r3, #16]
	mainEncoder.Init.SPI_NSS_Pin = SPI2_NSS_Pin;
 800f6b4:	4b1b      	ldr	r3, [pc, #108]	; (800f724 <Encoder_Init+0x80>)
 800f6b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f6ba:	829a      	strh	r2, [r3, #20]

	mainEncoder.Init.theta_offset = 0.0f;
 800f6bc:	4b19      	ldr	r3, [pc, #100]	; (800f724 <Encoder_Init+0x80>)
 800f6be:	f04f 0200 	mov.w	r2, #0
 800f6c2:	601a      	str	r2, [r3, #0]
	mainEncoder.Init.theta_re_offset = -3.0723f;
 800f6c4:	4b17      	ldr	r3, [pc, #92]	; (800f724 <Encoder_Init+0x80>)
 800f6c6:	4a1a      	ldr	r2, [pc, #104]	; (800f730 <Encoder_Init+0x8c>)
 800f6c8:	605a      	str	r2, [r3, #4]
	mainEncoder.Init.cycleTime = 100E-6;
 800f6ca:	4b16      	ldr	r3, [pc, #88]	; (800f724 <Encoder_Init+0x80>)
 800f6cc:	4a19      	ldr	r2, [pc, #100]	; (800f734 <Encoder_Init+0x90>)
 800f6ce:	609a      	str	r2, [r3, #8]
	mainEncoder.Init.SpeedPrescaler = 10;
 800f6d0:	4b14      	ldr	r3, [pc, #80]	; (800f724 <Encoder_Init+0x80>)
 800f6d2:	220a      	movs	r2, #10
 800f6d4:	619a      	str	r2, [r3, #24]

	mainEncoder.theta = 0.0f;
 800f6d6:	4b13      	ldr	r3, [pc, #76]	; (800f724 <Encoder_Init+0x80>)
 800f6d8:	f04f 0200 	mov.w	r2, #0
 800f6dc:	61da      	str	r2, [r3, #28]
	mainEncoder.theta_re = 0.0f;
 800f6de:	4b11      	ldr	r3, [pc, #68]	; (800f724 <Encoder_Init+0x80>)
 800f6e0:	f04f 0200 	mov.w	r2, #0
 800f6e4:	639a      	str	r2, [r3, #56]	; 0x38
	mainEncoder.forced_commute_enable = 0;
 800f6e6:	4b0f      	ldr	r3, [pc, #60]	; (800f724 <Encoder_Init+0x80>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	mainEncoder.cos_theta_re = 1.0f;
 800f6ee:	4b0d      	ldr	r3, [pc, #52]	; (800f724 <Encoder_Init+0x80>)
 800f6f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f6f4:	63da      	str	r2, [r3, #60]	; 0x3c
	mainEncoder.sin_theta_re = 0.0f;
 800f6f6:	4b0b      	ldr	r3, [pc, #44]	; (800f724 <Encoder_Init+0x80>)
 800f6f8:	f04f 0200 	mov.w	r2, #0
 800f6fc:	641a      	str	r2, [r3, #64]	; 0x40


	mainEncoder.firstLaunch = 1;
 800f6fe:	4b09      	ldr	r3, [pc, #36]	; (800f724 <Encoder_Init+0x80>)
 800f700:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f704:	631a      	str	r2, [r3, #48]	; 0x30

	// SPI Interrupt Setting
	__HAL_SPI_ENABLE_IT(mainEncoder.Init.hspi, SPI_IT_TXE | SPI_IT_RXNE);
 800f706:	4b07      	ldr	r3, [pc, #28]	; (800f724 <Encoder_Init+0x80>)
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	4b05      	ldr	r3, [pc, #20]	; (800f724 <Encoder_Init+0x80>)
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800f718:	605a      	str	r2, [r3, #4]


}
 800f71a:	bf00      	nop
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	200044e0 	.word	0x200044e0
 800f728:	20004534 	.word	0x20004534
 800f72c:	40020400 	.word	0x40020400
 800f730:	c044a090 	.word	0xc044a090
 800f734:	38d1b717 	.word	0x38d1b717

0800f738 <setZeroEncoder>:


#if 1

void setZeroEncoder(uint8_t exe)
{
 800f738:	b590      	push	{r4, r7, lr}
 800f73a:	b08b      	sub	sp, #44	; 0x2c
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 800f742:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f746:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 800f748:	2300      	movs	r3, #0
 800f74a:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 8.0f;
 800f74c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800f750:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 800f752:	f04f 0300 	mov.w	r3, #0
 800f756:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 800f758:	f04f 0300 	mov.w	r3, #0
 800f75c:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 800f75e:	f04f 0300 	mov.w	r3, #0
 800f762:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 800f764:	f000 fbb8 	bl	800fed8 <Flash_load>
 800f768:	4602      	mov	r2, r0
 800f76a:	4b93      	ldr	r3, [pc, #588]	; (800f9b8 <setZeroEncoder+0x280>)
 800f76c:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 800f76e:	79fb      	ldrb	r3, [r7, #7]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d126      	bne.n	800f7c2 <setZeroEncoder+0x8a>
	{

		memcpy(&mainEncoder.Init.theta_re_offset, flash_data, 4);
 800f774:	4b90      	ldr	r3, [pc, #576]	; (800f9b8 <setZeroEncoder+0x280>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	4b8f      	ldr	r3, [pc, #572]	; (800f9bc <setZeroEncoder+0x284>)
 800f77e:	605a      	str	r2, [r3, #4]

		printf("flash_data:%d\n", mainEncoder.Init.theta_re_offset * 100000);
 800f780:	4b8e      	ldr	r3, [pc, #568]	; (800f9bc <setZeroEncoder+0x284>)
 800f782:	edd3 7a01 	vldr	s15, [r3, #4]
 800f786:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800f9c0 <setZeroEncoder+0x288>
 800f78a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f78e:	ee17 0a90 	vmov	r0, s15
 800f792:	f7f8 fe09 	bl	80083a8 <__aeabi_f2d>
 800f796:	4603      	mov	r3, r0
 800f798:	460c      	mov	r4, r1
 800f79a:	461a      	mov	r2, r3
 800f79c:	4623      	mov	r3, r4
 800f79e:	4889      	ldr	r0, [pc, #548]	; (800f9c4 <setZeroEncoder+0x28c>)
 800f7a0:	f001 ff9e 	bl	80116e0 <iprintf>
		printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 800f7a4:	4b85      	ldr	r3, [pc, #532]	; (800f9bc <setZeroEncoder+0x284>)
 800f7a6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7aa:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800f9c0 <setZeroEncoder+0x288>
 800f7ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7b6:	ee17 1a90 	vmov	r1, s15
 800f7ba:	4883      	ldr	r0, [pc, #524]	; (800f9c8 <setZeroEncoder+0x290>)
 800f7bc:	f001 ff90 	bl	80116e0 <iprintf>
		return;
 800f7c0:	e0ea      	b.n	800f998 <setZeroEncoder+0x260>
	}


	mainACR.Id_ref = forced_I_gamma_ref;
 800f7c2:	4a82      	ldr	r2, [pc, #520]	; (800f9cc <setZeroEncoder+0x294>)
 800f7c4:	6a3b      	ldr	r3, [r7, #32]
 800f7c6:	62d3      	str	r3, [r2, #44]	; 0x2c
	mainACR.Iq_ref = forced_I_delta_ref;
 800f7c8:	4a80      	ldr	r2, [pc, #512]	; (800f9cc <setZeroEncoder+0x294>)
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	6313      	str	r3, [r2, #48]	; 0x30

	mainEncoder.Init.theta_re_offset = 0.0f;
 800f7ce:	4b7b      	ldr	r3, [pc, #492]	; (800f9bc <setZeroEncoder+0x284>)
 800f7d0:	f04f 0200 	mov.w	r2, #0
 800f7d4:	605a      	str	r2, [r3, #4]

	mainACR.forced_theta_re = 0.0f;
 800f7d6:	4b7d      	ldr	r3, [pc, #500]	; (800f9cc <setZeroEncoder+0x294>)
 800f7d8:	f04f 0200 	mov.w	r2, #0
 800f7dc:	661a      	str	r2, [r3, #96]	; 0x60

	mainACR.forced_commute_enable = 1;
 800f7de:	4b7b      	ldr	r3, [pc, #492]	; (800f9cc <setZeroEncoder+0x294>)
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	HAL_Delay(1000);
 800f7e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f7ea:	f7f9 fb11 	bl	8008e10 <HAL_Delay>


	mainEncoder.Init.theta_re_offset = 0.0f - mainEncoder.theta_re;
 800f7ee:	4b73      	ldr	r3, [pc, #460]	; (800f9bc <setZeroEncoder+0x284>)
 800f7f0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800f7f4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800f9d0 <setZeroEncoder+0x298>
 800f7f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7fc:	4b6f      	ldr	r3, [pc, #444]	; (800f9bc <setZeroEncoder+0x284>)
 800f7fe:	edc3 7a01 	vstr	s15, [r3, #4]

	mainACR.Id_ref = 0.0f;
 800f802:	4b72      	ldr	r3, [pc, #456]	; (800f9cc <setZeroEncoder+0x294>)
 800f804:	f04f 0200 	mov.w	r2, #0
 800f808:	62da      	str	r2, [r3, #44]	; 0x2c
	mainACR.Iq_ref = 0.0f;
 800f80a:	4b70      	ldr	r3, [pc, #448]	; (800f9cc <setZeroEncoder+0x294>)
 800f80c:	f04f 0200 	mov.w	r2, #0
 800f810:	631a      	str	r2, [r3, #48]	; 0x30


	while(mainEncoder.Init.theta_re_offset < -M_PI)	mainEncoder.Init.theta_re_offset += 2.0f * M_PI;
 800f812:	e012      	b.n	800f83a <setZeroEncoder+0x102>
 800f814:	4b69      	ldr	r3, [pc, #420]	; (800f9bc <setZeroEncoder+0x284>)
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	f7f8 fdc5 	bl	80083a8 <__aeabi_f2d>
 800f81e:	a360      	add	r3, pc, #384	; (adr r3, 800f9a0 <setZeroEncoder+0x268>)
 800f820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f824:	f7f8 fc62 	bl	80080ec <__adddf3>
 800f828:	4603      	mov	r3, r0
 800f82a:	460c      	mov	r4, r1
 800f82c:	4618      	mov	r0, r3
 800f82e:	4621      	mov	r1, r4
 800f830:	f7f9 f8ac 	bl	800898c <__aeabi_d2f>
 800f834:	4602      	mov	r2, r0
 800f836:	4b61      	ldr	r3, [pc, #388]	; (800f9bc <setZeroEncoder+0x284>)
 800f838:	605a      	str	r2, [r3, #4]
 800f83a:	4b60      	ldr	r3, [pc, #384]	; (800f9bc <setZeroEncoder+0x284>)
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	4618      	mov	r0, r3
 800f840:	f7f8 fdb2 	bl	80083a8 <__aeabi_f2d>
 800f844:	a358      	add	r3, pc, #352	; (adr r3, 800f9a8 <setZeroEncoder+0x270>)
 800f846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84a:	f7f9 f877 	bl	800893c <__aeabi_dcmplt>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1df      	bne.n	800f814 <setZeroEncoder+0xdc>
	while(mainEncoder.Init.theta_re_offset > M_PI)	mainEncoder.Init.theta_re_offset -= 2.0f * M_PI;
 800f854:	e012      	b.n	800f87c <setZeroEncoder+0x144>
 800f856:	4b59      	ldr	r3, [pc, #356]	; (800f9bc <setZeroEncoder+0x284>)
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7f8 fda4 	bl	80083a8 <__aeabi_f2d>
 800f860:	a34f      	add	r3, pc, #316	; (adr r3, 800f9a0 <setZeroEncoder+0x268>)
 800f862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f866:	f7f8 fc3f 	bl	80080e8 <__aeabi_dsub>
 800f86a:	4603      	mov	r3, r0
 800f86c:	460c      	mov	r4, r1
 800f86e:	4618      	mov	r0, r3
 800f870:	4621      	mov	r1, r4
 800f872:	f7f9 f88b 	bl	800898c <__aeabi_d2f>
 800f876:	4602      	mov	r2, r0
 800f878:	4b50      	ldr	r3, [pc, #320]	; (800f9bc <setZeroEncoder+0x284>)
 800f87a:	605a      	str	r2, [r3, #4]
 800f87c:	4b4f      	ldr	r3, [pc, #316]	; (800f9bc <setZeroEncoder+0x284>)
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	4618      	mov	r0, r3
 800f882:	f7f8 fd91 	bl	80083a8 <__aeabi_f2d>
 800f886:	a34a      	add	r3, pc, #296	; (adr r3, 800f9b0 <setZeroEncoder+0x278>)
 800f888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88c:	f7f9 f874 	bl	8008978 <__aeabi_dcmpgt>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d1df      	bne.n	800f856 <setZeroEncoder+0x11e>


	printf(" theta_re_offset = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 100000));
 800f896:	4b49      	ldr	r3, [pc, #292]	; (800f9bc <setZeroEncoder+0x284>)
 800f898:	edd3 7a01 	vldr	s15, [r3, #4]
 800f89c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f9c0 <setZeroEncoder+0x288>
 800f8a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8a8:	ee17 1a90 	vmov	r1, s15
 800f8ac:	4849      	ldr	r0, [pc, #292]	; (800f9d4 <setZeroEncoder+0x29c>)
 800f8ae:	f001 ff17 	bl	80116e0 <iprintf>
	HAL_Delay(1);
 800f8b2:	2001      	movs	r0, #1
 800f8b4:	f7f9 faac 	bl	8008e10 <HAL_Delay>
	printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 800f8b8:	4b40      	ldr	r3, [pc, #256]	; (800f9bc <setZeroEncoder+0x284>)
 800f8ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8be:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f9c0 <setZeroEncoder+0x288>
 800f8c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8ca:	ee17 1a90 	vmov	r1, s15
 800f8ce:	483e      	ldr	r0, [pc, #248]	; (800f9c8 <setZeroEncoder+0x290>)
 800f8d0:	f001 ff06 	bl	80116e0 <iprintf>
	HAL_Delay(1);
 800f8d4:	2001      	movs	r0, #1
 800f8d6:	f7f9 fa9b 	bl	8008e10 <HAL_Delay>
	printf(" theta_re_offset(4) = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 10000));
 800f8da:	4b38      	ldr	r3, [pc, #224]	; (800f9bc <setZeroEncoder+0x284>)
 800f8dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8e0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800f9d8 <setZeroEncoder+0x2a0>
 800f8e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8ec:	ee17 1a90 	vmov	r1, s15
 800f8f0:	483a      	ldr	r0, [pc, #232]	; (800f9dc <setZeroEncoder+0x2a4>)
 800f8f2:	f001 fef5 	bl	80116e0 <iprintf>
	HAL_Delay(1);
 800f8f6:	2001      	movs	r0, #1
 800f8f8:	f7f9 fa8a 	bl	8008e10 <HAL_Delay>
	printf(" theta_re_offset(4) = %d\n", (int)(mainEncoder.Init.theta_re_offset * 10000));
 800f8fc:	4b2f      	ldr	r3, [pc, #188]	; (800f9bc <setZeroEncoder+0x284>)
 800f8fe:	edd3 7a01 	vldr	s15, [r3, #4]
 800f902:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800f9d8 <setZeroEncoder+0x2a0>
 800f906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f90a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f90e:	ee17 1a90 	vmov	r1, s15
 800f912:	4833      	ldr	r0, [pc, #204]	; (800f9e0 <setZeroEncoder+0x2a8>)
 800f914:	f001 fee4 	bl	80116e0 <iprintf>
	HAL_Delay(1);
 800f918:	2001      	movs	r0, #1
 800f91a:	f7f9 fa79 	bl	8008e10 <HAL_Delay>

	printf("(theta_re_offset < 1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset < 1.0f));
 800f91e:	4b27      	ldr	r3, [pc, #156]	; (800f9bc <setZeroEncoder+0x284>)
 800f920:	edd3 7a01 	vldr	s15, [r3, #4]
 800f924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f930:	bf4c      	ite	mi
 800f932:	2301      	movmi	r3, #1
 800f934:	2300      	movpl	r3, #0
 800f936:	b2db      	uxtb	r3, r3
 800f938:	4619      	mov	r1, r3
 800f93a:	482a      	ldr	r0, [pc, #168]	; (800f9e4 <setZeroEncoder+0x2ac>)
 800f93c:	f001 fed0 	bl	80116e0 <iprintf>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset > -1.0f));
 800f940:	4b1e      	ldr	r3, [pc, #120]	; (800f9bc <setZeroEncoder+0x284>)
 800f942:	edd3 7a01 	vldr	s15, [r3, #4]
 800f946:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f94a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f952:	bfcc      	ite	gt
 800f954:	2301      	movgt	r3, #1
 800f956:	2300      	movle	r3, #0
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	4619      	mov	r1, r3
 800f95c:	4822      	ldr	r0, [pc, #136]	; (800f9e8 <setZeroEncoder+0x2b0>)
 800f95e:	f001 febf 	bl	80116e0 <iprintf>


	memcpy(flash_data, &mainEncoder.Init.theta_re_offset, 4);
 800f962:	4b15      	ldr	r3, [pc, #84]	; (800f9b8 <setZeroEncoder+0x280>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a15      	ldr	r2, [pc, #84]	; (800f9bc <setZeroEncoder+0x284>)
 800f968:	6852      	ldr	r2, [r2, #4]
 800f96a:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 800f96c:	f000 fac6 	bl	800fefc <Flash_store>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d102      	bne.n	800f97c <setZeroEncoder+0x244>
	{
		printf("Failed to write flash\n");
 800f976:	481d      	ldr	r0, [pc, #116]	; (800f9ec <setZeroEncoder+0x2b4>)
 800f978:	f001 ff26 	bl	80117c8 <puts>
	}

	printf("flash_data:%lu\n", *flash_data);
 800f97c:	4b0e      	ldr	r3, [pc, #56]	; (800f9b8 <setZeroEncoder+0x280>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	4619      	mov	r1, r3
 800f984:	481a      	ldr	r0, [pc, #104]	; (800f9f0 <setZeroEncoder+0x2b8>)
 800f986:	f001 feab 	bl	80116e0 <iprintf>


	mainACR.forced_commute_enable = 0;
 800f98a:	4b10      	ldr	r3, [pc, #64]	; (800f9cc <setZeroEncoder+0x294>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	ACR_Reset(&mainACR);
 800f992:	480e      	ldr	r0, [pc, #56]	; (800f9cc <setZeroEncoder+0x294>)
 800f994:	f7fe fe80 	bl	800e698 <ACR_Reset>


#endif


}
 800f998:	372c      	adds	r7, #44	; 0x2c
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd90      	pop	{r4, r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	54442d18 	.word	0x54442d18
 800f9a4:	401921fb 	.word	0x401921fb
 800f9a8:	54442d18 	.word	0x54442d18
 800f9ac:	c00921fb 	.word	0xc00921fb
 800f9b0:	54442d18 	.word	0x54442d18
 800f9b4:	400921fb 	.word	0x400921fb
 800f9b8:	20004530 	.word	0x20004530
 800f9bc:	200044e0 	.word	0x200044e0
 800f9c0:	47c35000 	.word	0x47c35000
 800f9c4:	08012754 	.word	0x08012754
 800f9c8:	08012764 	.word	0x08012764
 800f9cc:	2000414c 	.word	0x2000414c
 800f9d0:	00000000 	.word	0x00000000
 800f9d4:	0801277c 	.word	0x0801277c
 800f9d8:	461c4000 	.word	0x461c4000
 800f9dc:	08012798 	.word	0x08012798
 800f9e0:	080127b8 	.word	0x080127b8
 800f9e4:	080127d4 	.word	0x080127d4
 800f9e8:	080127f4 	.word	0x080127f4
 800f9ec:	08012814 	.word	0x08012814
 800f9f0:	0801282c 	.word	0x0801282c

0800f9f4 <Encoder_Request>:

#endif


inline void Encoder_Request(Encoder_TypeDef *hEncoder)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]


	// Reading Encoder for next sampling
	hEncoder->spi2txBuf[0] = 0xff;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	22ff      	movs	r2, #255	; 0xff
 800fa00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	hEncoder->spi2txBuf[1] = 0xff;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	22ff      	movs	r2, #255	; 0xff
 800fa08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_RESET);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6918      	ldr	r0, [r3, #16]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8a9b      	ldrh	r3, [r3, #20]
 800fa14:	2200      	movs	r2, #0
 800fa16:	4619      	mov	r1, r3
 800fa18:	f7fb fcbc 	bl	800b394 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_IT(hEncoder->Init.hspi, hEncoder->spi2txBuf, hEncoder->spi2rxBuf, 1);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	68d8      	ldr	r0, [r3, #12]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f103 0145 	add.w	r1, r3, #69	; 0x45
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f103 0247 	add.w	r2, r3, #71	; 0x47
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	f7fc fa3f 	bl	800beb0 <HAL_SPI_TransmitReceive_IT>


}
 800fa32:	bf00      	nop
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	0000      	movs	r0, r0
 800fa3c:	0000      	movs	r0, r0
	...

0800fa40 <Encoder_Refresh>:


inline int Encoder_Refresh(Encoder_TypeDef *hEncoder)
{
 800fa40:	b5b0      	push	{r4, r5, r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
	static float _theta;
	static float _theta_re;
	static float d_theta;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_SET);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6918      	ldr	r0, [r3, #16]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	8a9b      	ldrh	r3, [r3, #20]
 800fa50:	2201      	movs	r2, #1
 800fa52:	4619      	mov	r1, r3
 800fa54:	f7fb fc9e 	bl	800b394 <HAL_GPIO_WritePin>

	angle_raw = (hEncoder->spi2rxBuf[1] & 0x3f) << 8 | hEncoder->spi2rxBuf[0];
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	021b      	lsls	r3, r3, #8
 800fa62:	b21b      	sxth	r3, r3
 800fa64:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800fa68:	b21a      	sxth	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	b21b      	sxth	r3, r3
 800fa74:	4313      	orrs	r3, r2
 800fa76:	b21b      	sxth	r3, r3
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	4b61      	ldr	r3, [pc, #388]	; (800fc00 <Encoder_Refresh+0x1c0>)
 800fa7c:	801a      	strh	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + hEncoder->Init.theta_offset;
 800fa7e:	4b60      	ldr	r3, [pc, #384]	; (800fc00 <Encoder_Refresh+0x1c0>)
 800fa80:	881b      	ldrh	r3, [r3, #0]
 800fa82:	ee07 3a90 	vmov	s15, r3
 800fa86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fa8a:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fc04 <Encoder_Refresh+0x1c4>
 800fa8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fa92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fa96:	ee17 0a90 	vmov	r0, s15
 800fa9a:	f7f8 fc85 	bl	80083a8 <__aeabi_f2d>
 800fa9e:	a352      	add	r3, pc, #328	; (adr r3, 800fbe8 <Encoder_Refresh+0x1a8>)
 800faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa4:	f7f8 fcd8 	bl	8008458 <__aeabi_dmul>
 800faa8:	4603      	mov	r3, r0
 800faaa:	460c      	mov	r4, r1
 800faac:	4625      	mov	r5, r4
 800faae:	461c      	mov	r4, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f8 fc77 	bl	80083a8 <__aeabi_f2d>
 800faba:	4602      	mov	r2, r0
 800fabc:	460b      	mov	r3, r1
 800fabe:	4620      	mov	r0, r4
 800fac0:	4629      	mov	r1, r5
 800fac2:	f7f8 fb13 	bl	80080ec <__adddf3>
 800fac6:	4603      	mov	r3, r0
 800fac8:	460c      	mov	r4, r1
 800faca:	4618      	mov	r0, r3
 800facc:	4621      	mov	r1, r4
 800face:	f7f8 ff5d 	bl	800898c <__aeabi_d2f>
 800fad2:	4602      	mov	r2, r0
 800fad4:	4b4c      	ldr	r3, [pc, #304]	; (800fc08 <Encoder_Refresh+0x1c8>)
 800fad6:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			hEncoder->theta = _theta + 2 * M_PI;
 800fad8:	4b4b      	ldr	r3, [pc, #300]	; (800fc08 <Encoder_Refresh+0x1c8>)
 800fada:	edd3 7a00 	vldr	s15, [r3]
 800fade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae6:	d513      	bpl.n	800fb10 <Encoder_Refresh+0xd0>
 800fae8:	4b47      	ldr	r3, [pc, #284]	; (800fc08 <Encoder_Refresh+0x1c8>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4618      	mov	r0, r3
 800faee:	f7f8 fc5b 	bl	80083a8 <__aeabi_f2d>
 800faf2:	a33f      	add	r3, pc, #252	; (adr r3, 800fbf0 <Encoder_Refresh+0x1b0>)
 800faf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf8:	f7f8 faf8 	bl	80080ec <__adddf3>
 800fafc:	4603      	mov	r3, r0
 800fafe:	460c      	mov	r4, r1
 800fb00:	4618      	mov	r0, r3
 800fb02:	4621      	mov	r1, r4
 800fb04:	f7f8 ff42 	bl	800898c <__aeabi_d2f>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	61da      	str	r2, [r3, #28]
 800fb0e:	e024      	b.n	800fb5a <Encoder_Refresh+0x11a>
	else if(_theta >= 2 * M_PI)	hEncoder->theta = _theta - 2 * M_PI;
 800fb10:	4b3d      	ldr	r3, [pc, #244]	; (800fc08 <Encoder_Refresh+0x1c8>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7f8 fc47 	bl	80083a8 <__aeabi_f2d>
 800fb1a:	a335      	add	r3, pc, #212	; (adr r3, 800fbf0 <Encoder_Refresh+0x1b0>)
 800fb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb20:	f7f8 ff20 	bl	8008964 <__aeabi_dcmpge>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d013      	beq.n	800fb52 <Encoder_Refresh+0x112>
 800fb2a:	4b37      	ldr	r3, [pc, #220]	; (800fc08 <Encoder_Refresh+0x1c8>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7f8 fc3a 	bl	80083a8 <__aeabi_f2d>
 800fb34:	a32e      	add	r3, pc, #184	; (adr r3, 800fbf0 <Encoder_Refresh+0x1b0>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	f7f8 fad5 	bl	80080e8 <__aeabi_dsub>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	460c      	mov	r4, r1
 800fb42:	4618      	mov	r0, r3
 800fb44:	4621      	mov	r1, r4
 800fb46:	f7f8 ff21 	bl	800898c <__aeabi_d2f>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	61da      	str	r2, [r3, #28]
 800fb50:	e003      	b.n	800fb5a <Encoder_Refresh+0x11a>
	else						hEncoder->theta = _theta;
 800fb52:	4b2d      	ldr	r3, [pc, #180]	; (800fc08 <Encoder_Refresh+0x1c8>)
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	61da      	str	r2, [r3, #28]

	if(hEncoder->firstLaunch != 0)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800fb60:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb68:	d008      	beq.n	800fb7c <Encoder_Refresh+0x13c>
	{
		d_theta = 0.0f;
 800fb6a:	4b28      	ldr	r3, [pc, #160]	; (800fc0c <Encoder_Refresh+0x1cc>)
 800fb6c:	f04f 0200 	mov.w	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]
		hEncoder->firstLaunch = 0;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f04f 0200 	mov.w	r2, #0
 800fb78:	631a      	str	r2, [r3, #48]	; 0x30
 800fb7a:	e00a      	b.n	800fb92 <Encoder_Refresh+0x152>
	}
	else
	{
		d_theta = hEncoder->theta - hEncoder->p_theta;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	ed93 7a07 	vldr	s14, [r3, #28]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fb88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb8c:	4b1f      	ldr	r3, [pc, #124]	; (800fc0c <Encoder_Refresh+0x1cc>)
 800fb8e:	edc3 7a00 	vstr	s15, [r3]
	}
	hEncoder->p_theta = hEncoder->theta;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	69da      	ldr	r2, [r3, #28]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	629a      	str	r2, [r3, #40]	; 0x28

	// Unwrapping Process
	if(d_theta < - M_PI)
 800fb9a:	4b1c      	ldr	r3, [pc, #112]	; (800fc0c <Encoder_Refresh+0x1cc>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7f8 fc02 	bl	80083a8 <__aeabi_f2d>
 800fba4:	a314      	add	r3, pc, #80	; (adr r3, 800fbf8 <Encoder_Refresh+0x1b8>)
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	f7f8 fec7 	bl	800893c <__aeabi_dcmplt>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d02d      	beq.n	800fc10 <Encoder_Refresh+0x1d0>
	{
		d_theta += 2 * M_PI;
 800fbb4:	4b15      	ldr	r3, [pc, #84]	; (800fc0c <Encoder_Refresh+0x1cc>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7f8 fbf5 	bl	80083a8 <__aeabi_f2d>
 800fbbe:	a30c      	add	r3, pc, #48	; (adr r3, 800fbf0 <Encoder_Refresh+0x1b0>)
 800fbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc4:	f7f8 fa92 	bl	80080ec <__adddf3>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	460c      	mov	r4, r1
 800fbcc:	4618      	mov	r0, r3
 800fbce:	4621      	mov	r1, r4
 800fbd0:	f7f8 fedc 	bl	800898c <__aeabi_d2f>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	4b0d      	ldr	r3, [pc, #52]	; (800fc0c <Encoder_Refresh+0x1cc>)
 800fbd8:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += 1;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	621a      	str	r2, [r3, #32]
 800fbe4:	e039      	b.n	800fc5a <Encoder_Refresh+0x21a>
 800fbe6:	bf00      	nop
 800fbe8:	54442d18 	.word	0x54442d18
 800fbec:	400921fb 	.word	0x400921fb
 800fbf0:	54442d18 	.word	0x54442d18
 800fbf4:	401921fb 	.word	0x401921fb
 800fbf8:	54442d18 	.word	0x54442d18
 800fbfc:	c00921fb 	.word	0xc00921fb
 800fc00:	200000c2 	.word	0x200000c2
 800fc04:	46800000 	.word	0x46800000
 800fc08:	200000c4 	.word	0x200000c4
 800fc0c:	200000c8 	.word	0x200000c8
	}
	else if(d_theta > M_PI)
 800fc10:	4b93      	ldr	r3, [pc, #588]	; (800fe60 <Encoder_Refresh+0x420>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7f8 fbc7 	bl	80083a8 <__aeabi_f2d>
 800fc1a:	a389      	add	r3, pc, #548	; (adr r3, 800fe40 <Encoder_Refresh+0x400>)
 800fc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc20:	f7f8 feaa 	bl	8008978 <__aeabi_dcmpgt>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d017      	beq.n	800fc5a <Encoder_Refresh+0x21a>
	{
		d_theta -= 2 * M_PI;
 800fc2a:	4b8d      	ldr	r3, [pc, #564]	; (800fe60 <Encoder_Refresh+0x420>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f8 fbba 	bl	80083a8 <__aeabi_f2d>
 800fc34:	a384      	add	r3, pc, #528	; (adr r3, 800fe48 <Encoder_Refresh+0x408>)
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	f7f8 fa55 	bl	80080e8 <__aeabi_dsub>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	460c      	mov	r4, r1
 800fc42:	4618      	mov	r0, r3
 800fc44:	4621      	mov	r1, r4
 800fc46:	f7f8 fea1 	bl	800898c <__aeabi_d2f>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	4b84      	ldr	r3, [pc, #528]	; (800fe60 <Encoder_Refresh+0x420>)
 800fc4e:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += -1;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6a1b      	ldr	r3, [r3, #32]
 800fc54:	1e5a      	subs	r2, r3, #1
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	621a      	str	r2, [r3, #32]
	}

	hEncoder->omega = hEncoder->omega * SPEED_LPF_COEFF + d_theta / hEncoder->Init.cycleTime * (1.0f - SPEED_LPF_COEFF);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7f8 fba2 	bl	80083a8 <__aeabi_f2d>
 800fc64:	a37a      	add	r3, pc, #488	; (adr r3, 800fe50 <Encoder_Refresh+0x410>)
 800fc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6a:	f7f8 fbf5 	bl	8008458 <__aeabi_dmul>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	460c      	mov	r4, r1
 800fc72:	4625      	mov	r5, r4
 800fc74:	461c      	mov	r4, r3
 800fc76:	4b7a      	ldr	r3, [pc, #488]	; (800fe60 <Encoder_Refresh+0x420>)
 800fc78:	ed93 7a00 	vldr	s14, [r3]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	edd3 7a02 	vldr	s15, [r3, #8]
 800fc82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fc86:	ee16 0a90 	vmov	r0, s13
 800fc8a:	f7f8 fb8d 	bl	80083a8 <__aeabi_f2d>
 800fc8e:	a372      	add	r3, pc, #456	; (adr r3, 800fe58 <Encoder_Refresh+0x418>)
 800fc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc94:	f7f8 fbe0 	bl	8008458 <__aeabi_dmul>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f8 fa24 	bl	80080ec <__adddf3>
 800fca4:	4603      	mov	r3, r0
 800fca6:	460c      	mov	r4, r1
 800fca8:	4618      	mov	r0, r3
 800fcaa:	4621      	mov	r1, r4
 800fcac:	f7f8 fe6e 	bl	800898c <__aeabi_d2f>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	62da      	str	r2, [r3, #44]	; 0x2c

	hEncoder->theta_multiturn = hEncoder->theta + 2.0f * M_PI * hEncoder->turnCount;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	69db      	ldr	r3, [r3, #28]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7f8 fb74 	bl	80083a8 <__aeabi_f2d>
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6a1b      	ldr	r3, [r3, #32]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7f8 fb5b 	bl	8008384 <__aeabi_i2d>
 800fcce:	a35e      	add	r3, pc, #376	; (adr r3, 800fe48 <Encoder_Refresh+0x408>)
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	f7f8 fbc0 	bl	8008458 <__aeabi_dmul>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4620      	mov	r0, r4
 800fcde:	4629      	mov	r1, r5
 800fce0:	f7f8 fa04 	bl	80080ec <__adddf3>
 800fce4:	4603      	mov	r3, r0
 800fce6:	460c      	mov	r4, r1
 800fce8:	4618      	mov	r0, r3
 800fcea:	4621      	mov	r1, r4
 800fcec:	f7f8 fe4e 	bl	800898c <__aeabi_d2f>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	625a      	str	r2, [r3, #36]	; 0x24

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLE_PAIRS, 2.0f * M_PI) + hEncoder->Init.theta_re_offset;
 800fcf6:	4b5b      	ldr	r3, [pc, #364]	; (800fe64 <Encoder_Refresh+0x424>)
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	ee07 3a90 	vmov	s15, r3
 800fcfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fd02:	eddf 6a59 	vldr	s13, [pc, #356]	; 800fe68 <Encoder_Refresh+0x428>
 800fd06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fd0e:	ee17 0a90 	vmov	r0, s15
 800fd12:	f7f8 fb49 	bl	80083a8 <__aeabi_f2d>
 800fd16:	a34a      	add	r3, pc, #296	; (adr r3, 800fe40 <Encoder_Refresh+0x400>)
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	f7f8 fb9c 	bl	8008458 <__aeabi_dmul>
 800fd20:	4603      	mov	r3, r0
 800fd22:	460c      	mov	r4, r1
 800fd24:	4618      	mov	r0, r3
 800fd26:	4621      	mov	r1, r4
 800fd28:	f04f 0200 	mov.w	r2, #0
 800fd2c:	4b4f      	ldr	r3, [pc, #316]	; (800fe6c <Encoder_Refresh+0x42c>)
 800fd2e:	f7f8 fb93 	bl	8008458 <__aeabi_dmul>
 800fd32:	4603      	mov	r3, r0
 800fd34:	460c      	mov	r4, r1
 800fd36:	4618      	mov	r0, r3
 800fd38:	4621      	mov	r1, r4
 800fd3a:	f7f8 fe27 	bl	800898c <__aeabi_d2f>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	eddf 0a4b 	vldr	s1, [pc, #300]	; 800fe70 <Encoder_Refresh+0x430>
 800fd44:	ee00 3a10 	vmov	s0, r3
 800fd48:	f002 fc12 	bl	8012570 <fmodf>
 800fd4c:	eeb0 7a40 	vmov.f32	s14, s0
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	edd3 7a01 	vldr	s15, [r3, #4]
 800fd56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd5a:	4b46      	ldr	r3, [pc, #280]	; (800fe74 <Encoder_Refresh+0x434>)
 800fd5c:	edc3 7a00 	vstr	s15, [r3]

	if(_theta_re < 0.0f)			hEncoder->theta_re = _theta_re + 2 * M_PI;
 800fd60:	4b44      	ldr	r3, [pc, #272]	; (800fe74 <Encoder_Refresh+0x434>)
 800fd62:	edd3 7a00 	vldr	s15, [r3]
 800fd66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6e:	d513      	bpl.n	800fd98 <Encoder_Refresh+0x358>
 800fd70:	4b40      	ldr	r3, [pc, #256]	; (800fe74 <Encoder_Refresh+0x434>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f8 fb17 	bl	80083a8 <__aeabi_f2d>
 800fd7a:	a333      	add	r3, pc, #204	; (adr r3, 800fe48 <Encoder_Refresh+0x408>)
 800fd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd80:	f7f8 f9b4 	bl	80080ec <__adddf3>
 800fd84:	4603      	mov	r3, r0
 800fd86:	460c      	mov	r4, r1
 800fd88:	4618      	mov	r0, r3
 800fd8a:	4621      	mov	r1, r4
 800fd8c:	f7f8 fdfe 	bl	800898c <__aeabi_d2f>
 800fd90:	4602      	mov	r2, r0
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	639a      	str	r2, [r3, #56]	; 0x38
 800fd96:	e024      	b.n	800fde2 <Encoder_Refresh+0x3a2>
	else if(_theta_re >= 2 * M_PI)	hEncoder->theta_re = _theta_re - 2 * M_PI;
 800fd98:	4b36      	ldr	r3, [pc, #216]	; (800fe74 <Encoder_Refresh+0x434>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7f8 fb03 	bl	80083a8 <__aeabi_f2d>
 800fda2:	a329      	add	r3, pc, #164	; (adr r3, 800fe48 <Encoder_Refresh+0x408>)
 800fda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda8:	f7f8 fddc 	bl	8008964 <__aeabi_dcmpge>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d013      	beq.n	800fdda <Encoder_Refresh+0x39a>
 800fdb2:	4b30      	ldr	r3, [pc, #192]	; (800fe74 <Encoder_Refresh+0x434>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7f8 faf6 	bl	80083a8 <__aeabi_f2d>
 800fdbc:	a322      	add	r3, pc, #136	; (adr r3, 800fe48 <Encoder_Refresh+0x408>)
 800fdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc2:	f7f8 f991 	bl	80080e8 <__aeabi_dsub>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	460c      	mov	r4, r1
 800fdca:	4618      	mov	r0, r3
 800fdcc:	4621      	mov	r1, r4
 800fdce:	f7f8 fddd 	bl	800898c <__aeabi_d2f>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	639a      	str	r2, [r3, #56]	; 0x38
 800fdd8:	e003      	b.n	800fde2 <Encoder_Refresh+0x3a2>
	else							hEncoder->theta_re = _theta_re;
 800fdda:	4b26      	ldr	r3, [pc, #152]	; (800fe74 <Encoder_Refresh+0x434>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	639a      	str	r2, [r3, #56]	; 0x38

	hEncoder->cos_theta_re = sin_table2[(int)((hEncoder->theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800fde8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800fe78 <Encoder_Refresh+0x438>
 800fdec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fdf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fdf8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800fe7c <Encoder_Refresh+0x43c>
 800fdfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe04:	ee17 3a90 	vmov	r3, s15
 800fe08:	4a1d      	ldr	r2, [pc, #116]	; (800fe80 <Encoder_Refresh+0x440>)
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	4413      	add	r3, r2
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	63da      	str	r2, [r3, #60]	; 0x3c
	hEncoder->sin_theta_re = sin_table2[(int)(hEncoder->theta_re * 1591.54943f)];
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800fe1a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fe84 <Encoder_Refresh+0x444>
 800fe1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe26:	ee17 3a90 	vmov	r3, s15
 800fe2a:	4a15      	ldr	r2, [pc, #84]	; (800fe80 <Encoder_Refresh+0x440>)
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	641a      	str	r2, [r3, #64]	; 0x40


	return 0;
 800fe36:	2300      	movs	r3, #0

}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bdb0      	pop	{r4, r5, r7, pc}
 800fe40:	54442d18 	.word	0x54442d18
 800fe44:	400921fb 	.word	0x400921fb
 800fe48:	54442d18 	.word	0x54442d18
 800fe4c:	401921fb 	.word	0x401921fb
 800fe50:	d4eb9e24 	.word	0xd4eb9e24
 800fe54:	3fee1bb5 	.word	0x3fee1bb5
 800fe58:	b1461dc0 	.word	0xb1461dc0
 800fe5c:	3fae44a2 	.word	0x3fae44a2
 800fe60:	200000c8 	.word	0x200000c8
 800fe64:	200000c2 	.word	0x200000c2
 800fe68:	46800000 	.word	0x46800000
 800fe6c:	40280000 	.word	0x40280000
 800fe70:	40c90fdb 	.word	0x40c90fdb
 800fe74:	200000cc 	.word	0x200000cc
 800fe78:	3ea2f838 	.word	0x3ea2f838
 800fe7c:	459c4000 	.word	0x459c4000
 800fe80:	08012884 	.word	0x08012884
 800fe84:	44c6f195 	.word	0x44c6f195

0800fe88 <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b088      	sub	sp, #32
 800fe8c:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800fe8e:	f7fa fe47 	bl	800ab20 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800fe92:	2300      	movs	r3, #0
 800fe94:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800fe96:	2301      	movs	r3, #1
 800fe98:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800fea2:	1d3a      	adds	r2, r7, #4
 800fea4:	f107 0308 	add.w	r3, r7, #8
 800fea8:	4611      	mov	r1, r2
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fa ffa6 	bl	800adfc <HAL_FLASHEx_Erase>
 800feb0:	4603      	mov	r3, r0
 800feb2:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800feb4:	f7fa fe56 	bl	800ab64 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800feb8:	7ffb      	ldrb	r3, [r7, #31]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d105      	bne.n	800feca <Flash_clear+0x42>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec4:	d101      	bne.n	800feca <Flash_clear+0x42>
 800fec6:	2301      	movs	r3, #1
 800fec8:	e000      	b.n	800fecc <Flash_clear+0x44>
 800feca:	2300      	movs	r3, #0
 800fecc:	b2db      	uxtb	r3, r3
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3720      	adds	r7, #32
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 800fedc:	4a05      	ldr	r2, [pc, #20]	; (800fef4 <Flash_load+0x1c>)
 800fede:	4b06      	ldr	r3, [pc, #24]	; (800fef8 <Flash_load+0x20>)
 800fee0:	4610      	mov	r0, r2
 800fee2:	4619      	mov	r1, r3
 800fee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fee8:	461a      	mov	r2, r3
 800feea:	f001 fbe5 	bl	80116b8 <memcpy>
    return work_ram;
 800feee:	4b01      	ldr	r3, [pc, #4]	; (800fef4 <Flash_load+0x1c>)
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	200000d0 	.word	0x200000d0
 800fef8:	08004000 	.word	0x08004000

0800fefc <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 800fefc:	b590      	push	{r4, r7, lr}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 800ff02:	f7ff ffc1 	bl	800fe88 <Flash_clear>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <Flash_store+0x14>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	e02f      	b.n	800ff70 <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800ff10:	4b19      	ldr	r3, [pc, #100]	; (800ff78 <Flash_store+0x7c>)
 800ff12:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800ff14:	f7fa fe04 	bl	800ab20 <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 800ff18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff1c:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 800ff1e:	2300      	movs	r3, #0
 800ff20:	60bb      	str	r3, [r7, #8]
 800ff22:	e017      	b.n	800ff54 <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	4a14      	ldr	r2, [pc, #80]	; (800ff7c <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 800ff2a:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	4413      	add	r3, r2
 800ff34:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800ff36:	f04f 0400 	mov.w	r4, #0
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	4623      	mov	r3, r4
 800ff3e:	2002      	movs	r0, #2
 800ff40:	f7fa fd9a 	bl	800aa78 <HAL_FLASH_Program>
 800ff44:	4603      	mov	r3, r0
 800ff46:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800ff48:	7bfb      	ldrb	r3, [r7, #15]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d107      	bne.n	800ff5e <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	3301      	adds	r3, #1
 800ff52:	60bb      	str	r3, [r7, #8]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d3e3      	bcc.n	800ff24 <Flash_store+0x28>
 800ff5c:	e000      	b.n	800ff60 <Flash_store+0x64>
        if (result != HAL_OK) break;
 800ff5e:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800ff60:	f7fa fe00 	bl	800ab64 <HAL_FLASH_Lock>

    return result == HAL_OK;
 800ff64:	7bfb      	ldrb	r3, [r7, #15]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	bf0c      	ite	eq
 800ff6a:	2301      	moveq	r3, #1
 800ff6c:	2300      	movne	r3, #0
 800ff6e:	b2db      	uxtb	r3, r3
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3714      	adds	r7, #20
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd90      	pop	{r4, r7, pc}
 800ff78:	200000d0 	.word	0x200000d0
 800ff7c:	08004000 	.word	0x08004000

0800ff80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b08a      	sub	sp, #40	; 0x28
 800ff84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff86:	f107 0314 	add.w	r3, r7, #20
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	601a      	str	r2, [r3, #0]
 800ff8e:	605a      	str	r2, [r3, #4]
 800ff90:	609a      	str	r2, [r3, #8]
 800ff92:	60da      	str	r2, [r3, #12]
 800ff94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ff96:	2300      	movs	r3, #0
 800ff98:	613b      	str	r3, [r7, #16]
 800ff9a:	4b45      	ldr	r3, [pc, #276]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ff9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff9e:	4a44      	ldr	r2, [pc, #272]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffa0:	f043 0304 	orr.w	r3, r3, #4
 800ffa4:	6313      	str	r3, [r2, #48]	; 0x30
 800ffa6:	4b42      	ldr	r3, [pc, #264]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffaa:	f003 0304 	and.w	r3, r3, #4
 800ffae:	613b      	str	r3, [r7, #16]
 800ffb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	60fb      	str	r3, [r7, #12]
 800ffb6:	4b3e      	ldr	r3, [pc, #248]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffba:	4a3d      	ldr	r2, [pc, #244]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffc0:	6313      	str	r3, [r2, #48]	; 0x30
 800ffc2:	4b3b      	ldr	r3, [pc, #236]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60bb      	str	r3, [r7, #8]
 800ffd2:	4b37      	ldr	r3, [pc, #220]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd6:	4a36      	ldr	r2, [pc, #216]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffd8:	f043 0301 	orr.w	r3, r3, #1
 800ffdc:	6313      	str	r3, [r2, #48]	; 0x30
 800ffde:	4b34      	ldr	r3, [pc, #208]	; (80100b0 <MX_GPIO_Init+0x130>)
 800ffe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	60bb      	str	r3, [r7, #8]
 800ffe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ffea:	2300      	movs	r3, #0
 800ffec:	607b      	str	r3, [r7, #4]
 800ffee:	4b30      	ldr	r3, [pc, #192]	; (80100b0 <MX_GPIO_Init+0x130>)
 800fff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fff2:	4a2f      	ldr	r2, [pc, #188]	; (80100b0 <MX_GPIO_Init+0x130>)
 800fff4:	f043 0302 	orr.w	r3, r3, #2
 800fff8:	6313      	str	r3, [r2, #48]	; 0x30
 800fffa:	4b2d      	ldr	r3, [pc, #180]	; (80100b0 <MX_GPIO_Init+0x130>)
 800fffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fffe:	f003 0302 	and.w	r3, r3, #2
 8010002:	607b      	str	r3, [r7, #4]
 8010004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 8010006:	2200      	movs	r2, #0
 8010008:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 801000c:	4829      	ldr	r0, [pc, #164]	; (80100b4 <MX_GPIO_Init+0x134>)
 801000e:	f7fb f9c1 	bl	800b394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 8010012:	2200      	movs	r2, #0
 8010014:	f241 0150 	movw	r1, #4176	; 0x1050
 8010018:	4827      	ldr	r0, [pc, #156]	; (80100b8 <MX_GPIO_Init+0x138>)
 801001a:	f7fb f9bb 	bl	800b394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801001e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010024:	4b25      	ldr	r3, [pc, #148]	; (80100bc <MX_GPIO_Init+0x13c>)
 8010026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010028:	2300      	movs	r3, #0
 801002a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801002c:	f107 0314 	add.w	r3, r7, #20
 8010030:	4619      	mov	r1, r3
 8010032:	4823      	ldr	r0, [pc, #140]	; (80100c0 <MX_GPIO_Init+0x140>)
 8010034:	f7fb f804 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 8010038:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 801003c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801003e:	2301      	movs	r3, #1
 8010040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010042:	2300      	movs	r3, #0
 8010044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010046:	2300      	movs	r3, #0
 8010048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801004a:	f107 0314 	add.w	r3, r7, #20
 801004e:	4619      	mov	r1, r3
 8010050:	4818      	ldr	r0, [pc, #96]	; (80100b4 <MX_GPIO_Init+0x134>)
 8010052:	f7fa fff5 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8010056:	f241 0350 	movw	r3, #4176	; 0x1050
 801005a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801005c:	2301      	movs	r3, #1
 801005e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010060:	2300      	movs	r3, #0
 8010062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010064:	2300      	movs	r3, #0
 8010066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010068:	f107 0314 	add.w	r3, r7, #20
 801006c:	4619      	mov	r1, r3
 801006e:	4812      	ldr	r0, [pc, #72]	; (80100b8 <MX_GPIO_Init+0x138>)
 8010070:	f7fa ffe6 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 8010074:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8010078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801007a:	2300      	movs	r3, #0
 801007c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801007e:	2301      	movs	r3, #1
 8010080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010082:	f107 0314 	add.w	r3, r7, #20
 8010086:	4619      	mov	r1, r3
 8010088:	480b      	ldr	r0, [pc, #44]	; (80100b8 <MX_GPIO_Init+0x138>)
 801008a:	f7fa ffd9 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 801008e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010094:	2300      	movs	r3, #0
 8010096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010098:	2300      	movs	r3, #0
 801009a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 801009c:	f107 0314 	add.w	r3, r7, #20
 80100a0:	4619      	mov	r1, r3
 80100a2:	4804      	ldr	r0, [pc, #16]	; (80100b4 <MX_GPIO_Init+0x134>)
 80100a4:	f7fa ffcc 	bl	800b040 <HAL_GPIO_Init>

}
 80100a8:	bf00      	nop
 80100aa:	3728      	adds	r7, #40	; 0x28
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	40023800 	.word	0x40023800
 80100b4:	40020000 	.word	0x40020000
 80100b8:	40020400 	.word	0x40020400
 80100bc:	10210000 	.word	0x10210000
 80100c0:	40020800 	.word	0x40020800

080100c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80100cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80100d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80100d4:	f003 0301 	and.w	r3, r3, #1
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d013      	beq.n	8010104 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80100dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80100e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80100e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00b      	beq.n	8010104 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80100ec:	e000      	b.n	80100f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80100ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80100f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d0f9      	beq.n	80100ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80100fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	b2d2      	uxtb	r2, r2
 8010102:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8010104:	687b      	ldr	r3, [r7, #4]
}
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b086      	sub	sp, #24
 8010116:	af00      	add	r7, sp, #0
 8010118:	60f8      	str	r0, [r7, #12]
 801011a:	60b9      	str	r1, [r7, #8]
 801011c:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]
 8010122:	e009      	b.n	8010138 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	60ba      	str	r2, [r7, #8]
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	4618      	mov	r0, r3
 801012e:	f7ff ffc9 	bl	80100c4 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	3301      	adds	r3, #1
 8010136:	617b      	str	r3, [r7, #20]
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	429a      	cmp	r2, r3
 801013e:	dbf1      	blt.n	8010124 <_write+0x12>
  }
  return len;
 8010140:	687b      	ldr	r3, [r7, #4]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3718      	adds	r7, #24
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
	...

0801014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



	int count = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010156:	f7f8 fde9 	bl	8008d2c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801015a:	f000 f8cd 	bl	80102f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801015e:	f7ff ff0f 	bl	800ff80 <MX_GPIO_Init>
  MX_DMA_Init();
 8010162:	f7ff fa6f 	bl	800f644 <MX_DMA_Init>
  MX_ADC1_Init();
 8010166:	f7fe fe8f 	bl	800ee88 <MX_ADC1_Init>
  MX_ADC2_Init();
 801016a:	f7fe fedf 	bl	800ef2c <MX_ADC2_Init>
  MX_ADC3_Init();
 801016e:	f7fe ff2f 	bl	800efd0 <MX_ADC3_Init>
  MX_CAN1_Init();
 8010172:	f7ff f8dd 	bl	800f330 <MX_CAN1_Init>
  MX_SPI2_Init();
 8010176:	f000 fdbb 	bl	8010cf0 <MX_SPI2_Init>
  MX_SPI3_Init();
 801017a:	f000 fdf1 	bl	8010d60 <MX_SPI3_Init>
  MX_TIM8_Init();
 801017e:	f001 f873 	bl	8011268 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8010182:	f001 f9cb 	bl	801151c <MX_USART2_UART_Init>



  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 8010186:	4856      	ldr	r0, [pc, #344]	; (80102e0 <main+0x194>)
 8010188:	f001 fb1e 	bl	80117c8 <puts>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 801018c:	2201      	movs	r2, #1
 801018e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010192:	4854      	ldr	r0, [pc, #336]	; (80102e4 <main+0x198>)
 8010194:	f7fb f8fe 	bl	800b394 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8010198:	2201      	movs	r2, #1
 801019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801019e:	4851      	ldr	r0, [pc, #324]	; (80102e4 <main+0x198>)
 80101a0:	f7fb f8f8 	bl	800b394 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80101a4:	200a      	movs	r0, #10
 80101a6:	f7f8 fe33 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 80101aa:	2200      	movs	r2, #0
 80101ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80101b0:	484c      	ldr	r0, [pc, #304]	; (80102e4 <main+0x198>)
 80101b2:	f7fb f8ef 	bl	800b394 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80101b6:	2200      	movs	r2, #0
 80101b8:	2140      	movs	r1, #64	; 0x40
 80101ba:	484a      	ldr	r0, [pc, #296]	; (80102e4 <main+0x198>)
 80101bc:	f7fb f8ea 	bl	800b394 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80101c0:	2200      	movs	r2, #0
 80101c2:	2110      	movs	r1, #16
 80101c4:	4848      	ldr	r0, [pc, #288]	; (80102e8 <main+0x19c>)
 80101c6:	f7fb f8e5 	bl	800b394 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 80101ca:	f7ff f98f 	bl	800f4ec <getChannel>
 80101ce:	4603      	mov	r3, r0
 80101d0:	70fb      	strb	r3, [r7, #3]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80101d2:	2201      	movs	r2, #1
 80101d4:	2120      	movs	r1, #32
 80101d6:	4843      	ldr	r0, [pc, #268]	; (80102e4 <main+0x198>)
 80101d8:	f7fb f8dc 	bl	800b394 <HAL_GPIO_WritePin>
 80101dc:	2064      	movs	r0, #100	; 0x64
 80101de:	f7f8 fe17 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 80101e2:	2200      	movs	r2, #0
 80101e4:	2120      	movs	r1, #32
 80101e6:	483f      	ldr	r0, [pc, #252]	; (80102e4 <main+0x198>)
 80101e8:	f7fb f8d4 	bl	800b394 <HAL_GPIO_WritePin>
 80101ec:	2064      	movs	r0, #100	; 0x64
 80101ee:	f7f8 fe0f 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80101f2:	2201      	movs	r2, #1
 80101f4:	2120      	movs	r1, #32
 80101f6:	483b      	ldr	r0, [pc, #236]	; (80102e4 <main+0x198>)
 80101f8:	f7fb f8cc 	bl	800b394 <HAL_GPIO_WritePin>
 80101fc:	2064      	movs	r0, #100	; 0x64
 80101fe:	f7f8 fe07 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010202:	2200      	movs	r2, #0
 8010204:	2120      	movs	r1, #32
 8010206:	4837      	ldr	r0, [pc, #220]	; (80102e4 <main+0x198>)
 8010208:	f7fb f8c4 	bl	800b394 <HAL_GPIO_WritePin>
 801020c:	2064      	movs	r0, #100	; 0x64
 801020e:	f7f8 fdff 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010212:	2201      	movs	r2, #1
 8010214:	2120      	movs	r1, #32
 8010216:	4833      	ldr	r0, [pc, #204]	; (80102e4 <main+0x198>)
 8010218:	f7fb f8bc 	bl	800b394 <HAL_GPIO_WritePin>
 801021c:	2064      	movs	r0, #100	; 0x64
 801021e:	f7f8 fdf7 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010222:	2200      	movs	r2, #0
 8010224:	2120      	movs	r1, #32
 8010226:	482f      	ldr	r0, [pc, #188]	; (80102e4 <main+0x198>)
 8010228:	f7fb f8b4 	bl	800b394 <HAL_GPIO_WritePin>
 801022c:	2064      	movs	r0, #100	; 0x64
 801022e:	f7f8 fdef 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010232:	2201      	movs	r2, #1
 8010234:	2120      	movs	r1, #32
 8010236:	482b      	ldr	r0, [pc, #172]	; (80102e4 <main+0x198>)
 8010238:	f7fb f8ac 	bl	800b394 <HAL_GPIO_WritePin>
 801023c:	2064      	movs	r0, #100	; 0x64
 801023e:	f7f8 fde7 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010242:	2200      	movs	r2, #0
 8010244:	2120      	movs	r1, #32
 8010246:	4827      	ldr	r0, [pc, #156]	; (80102e4 <main+0x198>)
 8010248:	f7fb f8a4 	bl	800b394 <HAL_GPIO_WritePin>
 801024c:	2064      	movs	r0, #100	; 0x64
 801024e:	f7f8 fddf 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010252:	2201      	movs	r2, #1
 8010254:	2120      	movs	r1, #32
 8010256:	4823      	ldr	r0, [pc, #140]	; (80102e4 <main+0x198>)
 8010258:	f7fb f89c 	bl	800b394 <HAL_GPIO_WritePin>
 801025c:	2064      	movs	r0, #100	; 0x64
 801025e:	f7f8 fdd7 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010262:	2200      	movs	r2, #0
 8010264:	2120      	movs	r1, #32
 8010266:	481f      	ldr	r0, [pc, #124]	; (80102e4 <main+0x198>)
 8010268:	f7fb f894 	bl	800b394 <HAL_GPIO_WritePin>
 801026c:	2064      	movs	r0, #100	; 0x64
 801026e:	f7f8 fdcf 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010272:	2201      	movs	r2, #1
 8010274:	2120      	movs	r1, #32
 8010276:	481b      	ldr	r0, [pc, #108]	; (80102e4 <main+0x198>)
 8010278:	f7fb f88c 	bl	800b394 <HAL_GPIO_WritePin>
 801027c:	2064      	movs	r0, #100	; 0x64
 801027e:	f7f8 fdc7 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010282:	2200      	movs	r2, #0
 8010284:	2120      	movs	r1, #32
 8010286:	4817      	ldr	r0, [pc, #92]	; (80102e4 <main+0x198>)
 8010288:	f7fb f884 	bl	800b394 <HAL_GPIO_WritePin>
 801028c:	2064      	movs	r0, #100	; 0x64
 801028e:	f7f8 fdbf 	bl	8008e10 <HAL_Delay>


  ch = getChannel();
 8010292:	f7ff f92b 	bl	800f4ec <getChannel>
 8010296:	4603      	mov	r3, r0
 8010298:	70bb      	strb	r3, [r7, #2]




  CAN_Init();
 801029a:	f7ff f8d9 	bl	800f450 <CAN_Init>


  Encoder_Init();
 801029e:	f7ff fa01 	bl	800f6a4 <Encoder_Init>


  HAL_Delay(100);
 80102a2:	2064      	movs	r0, #100	; 0x64
 80102a4:	f7f8 fdb4 	bl	8008e10 <HAL_Delay>

  CurrentSensor_Init();
 80102a8:	f7fe fb84 	bl	800e9b4 <CurrentSensor_Init>

  CurrentSensor_Start(&mainCS);
 80102ac:	480f      	ldr	r0, [pc, #60]	; (80102ec <main+0x1a0>)
 80102ae:	f7fe fbb9 	bl	800ea24 <CurrentSensor_Start>

  PWM_Init();
 80102b2:	f000 f911 	bl	80104d8 <PWM_Init>

  ACR_Init();
 80102b6:	f7fd ff33 	bl	800e120 <ACR_Init>

  ASR_Init();
 80102ba:	f7fe fa17 	bl	800e6ec <ASR_Init>


  HAL_Delay(10);
 80102be:	200a      	movs	r0, #10
 80102c0:	f7f8 fda6 	bl	8008e10 <HAL_Delay>



  ACR_Start(&mainACR);
 80102c4:	480a      	ldr	r0, [pc, #40]	; (80102f0 <main+0x1a4>)
 80102c6:	f7fd ff65 	bl	800e194 <ACR_Start>


  setZeroEncoder(0);//(p_ch != ch)? 1: 0);
 80102ca:	2000      	movs	r0, #0
 80102cc:	f7ff fa34 	bl	800f738 <setZeroEncoder>



  //while(1);

  ASR_Start(&mainASR);
 80102d0:	4808      	ldr	r0, [pc, #32]	; (80102f4 <main+0x1a8>)
 80102d2:	f7fe fa45 	bl	800e760 <ASR_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  ASR_Refresh(&mainASR);
 80102d6:	4807      	ldr	r0, [pc, #28]	; (80102f4 <main+0x1a8>)
 80102d8:	f7fe fa6e 	bl	800e7b8 <ASR_Refresh>
 80102dc:	e7fb      	b.n	80102d6 <main+0x18a>
 80102de:	bf00      	nop
 80102e0:	0801283c 	.word	0x0801283c
 80102e4:	40020000 	.word	0x40020000
 80102e8:	40020400 	.word	0x40020400
 80102ec:	20004204 	.word	0x20004204
 80102f0:	2000414c 	.word	0x2000414c
 80102f4:	200041b8 	.word	0x200041b8

080102f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b094      	sub	sp, #80	; 0x50
 80102fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80102fe:	f107 031c 	add.w	r3, r7, #28
 8010302:	2234      	movs	r2, #52	; 0x34
 8010304:	2100      	movs	r1, #0
 8010306:	4618      	mov	r0, r3
 8010308:	f001 f9e1 	bl	80116ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801030c:	f107 0308 	add.w	r3, r7, #8
 8010310:	2200      	movs	r2, #0
 8010312:	601a      	str	r2, [r3, #0]
 8010314:	605a      	str	r2, [r3, #4]
 8010316:	609a      	str	r2, [r3, #8]
 8010318:	60da      	str	r2, [r3, #12]
 801031a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801031c:	2300      	movs	r3, #0
 801031e:	607b      	str	r3, [r7, #4]
 8010320:	4b29      	ldr	r3, [pc, #164]	; (80103c8 <SystemClock_Config+0xd0>)
 8010322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010324:	4a28      	ldr	r2, [pc, #160]	; (80103c8 <SystemClock_Config+0xd0>)
 8010326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801032a:	6413      	str	r3, [r2, #64]	; 0x40
 801032c:	4b26      	ldr	r3, [pc, #152]	; (80103c8 <SystemClock_Config+0xd0>)
 801032e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010334:	607b      	str	r3, [r7, #4]
 8010336:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010338:	2300      	movs	r3, #0
 801033a:	603b      	str	r3, [r7, #0]
 801033c:	4b23      	ldr	r3, [pc, #140]	; (80103cc <SystemClock_Config+0xd4>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4a22      	ldr	r2, [pc, #136]	; (80103cc <SystemClock_Config+0xd4>)
 8010342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010346:	6013      	str	r3, [r2, #0]
 8010348:	4b20      	ldr	r3, [pc, #128]	; (80103cc <SystemClock_Config+0xd4>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010350:	603b      	str	r3, [r7, #0]
 8010352:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010354:	2302      	movs	r3, #2
 8010356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010358:	2301      	movs	r3, #1
 801035a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801035c:	2310      	movs	r3, #16
 801035e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010360:	2302      	movs	r3, #2
 8010362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010364:	2300      	movs	r3, #0
 8010366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8010368:	2310      	movs	r3, #16
 801036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 801036c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010370:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010372:	2302      	movs	r3, #2
 8010374:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010376:	2302      	movs	r3, #2
 8010378:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 801037a:	2302      	movs	r3, #2
 801037c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801037e:	f107 031c 	add.w	r3, r7, #28
 8010382:	4618      	mov	r0, r3
 8010384:	f7fb fad6 	bl	800b934 <HAL_RCC_OscConfig>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d001      	beq.n	8010392 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 801038e:	f000 f89b 	bl	80104c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010392:	230f      	movs	r3, #15
 8010394:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010396:	2302      	movs	r3, #2
 8010398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801039a:	2300      	movs	r3, #0
 801039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801039e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80103a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80103a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80103aa:	f107 0308 	add.w	r3, r7, #8
 80103ae:	2105      	movs	r1, #5
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fb f809 	bl	800b3c8 <HAL_RCC_ClockConfig>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d001      	beq.n	80103c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80103bc:	f000 f884 	bl	80104c8 <Error_Handler>
  }
}
 80103c0:	bf00      	nop
 80103c2:	3750      	adds	r7, #80	; 0x50
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	40023800 	.word	0x40023800
 80103cc:	40007000 	.word	0x40007000

080103d0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_SET);
 80103d8:	2201      	movs	r2, #1
 80103da:	2110      	movs	r1, #16
 80103dc:	481f      	ldr	r0, [pc, #124]	; (801045c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80103de:	f7fa ffd9 	bl	800b394 <HAL_GPIO_WritePin>

	if(htim->Instance == TIM8 && !__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4a1e      	ldr	r2, [pc, #120]	; (8010460 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d12d      	bne.n	8010448 <HAL_TIM_PeriodElapsedCallback+0x78>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f003 0310 	and.w	r3, r3, #16
 80103f6:	2b10      	cmp	r3, #16
 80103f8:	d026      	beq.n	8010448 <HAL_TIM_PeriodElapsedCallback+0x78>
	{

		Encoder_Refresh(&mainEncoder);
 80103fa:	481a      	ldr	r0, [pc, #104]	; (8010464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80103fc:	f7ff fb20 	bl	800fa40 <Encoder_Refresh>

		//Encoder_RefreshSpeed(&mainEncoder);

		CurrentSensor_Refresh(&mainCS, sector_SVM);
 8010400:	4b19      	ldr	r3, [pc, #100]	; (8010468 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	b2db      	uxtb	r3, r3
 8010406:	4619      	mov	r1, r3
 8010408:	4818      	ldr	r0, [pc, #96]	; (801046c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 801040a:	f7fe fb31 	bl	800ea70 <CurrentSensor_Refresh>

		ACR_Refresh(&mainACR);
 801040e:	4818      	ldr	r0, [pc, #96]	; (8010470 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8010410:	f7fd fed2 	bl	800e1b8 <ACR_Refresh>

		ASR_prescaler(&mainASR);
 8010414:	4817      	ldr	r0, [pc, #92]	; (8010474 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8010416:	f7fe f9b2 	bl	800e77e <ASR_prescaler>

		Encoder_Request(&mainEncoder);
 801041a:	4812      	ldr	r0, [pc, #72]	; (8010464 <HAL_TIM_PeriodElapsedCallback+0x94>)
 801041c:	f7ff faea 	bl	800f9f4 <Encoder_Request>


		// timeout control
		if(timeoutCount < TIMEOUT_MS * TIMEOUT_BASE_FREQ / 1000)
 8010420:	4b15      	ldr	r3, [pc, #84]	; (8010478 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010428:	d205      	bcs.n	8010436 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timeoutCount += 1;
 801042a:	4b13      	ldr	r3, [pc, #76]	; (8010478 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3301      	adds	r3, #1
 8010430:	4a11      	ldr	r2, [pc, #68]	; (8010478 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8010432:	6013      	str	r3, [r2, #0]
 8010434:	e008      	b.n	8010448 <HAL_TIM_PeriodElapsedCallback+0x78>
		}
		else
		{
			stopPWM(&htim8);
 8010436:	4811      	ldr	r0, [pc, #68]	; (801047c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8010438:	f000 f888 	bl	801054c <stopPWM>
			timeoutCount = 0;
 801043c:	4b0e      	ldr	r3, [pc, #56]	; (8010478 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 801043e:	2200      	movs	r2, #0
 8010440:	601a      	str	r2, [r3, #0]
			timeoutState = 1;
 8010442:	4b0f      	ldr	r3, [pc, #60]	; (8010480 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8010444:	2201      	movs	r2, #1
 8010446:	701a      	strb	r2, [r3, #0]



	}

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8010448:	2200      	movs	r2, #0
 801044a:	2110      	movs	r1, #16
 801044c:	4803      	ldr	r0, [pc, #12]	; (801045c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 801044e:	f7fa ffa1 	bl	800b394 <HAL_GPIO_WritePin>

}
 8010452:	bf00      	nop
 8010454:	3708      	adds	r7, #8
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	40020400 	.word	0x40020400
 8010460:	40010400 	.word	0x40010400
 8010464:	200044e0 	.word	0x200044e0
 8010468:	200040e4 	.word	0x200040e4
 801046c:	20004204 	.word	0x20004204
 8010470:	2000414c 	.word	0x2000414c
 8010474:	200041b8 	.word	0x200041b8
 8010478:	200040d0 	.word	0x200040d0
 801047c:	200045e4 	.word	0x200045e4
 8010480:	200040d4 	.word	0x200040d4

08010484 <timeoutReset>:



inline void timeoutReset()
{
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8010488:	4b0a      	ldr	r3, [pc, #40]	; (80104b4 <timeoutReset+0x30>)
 801048a:	2200      	movs	r2, #0
 801048c:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 801048e:	4b0a      	ldr	r3, [pc, #40]	; (80104b8 <timeoutReset+0x34>)
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b01      	cmp	r3, #1
 8010496:	d10b      	bne.n	80104b0 <timeoutReset+0x2c>
	{
		timeoutState = 0;
 8010498:	4b07      	ldr	r3, [pc, #28]	; (80104b8 <timeoutReset+0x34>)
 801049a:	2200      	movs	r2, #0
 801049c:	701a      	strb	r2, [r3, #0]
		ASR_Reset(&mainASR);
 801049e:	4807      	ldr	r0, [pc, #28]	; (80104bc <timeoutReset+0x38>)
 80104a0:	f7fe fa6a 	bl	800e978 <ASR_Reset>
		ACR_Reset(&mainACR);
 80104a4:	4806      	ldr	r0, [pc, #24]	; (80104c0 <timeoutReset+0x3c>)
 80104a6:	f7fe f8f7 	bl	800e698 <ACR_Reset>
		startPWM(&htim8);
 80104aa:	4806      	ldr	r0, [pc, #24]	; (80104c4 <timeoutReset+0x40>)
 80104ac:	f000 f82e 	bl	801050c <startPWM>
	}
}
 80104b0:	bf00      	nop
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	200040d0 	.word	0x200040d0
 80104b8:	200040d4 	.word	0x200040d4
 80104bc:	200041b8 	.word	0x200041b8
 80104c0:	2000414c 	.word	0x2000414c
 80104c4:	200045e4 	.word	0x200045e4

080104c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80104c8:	b480      	push	{r7}
 80104ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80104cc:	bf00      	nop
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
	...

080104d8 <PWM_Init>:

volatile int sector_SVM = 0;


void PWM_Init()
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 80104dc:	4b0a      	ldr	r3, [pc, #40]	; (8010508 <PWM_Init+0x30>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f06f 0201 	mvn.w	r2, #1
 80104e4:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 80104e6:	4b08      	ldr	r3, [pc, #32]	; (8010508 <PWM_Init+0x30>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	68da      	ldr	r2, [r3, #12]
 80104ec:	4b06      	ldr	r3, [pc, #24]	; (8010508 <PWM_Init+0x30>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f042 0201 	orr.w	r2, r2, #1
 80104f4:	60da      	str	r2, [r3, #12]


	HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 80104f6:	2101      	movs	r1, #1
 80104f8:	4803      	ldr	r0, [pc, #12]	; (8010508 <PWM_Init+0x30>)
 80104fa:	f7fc fbcd 	bl	800cc98 <HAL_TIM_GenerateEvent>
	//HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);


	startPWM(&htim8);
 80104fe:	4802      	ldr	r0, [pc, #8]	; (8010508 <PWM_Init+0x30>)
 8010500:	f000 f804 	bl	801050c <startPWM>

}
 8010504:	bf00      	nop
 8010506:	bd80      	pop	{r7, pc}
 8010508:	200045e4 	.word	0x200045e4

0801050c <startPWM>:


inline void startPWM(TIM_HandleTypeDef *htim)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8010514:	2100      	movs	r1, #0
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7fc f8d2 	bl	800c6c0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 801051c:	2104      	movs	r1, #4
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f7fc f8ce 	bl	800c6c0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 8010524:	2108      	movs	r1, #8
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7fc f8ca 	bl	800c6c0 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_1);
 801052c:	2100      	movs	r1, #0
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7fc ffc7 	bl	800d4c2 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_2);
 8010534:	2104      	movs	r1, #4
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7fc ffc3 	bl	800d4c2 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_3);
 801053c:	2108      	movs	r1, #8
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f7fc ffbf 	bl	800d4c2 <HAL_TIMEx_PWMN_Start_IT>

}
 8010544:	bf00      	nop
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <stopPWM>:



inline void stopPWM(TIM_HandleTypeDef *htim)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8010554:	2100      	movs	r1, #0
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7fc f936 	bl	800c7c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 801055c:	2104      	movs	r1, #4
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7fc f932 	bl	800c7c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_3);
 8010564:	2108      	movs	r1, #8
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f7fc f92e 	bl	800c7c8 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_1);
 801056c:	2100      	movs	r1, #0
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f7fc fffc 	bl	800d56c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_2);
 8010574:	2104      	movs	r1, #4
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7fc fff8 	bl	800d56c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_3);
 801057c:	2108      	movs	r1, #8
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7fc fff4 	bl	800d56c <HAL_TIMEx_PWMN_Stop_IT>

}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <setSVM_dq>:


inline void setSVM_dq(TIM_HandleTypeDef *htim, float Vd_ref, float Vq_ref, float cos_theta_re, float sin_theta_re)
{
 801058c:	b5b0      	push	{r4, r5, r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	6178      	str	r0, [r7, #20]
 8010594:	ed87 0a04 	vstr	s0, [r7, #16]
 8010598:	edc7 0a03 	vstr	s1, [r7, #12]
 801059c:	ed87 1a02 	vstr	s2, [r7, #8]
 80105a0:	edc7 1a01 	vstr	s3, [r7, #4]
	static float x1, y1, x2, y2;
	static float x, y;
	static float vect1, vect2;


	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 80105a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80105a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80105ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80105b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80105b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105c0:	4bad      	ldr	r3, [pc, #692]	; (8010878 <setSVM_dq+0x2ec>)
 80105c2:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 80105c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80105ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80105ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105d2:	edd7 6a03 	vldr	s13, [r7, #12]
 80105d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80105da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105e2:	4ba6      	ldr	r3, [pc, #664]	; (801087c <setSVM_dq+0x2f0>)
 80105e4:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 80105e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105ec:	4ba3      	ldr	r3, [pc, #652]	; (801087c <setSVM_dq+0x2f0>)
 80105ee:	edd3 7a00 	vldr	s15, [r3]
 80105f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105f6:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8010880 <setSVM_dq+0x2f4>
 80105fa:	4b9f      	ldr	r3, [pc, #636]	; (8010878 <setSVM_dq+0x2ec>)
 80105fc:	edd3 7a00 	vldr	s15, [r3]
 8010600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010608:	4b9e      	ldr	r3, [pc, #632]	; (8010884 <setSVM_dq+0x2f8>)
 801060a:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 801060e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010612:	4b9a      	ldr	r3, [pc, #616]	; (801087c <setSVM_dq+0x2f0>)
 8010614:	edd3 7a00 	vldr	s15, [r3]
 8010618:	ee27 7a27 	vmul.f32	s14, s14, s15
 801061c:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8010888 <setSVM_dq+0x2fc>
 8010620:	4b95      	ldr	r3, [pc, #596]	; (8010878 <setSVM_dq+0x2ec>)
 8010622:	edd3 7a00 	vldr	s15, [r3]
 8010626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801062a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801062e:	4b97      	ldr	r3, [pc, #604]	; (801088c <setSVM_dq+0x300>)
 8010630:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8010634:	4b93      	ldr	r3, [pc, #588]	; (8010884 <setSVM_dq+0x2f8>)
 8010636:	edd3 7a00 	vldr	s15, [r3]
 801063a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010642:	db1e      	blt.n	8010682 <setSVM_dq+0xf6>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8010644:	4b91      	ldr	r3, [pc, #580]	; (801088c <setSVM_dq+0x300>)
 8010646:	edd3 7a00 	vldr	s15, [r3]
 801064a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010652:	d803      	bhi.n	801065c <setSVM_dq+0xd0>
 8010654:	4b8e      	ldr	r3, [pc, #568]	; (8010890 <setSVM_dq+0x304>)
 8010656:	2200      	movs	r2, #0
 8010658:	601a      	str	r2, [r3, #0]
 801065a:	e030      	b.n	80106be <setSVM_dq+0x132>
		else if(cross0 >= cross1)	sector_SVM = 1;
 801065c:	4b89      	ldr	r3, [pc, #548]	; (8010884 <setSVM_dq+0x2f8>)
 801065e:	ed93 7a00 	vldr	s14, [r3]
 8010662:	4b8a      	ldr	r3, [pc, #552]	; (801088c <setSVM_dq+0x300>)
 8010664:	edd3 7a00 	vldr	s15, [r3]
 8010668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801066c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010670:	db03      	blt.n	801067a <setSVM_dq+0xee>
 8010672:	4b87      	ldr	r3, [pc, #540]	; (8010890 <setSVM_dq+0x304>)
 8010674:	2201      	movs	r2, #1
 8010676:	601a      	str	r2, [r3, #0]
 8010678:	e021      	b.n	80106be <setSVM_dq+0x132>
		else						sector_SVM = 2;
 801067a:	4b85      	ldr	r3, [pc, #532]	; (8010890 <setSVM_dq+0x304>)
 801067c:	2202      	movs	r2, #2
 801067e:	601a      	str	r2, [r3, #0]
 8010680:	e01d      	b.n	80106be <setSVM_dq+0x132>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 8010682:	4b82      	ldr	r3, [pc, #520]	; (801088c <setSVM_dq+0x300>)
 8010684:	edd3 7a00 	vldr	s15, [r3]
 8010688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801068c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010690:	db03      	blt.n	801069a <setSVM_dq+0x10e>
 8010692:	4b7f      	ldr	r3, [pc, #508]	; (8010890 <setSVM_dq+0x304>)
 8010694:	2203      	movs	r2, #3
 8010696:	601a      	str	r2, [r3, #0]
 8010698:	e011      	b.n	80106be <setSVM_dq+0x132>
		else if(cross0 <= cross1)	sector_SVM = 4;
 801069a:	4b7a      	ldr	r3, [pc, #488]	; (8010884 <setSVM_dq+0x2f8>)
 801069c:	ed93 7a00 	vldr	s14, [r3]
 80106a0:	4b7a      	ldr	r3, [pc, #488]	; (801088c <setSVM_dq+0x300>)
 80106a2:	edd3 7a00 	vldr	s15, [r3]
 80106a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80106aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ae:	d803      	bhi.n	80106b8 <setSVM_dq+0x12c>
 80106b0:	4b77      	ldr	r3, [pc, #476]	; (8010890 <setSVM_dq+0x304>)
 80106b2:	2204      	movs	r2, #4
 80106b4:	601a      	str	r2, [r3, #0]
 80106b6:	e002      	b.n	80106be <setSVM_dq+0x132>
		else						sector_SVM = 5;
 80106b8:	4b75      	ldr	r3, [pc, #468]	; (8010890 <setSVM_dq+0x304>)
 80106ba:	2205      	movs	r2, #5
 80106bc:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 80106be:	4b74      	ldr	r3, [pc, #464]	; (8010890 <setSVM_dq+0x304>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4a74      	ldr	r2, [pc, #464]	; (8010894 <setSVM_dq+0x308>)
 80106c4:	00db      	lsls	r3, r3, #3
 80106c6:	4413      	add	r3, r2
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4a73      	ldr	r2, [pc, #460]	; (8010898 <setSVM_dq+0x30c>)
 80106cc:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 80106ce:	4b70      	ldr	r3, [pc, #448]	; (8010890 <setSVM_dq+0x304>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4a70      	ldr	r2, [pc, #448]	; (8010894 <setSVM_dq+0x308>)
 80106d4:	00db      	lsls	r3, r3, #3
 80106d6:	4413      	add	r3, r2
 80106d8:	3304      	adds	r3, #4
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	4a6f      	ldr	r2, [pc, #444]	; (801089c <setSVM_dq+0x310>)
 80106de:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 80106e0:	4b6b      	ldr	r3, [pc, #428]	; (8010890 <setSVM_dq+0x304>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3301      	adds	r3, #1
 80106e6:	4a6b      	ldr	r2, [pc, #428]	; (8010894 <setSVM_dq+0x308>)
 80106e8:	00db      	lsls	r3, r3, #3
 80106ea:	4413      	add	r3, r2
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4a6c      	ldr	r2, [pc, #432]	; (80108a0 <setSVM_dq+0x314>)
 80106f0:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 80106f2:	4b67      	ldr	r3, [pc, #412]	; (8010890 <setSVM_dq+0x304>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3301      	adds	r3, #1
 80106f8:	4a66      	ldr	r2, [pc, #408]	; (8010894 <setSVM_dq+0x308>)
 80106fa:	00db      	lsls	r3, r3, #3
 80106fc:	4413      	add	r3, r2
 80106fe:	3304      	adds	r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4a68      	ldr	r2, [pc, #416]	; (80108a4 <setSVM_dq+0x318>)
 8010704:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8010706:	4b67      	ldr	r3, [pc, #412]	; (80108a4 <setSVM_dq+0x318>)
 8010708:	ed93 7a00 	vldr	s14, [r3]
 801070c:	4b5a      	ldr	r3, [pc, #360]	; (8010878 <setSVM_dq+0x2ec>)
 801070e:	edd3 7a00 	vldr	s15, [r3]
 8010712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010716:	4b62      	ldr	r3, [pc, #392]	; (80108a0 <setSVM_dq+0x314>)
 8010718:	edd3 6a00 	vldr	s13, [r3]
 801071c:	4b57      	ldr	r3, [pc, #348]	; (801087c <setSVM_dq+0x2f0>)
 801071e:	edd3 7a00 	vldr	s15, [r3]
 8010722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010726:	ee77 6a67 	vsub.f32	s13, s14, s15
 801072a:	4b5b      	ldr	r3, [pc, #364]	; (8010898 <setSVM_dq+0x30c>)
 801072c:	ed93 7a00 	vldr	s14, [r3]
 8010730:	4b5c      	ldr	r3, [pc, #368]	; (80108a4 <setSVM_dq+0x318>)
 8010732:	edd3 7a00 	vldr	s15, [r3]
 8010736:	ee27 7a27 	vmul.f32	s14, s14, s15
 801073a:	4b58      	ldr	r3, [pc, #352]	; (801089c <setSVM_dq+0x310>)
 801073c:	ed93 6a00 	vldr	s12, [r3]
 8010740:	4b57      	ldr	r3, [pc, #348]	; (80108a0 <setSVM_dq+0x314>)
 8010742:	edd3 7a00 	vldr	s15, [r3]
 8010746:	ee66 7a27 	vmul.f32	s15, s12, s15
 801074a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801074e:	4b56      	ldr	r3, [pc, #344]	; (80108a8 <setSVM_dq+0x31c>)
 8010750:	edd3 7a00 	vldr	s15, [r3]
 8010754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801075c:	4b53      	ldr	r3, [pc, #332]	; (80108ac <setSVM_dq+0x320>)
 801075e:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8010762:	4b4e      	ldr	r3, [pc, #312]	; (801089c <setSVM_dq+0x310>)
 8010764:	edd3 7a00 	vldr	s15, [r3]
 8010768:	eeb1 7a67 	vneg.f32	s14, s15
 801076c:	4b42      	ldr	r3, [pc, #264]	; (8010878 <setSVM_dq+0x2ec>)
 801076e:	edd3 7a00 	vldr	s15, [r3]
 8010772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010776:	4b48      	ldr	r3, [pc, #288]	; (8010898 <setSVM_dq+0x30c>)
 8010778:	edd3 6a00 	vldr	s13, [r3]
 801077c:	4b3f      	ldr	r3, [pc, #252]	; (801087c <setSVM_dq+0x2f0>)
 801077e:	edd3 7a00 	vldr	s15, [r3]
 8010782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010786:	ee77 6a27 	vadd.f32	s13, s14, s15
 801078a:	4b43      	ldr	r3, [pc, #268]	; (8010898 <setSVM_dq+0x30c>)
 801078c:	ed93 7a00 	vldr	s14, [r3]
 8010790:	4b44      	ldr	r3, [pc, #272]	; (80108a4 <setSVM_dq+0x318>)
 8010792:	edd3 7a00 	vldr	s15, [r3]
 8010796:	ee27 7a27 	vmul.f32	s14, s14, s15
 801079a:	4b40      	ldr	r3, [pc, #256]	; (801089c <setSVM_dq+0x310>)
 801079c:	ed93 6a00 	vldr	s12, [r3]
 80107a0:	4b3f      	ldr	r3, [pc, #252]	; (80108a0 <setSVM_dq+0x314>)
 80107a2:	edd3 7a00 	vldr	s15, [r3]
 80107a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80107aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107ae:	4b3e      	ldr	r3, [pc, #248]	; (80108a8 <setSVM_dq+0x31c>)
 80107b0:	edd3 7a00 	vldr	s15, [r3]
 80107b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107bc:	4b3c      	ldr	r3, [pc, #240]	; (80108b0 <setSVM_dq+0x324>)
 80107be:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 80107c2:	4b33      	ldr	r3, [pc, #204]	; (8010890 <setSVM_dq+0x304>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b05      	cmp	r3, #5
 80107c8:	f200 81d8 	bhi.w	8010b7c <setSVM_dq+0x5f0>
 80107cc:	a201      	add	r2, pc, #4	; (adr r2, 80107d4 <setSVM_dq+0x248>)
 80107ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d2:	bf00      	nop
 80107d4:	080107ed 	.word	0x080107ed
 80107d8:	080108c1 	.word	0x080108c1
 80107dc:	0801094d 	.word	0x0801094d
 80107e0:	080109d9 	.word	0x080109d9
 80107e4:	08010a65 	.word	0x08010a65
 80107e8:	08010af1 	.word	0x08010af1
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 80107ec:	4b2f      	ldr	r3, [pc, #188]	; (80108ac <setSVM_dq+0x320>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f7 fdd9 	bl	80083a8 <__aeabi_f2d>
 80107f6:	4603      	mov	r3, r0
 80107f8:	460c      	mov	r4, r1
 80107fa:	461a      	mov	r2, r3
 80107fc:	4623      	mov	r3, r4
 80107fe:	f04f 0000 	mov.w	r0, #0
 8010802:	492c      	ldr	r1, [pc, #176]	; (80108b4 <setSVM_dq+0x328>)
 8010804:	f7f7 fc70 	bl	80080e8 <__aeabi_dsub>
 8010808:	4603      	mov	r3, r0
 801080a:	460c      	mov	r4, r1
 801080c:	4625      	mov	r5, r4
 801080e:	461c      	mov	r4, r3
 8010810:	4b27      	ldr	r3, [pc, #156]	; (80108b0 <setSVM_dq+0x324>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4618      	mov	r0, r3
 8010816:	f7f7 fdc7 	bl	80083a8 <__aeabi_f2d>
 801081a:	4602      	mov	r2, r0
 801081c:	460b      	mov	r3, r1
 801081e:	4620      	mov	r0, r4
 8010820:	4629      	mov	r1, r5
 8010822:	f7f7 fc61 	bl	80080e8 <__aeabi_dsub>
 8010826:	4603      	mov	r3, r0
 8010828:	460c      	mov	r4, r1
 801082a:	4618      	mov	r0, r3
 801082c:	4621      	mov	r1, r4
 801082e:	f04f 0200 	mov.w	r2, #0
 8010832:	4b21      	ldr	r3, [pc, #132]	; (80108b8 <setSVM_dq+0x32c>)
 8010834:	f7f7 fe10 	bl	8008458 <__aeabi_dmul>
 8010838:	4603      	mov	r3, r0
 801083a:	460c      	mov	r4, r1
 801083c:	4618      	mov	r0, r3
 801083e:	4621      	mov	r1, r4
 8010840:	f7f8 f8a4 	bl	800898c <__aeabi_d2f>
 8010844:	4602      	mov	r2, r0
 8010846:	4b1d      	ldr	r3, [pc, #116]	; (80108bc <setSVM_dq+0x330>)
 8010848:	609a      	str	r2, [r3, #8]
 801084a:	4b1c      	ldr	r3, [pc, #112]	; (80108bc <setSVM_dq+0x330>)
 801084c:	ed93 7a02 	vldr	s14, [r3, #8]
 8010850:	4b17      	ldr	r3, [pc, #92]	; (80108b0 <setSVM_dq+0x324>)
 8010852:	edd3 7a00 	vldr	s15, [r3]
 8010856:	ee77 7a27 	vadd.f32	s15, s14, s15
 801085a:	4b18      	ldr	r3, [pc, #96]	; (80108bc <setSVM_dq+0x330>)
 801085c:	edc3 7a01 	vstr	s15, [r3, #4]
 8010860:	4b16      	ldr	r3, [pc, #88]	; (80108bc <setSVM_dq+0x330>)
 8010862:	ed93 7a01 	vldr	s14, [r3, #4]
 8010866:	4b11      	ldr	r3, [pc, #68]	; (80108ac <setSVM_dq+0x320>)
 8010868:	edd3 7a00 	vldr	s15, [r3]
 801086c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010870:	4b12      	ldr	r3, [pc, #72]	; (80108bc <setSVM_dq+0x330>)
 8010872:	edc3 7a00 	vstr	s15, [r3]
 8010876:	e181      	b.n	8010b7c <setSVM_dq+0x5f0>
 8010878:	200040e8 	.word	0x200040e8
 801087c:	200040ec 	.word	0x200040ec
 8010880:	00000000 	.word	0x00000000
 8010884:	200040f0 	.word	0x200040f0
 8010888:	3f5db22d 	.word	0x3f5db22d
 801088c:	200040f4 	.word	0x200040f4
 8010890:	200040e4 	.word	0x200040e4
 8010894:	0801284c 	.word	0x0801284c
 8010898:	200040f8 	.word	0x200040f8
 801089c:	200040fc 	.word	0x200040fc
 80108a0:	20004100 	.word	0x20004100
 80108a4:	20004104 	.word	0x20004104
 80108a8:	20000008 	.word	0x20000008
 80108ac:	20004108 	.word	0x20004108
 80108b0:	2000410c 	.word	0x2000410c
 80108b4:	3ff00000 	.word	0x3ff00000
 80108b8:	3fe00000 	.word	0x3fe00000
 80108bc:	20004110 	.word	0x20004110
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 80108c0:	4bc3      	ldr	r3, [pc, #780]	; (8010bd0 <setSVM_dq+0x644>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7f7 fd6f 	bl	80083a8 <__aeabi_f2d>
 80108ca:	4603      	mov	r3, r0
 80108cc:	460c      	mov	r4, r1
 80108ce:	461a      	mov	r2, r3
 80108d0:	4623      	mov	r3, r4
 80108d2:	f04f 0000 	mov.w	r0, #0
 80108d6:	49bf      	ldr	r1, [pc, #764]	; (8010bd4 <setSVM_dq+0x648>)
 80108d8:	f7f7 fc06 	bl	80080e8 <__aeabi_dsub>
 80108dc:	4603      	mov	r3, r0
 80108de:	460c      	mov	r4, r1
 80108e0:	4625      	mov	r5, r4
 80108e2:	461c      	mov	r4, r3
 80108e4:	4bbc      	ldr	r3, [pc, #752]	; (8010bd8 <setSVM_dq+0x64c>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7f7 fd5d 	bl	80083a8 <__aeabi_f2d>
 80108ee:	4602      	mov	r2, r0
 80108f0:	460b      	mov	r3, r1
 80108f2:	4620      	mov	r0, r4
 80108f4:	4629      	mov	r1, r5
 80108f6:	f7f7 fbf7 	bl	80080e8 <__aeabi_dsub>
 80108fa:	4603      	mov	r3, r0
 80108fc:	460c      	mov	r4, r1
 80108fe:	4618      	mov	r0, r3
 8010900:	4621      	mov	r1, r4
 8010902:	f04f 0200 	mov.w	r2, #0
 8010906:	4bb5      	ldr	r3, [pc, #724]	; (8010bdc <setSVM_dq+0x650>)
 8010908:	f7f7 fda6 	bl	8008458 <__aeabi_dmul>
 801090c:	4603      	mov	r3, r0
 801090e:	460c      	mov	r4, r1
 8010910:	4618      	mov	r0, r3
 8010912:	4621      	mov	r1, r4
 8010914:	f7f8 f83a 	bl	800898c <__aeabi_d2f>
 8010918:	4602      	mov	r2, r0
 801091a:	4bb1      	ldr	r3, [pc, #708]	; (8010be0 <setSVM_dq+0x654>)
 801091c:	609a      	str	r2, [r3, #8]
 801091e:	4bb0      	ldr	r3, [pc, #704]	; (8010be0 <setSVM_dq+0x654>)
 8010920:	ed93 7a02 	vldr	s14, [r3, #8]
 8010924:	4baa      	ldr	r3, [pc, #680]	; (8010bd0 <setSVM_dq+0x644>)
 8010926:	edd3 7a00 	vldr	s15, [r3]
 801092a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801092e:	4bac      	ldr	r3, [pc, #688]	; (8010be0 <setSVM_dq+0x654>)
 8010930:	edc3 7a00 	vstr	s15, [r3]
 8010934:	4baa      	ldr	r3, [pc, #680]	; (8010be0 <setSVM_dq+0x654>)
 8010936:	ed93 7a00 	vldr	s14, [r3]
 801093a:	4ba7      	ldr	r3, [pc, #668]	; (8010bd8 <setSVM_dq+0x64c>)
 801093c:	edd3 7a00 	vldr	s15, [r3]
 8010940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010944:	4ba6      	ldr	r3, [pc, #664]	; (8010be0 <setSVM_dq+0x654>)
 8010946:	edc3 7a01 	vstr	s15, [r3, #4]
 801094a:	e117      	b.n	8010b7c <setSVM_dq+0x5f0>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 801094c:	4ba0      	ldr	r3, [pc, #640]	; (8010bd0 <setSVM_dq+0x644>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	4618      	mov	r0, r3
 8010952:	f7f7 fd29 	bl	80083a8 <__aeabi_f2d>
 8010956:	4603      	mov	r3, r0
 8010958:	460c      	mov	r4, r1
 801095a:	461a      	mov	r2, r3
 801095c:	4623      	mov	r3, r4
 801095e:	f04f 0000 	mov.w	r0, #0
 8010962:	499c      	ldr	r1, [pc, #624]	; (8010bd4 <setSVM_dq+0x648>)
 8010964:	f7f7 fbc0 	bl	80080e8 <__aeabi_dsub>
 8010968:	4603      	mov	r3, r0
 801096a:	460c      	mov	r4, r1
 801096c:	4625      	mov	r5, r4
 801096e:	461c      	mov	r4, r3
 8010970:	4b99      	ldr	r3, [pc, #612]	; (8010bd8 <setSVM_dq+0x64c>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4618      	mov	r0, r3
 8010976:	f7f7 fd17 	bl	80083a8 <__aeabi_f2d>
 801097a:	4602      	mov	r2, r0
 801097c:	460b      	mov	r3, r1
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	f7f7 fbb1 	bl	80080e8 <__aeabi_dsub>
 8010986:	4603      	mov	r3, r0
 8010988:	460c      	mov	r4, r1
 801098a:	4618      	mov	r0, r3
 801098c:	4621      	mov	r1, r4
 801098e:	f04f 0200 	mov.w	r2, #0
 8010992:	4b92      	ldr	r3, [pc, #584]	; (8010bdc <setSVM_dq+0x650>)
 8010994:	f7f7 fd60 	bl	8008458 <__aeabi_dmul>
 8010998:	4603      	mov	r3, r0
 801099a:	460c      	mov	r4, r1
 801099c:	4618      	mov	r0, r3
 801099e:	4621      	mov	r1, r4
 80109a0:	f7f7 fff4 	bl	800898c <__aeabi_d2f>
 80109a4:	4602      	mov	r2, r0
 80109a6:	4b8e      	ldr	r3, [pc, #568]	; (8010be0 <setSVM_dq+0x654>)
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	4b8d      	ldr	r3, [pc, #564]	; (8010be0 <setSVM_dq+0x654>)
 80109ac:	ed93 7a00 	vldr	s14, [r3]
 80109b0:	4b89      	ldr	r3, [pc, #548]	; (8010bd8 <setSVM_dq+0x64c>)
 80109b2:	edd3 7a00 	vldr	s15, [r3]
 80109b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109ba:	4b89      	ldr	r3, [pc, #548]	; (8010be0 <setSVM_dq+0x654>)
 80109bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80109c0:	4b87      	ldr	r3, [pc, #540]	; (8010be0 <setSVM_dq+0x654>)
 80109c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80109c6:	4b82      	ldr	r3, [pc, #520]	; (8010bd0 <setSVM_dq+0x644>)
 80109c8:	edd3 7a00 	vldr	s15, [r3]
 80109cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109d0:	4b83      	ldr	r3, [pc, #524]	; (8010be0 <setSVM_dq+0x654>)
 80109d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80109d6:	e0d1      	b.n	8010b7c <setSVM_dq+0x5f0>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 80109d8:	4b7d      	ldr	r3, [pc, #500]	; (8010bd0 <setSVM_dq+0x644>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4618      	mov	r0, r3
 80109de:	f7f7 fce3 	bl	80083a8 <__aeabi_f2d>
 80109e2:	4603      	mov	r3, r0
 80109e4:	460c      	mov	r4, r1
 80109e6:	461a      	mov	r2, r3
 80109e8:	4623      	mov	r3, r4
 80109ea:	f04f 0000 	mov.w	r0, #0
 80109ee:	4979      	ldr	r1, [pc, #484]	; (8010bd4 <setSVM_dq+0x648>)
 80109f0:	f7f7 fb7a 	bl	80080e8 <__aeabi_dsub>
 80109f4:	4603      	mov	r3, r0
 80109f6:	460c      	mov	r4, r1
 80109f8:	4625      	mov	r5, r4
 80109fa:	461c      	mov	r4, r3
 80109fc:	4b76      	ldr	r3, [pc, #472]	; (8010bd8 <setSVM_dq+0x64c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7f7 fcd1 	bl	80083a8 <__aeabi_f2d>
 8010a06:	4602      	mov	r2, r0
 8010a08:	460b      	mov	r3, r1
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	4629      	mov	r1, r5
 8010a0e:	f7f7 fb6b 	bl	80080e8 <__aeabi_dsub>
 8010a12:	4603      	mov	r3, r0
 8010a14:	460c      	mov	r4, r1
 8010a16:	4618      	mov	r0, r3
 8010a18:	4621      	mov	r1, r4
 8010a1a:	f04f 0200 	mov.w	r2, #0
 8010a1e:	4b6f      	ldr	r3, [pc, #444]	; (8010bdc <setSVM_dq+0x650>)
 8010a20:	f7f7 fd1a 	bl	8008458 <__aeabi_dmul>
 8010a24:	4603      	mov	r3, r0
 8010a26:	460c      	mov	r4, r1
 8010a28:	4618      	mov	r0, r3
 8010a2a:	4621      	mov	r1, r4
 8010a2c:	f7f7 ffae 	bl	800898c <__aeabi_d2f>
 8010a30:	4602      	mov	r2, r0
 8010a32:	4b6b      	ldr	r3, [pc, #428]	; (8010be0 <setSVM_dq+0x654>)
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	4b6a      	ldr	r3, [pc, #424]	; (8010be0 <setSVM_dq+0x654>)
 8010a38:	ed93 7a00 	vldr	s14, [r3]
 8010a3c:	4b64      	ldr	r3, [pc, #400]	; (8010bd0 <setSVM_dq+0x644>)
 8010a3e:	edd3 7a00 	vldr	s15, [r3]
 8010a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a46:	4b66      	ldr	r3, [pc, #408]	; (8010be0 <setSVM_dq+0x654>)
 8010a48:	edc3 7a01 	vstr	s15, [r3, #4]
 8010a4c:	4b64      	ldr	r3, [pc, #400]	; (8010be0 <setSVM_dq+0x654>)
 8010a4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010a52:	4b61      	ldr	r3, [pc, #388]	; (8010bd8 <setSVM_dq+0x64c>)
 8010a54:	edd3 7a00 	vldr	s15, [r3]
 8010a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a5c:	4b60      	ldr	r3, [pc, #384]	; (8010be0 <setSVM_dq+0x654>)
 8010a5e:	edc3 7a02 	vstr	s15, [r3, #8]
 8010a62:	e08b      	b.n	8010b7c <setSVM_dq+0x5f0>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8010a64:	4b5a      	ldr	r3, [pc, #360]	; (8010bd0 <setSVM_dq+0x644>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7f7 fc9d 	bl	80083a8 <__aeabi_f2d>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	460c      	mov	r4, r1
 8010a72:	461a      	mov	r2, r3
 8010a74:	4623      	mov	r3, r4
 8010a76:	f04f 0000 	mov.w	r0, #0
 8010a7a:	4956      	ldr	r1, [pc, #344]	; (8010bd4 <setSVM_dq+0x648>)
 8010a7c:	f7f7 fb34 	bl	80080e8 <__aeabi_dsub>
 8010a80:	4603      	mov	r3, r0
 8010a82:	460c      	mov	r4, r1
 8010a84:	4625      	mov	r5, r4
 8010a86:	461c      	mov	r4, r3
 8010a88:	4b53      	ldr	r3, [pc, #332]	; (8010bd8 <setSVM_dq+0x64c>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7f7 fc8b 	bl	80083a8 <__aeabi_f2d>
 8010a92:	4602      	mov	r2, r0
 8010a94:	460b      	mov	r3, r1
 8010a96:	4620      	mov	r0, r4
 8010a98:	4629      	mov	r1, r5
 8010a9a:	f7f7 fb25 	bl	80080e8 <__aeabi_dsub>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	4621      	mov	r1, r4
 8010aa6:	f04f 0200 	mov.w	r2, #0
 8010aaa:	4b4c      	ldr	r3, [pc, #304]	; (8010bdc <setSVM_dq+0x650>)
 8010aac:	f7f7 fcd4 	bl	8008458 <__aeabi_dmul>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	4621      	mov	r1, r4
 8010ab8:	f7f7 ff68 	bl	800898c <__aeabi_d2f>
 8010abc:	4602      	mov	r2, r0
 8010abe:	4b48      	ldr	r3, [pc, #288]	; (8010be0 <setSVM_dq+0x654>)
 8010ac0:	605a      	str	r2, [r3, #4]
 8010ac2:	4b47      	ldr	r3, [pc, #284]	; (8010be0 <setSVM_dq+0x654>)
 8010ac4:	ed93 7a01 	vldr	s14, [r3, #4]
 8010ac8:	4b43      	ldr	r3, [pc, #268]	; (8010bd8 <setSVM_dq+0x64c>)
 8010aca:	edd3 7a00 	vldr	s15, [r3]
 8010ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ad2:	4b43      	ldr	r3, [pc, #268]	; (8010be0 <setSVM_dq+0x654>)
 8010ad4:	edc3 7a00 	vstr	s15, [r3]
 8010ad8:	4b41      	ldr	r3, [pc, #260]	; (8010be0 <setSVM_dq+0x654>)
 8010ada:	ed93 7a00 	vldr	s14, [r3]
 8010ade:	4b3c      	ldr	r3, [pc, #240]	; (8010bd0 <setSVM_dq+0x644>)
 8010ae0:	edd3 7a00 	vldr	s15, [r3]
 8010ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ae8:	4b3d      	ldr	r3, [pc, #244]	; (8010be0 <setSVM_dq+0x654>)
 8010aea:	edc3 7a02 	vstr	s15, [r3, #8]
 8010aee:	e045      	b.n	8010b7c <setSVM_dq+0x5f0>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8010af0:	4b37      	ldr	r3, [pc, #220]	; (8010bd0 <setSVM_dq+0x644>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7f7 fc57 	bl	80083a8 <__aeabi_f2d>
 8010afa:	4603      	mov	r3, r0
 8010afc:	460c      	mov	r4, r1
 8010afe:	461a      	mov	r2, r3
 8010b00:	4623      	mov	r3, r4
 8010b02:	f04f 0000 	mov.w	r0, #0
 8010b06:	4933      	ldr	r1, [pc, #204]	; (8010bd4 <setSVM_dq+0x648>)
 8010b08:	f7f7 faee 	bl	80080e8 <__aeabi_dsub>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	460c      	mov	r4, r1
 8010b10:	4625      	mov	r5, r4
 8010b12:	461c      	mov	r4, r3
 8010b14:	4b30      	ldr	r3, [pc, #192]	; (8010bd8 <setSVM_dq+0x64c>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7f7 fc45 	bl	80083a8 <__aeabi_f2d>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	4620      	mov	r0, r4
 8010b24:	4629      	mov	r1, r5
 8010b26:	f7f7 fadf 	bl	80080e8 <__aeabi_dsub>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	460c      	mov	r4, r1
 8010b2e:	4618      	mov	r0, r3
 8010b30:	4621      	mov	r1, r4
 8010b32:	f04f 0200 	mov.w	r2, #0
 8010b36:	4b29      	ldr	r3, [pc, #164]	; (8010bdc <setSVM_dq+0x650>)
 8010b38:	f7f7 fc8e 	bl	8008458 <__aeabi_dmul>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	460c      	mov	r4, r1
 8010b40:	4618      	mov	r0, r3
 8010b42:	4621      	mov	r1, r4
 8010b44:	f7f7 ff22 	bl	800898c <__aeabi_d2f>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	4b25      	ldr	r3, [pc, #148]	; (8010be0 <setSVM_dq+0x654>)
 8010b4c:	605a      	str	r2, [r3, #4]
 8010b4e:	4b24      	ldr	r3, [pc, #144]	; (8010be0 <setSVM_dq+0x654>)
 8010b50:	ed93 7a01 	vldr	s14, [r3, #4]
 8010b54:	4b1e      	ldr	r3, [pc, #120]	; (8010bd0 <setSVM_dq+0x644>)
 8010b56:	edd3 7a00 	vldr	s15, [r3]
 8010b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b5e:	4b20      	ldr	r3, [pc, #128]	; (8010be0 <setSVM_dq+0x654>)
 8010b60:	edc3 7a02 	vstr	s15, [r3, #8]
 8010b64:	4b1e      	ldr	r3, [pc, #120]	; (8010be0 <setSVM_dq+0x654>)
 8010b66:	ed93 7a02 	vldr	s14, [r3, #8]
 8010b6a:	4b1b      	ldr	r3, [pc, #108]	; (8010bd8 <setSVM_dq+0x64c>)
 8010b6c:	edd3 7a00 	vldr	s15, [r3]
 8010b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b74:	4b1a      	ldr	r3, [pc, #104]	; (8010be0 <setSVM_dq+0x654>)
 8010b76:	edc3 7a00 	vstr	s15, [r3]
 8010b7a:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8010b7c:	4b18      	ldr	r3, [pc, #96]	; (8010be0 <setSVM_dq+0x654>)
 8010b7e:	edd3 7a00 	vldr	s15, [r3]
 8010b82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8e:	d503      	bpl.n	8010b98 <setSVM_dq+0x60c>
 8010b90:	4b13      	ldr	r3, [pc, #76]	; (8010be0 <setSVM_dq+0x654>)
 8010b92:	4a14      	ldr	r2, [pc, #80]	; (8010be4 <setSVM_dq+0x658>)
 8010b94:	601a      	str	r2, [r3, #0]
 8010b96:	e00d      	b.n	8010bb4 <setSVM_dq+0x628>
 8010b98:	4b11      	ldr	r3, [pc, #68]	; (8010be0 <setSVM_dq+0x654>)
 8010b9a:	edd3 7a00 	vldr	s15, [r3]
 8010b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010baa:	dd03      	ble.n	8010bb4 <setSVM_dq+0x628>
 8010bac:	4b0c      	ldr	r3, [pc, #48]	; (8010be0 <setSVM_dq+0x654>)
 8010bae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010bb2:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8010bb4:	4b0a      	ldr	r3, [pc, #40]	; (8010be0 <setSVM_dq+0x654>)
 8010bb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8010bba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc6:	d50f      	bpl.n	8010be8 <setSVM_dq+0x65c>
 8010bc8:	4b05      	ldr	r3, [pc, #20]	; (8010be0 <setSVM_dq+0x654>)
 8010bca:	4a06      	ldr	r2, [pc, #24]	; (8010be4 <setSVM_dq+0x658>)
 8010bcc:	605a      	str	r2, [r3, #4]
 8010bce:	e019      	b.n	8010c04 <setSVM_dq+0x678>
 8010bd0:	20004108 	.word	0x20004108
 8010bd4:	3ff00000 	.word	0x3ff00000
 8010bd8:	2000410c 	.word	0x2000410c
 8010bdc:	3fe00000 	.word	0x3fe00000
 8010be0:	20004110 	.word	0x20004110
 8010be4:	bf800000 	.word	0xbf800000
 8010be8:	4b3c      	ldr	r3, [pc, #240]	; (8010cdc <setSVM_dq+0x750>)
 8010bea:	edd3 7a01 	vldr	s15, [r3, #4]
 8010bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfa:	dd03      	ble.n	8010c04 <setSVM_dq+0x678>
 8010bfc:	4b37      	ldr	r3, [pc, #220]	; (8010cdc <setSVM_dq+0x750>)
 8010bfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010c02:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8010c04:	4b35      	ldr	r3, [pc, #212]	; (8010cdc <setSVM_dq+0x750>)
 8010c06:	edd3 7a02 	vldr	s15, [r3, #8]
 8010c0a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c16:	d503      	bpl.n	8010c20 <setSVM_dq+0x694>
 8010c18:	4b30      	ldr	r3, [pc, #192]	; (8010cdc <setSVM_dq+0x750>)
 8010c1a:	4a31      	ldr	r2, [pc, #196]	; (8010ce0 <setSVM_dq+0x754>)
 8010c1c:	609a      	str	r2, [r3, #8]
 8010c1e:	e00d      	b.n	8010c3c <setSVM_dq+0x6b0>
 8010c20:	4b2e      	ldr	r3, [pc, #184]	; (8010cdc <setSVM_dq+0x750>)
 8010c22:	edd3 7a02 	vldr	s15, [r3, #8]
 8010c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c32:	dd03      	ble.n	8010c3c <setSVM_dq+0x6b0>
 8010c34:	4b29      	ldr	r3, [pc, #164]	; (8010cdc <setSVM_dq+0x750>)
 8010c36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010c3a:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, htim->Init.Period * (1.0f - (amp_u = duty[0])));
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	ee07 3a90 	vmov	s15, r3
 8010c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010c48:	4b24      	ldr	r3, [pc, #144]	; (8010cdc <setSVM_dq+0x750>)
 8010c4a:	edd3 7a00 	vldr	s15, [r3]
 8010c4e:	4b25      	ldr	r3, [pc, #148]	; (8010ce4 <setSVM_dq+0x758>)
 8010c50:	edc3 7a00 	vstr	s15, [r3]
 8010c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c68:	ee17 2a90 	vmov	r2, s15
 8010c6c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, htim->Init.Period * (1.0f - (amp_v = duty[1])));
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	ee07 3a90 	vmov	s15, r3
 8010c76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010c7a:	4b18      	ldr	r3, [pc, #96]	; (8010cdc <setSVM_dq+0x750>)
 8010c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010c80:	4b19      	ldr	r3, [pc, #100]	; (8010ce8 <setSVM_dq+0x75c>)
 8010c82:	edc3 7a00 	vstr	s15, [r3]
 8010c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c9a:	ee17 2a90 	vmov	r2, s15
 8010c9e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, htim->Init.Period * (1.0f - (amp_w = duty[2])));
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	ee07 3a90 	vmov	s15, r3
 8010ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010cac:	4b0b      	ldr	r3, [pc, #44]	; (8010cdc <setSVM_dq+0x750>)
 8010cae:	edd3 7a02 	vldr	s15, [r3, #8]
 8010cb2:	4b0e      	ldr	r3, [pc, #56]	; (8010cec <setSVM_dq+0x760>)
 8010cb4:	edc3 7a00 	vstr	s15, [r3]
 8010cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ccc:	ee17 2a90 	vmov	r2, s15
 8010cd0:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 8010cd2:	bf00      	nop
}
 8010cd4:	3718      	adds	r7, #24
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	20004110 	.word	0x20004110
 8010ce0:	bf800000 	.word	0xbf800000
 8010ce4:	200040d8 	.word	0x200040d8
 8010ce8:	200040dc 	.word	0x200040dc
 8010cec:	200040e0 	.word	0x200040e0

08010cf0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8010cf4:	4b18      	ldr	r3, [pc, #96]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010cf6:	4a19      	ldr	r2, [pc, #100]	; (8010d5c <MX_SPI2_Init+0x6c>)
 8010cf8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8010cfa:	4b17      	ldr	r3, [pc, #92]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010d00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010d02:	4b15      	ldr	r3, [pc, #84]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d04:	2200      	movs	r2, #0
 8010d06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8010d08:	4b13      	ldr	r3, [pc, #76]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d0e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010d10:	4b11      	ldr	r3, [pc, #68]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8010d16:	4b10      	ldr	r3, [pc, #64]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d18:	2201      	movs	r2, #1
 8010d1a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010d1c:	4b0e      	ldr	r3, [pc, #56]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d22:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010d24:	4b0c      	ldr	r3, [pc, #48]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d26:	2218      	movs	r2, #24
 8010d28:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010d2a:	4b0b      	ldr	r3, [pc, #44]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010d30:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010d36:	4b08      	ldr	r3, [pc, #32]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8010d3c:	4b06      	ldr	r3, [pc, #24]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d3e:	220a      	movs	r2, #10
 8010d40:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010d42:	4805      	ldr	r0, [pc, #20]	; (8010d58 <MX_SPI2_Init+0x68>)
 8010d44:	f7fb f850 	bl	800bde8 <HAL_SPI_Init>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8010d4e:	f7ff fbbb 	bl	80104c8 <Error_Handler>
  }

}
 8010d52:	bf00      	nop
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	20004534 	.word	0x20004534
 8010d5c:	40003800 	.word	0x40003800

08010d60 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8010d64:	4b17      	ldr	r3, [pc, #92]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d66:	4a18      	ldr	r2, [pc, #96]	; (8010dc8 <MX_SPI3_Init+0x68>)
 8010d68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8010d6a:	4b16      	ldr	r3, [pc, #88]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010d70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8010d72:	4b14      	ldr	r3, [pc, #80]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8010d78:	4b12      	ldr	r3, [pc, #72]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010d7e:	4b11      	ldr	r3, [pc, #68]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d80:	2200      	movs	r2, #0
 8010d82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010d84:	4b0f      	ldr	r3, [pc, #60]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d86:	2200      	movs	r2, #0
 8010d88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8010d8a:	4b0e      	ldr	r3, [pc, #56]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010d90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010d92:	4b0c      	ldr	r3, [pc, #48]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010d98:	4b0a      	ldr	r3, [pc, #40]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8010d9e:	4b09      	ldr	r3, [pc, #36]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010da0:	2200      	movs	r2, #0
 8010da2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010da4:	4b07      	ldr	r3, [pc, #28]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010da6:	2200      	movs	r2, #0
 8010da8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8010daa:	4b06      	ldr	r3, [pc, #24]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010dac:	220a      	movs	r2, #10
 8010dae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8010db0:	4804      	ldr	r0, [pc, #16]	; (8010dc4 <MX_SPI3_Init+0x64>)
 8010db2:	f7fb f819 	bl	800bde8 <HAL_SPI_Init>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d001      	beq.n	8010dc0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8010dbc:	f7ff fb84 	bl	80104c8 <Error_Handler>
  }

}
 8010dc0:	bf00      	nop
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	2000458c 	.word	0x2000458c
 8010dc8:	40003c00 	.word	0x40003c00

08010dcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b08e      	sub	sp, #56	; 0x38
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010dd8:	2200      	movs	r2, #0
 8010dda:	601a      	str	r2, [r3, #0]
 8010ddc:	605a      	str	r2, [r3, #4]
 8010dde:	609a      	str	r2, [r3, #8]
 8010de0:	60da      	str	r2, [r3, #12]
 8010de2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a6c      	ldr	r2, [pc, #432]	; (8010f9c <HAL_SPI_MspInit+0x1d0>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d163      	bne.n	8010eb6 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010dee:	2300      	movs	r3, #0
 8010df0:	623b      	str	r3, [r7, #32]
 8010df2:	4b6b      	ldr	r3, [pc, #428]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010df6:	4a6a      	ldr	r2, [pc, #424]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8010dfe:	4b68      	ldr	r3, [pc, #416]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e06:	623b      	str	r3, [r7, #32]
 8010e08:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	61fb      	str	r3, [r7, #28]
 8010e0e:	4b64      	ldr	r3, [pc, #400]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e12:	4a63      	ldr	r2, [pc, #396]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010e14:	f043 0304 	orr.w	r3, r3, #4
 8010e18:	6313      	str	r3, [r2, #48]	; 0x30
 8010e1a:	4b61      	ldr	r3, [pc, #388]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e1e:	f003 0304 	and.w	r3, r3, #4
 8010e22:	61fb      	str	r3, [r7, #28]
 8010e24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010e26:	2300      	movs	r3, #0
 8010e28:	61bb      	str	r3, [r7, #24]
 8010e2a:	4b5d      	ldr	r3, [pc, #372]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e2e:	4a5c      	ldr	r2, [pc, #368]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010e30:	f043 0302 	orr.w	r3, r3, #2
 8010e34:	6313      	str	r3, [r2, #48]	; 0x30
 8010e36:	4b5a      	ldr	r3, [pc, #360]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e3a:	f003 0302 	and.w	r3, r3, #2
 8010e3e:	61bb      	str	r3, [r7, #24]
 8010e40:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010e42:	2302      	movs	r3, #2
 8010e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e46:	2302      	movs	r3, #2
 8010e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e4e:	2303      	movs	r3, #3
 8010e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8010e52:	2307      	movs	r3, #7
 8010e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	4851      	ldr	r0, [pc, #324]	; (8010fa4 <HAL_SPI_MspInit+0x1d8>)
 8010e5e:	f7fa f8ef 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010e62:	2304      	movs	r3, #4
 8010e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e66:	2302      	movs	r3, #2
 8010e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e6e:	2303      	movs	r3, #3
 8010e70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010e72:	2305      	movs	r3, #5
 8010e74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	4849      	ldr	r0, [pc, #292]	; (8010fa4 <HAL_SPI_MspInit+0x1d8>)
 8010e7e:	f7fa f8df 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e88:	2302      	movs	r3, #2
 8010e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e90:	2303      	movs	r3, #3
 8010e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010e94:	2305      	movs	r3, #5
 8010e96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	4842      	ldr	r0, [pc, #264]	; (8010fa8 <HAL_SPI_MspInit+0x1dc>)
 8010ea0:	f7fa f8ce 	bl	800b040 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	2024      	movs	r0, #36	; 0x24
 8010eaa:	f7f9 fa16 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010eae:	2024      	movs	r0, #36	; 0x24
 8010eb0:	f7f9 fa2f 	bl	800a312 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8010eb4:	e06e      	b.n	8010f94 <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a3c      	ldr	r2, [pc, #240]	; (8010fac <HAL_SPI_MspInit+0x1e0>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d169      	bne.n	8010f94 <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	617b      	str	r3, [r7, #20]
 8010ec4:	4b36      	ldr	r3, [pc, #216]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec8:	4a35      	ldr	r2, [pc, #212]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ece:	6413      	str	r3, [r2, #64]	; 0x40
 8010ed0:	4b33      	ldr	r3, [pc, #204]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ed8:	617b      	str	r3, [r7, #20]
 8010eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010edc:	2300      	movs	r3, #0
 8010ede:	613b      	str	r3, [r7, #16]
 8010ee0:	4b2f      	ldr	r3, [pc, #188]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ee4:	4a2e      	ldr	r2, [pc, #184]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010ee6:	f043 0302 	orr.w	r3, r3, #2
 8010eea:	6313      	str	r3, [r2, #48]	; 0x30
 8010eec:	4b2c      	ldr	r3, [pc, #176]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ef0:	f003 0302 	and.w	r3, r3, #2
 8010ef4:	613b      	str	r3, [r7, #16]
 8010ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ef8:	2300      	movs	r3, #0
 8010efa:	60fb      	str	r3, [r7, #12]
 8010efc:	4b28      	ldr	r3, [pc, #160]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f00:	4a27      	ldr	r2, [pc, #156]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010f02:	f043 0301 	orr.w	r3, r3, #1
 8010f06:	6313      	str	r3, [r2, #48]	; 0x30
 8010f08:	4b25      	ldr	r3, [pc, #148]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f0c:	f003 0301 	and.w	r3, r3, #1
 8010f10:	60fb      	str	r3, [r7, #12]
 8010f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010f14:	2300      	movs	r3, #0
 8010f16:	60bb      	str	r3, [r7, #8]
 8010f18:	4b21      	ldr	r3, [pc, #132]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f1c:	4a20      	ldr	r2, [pc, #128]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010f1e:	f043 0304 	orr.w	r3, r3, #4
 8010f22:	6313      	str	r3, [r2, #48]	; 0x30
 8010f24:	4b1e      	ldr	r3, [pc, #120]	; (8010fa0 <HAL_SPI_MspInit+0x1d4>)
 8010f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f28:	f003 0304 	and.w	r3, r3, #4
 8010f2c:	60bb      	str	r3, [r7, #8]
 8010f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010f30:	2304      	movs	r3, #4
 8010f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f34:	2302      	movs	r3, #2
 8010f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f3c:	2303      	movs	r3, #3
 8010f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8010f40:	2307      	movs	r3, #7
 8010f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f48:	4619      	mov	r1, r3
 8010f4a:	4817      	ldr	r0, [pc, #92]	; (8010fa8 <HAL_SPI_MspInit+0x1dc>)
 8010f4c:	f7fa f878 	bl	800b040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8010f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f56:	2302      	movs	r3, #2
 8010f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f5e:	2303      	movs	r3, #3
 8010f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010f62:	2306      	movs	r3, #6
 8010f64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	4810      	ldr	r0, [pc, #64]	; (8010fb0 <HAL_SPI_MspInit+0x1e4>)
 8010f6e:	f7fa f867 	bl	800b040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8010f72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f78:	2302      	movs	r3, #2
 8010f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f80:	2303      	movs	r3, #3
 8010f82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010f84:	2306      	movs	r3, #6
 8010f86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	4805      	ldr	r0, [pc, #20]	; (8010fa4 <HAL_SPI_MspInit+0x1d8>)
 8010f90:	f7fa f856 	bl	800b040 <HAL_GPIO_Init>
}
 8010f94:	bf00      	nop
 8010f96:	3738      	adds	r7, #56	; 0x38
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	40003800 	.word	0x40003800
 8010fa0:	40023800 	.word	0x40023800
 8010fa4:	40020800 	.word	0x40020800
 8010fa8:	40020400 	.word	0x40020400
 8010fac:	40003c00 	.word	0x40003c00
 8010fb0:	40020000 	.word	0x40020000

08010fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010fba:	2300      	movs	r3, #0
 8010fbc:	607b      	str	r3, [r7, #4]
 8010fbe:	4b10      	ldr	r3, [pc, #64]	; (8011000 <HAL_MspInit+0x4c>)
 8010fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fc2:	4a0f      	ldr	r2, [pc, #60]	; (8011000 <HAL_MspInit+0x4c>)
 8010fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8010fca:	4b0d      	ldr	r3, [pc, #52]	; (8011000 <HAL_MspInit+0x4c>)
 8010fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fd2:	607b      	str	r3, [r7, #4]
 8010fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	603b      	str	r3, [r7, #0]
 8010fda:	4b09      	ldr	r3, [pc, #36]	; (8011000 <HAL_MspInit+0x4c>)
 8010fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fde:	4a08      	ldr	r2, [pc, #32]	; (8011000 <HAL_MspInit+0x4c>)
 8010fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8010fe6:	4b06      	ldr	r3, [pc, #24]	; (8011000 <HAL_MspInit+0x4c>)
 8010fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fee:	603b      	str	r3, [r7, #0]
 8010ff0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8010ff2:	2007      	movs	r0, #7
 8010ff4:	f7f9 f966 	bl	800a2c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010ff8:	bf00      	nop
 8010ffa:	3708      	adds	r7, #8
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	40023800 	.word	0x40023800

08011004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011004:	b480      	push	{r7}
 8011006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011008:	bf00      	nop
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr

08011012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011012:	b480      	push	{r7}
 8011014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011016:	e7fe      	b.n	8011016 <HardFault_Handler+0x4>

08011018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011018:	b480      	push	{r7}
 801101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801101c:	e7fe      	b.n	801101c <MemManage_Handler+0x4>

0801101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801101e:	b480      	push	{r7}
 8011020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011022:	e7fe      	b.n	8011022 <BusFault_Handler+0x4>

08011024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011024:	b480      	push	{r7}
 8011026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011028:	e7fe      	b.n	8011028 <UsageFault_Handler+0x4>

0801102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801102a:	b480      	push	{r7}
 801102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801102e:	bf00      	nop
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011038:	b480      	push	{r7}
 801103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801103c:	bf00      	nop
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr

08011046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011046:	b480      	push	{r7}
 8011048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801104a:	bf00      	nop
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	4770      	bx	lr

08011054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011058:	f7f7 feba 	bl	8008dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801105c:	bf00      	nop
 801105e:	bd80      	pop	{r7, pc}

08011060 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011064:	4802      	ldr	r0, [pc, #8]	; (8011070 <CAN1_TX_IRQHandler+0x10>)
 8011066:	f7f8 fe52 	bl	8009d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 801106a:	bf00      	nop
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	200044b8 	.word	0x200044b8

08011074 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011078:	4802      	ldr	r0, [pc, #8]	; (8011084 <CAN1_RX0_IRQHandler+0x10>)
 801107a:	f7f8 fe48 	bl	8009d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 801107e:	bf00      	nop
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	200044b8 	.word	0x200044b8

08011088 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 801108c:	4802      	ldr	r0, [pc, #8]	; (8011098 <SPI2_IRQHandler+0x10>)
 801108e:	f7fa ffa3 	bl	800bfd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8011092:	bf00      	nop
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	20004534 	.word	0x20004534

0801109c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80110a0:	4802      	ldr	r0, [pc, #8]	; (80110ac <USART2_IRQHandler+0x10>)
 80110a2:	f7fc fbf7 	bl	800d894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80110a6:	bf00      	nop
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	20004624 	.word	0x20004624

080110b0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80110b4:	4802      	ldr	r0, [pc, #8]	; (80110c0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80110b6:	f7fb fc21 	bl	800c8fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80110ba:	bf00      	nop
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	200045e4 	.word	0x200045e4

080110c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80110c8:	4802      	ldr	r0, [pc, #8]	; (80110d4 <DMA2_Stream0_IRQHandler+0x10>)
 80110ca:	f7f9 fa6d 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80110ce:	bf00      	nop
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	200043ac 	.word	0x200043ac

080110d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80110dc:	4802      	ldr	r0, [pc, #8]	; (80110e8 <DMA2_Stream1_IRQHandler+0x10>)
 80110de:	f7f9 fa63 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80110e2:	bf00      	nop
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	200042bc 	.word	0x200042bc

080110ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80110f0:	4802      	ldr	r0, [pc, #8]	; (80110fc <DMA2_Stream2_IRQHandler+0x10>)
 80110f2:	f7f9 fa59 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80110f6:	bf00      	nop
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	2000440c 	.word	0x2000440c

08011100 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b086      	sub	sp, #24
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801110c:	2300      	movs	r3, #0
 801110e:	617b      	str	r3, [r7, #20]
 8011110:	e00a      	b.n	8011128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011112:	f3af 8000 	nop.w
 8011116:	4601      	mov	r1, r0
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	1c5a      	adds	r2, r3, #1
 801111c:	60ba      	str	r2, [r7, #8]
 801111e:	b2ca      	uxtb	r2, r1
 8011120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	3301      	adds	r3, #1
 8011126:	617b      	str	r3, [r7, #20]
 8011128:	697a      	ldr	r2, [r7, #20]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	429a      	cmp	r2, r3
 801112e:	dbf0      	blt.n	8011112 <_read+0x12>
	}

return len;
 8011130:	687b      	ldr	r3, [r7, #4]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3718      	adds	r7, #24
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <_close>:
	}
	return len;
}

int _close(int file)
{
 801113a:	b480      	push	{r7}
 801113c:	b083      	sub	sp, #12
 801113e:	af00      	add	r7, sp, #0
 8011140:	6078      	str	r0, [r7, #4]
	return -1;
 8011142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011146:	4618      	mov	r0, r3
 8011148:	370c      	adds	r7, #12
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011152:	b480      	push	{r7}
 8011154:	b083      	sub	sp, #12
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
 801115a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011162:	605a      	str	r2, [r3, #4]
	return 0;
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	370c      	adds	r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr

08011172 <_isatty>:

int _isatty(int file)
{
 8011172:	b480      	push	{r7}
 8011174:	b083      	sub	sp, #12
 8011176:	af00      	add	r7, sp, #0
 8011178:	6078      	str	r0, [r7, #4]
	return 1;
 801117a:	2301      	movs	r3, #1
}
 801117c:	4618      	mov	r0, r3
 801117e:	370c      	adds	r7, #12
 8011180:	46bd      	mov	sp, r7
 8011182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011186:	4770      	bx	lr

08011188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011188:	b480      	push	{r7}
 801118a:	b085      	sub	sp, #20
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]
	return 0;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
	...

080111a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80111ac:	4b11      	ldr	r3, [pc, #68]	; (80111f4 <_sbrk+0x50>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d102      	bne.n	80111ba <_sbrk+0x16>
		heap_end = &end;
 80111b4:	4b0f      	ldr	r3, [pc, #60]	; (80111f4 <_sbrk+0x50>)
 80111b6:	4a10      	ldr	r2, [pc, #64]	; (80111f8 <_sbrk+0x54>)
 80111b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80111ba:	4b0e      	ldr	r3, [pc, #56]	; (80111f4 <_sbrk+0x50>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80111c0:	4b0c      	ldr	r3, [pc, #48]	; (80111f4 <_sbrk+0x50>)
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4413      	add	r3, r2
 80111c8:	466a      	mov	r2, sp
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d907      	bls.n	80111de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80111ce:	f000 fa49 	bl	8011664 <__errno>
 80111d2:	4602      	mov	r2, r0
 80111d4:	230c      	movs	r3, #12
 80111d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80111d8:	f04f 33ff 	mov.w	r3, #4294967295
 80111dc:	e006      	b.n	80111ec <_sbrk+0x48>
	}

	heap_end += incr;
 80111de:	4b05      	ldr	r3, [pc, #20]	; (80111f4 <_sbrk+0x50>)
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4413      	add	r3, r2
 80111e6:	4a03      	ldr	r2, [pc, #12]	; (80111f4 <_sbrk+0x50>)
 80111e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80111ea:	68fb      	ldr	r3, [r7, #12]
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	2000411c 	.word	0x2000411c
 80111f8:	20004668 	.word	0x20004668

080111fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80111fc:	b480      	push	{r7}
 80111fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011200:	4b16      	ldr	r3, [pc, #88]	; (801125c <SystemInit+0x60>)
 8011202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011206:	4a15      	ldr	r2, [pc, #84]	; (801125c <SystemInit+0x60>)
 8011208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011210:	4b13      	ldr	r3, [pc, #76]	; (8011260 <SystemInit+0x64>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	4a12      	ldr	r2, [pc, #72]	; (8011260 <SystemInit+0x64>)
 8011216:	f043 0301 	orr.w	r3, r3, #1
 801121a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801121c:	4b10      	ldr	r3, [pc, #64]	; (8011260 <SystemInit+0x64>)
 801121e:	2200      	movs	r2, #0
 8011220:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011222:	4b0f      	ldr	r3, [pc, #60]	; (8011260 <SystemInit+0x64>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4a0e      	ldr	r2, [pc, #56]	; (8011260 <SystemInit+0x64>)
 8011228:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 801122c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011230:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011232:	4b0b      	ldr	r3, [pc, #44]	; (8011260 <SystemInit+0x64>)
 8011234:	4a0b      	ldr	r2, [pc, #44]	; (8011264 <SystemInit+0x68>)
 8011236:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011238:	4b09      	ldr	r3, [pc, #36]	; (8011260 <SystemInit+0x64>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4a08      	ldr	r2, [pc, #32]	; (8011260 <SystemInit+0x64>)
 801123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011242:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011244:	4b06      	ldr	r3, [pc, #24]	; (8011260 <SystemInit+0x64>)
 8011246:	2200      	movs	r2, #0
 8011248:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801124a:	4b04      	ldr	r3, [pc, #16]	; (801125c <SystemInit+0x60>)
 801124c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011250:	609a      	str	r2, [r3, #8]
#endif
}
 8011252:	bf00      	nop
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	e000ed00 	.word	0xe000ed00
 8011260:	40023800 	.word	0x40023800
 8011264:	24003010 	.word	0x24003010

08011268 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b096      	sub	sp, #88	; 0x58
 801126c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801126e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011272:	2200      	movs	r2, #0
 8011274:	601a      	str	r2, [r3, #0]
 8011276:	605a      	str	r2, [r3, #4]
 8011278:	609a      	str	r2, [r3, #8]
 801127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801127c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011280:	2200      	movs	r2, #0
 8011282:	601a      	str	r2, [r3, #0]
 8011284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801128a:	2200      	movs	r2, #0
 801128c:	601a      	str	r2, [r3, #0]
 801128e:	605a      	str	r2, [r3, #4]
 8011290:	609a      	str	r2, [r3, #8]
 8011292:	60da      	str	r2, [r3, #12]
 8011294:	611a      	str	r2, [r3, #16]
 8011296:	615a      	str	r2, [r3, #20]
 8011298:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801129a:	1d3b      	adds	r3, r7, #4
 801129c:	2220      	movs	r2, #32
 801129e:	2100      	movs	r1, #0
 80112a0:	4618      	mov	r0, r3
 80112a2:	f000 fa14 	bl	80116ce <memset>

  htim8.Instance = TIM8;
 80112a6:	4b4a      	ldr	r3, [pc, #296]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112a8:	4a4a      	ldr	r2, [pc, #296]	; (80113d4 <MX_TIM8_Init+0x16c>)
 80112aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80112ac:	4b48      	ldr	r3, [pc, #288]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112ae:	2200      	movs	r2, #0
 80112b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80112b2:	4b47      	ldr	r3, [pc, #284]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112b4:	2220      	movs	r2, #32
 80112b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 80112b8:	4b45      	ldr	r3, [pc, #276]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80112be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80112c0:	4b43      	ldr	r3, [pc, #268]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80112c6:	4b42      	ldr	r3, [pc, #264]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80112cc:	4b40      	ldr	r3, [pc, #256]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112ce:	2200      	movs	r2, #0
 80112d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80112d2:	483f      	ldr	r0, [pc, #252]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112d4:	f7fb f994 	bl	800c600 <HAL_TIM_Base_Init>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80112de:	f7ff f8f3 	bl	80104c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80112e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80112e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112ec:	4619      	mov	r1, r3
 80112ee:	4838      	ldr	r0, [pc, #224]	; (80113d0 <MX_TIM8_Init+0x168>)
 80112f0:	f7fb fcf9 	bl	800cce6 <HAL_TIM_ConfigClockSource>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d001      	beq.n	80112fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80112fa:	f7ff f8e5 	bl	80104c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80112fe:	4834      	ldr	r0, [pc, #208]	; (80113d0 <MX_TIM8_Init+0x168>)
 8011300:	f7fb f9a9 	bl	800c656 <HAL_TIM_PWM_Init>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	d001      	beq.n	801130e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 801130a:	f7ff f8dd 	bl	80104c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801130e:	2320      	movs	r3, #32
 8011310:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011312:	2300      	movs	r3, #0
 8011314:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8011316:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801131a:	4619      	mov	r1, r3
 801131c:	482c      	ldr	r0, [pc, #176]	; (80113d0 <MX_TIM8_Init+0x168>)
 801131e:	f7fc f99b 	bl	800d658 <HAL_TIMEx_MasterConfigSynchronization>
 8011322:	4603      	mov	r3, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	d001      	beq.n	801132c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8011328:	f7ff f8ce 	bl	80104c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801132c:	2360      	movs	r3, #96	; 0x60
 801132e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8011330:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011334:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011336:	2300      	movs	r3, #0
 8011338:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801133a:	2300      	movs	r3, #0
 801133c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801133e:	2300      	movs	r3, #0
 8011340:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011342:	2300      	movs	r3, #0
 8011344:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8011346:	2300      	movs	r3, #0
 8011348:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801134e:	2200      	movs	r2, #0
 8011350:	4619      	mov	r1, r3
 8011352:	481f      	ldr	r0, [pc, #124]	; (80113d0 <MX_TIM8_Init+0x168>)
 8011354:	f7fb fbda 	bl	800cb0c <HAL_TIM_PWM_ConfigChannel>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 801135e:	f7ff f8b3 	bl	80104c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011366:	2204      	movs	r2, #4
 8011368:	4619      	mov	r1, r3
 801136a:	4819      	ldr	r0, [pc, #100]	; (80113d0 <MX_TIM8_Init+0x168>)
 801136c:	f7fb fbce 	bl	800cb0c <HAL_TIM_PWM_ConfigChannel>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8011376:	f7ff f8a7 	bl	80104c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801137e:	2208      	movs	r2, #8
 8011380:	4619      	mov	r1, r3
 8011382:	4813      	ldr	r0, [pc, #76]	; (80113d0 <MX_TIM8_Init+0x168>)
 8011384:	f7fb fbc2 	bl	800cb0c <HAL_TIM_PWM_ConfigChannel>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801138e:	f7ff f89b 	bl	80104c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011392:	2300      	movs	r3, #0
 8011394:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8011396:	2300      	movs	r3, #0
 8011398:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801139a:	2300      	movs	r3, #0
 801139c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801139e:	2300      	movs	r3, #0
 80113a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80113a2:	2300      	movs	r3, #0
 80113a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80113a6:	2300      	movs	r3, #0
 80113a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80113aa:	2300      	movs	r3, #0
 80113ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80113ae:	1d3b      	adds	r3, r7, #4
 80113b0:	4619      	mov	r1, r3
 80113b2:	4807      	ldr	r0, [pc, #28]	; (80113d0 <MX_TIM8_Init+0x168>)
 80113b4:	f7fc f995 	bl	800d6e2 <HAL_TIMEx_ConfigBreakDeadTime>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80113be:	f7ff f883 	bl	80104c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80113c2:	4803      	ldr	r0, [pc, #12]	; (80113d0 <MX_TIM8_Init+0x168>)
 80113c4:	f000 f830 	bl	8011428 <HAL_TIM_MspPostInit>

}
 80113c8:	bf00      	nop
 80113ca:	3758      	adds	r7, #88	; 0x58
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	200045e4 	.word	0x200045e4
 80113d4:	40010400 	.word	0x40010400

080113d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a0e      	ldr	r2, [pc, #56]	; (8011420 <HAL_TIM_Base_MspInit+0x48>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d115      	bne.n	8011416 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80113ea:	2300      	movs	r3, #0
 80113ec:	60fb      	str	r3, [r7, #12]
 80113ee:	4b0d      	ldr	r3, [pc, #52]	; (8011424 <HAL_TIM_Base_MspInit+0x4c>)
 80113f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113f2:	4a0c      	ldr	r2, [pc, #48]	; (8011424 <HAL_TIM_Base_MspInit+0x4c>)
 80113f4:	f043 0302 	orr.w	r3, r3, #2
 80113f8:	6453      	str	r3, [r2, #68]	; 0x44
 80113fa:	4b0a      	ldr	r3, [pc, #40]	; (8011424 <HAL_TIM_Base_MspInit+0x4c>)
 80113fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113fe:	f003 0302 	and.w	r3, r3, #2
 8011402:	60fb      	str	r3, [r7, #12]
 8011404:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8011406:	2200      	movs	r2, #0
 8011408:	2100      	movs	r1, #0
 801140a:	202c      	movs	r0, #44	; 0x2c
 801140c:	f7f8 ff65 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8011410:	202c      	movs	r0, #44	; 0x2c
 8011412:	f7f8 ff7e 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8011416:	bf00      	nop
 8011418:	3710      	adds	r7, #16
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	40010400 	.word	0x40010400
 8011424:	40023800 	.word	0x40023800

08011428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b08a      	sub	sp, #40	; 0x28
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011430:	f107 0314 	add.w	r3, r7, #20
 8011434:	2200      	movs	r2, #0
 8011436:	601a      	str	r2, [r3, #0]
 8011438:	605a      	str	r2, [r3, #4]
 801143a:	609a      	str	r2, [r3, #8]
 801143c:	60da      	str	r2, [r3, #12]
 801143e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a30      	ldr	r2, [pc, #192]	; (8011508 <HAL_TIM_MspPostInit+0xe0>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d15a      	bne.n	8011500 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801144a:	2300      	movs	r3, #0
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	4b2f      	ldr	r3, [pc, #188]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 8011450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011452:	4a2e      	ldr	r2, [pc, #184]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 8011454:	f043 0301 	orr.w	r3, r3, #1
 8011458:	6313      	str	r3, [r2, #48]	; 0x30
 801145a:	4b2c      	ldr	r3, [pc, #176]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 801145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	613b      	str	r3, [r7, #16]
 8011464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011466:	2300      	movs	r3, #0
 8011468:	60fb      	str	r3, [r7, #12]
 801146a:	4b28      	ldr	r3, [pc, #160]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 801146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801146e:	4a27      	ldr	r2, [pc, #156]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 8011470:	f043 0302 	orr.w	r3, r3, #2
 8011474:	6313      	str	r3, [r2, #48]	; 0x30
 8011476:	4b25      	ldr	r3, [pc, #148]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 8011478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801147a:	f003 0302 	and.w	r3, r3, #2
 801147e:	60fb      	str	r3, [r7, #12]
 8011480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011482:	2300      	movs	r3, #0
 8011484:	60bb      	str	r3, [r7, #8]
 8011486:	4b21      	ldr	r3, [pc, #132]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 8011488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801148a:	4a20      	ldr	r2, [pc, #128]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 801148c:	f043 0304 	orr.w	r3, r3, #4
 8011490:	6313      	str	r3, [r2, #48]	; 0x30
 8011492:	4b1e      	ldr	r3, [pc, #120]	; (801150c <HAL_TIM_MspPostInit+0xe4>)
 8011494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011496:	f003 0304 	and.w	r3, r3, #4
 801149a:	60bb      	str	r3, [r7, #8]
 801149c:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 801149e:	2380      	movs	r3, #128	; 0x80
 80114a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114a2:	2302      	movs	r3, #2
 80114a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114a6:	2300      	movs	r3, #0
 80114a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114aa:	2300      	movs	r3, #0
 80114ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80114ae:	2303      	movs	r3, #3
 80114b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80114b2:	f107 0314 	add.w	r3, r7, #20
 80114b6:	4619      	mov	r1, r3
 80114b8:	4815      	ldr	r0, [pc, #84]	; (8011510 <HAL_TIM_MspPostInit+0xe8>)
 80114ba:	f7f9 fdc1 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80114be:	2303      	movs	r3, #3
 80114c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114c2:	2302      	movs	r3, #2
 80114c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114c6:	2300      	movs	r3, #0
 80114c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114ca:	2300      	movs	r3, #0
 80114cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80114ce:	2303      	movs	r3, #3
 80114d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80114d2:	f107 0314 	add.w	r3, r7, #20
 80114d6:	4619      	mov	r1, r3
 80114d8:	480e      	ldr	r0, [pc, #56]	; (8011514 <HAL_TIM_MspPostInit+0xec>)
 80114da:	f7f9 fdb1 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80114de:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80114e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114e4:	2302      	movs	r3, #2
 80114e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114e8:	2300      	movs	r3, #0
 80114ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114ec:	2300      	movs	r3, #0
 80114ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80114f0:	2303      	movs	r3, #3
 80114f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80114f4:	f107 0314 	add.w	r3, r7, #20
 80114f8:	4619      	mov	r1, r3
 80114fa:	4807      	ldr	r0, [pc, #28]	; (8011518 <HAL_TIM_MspPostInit+0xf0>)
 80114fc:	f7f9 fda0 	bl	800b040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8011500:	bf00      	nop
 8011502:	3728      	adds	r7, #40	; 0x28
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	40010400 	.word	0x40010400
 801150c:	40023800 	.word	0x40023800
 8011510:	40020000 	.word	0x40020000
 8011514:	40020400 	.word	0x40020400
 8011518:	40020800 	.word	0x40020800

0801151c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8011520:	4b11      	ldr	r3, [pc, #68]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 8011522:	4a12      	ldr	r2, [pc, #72]	; (801156c <MX_USART2_UART_Init+0x50>)
 8011524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8011526:	4b10      	ldr	r3, [pc, #64]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 8011528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801152e:	4b0e      	ldr	r3, [pc, #56]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 8011530:	2200      	movs	r2, #0
 8011532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011534:	4b0c      	ldr	r3, [pc, #48]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 8011536:	2200      	movs	r2, #0
 8011538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801153a:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 801153c:	2200      	movs	r2, #0
 801153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011540:	4b09      	ldr	r3, [pc, #36]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 8011542:	220c      	movs	r2, #12
 8011544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011546:	4b08      	ldr	r3, [pc, #32]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 8011548:	2200      	movs	r2, #0
 801154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801154c:	4b06      	ldr	r3, [pc, #24]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 801154e:	2200      	movs	r2, #0
 8011550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011552:	4805      	ldr	r0, [pc, #20]	; (8011568 <MX_USART2_UART_Init+0x4c>)
 8011554:	f7fc f950 	bl	800d7f8 <HAL_UART_Init>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d001      	beq.n	8011562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801155e:	f7fe ffb3 	bl	80104c8 <Error_Handler>
  }

}
 8011562:	bf00      	nop
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	20004624 	.word	0x20004624
 801156c:	40004400 	.word	0x40004400

08011570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b08a      	sub	sp, #40	; 0x28
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011578:	f107 0314 	add.w	r3, r7, #20
 801157c:	2200      	movs	r2, #0
 801157e:	601a      	str	r2, [r3, #0]
 8011580:	605a      	str	r2, [r3, #4]
 8011582:	609a      	str	r2, [r3, #8]
 8011584:	60da      	str	r2, [r3, #12]
 8011586:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4a1d      	ldr	r2, [pc, #116]	; (8011604 <HAL_UART_MspInit+0x94>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d133      	bne.n	80115fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8011592:	2300      	movs	r3, #0
 8011594:	613b      	str	r3, [r7, #16]
 8011596:	4b1c      	ldr	r3, [pc, #112]	; (8011608 <HAL_UART_MspInit+0x98>)
 8011598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801159a:	4a1b      	ldr	r2, [pc, #108]	; (8011608 <HAL_UART_MspInit+0x98>)
 801159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80115a0:	6413      	str	r3, [r2, #64]	; 0x40
 80115a2:	4b19      	ldr	r3, [pc, #100]	; (8011608 <HAL_UART_MspInit+0x98>)
 80115a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115aa:	613b      	str	r3, [r7, #16]
 80115ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ae:	2300      	movs	r3, #0
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	4b15      	ldr	r3, [pc, #84]	; (8011608 <HAL_UART_MspInit+0x98>)
 80115b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b6:	4a14      	ldr	r2, [pc, #80]	; (8011608 <HAL_UART_MspInit+0x98>)
 80115b8:	f043 0301 	orr.w	r3, r3, #1
 80115bc:	6313      	str	r3, [r2, #48]	; 0x30
 80115be:	4b12      	ldr	r3, [pc, #72]	; (8011608 <HAL_UART_MspInit+0x98>)
 80115c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c2:	f003 0301 	and.w	r3, r3, #1
 80115c6:	60fb      	str	r3, [r7, #12]
 80115c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80115ca:	230c      	movs	r3, #12
 80115cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115ce:	2302      	movs	r3, #2
 80115d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80115d2:	2301      	movs	r3, #1
 80115d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115d6:	2303      	movs	r3, #3
 80115d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80115da:	2307      	movs	r3, #7
 80115dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115de:	f107 0314 	add.w	r3, r7, #20
 80115e2:	4619      	mov	r1, r3
 80115e4:	4809      	ldr	r0, [pc, #36]	; (801160c <HAL_UART_MspInit+0x9c>)
 80115e6:	f7f9 fd2b 	bl	800b040 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80115ea:	2200      	movs	r2, #0
 80115ec:	2100      	movs	r1, #0
 80115ee:	2026      	movs	r0, #38	; 0x26
 80115f0:	f7f8 fe73 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80115f4:	2026      	movs	r0, #38	; 0x26
 80115f6:	f7f8 fe8c 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80115fa:	bf00      	nop
 80115fc:	3728      	adds	r7, #40	; 0x28
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	40004400 	.word	0x40004400
 8011608:	40023800 	.word	0x40023800
 801160c:	40020000 	.word	0x40020000

08011610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011648 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011616:	e003      	b.n	8011620 <LoopCopyDataInit>

08011618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011618:	4b0c      	ldr	r3, [pc, #48]	; (801164c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801161a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801161c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801161e:	3104      	adds	r1, #4

08011620 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011620:	480b      	ldr	r0, [pc, #44]	; (8011650 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011622:	4b0c      	ldr	r3, [pc, #48]	; (8011654 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011628:	d3f6      	bcc.n	8011618 <CopyDataInit>
  ldr  r2, =_sbss
 801162a:	4a0b      	ldr	r2, [pc, #44]	; (8011658 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801162c:	e002      	b.n	8011634 <LoopFillZerobss>

0801162e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801162e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011630:	f842 3b04 	str.w	r3, [r2], #4

08011634 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011634:	4b09      	ldr	r3, [pc, #36]	; (801165c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011638:	d3f9      	bcc.n	801162e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801163a:	f7ff fddf 	bl	80111fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801163e:	f000 f817 	bl	8011670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011642:	f7fe fd83 	bl	801014c <main>
  bx  lr    
 8011646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011648:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801164c:	080261d4 	.word	0x080261d4
  ldr  r0, =_sdata
 8011650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011654:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8011658:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 801165c:	20004668 	.word	0x20004668

08011660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011660:	e7fe      	b.n	8011660 <ADC_IRQHandler>
	...

08011664 <__errno>:
 8011664:	4b01      	ldr	r3, [pc, #4]	; (801166c <__errno+0x8>)
 8011666:	6818      	ldr	r0, [r3, #0]
 8011668:	4770      	bx	lr
 801166a:	bf00      	nop
 801166c:	20000010 	.word	0x20000010

08011670 <__libc_init_array>:
 8011670:	b570      	push	{r4, r5, r6, lr}
 8011672:	4e0d      	ldr	r6, [pc, #52]	; (80116a8 <__libc_init_array+0x38>)
 8011674:	4c0d      	ldr	r4, [pc, #52]	; (80116ac <__libc_init_array+0x3c>)
 8011676:	1ba4      	subs	r4, r4, r6
 8011678:	10a4      	asrs	r4, r4, #2
 801167a:	2500      	movs	r5, #0
 801167c:	42a5      	cmp	r5, r4
 801167e:	d109      	bne.n	8011694 <__libc_init_array+0x24>
 8011680:	4e0b      	ldr	r6, [pc, #44]	; (80116b0 <__libc_init_array+0x40>)
 8011682:	4c0c      	ldr	r4, [pc, #48]	; (80116b4 <__libc_init_array+0x44>)
 8011684:	f001 f85a 	bl	801273c <_init>
 8011688:	1ba4      	subs	r4, r4, r6
 801168a:	10a4      	asrs	r4, r4, #2
 801168c:	2500      	movs	r5, #0
 801168e:	42a5      	cmp	r5, r4
 8011690:	d105      	bne.n	801169e <__libc_init_array+0x2e>
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011698:	4798      	blx	r3
 801169a:	3501      	adds	r5, #1
 801169c:	e7ee      	b.n	801167c <__libc_init_array+0xc>
 801169e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80116a2:	4798      	blx	r3
 80116a4:	3501      	adds	r5, #1
 80116a6:	e7f2      	b.n	801168e <__libc_init_array+0x1e>
 80116a8:	080261cc 	.word	0x080261cc
 80116ac:	080261cc 	.word	0x080261cc
 80116b0:	080261cc 	.word	0x080261cc
 80116b4:	080261d0 	.word	0x080261d0

080116b8 <memcpy>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	1e43      	subs	r3, r0, #1
 80116bc:	440a      	add	r2, r1
 80116be:	4291      	cmp	r1, r2
 80116c0:	d100      	bne.n	80116c4 <memcpy+0xc>
 80116c2:	bd10      	pop	{r4, pc}
 80116c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116cc:	e7f7      	b.n	80116be <memcpy+0x6>

080116ce <memset>:
 80116ce:	4402      	add	r2, r0
 80116d0:	4603      	mov	r3, r0
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d100      	bne.n	80116d8 <memset+0xa>
 80116d6:	4770      	bx	lr
 80116d8:	f803 1b01 	strb.w	r1, [r3], #1
 80116dc:	e7f9      	b.n	80116d2 <memset+0x4>
	...

080116e0 <iprintf>:
 80116e0:	b40f      	push	{r0, r1, r2, r3}
 80116e2:	4b0a      	ldr	r3, [pc, #40]	; (801170c <iprintf+0x2c>)
 80116e4:	b513      	push	{r0, r1, r4, lr}
 80116e6:	681c      	ldr	r4, [r3, #0]
 80116e8:	b124      	cbz	r4, 80116f4 <iprintf+0x14>
 80116ea:	69a3      	ldr	r3, [r4, #24]
 80116ec:	b913      	cbnz	r3, 80116f4 <iprintf+0x14>
 80116ee:	4620      	mov	r0, r4
 80116f0:	f000 fa22 	bl	8011b38 <__sinit>
 80116f4:	ab05      	add	r3, sp, #20
 80116f6:	9a04      	ldr	r2, [sp, #16]
 80116f8:	68a1      	ldr	r1, [r4, #8]
 80116fa:	9301      	str	r3, [sp, #4]
 80116fc:	4620      	mov	r0, r4
 80116fe:	f000 fbdb 	bl	8011eb8 <_vfiprintf_r>
 8011702:	b002      	add	sp, #8
 8011704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011708:	b004      	add	sp, #16
 801170a:	4770      	bx	lr
 801170c:	20000010 	.word	0x20000010

08011710 <_puts_r>:
 8011710:	b570      	push	{r4, r5, r6, lr}
 8011712:	460e      	mov	r6, r1
 8011714:	4605      	mov	r5, r0
 8011716:	b118      	cbz	r0, 8011720 <_puts_r+0x10>
 8011718:	6983      	ldr	r3, [r0, #24]
 801171a:	b90b      	cbnz	r3, 8011720 <_puts_r+0x10>
 801171c:	f000 fa0c 	bl	8011b38 <__sinit>
 8011720:	69ab      	ldr	r3, [r5, #24]
 8011722:	68ac      	ldr	r4, [r5, #8]
 8011724:	b913      	cbnz	r3, 801172c <_puts_r+0x1c>
 8011726:	4628      	mov	r0, r5
 8011728:	f000 fa06 	bl	8011b38 <__sinit>
 801172c:	4b23      	ldr	r3, [pc, #140]	; (80117bc <_puts_r+0xac>)
 801172e:	429c      	cmp	r4, r3
 8011730:	d117      	bne.n	8011762 <_puts_r+0x52>
 8011732:	686c      	ldr	r4, [r5, #4]
 8011734:	89a3      	ldrh	r3, [r4, #12]
 8011736:	071b      	lsls	r3, r3, #28
 8011738:	d51d      	bpl.n	8011776 <_puts_r+0x66>
 801173a:	6923      	ldr	r3, [r4, #16]
 801173c:	b1db      	cbz	r3, 8011776 <_puts_r+0x66>
 801173e:	3e01      	subs	r6, #1
 8011740:	68a3      	ldr	r3, [r4, #8]
 8011742:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011746:	3b01      	subs	r3, #1
 8011748:	60a3      	str	r3, [r4, #8]
 801174a:	b9e9      	cbnz	r1, 8011788 <_puts_r+0x78>
 801174c:	2b00      	cmp	r3, #0
 801174e:	da2e      	bge.n	80117ae <_puts_r+0x9e>
 8011750:	4622      	mov	r2, r4
 8011752:	210a      	movs	r1, #10
 8011754:	4628      	mov	r0, r5
 8011756:	f000 f83f 	bl	80117d8 <__swbuf_r>
 801175a:	3001      	adds	r0, #1
 801175c:	d011      	beq.n	8011782 <_puts_r+0x72>
 801175e:	200a      	movs	r0, #10
 8011760:	e011      	b.n	8011786 <_puts_r+0x76>
 8011762:	4b17      	ldr	r3, [pc, #92]	; (80117c0 <_puts_r+0xb0>)
 8011764:	429c      	cmp	r4, r3
 8011766:	d101      	bne.n	801176c <_puts_r+0x5c>
 8011768:	68ac      	ldr	r4, [r5, #8]
 801176a:	e7e3      	b.n	8011734 <_puts_r+0x24>
 801176c:	4b15      	ldr	r3, [pc, #84]	; (80117c4 <_puts_r+0xb4>)
 801176e:	429c      	cmp	r4, r3
 8011770:	bf08      	it	eq
 8011772:	68ec      	ldreq	r4, [r5, #12]
 8011774:	e7de      	b.n	8011734 <_puts_r+0x24>
 8011776:	4621      	mov	r1, r4
 8011778:	4628      	mov	r0, r5
 801177a:	f000 f87f 	bl	801187c <__swsetup_r>
 801177e:	2800      	cmp	r0, #0
 8011780:	d0dd      	beq.n	801173e <_puts_r+0x2e>
 8011782:	f04f 30ff 	mov.w	r0, #4294967295
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	2b00      	cmp	r3, #0
 801178a:	da04      	bge.n	8011796 <_puts_r+0x86>
 801178c:	69a2      	ldr	r2, [r4, #24]
 801178e:	429a      	cmp	r2, r3
 8011790:	dc06      	bgt.n	80117a0 <_puts_r+0x90>
 8011792:	290a      	cmp	r1, #10
 8011794:	d004      	beq.n	80117a0 <_puts_r+0x90>
 8011796:	6823      	ldr	r3, [r4, #0]
 8011798:	1c5a      	adds	r2, r3, #1
 801179a:	6022      	str	r2, [r4, #0]
 801179c:	7019      	strb	r1, [r3, #0]
 801179e:	e7cf      	b.n	8011740 <_puts_r+0x30>
 80117a0:	4622      	mov	r2, r4
 80117a2:	4628      	mov	r0, r5
 80117a4:	f000 f818 	bl	80117d8 <__swbuf_r>
 80117a8:	3001      	adds	r0, #1
 80117aa:	d1c9      	bne.n	8011740 <_puts_r+0x30>
 80117ac:	e7e9      	b.n	8011782 <_puts_r+0x72>
 80117ae:	6823      	ldr	r3, [r4, #0]
 80117b0:	200a      	movs	r0, #10
 80117b2:	1c5a      	adds	r2, r3, #1
 80117b4:	6022      	str	r2, [r4, #0]
 80117b6:	7018      	strb	r0, [r3, #0]
 80117b8:	e7e5      	b.n	8011786 <_puts_r+0x76>
 80117ba:	bf00      	nop
 80117bc:	08026140 	.word	0x08026140
 80117c0:	08026160 	.word	0x08026160
 80117c4:	08026120 	.word	0x08026120

080117c8 <puts>:
 80117c8:	4b02      	ldr	r3, [pc, #8]	; (80117d4 <puts+0xc>)
 80117ca:	4601      	mov	r1, r0
 80117cc:	6818      	ldr	r0, [r3, #0]
 80117ce:	f7ff bf9f 	b.w	8011710 <_puts_r>
 80117d2:	bf00      	nop
 80117d4:	20000010 	.word	0x20000010

080117d8 <__swbuf_r>:
 80117d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117da:	460e      	mov	r6, r1
 80117dc:	4614      	mov	r4, r2
 80117de:	4605      	mov	r5, r0
 80117e0:	b118      	cbz	r0, 80117ea <__swbuf_r+0x12>
 80117e2:	6983      	ldr	r3, [r0, #24]
 80117e4:	b90b      	cbnz	r3, 80117ea <__swbuf_r+0x12>
 80117e6:	f000 f9a7 	bl	8011b38 <__sinit>
 80117ea:	4b21      	ldr	r3, [pc, #132]	; (8011870 <__swbuf_r+0x98>)
 80117ec:	429c      	cmp	r4, r3
 80117ee:	d12a      	bne.n	8011846 <__swbuf_r+0x6e>
 80117f0:	686c      	ldr	r4, [r5, #4]
 80117f2:	69a3      	ldr	r3, [r4, #24]
 80117f4:	60a3      	str	r3, [r4, #8]
 80117f6:	89a3      	ldrh	r3, [r4, #12]
 80117f8:	071a      	lsls	r2, r3, #28
 80117fa:	d52e      	bpl.n	801185a <__swbuf_r+0x82>
 80117fc:	6923      	ldr	r3, [r4, #16]
 80117fe:	b363      	cbz	r3, 801185a <__swbuf_r+0x82>
 8011800:	6923      	ldr	r3, [r4, #16]
 8011802:	6820      	ldr	r0, [r4, #0]
 8011804:	1ac0      	subs	r0, r0, r3
 8011806:	6963      	ldr	r3, [r4, #20]
 8011808:	b2f6      	uxtb	r6, r6
 801180a:	4283      	cmp	r3, r0
 801180c:	4637      	mov	r7, r6
 801180e:	dc04      	bgt.n	801181a <__swbuf_r+0x42>
 8011810:	4621      	mov	r1, r4
 8011812:	4628      	mov	r0, r5
 8011814:	f000 f926 	bl	8011a64 <_fflush_r>
 8011818:	bb28      	cbnz	r0, 8011866 <__swbuf_r+0x8e>
 801181a:	68a3      	ldr	r3, [r4, #8]
 801181c:	3b01      	subs	r3, #1
 801181e:	60a3      	str	r3, [r4, #8]
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	6022      	str	r2, [r4, #0]
 8011826:	701e      	strb	r6, [r3, #0]
 8011828:	6963      	ldr	r3, [r4, #20]
 801182a:	3001      	adds	r0, #1
 801182c:	4283      	cmp	r3, r0
 801182e:	d004      	beq.n	801183a <__swbuf_r+0x62>
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	07db      	lsls	r3, r3, #31
 8011834:	d519      	bpl.n	801186a <__swbuf_r+0x92>
 8011836:	2e0a      	cmp	r6, #10
 8011838:	d117      	bne.n	801186a <__swbuf_r+0x92>
 801183a:	4621      	mov	r1, r4
 801183c:	4628      	mov	r0, r5
 801183e:	f000 f911 	bl	8011a64 <_fflush_r>
 8011842:	b190      	cbz	r0, 801186a <__swbuf_r+0x92>
 8011844:	e00f      	b.n	8011866 <__swbuf_r+0x8e>
 8011846:	4b0b      	ldr	r3, [pc, #44]	; (8011874 <__swbuf_r+0x9c>)
 8011848:	429c      	cmp	r4, r3
 801184a:	d101      	bne.n	8011850 <__swbuf_r+0x78>
 801184c:	68ac      	ldr	r4, [r5, #8]
 801184e:	e7d0      	b.n	80117f2 <__swbuf_r+0x1a>
 8011850:	4b09      	ldr	r3, [pc, #36]	; (8011878 <__swbuf_r+0xa0>)
 8011852:	429c      	cmp	r4, r3
 8011854:	bf08      	it	eq
 8011856:	68ec      	ldreq	r4, [r5, #12]
 8011858:	e7cb      	b.n	80117f2 <__swbuf_r+0x1a>
 801185a:	4621      	mov	r1, r4
 801185c:	4628      	mov	r0, r5
 801185e:	f000 f80d 	bl	801187c <__swsetup_r>
 8011862:	2800      	cmp	r0, #0
 8011864:	d0cc      	beq.n	8011800 <__swbuf_r+0x28>
 8011866:	f04f 37ff 	mov.w	r7, #4294967295
 801186a:	4638      	mov	r0, r7
 801186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801186e:	bf00      	nop
 8011870:	08026140 	.word	0x08026140
 8011874:	08026160 	.word	0x08026160
 8011878:	08026120 	.word	0x08026120

0801187c <__swsetup_r>:
 801187c:	4b32      	ldr	r3, [pc, #200]	; (8011948 <__swsetup_r+0xcc>)
 801187e:	b570      	push	{r4, r5, r6, lr}
 8011880:	681d      	ldr	r5, [r3, #0]
 8011882:	4606      	mov	r6, r0
 8011884:	460c      	mov	r4, r1
 8011886:	b125      	cbz	r5, 8011892 <__swsetup_r+0x16>
 8011888:	69ab      	ldr	r3, [r5, #24]
 801188a:	b913      	cbnz	r3, 8011892 <__swsetup_r+0x16>
 801188c:	4628      	mov	r0, r5
 801188e:	f000 f953 	bl	8011b38 <__sinit>
 8011892:	4b2e      	ldr	r3, [pc, #184]	; (801194c <__swsetup_r+0xd0>)
 8011894:	429c      	cmp	r4, r3
 8011896:	d10f      	bne.n	80118b8 <__swsetup_r+0x3c>
 8011898:	686c      	ldr	r4, [r5, #4]
 801189a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801189e:	b29a      	uxth	r2, r3
 80118a0:	0715      	lsls	r5, r2, #28
 80118a2:	d42c      	bmi.n	80118fe <__swsetup_r+0x82>
 80118a4:	06d0      	lsls	r0, r2, #27
 80118a6:	d411      	bmi.n	80118cc <__swsetup_r+0x50>
 80118a8:	2209      	movs	r2, #9
 80118aa:	6032      	str	r2, [r6, #0]
 80118ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118b0:	81a3      	strh	r3, [r4, #12]
 80118b2:	f04f 30ff 	mov.w	r0, #4294967295
 80118b6:	e03e      	b.n	8011936 <__swsetup_r+0xba>
 80118b8:	4b25      	ldr	r3, [pc, #148]	; (8011950 <__swsetup_r+0xd4>)
 80118ba:	429c      	cmp	r4, r3
 80118bc:	d101      	bne.n	80118c2 <__swsetup_r+0x46>
 80118be:	68ac      	ldr	r4, [r5, #8]
 80118c0:	e7eb      	b.n	801189a <__swsetup_r+0x1e>
 80118c2:	4b24      	ldr	r3, [pc, #144]	; (8011954 <__swsetup_r+0xd8>)
 80118c4:	429c      	cmp	r4, r3
 80118c6:	bf08      	it	eq
 80118c8:	68ec      	ldreq	r4, [r5, #12]
 80118ca:	e7e6      	b.n	801189a <__swsetup_r+0x1e>
 80118cc:	0751      	lsls	r1, r2, #29
 80118ce:	d512      	bpl.n	80118f6 <__swsetup_r+0x7a>
 80118d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118d2:	b141      	cbz	r1, 80118e6 <__swsetup_r+0x6a>
 80118d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118d8:	4299      	cmp	r1, r3
 80118da:	d002      	beq.n	80118e2 <__swsetup_r+0x66>
 80118dc:	4630      	mov	r0, r6
 80118de:	f000 fa19 	bl	8011d14 <_free_r>
 80118e2:	2300      	movs	r3, #0
 80118e4:	6363      	str	r3, [r4, #52]	; 0x34
 80118e6:	89a3      	ldrh	r3, [r4, #12]
 80118e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118ec:	81a3      	strh	r3, [r4, #12]
 80118ee:	2300      	movs	r3, #0
 80118f0:	6063      	str	r3, [r4, #4]
 80118f2:	6923      	ldr	r3, [r4, #16]
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	f043 0308 	orr.w	r3, r3, #8
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	6923      	ldr	r3, [r4, #16]
 8011900:	b94b      	cbnz	r3, 8011916 <__swsetup_r+0x9a>
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801190c:	d003      	beq.n	8011916 <__swsetup_r+0x9a>
 801190e:	4621      	mov	r1, r4
 8011910:	4630      	mov	r0, r6
 8011912:	f000 f9bf 	bl	8011c94 <__smakebuf_r>
 8011916:	89a2      	ldrh	r2, [r4, #12]
 8011918:	f012 0301 	ands.w	r3, r2, #1
 801191c:	d00c      	beq.n	8011938 <__swsetup_r+0xbc>
 801191e:	2300      	movs	r3, #0
 8011920:	60a3      	str	r3, [r4, #8]
 8011922:	6963      	ldr	r3, [r4, #20]
 8011924:	425b      	negs	r3, r3
 8011926:	61a3      	str	r3, [r4, #24]
 8011928:	6923      	ldr	r3, [r4, #16]
 801192a:	b953      	cbnz	r3, 8011942 <__swsetup_r+0xc6>
 801192c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011930:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011934:	d1ba      	bne.n	80118ac <__swsetup_r+0x30>
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	0792      	lsls	r2, r2, #30
 801193a:	bf58      	it	pl
 801193c:	6963      	ldrpl	r3, [r4, #20]
 801193e:	60a3      	str	r3, [r4, #8]
 8011940:	e7f2      	b.n	8011928 <__swsetup_r+0xac>
 8011942:	2000      	movs	r0, #0
 8011944:	e7f7      	b.n	8011936 <__swsetup_r+0xba>
 8011946:	bf00      	nop
 8011948:	20000010 	.word	0x20000010
 801194c:	08026140 	.word	0x08026140
 8011950:	08026160 	.word	0x08026160
 8011954:	08026120 	.word	0x08026120

08011958 <__sflush_r>:
 8011958:	898a      	ldrh	r2, [r1, #12]
 801195a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801195e:	4605      	mov	r5, r0
 8011960:	0710      	lsls	r0, r2, #28
 8011962:	460c      	mov	r4, r1
 8011964:	d458      	bmi.n	8011a18 <__sflush_r+0xc0>
 8011966:	684b      	ldr	r3, [r1, #4]
 8011968:	2b00      	cmp	r3, #0
 801196a:	dc05      	bgt.n	8011978 <__sflush_r+0x20>
 801196c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801196e:	2b00      	cmp	r3, #0
 8011970:	dc02      	bgt.n	8011978 <__sflush_r+0x20>
 8011972:	2000      	movs	r0, #0
 8011974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801197a:	2e00      	cmp	r6, #0
 801197c:	d0f9      	beq.n	8011972 <__sflush_r+0x1a>
 801197e:	2300      	movs	r3, #0
 8011980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011984:	682f      	ldr	r7, [r5, #0]
 8011986:	6a21      	ldr	r1, [r4, #32]
 8011988:	602b      	str	r3, [r5, #0]
 801198a:	d032      	beq.n	80119f2 <__sflush_r+0x9a>
 801198c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801198e:	89a3      	ldrh	r3, [r4, #12]
 8011990:	075a      	lsls	r2, r3, #29
 8011992:	d505      	bpl.n	80119a0 <__sflush_r+0x48>
 8011994:	6863      	ldr	r3, [r4, #4]
 8011996:	1ac0      	subs	r0, r0, r3
 8011998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801199a:	b10b      	cbz	r3, 80119a0 <__sflush_r+0x48>
 801199c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801199e:	1ac0      	subs	r0, r0, r3
 80119a0:	2300      	movs	r3, #0
 80119a2:	4602      	mov	r2, r0
 80119a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119a6:	6a21      	ldr	r1, [r4, #32]
 80119a8:	4628      	mov	r0, r5
 80119aa:	47b0      	blx	r6
 80119ac:	1c43      	adds	r3, r0, #1
 80119ae:	89a3      	ldrh	r3, [r4, #12]
 80119b0:	d106      	bne.n	80119c0 <__sflush_r+0x68>
 80119b2:	6829      	ldr	r1, [r5, #0]
 80119b4:	291d      	cmp	r1, #29
 80119b6:	d848      	bhi.n	8011a4a <__sflush_r+0xf2>
 80119b8:	4a29      	ldr	r2, [pc, #164]	; (8011a60 <__sflush_r+0x108>)
 80119ba:	40ca      	lsrs	r2, r1
 80119bc:	07d6      	lsls	r6, r2, #31
 80119be:	d544      	bpl.n	8011a4a <__sflush_r+0xf2>
 80119c0:	2200      	movs	r2, #0
 80119c2:	6062      	str	r2, [r4, #4]
 80119c4:	04d9      	lsls	r1, r3, #19
 80119c6:	6922      	ldr	r2, [r4, #16]
 80119c8:	6022      	str	r2, [r4, #0]
 80119ca:	d504      	bpl.n	80119d6 <__sflush_r+0x7e>
 80119cc:	1c42      	adds	r2, r0, #1
 80119ce:	d101      	bne.n	80119d4 <__sflush_r+0x7c>
 80119d0:	682b      	ldr	r3, [r5, #0]
 80119d2:	b903      	cbnz	r3, 80119d6 <__sflush_r+0x7e>
 80119d4:	6560      	str	r0, [r4, #84]	; 0x54
 80119d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119d8:	602f      	str	r7, [r5, #0]
 80119da:	2900      	cmp	r1, #0
 80119dc:	d0c9      	beq.n	8011972 <__sflush_r+0x1a>
 80119de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119e2:	4299      	cmp	r1, r3
 80119e4:	d002      	beq.n	80119ec <__sflush_r+0x94>
 80119e6:	4628      	mov	r0, r5
 80119e8:	f000 f994 	bl	8011d14 <_free_r>
 80119ec:	2000      	movs	r0, #0
 80119ee:	6360      	str	r0, [r4, #52]	; 0x34
 80119f0:	e7c0      	b.n	8011974 <__sflush_r+0x1c>
 80119f2:	2301      	movs	r3, #1
 80119f4:	4628      	mov	r0, r5
 80119f6:	47b0      	blx	r6
 80119f8:	1c41      	adds	r1, r0, #1
 80119fa:	d1c8      	bne.n	801198e <__sflush_r+0x36>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d0c5      	beq.n	801198e <__sflush_r+0x36>
 8011a02:	2b1d      	cmp	r3, #29
 8011a04:	d001      	beq.n	8011a0a <__sflush_r+0xb2>
 8011a06:	2b16      	cmp	r3, #22
 8011a08:	d101      	bne.n	8011a0e <__sflush_r+0xb6>
 8011a0a:	602f      	str	r7, [r5, #0]
 8011a0c:	e7b1      	b.n	8011972 <__sflush_r+0x1a>
 8011a0e:	89a3      	ldrh	r3, [r4, #12]
 8011a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a14:	81a3      	strh	r3, [r4, #12]
 8011a16:	e7ad      	b.n	8011974 <__sflush_r+0x1c>
 8011a18:	690f      	ldr	r7, [r1, #16]
 8011a1a:	2f00      	cmp	r7, #0
 8011a1c:	d0a9      	beq.n	8011972 <__sflush_r+0x1a>
 8011a1e:	0793      	lsls	r3, r2, #30
 8011a20:	680e      	ldr	r6, [r1, #0]
 8011a22:	bf08      	it	eq
 8011a24:	694b      	ldreq	r3, [r1, #20]
 8011a26:	600f      	str	r7, [r1, #0]
 8011a28:	bf18      	it	ne
 8011a2a:	2300      	movne	r3, #0
 8011a2c:	eba6 0807 	sub.w	r8, r6, r7
 8011a30:	608b      	str	r3, [r1, #8]
 8011a32:	f1b8 0f00 	cmp.w	r8, #0
 8011a36:	dd9c      	ble.n	8011972 <__sflush_r+0x1a>
 8011a38:	4643      	mov	r3, r8
 8011a3a:	463a      	mov	r2, r7
 8011a3c:	6a21      	ldr	r1, [r4, #32]
 8011a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a40:	4628      	mov	r0, r5
 8011a42:	47b0      	blx	r6
 8011a44:	2800      	cmp	r0, #0
 8011a46:	dc06      	bgt.n	8011a56 <__sflush_r+0xfe>
 8011a48:	89a3      	ldrh	r3, [r4, #12]
 8011a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a4e:	81a3      	strh	r3, [r4, #12]
 8011a50:	f04f 30ff 	mov.w	r0, #4294967295
 8011a54:	e78e      	b.n	8011974 <__sflush_r+0x1c>
 8011a56:	4407      	add	r7, r0
 8011a58:	eba8 0800 	sub.w	r8, r8, r0
 8011a5c:	e7e9      	b.n	8011a32 <__sflush_r+0xda>
 8011a5e:	bf00      	nop
 8011a60:	20400001 	.word	0x20400001

08011a64 <_fflush_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	690b      	ldr	r3, [r1, #16]
 8011a68:	4605      	mov	r5, r0
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	b1db      	cbz	r3, 8011aa6 <_fflush_r+0x42>
 8011a6e:	b118      	cbz	r0, 8011a78 <_fflush_r+0x14>
 8011a70:	6983      	ldr	r3, [r0, #24]
 8011a72:	b90b      	cbnz	r3, 8011a78 <_fflush_r+0x14>
 8011a74:	f000 f860 	bl	8011b38 <__sinit>
 8011a78:	4b0c      	ldr	r3, [pc, #48]	; (8011aac <_fflush_r+0x48>)
 8011a7a:	429c      	cmp	r4, r3
 8011a7c:	d109      	bne.n	8011a92 <_fflush_r+0x2e>
 8011a7e:	686c      	ldr	r4, [r5, #4]
 8011a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a84:	b17b      	cbz	r3, 8011aa6 <_fflush_r+0x42>
 8011a86:	4621      	mov	r1, r4
 8011a88:	4628      	mov	r0, r5
 8011a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a8e:	f7ff bf63 	b.w	8011958 <__sflush_r>
 8011a92:	4b07      	ldr	r3, [pc, #28]	; (8011ab0 <_fflush_r+0x4c>)
 8011a94:	429c      	cmp	r4, r3
 8011a96:	d101      	bne.n	8011a9c <_fflush_r+0x38>
 8011a98:	68ac      	ldr	r4, [r5, #8]
 8011a9a:	e7f1      	b.n	8011a80 <_fflush_r+0x1c>
 8011a9c:	4b05      	ldr	r3, [pc, #20]	; (8011ab4 <_fflush_r+0x50>)
 8011a9e:	429c      	cmp	r4, r3
 8011aa0:	bf08      	it	eq
 8011aa2:	68ec      	ldreq	r4, [r5, #12]
 8011aa4:	e7ec      	b.n	8011a80 <_fflush_r+0x1c>
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	bd38      	pop	{r3, r4, r5, pc}
 8011aaa:	bf00      	nop
 8011aac:	08026140 	.word	0x08026140
 8011ab0:	08026160 	.word	0x08026160
 8011ab4:	08026120 	.word	0x08026120

08011ab8 <std>:
 8011ab8:	2300      	movs	r3, #0
 8011aba:	b510      	push	{r4, lr}
 8011abc:	4604      	mov	r4, r0
 8011abe:	e9c0 3300 	strd	r3, r3, [r0]
 8011ac2:	6083      	str	r3, [r0, #8]
 8011ac4:	8181      	strh	r1, [r0, #12]
 8011ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8011ac8:	81c2      	strh	r2, [r0, #14]
 8011aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ace:	6183      	str	r3, [r0, #24]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	2208      	movs	r2, #8
 8011ad4:	305c      	adds	r0, #92	; 0x5c
 8011ad6:	f7ff fdfa 	bl	80116ce <memset>
 8011ada:	4b05      	ldr	r3, [pc, #20]	; (8011af0 <std+0x38>)
 8011adc:	6263      	str	r3, [r4, #36]	; 0x24
 8011ade:	4b05      	ldr	r3, [pc, #20]	; (8011af4 <std+0x3c>)
 8011ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ae2:	4b05      	ldr	r3, [pc, #20]	; (8011af8 <std+0x40>)
 8011ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011ae6:	4b05      	ldr	r3, [pc, #20]	; (8011afc <std+0x44>)
 8011ae8:	6224      	str	r4, [r4, #32]
 8011aea:	6323      	str	r3, [r4, #48]	; 0x30
 8011aec:	bd10      	pop	{r4, pc}
 8011aee:	bf00      	nop
 8011af0:	08012415 	.word	0x08012415
 8011af4:	08012437 	.word	0x08012437
 8011af8:	0801246f 	.word	0x0801246f
 8011afc:	08012493 	.word	0x08012493

08011b00 <_cleanup_r>:
 8011b00:	4901      	ldr	r1, [pc, #4]	; (8011b08 <_cleanup_r+0x8>)
 8011b02:	f000 b885 	b.w	8011c10 <_fwalk_reent>
 8011b06:	bf00      	nop
 8011b08:	08011a65 	.word	0x08011a65

08011b0c <__sfmoreglue>:
 8011b0c:	b570      	push	{r4, r5, r6, lr}
 8011b0e:	1e4a      	subs	r2, r1, #1
 8011b10:	2568      	movs	r5, #104	; 0x68
 8011b12:	4355      	muls	r5, r2
 8011b14:	460e      	mov	r6, r1
 8011b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b1a:	f000 f949 	bl	8011db0 <_malloc_r>
 8011b1e:	4604      	mov	r4, r0
 8011b20:	b140      	cbz	r0, 8011b34 <__sfmoreglue+0x28>
 8011b22:	2100      	movs	r1, #0
 8011b24:	e9c0 1600 	strd	r1, r6, [r0]
 8011b28:	300c      	adds	r0, #12
 8011b2a:	60a0      	str	r0, [r4, #8]
 8011b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b30:	f7ff fdcd 	bl	80116ce <memset>
 8011b34:	4620      	mov	r0, r4
 8011b36:	bd70      	pop	{r4, r5, r6, pc}

08011b38 <__sinit>:
 8011b38:	6983      	ldr	r3, [r0, #24]
 8011b3a:	b510      	push	{r4, lr}
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	bb33      	cbnz	r3, 8011b8e <__sinit+0x56>
 8011b40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011b44:	6503      	str	r3, [r0, #80]	; 0x50
 8011b46:	4b12      	ldr	r3, [pc, #72]	; (8011b90 <__sinit+0x58>)
 8011b48:	4a12      	ldr	r2, [pc, #72]	; (8011b94 <__sinit+0x5c>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	6282      	str	r2, [r0, #40]	; 0x28
 8011b4e:	4298      	cmp	r0, r3
 8011b50:	bf04      	itt	eq
 8011b52:	2301      	moveq	r3, #1
 8011b54:	6183      	streq	r3, [r0, #24]
 8011b56:	f000 f81f 	bl	8011b98 <__sfp>
 8011b5a:	6060      	str	r0, [r4, #4]
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f000 f81b 	bl	8011b98 <__sfp>
 8011b62:	60a0      	str	r0, [r4, #8]
 8011b64:	4620      	mov	r0, r4
 8011b66:	f000 f817 	bl	8011b98 <__sfp>
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	60e0      	str	r0, [r4, #12]
 8011b6e:	2104      	movs	r1, #4
 8011b70:	6860      	ldr	r0, [r4, #4]
 8011b72:	f7ff ffa1 	bl	8011ab8 <std>
 8011b76:	2201      	movs	r2, #1
 8011b78:	2109      	movs	r1, #9
 8011b7a:	68a0      	ldr	r0, [r4, #8]
 8011b7c:	f7ff ff9c 	bl	8011ab8 <std>
 8011b80:	2202      	movs	r2, #2
 8011b82:	2112      	movs	r1, #18
 8011b84:	68e0      	ldr	r0, [r4, #12]
 8011b86:	f7ff ff97 	bl	8011ab8 <std>
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	61a3      	str	r3, [r4, #24]
 8011b8e:	bd10      	pop	{r4, pc}
 8011b90:	0802611c 	.word	0x0802611c
 8011b94:	08011b01 	.word	0x08011b01

08011b98 <__sfp>:
 8011b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9a:	4b1b      	ldr	r3, [pc, #108]	; (8011c08 <__sfp+0x70>)
 8011b9c:	681e      	ldr	r6, [r3, #0]
 8011b9e:	69b3      	ldr	r3, [r6, #24]
 8011ba0:	4607      	mov	r7, r0
 8011ba2:	b913      	cbnz	r3, 8011baa <__sfp+0x12>
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	f7ff ffc7 	bl	8011b38 <__sinit>
 8011baa:	3648      	adds	r6, #72	; 0x48
 8011bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	d503      	bpl.n	8011bbc <__sfp+0x24>
 8011bb4:	6833      	ldr	r3, [r6, #0]
 8011bb6:	b133      	cbz	r3, 8011bc6 <__sfp+0x2e>
 8011bb8:	6836      	ldr	r6, [r6, #0]
 8011bba:	e7f7      	b.n	8011bac <__sfp+0x14>
 8011bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011bc0:	b16d      	cbz	r5, 8011bde <__sfp+0x46>
 8011bc2:	3468      	adds	r4, #104	; 0x68
 8011bc4:	e7f4      	b.n	8011bb0 <__sfp+0x18>
 8011bc6:	2104      	movs	r1, #4
 8011bc8:	4638      	mov	r0, r7
 8011bca:	f7ff ff9f 	bl	8011b0c <__sfmoreglue>
 8011bce:	6030      	str	r0, [r6, #0]
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d1f1      	bne.n	8011bb8 <__sfp+0x20>
 8011bd4:	230c      	movs	r3, #12
 8011bd6:	603b      	str	r3, [r7, #0]
 8011bd8:	4604      	mov	r4, r0
 8011bda:	4620      	mov	r0, r4
 8011bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bde:	4b0b      	ldr	r3, [pc, #44]	; (8011c0c <__sfp+0x74>)
 8011be0:	6665      	str	r5, [r4, #100]	; 0x64
 8011be2:	e9c4 5500 	strd	r5, r5, [r4]
 8011be6:	60a5      	str	r5, [r4, #8]
 8011be8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011bec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011bf0:	2208      	movs	r2, #8
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011bf8:	f7ff fd69 	bl	80116ce <memset>
 8011bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c04:	e7e9      	b.n	8011bda <__sfp+0x42>
 8011c06:	bf00      	nop
 8011c08:	0802611c 	.word	0x0802611c
 8011c0c:	ffff0001 	.word	0xffff0001

08011c10 <_fwalk_reent>:
 8011c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c14:	4680      	mov	r8, r0
 8011c16:	4689      	mov	r9, r1
 8011c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c1c:	2600      	movs	r6, #0
 8011c1e:	b914      	cbnz	r4, 8011c26 <_fwalk_reent+0x16>
 8011c20:	4630      	mov	r0, r6
 8011c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011c2a:	3f01      	subs	r7, #1
 8011c2c:	d501      	bpl.n	8011c32 <_fwalk_reent+0x22>
 8011c2e:	6824      	ldr	r4, [r4, #0]
 8011c30:	e7f5      	b.n	8011c1e <_fwalk_reent+0xe>
 8011c32:	89ab      	ldrh	r3, [r5, #12]
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d907      	bls.n	8011c48 <_fwalk_reent+0x38>
 8011c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	d003      	beq.n	8011c48 <_fwalk_reent+0x38>
 8011c40:	4629      	mov	r1, r5
 8011c42:	4640      	mov	r0, r8
 8011c44:	47c8      	blx	r9
 8011c46:	4306      	orrs	r6, r0
 8011c48:	3568      	adds	r5, #104	; 0x68
 8011c4a:	e7ee      	b.n	8011c2a <_fwalk_reent+0x1a>

08011c4c <__swhatbuf_r>:
 8011c4c:	b570      	push	{r4, r5, r6, lr}
 8011c4e:	460e      	mov	r6, r1
 8011c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c54:	2900      	cmp	r1, #0
 8011c56:	b096      	sub	sp, #88	; 0x58
 8011c58:	4614      	mov	r4, r2
 8011c5a:	461d      	mov	r5, r3
 8011c5c:	da07      	bge.n	8011c6e <__swhatbuf_r+0x22>
 8011c5e:	2300      	movs	r3, #0
 8011c60:	602b      	str	r3, [r5, #0]
 8011c62:	89b3      	ldrh	r3, [r6, #12]
 8011c64:	061a      	lsls	r2, r3, #24
 8011c66:	d410      	bmi.n	8011c8a <__swhatbuf_r+0x3e>
 8011c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c6c:	e00e      	b.n	8011c8c <__swhatbuf_r+0x40>
 8011c6e:	466a      	mov	r2, sp
 8011c70:	f000 fc36 	bl	80124e0 <_fstat_r>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	dbf2      	blt.n	8011c5e <__swhatbuf_r+0x12>
 8011c78:	9a01      	ldr	r2, [sp, #4]
 8011c7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c82:	425a      	negs	r2, r3
 8011c84:	415a      	adcs	r2, r3
 8011c86:	602a      	str	r2, [r5, #0]
 8011c88:	e7ee      	b.n	8011c68 <__swhatbuf_r+0x1c>
 8011c8a:	2340      	movs	r3, #64	; 0x40
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	6023      	str	r3, [r4, #0]
 8011c90:	b016      	add	sp, #88	; 0x58
 8011c92:	bd70      	pop	{r4, r5, r6, pc}

08011c94 <__smakebuf_r>:
 8011c94:	898b      	ldrh	r3, [r1, #12]
 8011c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c98:	079d      	lsls	r5, r3, #30
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	460c      	mov	r4, r1
 8011c9e:	d507      	bpl.n	8011cb0 <__smakebuf_r+0x1c>
 8011ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ca4:	6023      	str	r3, [r4, #0]
 8011ca6:	6123      	str	r3, [r4, #16]
 8011ca8:	2301      	movs	r3, #1
 8011caa:	6163      	str	r3, [r4, #20]
 8011cac:	b002      	add	sp, #8
 8011cae:	bd70      	pop	{r4, r5, r6, pc}
 8011cb0:	ab01      	add	r3, sp, #4
 8011cb2:	466a      	mov	r2, sp
 8011cb4:	f7ff ffca 	bl	8011c4c <__swhatbuf_r>
 8011cb8:	9900      	ldr	r1, [sp, #0]
 8011cba:	4605      	mov	r5, r0
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f000 f877 	bl	8011db0 <_malloc_r>
 8011cc2:	b948      	cbnz	r0, 8011cd8 <__smakebuf_r+0x44>
 8011cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cc8:	059a      	lsls	r2, r3, #22
 8011cca:	d4ef      	bmi.n	8011cac <__smakebuf_r+0x18>
 8011ccc:	f023 0303 	bic.w	r3, r3, #3
 8011cd0:	f043 0302 	orr.w	r3, r3, #2
 8011cd4:	81a3      	strh	r3, [r4, #12]
 8011cd6:	e7e3      	b.n	8011ca0 <__smakebuf_r+0xc>
 8011cd8:	4b0d      	ldr	r3, [pc, #52]	; (8011d10 <__smakebuf_r+0x7c>)
 8011cda:	62b3      	str	r3, [r6, #40]	; 0x28
 8011cdc:	89a3      	ldrh	r3, [r4, #12]
 8011cde:	6020      	str	r0, [r4, #0]
 8011ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ce4:	81a3      	strh	r3, [r4, #12]
 8011ce6:	9b00      	ldr	r3, [sp, #0]
 8011ce8:	6163      	str	r3, [r4, #20]
 8011cea:	9b01      	ldr	r3, [sp, #4]
 8011cec:	6120      	str	r0, [r4, #16]
 8011cee:	b15b      	cbz	r3, 8011d08 <__smakebuf_r+0x74>
 8011cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f000 fc05 	bl	8012504 <_isatty_r>
 8011cfa:	b128      	cbz	r0, 8011d08 <__smakebuf_r+0x74>
 8011cfc:	89a3      	ldrh	r3, [r4, #12]
 8011cfe:	f023 0303 	bic.w	r3, r3, #3
 8011d02:	f043 0301 	orr.w	r3, r3, #1
 8011d06:	81a3      	strh	r3, [r4, #12]
 8011d08:	89a3      	ldrh	r3, [r4, #12]
 8011d0a:	431d      	orrs	r5, r3
 8011d0c:	81a5      	strh	r5, [r4, #12]
 8011d0e:	e7cd      	b.n	8011cac <__smakebuf_r+0x18>
 8011d10:	08011b01 	.word	0x08011b01

08011d14 <_free_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4605      	mov	r5, r0
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	d045      	beq.n	8011da8 <_free_r+0x94>
 8011d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d20:	1f0c      	subs	r4, r1, #4
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	bfb8      	it	lt
 8011d26:	18e4      	addlt	r4, r4, r3
 8011d28:	f000 fc0e 	bl	8012548 <__malloc_lock>
 8011d2c:	4a1f      	ldr	r2, [pc, #124]	; (8011dac <_free_r+0x98>)
 8011d2e:	6813      	ldr	r3, [r2, #0]
 8011d30:	4610      	mov	r0, r2
 8011d32:	b933      	cbnz	r3, 8011d42 <_free_r+0x2e>
 8011d34:	6063      	str	r3, [r4, #4]
 8011d36:	6014      	str	r4, [r2, #0]
 8011d38:	4628      	mov	r0, r5
 8011d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d3e:	f000 bc04 	b.w	801254a <__malloc_unlock>
 8011d42:	42a3      	cmp	r3, r4
 8011d44:	d90c      	bls.n	8011d60 <_free_r+0x4c>
 8011d46:	6821      	ldr	r1, [r4, #0]
 8011d48:	1862      	adds	r2, r4, r1
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	bf04      	itt	eq
 8011d4e:	681a      	ldreq	r2, [r3, #0]
 8011d50:	685b      	ldreq	r3, [r3, #4]
 8011d52:	6063      	str	r3, [r4, #4]
 8011d54:	bf04      	itt	eq
 8011d56:	1852      	addeq	r2, r2, r1
 8011d58:	6022      	streq	r2, [r4, #0]
 8011d5a:	6004      	str	r4, [r0, #0]
 8011d5c:	e7ec      	b.n	8011d38 <_free_r+0x24>
 8011d5e:	4613      	mov	r3, r2
 8011d60:	685a      	ldr	r2, [r3, #4]
 8011d62:	b10a      	cbz	r2, 8011d68 <_free_r+0x54>
 8011d64:	42a2      	cmp	r2, r4
 8011d66:	d9fa      	bls.n	8011d5e <_free_r+0x4a>
 8011d68:	6819      	ldr	r1, [r3, #0]
 8011d6a:	1858      	adds	r0, r3, r1
 8011d6c:	42a0      	cmp	r0, r4
 8011d6e:	d10b      	bne.n	8011d88 <_free_r+0x74>
 8011d70:	6820      	ldr	r0, [r4, #0]
 8011d72:	4401      	add	r1, r0
 8011d74:	1858      	adds	r0, r3, r1
 8011d76:	4282      	cmp	r2, r0
 8011d78:	6019      	str	r1, [r3, #0]
 8011d7a:	d1dd      	bne.n	8011d38 <_free_r+0x24>
 8011d7c:	6810      	ldr	r0, [r2, #0]
 8011d7e:	6852      	ldr	r2, [r2, #4]
 8011d80:	605a      	str	r2, [r3, #4]
 8011d82:	4401      	add	r1, r0
 8011d84:	6019      	str	r1, [r3, #0]
 8011d86:	e7d7      	b.n	8011d38 <_free_r+0x24>
 8011d88:	d902      	bls.n	8011d90 <_free_r+0x7c>
 8011d8a:	230c      	movs	r3, #12
 8011d8c:	602b      	str	r3, [r5, #0]
 8011d8e:	e7d3      	b.n	8011d38 <_free_r+0x24>
 8011d90:	6820      	ldr	r0, [r4, #0]
 8011d92:	1821      	adds	r1, r4, r0
 8011d94:	428a      	cmp	r2, r1
 8011d96:	bf04      	itt	eq
 8011d98:	6811      	ldreq	r1, [r2, #0]
 8011d9a:	6852      	ldreq	r2, [r2, #4]
 8011d9c:	6062      	str	r2, [r4, #4]
 8011d9e:	bf04      	itt	eq
 8011da0:	1809      	addeq	r1, r1, r0
 8011da2:	6021      	streq	r1, [r4, #0]
 8011da4:	605c      	str	r4, [r3, #4]
 8011da6:	e7c7      	b.n	8011d38 <_free_r+0x24>
 8011da8:	bd38      	pop	{r3, r4, r5, pc}
 8011daa:	bf00      	nop
 8011dac:	20004120 	.word	0x20004120

08011db0 <_malloc_r>:
 8011db0:	b570      	push	{r4, r5, r6, lr}
 8011db2:	1ccd      	adds	r5, r1, #3
 8011db4:	f025 0503 	bic.w	r5, r5, #3
 8011db8:	3508      	adds	r5, #8
 8011dba:	2d0c      	cmp	r5, #12
 8011dbc:	bf38      	it	cc
 8011dbe:	250c      	movcc	r5, #12
 8011dc0:	2d00      	cmp	r5, #0
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	db01      	blt.n	8011dca <_malloc_r+0x1a>
 8011dc6:	42a9      	cmp	r1, r5
 8011dc8:	d903      	bls.n	8011dd2 <_malloc_r+0x22>
 8011dca:	230c      	movs	r3, #12
 8011dcc:	6033      	str	r3, [r6, #0]
 8011dce:	2000      	movs	r0, #0
 8011dd0:	bd70      	pop	{r4, r5, r6, pc}
 8011dd2:	f000 fbb9 	bl	8012548 <__malloc_lock>
 8011dd6:	4a21      	ldr	r2, [pc, #132]	; (8011e5c <_malloc_r+0xac>)
 8011dd8:	6814      	ldr	r4, [r2, #0]
 8011dda:	4621      	mov	r1, r4
 8011ddc:	b991      	cbnz	r1, 8011e04 <_malloc_r+0x54>
 8011dde:	4c20      	ldr	r4, [pc, #128]	; (8011e60 <_malloc_r+0xb0>)
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	b91b      	cbnz	r3, 8011dec <_malloc_r+0x3c>
 8011de4:	4630      	mov	r0, r6
 8011de6:	f000 fb05 	bl	80123f4 <_sbrk_r>
 8011dea:	6020      	str	r0, [r4, #0]
 8011dec:	4629      	mov	r1, r5
 8011dee:	4630      	mov	r0, r6
 8011df0:	f000 fb00 	bl	80123f4 <_sbrk_r>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d124      	bne.n	8011e42 <_malloc_r+0x92>
 8011df8:	230c      	movs	r3, #12
 8011dfa:	6033      	str	r3, [r6, #0]
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f000 fba4 	bl	801254a <__malloc_unlock>
 8011e02:	e7e4      	b.n	8011dce <_malloc_r+0x1e>
 8011e04:	680b      	ldr	r3, [r1, #0]
 8011e06:	1b5b      	subs	r3, r3, r5
 8011e08:	d418      	bmi.n	8011e3c <_malloc_r+0x8c>
 8011e0a:	2b0b      	cmp	r3, #11
 8011e0c:	d90f      	bls.n	8011e2e <_malloc_r+0x7e>
 8011e0e:	600b      	str	r3, [r1, #0]
 8011e10:	50cd      	str	r5, [r1, r3]
 8011e12:	18cc      	adds	r4, r1, r3
 8011e14:	4630      	mov	r0, r6
 8011e16:	f000 fb98 	bl	801254a <__malloc_unlock>
 8011e1a:	f104 000b 	add.w	r0, r4, #11
 8011e1e:	1d23      	adds	r3, r4, #4
 8011e20:	f020 0007 	bic.w	r0, r0, #7
 8011e24:	1ac3      	subs	r3, r0, r3
 8011e26:	d0d3      	beq.n	8011dd0 <_malloc_r+0x20>
 8011e28:	425a      	negs	r2, r3
 8011e2a:	50e2      	str	r2, [r4, r3]
 8011e2c:	e7d0      	b.n	8011dd0 <_malloc_r+0x20>
 8011e2e:	428c      	cmp	r4, r1
 8011e30:	684b      	ldr	r3, [r1, #4]
 8011e32:	bf16      	itet	ne
 8011e34:	6063      	strne	r3, [r4, #4]
 8011e36:	6013      	streq	r3, [r2, #0]
 8011e38:	460c      	movne	r4, r1
 8011e3a:	e7eb      	b.n	8011e14 <_malloc_r+0x64>
 8011e3c:	460c      	mov	r4, r1
 8011e3e:	6849      	ldr	r1, [r1, #4]
 8011e40:	e7cc      	b.n	8011ddc <_malloc_r+0x2c>
 8011e42:	1cc4      	adds	r4, r0, #3
 8011e44:	f024 0403 	bic.w	r4, r4, #3
 8011e48:	42a0      	cmp	r0, r4
 8011e4a:	d005      	beq.n	8011e58 <_malloc_r+0xa8>
 8011e4c:	1a21      	subs	r1, r4, r0
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f000 fad0 	bl	80123f4 <_sbrk_r>
 8011e54:	3001      	adds	r0, #1
 8011e56:	d0cf      	beq.n	8011df8 <_malloc_r+0x48>
 8011e58:	6025      	str	r5, [r4, #0]
 8011e5a:	e7db      	b.n	8011e14 <_malloc_r+0x64>
 8011e5c:	20004120 	.word	0x20004120
 8011e60:	20004124 	.word	0x20004124

08011e64 <__sfputc_r>:
 8011e64:	6893      	ldr	r3, [r2, #8]
 8011e66:	3b01      	subs	r3, #1
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	b410      	push	{r4}
 8011e6c:	6093      	str	r3, [r2, #8]
 8011e6e:	da08      	bge.n	8011e82 <__sfputc_r+0x1e>
 8011e70:	6994      	ldr	r4, [r2, #24]
 8011e72:	42a3      	cmp	r3, r4
 8011e74:	db01      	blt.n	8011e7a <__sfputc_r+0x16>
 8011e76:	290a      	cmp	r1, #10
 8011e78:	d103      	bne.n	8011e82 <__sfputc_r+0x1e>
 8011e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e7e:	f7ff bcab 	b.w	80117d8 <__swbuf_r>
 8011e82:	6813      	ldr	r3, [r2, #0]
 8011e84:	1c58      	adds	r0, r3, #1
 8011e86:	6010      	str	r0, [r2, #0]
 8011e88:	7019      	strb	r1, [r3, #0]
 8011e8a:	4608      	mov	r0, r1
 8011e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e90:	4770      	bx	lr

08011e92 <__sfputs_r>:
 8011e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e94:	4606      	mov	r6, r0
 8011e96:	460f      	mov	r7, r1
 8011e98:	4614      	mov	r4, r2
 8011e9a:	18d5      	adds	r5, r2, r3
 8011e9c:	42ac      	cmp	r4, r5
 8011e9e:	d101      	bne.n	8011ea4 <__sfputs_r+0x12>
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	e007      	b.n	8011eb4 <__sfputs_r+0x22>
 8011ea4:	463a      	mov	r2, r7
 8011ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eaa:	4630      	mov	r0, r6
 8011eac:	f7ff ffda 	bl	8011e64 <__sfputc_r>
 8011eb0:	1c43      	adds	r3, r0, #1
 8011eb2:	d1f3      	bne.n	8011e9c <__sfputs_r+0xa>
 8011eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011eb8 <_vfiprintf_r>:
 8011eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	460c      	mov	r4, r1
 8011ebe:	b09d      	sub	sp, #116	; 0x74
 8011ec0:	4617      	mov	r7, r2
 8011ec2:	461d      	mov	r5, r3
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	b118      	cbz	r0, 8011ed0 <_vfiprintf_r+0x18>
 8011ec8:	6983      	ldr	r3, [r0, #24]
 8011eca:	b90b      	cbnz	r3, 8011ed0 <_vfiprintf_r+0x18>
 8011ecc:	f7ff fe34 	bl	8011b38 <__sinit>
 8011ed0:	4b7c      	ldr	r3, [pc, #496]	; (80120c4 <_vfiprintf_r+0x20c>)
 8011ed2:	429c      	cmp	r4, r3
 8011ed4:	d158      	bne.n	8011f88 <_vfiprintf_r+0xd0>
 8011ed6:	6874      	ldr	r4, [r6, #4]
 8011ed8:	89a3      	ldrh	r3, [r4, #12]
 8011eda:	0718      	lsls	r0, r3, #28
 8011edc:	d55e      	bpl.n	8011f9c <_vfiprintf_r+0xe4>
 8011ede:	6923      	ldr	r3, [r4, #16]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d05b      	beq.n	8011f9c <_vfiprintf_r+0xe4>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ee8:	2320      	movs	r3, #32
 8011eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011eee:	2330      	movs	r3, #48	; 0x30
 8011ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ef4:	9503      	str	r5, [sp, #12]
 8011ef6:	f04f 0b01 	mov.w	fp, #1
 8011efa:	46b8      	mov	r8, r7
 8011efc:	4645      	mov	r5, r8
 8011efe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f02:	b10b      	cbz	r3, 8011f08 <_vfiprintf_r+0x50>
 8011f04:	2b25      	cmp	r3, #37	; 0x25
 8011f06:	d154      	bne.n	8011fb2 <_vfiprintf_r+0xfa>
 8011f08:	ebb8 0a07 	subs.w	sl, r8, r7
 8011f0c:	d00b      	beq.n	8011f26 <_vfiprintf_r+0x6e>
 8011f0e:	4653      	mov	r3, sl
 8011f10:	463a      	mov	r2, r7
 8011f12:	4621      	mov	r1, r4
 8011f14:	4630      	mov	r0, r6
 8011f16:	f7ff ffbc 	bl	8011e92 <__sfputs_r>
 8011f1a:	3001      	adds	r0, #1
 8011f1c:	f000 80c2 	beq.w	80120a4 <_vfiprintf_r+0x1ec>
 8011f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f22:	4453      	add	r3, sl
 8011f24:	9309      	str	r3, [sp, #36]	; 0x24
 8011f26:	f898 3000 	ldrb.w	r3, [r8]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 80ba 	beq.w	80120a4 <_vfiprintf_r+0x1ec>
 8011f30:	2300      	movs	r3, #0
 8011f32:	f04f 32ff 	mov.w	r2, #4294967295
 8011f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f3a:	9304      	str	r3, [sp, #16]
 8011f3c:	9307      	str	r3, [sp, #28]
 8011f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f42:	931a      	str	r3, [sp, #104]	; 0x68
 8011f44:	46a8      	mov	r8, r5
 8011f46:	2205      	movs	r2, #5
 8011f48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011f4c:	485e      	ldr	r0, [pc, #376]	; (80120c8 <_vfiprintf_r+0x210>)
 8011f4e:	f7f6 f877 	bl	8008040 <memchr>
 8011f52:	9b04      	ldr	r3, [sp, #16]
 8011f54:	bb78      	cbnz	r0, 8011fb6 <_vfiprintf_r+0xfe>
 8011f56:	06d9      	lsls	r1, r3, #27
 8011f58:	bf44      	itt	mi
 8011f5a:	2220      	movmi	r2, #32
 8011f5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f60:	071a      	lsls	r2, r3, #28
 8011f62:	bf44      	itt	mi
 8011f64:	222b      	movmi	r2, #43	; 0x2b
 8011f66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f6a:	782a      	ldrb	r2, [r5, #0]
 8011f6c:	2a2a      	cmp	r2, #42	; 0x2a
 8011f6e:	d02a      	beq.n	8011fc6 <_vfiprintf_r+0x10e>
 8011f70:	9a07      	ldr	r2, [sp, #28]
 8011f72:	46a8      	mov	r8, r5
 8011f74:	2000      	movs	r0, #0
 8011f76:	250a      	movs	r5, #10
 8011f78:	4641      	mov	r1, r8
 8011f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f7e:	3b30      	subs	r3, #48	; 0x30
 8011f80:	2b09      	cmp	r3, #9
 8011f82:	d969      	bls.n	8012058 <_vfiprintf_r+0x1a0>
 8011f84:	b360      	cbz	r0, 8011fe0 <_vfiprintf_r+0x128>
 8011f86:	e024      	b.n	8011fd2 <_vfiprintf_r+0x11a>
 8011f88:	4b50      	ldr	r3, [pc, #320]	; (80120cc <_vfiprintf_r+0x214>)
 8011f8a:	429c      	cmp	r4, r3
 8011f8c:	d101      	bne.n	8011f92 <_vfiprintf_r+0xda>
 8011f8e:	68b4      	ldr	r4, [r6, #8]
 8011f90:	e7a2      	b.n	8011ed8 <_vfiprintf_r+0x20>
 8011f92:	4b4f      	ldr	r3, [pc, #316]	; (80120d0 <_vfiprintf_r+0x218>)
 8011f94:	429c      	cmp	r4, r3
 8011f96:	bf08      	it	eq
 8011f98:	68f4      	ldreq	r4, [r6, #12]
 8011f9a:	e79d      	b.n	8011ed8 <_vfiprintf_r+0x20>
 8011f9c:	4621      	mov	r1, r4
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f7ff fc6c 	bl	801187c <__swsetup_r>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	d09d      	beq.n	8011ee4 <_vfiprintf_r+0x2c>
 8011fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fac:	b01d      	add	sp, #116	; 0x74
 8011fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb2:	46a8      	mov	r8, r5
 8011fb4:	e7a2      	b.n	8011efc <_vfiprintf_r+0x44>
 8011fb6:	4a44      	ldr	r2, [pc, #272]	; (80120c8 <_vfiprintf_r+0x210>)
 8011fb8:	1a80      	subs	r0, r0, r2
 8011fba:	fa0b f000 	lsl.w	r0, fp, r0
 8011fbe:	4318      	orrs	r0, r3
 8011fc0:	9004      	str	r0, [sp, #16]
 8011fc2:	4645      	mov	r5, r8
 8011fc4:	e7be      	b.n	8011f44 <_vfiprintf_r+0x8c>
 8011fc6:	9a03      	ldr	r2, [sp, #12]
 8011fc8:	1d11      	adds	r1, r2, #4
 8011fca:	6812      	ldr	r2, [r2, #0]
 8011fcc:	9103      	str	r1, [sp, #12]
 8011fce:	2a00      	cmp	r2, #0
 8011fd0:	db01      	blt.n	8011fd6 <_vfiprintf_r+0x11e>
 8011fd2:	9207      	str	r2, [sp, #28]
 8011fd4:	e004      	b.n	8011fe0 <_vfiprintf_r+0x128>
 8011fd6:	4252      	negs	r2, r2
 8011fd8:	f043 0302 	orr.w	r3, r3, #2
 8011fdc:	9207      	str	r2, [sp, #28]
 8011fde:	9304      	str	r3, [sp, #16]
 8011fe0:	f898 3000 	ldrb.w	r3, [r8]
 8011fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8011fe6:	d10e      	bne.n	8012006 <_vfiprintf_r+0x14e>
 8011fe8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011fec:	2b2a      	cmp	r3, #42	; 0x2a
 8011fee:	d138      	bne.n	8012062 <_vfiprintf_r+0x1aa>
 8011ff0:	9b03      	ldr	r3, [sp, #12]
 8011ff2:	1d1a      	adds	r2, r3, #4
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	9203      	str	r2, [sp, #12]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	bfb8      	it	lt
 8011ffc:	f04f 33ff 	movlt.w	r3, #4294967295
 8012000:	f108 0802 	add.w	r8, r8, #2
 8012004:	9305      	str	r3, [sp, #20]
 8012006:	4d33      	ldr	r5, [pc, #204]	; (80120d4 <_vfiprintf_r+0x21c>)
 8012008:	f898 1000 	ldrb.w	r1, [r8]
 801200c:	2203      	movs	r2, #3
 801200e:	4628      	mov	r0, r5
 8012010:	f7f6 f816 	bl	8008040 <memchr>
 8012014:	b140      	cbz	r0, 8012028 <_vfiprintf_r+0x170>
 8012016:	2340      	movs	r3, #64	; 0x40
 8012018:	1b40      	subs	r0, r0, r5
 801201a:	fa03 f000 	lsl.w	r0, r3, r0
 801201e:	9b04      	ldr	r3, [sp, #16]
 8012020:	4303      	orrs	r3, r0
 8012022:	f108 0801 	add.w	r8, r8, #1
 8012026:	9304      	str	r3, [sp, #16]
 8012028:	f898 1000 	ldrb.w	r1, [r8]
 801202c:	482a      	ldr	r0, [pc, #168]	; (80120d8 <_vfiprintf_r+0x220>)
 801202e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012032:	2206      	movs	r2, #6
 8012034:	f108 0701 	add.w	r7, r8, #1
 8012038:	f7f6 f802 	bl	8008040 <memchr>
 801203c:	2800      	cmp	r0, #0
 801203e:	d037      	beq.n	80120b0 <_vfiprintf_r+0x1f8>
 8012040:	4b26      	ldr	r3, [pc, #152]	; (80120dc <_vfiprintf_r+0x224>)
 8012042:	bb1b      	cbnz	r3, 801208c <_vfiprintf_r+0x1d4>
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	3307      	adds	r3, #7
 8012048:	f023 0307 	bic.w	r3, r3, #7
 801204c:	3308      	adds	r3, #8
 801204e:	9303      	str	r3, [sp, #12]
 8012050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012052:	444b      	add	r3, r9
 8012054:	9309      	str	r3, [sp, #36]	; 0x24
 8012056:	e750      	b.n	8011efa <_vfiprintf_r+0x42>
 8012058:	fb05 3202 	mla	r2, r5, r2, r3
 801205c:	2001      	movs	r0, #1
 801205e:	4688      	mov	r8, r1
 8012060:	e78a      	b.n	8011f78 <_vfiprintf_r+0xc0>
 8012062:	2300      	movs	r3, #0
 8012064:	f108 0801 	add.w	r8, r8, #1
 8012068:	9305      	str	r3, [sp, #20]
 801206a:	4619      	mov	r1, r3
 801206c:	250a      	movs	r5, #10
 801206e:	4640      	mov	r0, r8
 8012070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012074:	3a30      	subs	r2, #48	; 0x30
 8012076:	2a09      	cmp	r2, #9
 8012078:	d903      	bls.n	8012082 <_vfiprintf_r+0x1ca>
 801207a:	2b00      	cmp	r3, #0
 801207c:	d0c3      	beq.n	8012006 <_vfiprintf_r+0x14e>
 801207e:	9105      	str	r1, [sp, #20]
 8012080:	e7c1      	b.n	8012006 <_vfiprintf_r+0x14e>
 8012082:	fb05 2101 	mla	r1, r5, r1, r2
 8012086:	2301      	movs	r3, #1
 8012088:	4680      	mov	r8, r0
 801208a:	e7f0      	b.n	801206e <_vfiprintf_r+0x1b6>
 801208c:	ab03      	add	r3, sp, #12
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	4622      	mov	r2, r4
 8012092:	4b13      	ldr	r3, [pc, #76]	; (80120e0 <_vfiprintf_r+0x228>)
 8012094:	a904      	add	r1, sp, #16
 8012096:	4630      	mov	r0, r6
 8012098:	f3af 8000 	nop.w
 801209c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80120a0:	4681      	mov	r9, r0
 80120a2:	d1d5      	bne.n	8012050 <_vfiprintf_r+0x198>
 80120a4:	89a3      	ldrh	r3, [r4, #12]
 80120a6:	065b      	lsls	r3, r3, #25
 80120a8:	f53f af7e 	bmi.w	8011fa8 <_vfiprintf_r+0xf0>
 80120ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120ae:	e77d      	b.n	8011fac <_vfiprintf_r+0xf4>
 80120b0:	ab03      	add	r3, sp, #12
 80120b2:	9300      	str	r3, [sp, #0]
 80120b4:	4622      	mov	r2, r4
 80120b6:	4b0a      	ldr	r3, [pc, #40]	; (80120e0 <_vfiprintf_r+0x228>)
 80120b8:	a904      	add	r1, sp, #16
 80120ba:	4630      	mov	r0, r6
 80120bc:	f000 f888 	bl	80121d0 <_printf_i>
 80120c0:	e7ec      	b.n	801209c <_vfiprintf_r+0x1e4>
 80120c2:	bf00      	nop
 80120c4:	08026140 	.word	0x08026140
 80120c8:	08026180 	.word	0x08026180
 80120cc:	08026160 	.word	0x08026160
 80120d0:	08026120 	.word	0x08026120
 80120d4:	08026186 	.word	0x08026186
 80120d8:	0802618a 	.word	0x0802618a
 80120dc:	00000000 	.word	0x00000000
 80120e0:	08011e93 	.word	0x08011e93

080120e4 <_printf_common>:
 80120e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120e8:	4691      	mov	r9, r2
 80120ea:	461f      	mov	r7, r3
 80120ec:	688a      	ldr	r2, [r1, #8]
 80120ee:	690b      	ldr	r3, [r1, #16]
 80120f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120f4:	4293      	cmp	r3, r2
 80120f6:	bfb8      	it	lt
 80120f8:	4613      	movlt	r3, r2
 80120fa:	f8c9 3000 	str.w	r3, [r9]
 80120fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012102:	4606      	mov	r6, r0
 8012104:	460c      	mov	r4, r1
 8012106:	b112      	cbz	r2, 801210e <_printf_common+0x2a>
 8012108:	3301      	adds	r3, #1
 801210a:	f8c9 3000 	str.w	r3, [r9]
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	0699      	lsls	r1, r3, #26
 8012112:	bf42      	ittt	mi
 8012114:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012118:	3302      	addmi	r3, #2
 801211a:	f8c9 3000 	strmi.w	r3, [r9]
 801211e:	6825      	ldr	r5, [r4, #0]
 8012120:	f015 0506 	ands.w	r5, r5, #6
 8012124:	d107      	bne.n	8012136 <_printf_common+0x52>
 8012126:	f104 0a19 	add.w	sl, r4, #25
 801212a:	68e3      	ldr	r3, [r4, #12]
 801212c:	f8d9 2000 	ldr.w	r2, [r9]
 8012130:	1a9b      	subs	r3, r3, r2
 8012132:	42ab      	cmp	r3, r5
 8012134:	dc28      	bgt.n	8012188 <_printf_common+0xa4>
 8012136:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801213a:	6822      	ldr	r2, [r4, #0]
 801213c:	3300      	adds	r3, #0
 801213e:	bf18      	it	ne
 8012140:	2301      	movne	r3, #1
 8012142:	0692      	lsls	r2, r2, #26
 8012144:	d42d      	bmi.n	80121a2 <_printf_common+0xbe>
 8012146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801214a:	4639      	mov	r1, r7
 801214c:	4630      	mov	r0, r6
 801214e:	47c0      	blx	r8
 8012150:	3001      	adds	r0, #1
 8012152:	d020      	beq.n	8012196 <_printf_common+0xb2>
 8012154:	6823      	ldr	r3, [r4, #0]
 8012156:	68e5      	ldr	r5, [r4, #12]
 8012158:	f8d9 2000 	ldr.w	r2, [r9]
 801215c:	f003 0306 	and.w	r3, r3, #6
 8012160:	2b04      	cmp	r3, #4
 8012162:	bf08      	it	eq
 8012164:	1aad      	subeq	r5, r5, r2
 8012166:	68a3      	ldr	r3, [r4, #8]
 8012168:	6922      	ldr	r2, [r4, #16]
 801216a:	bf0c      	ite	eq
 801216c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012170:	2500      	movne	r5, #0
 8012172:	4293      	cmp	r3, r2
 8012174:	bfc4      	itt	gt
 8012176:	1a9b      	subgt	r3, r3, r2
 8012178:	18ed      	addgt	r5, r5, r3
 801217a:	f04f 0900 	mov.w	r9, #0
 801217e:	341a      	adds	r4, #26
 8012180:	454d      	cmp	r5, r9
 8012182:	d11a      	bne.n	80121ba <_printf_common+0xd6>
 8012184:	2000      	movs	r0, #0
 8012186:	e008      	b.n	801219a <_printf_common+0xb6>
 8012188:	2301      	movs	r3, #1
 801218a:	4652      	mov	r2, sl
 801218c:	4639      	mov	r1, r7
 801218e:	4630      	mov	r0, r6
 8012190:	47c0      	blx	r8
 8012192:	3001      	adds	r0, #1
 8012194:	d103      	bne.n	801219e <_printf_common+0xba>
 8012196:	f04f 30ff 	mov.w	r0, #4294967295
 801219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801219e:	3501      	adds	r5, #1
 80121a0:	e7c3      	b.n	801212a <_printf_common+0x46>
 80121a2:	18e1      	adds	r1, r4, r3
 80121a4:	1c5a      	adds	r2, r3, #1
 80121a6:	2030      	movs	r0, #48	; 0x30
 80121a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80121ac:	4422      	add	r2, r4
 80121ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80121b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80121b6:	3302      	adds	r3, #2
 80121b8:	e7c5      	b.n	8012146 <_printf_common+0x62>
 80121ba:	2301      	movs	r3, #1
 80121bc:	4622      	mov	r2, r4
 80121be:	4639      	mov	r1, r7
 80121c0:	4630      	mov	r0, r6
 80121c2:	47c0      	blx	r8
 80121c4:	3001      	adds	r0, #1
 80121c6:	d0e6      	beq.n	8012196 <_printf_common+0xb2>
 80121c8:	f109 0901 	add.w	r9, r9, #1
 80121cc:	e7d8      	b.n	8012180 <_printf_common+0x9c>
	...

080121d0 <_printf_i>:
 80121d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80121d8:	460c      	mov	r4, r1
 80121da:	7e09      	ldrb	r1, [r1, #24]
 80121dc:	b085      	sub	sp, #20
 80121de:	296e      	cmp	r1, #110	; 0x6e
 80121e0:	4617      	mov	r7, r2
 80121e2:	4606      	mov	r6, r0
 80121e4:	4698      	mov	r8, r3
 80121e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121e8:	f000 80b3 	beq.w	8012352 <_printf_i+0x182>
 80121ec:	d822      	bhi.n	8012234 <_printf_i+0x64>
 80121ee:	2963      	cmp	r1, #99	; 0x63
 80121f0:	d036      	beq.n	8012260 <_printf_i+0x90>
 80121f2:	d80a      	bhi.n	801220a <_printf_i+0x3a>
 80121f4:	2900      	cmp	r1, #0
 80121f6:	f000 80b9 	beq.w	801236c <_printf_i+0x19c>
 80121fa:	2958      	cmp	r1, #88	; 0x58
 80121fc:	f000 8083 	beq.w	8012306 <_printf_i+0x136>
 8012200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012204:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012208:	e032      	b.n	8012270 <_printf_i+0xa0>
 801220a:	2964      	cmp	r1, #100	; 0x64
 801220c:	d001      	beq.n	8012212 <_printf_i+0x42>
 801220e:	2969      	cmp	r1, #105	; 0x69
 8012210:	d1f6      	bne.n	8012200 <_printf_i+0x30>
 8012212:	6820      	ldr	r0, [r4, #0]
 8012214:	6813      	ldr	r3, [r2, #0]
 8012216:	0605      	lsls	r5, r0, #24
 8012218:	f103 0104 	add.w	r1, r3, #4
 801221c:	d52a      	bpl.n	8012274 <_printf_i+0xa4>
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	6011      	str	r1, [r2, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	da03      	bge.n	801222e <_printf_i+0x5e>
 8012226:	222d      	movs	r2, #45	; 0x2d
 8012228:	425b      	negs	r3, r3
 801222a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801222e:	486f      	ldr	r0, [pc, #444]	; (80123ec <_printf_i+0x21c>)
 8012230:	220a      	movs	r2, #10
 8012232:	e039      	b.n	80122a8 <_printf_i+0xd8>
 8012234:	2973      	cmp	r1, #115	; 0x73
 8012236:	f000 809d 	beq.w	8012374 <_printf_i+0x1a4>
 801223a:	d808      	bhi.n	801224e <_printf_i+0x7e>
 801223c:	296f      	cmp	r1, #111	; 0x6f
 801223e:	d020      	beq.n	8012282 <_printf_i+0xb2>
 8012240:	2970      	cmp	r1, #112	; 0x70
 8012242:	d1dd      	bne.n	8012200 <_printf_i+0x30>
 8012244:	6823      	ldr	r3, [r4, #0]
 8012246:	f043 0320 	orr.w	r3, r3, #32
 801224a:	6023      	str	r3, [r4, #0]
 801224c:	e003      	b.n	8012256 <_printf_i+0x86>
 801224e:	2975      	cmp	r1, #117	; 0x75
 8012250:	d017      	beq.n	8012282 <_printf_i+0xb2>
 8012252:	2978      	cmp	r1, #120	; 0x78
 8012254:	d1d4      	bne.n	8012200 <_printf_i+0x30>
 8012256:	2378      	movs	r3, #120	; 0x78
 8012258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801225c:	4864      	ldr	r0, [pc, #400]	; (80123f0 <_printf_i+0x220>)
 801225e:	e055      	b.n	801230c <_printf_i+0x13c>
 8012260:	6813      	ldr	r3, [r2, #0]
 8012262:	1d19      	adds	r1, r3, #4
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	6011      	str	r1, [r2, #0]
 8012268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801226c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012270:	2301      	movs	r3, #1
 8012272:	e08c      	b.n	801238e <_printf_i+0x1be>
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	6011      	str	r1, [r2, #0]
 8012278:	f010 0f40 	tst.w	r0, #64	; 0x40
 801227c:	bf18      	it	ne
 801227e:	b21b      	sxthne	r3, r3
 8012280:	e7cf      	b.n	8012222 <_printf_i+0x52>
 8012282:	6813      	ldr	r3, [r2, #0]
 8012284:	6825      	ldr	r5, [r4, #0]
 8012286:	1d18      	adds	r0, r3, #4
 8012288:	6010      	str	r0, [r2, #0]
 801228a:	0628      	lsls	r0, r5, #24
 801228c:	d501      	bpl.n	8012292 <_printf_i+0xc2>
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	e002      	b.n	8012298 <_printf_i+0xc8>
 8012292:	0668      	lsls	r0, r5, #25
 8012294:	d5fb      	bpl.n	801228e <_printf_i+0xbe>
 8012296:	881b      	ldrh	r3, [r3, #0]
 8012298:	4854      	ldr	r0, [pc, #336]	; (80123ec <_printf_i+0x21c>)
 801229a:	296f      	cmp	r1, #111	; 0x6f
 801229c:	bf14      	ite	ne
 801229e:	220a      	movne	r2, #10
 80122a0:	2208      	moveq	r2, #8
 80122a2:	2100      	movs	r1, #0
 80122a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80122a8:	6865      	ldr	r5, [r4, #4]
 80122aa:	60a5      	str	r5, [r4, #8]
 80122ac:	2d00      	cmp	r5, #0
 80122ae:	f2c0 8095 	blt.w	80123dc <_printf_i+0x20c>
 80122b2:	6821      	ldr	r1, [r4, #0]
 80122b4:	f021 0104 	bic.w	r1, r1, #4
 80122b8:	6021      	str	r1, [r4, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d13d      	bne.n	801233a <_printf_i+0x16a>
 80122be:	2d00      	cmp	r5, #0
 80122c0:	f040 808e 	bne.w	80123e0 <_printf_i+0x210>
 80122c4:	4665      	mov	r5, ip
 80122c6:	2a08      	cmp	r2, #8
 80122c8:	d10b      	bne.n	80122e2 <_printf_i+0x112>
 80122ca:	6823      	ldr	r3, [r4, #0]
 80122cc:	07db      	lsls	r3, r3, #31
 80122ce:	d508      	bpl.n	80122e2 <_printf_i+0x112>
 80122d0:	6923      	ldr	r3, [r4, #16]
 80122d2:	6862      	ldr	r2, [r4, #4]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	bfde      	ittt	le
 80122d8:	2330      	movle	r3, #48	; 0x30
 80122da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122e2:	ebac 0305 	sub.w	r3, ip, r5
 80122e6:	6123      	str	r3, [r4, #16]
 80122e8:	f8cd 8000 	str.w	r8, [sp]
 80122ec:	463b      	mov	r3, r7
 80122ee:	aa03      	add	r2, sp, #12
 80122f0:	4621      	mov	r1, r4
 80122f2:	4630      	mov	r0, r6
 80122f4:	f7ff fef6 	bl	80120e4 <_printf_common>
 80122f8:	3001      	adds	r0, #1
 80122fa:	d14d      	bne.n	8012398 <_printf_i+0x1c8>
 80122fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012300:	b005      	add	sp, #20
 8012302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012306:	4839      	ldr	r0, [pc, #228]	; (80123ec <_printf_i+0x21c>)
 8012308:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801230c:	6813      	ldr	r3, [r2, #0]
 801230e:	6821      	ldr	r1, [r4, #0]
 8012310:	1d1d      	adds	r5, r3, #4
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	6015      	str	r5, [r2, #0]
 8012316:	060a      	lsls	r2, r1, #24
 8012318:	d50b      	bpl.n	8012332 <_printf_i+0x162>
 801231a:	07ca      	lsls	r2, r1, #31
 801231c:	bf44      	itt	mi
 801231e:	f041 0120 	orrmi.w	r1, r1, #32
 8012322:	6021      	strmi	r1, [r4, #0]
 8012324:	b91b      	cbnz	r3, 801232e <_printf_i+0x15e>
 8012326:	6822      	ldr	r2, [r4, #0]
 8012328:	f022 0220 	bic.w	r2, r2, #32
 801232c:	6022      	str	r2, [r4, #0]
 801232e:	2210      	movs	r2, #16
 8012330:	e7b7      	b.n	80122a2 <_printf_i+0xd2>
 8012332:	064d      	lsls	r5, r1, #25
 8012334:	bf48      	it	mi
 8012336:	b29b      	uxthmi	r3, r3
 8012338:	e7ef      	b.n	801231a <_printf_i+0x14a>
 801233a:	4665      	mov	r5, ip
 801233c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012340:	fb02 3311 	mls	r3, r2, r1, r3
 8012344:	5cc3      	ldrb	r3, [r0, r3]
 8012346:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801234a:	460b      	mov	r3, r1
 801234c:	2900      	cmp	r1, #0
 801234e:	d1f5      	bne.n	801233c <_printf_i+0x16c>
 8012350:	e7b9      	b.n	80122c6 <_printf_i+0xf6>
 8012352:	6813      	ldr	r3, [r2, #0]
 8012354:	6825      	ldr	r5, [r4, #0]
 8012356:	6961      	ldr	r1, [r4, #20]
 8012358:	1d18      	adds	r0, r3, #4
 801235a:	6010      	str	r0, [r2, #0]
 801235c:	0628      	lsls	r0, r5, #24
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	d501      	bpl.n	8012366 <_printf_i+0x196>
 8012362:	6019      	str	r1, [r3, #0]
 8012364:	e002      	b.n	801236c <_printf_i+0x19c>
 8012366:	066a      	lsls	r2, r5, #25
 8012368:	d5fb      	bpl.n	8012362 <_printf_i+0x192>
 801236a:	8019      	strh	r1, [r3, #0]
 801236c:	2300      	movs	r3, #0
 801236e:	6123      	str	r3, [r4, #16]
 8012370:	4665      	mov	r5, ip
 8012372:	e7b9      	b.n	80122e8 <_printf_i+0x118>
 8012374:	6813      	ldr	r3, [r2, #0]
 8012376:	1d19      	adds	r1, r3, #4
 8012378:	6011      	str	r1, [r2, #0]
 801237a:	681d      	ldr	r5, [r3, #0]
 801237c:	6862      	ldr	r2, [r4, #4]
 801237e:	2100      	movs	r1, #0
 8012380:	4628      	mov	r0, r5
 8012382:	f7f5 fe5d 	bl	8008040 <memchr>
 8012386:	b108      	cbz	r0, 801238c <_printf_i+0x1bc>
 8012388:	1b40      	subs	r0, r0, r5
 801238a:	6060      	str	r0, [r4, #4]
 801238c:	6863      	ldr	r3, [r4, #4]
 801238e:	6123      	str	r3, [r4, #16]
 8012390:	2300      	movs	r3, #0
 8012392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012396:	e7a7      	b.n	80122e8 <_printf_i+0x118>
 8012398:	6923      	ldr	r3, [r4, #16]
 801239a:	462a      	mov	r2, r5
 801239c:	4639      	mov	r1, r7
 801239e:	4630      	mov	r0, r6
 80123a0:	47c0      	blx	r8
 80123a2:	3001      	adds	r0, #1
 80123a4:	d0aa      	beq.n	80122fc <_printf_i+0x12c>
 80123a6:	6823      	ldr	r3, [r4, #0]
 80123a8:	079b      	lsls	r3, r3, #30
 80123aa:	d413      	bmi.n	80123d4 <_printf_i+0x204>
 80123ac:	68e0      	ldr	r0, [r4, #12]
 80123ae:	9b03      	ldr	r3, [sp, #12]
 80123b0:	4298      	cmp	r0, r3
 80123b2:	bfb8      	it	lt
 80123b4:	4618      	movlt	r0, r3
 80123b6:	e7a3      	b.n	8012300 <_printf_i+0x130>
 80123b8:	2301      	movs	r3, #1
 80123ba:	464a      	mov	r2, r9
 80123bc:	4639      	mov	r1, r7
 80123be:	4630      	mov	r0, r6
 80123c0:	47c0      	blx	r8
 80123c2:	3001      	adds	r0, #1
 80123c4:	d09a      	beq.n	80122fc <_printf_i+0x12c>
 80123c6:	3501      	adds	r5, #1
 80123c8:	68e3      	ldr	r3, [r4, #12]
 80123ca:	9a03      	ldr	r2, [sp, #12]
 80123cc:	1a9b      	subs	r3, r3, r2
 80123ce:	42ab      	cmp	r3, r5
 80123d0:	dcf2      	bgt.n	80123b8 <_printf_i+0x1e8>
 80123d2:	e7eb      	b.n	80123ac <_printf_i+0x1dc>
 80123d4:	2500      	movs	r5, #0
 80123d6:	f104 0919 	add.w	r9, r4, #25
 80123da:	e7f5      	b.n	80123c8 <_printf_i+0x1f8>
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d1ac      	bne.n	801233a <_printf_i+0x16a>
 80123e0:	7803      	ldrb	r3, [r0, #0]
 80123e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123ea:	e76c      	b.n	80122c6 <_printf_i+0xf6>
 80123ec:	08026191 	.word	0x08026191
 80123f0:	080261a2 	.word	0x080261a2

080123f4 <_sbrk_r>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	4c06      	ldr	r4, [pc, #24]	; (8012410 <_sbrk_r+0x1c>)
 80123f8:	2300      	movs	r3, #0
 80123fa:	4605      	mov	r5, r0
 80123fc:	4608      	mov	r0, r1
 80123fe:	6023      	str	r3, [r4, #0]
 8012400:	f7fe fed0 	bl	80111a4 <_sbrk>
 8012404:	1c43      	adds	r3, r0, #1
 8012406:	d102      	bne.n	801240e <_sbrk_r+0x1a>
 8012408:	6823      	ldr	r3, [r4, #0]
 801240a:	b103      	cbz	r3, 801240e <_sbrk_r+0x1a>
 801240c:	602b      	str	r3, [r5, #0]
 801240e:	bd38      	pop	{r3, r4, r5, pc}
 8012410:	20004664 	.word	0x20004664

08012414 <__sread>:
 8012414:	b510      	push	{r4, lr}
 8012416:	460c      	mov	r4, r1
 8012418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801241c:	f000 f896 	bl	801254c <_read_r>
 8012420:	2800      	cmp	r0, #0
 8012422:	bfab      	itete	ge
 8012424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012426:	89a3      	ldrhlt	r3, [r4, #12]
 8012428:	181b      	addge	r3, r3, r0
 801242a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801242e:	bfac      	ite	ge
 8012430:	6563      	strge	r3, [r4, #84]	; 0x54
 8012432:	81a3      	strhlt	r3, [r4, #12]
 8012434:	bd10      	pop	{r4, pc}

08012436 <__swrite>:
 8012436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801243a:	461f      	mov	r7, r3
 801243c:	898b      	ldrh	r3, [r1, #12]
 801243e:	05db      	lsls	r3, r3, #23
 8012440:	4605      	mov	r5, r0
 8012442:	460c      	mov	r4, r1
 8012444:	4616      	mov	r6, r2
 8012446:	d505      	bpl.n	8012454 <__swrite+0x1e>
 8012448:	2302      	movs	r3, #2
 801244a:	2200      	movs	r2, #0
 801244c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012450:	f000 f868 	bl	8012524 <_lseek_r>
 8012454:	89a3      	ldrh	r3, [r4, #12]
 8012456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801245a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801245e:	81a3      	strh	r3, [r4, #12]
 8012460:	4632      	mov	r2, r6
 8012462:	463b      	mov	r3, r7
 8012464:	4628      	mov	r0, r5
 8012466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801246a:	f000 b817 	b.w	801249c <_write_r>

0801246e <__sseek>:
 801246e:	b510      	push	{r4, lr}
 8012470:	460c      	mov	r4, r1
 8012472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012476:	f000 f855 	bl	8012524 <_lseek_r>
 801247a:	1c43      	adds	r3, r0, #1
 801247c:	89a3      	ldrh	r3, [r4, #12]
 801247e:	bf15      	itete	ne
 8012480:	6560      	strne	r0, [r4, #84]	; 0x54
 8012482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801248a:	81a3      	strheq	r3, [r4, #12]
 801248c:	bf18      	it	ne
 801248e:	81a3      	strhne	r3, [r4, #12]
 8012490:	bd10      	pop	{r4, pc}

08012492 <__sclose>:
 8012492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012496:	f000 b813 	b.w	80124c0 <_close_r>
	...

0801249c <_write_r>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	4c07      	ldr	r4, [pc, #28]	; (80124bc <_write_r+0x20>)
 80124a0:	4605      	mov	r5, r0
 80124a2:	4608      	mov	r0, r1
 80124a4:	4611      	mov	r1, r2
 80124a6:	2200      	movs	r2, #0
 80124a8:	6022      	str	r2, [r4, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	f7fd fe31 	bl	8010112 <_write>
 80124b0:	1c43      	adds	r3, r0, #1
 80124b2:	d102      	bne.n	80124ba <_write_r+0x1e>
 80124b4:	6823      	ldr	r3, [r4, #0]
 80124b6:	b103      	cbz	r3, 80124ba <_write_r+0x1e>
 80124b8:	602b      	str	r3, [r5, #0]
 80124ba:	bd38      	pop	{r3, r4, r5, pc}
 80124bc:	20004664 	.word	0x20004664

080124c0 <_close_r>:
 80124c0:	b538      	push	{r3, r4, r5, lr}
 80124c2:	4c06      	ldr	r4, [pc, #24]	; (80124dc <_close_r+0x1c>)
 80124c4:	2300      	movs	r3, #0
 80124c6:	4605      	mov	r5, r0
 80124c8:	4608      	mov	r0, r1
 80124ca:	6023      	str	r3, [r4, #0]
 80124cc:	f7fe fe35 	bl	801113a <_close>
 80124d0:	1c43      	adds	r3, r0, #1
 80124d2:	d102      	bne.n	80124da <_close_r+0x1a>
 80124d4:	6823      	ldr	r3, [r4, #0]
 80124d6:	b103      	cbz	r3, 80124da <_close_r+0x1a>
 80124d8:	602b      	str	r3, [r5, #0]
 80124da:	bd38      	pop	{r3, r4, r5, pc}
 80124dc:	20004664 	.word	0x20004664

080124e0 <_fstat_r>:
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	4c07      	ldr	r4, [pc, #28]	; (8012500 <_fstat_r+0x20>)
 80124e4:	2300      	movs	r3, #0
 80124e6:	4605      	mov	r5, r0
 80124e8:	4608      	mov	r0, r1
 80124ea:	4611      	mov	r1, r2
 80124ec:	6023      	str	r3, [r4, #0]
 80124ee:	f7fe fe30 	bl	8011152 <_fstat>
 80124f2:	1c43      	adds	r3, r0, #1
 80124f4:	d102      	bne.n	80124fc <_fstat_r+0x1c>
 80124f6:	6823      	ldr	r3, [r4, #0]
 80124f8:	b103      	cbz	r3, 80124fc <_fstat_r+0x1c>
 80124fa:	602b      	str	r3, [r5, #0]
 80124fc:	bd38      	pop	{r3, r4, r5, pc}
 80124fe:	bf00      	nop
 8012500:	20004664 	.word	0x20004664

08012504 <_isatty_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4c06      	ldr	r4, [pc, #24]	; (8012520 <_isatty_r+0x1c>)
 8012508:	2300      	movs	r3, #0
 801250a:	4605      	mov	r5, r0
 801250c:	4608      	mov	r0, r1
 801250e:	6023      	str	r3, [r4, #0]
 8012510:	f7fe fe2f 	bl	8011172 <_isatty>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	d102      	bne.n	801251e <_isatty_r+0x1a>
 8012518:	6823      	ldr	r3, [r4, #0]
 801251a:	b103      	cbz	r3, 801251e <_isatty_r+0x1a>
 801251c:	602b      	str	r3, [r5, #0]
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	20004664 	.word	0x20004664

08012524 <_lseek_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	4c07      	ldr	r4, [pc, #28]	; (8012544 <_lseek_r+0x20>)
 8012528:	4605      	mov	r5, r0
 801252a:	4608      	mov	r0, r1
 801252c:	4611      	mov	r1, r2
 801252e:	2200      	movs	r2, #0
 8012530:	6022      	str	r2, [r4, #0]
 8012532:	461a      	mov	r2, r3
 8012534:	f7fe fe28 	bl	8011188 <_lseek>
 8012538:	1c43      	adds	r3, r0, #1
 801253a:	d102      	bne.n	8012542 <_lseek_r+0x1e>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	b103      	cbz	r3, 8012542 <_lseek_r+0x1e>
 8012540:	602b      	str	r3, [r5, #0]
 8012542:	bd38      	pop	{r3, r4, r5, pc}
 8012544:	20004664 	.word	0x20004664

08012548 <__malloc_lock>:
 8012548:	4770      	bx	lr

0801254a <__malloc_unlock>:
 801254a:	4770      	bx	lr

0801254c <_read_r>:
 801254c:	b538      	push	{r3, r4, r5, lr}
 801254e:	4c07      	ldr	r4, [pc, #28]	; (801256c <_read_r+0x20>)
 8012550:	4605      	mov	r5, r0
 8012552:	4608      	mov	r0, r1
 8012554:	4611      	mov	r1, r2
 8012556:	2200      	movs	r2, #0
 8012558:	6022      	str	r2, [r4, #0]
 801255a:	461a      	mov	r2, r3
 801255c:	f7fe fdd0 	bl	8011100 <_read>
 8012560:	1c43      	adds	r3, r0, #1
 8012562:	d102      	bne.n	801256a <_read_r+0x1e>
 8012564:	6823      	ldr	r3, [r4, #0]
 8012566:	b103      	cbz	r3, 801256a <_read_r+0x1e>
 8012568:	602b      	str	r3, [r5, #0]
 801256a:	bd38      	pop	{r3, r4, r5, pc}
 801256c:	20004664 	.word	0x20004664

08012570 <fmodf>:
 8012570:	b5d0      	push	{r4, r6, r7, lr}
 8012572:	ed2d 8b02 	vpush	{d8}
 8012576:	b08a      	sub	sp, #40	; 0x28
 8012578:	eef0 8a40 	vmov.f32	s17, s0
 801257c:	eeb0 8a60 	vmov.f32	s16, s1
 8012580:	f000 f852 	bl	8012628 <__ieee754_fmodf>
 8012584:	4b26      	ldr	r3, [pc, #152]	; (8012620 <fmodf+0xb0>)
 8012586:	f993 4000 	ldrsb.w	r4, [r3]
 801258a:	1c63      	adds	r3, r4, #1
 801258c:	d035      	beq.n	80125fa <fmodf+0x8a>
 801258e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012596:	d630      	bvs.n	80125fa <fmodf+0x8a>
 8012598:	eef4 8a68 	vcmp.f32	s17, s17
 801259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a0:	d62b      	bvs.n	80125fa <fmodf+0x8a>
 80125a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125aa:	d126      	bne.n	80125fa <fmodf+0x8a>
 80125ac:	2301      	movs	r3, #1
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	4b1c      	ldr	r3, [pc, #112]	; (8012624 <fmodf+0xb4>)
 80125b2:	9301      	str	r3, [sp, #4]
 80125b4:	ee18 0a90 	vmov	r0, s17
 80125b8:	2300      	movs	r3, #0
 80125ba:	9308      	str	r3, [sp, #32]
 80125bc:	f7f5 fef4 	bl	80083a8 <__aeabi_f2d>
 80125c0:	4606      	mov	r6, r0
 80125c2:	460f      	mov	r7, r1
 80125c4:	ee18 0a10 	vmov	r0, s16
 80125c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80125cc:	f7f5 feec 	bl	80083a8 <__aeabi_f2d>
 80125d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80125d4:	b9ac      	cbnz	r4, 8012602 <fmodf+0x92>
 80125d6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80125da:	4668      	mov	r0, sp
 80125dc:	f000 f8ac 	bl	8012738 <matherr>
 80125e0:	b1c8      	cbz	r0, 8012616 <fmodf+0xa6>
 80125e2:	9b08      	ldr	r3, [sp, #32]
 80125e4:	b11b      	cbz	r3, 80125ee <fmodf+0x7e>
 80125e6:	f7ff f83d 	bl	8011664 <__errno>
 80125ea:	9b08      	ldr	r3, [sp, #32]
 80125ec:	6003      	str	r3, [r0, #0]
 80125ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125f2:	f7f6 f9cb 	bl	800898c <__aeabi_d2f>
 80125f6:	ee00 0a10 	vmov	s0, r0
 80125fa:	b00a      	add	sp, #40	; 0x28
 80125fc:	ecbd 8b02 	vpop	{d8}
 8012600:	bdd0      	pop	{r4, r6, r7, pc}
 8012602:	2200      	movs	r2, #0
 8012604:	2300      	movs	r3, #0
 8012606:	4610      	mov	r0, r2
 8012608:	4619      	mov	r1, r3
 801260a:	f7f6 f84f 	bl	80086ac <__aeabi_ddiv>
 801260e:	2c02      	cmp	r4, #2
 8012610:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012614:	d1e1      	bne.n	80125da <fmodf+0x6a>
 8012616:	f7ff f825 	bl	8011664 <__errno>
 801261a:	2321      	movs	r3, #33	; 0x21
 801261c:	6003      	str	r3, [r0, #0]
 801261e:	e7e0      	b.n	80125e2 <fmodf+0x72>
 8012620:	20000074 	.word	0x20000074
 8012624:	080261b3 	.word	0x080261b3

08012628 <__ieee754_fmodf>:
 8012628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801262a:	ee10 6a90 	vmov	r6, s1
 801262e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8012632:	ee10 3a10 	vmov	r3, s0
 8012636:	d009      	beq.n	801264c <__ieee754_fmodf+0x24>
 8012638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801263c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012640:	ee10 7a10 	vmov	r7, s0
 8012644:	da02      	bge.n	801264c <__ieee754_fmodf+0x24>
 8012646:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801264a:	dd0a      	ble.n	8012662 <__ieee754_fmodf+0x3a>
 801264c:	ee07 3a90 	vmov	s15, r3
 8012650:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8012654:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8012658:	ee17 3a90 	vmov	r3, s15
 801265c:	ee00 3a10 	vmov	s0, r3
 8012660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012662:	42a9      	cmp	r1, r5
 8012664:	dbfa      	blt.n	801265c <__ieee754_fmodf+0x34>
 8012666:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 801266a:	d105      	bne.n	8012678 <__ieee754_fmodf+0x50>
 801266c:	4a30      	ldr	r2, [pc, #192]	; (8012730 <__ieee754_fmodf+0x108>)
 801266e:	0fe3      	lsrs	r3, r4, #31
 8012670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	e7f1      	b.n	801265c <__ieee754_fmodf+0x34>
 8012678:	4b2e      	ldr	r3, [pc, #184]	; (8012734 <__ieee754_fmodf+0x10c>)
 801267a:	4299      	cmp	r1, r3
 801267c:	dc3e      	bgt.n	80126fc <__ieee754_fmodf+0xd4>
 801267e:	020a      	lsls	r2, r1, #8
 8012680:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012684:	2a00      	cmp	r2, #0
 8012686:	dc36      	bgt.n	80126f6 <__ieee754_fmodf+0xce>
 8012688:	429d      	cmp	r5, r3
 801268a:	dc3a      	bgt.n	8012702 <__ieee754_fmodf+0xda>
 801268c:	022b      	lsls	r3, r5, #8
 801268e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8012692:	005b      	lsls	r3, r3, #1
 8012694:	f102 32ff 	add.w	r2, r2, #4294967295
 8012698:	d5fb      	bpl.n	8012692 <__ieee754_fmodf+0x6a>
 801269a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801269e:	bfbb      	ittet	lt
 80126a0:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80126a4:	1a1b      	sublt	r3, r3, r0
 80126a6:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80126aa:	4099      	lsllt	r1, r3
 80126ac:	bfa8      	it	ge
 80126ae:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80126b2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80126b6:	bfb5      	itete	lt
 80126b8:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80126bc:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80126c0:	1a9b      	sublt	r3, r3, r2
 80126c2:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80126c6:	bfb8      	it	lt
 80126c8:	409d      	lsllt	r5, r3
 80126ca:	1a80      	subs	r0, r0, r2
 80126cc:	1b4b      	subs	r3, r1, r5
 80126ce:	b9d8      	cbnz	r0, 8012708 <__ieee754_fmodf+0xe0>
 80126d0:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80126d4:	bf28      	it	cs
 80126d6:	460b      	movcs	r3, r1
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d0c7      	beq.n	801266c <__ieee754_fmodf+0x44>
 80126dc:	4915      	ldr	r1, [pc, #84]	; (8012734 <__ieee754_fmodf+0x10c>)
 80126de:	428b      	cmp	r3, r1
 80126e0:	dd1a      	ble.n	8012718 <__ieee754_fmodf+0xf0>
 80126e2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80126e6:	db1a      	blt.n	801271e <__ieee754_fmodf+0xf6>
 80126e8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80126ec:	4323      	orrs	r3, r4
 80126ee:	327f      	adds	r2, #127	; 0x7f
 80126f0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80126f4:	e7b2      	b.n	801265c <__ieee754_fmodf+0x34>
 80126f6:	3801      	subs	r0, #1
 80126f8:	0052      	lsls	r2, r2, #1
 80126fa:	e7c3      	b.n	8012684 <__ieee754_fmodf+0x5c>
 80126fc:	15c8      	asrs	r0, r1, #23
 80126fe:	387f      	subs	r0, #127	; 0x7f
 8012700:	e7c2      	b.n	8012688 <__ieee754_fmodf+0x60>
 8012702:	15ea      	asrs	r2, r5, #23
 8012704:	3a7f      	subs	r2, #127	; 0x7f
 8012706:	e7c8      	b.n	801269a <__ieee754_fmodf+0x72>
 8012708:	2b00      	cmp	r3, #0
 801270a:	da02      	bge.n	8012712 <__ieee754_fmodf+0xea>
 801270c:	0049      	lsls	r1, r1, #1
 801270e:	3801      	subs	r0, #1
 8012710:	e7dc      	b.n	80126cc <__ieee754_fmodf+0xa4>
 8012712:	d0ab      	beq.n	801266c <__ieee754_fmodf+0x44>
 8012714:	0059      	lsls	r1, r3, #1
 8012716:	e7fa      	b.n	801270e <__ieee754_fmodf+0xe6>
 8012718:	005b      	lsls	r3, r3, #1
 801271a:	3a01      	subs	r2, #1
 801271c:	e7df      	b.n	80126de <__ieee754_fmodf+0xb6>
 801271e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012722:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012726:	3282      	adds	r2, #130	; 0x82
 8012728:	4113      	asrs	r3, r2
 801272a:	4323      	orrs	r3, r4
 801272c:	e796      	b.n	801265c <__ieee754_fmodf+0x34>
 801272e:	bf00      	nop
 8012730:	080261bc 	.word	0x080261bc
 8012734:	007fffff 	.word	0x007fffff

08012738 <matherr>:
 8012738:	2000      	movs	r0, #0
 801273a:	4770      	bx	lr

0801273c <_init>:
 801273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801273e:	bf00      	nop
 8012740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012742:	bc08      	pop	{r3}
 8012744:	469e      	mov	lr, r3
 8012746:	4770      	bx	lr

08012748 <_fini>:
 8012748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801274a:	bf00      	nop
 801274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801274e:	bc08      	pop	{r3}
 8012750:	469e      	mov	lr, r3
 8012752:	4770      	bx	lr
