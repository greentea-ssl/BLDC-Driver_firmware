
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000b60c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013c48  08013610  08013610  00023610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08027258  08027258  000400a4  2**0
                  CONTENTS
  5 .ARM          00000008  08027258  08027258  00037258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08027260  08027260  000400a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08027260  08027260  00037260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08027264  08027264  00037264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a4  20000000  08027268  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004540  200000a4  0802730c  000400a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200045e4  0802730c  000445e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1f3  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003fa4  00000000  00000000  0005b2c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014f0  00000000  00000000  0005f270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012e0  00000000  00000000  00060760  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002623f  00000000  00000000  00061a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000138af  00000000  00000000  00087c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000da516  00000000  00000000  0009b52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00175a44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006028  00000000  00000000  00175ac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200000a4 	.word	0x200000a4
 800801c:	00000000 	.word	0x00000000
 8008020:	080135f4 	.word	0x080135f4

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200000a8 	.word	0x200000a8
 800803c:	080135f4 	.word	0x080135f4

08008040 <memchr>:
 8008040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008044:	2a10      	cmp	r2, #16
 8008046:	db2b      	blt.n	80080a0 <memchr+0x60>
 8008048:	f010 0f07 	tst.w	r0, #7
 800804c:	d008      	beq.n	8008060 <memchr+0x20>
 800804e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008052:	3a01      	subs	r2, #1
 8008054:	428b      	cmp	r3, r1
 8008056:	d02d      	beq.n	80080b4 <memchr+0x74>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	b342      	cbz	r2, 80080b0 <memchr+0x70>
 800805e:	d1f6      	bne.n	800804e <memchr+0xe>
 8008060:	b4f0      	push	{r4, r5, r6, r7}
 8008062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800806a:	f022 0407 	bic.w	r4, r2, #7
 800806e:	f07f 0700 	mvns.w	r7, #0
 8008072:	2300      	movs	r3, #0
 8008074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008078:	3c08      	subs	r4, #8
 800807a:	ea85 0501 	eor.w	r5, r5, r1
 800807e:	ea86 0601 	eor.w	r6, r6, r1
 8008082:	fa85 f547 	uadd8	r5, r5, r7
 8008086:	faa3 f587 	sel	r5, r3, r7
 800808a:	fa86 f647 	uadd8	r6, r6, r7
 800808e:	faa5 f687 	sel	r6, r5, r7
 8008092:	b98e      	cbnz	r6, 80080b8 <memchr+0x78>
 8008094:	d1ee      	bne.n	8008074 <memchr+0x34>
 8008096:	bcf0      	pop	{r4, r5, r6, r7}
 8008098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800809c:	f002 0207 	and.w	r2, r2, #7
 80080a0:	b132      	cbz	r2, 80080b0 <memchr+0x70>
 80080a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080a6:	3a01      	subs	r2, #1
 80080a8:	ea83 0301 	eor.w	r3, r3, r1
 80080ac:	b113      	cbz	r3, 80080b4 <memchr+0x74>
 80080ae:	d1f8      	bne.n	80080a2 <memchr+0x62>
 80080b0:	2000      	movs	r0, #0
 80080b2:	4770      	bx	lr
 80080b4:	3801      	subs	r0, #1
 80080b6:	4770      	bx	lr
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	bf06      	itte	eq
 80080bc:	4635      	moveq	r5, r6
 80080be:	3803      	subeq	r0, #3
 80080c0:	3807      	subne	r0, #7
 80080c2:	f015 0f01 	tst.w	r5, #1
 80080c6:	d107      	bne.n	80080d8 <memchr+0x98>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080ce:	bf02      	ittt	eq
 80080d0:	3001      	addeq	r0, #1
 80080d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080d6:	3001      	addeq	r0, #1
 80080d8:	bcf0      	pop	{r4, r5, r6, r7}
 80080da:	3801      	subs	r0, #1
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <__aeabi_drsub>:
 80080e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080e4:	e002      	b.n	80080ec <__adddf3>
 80080e6:	bf00      	nop

080080e8 <__aeabi_dsub>:
 80080e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080ec <__adddf3>:
 80080ec:	b530      	push	{r4, r5, lr}
 80080ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080f6:	ea94 0f05 	teq	r4, r5
 80080fa:	bf08      	it	eq
 80080fc:	ea90 0f02 	teqeq	r0, r2
 8008100:	bf1f      	itttt	ne
 8008102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008106:	ea55 0c02 	orrsne.w	ip, r5, r2
 800810a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800810e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008112:	f000 80e2 	beq.w	80082da <__adddf3+0x1ee>
 8008116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800811a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800811e:	bfb8      	it	lt
 8008120:	426d      	neglt	r5, r5
 8008122:	dd0c      	ble.n	800813e <__adddf3+0x52>
 8008124:	442c      	add	r4, r5
 8008126:	ea80 0202 	eor.w	r2, r0, r2
 800812a:	ea81 0303 	eor.w	r3, r1, r3
 800812e:	ea82 0000 	eor.w	r0, r2, r0
 8008132:	ea83 0101 	eor.w	r1, r3, r1
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	2d36      	cmp	r5, #54	; 0x36
 8008140:	bf88      	it	hi
 8008142:	bd30      	pophi	{r4, r5, pc}
 8008144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800814c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008154:	d002      	beq.n	800815c <__adddf3+0x70>
 8008156:	4240      	negs	r0, r0
 8008158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800815c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008168:	d002      	beq.n	8008170 <__adddf3+0x84>
 800816a:	4252      	negs	r2, r2
 800816c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008170:	ea94 0f05 	teq	r4, r5
 8008174:	f000 80a7 	beq.w	80082c6 <__adddf3+0x1da>
 8008178:	f1a4 0401 	sub.w	r4, r4, #1
 800817c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008180:	db0d      	blt.n	800819e <__adddf3+0xb2>
 8008182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008186:	fa22 f205 	lsr.w	r2, r2, r5
 800818a:	1880      	adds	r0, r0, r2
 800818c:	f141 0100 	adc.w	r1, r1, #0
 8008190:	fa03 f20e 	lsl.w	r2, r3, lr
 8008194:	1880      	adds	r0, r0, r2
 8008196:	fa43 f305 	asr.w	r3, r3, r5
 800819a:	4159      	adcs	r1, r3
 800819c:	e00e      	b.n	80081bc <__adddf3+0xd0>
 800819e:	f1a5 0520 	sub.w	r5, r5, #32
 80081a2:	f10e 0e20 	add.w	lr, lr, #32
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081ac:	bf28      	it	cs
 80081ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081b2:	fa43 f305 	asr.w	r3, r3, r5
 80081b6:	18c0      	adds	r0, r0, r3
 80081b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081c0:	d507      	bpl.n	80081d2 <__adddf3+0xe6>
 80081c2:	f04f 0e00 	mov.w	lr, #0
 80081c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80081d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081d6:	d31b      	bcc.n	8008210 <__adddf3+0x124>
 80081d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081dc:	d30c      	bcc.n	80081f8 <__adddf3+0x10c>
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081e8:	f104 0401 	add.w	r4, r4, #1
 80081ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081f4:	f080 809a 	bcs.w	800832c <__adddf3+0x240>
 80081f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081fc:	bf08      	it	eq
 80081fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008202:	f150 0000 	adcs.w	r0, r0, #0
 8008206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800820a:	ea41 0105 	orr.w	r1, r1, r5
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008214:	4140      	adcs	r0, r0
 8008216:	eb41 0101 	adc.w	r1, r1, r1
 800821a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800821e:	f1a4 0401 	sub.w	r4, r4, #1
 8008222:	d1e9      	bne.n	80081f8 <__adddf3+0x10c>
 8008224:	f091 0f00 	teq	r1, #0
 8008228:	bf04      	itt	eq
 800822a:	4601      	moveq	r1, r0
 800822c:	2000      	moveq	r0, #0
 800822e:	fab1 f381 	clz	r3, r1
 8008232:	bf08      	it	eq
 8008234:	3320      	addeq	r3, #32
 8008236:	f1a3 030b 	sub.w	r3, r3, #11
 800823a:	f1b3 0220 	subs.w	r2, r3, #32
 800823e:	da0c      	bge.n	800825a <__adddf3+0x16e>
 8008240:	320c      	adds	r2, #12
 8008242:	dd08      	ble.n	8008256 <__adddf3+0x16a>
 8008244:	f102 0c14 	add.w	ip, r2, #20
 8008248:	f1c2 020c 	rsb	r2, r2, #12
 800824c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008250:	fa21 f102 	lsr.w	r1, r1, r2
 8008254:	e00c      	b.n	8008270 <__adddf3+0x184>
 8008256:	f102 0214 	add.w	r2, r2, #20
 800825a:	bfd8      	it	le
 800825c:	f1c2 0c20 	rsble	ip, r2, #32
 8008260:	fa01 f102 	lsl.w	r1, r1, r2
 8008264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008268:	bfdc      	itt	le
 800826a:	ea41 010c 	orrle.w	r1, r1, ip
 800826e:	4090      	lslle	r0, r2
 8008270:	1ae4      	subs	r4, r4, r3
 8008272:	bfa2      	ittt	ge
 8008274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008278:	4329      	orrge	r1, r5
 800827a:	bd30      	popge	{r4, r5, pc}
 800827c:	ea6f 0404 	mvn.w	r4, r4
 8008280:	3c1f      	subs	r4, #31
 8008282:	da1c      	bge.n	80082be <__adddf3+0x1d2>
 8008284:	340c      	adds	r4, #12
 8008286:	dc0e      	bgt.n	80082a6 <__adddf3+0x1ba>
 8008288:	f104 0414 	add.w	r4, r4, #20
 800828c:	f1c4 0220 	rsb	r2, r4, #32
 8008290:	fa20 f004 	lsr.w	r0, r0, r4
 8008294:	fa01 f302 	lsl.w	r3, r1, r2
 8008298:	ea40 0003 	orr.w	r0, r0, r3
 800829c:	fa21 f304 	lsr.w	r3, r1, r4
 80082a0:	ea45 0103 	orr.w	r1, r5, r3
 80082a4:	bd30      	pop	{r4, r5, pc}
 80082a6:	f1c4 040c 	rsb	r4, r4, #12
 80082aa:	f1c4 0220 	rsb	r2, r4, #32
 80082ae:	fa20 f002 	lsr.w	r0, r0, r2
 80082b2:	fa01 f304 	lsl.w	r3, r1, r4
 80082b6:	ea40 0003 	orr.w	r0, r0, r3
 80082ba:	4629      	mov	r1, r5
 80082bc:	bd30      	pop	{r4, r5, pc}
 80082be:	fa21 f004 	lsr.w	r0, r1, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	bd30      	pop	{r4, r5, pc}
 80082c6:	f094 0f00 	teq	r4, #0
 80082ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082ce:	bf06      	itte	eq
 80082d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082d4:	3401      	addeq	r4, #1
 80082d6:	3d01      	subne	r5, #1
 80082d8:	e74e      	b.n	8008178 <__adddf3+0x8c>
 80082da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082de:	bf18      	it	ne
 80082e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082e4:	d029      	beq.n	800833a <__adddf3+0x24e>
 80082e6:	ea94 0f05 	teq	r4, r5
 80082ea:	bf08      	it	eq
 80082ec:	ea90 0f02 	teqeq	r0, r2
 80082f0:	d005      	beq.n	80082fe <__adddf3+0x212>
 80082f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80082f6:	bf04      	itt	eq
 80082f8:	4619      	moveq	r1, r3
 80082fa:	4610      	moveq	r0, r2
 80082fc:	bd30      	pop	{r4, r5, pc}
 80082fe:	ea91 0f03 	teq	r1, r3
 8008302:	bf1e      	ittt	ne
 8008304:	2100      	movne	r1, #0
 8008306:	2000      	movne	r0, #0
 8008308:	bd30      	popne	{r4, r5, pc}
 800830a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800830e:	d105      	bne.n	800831c <__adddf3+0x230>
 8008310:	0040      	lsls	r0, r0, #1
 8008312:	4149      	adcs	r1, r1
 8008314:	bf28      	it	cs
 8008316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008320:	bf3c      	itt	cc
 8008322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008326:	bd30      	popcc	{r4, r5, pc}
 8008328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800832c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800833e:	bf1a      	itte	ne
 8008340:	4619      	movne	r1, r3
 8008342:	4610      	movne	r0, r2
 8008344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008348:	bf1c      	itt	ne
 800834a:	460b      	movne	r3, r1
 800834c:	4602      	movne	r2, r0
 800834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008352:	bf06      	itte	eq
 8008354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008358:	ea91 0f03 	teqeq	r1, r3
 800835c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008360:	bd30      	pop	{r4, r5, pc}
 8008362:	bf00      	nop

08008364 <__aeabi_ui2d>:
 8008364:	f090 0f00 	teq	r0, #0
 8008368:	bf04      	itt	eq
 800836a:	2100      	moveq	r1, #0
 800836c:	4770      	bxeq	lr
 800836e:	b530      	push	{r4, r5, lr}
 8008370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008378:	f04f 0500 	mov.w	r5, #0
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	e750      	b.n	8008224 <__adddf3+0x138>
 8008382:	bf00      	nop

08008384 <__aeabi_i2d>:
 8008384:	f090 0f00 	teq	r0, #0
 8008388:	bf04      	itt	eq
 800838a:	2100      	moveq	r1, #0
 800838c:	4770      	bxeq	lr
 800838e:	b530      	push	{r4, r5, lr}
 8008390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800839c:	bf48      	it	mi
 800839e:	4240      	negmi	r0, r0
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	e73e      	b.n	8008224 <__adddf3+0x138>
 80083a6:	bf00      	nop

080083a8 <__aeabi_f2d>:
 80083a8:	0042      	lsls	r2, r0, #1
 80083aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80083b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083b6:	bf1f      	itttt	ne
 80083b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083c4:	4770      	bxne	lr
 80083c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083ca:	bf08      	it	eq
 80083cc:	4770      	bxeq	lr
 80083ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083d8:	4770      	bxeq	lr
 80083da:	b530      	push	{r4, r5, lr}
 80083dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083e8:	e71c      	b.n	8008224 <__adddf3+0x138>
 80083ea:	bf00      	nop

080083ec <__aeabi_ul2d>:
 80083ec:	ea50 0201 	orrs.w	r2, r0, r1
 80083f0:	bf08      	it	eq
 80083f2:	4770      	bxeq	lr
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	f04f 0500 	mov.w	r5, #0
 80083fa:	e00a      	b.n	8008412 <__aeabi_l2d+0x16>

080083fc <__aeabi_l2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800840a:	d502      	bpl.n	8008412 <__aeabi_l2d+0x16>
 800840c:	4240      	negs	r0, r0
 800840e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800841a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800841e:	f43f aed8 	beq.w	80081d2 <__adddf3+0xe6>
 8008422:	f04f 0203 	mov.w	r2, #3
 8008426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800842a:	bf18      	it	ne
 800842c:	3203      	addne	r2, #3
 800842e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008432:	bf18      	it	ne
 8008434:	3203      	addne	r2, #3
 8008436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800843a:	f1c2 0320 	rsb	r3, r2, #32
 800843e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008442:	fa20 f002 	lsr.w	r0, r0, r2
 8008446:	fa01 fe03 	lsl.w	lr, r1, r3
 800844a:	ea40 000e 	orr.w	r0, r0, lr
 800844e:	fa21 f102 	lsr.w	r1, r1, r2
 8008452:	4414      	add	r4, r2
 8008454:	e6bd      	b.n	80081d2 <__adddf3+0xe6>
 8008456:	bf00      	nop

08008458 <__aeabi_dmul>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800845e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008466:	bf1d      	ittte	ne
 8008468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800846c:	ea94 0f0c 	teqne	r4, ip
 8008470:	ea95 0f0c 	teqne	r5, ip
 8008474:	f000 f8de 	bleq	8008634 <__aeabi_dmul+0x1dc>
 8008478:	442c      	add	r4, r5
 800847a:	ea81 0603 	eor.w	r6, r1, r3
 800847e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800848a:	bf18      	it	ne
 800848c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	d038      	beq.n	800850c <__aeabi_dmul+0xb4>
 800849a:	fba0 ce02 	umull	ip, lr, r0, r2
 800849e:	f04f 0500 	mov.w	r5, #0
 80084a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084ae:	f04f 0600 	mov.w	r6, #0
 80084b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084b6:	f09c 0f00 	teq	ip, #0
 80084ba:	bf18      	it	ne
 80084bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084cc:	d204      	bcs.n	80084d8 <__aeabi_dmul+0x80>
 80084ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084d2:	416d      	adcs	r5, r5
 80084d4:	eb46 0606 	adc.w	r6, r6, r6
 80084d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084f0:	bf88      	it	hi
 80084f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084f6:	d81e      	bhi.n	8008536 <__aeabi_dmul+0xde>
 80084f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084fc:	bf08      	it	eq
 80084fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008502:	f150 0000 	adcs.w	r0, r0, #0
 8008506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008510:	ea46 0101 	orr.w	r1, r6, r1
 8008514:	ea40 0002 	orr.w	r0, r0, r2
 8008518:	ea81 0103 	eor.w	r1, r1, r3
 800851c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008520:	bfc2      	ittt	gt
 8008522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800852a:	bd70      	popgt	{r4, r5, r6, pc}
 800852c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008530:	f04f 0e00 	mov.w	lr, #0
 8008534:	3c01      	subs	r4, #1
 8008536:	f300 80ab 	bgt.w	8008690 <__aeabi_dmul+0x238>
 800853a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800853e:	bfde      	ittt	le
 8008540:	2000      	movle	r0, #0
 8008542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008546:	bd70      	pople	{r4, r5, r6, pc}
 8008548:	f1c4 0400 	rsb	r4, r4, #0
 800854c:	3c20      	subs	r4, #32
 800854e:	da35      	bge.n	80085bc <__aeabi_dmul+0x164>
 8008550:	340c      	adds	r4, #12
 8008552:	dc1b      	bgt.n	800858c <__aeabi_dmul+0x134>
 8008554:	f104 0414 	add.w	r4, r4, #20
 8008558:	f1c4 0520 	rsb	r5, r4, #32
 800855c:	fa00 f305 	lsl.w	r3, r0, r5
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f205 	lsl.w	r2, r1, r5
 8008568:	ea40 0002 	orr.w	r0, r0, r2
 800856c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008578:	fa21 f604 	lsr.w	r6, r1, r4
 800857c:	eb42 0106 	adc.w	r1, r2, r6
 8008580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008584:	bf08      	it	eq
 8008586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f1c4 040c 	rsb	r4, r4, #12
 8008590:	f1c4 0520 	rsb	r5, r4, #32
 8008594:	fa00 f304 	lsl.w	r3, r0, r4
 8008598:	fa20 f005 	lsr.w	r0, r0, r5
 800859c:	fa01 f204 	lsl.w	r2, r1, r4
 80085a0:	ea40 0002 	orr.w	r0, r0, r2
 80085a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085ac:	f141 0100 	adc.w	r1, r1, #0
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 0520 	rsb	r5, r4, #32
 80085c0:	fa00 f205 	lsl.w	r2, r0, r5
 80085c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085c8:	fa20 f304 	lsr.w	r3, r0, r4
 80085cc:	fa01 f205 	lsl.w	r2, r1, r5
 80085d0:	ea43 0302 	orr.w	r3, r3, r2
 80085d4:	fa21 f004 	lsr.w	r0, r1, r4
 80085d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085dc:	fa21 f204 	lsr.w	r2, r1, r4
 80085e0:	ea20 0002 	bic.w	r0, r0, r2
 80085e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085ec:	bf08      	it	eq
 80085ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	f094 0f00 	teq	r4, #0
 80085f8:	d10f      	bne.n	800861a <__aeabi_dmul+0x1c2>
 80085fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085fe:	0040      	lsls	r0, r0, #1
 8008600:	eb41 0101 	adc.w	r1, r1, r1
 8008604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008608:	bf08      	it	eq
 800860a:	3c01      	subeq	r4, #1
 800860c:	d0f7      	beq.n	80085fe <__aeabi_dmul+0x1a6>
 800860e:	ea41 0106 	orr.w	r1, r1, r6
 8008612:	f095 0f00 	teq	r5, #0
 8008616:	bf18      	it	ne
 8008618:	4770      	bxne	lr
 800861a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800861e:	0052      	lsls	r2, r2, #1
 8008620:	eb43 0303 	adc.w	r3, r3, r3
 8008624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008628:	bf08      	it	eq
 800862a:	3d01      	subeq	r5, #1
 800862c:	d0f7      	beq.n	800861e <__aeabi_dmul+0x1c6>
 800862e:	ea43 0306 	orr.w	r3, r3, r6
 8008632:	4770      	bx	lr
 8008634:	ea94 0f0c 	teq	r4, ip
 8008638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800863c:	bf18      	it	ne
 800863e:	ea95 0f0c 	teqne	r5, ip
 8008642:	d00c      	beq.n	800865e <__aeabi_dmul+0x206>
 8008644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008648:	bf18      	it	ne
 800864a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800864e:	d1d1      	bne.n	80085f4 <__aeabi_dmul+0x19c>
 8008650:	ea81 0103 	eor.w	r1, r1, r3
 8008654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008658:	f04f 0000 	mov.w	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008662:	bf06      	itte	eq
 8008664:	4610      	moveq	r0, r2
 8008666:	4619      	moveq	r1, r3
 8008668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800866c:	d019      	beq.n	80086a2 <__aeabi_dmul+0x24a>
 800866e:	ea94 0f0c 	teq	r4, ip
 8008672:	d102      	bne.n	800867a <__aeabi_dmul+0x222>
 8008674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008678:	d113      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800867a:	ea95 0f0c 	teq	r5, ip
 800867e:	d105      	bne.n	800868c <__aeabi_dmul+0x234>
 8008680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008684:	bf1c      	itt	ne
 8008686:	4610      	movne	r0, r2
 8008688:	4619      	movne	r1, r3
 800868a:	d10a      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800868c:	ea81 0103 	eor.w	r1, r1, r3
 8008690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869c:	f04f 0000 	mov.w	r0, #0
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086aa:	bd70      	pop	{r4, r5, r6, pc}

080086ac <__aeabi_ddiv>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ba:	bf1d      	ittte	ne
 80086bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086c0:	ea94 0f0c 	teqne	r4, ip
 80086c4:	ea95 0f0c 	teqne	r5, ip
 80086c8:	f000 f8a7 	bleq	800881a <__aeabi_ddiv+0x16e>
 80086cc:	eba4 0405 	sub.w	r4, r4, r5
 80086d0:	ea81 0e03 	eor.w	lr, r1, r3
 80086d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086dc:	f000 8088 	beq.w	80087f0 <__aeabi_ddiv+0x144>
 80086e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008704:	429d      	cmp	r5, r3
 8008706:	bf08      	it	eq
 8008708:	4296      	cmpeq	r6, r2
 800870a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800870e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008712:	d202      	bcs.n	800871a <__aeabi_ddiv+0x6e>
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	ea4f 0232 	mov.w	r2, r2, rrx
 800871a:	1ab6      	subs	r6, r6, r2
 800871c:	eb65 0503 	sbc.w	r5, r5, r3
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	ea4f 0232 	mov.w	r2, r2, rrx
 8008726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800872a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800872e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008736:	bf22      	ittt	cs
 8008738:	1ab6      	subcs	r6, r6, r2
 800873a:	4675      	movcs	r5, lr
 800873c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	ea4f 0232 	mov.w	r2, r2, rrx
 8008746:	ebb6 0e02 	subs.w	lr, r6, r2
 800874a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800874e:	bf22      	ittt	cs
 8008750:	1ab6      	subcs	r6, r6, r2
 8008752:	4675      	movcs	r5, lr
 8008754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	ea4f 0232 	mov.w	r2, r2, rrx
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008788:	ea55 0e06 	orrs.w	lr, r5, r6
 800878c:	d018      	beq.n	80087c0 <__aeabi_ddiv+0x114>
 800878e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800879a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800879e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087aa:	d1c0      	bne.n	800872e <__aeabi_ddiv+0x82>
 80087ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087b0:	d10b      	bne.n	80087ca <__aeabi_ddiv+0x11e>
 80087b2:	ea41 0100 	orr.w	r1, r1, r0
 80087b6:	f04f 0000 	mov.w	r0, #0
 80087ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087be:	e7b6      	b.n	800872e <__aeabi_ddiv+0x82>
 80087c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c4:	bf04      	itt	eq
 80087c6:	4301      	orreq	r1, r0
 80087c8:	2000      	moveq	r0, #0
 80087ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087ce:	bf88      	it	hi
 80087d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087d4:	f63f aeaf 	bhi.w	8008536 <__aeabi_dmul+0xde>
 80087d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087dc:	bf04      	itt	eq
 80087de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087e6:	f150 0000 	adcs.w	r0, r0, #0
 80087ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087fc:	bfc2      	ittt	gt
 80087fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008806:	bd70      	popgt	{r4, r5, r6, pc}
 8008808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800880c:	f04f 0e00 	mov.w	lr, #0
 8008810:	3c01      	subs	r4, #1
 8008812:	e690      	b.n	8008536 <__aeabi_dmul+0xde>
 8008814:	ea45 0e06 	orr.w	lr, r5, r6
 8008818:	e68d      	b.n	8008536 <__aeabi_dmul+0xde>
 800881a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	bf08      	it	eq
 8008824:	ea95 0f0c 	teqeq	r5, ip
 8008828:	f43f af3b 	beq.w	80086a2 <__aeabi_dmul+0x24a>
 800882c:	ea94 0f0c 	teq	r4, ip
 8008830:	d10a      	bne.n	8008848 <__aeabi_ddiv+0x19c>
 8008832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008836:	f47f af34 	bne.w	80086a2 <__aeabi_dmul+0x24a>
 800883a:	ea95 0f0c 	teq	r5, ip
 800883e:	f47f af25 	bne.w	800868c <__aeabi_dmul+0x234>
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	e72c      	b.n	80086a2 <__aeabi_dmul+0x24a>
 8008848:	ea95 0f0c 	teq	r5, ip
 800884c:	d106      	bne.n	800885c <__aeabi_ddiv+0x1b0>
 800884e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008852:	f43f aefd 	beq.w	8008650 <__aeabi_dmul+0x1f8>
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	e722      	b.n	80086a2 <__aeabi_dmul+0x24a>
 800885c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008860:	bf18      	it	ne
 8008862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008866:	f47f aec5 	bne.w	80085f4 <__aeabi_dmul+0x19c>
 800886a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800886e:	f47f af0d 	bne.w	800868c <__aeabi_dmul+0x234>
 8008872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008876:	f47f aeeb 	bne.w	8008650 <__aeabi_dmul+0x1f8>
 800887a:	e712      	b.n	80086a2 <__aeabi_dmul+0x24a>

0800887c <__gedf2>:
 800887c:	f04f 3cff 	mov.w	ip, #4294967295
 8008880:	e006      	b.n	8008890 <__cmpdf2+0x4>
 8008882:	bf00      	nop

08008884 <__ledf2>:
 8008884:	f04f 0c01 	mov.w	ip, #1
 8008888:	e002      	b.n	8008890 <__cmpdf2+0x4>
 800888a:	bf00      	nop

0800888c <__cmpdf2>:
 800888c:	f04f 0c01 	mov.w	ip, #1
 8008890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800889c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a0:	bf18      	it	ne
 80088a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088a6:	d01b      	beq.n	80088e0 <__cmpdf2+0x54>
 80088a8:	b001      	add	sp, #4
 80088aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088ae:	bf0c      	ite	eq
 80088b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088b4:	ea91 0f03 	teqne	r1, r3
 80088b8:	bf02      	ittt	eq
 80088ba:	ea90 0f02 	teqeq	r0, r2
 80088be:	2000      	moveq	r0, #0
 80088c0:	4770      	bxeq	lr
 80088c2:	f110 0f00 	cmn.w	r0, #0
 80088c6:	ea91 0f03 	teq	r1, r3
 80088ca:	bf58      	it	pl
 80088cc:	4299      	cmppl	r1, r3
 80088ce:	bf08      	it	eq
 80088d0:	4290      	cmpeq	r0, r2
 80088d2:	bf2c      	ite	cs
 80088d4:	17d8      	asrcs	r0, r3, #31
 80088d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088da:	f040 0001 	orr.w	r0, r0, #1
 80088de:	4770      	bx	lr
 80088e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088e8:	d102      	bne.n	80088f0 <__cmpdf2+0x64>
 80088ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088ee:	d107      	bne.n	8008900 <__cmpdf2+0x74>
 80088f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d1d6      	bne.n	80088a8 <__cmpdf2+0x1c>
 80088fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088fe:	d0d3      	beq.n	80088a8 <__cmpdf2+0x1c>
 8008900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <__aeabi_cdrcmple>:
 8008908:	4684      	mov	ip, r0
 800890a:	4610      	mov	r0, r2
 800890c:	4662      	mov	r2, ip
 800890e:	468c      	mov	ip, r1
 8008910:	4619      	mov	r1, r3
 8008912:	4663      	mov	r3, ip
 8008914:	e000      	b.n	8008918 <__aeabi_cdcmpeq>
 8008916:	bf00      	nop

08008918 <__aeabi_cdcmpeq>:
 8008918:	b501      	push	{r0, lr}
 800891a:	f7ff ffb7 	bl	800888c <__cmpdf2>
 800891e:	2800      	cmp	r0, #0
 8008920:	bf48      	it	mi
 8008922:	f110 0f00 	cmnmi.w	r0, #0
 8008926:	bd01      	pop	{r0, pc}

08008928 <__aeabi_dcmpeq>:
 8008928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800892c:	f7ff fff4 	bl	8008918 <__aeabi_cdcmpeq>
 8008930:	bf0c      	ite	eq
 8008932:	2001      	moveq	r0, #1
 8008934:	2000      	movne	r0, #0
 8008936:	f85d fb08 	ldr.w	pc, [sp], #8
 800893a:	bf00      	nop

0800893c <__aeabi_dcmplt>:
 800893c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008940:	f7ff ffea 	bl	8008918 <__aeabi_cdcmpeq>
 8008944:	bf34      	ite	cc
 8008946:	2001      	movcc	r0, #1
 8008948:	2000      	movcs	r0, #0
 800894a:	f85d fb08 	ldr.w	pc, [sp], #8
 800894e:	bf00      	nop

08008950 <__aeabi_dcmple>:
 8008950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008954:	f7ff ffe0 	bl	8008918 <__aeabi_cdcmpeq>
 8008958:	bf94      	ite	ls
 800895a:	2001      	movls	r0, #1
 800895c:	2000      	movhi	r0, #0
 800895e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008962:	bf00      	nop

08008964 <__aeabi_dcmpge>:
 8008964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008968:	f7ff ffce 	bl	8008908 <__aeabi_cdrcmple>
 800896c:	bf94      	ite	ls
 800896e:	2001      	movls	r0, #1
 8008970:	2000      	movhi	r0, #0
 8008972:	f85d fb08 	ldr.w	pc, [sp], #8
 8008976:	bf00      	nop

08008978 <__aeabi_dcmpgt>:
 8008978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800897c:	f7ff ffc4 	bl	8008908 <__aeabi_cdrcmple>
 8008980:	bf34      	ite	cc
 8008982:	2001      	movcc	r0, #1
 8008984:	2000      	movcs	r0, #0
 8008986:	f85d fb08 	ldr.w	pc, [sp], #8
 800898a:	bf00      	nop

0800898c <__aeabi_d2iz>:
 800898c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008994:	d215      	bcs.n	80089c2 <__aeabi_d2iz+0x36>
 8008996:	d511      	bpl.n	80089bc <__aeabi_d2iz+0x30>
 8008998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800899c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089a0:	d912      	bls.n	80089c8 <__aeabi_d2iz+0x3c>
 80089a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089b2:	fa23 f002 	lsr.w	r0, r3, r2
 80089b6:	bf18      	it	ne
 80089b8:	4240      	negne	r0, r0
 80089ba:	4770      	bx	lr
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80089c6:	d105      	bne.n	80089d4 <__aeabi_d2iz+0x48>
 80089c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80089cc:	bf08      	it	eq
 80089ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80089d2:	4770      	bx	lr
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop

080089dc <__aeabi_d2f>:
 80089dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80089e4:	bf24      	itt	cs
 80089e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80089ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80089ee:	d90d      	bls.n	8008a0c <__aeabi_d2f+0x30>
 80089f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80089f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80089f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80089fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a04:	bf08      	it	eq
 8008a06:	f020 0001 	biceq.w	r0, r0, #1
 8008a0a:	4770      	bx	lr
 8008a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a10:	d121      	bne.n	8008a56 <__aeabi_d2f+0x7a>
 8008a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a16:	bfbc      	itt	lt
 8008a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a1c:	4770      	bxlt	lr
 8008a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a26:	f1c2 0218 	rsb	r2, r2, #24
 8008a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8008a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a32:	fa20 f002 	lsr.w	r0, r0, r2
 8008a36:	bf18      	it	ne
 8008a38:	f040 0001 	orrne.w	r0, r0, #1
 8008a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a48:	ea40 000c 	orr.w	r0, r0, ip
 8008a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8008a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a54:	e7cc      	b.n	80089f0 <__aeabi_d2f+0x14>
 8008a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a5a:	d107      	bne.n	8008a6c <__aeabi_d2f+0x90>
 8008a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a60:	bf1e      	ittt	ne
 8008a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a6a:	4770      	bxne	lr
 8008a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop

08008a7c <__aeabi_uldivmod>:
 8008a7c:	b953      	cbnz	r3, 8008a94 <__aeabi_uldivmod+0x18>
 8008a7e:	b94a      	cbnz	r2, 8008a94 <__aeabi_uldivmod+0x18>
 8008a80:	2900      	cmp	r1, #0
 8008a82:	bf08      	it	eq
 8008a84:	2800      	cmpeq	r0, #0
 8008a86:	bf1c      	itt	ne
 8008a88:	f04f 31ff 	movne.w	r1, #4294967295
 8008a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8008a90:	f000 b972 	b.w	8008d78 <__aeabi_idiv0>
 8008a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a9c:	f000 f806 	bl	8008aac <__udivmoddi4>
 8008aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aa8:	b004      	add	sp, #16
 8008aaa:	4770      	bx	lr

08008aac <__udivmoddi4>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	9e08      	ldr	r6, [sp, #32]
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4688      	mov	r8, r1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d14b      	bne.n	8008b52 <__udivmoddi4+0xa6>
 8008aba:	428a      	cmp	r2, r1
 8008abc:	4615      	mov	r5, r2
 8008abe:	d967      	bls.n	8008b90 <__udivmoddi4+0xe4>
 8008ac0:	fab2 f282 	clz	r2, r2
 8008ac4:	b14a      	cbz	r2, 8008ada <__udivmoddi4+0x2e>
 8008ac6:	f1c2 0720 	rsb	r7, r2, #32
 8008aca:	fa01 f302 	lsl.w	r3, r1, r2
 8008ace:	fa20 f707 	lsr.w	r7, r0, r7
 8008ad2:	4095      	lsls	r5, r2
 8008ad4:	ea47 0803 	orr.w	r8, r7, r3
 8008ad8:	4094      	lsls	r4, r2
 8008ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008ade:	0c23      	lsrs	r3, r4, #16
 8008ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8008ae4:	fa1f fc85 	uxth.w	ip, r5
 8008ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8008aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008af0:	fb07 f10c 	mul.w	r1, r7, ip
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d909      	bls.n	8008b0c <__udivmoddi4+0x60>
 8008af8:	18eb      	adds	r3, r5, r3
 8008afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8008afe:	f080 811b 	bcs.w	8008d38 <__udivmoddi4+0x28c>
 8008b02:	4299      	cmp	r1, r3
 8008b04:	f240 8118 	bls.w	8008d38 <__udivmoddi4+0x28c>
 8008b08:	3f02      	subs	r7, #2
 8008b0a:	442b      	add	r3, r5
 8008b0c:	1a5b      	subs	r3, r3, r1
 8008b0e:	b2a4      	uxth	r4, r4
 8008b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b20:	45a4      	cmp	ip, r4
 8008b22:	d909      	bls.n	8008b38 <__udivmoddi4+0x8c>
 8008b24:	192c      	adds	r4, r5, r4
 8008b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b2a:	f080 8107 	bcs.w	8008d3c <__udivmoddi4+0x290>
 8008b2e:	45a4      	cmp	ip, r4
 8008b30:	f240 8104 	bls.w	8008d3c <__udivmoddi4+0x290>
 8008b34:	3802      	subs	r0, #2
 8008b36:	442c      	add	r4, r5
 8008b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b3c:	eba4 040c 	sub.w	r4, r4, ip
 8008b40:	2700      	movs	r7, #0
 8008b42:	b11e      	cbz	r6, 8008b4c <__udivmoddi4+0xa0>
 8008b44:	40d4      	lsrs	r4, r2
 8008b46:	2300      	movs	r3, #0
 8008b48:	e9c6 4300 	strd	r4, r3, [r6]
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b52:	428b      	cmp	r3, r1
 8008b54:	d909      	bls.n	8008b6a <__udivmoddi4+0xbe>
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	f000 80eb 	beq.w	8008d32 <__udivmoddi4+0x286>
 8008b5c:	2700      	movs	r7, #0
 8008b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8008b62:	4638      	mov	r0, r7
 8008b64:	4639      	mov	r1, r7
 8008b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6a:	fab3 f783 	clz	r7, r3
 8008b6e:	2f00      	cmp	r7, #0
 8008b70:	d147      	bne.n	8008c02 <__udivmoddi4+0x156>
 8008b72:	428b      	cmp	r3, r1
 8008b74:	d302      	bcc.n	8008b7c <__udivmoddi4+0xd0>
 8008b76:	4282      	cmp	r2, r0
 8008b78:	f200 80fa 	bhi.w	8008d70 <__udivmoddi4+0x2c4>
 8008b7c:	1a84      	subs	r4, r0, r2
 8008b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8008b82:	2001      	movs	r0, #1
 8008b84:	4698      	mov	r8, r3
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d0e0      	beq.n	8008b4c <__udivmoddi4+0xa0>
 8008b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8008b8e:	e7dd      	b.n	8008b4c <__udivmoddi4+0xa0>
 8008b90:	b902      	cbnz	r2, 8008b94 <__udivmoddi4+0xe8>
 8008b92:	deff      	udf	#255	; 0xff
 8008b94:	fab2 f282 	clz	r2, r2
 8008b98:	2a00      	cmp	r2, #0
 8008b9a:	f040 808f 	bne.w	8008cbc <__udivmoddi4+0x210>
 8008b9e:	1b49      	subs	r1, r1, r5
 8008ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008ba4:	fa1f f885 	uxth.w	r8, r5
 8008ba8:	2701      	movs	r7, #1
 8008baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bae:	0c23      	lsrs	r3, r4, #16
 8008bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8008bbc:	4299      	cmp	r1, r3
 8008bbe:	d907      	bls.n	8008bd0 <__udivmoddi4+0x124>
 8008bc0:	18eb      	adds	r3, r5, r3
 8008bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008bc6:	d202      	bcs.n	8008bce <__udivmoddi4+0x122>
 8008bc8:	4299      	cmp	r1, r3
 8008bca:	f200 80cd 	bhi.w	8008d68 <__udivmoddi4+0x2bc>
 8008bce:	4684      	mov	ip, r0
 8008bd0:	1a59      	subs	r1, r3, r1
 8008bd2:	b2a3      	uxth	r3, r4
 8008bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8008bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8008bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008be0:	fb08 f800 	mul.w	r8, r8, r0
 8008be4:	45a0      	cmp	r8, r4
 8008be6:	d907      	bls.n	8008bf8 <__udivmoddi4+0x14c>
 8008be8:	192c      	adds	r4, r5, r4
 8008bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bee:	d202      	bcs.n	8008bf6 <__udivmoddi4+0x14a>
 8008bf0:	45a0      	cmp	r8, r4
 8008bf2:	f200 80b6 	bhi.w	8008d62 <__udivmoddi4+0x2b6>
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	eba4 0408 	sub.w	r4, r4, r8
 8008bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c00:	e79f      	b.n	8008b42 <__udivmoddi4+0x96>
 8008c02:	f1c7 0c20 	rsb	ip, r7, #32
 8008c06:	40bb      	lsls	r3, r7
 8008c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c10:	fa01 f407 	lsl.w	r4, r1, r7
 8008c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c20:	4325      	orrs	r5, r4
 8008c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c26:	0c2c      	lsrs	r4, r5, #16
 8008c28:	fb08 3319 	mls	r3, r8, r9, r3
 8008c2c:	fa1f fa8e 	uxth.w	sl, lr
 8008c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c34:	fb09 f40a 	mul.w	r4, r9, sl
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8008c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8008c42:	d90b      	bls.n	8008c5c <__udivmoddi4+0x1b0>
 8008c44:	eb1e 0303 	adds.w	r3, lr, r3
 8008c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c4c:	f080 8087 	bcs.w	8008d5e <__udivmoddi4+0x2b2>
 8008c50:	429c      	cmp	r4, r3
 8008c52:	f240 8084 	bls.w	8008d5e <__udivmoddi4+0x2b2>
 8008c56:	f1a9 0902 	sub.w	r9, r9, #2
 8008c5a:	4473      	add	r3, lr
 8008c5c:	1b1b      	subs	r3, r3, r4
 8008c5e:	b2ad      	uxth	r5, r5
 8008c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c64:	fb08 3310 	mls	r3, r8, r0, r3
 8008c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008c70:	45a2      	cmp	sl, r4
 8008c72:	d908      	bls.n	8008c86 <__udivmoddi4+0x1da>
 8008c74:	eb1e 0404 	adds.w	r4, lr, r4
 8008c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c7c:	d26b      	bcs.n	8008d56 <__udivmoddi4+0x2aa>
 8008c7e:	45a2      	cmp	sl, r4
 8008c80:	d969      	bls.n	8008d56 <__udivmoddi4+0x2aa>
 8008c82:	3802      	subs	r0, #2
 8008c84:	4474      	add	r4, lr
 8008c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8008c8e:	eba4 040a 	sub.w	r4, r4, sl
 8008c92:	454c      	cmp	r4, r9
 8008c94:	46c2      	mov	sl, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	d354      	bcc.n	8008d44 <__udivmoddi4+0x298>
 8008c9a:	d051      	beq.n	8008d40 <__udivmoddi4+0x294>
 8008c9c:	2e00      	cmp	r6, #0
 8008c9e:	d069      	beq.n	8008d74 <__udivmoddi4+0x2c8>
 8008ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8008ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8008ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008cac:	40fd      	lsrs	r5, r7
 8008cae:	40fc      	lsrs	r4, r7
 8008cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8008cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8008cb8:	2700      	movs	r7, #0
 8008cba:	e747      	b.n	8008b4c <__udivmoddi4+0xa0>
 8008cbc:	f1c2 0320 	rsb	r3, r2, #32
 8008cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8008cc4:	4095      	lsls	r5, r2
 8008cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8008cca:	fa21 f303 	lsr.w	r3, r1, r3
 8008cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008cd2:	4338      	orrs	r0, r7
 8008cd4:	0c01      	lsrs	r1, r0, #16
 8008cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8008cda:	fa1f f885 	uxth.w	r8, r5
 8008cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8008ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008ce6:	fb07 f308 	mul.w	r3, r7, r8
 8008cea:	428b      	cmp	r3, r1
 8008cec:	fa04 f402 	lsl.w	r4, r4, r2
 8008cf0:	d907      	bls.n	8008d02 <__udivmoddi4+0x256>
 8008cf2:	1869      	adds	r1, r5, r1
 8008cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8008cf8:	d22f      	bcs.n	8008d5a <__udivmoddi4+0x2ae>
 8008cfa:	428b      	cmp	r3, r1
 8008cfc:	d92d      	bls.n	8008d5a <__udivmoddi4+0x2ae>
 8008cfe:	3f02      	subs	r7, #2
 8008d00:	4429      	add	r1, r5
 8008d02:	1acb      	subs	r3, r1, r3
 8008d04:	b281      	uxth	r1, r0
 8008d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d12:	fb00 f308 	mul.w	r3, r0, r8
 8008d16:	428b      	cmp	r3, r1
 8008d18:	d907      	bls.n	8008d2a <__udivmoddi4+0x27e>
 8008d1a:	1869      	adds	r1, r5, r1
 8008d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d20:	d217      	bcs.n	8008d52 <__udivmoddi4+0x2a6>
 8008d22:	428b      	cmp	r3, r1
 8008d24:	d915      	bls.n	8008d52 <__udivmoddi4+0x2a6>
 8008d26:	3802      	subs	r0, #2
 8008d28:	4429      	add	r1, r5
 8008d2a:	1ac9      	subs	r1, r1, r3
 8008d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d30:	e73b      	b.n	8008baa <__udivmoddi4+0xfe>
 8008d32:	4637      	mov	r7, r6
 8008d34:	4630      	mov	r0, r6
 8008d36:	e709      	b.n	8008b4c <__udivmoddi4+0xa0>
 8008d38:	4607      	mov	r7, r0
 8008d3a:	e6e7      	b.n	8008b0c <__udivmoddi4+0x60>
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	e6fb      	b.n	8008b38 <__udivmoddi4+0x8c>
 8008d40:	4541      	cmp	r1, r8
 8008d42:	d2ab      	bcs.n	8008c9c <__udivmoddi4+0x1f0>
 8008d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d48:	eb69 020e 	sbc.w	r2, r9, lr
 8008d4c:	3801      	subs	r0, #1
 8008d4e:	4613      	mov	r3, r2
 8008d50:	e7a4      	b.n	8008c9c <__udivmoddi4+0x1f0>
 8008d52:	4660      	mov	r0, ip
 8008d54:	e7e9      	b.n	8008d2a <__udivmoddi4+0x27e>
 8008d56:	4618      	mov	r0, r3
 8008d58:	e795      	b.n	8008c86 <__udivmoddi4+0x1da>
 8008d5a:	4667      	mov	r7, ip
 8008d5c:	e7d1      	b.n	8008d02 <__udivmoddi4+0x256>
 8008d5e:	4681      	mov	r9, r0
 8008d60:	e77c      	b.n	8008c5c <__udivmoddi4+0x1b0>
 8008d62:	3802      	subs	r0, #2
 8008d64:	442c      	add	r4, r5
 8008d66:	e747      	b.n	8008bf8 <__udivmoddi4+0x14c>
 8008d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d6c:	442b      	add	r3, r5
 8008d6e:	e72f      	b.n	8008bd0 <__udivmoddi4+0x124>
 8008d70:	4638      	mov	r0, r7
 8008d72:	e708      	b.n	8008b86 <__udivmoddi4+0xda>
 8008d74:	4637      	mov	r7, r6
 8008d76:	e6e9      	b.n	8008b4c <__udivmoddi4+0xa0>

08008d78 <__aeabi_idiv0>:
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d80:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <HAL_Init+0x40>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <HAL_Init+0x40>)
 8008d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <HAL_Init+0x40>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <HAL_Init+0x40>)
 8008d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <HAL_Init+0x40>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a07      	ldr	r2, [pc, #28]	; (8008dbc <HAL_Init+0x40>)
 8008d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008da4:	2003      	movs	r0, #3
 8008da6:	f001 fab5 	bl	800a314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008daa:	2000      	movs	r0, #0
 8008dac:	f000 f808 	bl	8008dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008db0:	f007 ffac 	bl	8010d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	40023c00 	.word	0x40023c00

08008dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <HAL_InitTick+0x54>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <HAL_InitTick+0x58>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 facd 	bl	800a37e <HAL_SYSTICK_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e00e      	b.n	8008e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b0f      	cmp	r3, #15
 8008df2:	d80a      	bhi.n	8008e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008df4:	2200      	movs	r2, #0
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	f001 fa95 	bl	800a32a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e00:	4a06      	ldr	r2, [pc, #24]	; (8008e1c <HAL_InitTick+0x5c>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e000      	b.n	8008e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20000038 	.word	0x20000038
 8008e18:	20000004 	.word	0x20000004
 8008e1c:	20000000 	.word	0x20000000

08008e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e24:	4b06      	ldr	r3, [pc, #24]	; (8008e40 <HAL_IncTick+0x20>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <HAL_IncTick+0x24>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4413      	add	r3, r2
 8008e30:	4a04      	ldr	r2, [pc, #16]	; (8008e44 <HAL_IncTick+0x24>)
 8008e32:	6013      	str	r3, [r2, #0]
}
 8008e34:	bf00      	nop
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20000004 	.word	0x20000004
 8008e44:	2000420c 	.word	0x2000420c

08008e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8008e4c:	4b03      	ldr	r3, [pc, #12]	; (8008e5c <HAL_GetTick+0x14>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	2000420c 	.word	0x2000420c

08008e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e68:	f7ff ffee 	bl	8008e48 <HAL_GetTick>
 8008e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e78:	d005      	beq.n	8008e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <HAL_Delay+0x40>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e86:	bf00      	nop
 8008e88:	f7ff ffde 	bl	8008e48 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d8f7      	bhi.n	8008e88 <HAL_Delay+0x28>
  {
  }
}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000004 	.word	0x20000004

08008ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e033      	b.n	8008f22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f005 ff0c 	bl	800ece0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d118      	bne.n	8008f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008eea:	f023 0302 	bic.w	r3, r3, #2
 8008eee:	f043 0202 	orr.w	r2, r3, #2
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fa5a 	bl	80093b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	f043 0201 	orr.w	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	641a      	str	r2, [r3, #64]	; 0x40
 8008f12:	e001      	b.n	8008f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d101      	bne.n	8008f4a <HAL_ADC_Start_DMA+0x1e>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e0cc      	b.n	80090e4 <HAL_ADC_Start_DMA+0x1b8>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d018      	beq.n	8008f92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0201 	orr.w	r2, r2, #1
 8008f6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f70:	4b5e      	ldr	r3, [pc, #376]	; (80090ec <HAL_ADC_Start_DMA+0x1c0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a5e      	ldr	r2, [pc, #376]	; (80090f0 <HAL_ADC_Start_DMA+0x1c4>)
 8008f76:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7a:	0c9a      	lsrs	r2, r3, #18
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	4413      	add	r3, r2
 8008f82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f84:	e002      	b.n	8008f8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f9      	bne.n	8008f86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	f040 80a0 	bne.w	80090e2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008faa:	f023 0301 	bic.w	r3, r3, #1
 8008fae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008fcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe0:	d106      	bne.n	8008ff0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	f023 0206 	bic.w	r2, r3, #6
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	645a      	str	r2, [r3, #68]	; 0x44
 8008fee:	e002      	b.n	8008ff6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ffe:	4b3d      	ldr	r3, [pc, #244]	; (80090f4 <HAL_ADC_Start_DMA+0x1c8>)
 8009000:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	4a3c      	ldr	r2, [pc, #240]	; (80090f8 <HAL_ADC_Start_DMA+0x1cc>)
 8009008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	4a3b      	ldr	r2, [pc, #236]	; (80090fc <HAL_ADC_Start_DMA+0x1d0>)
 8009010:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	4a3a      	ldr	r2, [pc, #232]	; (8009100 <HAL_ADC_Start_DMA+0x1d4>)
 8009018:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009022:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009032:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009042:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	334c      	adds	r3, #76	; 0x4c
 800904e:	4619      	mov	r1, r3
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f001 fa4e 	bl	800a4f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f003 031f 	and.w	r3, r3, #31
 8009060:	2b00      	cmp	r3, #0
 8009062:	d12a      	bne.n	80090ba <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a26      	ldr	r2, [pc, #152]	; (8009104 <HAL_ADC_Start_DMA+0x1d8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d015      	beq.n	800909a <HAL_ADC_Start_DMA+0x16e>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a25      	ldr	r2, [pc, #148]	; (8009108 <HAL_ADC_Start_DMA+0x1dc>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d105      	bne.n	8009084 <HAL_ADC_Start_DMA+0x158>
 8009078:	4b1e      	ldr	r3, [pc, #120]	; (80090f4 <HAL_ADC_Start_DMA+0x1c8>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f003 031f 	and.w	r3, r3, #31
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00a      	beq.n	800909a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a20      	ldr	r2, [pc, #128]	; (800910c <HAL_ADC_Start_DMA+0x1e0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d129      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
 800908e:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <HAL_ADC_Start_DMA+0x1c8>)
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f003 031f 	and.w	r3, r3, #31
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d823      	bhi.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d11c      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090b6:	609a      	str	r2, [r3, #8]
 80090b8:	e013      	b.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a11      	ldr	r2, [pc, #68]	; (8009104 <HAL_ADC_Start_DMA+0x1d8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d10e      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d107      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000038 	.word	0x20000038
 80090f0:	431bde83 	.word	0x431bde83
 80090f4:	40012300 	.word	0x40012300
 80090f8:	080095a9 	.word	0x080095a9
 80090fc:	08009663 	.word	0x08009663
 8009100:	0800967f 	.word	0x0800967f
 8009104:	40012000 	.word	0x40012000
 8009108:	40012100 	.word	0x40012100
 800910c:	40012200 	.word	0x40012200

08009110 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_ADC_ConfigChannel+0x1c>
 8009164:	2302      	movs	r3, #2
 8009166:	e113      	b.n	8009390 <HAL_ADC_ConfigChannel+0x244>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b09      	cmp	r3, #9
 8009176:	d925      	bls.n	80091c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68d9      	ldr	r1, [r3, #12]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	461a      	mov	r2, r3
 8009186:	4613      	mov	r3, r2
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	4413      	add	r3, r2
 800918c:	3b1e      	subs	r3, #30
 800918e:	2207      	movs	r2, #7
 8009190:	fa02 f303 	lsl.w	r3, r2, r3
 8009194:	43da      	mvns	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	400a      	ands	r2, r1
 800919c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68d9      	ldr	r1, [r3, #12]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4618      	mov	r0, r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	4403      	add	r3, r0
 80091b6:	3b1e      	subs	r3, #30
 80091b8:	409a      	lsls	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	e022      	b.n	800920a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6919      	ldr	r1, [r3, #16]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	4613      	mov	r3, r2
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4413      	add	r3, r2
 80091d8:	2207      	movs	r2, #7
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	43da      	mvns	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	400a      	ands	r2, r1
 80091e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6919      	ldr	r1, [r3, #16]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4618      	mov	r0, r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4403      	add	r3, r0
 8009200:	409a      	lsls	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b06      	cmp	r3, #6
 8009210:	d824      	bhi.n	800925c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	3b05      	subs	r3, #5
 8009224:	221f      	movs	r2, #31
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43da      	mvns	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	400a      	ands	r2, r1
 8009232:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	b29b      	uxth	r3, r3
 8009240:	4618      	mov	r0, r3
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	3b05      	subs	r3, #5
 800924e:	fa00 f203 	lsl.w	r2, r0, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	635a      	str	r2, [r3, #52]	; 0x34
 800925a:	e04c      	b.n	80092f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b0c      	cmp	r3, #12
 8009262:	d824      	bhi.n	80092ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	3b23      	subs	r3, #35	; 0x23
 8009276:	221f      	movs	r2, #31
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	43da      	mvns	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	400a      	ands	r2, r1
 8009284:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	4618      	mov	r0, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	4613      	mov	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	3b23      	subs	r3, #35	; 0x23
 80092a0:	fa00 f203 	lsl.w	r2, r0, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	631a      	str	r2, [r3, #48]	; 0x30
 80092ac:	e023      	b.n	80092f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	3b41      	subs	r3, #65	; 0x41
 80092c0:	221f      	movs	r2, #31
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	43da      	mvns	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	400a      	ands	r2, r1
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4618      	mov	r0, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	3b41      	subs	r3, #65	; 0x41
 80092ea:	fa00 f203 	lsl.w	r2, r0, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092f6:	4b29      	ldr	r3, [pc, #164]	; (800939c <HAL_ADC_ConfigChannel+0x250>)
 80092f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a28      	ldr	r2, [pc, #160]	; (80093a0 <HAL_ADC_ConfigChannel+0x254>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d10f      	bne.n	8009324 <HAL_ADC_ConfigChannel+0x1d8>
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b12      	cmp	r3, #18
 800930a:	d10b      	bne.n	8009324 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <HAL_ADC_ConfigChannel+0x254>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d12b      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x23a>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a1c      	ldr	r2, [pc, #112]	; (80093a4 <HAL_ADC_ConfigChannel+0x258>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <HAL_ADC_ConfigChannel+0x1f4>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b11      	cmp	r3, #17
 800933e:	d122      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a11      	ldr	r2, [pc, #68]	; (80093a4 <HAL_ADC_ConfigChannel+0x258>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d111      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009362:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <HAL_ADC_ConfigChannel+0x25c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a11      	ldr	r2, [pc, #68]	; (80093ac <HAL_ADC_ConfigChannel+0x260>)
 8009368:	fba2 2303 	umull	r2, r3, r2, r3
 800936c:	0c9a      	lsrs	r2, r3, #18
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009378:	e002      	b.n	8009380 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3b01      	subs	r3, #1
 800937e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1f9      	bne.n	800937a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	40012300 	.word	0x40012300
 80093a0:	40012000 	.word	0x40012000
 80093a4:	10000012 	.word	0x10000012
 80093a8:	20000038 	.word	0x20000038
 80093ac:	431bde83 	.word	0x431bde83

080093b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80093b8:	4b79      	ldr	r3, [pc, #484]	; (80095a0 <ADC_Init+0x1f0>)
 80093ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	431a      	orrs	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6859      	ldr	r1, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	021a      	lsls	r2, r3, #8
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6859      	ldr	r1, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800942a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	4a58      	ldr	r2, [pc, #352]	; (80095a4 <ADC_Init+0x1f4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d022      	beq.n	800948e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6899      	ldr	r1, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6899      	ldr	r1, [r3, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	e00f      	b.n	80094ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800949c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0202 	bic.w	r2, r2, #2
 80094bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6899      	ldr	r1, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7e1b      	ldrb	r3, [r3, #24]
 80094c8:	005a      	lsls	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01b      	beq.n	8009514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80094fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6859      	ldr	r1, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	3b01      	subs	r3, #1
 8009508:	035a      	lsls	r2, r3, #13
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
 8009512:	e007      	b.n	8009524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009522:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	3b01      	subs	r3, #1
 8009540:	051a      	lsls	r2, r3, #20
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6899      	ldr	r1, [r3, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009566:	025a      	lsls	r2, r3, #9
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6899      	ldr	r1, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	029a      	lsls	r2, r3, #10
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	609a      	str	r2, [r3, #8]
}
 8009594:	bf00      	nop
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	40012300 	.word	0x40012300
 80095a4:	0f000001 	.word	0x0f000001

080095a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d13c      	bne.n	800963c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d12b      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d127      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d006      	beq.n	8009600 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d119      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0220 	bic.w	r2, r2, #32
 800960e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	f043 0201 	orr.w	r2, r3, #1
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f7ff fd6b 	bl	8009110 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800963a:	e00e      	b.n	800965a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	f003 0310 	and.w	r3, r3, #16
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fd75 	bl	8009138 <HAL_ADC_ErrorCallback>
}
 800964e:	e004      	b.n	800965a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fd57 	bl	8009124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2240      	movs	r2, #64	; 0x40
 8009690:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009696:	f043 0204 	orr.w	r2, r3, #4
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f7ff fd4a 	bl	8009138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096a4:	bf00      	nop
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e0ed      	b.n	800989a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f005 febc 	bl	800f448 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0202 	bic.w	r2, r2, #2
 80096de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096e0:	f7ff fbb2 	bl	8008e48 <HAL_GetTick>
 80096e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096e6:	e012      	b.n	800970e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096e8:	f7ff fbae 	bl	8008e48 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b0a      	cmp	r3, #10
 80096f4:	d90b      	bls.n	800970e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2205      	movs	r2, #5
 8009706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e0c5      	b.n	800989a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e5      	bne.n	80096e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800972c:	f7ff fb8c 	bl	8008e48 <HAL_GetTick>
 8009730:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009732:	e012      	b.n	800975a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009734:	f7ff fb88 	bl	8008e48 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b0a      	cmp	r3, #10
 8009740:	d90b      	bls.n	800975a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2205      	movs	r2, #5
 8009752:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e09f      	b.n	800989a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0e5      	beq.n	8009734 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7e1b      	ldrb	r3, [r3, #24]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d108      	bne.n	8009782 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	e007      	b.n	8009792 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009790:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7e5b      	ldrb	r3, [r3, #25]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d108      	bne.n	80097ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	e007      	b.n	80097bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7e9b      	ldrb	r3, [r3, #26]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d108      	bne.n	80097d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0220 	orr.w	r2, r2, #32
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e007      	b.n	80097e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0220 	bic.w	r2, r2, #32
 80097e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7edb      	ldrb	r3, [r3, #27]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d108      	bne.n	8009800 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0210 	bic.w	r2, r2, #16
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e007      	b.n	8009810 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0210 	orr.w	r2, r2, #16
 800980e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7f1b      	ldrb	r3, [r3, #28]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d108      	bne.n	800982a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0208 	orr.w	r2, r2, #8
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e007      	b.n	800983a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0208 	bic.w	r2, r2, #8
 8009838:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7f5b      	ldrb	r3, [r3, #29]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d108      	bne.n	8009854 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f042 0204 	orr.w	r2, r2, #4
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	e007      	b.n	8009864 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0204 	bic.w	r2, r2, #4
 8009862:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	431a      	orrs	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	ea42 0103 	orr.w	r1, r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	1e5a      	subs	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b087      	sub	sp, #28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80098bc:	7cfb      	ldrb	r3, [r7, #19]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d003      	beq.n	80098ca <HAL_CAN_ConfigFilter+0x26>
 80098c2:	7cfb      	ldrb	r3, [r7, #19]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	f040 80be 	bne.w	8009a46 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80098ca:	4b65      	ldr	r3, [pc, #404]	; (8009a60 <HAL_CAN_ConfigFilter+0x1bc>)
 80098cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80098d4:	f043 0201 	orr.w	r2, r3, #1
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80098e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	431a      	orrs	r2, r3
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	f003 031f 	and.w	r3, r3, #31
 800990a:	2201      	movs	r2, #1
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	43db      	mvns	r3, r3
 800991c:	401a      	ands	r2, r3
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d123      	bne.n	8009974 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	43db      	mvns	r3, r3
 8009936:	401a      	ands	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800994e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	3248      	adds	r2, #72	; 0x48
 8009954:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009968:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800996a:	6979      	ldr	r1, [r7, #20]
 800996c:	3348      	adds	r3, #72	; 0x48
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	440b      	add	r3, r1
 8009972:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d122      	bne.n	80099c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	431a      	orrs	r2, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800999c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	3248      	adds	r2, #72	; 0x48
 80099a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80099b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099b8:	6979      	ldr	r1, [r7, #20]
 80099ba:	3348      	adds	r3, #72	; 0x48
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	440b      	add	r3, r1
 80099c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d109      	bne.n	80099de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	43db      	mvns	r3, r3
 80099d4:	401a      	ands	r2, r3
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80099dc:	e007      	b.n	80099ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d109      	bne.n	8009a0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	43db      	mvns	r3, r3
 8009a00:	401a      	ands	r2, r3
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009a08:	e007      	b.n	8009a1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d107      	bne.n	8009a32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a38:	f023 0201 	bic.w	r2, r3, #1
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	e006      	b.n	8009a54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
  }
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	371c      	adds	r7, #28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	40006400 	.word	0x40006400

08009a64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d12e      	bne.n	8009ad6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 0201 	bic.w	r2, r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a90:	f7ff f9da 	bl	8008e48 <HAL_GetTick>
 8009a94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a96:	e012      	b.n	8009abe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a98:	f7ff f9d6 	bl	8008e48 <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	2b0a      	cmp	r3, #10
 8009aa4:	d90b      	bls.n	8009abe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2205      	movs	r2, #5
 8009ab6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e012      	b.n	8009ae4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e5      	bne.n	8009a98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e006      	b.n	8009ae4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
  }
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b00:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d003      	beq.n	8009b10 <HAL_CAN_GetRxMessage+0x24>
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	f040 80f4 	bne.w	8009cf8 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10e      	bne.n	8009b34 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0303 	and.w	r3, r3, #3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d116      	bne.n	8009b52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e0e8      	b.n	8009d06 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f003 0303 	and.w	r3, r3, #3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d107      	bne.n	8009b52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e0d9      	b.n	8009d06 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	331b      	adds	r3, #27
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	4413      	add	r3, r2
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0204 	and.w	r2, r3, #4
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10c      	bne.n	8009b8a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	331b      	adds	r3, #27
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	4413      	add	r3, r2
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	0d5b      	lsrs	r3, r3, #21
 8009b80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	e00b      	b.n	8009ba2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	331b      	adds	r3, #27
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	4413      	add	r3, r2
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	08db      	lsrs	r3, r3, #3
 8009b9a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	331b      	adds	r3, #27
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	4413      	add	r3, r2
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	085b      	lsrs	r3, r3, #1
 8009bb2:	f003 0201 	and.w	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	331b      	adds	r3, #27
 8009bc2:	011b      	lsls	r3, r3, #4
 8009bc4:	4413      	add	r3, r2
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 020f 	and.w	r2, r3, #15
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	331b      	adds	r3, #27
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	4413      	add	r3, r2
 8009bde:	3304      	adds	r3, #4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	0a1b      	lsrs	r3, r3, #8
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	331b      	adds	r3, #27
 8009bf2:	011b      	lsls	r3, r3, #4
 8009bf4:	4413      	add	r3, r2
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	0c1b      	lsrs	r3, r3, #16
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	0a1a      	lsrs	r2, r3, #8
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	0c1a      	lsrs	r2, r3, #16
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	3302      	adds	r3, #2
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	011b      	lsls	r3, r3, #4
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	0e1a      	lsrs	r2, r3, #24
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	3303      	adds	r3, #3
 8009c62:	b2d2      	uxtb	r2, r2
 8009c64:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	0a1a      	lsrs	r2, r3, #8
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	3305      	adds	r3, #5
 8009c94:	b2d2      	uxtb	r2, r2
 8009c96:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	0c1a      	lsrs	r2, r3, #16
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	3306      	adds	r3, #6
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	0e1a      	lsrs	r2, r3, #24
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	3307      	adds	r3, #7
 8009cc8:	b2d2      	uxtb	r2, r2
 8009cca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d108      	bne.n	8009ce4 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68da      	ldr	r2, [r3, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f042 0220 	orr.w	r2, r2, #32
 8009ce0:	60da      	str	r2, [r3, #12]
 8009ce2:	e007      	b.n	8009cf4 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691a      	ldr	r2, [r3, #16]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0220 	orr.w	r2, r2, #32
 8009cf2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	e006      	b.n	8009d06 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
  }
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d22:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d002      	beq.n	8009d30 <HAL_CAN_ActivateNotification+0x1e>
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d109      	bne.n	8009d44 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6959      	ldr	r1, [r3, #20]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e006      	b.n	8009d52 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b08a      	sub	sp, #40	; 0x28
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d07c      	beq.n	8009e9e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d023      	beq.n	8009df6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2201      	movs	r2, #1
 8009db4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f005 fc27 	bl	800f614 <HAL_CAN_TxMailbox0CompleteCallback>
 8009dc6:	e016      	b.n	8009df6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dda:	e00c      	b.n	8009df6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d004      	beq.n	8009df0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
 8009dee:	e002      	b.n	8009df6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f965 	bl	800a0c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d024      	beq.n	8009e4a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f005 fc0d 	bl	800f634 <HAL_CAN_TxMailbox1CompleteCallback>
 8009e1a:	e016      	b.n	8009e4a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e2e:	e00c      	b.n	8009e4a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
 8009e42:	e002      	b.n	8009e4a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f945 	bl	800a0d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d024      	beq.n	8009e9e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f005 fbf3 	bl	800f654 <HAL_CAN_TxMailbox2CompleteCallback>
 8009e6e:	e016      	b.n	8009e9e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
 8009e82:	e00c      	b.n	8009e9e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d004      	beq.n	8009e98 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
 8009e96:	e002      	b.n	8009e9e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f925 	bl	800a0e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	f003 0308 	and.w	r3, r3, #8
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f003 0310 	and.w	r3, r3, #16
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d006      	beq.n	8009ee4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2208      	movs	r2, #8
 8009edc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f90c 	bl	800a0fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f005 fbb9 	bl	800f674 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00c      	beq.n	8009f26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f003 0310 	and.w	r3, r3, #16
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2210      	movs	r2, #16
 8009f24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	f003 0320 	and.w	r3, r3, #32
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f003 0308 	and.w	r3, r3, #8
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d006      	beq.n	8009f48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2208      	movs	r2, #8
 8009f40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f8ee 	bl	800a124 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d009      	beq.n	8009f66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	f003 0303 	and.w	r3, r3, #3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f8d5 	bl	800a110 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00b      	beq.n	8009f88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	f003 0310 	and.w	r3, r3, #16
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d006      	beq.n	8009f88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2210      	movs	r2, #16
 8009f80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f8d8 	bl	800a138 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00b      	beq.n	8009faa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	f003 0308 	and.w	r3, r3, #8
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d006      	beq.n	8009faa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2208      	movs	r2, #8
 8009fa2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f8d1 	bl	800a14c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d075      	beq.n	800a0a0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d06c      	beq.n	800a098 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	f043 0301 	orr.w	r3, r3, #1
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d008      	beq.n	8009ff6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	f043 0302 	orr.w	r3, r3, #2
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d008      	beq.n	800a012 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	f043 0304 	orr.w	r3, r3, #4
 800a010:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d03d      	beq.n	800a098 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a022:	2b00      	cmp	r3, #0
 800a024:	d038      	beq.n	800a098 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a02c:	2b30      	cmp	r3, #48	; 0x30
 800a02e:	d017      	beq.n	800a060 <HAL_CAN_IRQHandler+0x302>
 800a030:	2b30      	cmp	r3, #48	; 0x30
 800a032:	d804      	bhi.n	800a03e <HAL_CAN_IRQHandler+0x2e0>
 800a034:	2b10      	cmp	r3, #16
 800a036:	d009      	beq.n	800a04c <HAL_CAN_IRQHandler+0x2ee>
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d00c      	beq.n	800a056 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a03c:	e024      	b.n	800a088 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800a03e:	2b50      	cmp	r3, #80	; 0x50
 800a040:	d018      	beq.n	800a074 <HAL_CAN_IRQHandler+0x316>
 800a042:	2b60      	cmp	r3, #96	; 0x60
 800a044:	d01b      	beq.n	800a07e <HAL_CAN_IRQHandler+0x320>
 800a046:	2b40      	cmp	r3, #64	; 0x40
 800a048:	d00f      	beq.n	800a06a <HAL_CAN_IRQHandler+0x30c>
            break;
 800a04a:	e01d      	b.n	800a088 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	f043 0308 	orr.w	r3, r3, #8
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a054:	e018      	b.n	800a088 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	f043 0310 	orr.w	r3, r3, #16
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a05e:	e013      	b.n	800a088 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	f043 0320 	orr.w	r3, r3, #32
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a068:	e00e      	b.n	800a088 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a072:	e009      	b.n	800a088 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a07c:	e004      	b.n	800a088 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a086:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	699a      	ldr	r2, [r3, #24]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a096:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2204      	movs	r2, #4
 800a09e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d008      	beq.n	800a0b8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f854 	bl	800a160 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	3728      	adds	r7, #40	; 0x28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f003 0307 	and.w	r3, r3, #7
 800a182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a184:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a190:	4013      	ands	r3, r2
 800a192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a19c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a1a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1a6:	4a04      	ldr	r2, [pc, #16]	; (800a1b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	60d3      	str	r3, [r2, #12]
}
 800a1ac:	bf00      	nop
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	e000ed00 	.word	0xe000ed00

0800a1bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1c0:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <__NVIC_GetPriorityGrouping+0x18>)
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	0a1b      	lsrs	r3, r3, #8
 800a1c6:	f003 0307 	and.w	r3, r3, #7
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	e000ed00 	.word	0xe000ed00

0800a1d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db0b      	blt.n	800a202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1ea:	79fb      	ldrb	r3, [r7, #7]
 800a1ec:	f003 021f 	and.w	r2, r3, #31
 800a1f0:	4907      	ldr	r1, [pc, #28]	; (800a210 <__NVIC_EnableIRQ+0x38>)
 800a1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1f6:	095b      	lsrs	r3, r3, #5
 800a1f8:	2001      	movs	r0, #1
 800a1fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a202:	bf00      	nop
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e100 	.word	0xe000e100

0800a214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a224:	2b00      	cmp	r3, #0
 800a226:	db0a      	blt.n	800a23e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	490c      	ldr	r1, [pc, #48]	; (800a260 <__NVIC_SetPriority+0x4c>)
 800a22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a232:	0112      	lsls	r2, r2, #4
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	440b      	add	r3, r1
 800a238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a23c:	e00a      	b.n	800a254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4908      	ldr	r1, [pc, #32]	; (800a264 <__NVIC_SetPriority+0x50>)
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	3b04      	subs	r3, #4
 800a24c:	0112      	lsls	r2, r2, #4
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	440b      	add	r3, r1
 800a252:	761a      	strb	r2, [r3, #24]
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	e000e100 	.word	0xe000e100
 800a264:	e000ed00 	.word	0xe000ed00

0800a268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a268:	b480      	push	{r7}
 800a26a:	b089      	sub	sp, #36	; 0x24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f1c3 0307 	rsb	r3, r3, #7
 800a282:	2b04      	cmp	r3, #4
 800a284:	bf28      	it	cs
 800a286:	2304      	movcs	r3, #4
 800a288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	3304      	adds	r3, #4
 800a28e:	2b06      	cmp	r3, #6
 800a290:	d902      	bls.n	800a298 <NVIC_EncodePriority+0x30>
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	3b03      	subs	r3, #3
 800a296:	e000      	b.n	800a29a <NVIC_EncodePriority+0x32>
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a29c:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a6:	43da      	mvns	r2, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	401a      	ands	r2, r3
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ba:	43d9      	mvns	r1, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2c0:	4313      	orrs	r3, r2
         );
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3724      	adds	r7, #36	; 0x24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2e0:	d301      	bcc.n	800a2e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e00f      	b.n	800a306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a2e6:	4a0a      	ldr	r2, [pc, #40]	; (800a310 <SysTick_Config+0x40>)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a2ee:	210f      	movs	r1, #15
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	f7ff ff8e 	bl	800a214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <SysTick_Config+0x40>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2fe:	4b04      	ldr	r3, [pc, #16]	; (800a310 <SysTick_Config+0x40>)
 800a300:	2207      	movs	r2, #7
 800a302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	e000e010 	.word	0xe000e010

0800a314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff ff29 	bl	800a174 <__NVIC_SetPriorityGrouping>
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	4603      	mov	r3, r0
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a338:	2300      	movs	r3, #0
 800a33a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a33c:	f7ff ff3e 	bl	800a1bc <__NVIC_GetPriorityGrouping>
 800a340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	68b9      	ldr	r1, [r7, #8]
 800a346:	6978      	ldr	r0, [r7, #20]
 800a348:	f7ff ff8e 	bl	800a268 <NVIC_EncodePriority>
 800a34c:	4602      	mov	r2, r0
 800a34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff ff5d 	bl	800a214 <__NVIC_SetPriority>
}
 800a35a:	bf00      	nop
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	4603      	mov	r3, r0
 800a36a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a36c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff ff31 	bl	800a1d8 <__NVIC_EnableIRQ>
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff ffa2 	bl	800a2d0 <SysTick_Config>
 800a38c:	4603      	mov	r3, r0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3a4:	f7fe fd50 	bl	8008e48 <HAL_GetTick>
 800a3a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e099      	b.n	800a4e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0201 	bic.w	r2, r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3d4:	e00f      	b.n	800a3f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3d6:	f7fe fd37 	bl	8008e48 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b05      	cmp	r3, #5
 800a3e2:	d908      	bls.n	800a3f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e078      	b.n	800a4e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e8      	bne.n	800a3d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4b38      	ldr	r3, [pc, #224]	; (800a4f0 <HAL_DMA_Init+0x158>)
 800a410:	4013      	ands	r3, r2
 800a412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a42e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a43a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	4313      	orrs	r3, r2
 800a446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d107      	bne.n	800a460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	4313      	orrs	r3, r2
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f023 0307 	bic.w	r3, r3, #7
 800a476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	2b04      	cmp	r3, #4
 800a488:	d117      	bne.n	800a4ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4313      	orrs	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00e      	beq.n	800a4ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fa99 	bl	800a9d4 <DMA_CheckFifoParam>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d008      	beq.n	800a4ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2240      	movs	r2, #64	; 0x40
 800a4ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e016      	b.n	800a4e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa50 	bl	800a968 <DMA_CalcBaseAndBitshift>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d0:	223f      	movs	r2, #63	; 0x3f
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	f010803f 	.word	0xf010803f

0800a4f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a512:	2b01      	cmp	r3, #1
 800a514:	d101      	bne.n	800a51a <HAL_DMA_Start_IT+0x26>
 800a516:	2302      	movs	r3, #2
 800a518:	e048      	b.n	800a5ac <HAL_DMA_Start_IT+0xb8>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d137      	bne.n	800a59e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2202      	movs	r2, #2
 800a532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f9e2 	bl	800a90c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54c:	223f      	movs	r2, #63	; 0x3f
 800a54e:	409a      	lsls	r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0216 	orr.w	r2, r2, #22
 800a562:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695a      	ldr	r2, [r3, #20]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a572:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d007      	beq.n	800a58c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0208 	orr.w	r2, r2, #8
 800a58a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f042 0201 	orr.w	r2, r2, #1
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	e005      	b.n	800a5aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d004      	beq.n	800a5d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2280      	movs	r2, #128	; 0x80
 800a5cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e00c      	b.n	800a5ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 0201 	bic.w	r2, r2, #1
 800a5e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a604:	4b92      	ldr	r3, [pc, #584]	; (800a850 <HAL_DMA_IRQHandler+0x258>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a92      	ldr	r2, [pc, #584]	; (800a854 <HAL_DMA_IRQHandler+0x25c>)
 800a60a:	fba2 2303 	umull	r2, r3, r2, r3
 800a60e:	0a9b      	lsrs	r3, r3, #10
 800a610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a622:	2208      	movs	r2, #8
 800a624:	409a      	lsls	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4013      	ands	r3, r2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d01a      	beq.n	800a664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d013      	beq.n	800a664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0204 	bic.w	r2, r2, #4
 800a64a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a650:	2208      	movs	r2, #8
 800a652:	409a      	lsls	r2, r3
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65c:	f043 0201 	orr.w	r2, r3, #1
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a668:	2201      	movs	r2, #1
 800a66a:	409a      	lsls	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4013      	ands	r3, r2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d012      	beq.n	800a69a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00b      	beq.n	800a69a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a686:	2201      	movs	r2, #1
 800a688:	409a      	lsls	r2, r3
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	f043 0202 	orr.w	r2, r3, #2
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a69e:	2204      	movs	r2, #4
 800a6a0:	409a      	lsls	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d012      	beq.n	800a6d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00b      	beq.n	800a6d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6bc:	2204      	movs	r2, #4
 800a6be:	409a      	lsls	r2, r3
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c8:	f043 0204 	orr.w	r2, r3, #4
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d4:	2210      	movs	r2, #16
 800a6d6:	409a      	lsls	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d043      	beq.n	800a768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0308 	and.w	r3, r3, #8
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d03c      	beq.n	800a768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f2:	2210      	movs	r2, #16
 800a6f4:	409a      	lsls	r2, r3
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d018      	beq.n	800a73a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d108      	bne.n	800a728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d024      	beq.n	800a768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	4798      	blx	r3
 800a726:	e01f      	b.n	800a768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01b      	beq.n	800a768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	4798      	blx	r3
 800a738:	e016      	b.n	800a768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a744:	2b00      	cmp	r3, #0
 800a746:	d107      	bne.n	800a758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0208 	bic.w	r2, r2, #8
 800a756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a76c:	2220      	movs	r2, #32
 800a76e:	409a      	lsls	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4013      	ands	r3, r2
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 808e 	beq.w	800a896 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 8086 	beq.w	800a896 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78e:	2220      	movs	r2, #32
 800a790:	409a      	lsls	r2, r3
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d136      	bne.n	800a810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0216 	bic.w	r2, r2, #22
 800a7b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	695a      	ldr	r2, [r3, #20]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d103      	bne.n	800a7d2 <HAL_DMA_IRQHandler+0x1da>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f022 0208 	bic.w	r2, r2, #8
 800a7e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e6:	223f      	movs	r2, #63	; 0x3f
 800a7e8:	409a      	lsls	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a802:	2b00      	cmp	r3, #0
 800a804:	d07d      	beq.n	800a902 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
        }
        return;
 800a80e:	e078      	b.n	800a902 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d01c      	beq.n	800a858 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d108      	bne.n	800a83e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a830:	2b00      	cmp	r3, #0
 800a832:	d030      	beq.n	800a896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	4798      	blx	r3
 800a83c:	e02b      	b.n	800a896 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d027      	beq.n	800a896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	4798      	blx	r3
 800a84e:	e022      	b.n	800a896 <HAL_DMA_IRQHandler+0x29e>
 800a850:	20000038 	.word	0x20000038
 800a854:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10f      	bne.n	800a886 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f022 0210 	bic.w	r2, r2, #16
 800a874:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d032      	beq.n	800a904 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d022      	beq.n	800a8f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2205      	movs	r2, #5
 800a8ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 0201 	bic.w	r2, r2, #1
 800a8c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	60bb      	str	r3, [r7, #8]
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d307      	bcc.n	800a8de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1f2      	bne.n	800a8c2 <HAL_DMA_IRQHandler+0x2ca>
 800a8dc:	e000      	b.n	800a8e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a8de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	4798      	blx	r3
 800a900:	e000      	b.n	800a904 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a902:	bf00      	nop
    }
  }
}
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop

0800a90c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a928:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	2b40      	cmp	r3, #64	; 0x40
 800a938:	d108      	bne.n	800a94c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a94a:	e007      	b.n	800a95c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	60da      	str	r2, [r3, #12]
}
 800a95c:	bf00      	nop
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	b2db      	uxtb	r3, r3
 800a976:	3b10      	subs	r3, #16
 800a978:	4a14      	ldr	r2, [pc, #80]	; (800a9cc <DMA_CalcBaseAndBitshift+0x64>)
 800a97a:	fba2 2303 	umull	r2, r3, r2, r3
 800a97e:	091b      	lsrs	r3, r3, #4
 800a980:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a982:	4a13      	ldr	r2, [pc, #76]	; (800a9d0 <DMA_CalcBaseAndBitshift+0x68>)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b03      	cmp	r3, #3
 800a994:	d909      	bls.n	800a9aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	1d1a      	adds	r2, r3, #4
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	659a      	str	r2, [r3, #88]	; 0x58
 800a9a8:	e007      	b.n	800a9ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	aaaaaaab 	.word	0xaaaaaaab
 800a9d0:	08013700 	.word	0x08013700

0800a9d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d11f      	bne.n	800aa2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d855      	bhi.n	800aaa0 <DMA_CheckFifoParam+0xcc>
 800a9f4:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <DMA_CheckFifoParam+0x28>)
 800a9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fa:	bf00      	nop
 800a9fc:	0800aa0d 	.word	0x0800aa0d
 800aa00:	0800aa1f 	.word	0x0800aa1f
 800aa04:	0800aa0d 	.word	0x0800aa0d
 800aa08:	0800aaa1 	.word	0x0800aaa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d045      	beq.n	800aaa4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa1c:	e042      	b.n	800aaa4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa26:	d13f      	bne.n	800aaa8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa2c:	e03c      	b.n	800aaa8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa36:	d121      	bne.n	800aa7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d836      	bhi.n	800aaac <DMA_CheckFifoParam+0xd8>
 800aa3e:	a201      	add	r2, pc, #4	; (adr r2, 800aa44 <DMA_CheckFifoParam+0x70>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa55 	.word	0x0800aa55
 800aa48:	0800aa5b 	.word	0x0800aa5b
 800aa4c:	0800aa55 	.word	0x0800aa55
 800aa50:	0800aa6d 	.word	0x0800aa6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	73fb      	strb	r3, [r7, #15]
      break;
 800aa58:	e02f      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d024      	beq.n	800aab0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa6a:	e021      	b.n	800aab0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa74:	d11e      	bne.n	800aab4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa7a:	e01b      	b.n	800aab4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d902      	bls.n	800aa88 <DMA_CheckFifoParam+0xb4>
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d003      	beq.n	800aa8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa86:	e018      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa8c:	e015      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00e      	beq.n	800aab8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa9e:	e00b      	b.n	800aab8 <DMA_CheckFifoParam+0xe4>
      break;
 800aaa0:	bf00      	nop
 800aaa2:	e00a      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      break;
 800aaa4:	bf00      	nop
 800aaa6:	e008      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      break;
 800aaa8:	bf00      	nop
 800aaaa:	e006      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      break;
 800aaac:	bf00      	nop
 800aaae:	e004      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      break;
 800aab0:	bf00      	nop
 800aab2:	e002      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      break;   
 800aab4:	bf00      	nop
 800aab6:	e000      	b.n	800aaba <DMA_CheckFifoParam+0xe6>
      break;
 800aab8:	bf00      	nop
    }
  } 
  
  return status; 
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aada:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <HAL_FLASH_Program+0xa0>)
 800aadc:	7e1b      	ldrb	r3, [r3, #24]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_FLASH_Program+0x1e>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e03b      	b.n	800ab5e <HAL_FLASH_Program+0x96>
 800aae6:	4b20      	ldr	r3, [pc, #128]	; (800ab68 <HAL_FLASH_Program+0xa0>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aaec:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaf0:	f000 f870 	bl	800abd4 <FLASH_WaitForLastOperation>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d12b      	bne.n	800ab56 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d105      	bne.n	800ab10 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ab04:	783b      	ldrb	r3, [r7, #0]
 800ab06:	4619      	mov	r1, r3
 800ab08:	68b8      	ldr	r0, [r7, #8]
 800ab0a:	f000 f917 	bl	800ad3c <FLASH_Program_Byte>
 800ab0e:	e016      	b.n	800ab3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d105      	bne.n	800ab22 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ab16:	883b      	ldrh	r3, [r7, #0]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	68b8      	ldr	r0, [r7, #8]
 800ab1c:	f000 f8ea 	bl	800acf4 <FLASH_Program_HalfWord>
 800ab20:	e00d      	b.n	800ab3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d105      	bne.n	800ab34 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	68b8      	ldr	r0, [r7, #8]
 800ab2e:	f000 f8bf 	bl	800acb0 <FLASH_Program_Word>
 800ab32:	e004      	b.n	800ab3e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ab34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab38:	68b8      	ldr	r0, [r7, #8]
 800ab3a:	f000 f88b 	bl	800ac54 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab42:	f000 f847 	bl	800abd4 <FLASH_WaitForLastOperation>
 800ab46:	4603      	mov	r3, r0
 800ab48:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ab4a:	4b08      	ldr	r3, [pc, #32]	; (800ab6c <HAL_FLASH_Program+0xa4>)
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	4a07      	ldr	r2, [pc, #28]	; (800ab6c <HAL_FLASH_Program+0xa4>)
 800ab50:	f023 0301 	bic.w	r3, r3, #1
 800ab54:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab56:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <HAL_FLASH_Program+0xa0>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20004210 	.word	0x20004210
 800ab6c:	40023c00 	.word	0x40023c00

0800ab70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab7a:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <HAL_FLASH_Unlock+0x38>)
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	da0b      	bge.n	800ab9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <HAL_FLASH_Unlock+0x38>)
 800ab84:	4a09      	ldr	r2, [pc, #36]	; (800abac <HAL_FLASH_Unlock+0x3c>)
 800ab86:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ab88:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <HAL_FLASH_Unlock+0x38>)
 800ab8a:	4a09      	ldr	r2, [pc, #36]	; (800abb0 <HAL_FLASH_Unlock+0x40>)
 800ab8c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab8e:	4b06      	ldr	r3, [pc, #24]	; (800aba8 <HAL_FLASH_Unlock+0x38>)
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	da01      	bge.n	800ab9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	40023c00 	.word	0x40023c00
 800abac:	45670123 	.word	0x45670123
 800abb0:	cdef89ab 	.word	0xcdef89ab

0800abb4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800abb4:	b480      	push	{r7}
 800abb6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800abb8:	4b05      	ldr	r3, [pc, #20]	; (800abd0 <HAL_FLASH_Lock+0x1c>)
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	4a04      	ldr	r2, [pc, #16]	; (800abd0 <HAL_FLASH_Lock+0x1c>)
 800abbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abc2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	40023c00 	.word	0x40023c00

0800abd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800abe0:	4b1a      	ldr	r3, [pc, #104]	; (800ac4c <FLASH_WaitForLastOperation+0x78>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800abe6:	f7fe f92f 	bl	8008e48 <HAL_GetTick>
 800abea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800abec:	e010      	b.n	800ac10 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf4:	d00c      	beq.n	800ac10 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d007      	beq.n	800ac0c <FLASH_WaitForLastOperation+0x38>
 800abfc:	f7fe f924 	bl	8008e48 <HAL_GetTick>
 800ac00:	4602      	mov	r2, r0
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d201      	bcs.n	800ac10 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e019      	b.n	800ac44 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac10:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <FLASH_WaitForLastOperation+0x7c>)
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1e8      	bne.n	800abee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ac1c:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <FLASH_WaitForLastOperation+0x7c>)
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac28:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <FLASH_WaitForLastOperation+0x7c>)
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ac2e:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <FLASH_WaitForLastOperation+0x7c>)
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ac3a:	f000 f8a1 	bl	800ad80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e000      	b.n	800ac44 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
  
}  
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20004210 	.word	0x20004210
 800ac50:	40023c00 	.word	0x40023c00

0800ac54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ac54:	b490      	push	{r4, r7}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac60:	4b12      	ldr	r3, [pc, #72]	; (800acac <FLASH_Program_DoubleWord+0x58>)
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	4a11      	ldr	r2, [pc, #68]	; (800acac <FLASH_Program_DoubleWord+0x58>)
 800ac66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ac6c:	4b0f      	ldr	r3, [pc, #60]	; (800acac <FLASH_Program_DoubleWord+0x58>)
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <FLASH_Program_DoubleWord+0x58>)
 800ac72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <FLASH_Program_DoubleWord+0x58>)
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	4a0b      	ldr	r2, [pc, #44]	; (800acac <FLASH_Program_DoubleWord+0x58>)
 800ac7e:	f043 0301 	orr.w	r3, r3, #1
 800ac82:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ac8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	f04f 0400 	mov.w	r4, #0
 800ac96:	0013      	movs	r3, r2
 800ac98:	2400      	movs	r4, #0
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	3204      	adds	r2, #4
 800ac9e:	6013      	str	r3, [r2, #0]
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bc90      	pop	{r4, r7}
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	40023c00 	.word	0x40023c00

0800acb0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800acba:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <FLASH_Program_Word+0x40>)
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	4a0c      	ldr	r2, [pc, #48]	; (800acf0 <FLASH_Program_Word+0x40>)
 800acc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800acc6:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <FLASH_Program_Word+0x40>)
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <FLASH_Program_Word+0x40>)
 800accc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acd2:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <FLASH_Program_Word+0x40>)
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	4a06      	ldr	r2, [pc, #24]	; (800acf0 <FLASH_Program_Word+0x40>)
 800acd8:	f043 0301 	orr.w	r3, r3, #1
 800acdc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	601a      	str	r2, [r3, #0]
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	40023c00 	.word	0x40023c00

0800acf4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad00:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <FLASH_Program_HalfWord+0x44>)
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <FLASH_Program_HalfWord+0x44>)
 800ad06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <FLASH_Program_HalfWord+0x44>)
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	4a09      	ldr	r2, [pc, #36]	; (800ad38 <FLASH_Program_HalfWord+0x44>)
 800ad12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad18:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <FLASH_Program_HalfWord+0x44>)
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	4a06      	ldr	r2, [pc, #24]	; (800ad38 <FLASH_Program_HalfWord+0x44>)
 800ad1e:	f043 0301 	orr.w	r3, r3, #1
 800ad22:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	887a      	ldrh	r2, [r7, #2]
 800ad28:	801a      	strh	r2, [r3, #0]
}
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	40023c00 	.word	0x40023c00

0800ad3c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad48:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <FLASH_Program_Byte+0x40>)
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	4a0b      	ldr	r2, [pc, #44]	; (800ad7c <FLASH_Program_Byte+0x40>)
 800ad4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ad54:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <FLASH_Program_Byte+0x40>)
 800ad56:	4a09      	ldr	r2, [pc, #36]	; (800ad7c <FLASH_Program_Byte+0x40>)
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad5c:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <FLASH_Program_Byte+0x40>)
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	4a06      	ldr	r2, [pc, #24]	; (800ad7c <FLASH_Program_Byte+0x40>)
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	78fa      	ldrb	r2, [r7, #3]
 800ad6c:	701a      	strb	r2, [r3, #0]
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	40023c00 	.word	0x40023c00

0800ad80 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ad84:	4b2f      	ldr	r3, [pc, #188]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f003 0310 	and.w	r3, r3, #16
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d008      	beq.n	800ada2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ad90:	4b2d      	ldr	r3, [pc, #180]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	f043 0310 	orr.w	r3, r3, #16
 800ad98:	4a2b      	ldr	r2, [pc, #172]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800ad9a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ad9c:	4b29      	ldr	r3, [pc, #164]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800ad9e:	2210      	movs	r2, #16
 800ada0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ada2:	4b28      	ldr	r3, [pc, #160]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d008      	beq.n	800adc0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800adae:	4b26      	ldr	r3, [pc, #152]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	f043 0308 	orr.w	r3, r3, #8
 800adb6:	4a24      	ldr	r2, [pc, #144]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800adb8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800adba:	4b22      	ldr	r3, [pc, #136]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800adbc:	2220      	movs	r2, #32
 800adbe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800adc0:	4b20      	ldr	r3, [pc, #128]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d008      	beq.n	800adde <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800adcc:	4b1e      	ldr	r3, [pc, #120]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f043 0304 	orr.w	r3, r3, #4
 800add4:	4a1c      	ldr	r2, [pc, #112]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800add6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800add8:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800adda:	2240      	movs	r2, #64	; 0x40
 800addc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800adde:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d008      	beq.n	800adfc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800adea:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	4a15      	ldr	r2, [pc, #84]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800adf4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800adf6:	4b13      	ldr	r3, [pc, #76]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800adf8:	2280      	movs	r2, #128	; 0x80
 800adfa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800adfc:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d009      	beq.n	800ae1c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ae08:	4b0f      	ldr	r3, [pc, #60]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f043 0301 	orr.w	r3, r3, #1
 800ae10:	4a0d      	ldr	r2, [pc, #52]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800ae12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800ae14:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800ae16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae1a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d008      	beq.n	800ae3a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ae28:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	f043 0320 	orr.w	r3, r3, #32
 800ae30:	4a05      	ldr	r2, [pc, #20]	; (800ae48 <FLASH_SetErrorCode+0xc8>)
 800ae32:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ae34:	4b03      	ldr	r3, [pc, #12]	; (800ae44 <FLASH_SetErrorCode+0xc4>)
 800ae36:	2202      	movs	r2, #2
 800ae38:	60da      	str	r2, [r3, #12]
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	40023c00 	.word	0x40023c00
 800ae48:	20004210 	.word	0x20004210

0800ae4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae5e:	4b31      	ldr	r3, [pc, #196]	; (800af24 <HAL_FLASHEx_Erase+0xd8>)
 800ae60:	7e1b      	ldrb	r3, [r3, #24]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d101      	bne.n	800ae6a <HAL_FLASHEx_Erase+0x1e>
 800ae66:	2302      	movs	r3, #2
 800ae68:	e058      	b.n	800af1c <HAL_FLASHEx_Erase+0xd0>
 800ae6a:	4b2e      	ldr	r3, [pc, #184]	; (800af24 <HAL_FLASHEx_Erase+0xd8>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae70:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae74:	f7ff feae 	bl	800abd4 <FLASH_WaitForLastOperation>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d148      	bne.n	800af14 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d115      	bne.n	800aebe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	4610      	mov	r0, r2
 800aea0:	f000 f844 	bl	800af2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aea8:	f7ff fe94 	bl	800abd4 <FLASH_WaitForLastOperation>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800aeb0:	4b1d      	ldr	r3, [pc, #116]	; (800af28 <HAL_FLASHEx_Erase+0xdc>)
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	4a1c      	ldr	r2, [pc, #112]	; (800af28 <HAL_FLASHEx_Erase+0xdc>)
 800aeb6:	f023 0304 	bic.w	r3, r3, #4
 800aeba:	6113      	str	r3, [r2, #16]
 800aebc:	e028      	b.n	800af10 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	60bb      	str	r3, [r7, #8]
 800aec4:	e01c      	b.n	800af00 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	4619      	mov	r1, r3
 800aece:	68b8      	ldr	r0, [r7, #8]
 800aed0:	f000 f850 	bl	800af74 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aed4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aed8:	f7ff fe7c 	bl	800abd4 <FLASH_WaitForLastOperation>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800aee0:	4b11      	ldr	r3, [pc, #68]	; (800af28 <HAL_FLASHEx_Erase+0xdc>)
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	4a10      	ldr	r2, [pc, #64]	; (800af28 <HAL_FLASHEx_Erase+0xdc>)
 800aee6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800aeea:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	601a      	str	r2, [r3, #0]
          break;
 800aef8:	e00a      	b.n	800af10 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	3301      	adds	r3, #1
 800aefe:	60bb      	str	r3, [r7, #8]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68da      	ldr	r2, [r3, #12]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	4413      	add	r3, r2
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d3da      	bcc.n	800aec6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800af10:	f000 f878 	bl	800b004 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af14:	4b03      	ldr	r3, [pc, #12]	; (800af24 <HAL_FLASHEx_Erase+0xd8>)
 800af16:	2200      	movs	r2, #0
 800af18:	761a      	strb	r2, [r3, #24]

  return status;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20004210 	.word	0x20004210
 800af28:	40023c00 	.word	0x40023c00

0800af2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	4603      	mov	r3, r0
 800af34:	6039      	str	r1, [r7, #0]
 800af36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af38:	4b0d      	ldr	r3, [pc, #52]	; (800af70 <FLASH_MassErase+0x44>)
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	4a0c      	ldr	r2, [pc, #48]	; (800af70 <FLASH_MassErase+0x44>)
 800af3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800af44:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <FLASH_MassErase+0x44>)
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <FLASH_MassErase+0x44>)
 800af4a:	f043 0304 	orr.w	r3, r3, #4
 800af4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <FLASH_MassErase+0x44>)
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	021b      	lsls	r3, r3, #8
 800af58:	4313      	orrs	r3, r2
 800af5a:	4a05      	ldr	r2, [pc, #20]	; (800af70 <FLASH_MassErase+0x44>)
 800af5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af60:	6113      	str	r3, [r2, #16]
}
 800af62:	bf00      	nop
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	40023c00 	.word	0x40023c00

0800af74 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	460b      	mov	r3, r1
 800af7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d102      	bne.n	800af90 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	e010      	b.n	800afb2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800af90:	78fb      	ldrb	r3, [r7, #3]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d103      	bne.n	800af9e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800af96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af9a:	60fb      	str	r3, [r7, #12]
 800af9c:	e009      	b.n	800afb2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d103      	bne.n	800afac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800afa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	e002      	b.n	800afb2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800afac:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afb0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800afb2:	4b13      	ldr	r3, [pc, #76]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	4a12      	ldr	r2, [pc, #72]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800afbe:	4b10      	ldr	r3, [pc, #64]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afc0:	691a      	ldr	r2, [r3, #16]
 800afc2:	490f      	ldr	r1, [pc, #60]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800afca:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	4a0c      	ldr	r2, [pc, #48]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afd0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800afd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800afd6:	4b0a      	ldr	r3, [pc, #40]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afd8:	691a      	ldr	r2, [r3, #16]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	4313      	orrs	r3, r2
 800afe0:	4a07      	ldr	r2, [pc, #28]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afe2:	f043 0302 	orr.w	r3, r3, #2
 800afe6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800afe8:	4b05      	ldr	r3, [pc, #20]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	4a04      	ldr	r2, [pc, #16]	; (800b000 <FLASH_Erase_Sector+0x8c>)
 800afee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aff2:	6113      	str	r3, [r2, #16]
}
 800aff4:	bf00      	nop
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	40023c00 	.word	0x40023c00

0800b004 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b004:	b480      	push	{r7}
 800b006:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800b008:	4b20      	ldr	r3, [pc, #128]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b010:	2b00      	cmp	r3, #0
 800b012:	d017      	beq.n	800b044 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b014:	4b1d      	ldr	r3, [pc, #116]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a1c      	ldr	r2, [pc, #112]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b01a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b01e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b020:	4b1a      	ldr	r3, [pc, #104]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a19      	ldr	r2, [pc, #100]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	4b17      	ldr	r3, [pc, #92]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a16      	ldr	r2, [pc, #88]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b036:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b038:	4b14      	ldr	r3, [pc, #80]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a13      	ldr	r2, [pc, #76]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b03e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b042:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b044:	4b11      	ldr	r3, [pc, #68]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d017      	beq.n	800b080 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b050:	4b0e      	ldr	r3, [pc, #56]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a0d      	ldr	r2, [pc, #52]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b05a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b05c:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b062:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	4b08      	ldr	r3, [pc, #32]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a07      	ldr	r2, [pc, #28]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b06e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b072:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b074:	4b05      	ldr	r3, [pc, #20]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a04      	ldr	r2, [pc, #16]	; (800b08c <FLASH_FlushCaches+0x88>)
 800b07a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b07e:	6013      	str	r3, [r2, #0]
  }
}
 800b080:	bf00      	nop
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	40023c00 	.word	0x40023c00

0800b090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b090:	b480      	push	{r7}
 800b092:	b089      	sub	sp, #36	; 0x24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61fb      	str	r3, [r7, #28]
 800b0aa:	e165      	b.n	800b378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4013      	ands	r3, r2
 800b0be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	f040 8154 	bne.w	800b372 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d003      	beq.n	800b0da <HAL_GPIO_Init+0x4a>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	2b12      	cmp	r3, #18
 800b0d8:	d123      	bne.n	800b122 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	08da      	lsrs	r2, r3, #3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	3208      	adds	r2, #8
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	f003 0307 	and.w	r3, r3, #7
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	220f      	movs	r2, #15
 800b0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f6:	43db      	mvns	r3, r3
 800b0f8:	69ba      	ldr	r2, [r7, #24]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	f003 0307 	and.w	r3, r3, #7
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	fa02 f303 	lsl.w	r3, r2, r3
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	4313      	orrs	r3, r2
 800b112:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	08da      	lsrs	r2, r3, #3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3208      	adds	r2, #8
 800b11c:	69b9      	ldr	r1, [r7, #24]
 800b11e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	2203      	movs	r2, #3
 800b12e:	fa02 f303 	lsl.w	r3, r2, r3
 800b132:	43db      	mvns	r3, r3
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	4013      	ands	r3, r2
 800b138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f003 0203 	and.w	r2, r3, #3
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	fa02 f303 	lsl.w	r3, r2, r3
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d00b      	beq.n	800b176 <HAL_GPIO_Init+0xe6>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d007      	beq.n	800b176 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b16a:	2b11      	cmp	r3, #17
 800b16c:	d003      	beq.n	800b176 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	2b12      	cmp	r3, #18
 800b174:	d130      	bne.n	800b1d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	2203      	movs	r2, #3
 800b182:	fa02 f303 	lsl.w	r3, r2, r3
 800b186:	43db      	mvns	r3, r3
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	4013      	ands	r3, r2
 800b18c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	fa02 f303 	lsl.w	r3, r2, r3
 800b19a:	69ba      	ldr	r2, [r7, #24]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	69ba      	ldr	r2, [r7, #24]
 800b1a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b4:	43db      	mvns	r3, r3
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	091b      	lsrs	r3, r3, #4
 800b1c2:	f003 0201 	and.w	r2, r3, #1
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e8:	43db      	mvns	r3, r3
 800b1ea:	69ba      	ldr	r2, [r7, #24]
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 80ae 	beq.w	800b372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
 800b21a:	4b5c      	ldr	r3, [pc, #368]	; (800b38c <HAL_GPIO_Init+0x2fc>)
 800b21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21e:	4a5b      	ldr	r2, [pc, #364]	; (800b38c <HAL_GPIO_Init+0x2fc>)
 800b220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b224:	6453      	str	r3, [r2, #68]	; 0x44
 800b226:	4b59      	ldr	r3, [pc, #356]	; (800b38c <HAL_GPIO_Init+0x2fc>)
 800b228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b232:	4a57      	ldr	r2, [pc, #348]	; (800b390 <HAL_GPIO_Init+0x300>)
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	089b      	lsrs	r3, r3, #2
 800b238:	3302      	adds	r3, #2
 800b23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b23e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	220f      	movs	r2, #15
 800b24a:	fa02 f303 	lsl.w	r3, r2, r3
 800b24e:	43db      	mvns	r3, r3
 800b250:	69ba      	ldr	r2, [r7, #24]
 800b252:	4013      	ands	r3, r2
 800b254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a4e      	ldr	r2, [pc, #312]	; (800b394 <HAL_GPIO_Init+0x304>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d025      	beq.n	800b2aa <HAL_GPIO_Init+0x21a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a4d      	ldr	r2, [pc, #308]	; (800b398 <HAL_GPIO_Init+0x308>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d01f      	beq.n	800b2a6 <HAL_GPIO_Init+0x216>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a4c      	ldr	r2, [pc, #304]	; (800b39c <HAL_GPIO_Init+0x30c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d019      	beq.n	800b2a2 <HAL_GPIO_Init+0x212>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a4b      	ldr	r2, [pc, #300]	; (800b3a0 <HAL_GPIO_Init+0x310>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d013      	beq.n	800b29e <HAL_GPIO_Init+0x20e>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a4a      	ldr	r2, [pc, #296]	; (800b3a4 <HAL_GPIO_Init+0x314>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00d      	beq.n	800b29a <HAL_GPIO_Init+0x20a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a49      	ldr	r2, [pc, #292]	; (800b3a8 <HAL_GPIO_Init+0x318>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d007      	beq.n	800b296 <HAL_GPIO_Init+0x206>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a48      	ldr	r2, [pc, #288]	; (800b3ac <HAL_GPIO_Init+0x31c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d101      	bne.n	800b292 <HAL_GPIO_Init+0x202>
 800b28e:	2306      	movs	r3, #6
 800b290:	e00c      	b.n	800b2ac <HAL_GPIO_Init+0x21c>
 800b292:	2307      	movs	r3, #7
 800b294:	e00a      	b.n	800b2ac <HAL_GPIO_Init+0x21c>
 800b296:	2305      	movs	r3, #5
 800b298:	e008      	b.n	800b2ac <HAL_GPIO_Init+0x21c>
 800b29a:	2304      	movs	r3, #4
 800b29c:	e006      	b.n	800b2ac <HAL_GPIO_Init+0x21c>
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e004      	b.n	800b2ac <HAL_GPIO_Init+0x21c>
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e002      	b.n	800b2ac <HAL_GPIO_Init+0x21c>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <HAL_GPIO_Init+0x21c>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	69fa      	ldr	r2, [r7, #28]
 800b2ae:	f002 0203 	and.w	r2, r2, #3
 800b2b2:	0092      	lsls	r2, r2, #2
 800b2b4:	4093      	lsls	r3, r2
 800b2b6:	69ba      	ldr	r2, [r7, #24]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2bc:	4934      	ldr	r1, [pc, #208]	; (800b390 <HAL_GPIO_Init+0x300>)
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	089b      	lsrs	r3, r3, #2
 800b2c2:	3302      	adds	r3, #2
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b2ca:	4b39      	ldr	r3, [pc, #228]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	43db      	mvns	r3, r3
 800b2d4:	69ba      	ldr	r2, [r7, #24]
 800b2d6:	4013      	ands	r3, r2
 800b2d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d003      	beq.n	800b2ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b2ee:	4a30      	ldr	r2, [pc, #192]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b2f4:	4b2e      	ldr	r3, [pc, #184]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	43db      	mvns	r3, r3
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	4013      	ands	r3, r2
 800b302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d003      	beq.n	800b318 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	4313      	orrs	r3, r2
 800b316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b318:	4a25      	ldr	r2, [pc, #148]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b31e:	4b24      	ldr	r3, [pc, #144]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	43db      	mvns	r3, r3
 800b328:	69ba      	ldr	r2, [r7, #24]
 800b32a:	4013      	ands	r3, r2
 800b32c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	4313      	orrs	r3, r2
 800b340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b342:	4a1b      	ldr	r2, [pc, #108]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b348:	4b19      	ldr	r3, [pc, #100]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	43db      	mvns	r3, r3
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	4013      	ands	r3, r2
 800b356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b36c:	4a10      	ldr	r2, [pc, #64]	; (800b3b0 <HAL_GPIO_Init+0x320>)
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	3301      	adds	r3, #1
 800b376:	61fb      	str	r3, [r7, #28]
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	2b0f      	cmp	r3, #15
 800b37c:	f67f ae96 	bls.w	800b0ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b380:	bf00      	nop
 800b382:	3724      	adds	r7, #36	; 0x24
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	40023800 	.word	0x40023800
 800b390:	40013800 	.word	0x40013800
 800b394:	40020000 	.word	0x40020000
 800b398:	40020400 	.word	0x40020400
 800b39c:	40020800 	.word	0x40020800
 800b3a0:	40020c00 	.word	0x40020c00
 800b3a4:	40021000 	.word	0x40021000
 800b3a8:	40021400 	.word	0x40021400
 800b3ac:	40021800 	.word	0x40021800
 800b3b0:	40013c00 	.word	0x40013c00

0800b3b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	691a      	ldr	r2, [r3, #16]
 800b3c4:	887b      	ldrh	r3, [r7, #2]
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]
 800b3d0:	e001      	b.n	800b3d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	807b      	strh	r3, [r7, #2]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b3f4:	787b      	ldrb	r3, [r7, #1]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b3fa:	887a      	ldrh	r2, [r7, #2]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b400:	e003      	b.n	800b40a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b402:	887b      	ldrh	r3, [r7, #2]
 800b404:	041a      	lsls	r2, r3, #16
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	619a      	str	r2, [r3, #24]
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	887b      	ldrh	r3, [r7, #2]
 800b428:	401a      	ands	r2, r3
 800b42a:	887b      	ldrh	r3, [r7, #2]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d104      	bne.n	800b43a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b430:	887b      	ldrh	r3, [r7, #2]
 800b432:	041a      	lsls	r2, r3, #16
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800b438:	e002      	b.n	800b440 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800b43a:	887a      	ldrh	r2, [r7, #2]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	619a      	str	r2, [r3, #24]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e0ca      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b460:	4b67      	ldr	r3, [pc, #412]	; (800b600 <HAL_RCC_ClockConfig+0x1b4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 030f 	and.w	r3, r3, #15
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d90c      	bls.n	800b488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b46e:	4b64      	ldr	r3, [pc, #400]	; (800b600 <HAL_RCC_ClockConfig+0x1b4>)
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	b2d2      	uxtb	r2, r2
 800b474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b476:	4b62      	ldr	r3, [pc, #392]	; (800b600 <HAL_RCC_ClockConfig+0x1b4>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 030f 	and.w	r3, r3, #15
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	429a      	cmp	r2, r3
 800b482:	d001      	beq.n	800b488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e0b6      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0302 	and.w	r3, r3, #2
 800b490:	2b00      	cmp	r3, #0
 800b492:	d020      	beq.n	800b4d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4a0:	4b58      	ldr	r3, [pc, #352]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	4a57      	ldr	r2, [pc, #348]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b4a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0308 	and.w	r3, r3, #8
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d005      	beq.n	800b4c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4b8:	4b52      	ldr	r3, [pc, #328]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	4a51      	ldr	r2, [pc, #324]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b4be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4c4:	4b4f      	ldr	r3, [pc, #316]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	494c      	ldr	r1, [pc, #304]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0301 	and.w	r3, r3, #1
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d044      	beq.n	800b56c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4ea:	4b46      	ldr	r3, [pc, #280]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d119      	bne.n	800b52a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e07d      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d003      	beq.n	800b50a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b506:	2b03      	cmp	r3, #3
 800b508:	d107      	bne.n	800b51a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b50a:	4b3e      	ldr	r3, [pc, #248]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e06d      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b51a:	4b3a      	ldr	r3, [pc, #232]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0302 	and.w	r3, r3, #2
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e065      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b52a:	4b36      	ldr	r3, [pc, #216]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	f023 0203 	bic.w	r2, r3, #3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4933      	ldr	r1, [pc, #204]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b53c:	f7fd fc84 	bl	8008e48 <HAL_GetTick>
 800b540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b542:	e00a      	b.n	800b55a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b544:	f7fd fc80 	bl	8008e48 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b552:	4293      	cmp	r3, r2
 800b554:	d901      	bls.n	800b55a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e04d      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b55a:	4b2a      	ldr	r3, [pc, #168]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f003 020c 	and.w	r2, r3, #12
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	429a      	cmp	r2, r3
 800b56a:	d1eb      	bne.n	800b544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b56c:	4b24      	ldr	r3, [pc, #144]	; (800b600 <HAL_RCC_ClockConfig+0x1b4>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 030f 	and.w	r3, r3, #15
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	429a      	cmp	r2, r3
 800b578:	d20c      	bcs.n	800b594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b57a:	4b21      	ldr	r3, [pc, #132]	; (800b600 <HAL_RCC_ClockConfig+0x1b4>)
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b582:	4b1f      	ldr	r3, [pc, #124]	; (800b600 <HAL_RCC_ClockConfig+0x1b4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 030f 	and.w	r3, r3, #15
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d001      	beq.n	800b594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e030      	b.n	800b5f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5a0:	4b18      	ldr	r3, [pc, #96]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	4915      	ldr	r1, [pc, #84]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 0308 	and.w	r3, r3, #8
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d009      	beq.n	800b5d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5be:	4b11      	ldr	r3, [pc, #68]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	490d      	ldr	r1, [pc, #52]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5d2:	f000 f851 	bl	800b678 <HAL_RCC_GetSysClockFreq>
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <HAL_RCC_ClockConfig+0x1b8>)
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	091b      	lsrs	r3, r3, #4
 800b5de:	f003 030f 	and.w	r3, r3, #15
 800b5e2:	4a09      	ldr	r2, [pc, #36]	; (800b608 <HAL_RCC_ClockConfig+0x1bc>)
 800b5e4:	5cd3      	ldrb	r3, [r2, r3]
 800b5e6:	fa21 f303 	lsr.w	r3, r1, r3
 800b5ea:	4a08      	ldr	r2, [pc, #32]	; (800b60c <HAL_RCC_ClockConfig+0x1c0>)
 800b5ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	f7fd fbe6 	bl	8008dc0 <HAL_InitTick>

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	40023c00 	.word	0x40023c00
 800b604:	40023800 	.word	0x40023800
 800b608:	08026fc0 	.word	0x08026fc0
 800b60c:	20000038 	.word	0x20000038

0800b610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b610:	b480      	push	{r7}
 800b612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b614:	4b03      	ldr	r3, [pc, #12]	; (800b624 <HAL_RCC_GetHCLKFreq+0x14>)
 800b616:	681b      	ldr	r3, [r3, #0]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	20000038 	.word	0x20000038

0800b628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b62c:	f7ff fff0 	bl	800b610 <HAL_RCC_GetHCLKFreq>
 800b630:	4601      	mov	r1, r0
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	0a9b      	lsrs	r3, r3, #10
 800b638:	f003 0307 	and.w	r3, r3, #7
 800b63c:	4a03      	ldr	r2, [pc, #12]	; (800b64c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b63e:	5cd3      	ldrb	r3, [r2, r3]
 800b640:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b644:	4618      	mov	r0, r3
 800b646:	bd80      	pop	{r7, pc}
 800b648:	40023800 	.word	0x40023800
 800b64c:	08026fd0 	.word	0x08026fd0

0800b650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b654:	f7ff ffdc 	bl	800b610 <HAL_RCC_GetHCLKFreq>
 800b658:	4601      	mov	r1, r0
 800b65a:	4b05      	ldr	r3, [pc, #20]	; (800b670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	0b5b      	lsrs	r3, r3, #13
 800b660:	f003 0307 	and.w	r3, r3, #7
 800b664:	4a03      	ldr	r2, [pc, #12]	; (800b674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b666:	5cd3      	ldrb	r3, [r2, r3]
 800b668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	40023800 	.word	0x40023800
 800b674:	08026fd0 	.word	0x08026fd0

0800b678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b686:	2300      	movs	r3, #0
 800b688:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b692:	4bc6      	ldr	r3, [pc, #792]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	f003 030c 	and.w	r3, r3, #12
 800b69a:	2b0c      	cmp	r3, #12
 800b69c:	f200 817e 	bhi.w	800b99c <HAL_RCC_GetSysClockFreq+0x324>
 800b6a0:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <HAL_RCC_GetSysClockFreq+0x30>)
 800b6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a6:	bf00      	nop
 800b6a8:	0800b6dd 	.word	0x0800b6dd
 800b6ac:	0800b99d 	.word	0x0800b99d
 800b6b0:	0800b99d 	.word	0x0800b99d
 800b6b4:	0800b99d 	.word	0x0800b99d
 800b6b8:	0800b6e3 	.word	0x0800b6e3
 800b6bc:	0800b99d 	.word	0x0800b99d
 800b6c0:	0800b99d 	.word	0x0800b99d
 800b6c4:	0800b99d 	.word	0x0800b99d
 800b6c8:	0800b6e9 	.word	0x0800b6e9
 800b6cc:	0800b99d 	.word	0x0800b99d
 800b6d0:	0800b99d 	.word	0x0800b99d
 800b6d4:	0800b99d 	.word	0x0800b99d
 800b6d8:	0800b845 	.word	0x0800b845
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b6dc:	4bb4      	ldr	r3, [pc, #720]	; (800b9b0 <HAL_RCC_GetSysClockFreq+0x338>)
 800b6de:	613b      	str	r3, [r7, #16]
       break;
 800b6e0:	e15f      	b.n	800b9a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b6e2:	4bb4      	ldr	r3, [pc, #720]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b6e4:	613b      	str	r3, [r7, #16]
      break;
 800b6e6:	e15c      	b.n	800b9a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b6e8:	4bb0      	ldr	r3, [pc, #704]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b6f2:	4bae      	ldr	r3, [pc, #696]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d04a      	beq.n	800b794 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6fe:	4bab      	ldr	r3, [pc, #684]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	099b      	lsrs	r3, r3, #6
 800b704:	f04f 0400 	mov.w	r4, #0
 800b708:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b70c:	f04f 0200 	mov.w	r2, #0
 800b710:	ea03 0501 	and.w	r5, r3, r1
 800b714:	ea04 0602 	and.w	r6, r4, r2
 800b718:	4629      	mov	r1, r5
 800b71a:	4632      	mov	r2, r6
 800b71c:	f04f 0300 	mov.w	r3, #0
 800b720:	f04f 0400 	mov.w	r4, #0
 800b724:	0154      	lsls	r4, r2, #5
 800b726:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b72a:	014b      	lsls	r3, r1, #5
 800b72c:	4619      	mov	r1, r3
 800b72e:	4622      	mov	r2, r4
 800b730:	1b49      	subs	r1, r1, r5
 800b732:	eb62 0206 	sbc.w	r2, r2, r6
 800b736:	f04f 0300 	mov.w	r3, #0
 800b73a:	f04f 0400 	mov.w	r4, #0
 800b73e:	0194      	lsls	r4, r2, #6
 800b740:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b744:	018b      	lsls	r3, r1, #6
 800b746:	1a5b      	subs	r3, r3, r1
 800b748:	eb64 0402 	sbc.w	r4, r4, r2
 800b74c:	f04f 0100 	mov.w	r1, #0
 800b750:	f04f 0200 	mov.w	r2, #0
 800b754:	00e2      	lsls	r2, r4, #3
 800b756:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b75a:	00d9      	lsls	r1, r3, #3
 800b75c:	460b      	mov	r3, r1
 800b75e:	4614      	mov	r4, r2
 800b760:	195b      	adds	r3, r3, r5
 800b762:	eb44 0406 	adc.w	r4, r4, r6
 800b766:	f04f 0100 	mov.w	r1, #0
 800b76a:	f04f 0200 	mov.w	r2, #0
 800b76e:	0262      	lsls	r2, r4, #9
 800b770:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b774:	0259      	lsls	r1, r3, #9
 800b776:	460b      	mov	r3, r1
 800b778:	4614      	mov	r4, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	4621      	mov	r1, r4
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f04f 0400 	mov.w	r4, #0
 800b784:	461a      	mov	r2, r3
 800b786:	4623      	mov	r3, r4
 800b788:	f7fd f978 	bl	8008a7c <__aeabi_uldivmod>
 800b78c:	4603      	mov	r3, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	617b      	str	r3, [r7, #20]
 800b792:	e049      	b.n	800b828 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b794:	4b85      	ldr	r3, [pc, #532]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	099b      	lsrs	r3, r3, #6
 800b79a:	f04f 0400 	mov.w	r4, #0
 800b79e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b7a2:	f04f 0200 	mov.w	r2, #0
 800b7a6:	ea03 0501 	and.w	r5, r3, r1
 800b7aa:	ea04 0602 	and.w	r6, r4, r2
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	f04f 0300 	mov.w	r3, #0
 800b7b6:	f04f 0400 	mov.w	r4, #0
 800b7ba:	0154      	lsls	r4, r2, #5
 800b7bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b7c0:	014b      	lsls	r3, r1, #5
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	1b49      	subs	r1, r1, r5
 800b7c8:	eb62 0206 	sbc.w	r2, r2, r6
 800b7cc:	f04f 0300 	mov.w	r3, #0
 800b7d0:	f04f 0400 	mov.w	r4, #0
 800b7d4:	0194      	lsls	r4, r2, #6
 800b7d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b7da:	018b      	lsls	r3, r1, #6
 800b7dc:	1a5b      	subs	r3, r3, r1
 800b7de:	eb64 0402 	sbc.w	r4, r4, r2
 800b7e2:	f04f 0100 	mov.w	r1, #0
 800b7e6:	f04f 0200 	mov.w	r2, #0
 800b7ea:	00e2      	lsls	r2, r4, #3
 800b7ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b7f0:	00d9      	lsls	r1, r3, #3
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	195b      	adds	r3, r3, r5
 800b7f8:	eb44 0406 	adc.w	r4, r4, r6
 800b7fc:	f04f 0100 	mov.w	r1, #0
 800b800:	f04f 0200 	mov.w	r2, #0
 800b804:	02a2      	lsls	r2, r4, #10
 800b806:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b80a:	0299      	lsls	r1, r3, #10
 800b80c:	460b      	mov	r3, r1
 800b80e:	4614      	mov	r4, r2
 800b810:	4618      	mov	r0, r3
 800b812:	4621      	mov	r1, r4
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f04f 0400 	mov.w	r4, #0
 800b81a:	461a      	mov	r2, r3
 800b81c:	4623      	mov	r3, r4
 800b81e:	f7fd f92d 	bl	8008a7c <__aeabi_uldivmod>
 800b822:	4603      	mov	r3, r0
 800b824:	460c      	mov	r4, r1
 800b826:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b828:	4b60      	ldr	r3, [pc, #384]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	0c1b      	lsrs	r3, r3, #16
 800b82e:	f003 0303 	and.w	r3, r3, #3
 800b832:	3301      	adds	r3, #1
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b840:	613b      	str	r3, [r7, #16]
      break;
 800b842:	e0ae      	b.n	800b9a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b844:	4b59      	ldr	r3, [pc, #356]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b84c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b84e:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d04a      	beq.n	800b8f0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b85a:	4b54      	ldr	r3, [pc, #336]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	099b      	lsrs	r3, r3, #6
 800b860:	f04f 0400 	mov.w	r4, #0
 800b864:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b868:	f04f 0200 	mov.w	r2, #0
 800b86c:	ea03 0501 	and.w	r5, r3, r1
 800b870:	ea04 0602 	and.w	r6, r4, r2
 800b874:	4629      	mov	r1, r5
 800b876:	4632      	mov	r2, r6
 800b878:	f04f 0300 	mov.w	r3, #0
 800b87c:	f04f 0400 	mov.w	r4, #0
 800b880:	0154      	lsls	r4, r2, #5
 800b882:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b886:	014b      	lsls	r3, r1, #5
 800b888:	4619      	mov	r1, r3
 800b88a:	4622      	mov	r2, r4
 800b88c:	1b49      	subs	r1, r1, r5
 800b88e:	eb62 0206 	sbc.w	r2, r2, r6
 800b892:	f04f 0300 	mov.w	r3, #0
 800b896:	f04f 0400 	mov.w	r4, #0
 800b89a:	0194      	lsls	r4, r2, #6
 800b89c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b8a0:	018b      	lsls	r3, r1, #6
 800b8a2:	1a5b      	subs	r3, r3, r1
 800b8a4:	eb64 0402 	sbc.w	r4, r4, r2
 800b8a8:	f04f 0100 	mov.w	r1, #0
 800b8ac:	f04f 0200 	mov.w	r2, #0
 800b8b0:	00e2      	lsls	r2, r4, #3
 800b8b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b8b6:	00d9      	lsls	r1, r3, #3
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4614      	mov	r4, r2
 800b8bc:	195b      	adds	r3, r3, r5
 800b8be:	eb44 0406 	adc.w	r4, r4, r6
 800b8c2:	f04f 0100 	mov.w	r1, #0
 800b8c6:	f04f 0200 	mov.w	r2, #0
 800b8ca:	0262      	lsls	r2, r4, #9
 800b8cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b8d0:	0259      	lsls	r1, r3, #9
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	4621      	mov	r1, r4
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f04f 0400 	mov.w	r4, #0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4623      	mov	r3, r4
 800b8e4:	f7fd f8ca 	bl	8008a7c <__aeabi_uldivmod>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	e049      	b.n	800b984 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8f0:	4b2e      	ldr	r3, [pc, #184]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	099b      	lsrs	r3, r3, #6
 800b8f6:	f04f 0400 	mov.w	r4, #0
 800b8fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b8fe:	f04f 0200 	mov.w	r2, #0
 800b902:	ea03 0501 	and.w	r5, r3, r1
 800b906:	ea04 0602 	and.w	r6, r4, r2
 800b90a:	4629      	mov	r1, r5
 800b90c:	4632      	mov	r2, r6
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	f04f 0400 	mov.w	r4, #0
 800b916:	0154      	lsls	r4, r2, #5
 800b918:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b91c:	014b      	lsls	r3, r1, #5
 800b91e:	4619      	mov	r1, r3
 800b920:	4622      	mov	r2, r4
 800b922:	1b49      	subs	r1, r1, r5
 800b924:	eb62 0206 	sbc.w	r2, r2, r6
 800b928:	f04f 0300 	mov.w	r3, #0
 800b92c:	f04f 0400 	mov.w	r4, #0
 800b930:	0194      	lsls	r4, r2, #6
 800b932:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b936:	018b      	lsls	r3, r1, #6
 800b938:	1a5b      	subs	r3, r3, r1
 800b93a:	eb64 0402 	sbc.w	r4, r4, r2
 800b93e:	f04f 0100 	mov.w	r1, #0
 800b942:	f04f 0200 	mov.w	r2, #0
 800b946:	00e2      	lsls	r2, r4, #3
 800b948:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b94c:	00d9      	lsls	r1, r3, #3
 800b94e:	460b      	mov	r3, r1
 800b950:	4614      	mov	r4, r2
 800b952:	195b      	adds	r3, r3, r5
 800b954:	eb44 0406 	adc.w	r4, r4, r6
 800b958:	f04f 0100 	mov.w	r1, #0
 800b95c:	f04f 0200 	mov.w	r2, #0
 800b960:	02a2      	lsls	r2, r4, #10
 800b962:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b966:	0299      	lsls	r1, r3, #10
 800b968:	460b      	mov	r3, r1
 800b96a:	4614      	mov	r4, r2
 800b96c:	4618      	mov	r0, r3
 800b96e:	4621      	mov	r1, r4
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f04f 0400 	mov.w	r4, #0
 800b976:	461a      	mov	r2, r3
 800b978:	4623      	mov	r3, r4
 800b97a:	f7fd f87f 	bl	8008a7c <__aeabi_uldivmod>
 800b97e:	4603      	mov	r3, r0
 800b980:	460c      	mov	r4, r1
 800b982:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b984:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <HAL_RCC_GetSysClockFreq+0x334>)
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	0f1b      	lsrs	r3, r3, #28
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	fbb2 f3f3 	udiv	r3, r2, r3
 800b998:	613b      	str	r3, [r7, #16]
      break;
 800b99a:	e002      	b.n	800b9a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b99c:	4b04      	ldr	r3, [pc, #16]	; (800b9b0 <HAL_RCC_GetSysClockFreq+0x338>)
 800b99e:	613b      	str	r3, [r7, #16]
      break;
 800b9a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b9a2:	693b      	ldr	r3, [r7, #16]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	371c      	adds	r7, #28
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ac:	40023800 	.word	0x40023800
 800b9b0:	00f42400 	.word	0x00f42400
 800b9b4:	007a1200 	.word	0x007a1200

0800b9b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8083 	beq.w	800bad8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b9d2:	4b95      	ldr	r3, [pc, #596]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f003 030c 	and.w	r3, r3, #12
 800b9da:	2b04      	cmp	r3, #4
 800b9dc:	d019      	beq.n	800ba12 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9de:	4b92      	ldr	r3, [pc, #584]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b9e6:	2b08      	cmp	r3, #8
 800b9e8:	d106      	bne.n	800b9f8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9ea:	4b8f      	ldr	r3, [pc, #572]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9f6:	d00c      	beq.n	800ba12 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b9f8:	4b8b      	ldr	r3, [pc, #556]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ba00:	2b0c      	cmp	r3, #12
 800ba02:	d112      	bne.n	800ba2a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba04:	4b88      	ldr	r3, [pc, #544]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba10:	d10b      	bne.n	800ba2a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba12:	4b85      	ldr	r3, [pc, #532]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d05b      	beq.n	800bad6 <HAL_RCC_OscConfig+0x11e>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d157      	bne.n	800bad6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e216      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba32:	d106      	bne.n	800ba42 <HAL_RCC_OscConfig+0x8a>
 800ba34:	4b7c      	ldr	r3, [pc, #496]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a7b      	ldr	r2, [pc, #492]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	e01d      	b.n	800ba7e <HAL_RCC_OscConfig+0xc6>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba4a:	d10c      	bne.n	800ba66 <HAL_RCC_OscConfig+0xae>
 800ba4c:	4b76      	ldr	r3, [pc, #472]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a75      	ldr	r2, [pc, #468]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	4b73      	ldr	r3, [pc, #460]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a72      	ldr	r2, [pc, #456]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	e00b      	b.n	800ba7e <HAL_RCC_OscConfig+0xc6>
 800ba66:	4b70      	ldr	r3, [pc, #448]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a6f      	ldr	r2, [pc, #444]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	4b6d      	ldr	r3, [pc, #436]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a6c      	ldr	r2, [pc, #432]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800ba78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d013      	beq.n	800baae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba86:	f7fd f9df 	bl	8008e48 <HAL_GetTick>
 800ba8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba8c:	e008      	b.n	800baa0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba8e:	f7fd f9db 	bl	8008e48 <HAL_GetTick>
 800ba92:	4602      	mov	r2, r0
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	2b64      	cmp	r3, #100	; 0x64
 800ba9a:	d901      	bls.n	800baa0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e1db      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800baa0:	4b61      	ldr	r3, [pc, #388]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d0f0      	beq.n	800ba8e <HAL_RCC_OscConfig+0xd6>
 800baac:	e014      	b.n	800bad8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baae:	f7fd f9cb 	bl	8008e48 <HAL_GetTick>
 800bab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bab4:	e008      	b.n	800bac8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bab6:	f7fd f9c7 	bl	8008e48 <HAL_GetTick>
 800baba:	4602      	mov	r2, r0
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	2b64      	cmp	r3, #100	; 0x64
 800bac2:	d901      	bls.n	800bac8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e1c7      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bac8:	4b57      	ldr	r3, [pc, #348]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1f0      	bne.n	800bab6 <HAL_RCC_OscConfig+0xfe>
 800bad4:	e000      	b.n	800bad8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bad6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0302 	and.w	r3, r3, #2
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d06f      	beq.n	800bbc4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bae4:	4b50      	ldr	r3, [pc, #320]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f003 030c 	and.w	r3, r3, #12
 800baec:	2b00      	cmp	r3, #0
 800baee:	d017      	beq.n	800bb20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800baf0:	4b4d      	ldr	r3, [pc, #308]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d105      	bne.n	800bb08 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bafc:	4b4a      	ldr	r3, [pc, #296]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00b      	beq.n	800bb20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb08:	4b47      	ldr	r3, [pc, #284]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb10:	2b0c      	cmp	r3, #12
 800bb12:	d11c      	bne.n	800bb4e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb14:	4b44      	ldr	r3, [pc, #272]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d116      	bne.n	800bb4e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb20:	4b41      	ldr	r3, [pc, #260]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d005      	beq.n	800bb38 <HAL_RCC_OscConfig+0x180>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d001      	beq.n	800bb38 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e18f      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb38:	4b3b      	ldr	r3, [pc, #236]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	4938      	ldr	r1, [pc, #224]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb4c:	e03a      	b.n	800bbc4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d020      	beq.n	800bb98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb56:	4b35      	ldr	r3, [pc, #212]	; (800bc2c <HAL_RCC_OscConfig+0x274>)
 800bb58:	2201      	movs	r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb5c:	f7fd f974 	bl	8008e48 <HAL_GetTick>
 800bb60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb62:	e008      	b.n	800bb76 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb64:	f7fd f970 	bl	8008e48 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d901      	bls.n	800bb76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e170      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb76:	4b2c      	ldr	r3, [pc, #176]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0302 	and.w	r3, r3, #2
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d0f0      	beq.n	800bb64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb82:	4b29      	ldr	r3, [pc, #164]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	4925      	ldr	r1, [pc, #148]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bb92:	4313      	orrs	r3, r2
 800bb94:	600b      	str	r3, [r1, #0]
 800bb96:	e015      	b.n	800bbc4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb98:	4b24      	ldr	r3, [pc, #144]	; (800bc2c <HAL_RCC_OscConfig+0x274>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb9e:	f7fd f953 	bl	8008e48 <HAL_GetTick>
 800bba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bba4:	e008      	b.n	800bbb8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bba6:	f7fd f94f 	bl	8008e48 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d901      	bls.n	800bbb8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e14f      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbb8:	4b1b      	ldr	r3, [pc, #108]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1f0      	bne.n	800bba6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0308 	and.w	r3, r3, #8
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d037      	beq.n	800bc40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d016      	beq.n	800bc06 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <HAL_RCC_OscConfig+0x278>)
 800bbda:	2201      	movs	r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbde:	f7fd f933 	bl	8008e48 <HAL_GetTick>
 800bbe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bbe4:	e008      	b.n	800bbf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bbe6:	f7fd f92f 	bl	8008e48 <HAL_GetTick>
 800bbea:	4602      	mov	r2, r0
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	1ad3      	subs	r3, r2, r3
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d901      	bls.n	800bbf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e12f      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bbf8:	4b0b      	ldr	r3, [pc, #44]	; (800bc28 <HAL_RCC_OscConfig+0x270>)
 800bbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbfc:	f003 0302 	and.w	r3, r3, #2
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d0f0      	beq.n	800bbe6 <HAL_RCC_OscConfig+0x22e>
 800bc04:	e01c      	b.n	800bc40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc06:	4b0a      	ldr	r3, [pc, #40]	; (800bc30 <HAL_RCC_OscConfig+0x278>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc0c:	f7fd f91c 	bl	8008e48 <HAL_GetTick>
 800bc10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc12:	e00f      	b.n	800bc34 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc14:	f7fd f918 	bl	8008e48 <HAL_GetTick>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d908      	bls.n	800bc34 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e118      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
 800bc26:	bf00      	nop
 800bc28:	40023800 	.word	0x40023800
 800bc2c:	42470000 	.word	0x42470000
 800bc30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc34:	4b8a      	ldr	r3, [pc, #552]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bc36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e9      	bne.n	800bc14 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 8097 	beq.w	800bd7c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc52:	4b83      	ldr	r3, [pc, #524]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10f      	bne.n	800bc7e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	4b7f      	ldr	r3, [pc, #508]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	4a7e      	ldr	r2, [pc, #504]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bc68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc6c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc6e:	4b7c      	ldr	r3, [pc, #496]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc7e:	4b79      	ldr	r3, [pc, #484]	; (800be64 <HAL_RCC_OscConfig+0x4ac>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d118      	bne.n	800bcbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc8a:	4b76      	ldr	r3, [pc, #472]	; (800be64 <HAL_RCC_OscConfig+0x4ac>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a75      	ldr	r2, [pc, #468]	; (800be64 <HAL_RCC_OscConfig+0x4ac>)
 800bc90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc96:	f7fd f8d7 	bl	8008e48 <HAL_GetTick>
 800bc9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc9c:	e008      	b.n	800bcb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc9e:	f7fd f8d3 	bl	8008e48 <HAL_GetTick>
 800bca2:	4602      	mov	r2, r0
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d901      	bls.n	800bcb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e0d3      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcb0:	4b6c      	ldr	r3, [pc, #432]	; (800be64 <HAL_RCC_OscConfig+0x4ac>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d0f0      	beq.n	800bc9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d106      	bne.n	800bcd2 <HAL_RCC_OscConfig+0x31a>
 800bcc4:	4b66      	ldr	r3, [pc, #408]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bcc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcc8:	4a65      	ldr	r2, [pc, #404]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bcca:	f043 0301 	orr.w	r3, r3, #1
 800bcce:	6713      	str	r3, [r2, #112]	; 0x70
 800bcd0:	e01c      	b.n	800bd0c <HAL_RCC_OscConfig+0x354>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	2b05      	cmp	r3, #5
 800bcd8:	d10c      	bne.n	800bcf4 <HAL_RCC_OscConfig+0x33c>
 800bcda:	4b61      	ldr	r3, [pc, #388]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcde:	4a60      	ldr	r2, [pc, #384]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bce0:	f043 0304 	orr.w	r3, r3, #4
 800bce4:	6713      	str	r3, [r2, #112]	; 0x70
 800bce6:	4b5e      	ldr	r3, [pc, #376]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcea:	4a5d      	ldr	r2, [pc, #372]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bcec:	f043 0301 	orr.w	r3, r3, #1
 800bcf0:	6713      	str	r3, [r2, #112]	; 0x70
 800bcf2:	e00b      	b.n	800bd0c <HAL_RCC_OscConfig+0x354>
 800bcf4:	4b5a      	ldr	r3, [pc, #360]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bcf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf8:	4a59      	ldr	r2, [pc, #356]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bcfa:	f023 0301 	bic.w	r3, r3, #1
 800bcfe:	6713      	str	r3, [r2, #112]	; 0x70
 800bd00:	4b57      	ldr	r3, [pc, #348]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bd02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd04:	4a56      	ldr	r2, [pc, #344]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bd06:	f023 0304 	bic.w	r3, r3, #4
 800bd0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d015      	beq.n	800bd40 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd14:	f7fd f898 	bl	8008e48 <HAL_GetTick>
 800bd18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd1a:	e00a      	b.n	800bd32 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd1c:	f7fd f894 	bl	8008e48 <HAL_GetTick>
 800bd20:	4602      	mov	r2, r0
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d901      	bls.n	800bd32 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e092      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd32:	4b4b      	ldr	r3, [pc, #300]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0ee      	beq.n	800bd1c <HAL_RCC_OscConfig+0x364>
 800bd3e:	e014      	b.n	800bd6a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd40:	f7fd f882 	bl	8008e48 <HAL_GetTick>
 800bd44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd46:	e00a      	b.n	800bd5e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd48:	f7fd f87e 	bl	8008e48 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d901      	bls.n	800bd5e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e07c      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd5e:	4b40      	ldr	r3, [pc, #256]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd62:	f003 0302 	and.w	r3, r3, #2
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1ee      	bne.n	800bd48 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d105      	bne.n	800bd7c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd70:	4b3b      	ldr	r3, [pc, #236]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	4a3a      	ldr	r2, [pc, #232]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bd76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d068      	beq.n	800be56 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd84:	4b36      	ldr	r3, [pc, #216]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f003 030c 	and.w	r3, r3, #12
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d060      	beq.n	800be52 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d145      	bne.n	800be24 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd98:	4b33      	ldr	r3, [pc, #204]	; (800be68 <HAL_RCC_OscConfig+0x4b0>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd9e:	f7fd f853 	bl	8008e48 <HAL_GetTick>
 800bda2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bda4:	e008      	b.n	800bdb8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bda6:	f7fd f84f 	bl	8008e48 <HAL_GetTick>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d901      	bls.n	800bdb8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e04f      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdb8:	4b29      	ldr	r3, [pc, #164]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1f0      	bne.n	800bda6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	69da      	ldr	r2, [r3, #28]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a1b      	ldr	r3, [r3, #32]
 800bdcc:	431a      	orrs	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd2:	019b      	lsls	r3, r3, #6
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdda:	085b      	lsrs	r3, r3, #1
 800bddc:	3b01      	subs	r3, #1
 800bdde:	041b      	lsls	r3, r3, #16
 800bde0:	431a      	orrs	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde6:	061b      	lsls	r3, r3, #24
 800bde8:	431a      	orrs	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdee:	071b      	lsls	r3, r3, #28
 800bdf0:	491b      	ldr	r1, [pc, #108]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bdf6:	4b1c      	ldr	r3, [pc, #112]	; (800be68 <HAL_RCC_OscConfig+0x4b0>)
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdfc:	f7fd f824 	bl	8008e48 <HAL_GetTick>
 800be00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be02:	e008      	b.n	800be16 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be04:	f7fd f820 	bl	8008e48 <HAL_GetTick>
 800be08:	4602      	mov	r2, r0
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d901      	bls.n	800be16 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800be12:	2303      	movs	r3, #3
 800be14:	e020      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be16:	4b12      	ldr	r3, [pc, #72]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d0f0      	beq.n	800be04 <HAL_RCC_OscConfig+0x44c>
 800be22:	e018      	b.n	800be56 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be24:	4b10      	ldr	r3, [pc, #64]	; (800be68 <HAL_RCC_OscConfig+0x4b0>)
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be2a:	f7fd f80d 	bl	8008e48 <HAL_GetTick>
 800be2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be30:	e008      	b.n	800be44 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be32:	f7fd f809 	bl	8008e48 <HAL_GetTick>
 800be36:	4602      	mov	r2, r0
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d901      	bls.n	800be44 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800be40:	2303      	movs	r3, #3
 800be42:	e009      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be44:	4b06      	ldr	r3, [pc, #24]	; (800be60 <HAL_RCC_OscConfig+0x4a8>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f0      	bne.n	800be32 <HAL_RCC_OscConfig+0x47a>
 800be50:	e001      	b.n	800be56 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	40023800 	.word	0x40023800
 800be64:	40007000 	.word	0x40007000
 800be68:	42470060 	.word	0x42470060

0800be6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e056      	b.n	800bf2c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f004 fb4f 	bl	801053c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2202      	movs	r2, #2
 800bea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	431a      	orrs	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	431a      	orrs	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	431a      	orrs	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	431a      	orrs	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800beda:	431a      	orrs	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	69db      	ldr	r3, [r3, #28]
 800bee0:	431a      	orrs	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	ea42 0103 	orr.w	r1, r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	0c1b      	lsrs	r3, r3, #16
 800befc:	f003 0104 	and.w	r1, r3, #4
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	69da      	ldr	r2, [r3, #28]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d101      	bne.n	800bf54 <HAL_SPI_TransmitReceive_IT+0x20>
 800bf50:	2302      	movs	r3, #2
 800bf52:	e075      	b.n	800c040 <HAL_SPI_TransmitReceive_IT+0x10c>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf62:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf6a:	7dbb      	ldrb	r3, [r7, #22]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d00d      	beq.n	800bf8c <HAL_SPI_TransmitReceive_IT+0x58>
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf76:	d106      	bne.n	800bf86 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d102      	bne.n	800bf86 <HAL_SPI_TransmitReceive_IT+0x52>
 800bf80:	7dbb      	ldrb	r3, [r7, #22]
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d002      	beq.n	800bf8c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800bf86:	2302      	movs	r3, #2
 800bf88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf8a:	e054      	b.n	800c036 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <HAL_SPI_TransmitReceive_IT+0x6a>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <HAL_SPI_TransmitReceive_IT+0x6a>
 800bf98:	887b      	ldrh	r3, [r7, #2]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d102      	bne.n	800bfa4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfa2:	e048      	b.n	800c036 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d003      	beq.n	800bfb8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2205      	movs	r2, #5
 800bfb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	887a      	ldrh	r2, [r7, #2]
 800bfc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	887a      	ldrh	r2, [r7, #2]
 800bfce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	887a      	ldrh	r2, [r7, #2]
 800bfda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	887a      	ldrh	r2, [r7, #2]
 800bfe0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d006      	beq.n	800bff8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4a17      	ldr	r2, [pc, #92]	; (800c04c <HAL_SPI_TransmitReceive_IT+0x118>)
 800bfee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	4a17      	ldr	r2, [pc, #92]	; (800c050 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800bff4:	645a      	str	r2, [r3, #68]	; 0x44
 800bff6:	e005      	b.n	800c004 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	4a16      	ldr	r2, [pc, #88]	; (800c054 <HAL_SPI_TransmitReceive_IT+0x120>)
 800bffc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	4a15      	ldr	r2, [pc, #84]	; (800c058 <HAL_SPI_TransmitReceive_IT+0x124>)
 800c002:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	685a      	ldr	r2, [r3, #4]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800c012:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c01e:	2b40      	cmp	r3, #64	; 0x40
 800c020:	d008      	beq.n	800c034 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	e000      	b.n	800c036 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800c034:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c040:	4618      	mov	r0, r3
 800c042:	371c      	adds	r7, #28
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	0800c385 	.word	0x0800c385
 800c050:	0800c3e5 	.word	0x0800c3e5
 800c054:	0800c2c1 	.word	0x0800c2c1
 800c058:	0800c325 	.word	0x0800c325

0800c05c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	099b      	lsrs	r3, r3, #6
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10f      	bne.n	800c0a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00a      	beq.n	800c0a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	099b      	lsrs	r3, r3, #6
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d004      	beq.n	800c0a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	4798      	blx	r3
    return;
 800c09e:	e0d8      	b.n	800c252 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	085b      	lsrs	r3, r3, #1
 800c0a4:	f003 0301 	and.w	r3, r3, #1
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00a      	beq.n	800c0c2 <HAL_SPI_IRQHandler+0x66>
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	09db      	lsrs	r3, r3, #7
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d004      	beq.n	800c0c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	4798      	blx	r3
    return;
 800c0c0:	e0c7      	b.n	800c252 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	095b      	lsrs	r3, r3, #5
 800c0c6:	f003 0301 	and.w	r3, r3, #1
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10c      	bne.n	800c0e8 <HAL_SPI_IRQHandler+0x8c>
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	099b      	lsrs	r3, r3, #6
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <HAL_SPI_IRQHandler+0x8c>
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	0a1b      	lsrs	r3, r3, #8
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 80b5 	beq.w	800c252 <HAL_SPI_IRQHandler+0x1f6>
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	095b      	lsrs	r3, r3, #5
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 80ae 	beq.w	800c252 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	099b      	lsrs	r3, r3, #6
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d023      	beq.n	800c14a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d011      	beq.n	800c132 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c112:	f043 0204 	orr.w	r2, r3, #4
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	617b      	str	r3, [r7, #20]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	e00b      	b.n	800c14a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c132:	2300      	movs	r3, #0
 800c134:	613b      	str	r3, [r7, #16]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	613b      	str	r3, [r7, #16]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	613b      	str	r3, [r7, #16]
 800c146:	693b      	ldr	r3, [r7, #16]
        return;
 800c148:	e083      	b.n	800c252 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	095b      	lsrs	r3, r3, #5
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d014      	beq.n	800c180 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15a:	f043 0201 	orr.w	r2, r3, #1
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	60fb      	str	r3, [r7, #12]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	0a1b      	lsrs	r3, r3, #8
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00c      	beq.n	800c1a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c190:	f043 0208 	orr.w	r2, r3, #8
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c198:	2300      	movs	r3, #0
 800c19a:	60bb      	str	r3, [r7, #8]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	60bb      	str	r3, [r7, #8]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d050      	beq.n	800c250 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c1bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	f003 0302 	and.w	r3, r3, #2
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d104      	bne.n	800c1da <HAL_SPI_IRQHandler+0x17e>
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d034      	beq.n	800c244 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 0203 	bic.w	r2, r2, #3
 800c1e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d011      	beq.n	800c216 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1f6:	4a18      	ldr	r2, [pc, #96]	; (800c258 <HAL_SPI_IRQHandler+0x1fc>)
 800c1f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe f9d8 	bl	800a5b4 <HAL_DMA_Abort_IT>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d005      	beq.n	800c216 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c20e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d016      	beq.n	800c24c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c222:	4a0d      	ldr	r2, [pc, #52]	; (800c258 <HAL_SPI_IRQHandler+0x1fc>)
 800c224:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe f9c2 	bl	800a5b4 <HAL_DMA_Abort_IT>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00a      	beq.n	800c24c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c242:	e003      	b.n	800c24c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f81d 	bl	800c284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c24a:	e000      	b.n	800c24e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c24c:	bf00      	nop
    return;
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
  }
}
 800c252:	3720      	adds	r7, #32
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	0800c299 	.word	0x0800c299

0800c25c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7ff ffe6 	bl	800c284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c2b8:	bf00      	nop
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f103 020c 	add.w	r2, r3, #12
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d4:	7812      	ldrb	r2, [r2, #0]
 800c2d6:	b2d2      	uxtb	r2, r2
 800c2d8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10f      	bne.n	800c31c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	685a      	ldr	r2, [r3, #4]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c30a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c310:	b29b      	uxth	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d102      	bne.n	800c31c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f940 	bl	800c59c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c31c:	bf00      	nop
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	330c      	adds	r3, #12
 800c336:	7812      	ldrb	r2, [r2, #0]
 800c338:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c348:	b29b      	uxth	r3, r3
 800c34a:	3b01      	subs	r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c356:	b29b      	uxth	r3, r3
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10f      	bne.n	800c37c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c36a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c370:	b29b      	uxth	r3, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	d102      	bne.n	800c37c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 f910 	bl	800c59c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c37c:	bf00      	nop
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68da      	ldr	r2, [r3, #12]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c396:	b292      	uxth	r2, r2
 800c398:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39e:	1c9a      	adds	r2, r3, #2
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10f      	bne.n	800c3dc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f8e0 	bl	800c59c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c3dc:	bf00      	nop
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f0:	881a      	ldrh	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fc:	1c9a      	adds	r2, r3, #2
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c406:	b29b      	uxth	r3, r3
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c414:	b29b      	uxth	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10f      	bne.n	800c43a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c428:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c42e:	b29b      	uxth	r3, r3
 800c430:	2b00      	cmp	r3, #0
 800c432:	d102      	bne.n	800c43a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f8b1 	bl	800c59c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	603b      	str	r3, [r7, #0]
 800c44e:	4613      	mov	r3, r2
 800c450:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c452:	e04c      	b.n	800c4ee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45a:	d048      	beq.n	800c4ee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c45c:	f7fc fcf4 	bl	8008e48 <HAL_GetTick>
 800c460:	4602      	mov	r2, r0
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d902      	bls.n	800c472 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d13d      	bne.n	800c4ee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c48a:	d111      	bne.n	800c4b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c494:	d004      	beq.n	800c4a0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c49e:	d107      	bne.n	800c4b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4b8:	d10f      	bne.n	800c4da <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e00f      	b.n	800c50e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689a      	ldr	r2, [r3, #8]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	bf0c      	ite	eq
 800c4fe:	2301      	moveq	r3, #1
 800c500:	2300      	movne	r3, #0
 800c502:	b2db      	uxtb	r3, r3
 800c504:	461a      	mov	r2, r3
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d1a3      	bne.n	800c454 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af02      	add	r7, sp, #8
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c524:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <SPI_EndRxTxTransaction+0x7c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a1b      	ldr	r2, [pc, #108]	; (800c598 <SPI_EndRxTxTransaction+0x80>)
 800c52a:	fba2 2303 	umull	r2, r3, r2, r3
 800c52e:	0d5b      	lsrs	r3, r3, #21
 800c530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c534:	fb02 f303 	mul.w	r3, r2, r3
 800c538:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c542:	d112      	bne.n	800c56a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2200      	movs	r2, #0
 800c54c:	2180      	movs	r1, #128	; 0x80
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7ff ff77 	bl	800c442 <SPI_WaitFlagStateUntilTimeout>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d016      	beq.n	800c588 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55e:	f043 0220 	orr.w	r2, r3, #32
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e00f      	b.n	800c58a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00a      	beq.n	800c586 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	3b01      	subs	r3, #1
 800c574:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c580:	2b80      	cmp	r3, #128	; 0x80
 800c582:	d0f2      	beq.n	800c56a <SPI_EndRxTxTransaction+0x52>
 800c584:	e000      	b.n	800c588 <SPI_EndRxTxTransaction+0x70>
        break;
 800c586:	bf00      	nop
  }

  return HAL_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3718      	adds	r7, #24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20000038 	.word	0x20000038
 800c598:	165e9f81 	.word	0x165e9f81

0800c59c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c5a4:	4b35      	ldr	r3, [pc, #212]	; (800c67c <SPI_CloseRxTx_ISR+0xe0>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a35      	ldr	r2, [pc, #212]	; (800c680 <SPI_CloseRxTx_ISR+0xe4>)
 800c5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ae:	0a5b      	lsrs	r3, r3, #9
 800c5b0:	2264      	movs	r2, #100	; 0x64
 800c5b2:	fb02 f303 	mul.w	r3, r2, r3
 800c5b6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c5b8:	f7fc fc46 	bl	8008e48 <HAL_GetTick>
 800c5bc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f022 0220 	bic.w	r2, r2, #32
 800c5cc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d106      	bne.n	800c5e2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d8:	f043 0220 	orr.w	r2, r3, #32
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c5e0:	e009      	b.n	800c5f6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d0eb      	beq.n	800c5ce <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	2164      	movs	r1, #100	; 0x64
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff ff8c 	bl	800c518 <SPI_EndRxTxTransaction>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d005      	beq.n	800c612 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60a:	f043 0220 	orr.w	r2, r3, #32
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10a      	bne.n	800c630 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c61a:	2300      	movs	r3, #0
 800c61c:	60fb      	str	r3, [r7, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c634:	2b00      	cmp	r3, #0
 800c636:	d115      	bne.n	800c664 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b04      	cmp	r3, #4
 800c642:	d107      	bne.n	800c654 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff fe05 	bl	800c25c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c652:	e00e      	b.n	800c672 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff fe07 	bl	800c270 <HAL_SPI_TxRxCpltCallback>
}
 800c662:	e006      	b.n	800c672 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7ff fe09 	bl	800c284 <HAL_SPI_ErrorCallback>
}
 800c672:	bf00      	nop
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20000038 	.word	0x20000038
 800c680:	057619f1 	.word	0x057619f1

0800c684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e01d      	b.n	800c6d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d106      	bne.n	800c6b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f004 fd40 	bl	8011130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f000 fc30 	bl	800cf28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d101      	bne.n	800c6ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e01d      	b.n	800c728 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d106      	bne.n	800c706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f815 	bl	800c730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2202      	movs	r2, #2
 800c70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3304      	adds	r3, #4
 800c716:	4619      	mov	r1, r3
 800c718:	4610      	mov	r0, r2
 800c71a:	f000 fc05 	bl	800cf28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b0c      	cmp	r3, #12
 800c752:	d841      	bhi.n	800c7d8 <HAL_TIM_PWM_Start_IT+0x94>
 800c754:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <HAL_TIM_PWM_Start_IT+0x18>)
 800c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75a:	bf00      	nop
 800c75c:	0800c791 	.word	0x0800c791
 800c760:	0800c7d9 	.word	0x0800c7d9
 800c764:	0800c7d9 	.word	0x0800c7d9
 800c768:	0800c7d9 	.word	0x0800c7d9
 800c76c:	0800c7a3 	.word	0x0800c7a3
 800c770:	0800c7d9 	.word	0x0800c7d9
 800c774:	0800c7d9 	.word	0x0800c7d9
 800c778:	0800c7d9 	.word	0x0800c7d9
 800c77c:	0800c7b5 	.word	0x0800c7b5
 800c780:	0800c7d9 	.word	0x0800c7d9
 800c784:	0800c7d9 	.word	0x0800c7d9
 800c788:	0800c7d9 	.word	0x0800c7d9
 800c78c:	0800c7c7 	.word	0x0800c7c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68da      	ldr	r2, [r3, #12]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0202 	orr.w	r2, r2, #2
 800c79e:	60da      	str	r2, [r3, #12]
      break;
 800c7a0:	e01b      	b.n	800c7da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68da      	ldr	r2, [r3, #12]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f042 0204 	orr.w	r2, r2, #4
 800c7b0:	60da      	str	r2, [r3, #12]
      break;
 800c7b2:	e012      	b.n	800c7da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68da      	ldr	r2, [r3, #12]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f042 0208 	orr.w	r2, r2, #8
 800c7c2:	60da      	str	r2, [r3, #12]
      break;
 800c7c4:	e009      	b.n	800c7da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68da      	ldr	r2, [r3, #12]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f042 0210 	orr.w	r2, r2, #16
 800c7d4:	60da      	str	r2, [r3, #12]
      break;
 800c7d6:	e000      	b.n	800c7da <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800c7d8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fe8a 	bl	800d4fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a15      	ldr	r2, [pc, #84]	; (800c844 <HAL_TIM_PWM_Start_IT+0x100>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d004      	beq.n	800c7fc <HAL_TIM_PWM_Start_IT+0xb8>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a14      	ldr	r2, [pc, #80]	; (800c848 <HAL_TIM_PWM_Start_IT+0x104>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d101      	bne.n	800c800 <HAL_TIM_PWM_Start_IT+0xbc>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e000      	b.n	800c802 <HAL_TIM_PWM_Start_IT+0xbe>
 800c800:	2300      	movs	r3, #0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d007      	beq.n	800c816 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	f003 0307 	and.w	r3, r3, #7
 800c820:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2b06      	cmp	r3, #6
 800c826:	d007      	beq.n	800c838 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f042 0201 	orr.w	r2, r2, #1
 800c836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	40010000 	.word	0x40010000
 800c848:	40010400 	.word	0x40010400

0800c84c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b0c      	cmp	r3, #12
 800c85a:	d841      	bhi.n	800c8e0 <HAL_TIM_PWM_Stop_IT+0x94>
 800c85c:	a201      	add	r2, pc, #4	; (adr r2, 800c864 <HAL_TIM_PWM_Stop_IT+0x18>)
 800c85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c862:	bf00      	nop
 800c864:	0800c899 	.word	0x0800c899
 800c868:	0800c8e1 	.word	0x0800c8e1
 800c86c:	0800c8e1 	.word	0x0800c8e1
 800c870:	0800c8e1 	.word	0x0800c8e1
 800c874:	0800c8ab 	.word	0x0800c8ab
 800c878:	0800c8e1 	.word	0x0800c8e1
 800c87c:	0800c8e1 	.word	0x0800c8e1
 800c880:	0800c8e1 	.word	0x0800c8e1
 800c884:	0800c8bd 	.word	0x0800c8bd
 800c888:	0800c8e1 	.word	0x0800c8e1
 800c88c:	0800c8e1 	.word	0x0800c8e1
 800c890:	0800c8e1 	.word	0x0800c8e1
 800c894:	0800c8cf 	.word	0x0800c8cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68da      	ldr	r2, [r3, #12]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f022 0202 	bic.w	r2, r2, #2
 800c8a6:	60da      	str	r2, [r3, #12]
      break;
 800c8a8:	e01b      	b.n	800c8e2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68da      	ldr	r2, [r3, #12]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f022 0204 	bic.w	r2, r2, #4
 800c8b8:	60da      	str	r2, [r3, #12]
      break;
 800c8ba:	e012      	b.n	800c8e2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f022 0208 	bic.w	r2, r2, #8
 800c8ca:	60da      	str	r2, [r3, #12]
      break;
 800c8cc:	e009      	b.n	800c8e2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f022 0210 	bic.w	r2, r2, #16
 800c8dc:	60da      	str	r2, [r3, #12]
      break;
 800c8de:	e000      	b.n	800c8e2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800c8e0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 fe06 	bl	800d4fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a20      	ldr	r2, [pc, #128]	; (800c978 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d004      	beq.n	800c904 <HAL_TIM_PWM_Stop_IT+0xb8>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a1f      	ldr	r2, [pc, #124]	; (800c97c <HAL_TIM_PWM_Stop_IT+0x130>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d101      	bne.n	800c908 <HAL_TIM_PWM_Stop_IT+0xbc>
 800c904:	2301      	movs	r3, #1
 800c906:	e000      	b.n	800c90a <HAL_TIM_PWM_Stop_IT+0xbe>
 800c908:	2300      	movs	r3, #0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d017      	beq.n	800c93e <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	6a1a      	ldr	r2, [r3, #32]
 800c914:	f241 1311 	movw	r3, #4369	; 0x1111
 800c918:	4013      	ands	r3, r2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10f      	bne.n	800c93e <HAL_TIM_PWM_Stop_IT+0xf2>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	6a1a      	ldr	r2, [r3, #32]
 800c924:	f240 4344 	movw	r3, #1092	; 0x444
 800c928:	4013      	ands	r3, r2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d107      	bne.n	800c93e <HAL_TIM_PWM_Stop_IT+0xf2>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c93c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	6a1a      	ldr	r2, [r3, #32]
 800c944:	f241 1311 	movw	r3, #4369	; 0x1111
 800c948:	4013      	ands	r3, r2
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10f      	bne.n	800c96e <HAL_TIM_PWM_Stop_IT+0x122>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	6a1a      	ldr	r2, [r3, #32]
 800c954:	f240 4344 	movw	r3, #1092	; 0x444
 800c958:	4013      	ands	r3, r2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d107      	bne.n	800c96e <HAL_TIM_PWM_Stop_IT+0x122>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f022 0201 	bic.w	r2, r2, #1
 800c96c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	40010000 	.word	0x40010000
 800c97c:	40010400 	.word	0x40010400

0800c980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	f003 0302 	and.w	r3, r3, #2
 800c992:	2b02      	cmp	r3, #2
 800c994:	d122      	bne.n	800c9dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f003 0302 	and.w	r3, r3, #2
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d11b      	bne.n	800c9dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f06f 0202 	mvn.w	r2, #2
 800c9ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d003      	beq.n	800c9ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fa92 	bl	800ceec <HAL_TIM_IC_CaptureCallback>
 800c9c8:	e005      	b.n	800c9d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa84 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fa95 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b04      	cmp	r3, #4
 800c9e8:	d122      	bne.n	800ca30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	f003 0304 	and.w	r3, r3, #4
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d11b      	bne.n	800ca30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f06f 0204 	mvn.w	r2, #4
 800ca00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2202      	movs	r2, #2
 800ca06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d003      	beq.n	800ca1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa68 	bl	800ceec <HAL_TIM_IC_CaptureCallback>
 800ca1c:	e005      	b.n	800ca2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fa5a 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fa6b 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	f003 0308 	and.w	r3, r3, #8
 800ca3a:	2b08      	cmp	r3, #8
 800ca3c:	d122      	bne.n	800ca84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	f003 0308 	and.w	r3, r3, #8
 800ca48:	2b08      	cmp	r3, #8
 800ca4a:	d11b      	bne.n	800ca84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f06f 0208 	mvn.w	r2, #8
 800ca54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2204      	movs	r2, #4
 800ca5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	f003 0303 	and.w	r3, r3, #3
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fa3e 	bl	800ceec <HAL_TIM_IC_CaptureCallback>
 800ca70:	e005      	b.n	800ca7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fa30 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fa41 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	f003 0310 	and.w	r3, r3, #16
 800ca8e:	2b10      	cmp	r3, #16
 800ca90:	d122      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f003 0310 	and.w	r3, r3, #16
 800ca9c:	2b10      	cmp	r3, #16
 800ca9e:	d11b      	bne.n	800cad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f06f 0210 	mvn.w	r2, #16
 800caa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2208      	movs	r2, #8
 800caae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fa14 	bl	800ceec <HAL_TIM_IC_CaptureCallback>
 800cac4:	e005      	b.n	800cad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fa06 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fa17 	bl	800cf00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d10e      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d107      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f06f 0201 	mvn.w	r2, #1
 800cafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f004 fc0e 	bl	8011320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb0e:	2b80      	cmp	r3, #128	; 0x80
 800cb10:	d10e      	bne.n	800cb30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb1c:	2b80      	cmp	r3, #128	; 0x80
 800cb1e:	d107      	bne.n	800cb30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fe77 	bl	800d81e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb3a:	2b40      	cmp	r3, #64	; 0x40
 800cb3c:	d10e      	bne.n	800cb5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb48:	2b40      	cmp	r3, #64	; 0x40
 800cb4a:	d107      	bne.n	800cb5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 f9dc 	bl	800cf14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	f003 0320 	and.w	r3, r3, #32
 800cb66:	2b20      	cmp	r3, #32
 800cb68:	d10e      	bne.n	800cb88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	f003 0320 	and.w	r3, r3, #32
 800cb74:	2b20      	cmp	r3, #32
 800cb76:	d107      	bne.n	800cb88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f06f 0220 	mvn.w	r2, #32
 800cb80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fe41 	bl	800d80a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d101      	bne.n	800cbaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cba6:	2302      	movs	r3, #2
 800cba8:	e0b4      	b.n	800cd14 <HAL_TIM_PWM_ConfigChannel+0x184>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b0c      	cmp	r3, #12
 800cbbe:	f200 809f 	bhi.w	800cd00 <HAL_TIM_PWM_ConfigChannel+0x170>
 800cbc2:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc8:	0800cbfd 	.word	0x0800cbfd
 800cbcc:	0800cd01 	.word	0x0800cd01
 800cbd0:	0800cd01 	.word	0x0800cd01
 800cbd4:	0800cd01 	.word	0x0800cd01
 800cbd8:	0800cc3d 	.word	0x0800cc3d
 800cbdc:	0800cd01 	.word	0x0800cd01
 800cbe0:	0800cd01 	.word	0x0800cd01
 800cbe4:	0800cd01 	.word	0x0800cd01
 800cbe8:	0800cc7f 	.word	0x0800cc7f
 800cbec:	0800cd01 	.word	0x0800cd01
 800cbf0:	0800cd01 	.word	0x0800cd01
 800cbf4:	0800cd01 	.word	0x0800cd01
 800cbf8:	0800ccbf 	.word	0x0800ccbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 fa30 	bl	800d068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	699a      	ldr	r2, [r3, #24]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0208 	orr.w	r2, r2, #8
 800cc16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	699a      	ldr	r2, [r3, #24]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f022 0204 	bic.w	r2, r2, #4
 800cc26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6999      	ldr	r1, [r3, #24]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	691a      	ldr	r2, [r3, #16]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	430a      	orrs	r2, r1
 800cc38:	619a      	str	r2, [r3, #24]
      break;
 800cc3a:	e062      	b.n	800cd02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68b9      	ldr	r1, [r7, #8]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 fa80 	bl	800d148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	699a      	ldr	r2, [r3, #24]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6999      	ldr	r1, [r3, #24]
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	021a      	lsls	r2, r3, #8
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	619a      	str	r2, [r3, #24]
      break;
 800cc7c:	e041      	b.n	800cd02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68b9      	ldr	r1, [r7, #8]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 fad5 	bl	800d234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	69da      	ldr	r2, [r3, #28]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f042 0208 	orr.w	r2, r2, #8
 800cc98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	69da      	ldr	r2, [r3, #28]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f022 0204 	bic.w	r2, r2, #4
 800cca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	69d9      	ldr	r1, [r3, #28]
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	691a      	ldr	r2, [r3, #16]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	430a      	orrs	r2, r1
 800ccba:	61da      	str	r2, [r3, #28]
      break;
 800ccbc:	e021      	b.n	800cd02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68b9      	ldr	r1, [r7, #8]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 fb29 	bl	800d31c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	69da      	ldr	r2, [r3, #28]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	69da      	ldr	r2, [r3, #28]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	69d9      	ldr	r1, [r3, #28]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	021a      	lsls	r2, r3, #8
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	430a      	orrs	r2, r1
 800ccfc:	61da      	str	r2, [r3, #28]
      break;
 800ccfe:	e000      	b.n	800cd02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cd00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d101      	bne.n	800cd34 <HAL_TIM_GenerateEvent+0x18>
 800cd30:	2302      	movs	r3, #2
 800cd32:	e014      	b.n	800cd5e <HAL_TIM_GenerateEvent+0x42>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2202      	movs	r2, #2
 800cd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d101      	bne.n	800cd82 <HAL_TIM_ConfigClockSource+0x18>
 800cd7e:	2302      	movs	r3, #2
 800cd80:	e0a6      	b.n	800ced0 <HAL_TIM_ConfigClockSource+0x166>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cda0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cda8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b40      	cmp	r3, #64	; 0x40
 800cdb8:	d067      	beq.n	800ce8a <HAL_TIM_ConfigClockSource+0x120>
 800cdba:	2b40      	cmp	r3, #64	; 0x40
 800cdbc:	d80b      	bhi.n	800cdd6 <HAL_TIM_ConfigClockSource+0x6c>
 800cdbe:	2b10      	cmp	r3, #16
 800cdc0:	d073      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x140>
 800cdc2:	2b10      	cmp	r3, #16
 800cdc4:	d802      	bhi.n	800cdcc <HAL_TIM_ConfigClockSource+0x62>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d06f      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cdca:	e078      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cdcc:	2b20      	cmp	r3, #32
 800cdce:	d06c      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x140>
 800cdd0:	2b30      	cmp	r3, #48	; 0x30
 800cdd2:	d06a      	beq.n	800ceaa <HAL_TIM_ConfigClockSource+0x140>
      break;
 800cdd4:	e073      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cdd6:	2b70      	cmp	r3, #112	; 0x70
 800cdd8:	d00d      	beq.n	800cdf6 <HAL_TIM_ConfigClockSource+0x8c>
 800cdda:	2b70      	cmp	r3, #112	; 0x70
 800cddc:	d804      	bhi.n	800cde8 <HAL_TIM_ConfigClockSource+0x7e>
 800cdde:	2b50      	cmp	r3, #80	; 0x50
 800cde0:	d033      	beq.n	800ce4a <HAL_TIM_ConfigClockSource+0xe0>
 800cde2:	2b60      	cmp	r3, #96	; 0x60
 800cde4:	d041      	beq.n	800ce6a <HAL_TIM_ConfigClockSource+0x100>
      break;
 800cde6:	e06a      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cde8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdec:	d066      	beq.n	800cebc <HAL_TIM_ConfigClockSource+0x152>
 800cdee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdf2:	d017      	beq.n	800ce24 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800cdf4:	e063      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6818      	ldr	r0, [r3, #0]
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	6899      	ldr	r1, [r3, #8]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	f000 fb59 	bl	800d4bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	609a      	str	r2, [r3, #8]
      break;
 800ce22:	e04c      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	6899      	ldr	r1, [r3, #8]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	f000 fb42 	bl	800d4bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	689a      	ldr	r2, [r3, #8]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce46:	609a      	str	r2, [r3, #8]
      break;
 800ce48:	e039      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6818      	ldr	r0, [r3, #0]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	6859      	ldr	r1, [r3, #4]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	461a      	mov	r2, r3
 800ce58:	f000 fab6 	bl	800d3c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2150      	movs	r1, #80	; 0x50
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 fb0f 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800ce68:	e029      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	6859      	ldr	r1, [r3, #4]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	461a      	mov	r2, r3
 800ce78:	f000 fad5 	bl	800d426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2160      	movs	r1, #96	; 0x60
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 faff 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800ce88:	e019      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	6859      	ldr	r1, [r3, #4]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	461a      	mov	r2, r3
 800ce98:	f000 fa96 	bl	800d3c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2140      	movs	r1, #64	; 0x40
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 faef 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800cea8:	e009      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f000 fae6 	bl	800d486 <TIM_ITRx_SetConfig>
      break;
 800ceba:	e000      	b.n	800cebe <HAL_TIM_ConfigClockSource+0x154>
      break;
 800cebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf1c:	bf00      	nop
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a40      	ldr	r2, [pc, #256]	; (800d03c <TIM_Base_SetConfig+0x114>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d013      	beq.n	800cf68 <TIM_Base_SetConfig+0x40>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf46:	d00f      	beq.n	800cf68 <TIM_Base_SetConfig+0x40>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a3d      	ldr	r2, [pc, #244]	; (800d040 <TIM_Base_SetConfig+0x118>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d00b      	beq.n	800cf68 <TIM_Base_SetConfig+0x40>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a3c      	ldr	r2, [pc, #240]	; (800d044 <TIM_Base_SetConfig+0x11c>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d007      	beq.n	800cf68 <TIM_Base_SetConfig+0x40>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a3b      	ldr	r2, [pc, #236]	; (800d048 <TIM_Base_SetConfig+0x120>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d003      	beq.n	800cf68 <TIM_Base_SetConfig+0x40>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a3a      	ldr	r2, [pc, #232]	; (800d04c <TIM_Base_SetConfig+0x124>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d108      	bne.n	800cf7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	4313      	orrs	r3, r2
 800cf78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a2f      	ldr	r2, [pc, #188]	; (800d03c <TIM_Base_SetConfig+0x114>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d02b      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf88:	d027      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a2c      	ldr	r2, [pc, #176]	; (800d040 <TIM_Base_SetConfig+0x118>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d023      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a2b      	ldr	r2, [pc, #172]	; (800d044 <TIM_Base_SetConfig+0x11c>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d01f      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a2a      	ldr	r2, [pc, #168]	; (800d048 <TIM_Base_SetConfig+0x120>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d01b      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a29      	ldr	r2, [pc, #164]	; (800d04c <TIM_Base_SetConfig+0x124>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d017      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a28      	ldr	r2, [pc, #160]	; (800d050 <TIM_Base_SetConfig+0x128>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d013      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4a27      	ldr	r2, [pc, #156]	; (800d054 <TIM_Base_SetConfig+0x12c>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d00f      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4a26      	ldr	r2, [pc, #152]	; (800d058 <TIM_Base_SetConfig+0x130>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d00b      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4a25      	ldr	r2, [pc, #148]	; (800d05c <TIM_Base_SetConfig+0x134>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d007      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a24      	ldr	r2, [pc, #144]	; (800d060 <TIM_Base_SetConfig+0x138>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d003      	beq.n	800cfda <TIM_Base_SetConfig+0xb2>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a23      	ldr	r2, [pc, #140]	; (800d064 <TIM_Base_SetConfig+0x13c>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d108      	bne.n	800cfec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	689a      	ldr	r2, [r3, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a0a      	ldr	r2, [pc, #40]	; (800d03c <TIM_Base_SetConfig+0x114>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <TIM_Base_SetConfig+0xf8>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a0c      	ldr	r2, [pc, #48]	; (800d04c <TIM_Base_SetConfig+0x124>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d103      	bne.n	800d028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	691a      	ldr	r2, [r3, #16]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	615a      	str	r2, [r3, #20]
}
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	40010000 	.word	0x40010000
 800d040:	40000400 	.word	0x40000400
 800d044:	40000800 	.word	0x40000800
 800d048:	40000c00 	.word	0x40000c00
 800d04c:	40010400 	.word	0x40010400
 800d050:	40014000 	.word	0x40014000
 800d054:	40014400 	.word	0x40014400
 800d058:	40014800 	.word	0x40014800
 800d05c:	40001800 	.word	0x40001800
 800d060:	40001c00 	.word	0x40001c00
 800d064:	40002000 	.word	0x40002000

0800d068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d068:	b480      	push	{r7}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	f023 0201 	bic.w	r2, r3, #1
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a1b      	ldr	r3, [r3, #32]
 800d082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 0303 	bic.w	r3, r3, #3
 800d09e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	f023 0302 	bic.w	r3, r3, #2
 800d0b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4a20      	ldr	r2, [pc, #128]	; (800d140 <TIM_OC1_SetConfig+0xd8>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d003      	beq.n	800d0cc <TIM_OC1_SetConfig+0x64>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4a1f      	ldr	r2, [pc, #124]	; (800d144 <TIM_OC1_SetConfig+0xdc>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d10c      	bne.n	800d0e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	f023 0308 	bic.w	r3, r3, #8
 800d0d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	697a      	ldr	r2, [r7, #20]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	f023 0304 	bic.w	r3, r3, #4
 800d0e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a15      	ldr	r2, [pc, #84]	; (800d140 <TIM_OC1_SetConfig+0xd8>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d003      	beq.n	800d0f6 <TIM_OC1_SetConfig+0x8e>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a14      	ldr	r2, [pc, #80]	; (800d144 <TIM_OC1_SetConfig+0xdc>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d111      	bne.n	800d11a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	699b      	ldr	r3, [r3, #24]
 800d114:	693a      	ldr	r2, [r7, #16]
 800d116:	4313      	orrs	r3, r2
 800d118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	621a      	str	r2, [r3, #32]
}
 800d134:	bf00      	nop
 800d136:	371c      	adds	r7, #28
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	40010000 	.word	0x40010000
 800d144:	40010400 	.word	0x40010400

0800d148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d148:	b480      	push	{r7}
 800d14a:	b087      	sub	sp, #28
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	f023 0210 	bic.w	r2, r3, #16
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a1b      	ldr	r3, [r3, #32]
 800d162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d17e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	021b      	lsls	r3, r3, #8
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	4313      	orrs	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	f023 0320 	bic.w	r3, r3, #32
 800d192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a22      	ldr	r2, [pc, #136]	; (800d22c <TIM_OC2_SetConfig+0xe4>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d003      	beq.n	800d1b0 <TIM_OC2_SetConfig+0x68>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a21      	ldr	r2, [pc, #132]	; (800d230 <TIM_OC2_SetConfig+0xe8>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d10d      	bne.n	800d1cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	011b      	lsls	r3, r3, #4
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a17      	ldr	r2, [pc, #92]	; (800d22c <TIM_OC2_SetConfig+0xe4>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d003      	beq.n	800d1dc <TIM_OC2_SetConfig+0x94>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a16      	ldr	r2, [pc, #88]	; (800d230 <TIM_OC2_SetConfig+0xe8>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d113      	bne.n	800d204 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	4313      	orrs	r3, r2
 800d202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	621a      	str	r2, [r3, #32]
}
 800d21e:	bf00      	nop
 800d220:	371c      	adds	r7, #28
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	40010000 	.word	0x40010000
 800d230:	40010400 	.word	0x40010400

0800d234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d234:	b480      	push	{r7}
 800d236:	b087      	sub	sp, #28
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f023 0303 	bic.w	r3, r3, #3
 800d26a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	4313      	orrs	r3, r2
 800d274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d27c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	4313      	orrs	r3, r2
 800d288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4a21      	ldr	r2, [pc, #132]	; (800d314 <TIM_OC3_SetConfig+0xe0>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d003      	beq.n	800d29a <TIM_OC3_SetConfig+0x66>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a20      	ldr	r2, [pc, #128]	; (800d318 <TIM_OC3_SetConfig+0xe4>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d10d      	bne.n	800d2b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	021b      	lsls	r3, r3, #8
 800d2a8:	697a      	ldr	r2, [r7, #20]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4a16      	ldr	r2, [pc, #88]	; (800d314 <TIM_OC3_SetConfig+0xe0>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d003      	beq.n	800d2c6 <TIM_OC3_SetConfig+0x92>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a15      	ldr	r2, [pc, #84]	; (800d318 <TIM_OC3_SetConfig+0xe4>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d113      	bne.n	800d2ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	011b      	lsls	r3, r3, #4
 800d2dc:	693a      	ldr	r2, [r7, #16]
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	011b      	lsls	r3, r3, #4
 800d2e8:	693a      	ldr	r2, [r7, #16]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	693a      	ldr	r2, [r7, #16]
 800d2f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	697a      	ldr	r2, [r7, #20]
 800d306:	621a      	str	r2, [r3, #32]
}
 800d308:	bf00      	nop
 800d30a:	371c      	adds	r7, #28
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	40010000 	.word	0x40010000
 800d318:	40010400 	.word	0x40010400

0800d31c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b087      	sub	sp, #28
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a1b      	ldr	r3, [r3, #32]
 800d336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	021b      	lsls	r3, r3, #8
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	031b      	lsls	r3, r3, #12
 800d36e:	693a      	ldr	r2, [r7, #16]
 800d370:	4313      	orrs	r3, r2
 800d372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a12      	ldr	r2, [pc, #72]	; (800d3c0 <TIM_OC4_SetConfig+0xa4>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d003      	beq.n	800d384 <TIM_OC4_SetConfig+0x68>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a11      	ldr	r2, [pc, #68]	; (800d3c4 <TIM_OC4_SetConfig+0xa8>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d109      	bne.n	800d398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d38a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	019b      	lsls	r3, r3, #6
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	4313      	orrs	r3, r2
 800d396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	621a      	str	r2, [r3, #32]
}
 800d3b2:	bf00      	nop
 800d3b4:	371c      	adds	r7, #28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	40010000 	.word	0x40010000
 800d3c4:	40010400 	.word	0x40010400

0800d3c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6a1b      	ldr	r3, [r3, #32]
 800d3d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	f023 0201 	bic.w	r2, r3, #1
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	011b      	lsls	r3, r3, #4
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f023 030a 	bic.w	r3, r3, #10
 800d404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	621a      	str	r2, [r3, #32]
}
 800d41a:	bf00      	nop
 800d41c:	371c      	adds	r7, #28
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d426:	b480      	push	{r7}
 800d428:	b087      	sub	sp, #28
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	f023 0210 	bic.w	r2, r3, #16
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6a1b      	ldr	r3, [r3, #32]
 800d448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	031b      	lsls	r3, r3, #12
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	4313      	orrs	r3, r2
 800d45a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	621a      	str	r2, [r3, #32]
}
 800d47a:	bf00      	nop
 800d47c:	371c      	adds	r7, #28
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d49c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	f043 0307 	orr.w	r3, r3, #7
 800d4a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	609a      	str	r2, [r3, #8]
}
 800d4b0:	bf00      	nop
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b087      	sub	sp, #28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
 800d4c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	021a      	lsls	r2, r3, #8
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	697a      	ldr	r2, [r7, #20]
 800d4ee:	609a      	str	r2, [r3, #8]
}
 800d4f0:	bf00      	nop
 800d4f2:	371c      	adds	r7, #28
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	f003 031f 	and.w	r3, r3, #31
 800d50e:	2201      	movs	r2, #1
 800d510:	fa02 f303 	lsl.w	r3, r2, r3
 800d514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6a1a      	ldr	r2, [r3, #32]
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	43db      	mvns	r3, r3
 800d51e:	401a      	ands	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6a1a      	ldr	r2, [r3, #32]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	f003 031f 	and.w	r3, r3, #31
 800d52e:	6879      	ldr	r1, [r7, #4]
 800d530:	fa01 f303 	lsl.w	r3, r1, r3
 800d534:	431a      	orrs	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	621a      	str	r2, [r3, #32]
}
 800d53a:	bf00      	nop
 800d53c:	371c      	adds	r7, #28
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2b04      	cmp	r3, #4
 800d554:	d00d      	beq.n	800d572 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d556:	2b08      	cmp	r3, #8
 800d558:	d014      	beq.n	800d584 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d000      	beq.n	800d560 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d55e:	e01a      	b.n	800d596 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68da      	ldr	r2, [r3, #12]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f042 0202 	orr.w	r2, r2, #2
 800d56e:	60da      	str	r2, [r3, #12]
      break;
 800d570:	e011      	b.n	800d596 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68da      	ldr	r2, [r3, #12]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f042 0204 	orr.w	r2, r2, #4
 800d580:	60da      	str	r2, [r3, #12]
      break;
 800d582:	e008      	b.n	800d596 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68da      	ldr	r2, [r3, #12]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f042 0208 	orr.w	r2, r2, #8
 800d592:	60da      	str	r2, [r3, #12]
      break;
 800d594:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68da      	ldr	r2, [r3, #12]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d5a4:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2204      	movs	r2, #4
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f000 f93f 	bl	800d832 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	f003 0307 	and.w	r3, r3, #7
 800d5ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2b06      	cmp	r3, #6
 800d5d4:	d007      	beq.n	800d5e6 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f042 0201 	orr.w	r2, r2, #1
 800d5e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	2b04      	cmp	r3, #4
 800d5fe:	d00d      	beq.n	800d61c <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d600:	2b08      	cmp	r3, #8
 800d602:	d014      	beq.n	800d62e <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d604:	2b00      	cmp	r3, #0
 800d606:	d000      	beq.n	800d60a <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d608:	e01a      	b.n	800d640 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	68da      	ldr	r2, [r3, #12]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f022 0202 	bic.w	r2, r2, #2
 800d618:	60da      	str	r2, [r3, #12]
      break;
 800d61a:	e011      	b.n	800d640 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68da      	ldr	r2, [r3, #12]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f022 0204 	bic.w	r2, r2, #4
 800d62a:	60da      	str	r2, [r3, #12]
      break;
 800d62c:	e008      	b.n	800d640 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68da      	ldr	r2, [r3, #12]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f022 0208 	bic.w	r2, r2, #8
 800d63c:	60da      	str	r2, [r3, #12]
      break;
 800d63e:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2200      	movs	r2, #0
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 f8f2 	bl	800d832 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	f240 4344 	movw	r3, #1092	; 0x444
 800d65c:	4013      	ands	r3, r2
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d107      	bne.n	800d672 <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68da      	ldr	r2, [r3, #12]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d670:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6a1a      	ldr	r2, [r3, #32]
 800d678:	f241 1311 	movw	r3, #4369	; 0x1111
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10f      	bne.n	800d6a2 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6a1a      	ldr	r2, [r3, #32]
 800d688:	f240 4344 	movw	r3, #1092	; 0x444
 800d68c:	4013      	ands	r3, r2
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d107      	bne.n	800d6a2 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	6a1a      	ldr	r2, [r3, #32]
 800d6a8:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10f      	bne.n	800d6d2 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6a1a      	ldr	r2, [r3, #32]
 800d6b8:	f240 4344 	movw	r3, #1092	; 0x444
 800d6bc:	4013      	ands	r3, r2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d107      	bne.n	800d6d2 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f022 0201 	bic.w	r2, r2, #1
 800d6d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d101      	bne.n	800d6f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	e032      	b.n	800d75a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2202      	movs	r2, #2
 800d700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d71a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	4313      	orrs	r3, r2
 800d724:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d72c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	4313      	orrs	r3, r2
 800d736:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3714      	adds	r7, #20
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d766:	b480      	push	{r7}
 800d768:	b085      	sub	sp, #20
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d770:	2300      	movs	r3, #0
 800d772:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d101      	bne.n	800d782 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d77e:	2302      	movs	r3, #2
 800d780:	e03d      	b.n	800d7fe <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	4313      	orrs	r3, r2
 800d796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	695b      	ldr	r3, [r3, #20]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	69db      	ldr	r3, [r3, #28]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3714      	adds	r7, #20
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d812:	bf00      	nop
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d81e:	b480      	push	{r7}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d826:	bf00      	nop
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d832:	b480      	push	{r7}
 800d834:	b087      	sub	sp, #28
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f003 031f 	and.w	r3, r3, #31
 800d844:	2204      	movs	r2, #4
 800d846:	fa02 f303 	lsl.w	r3, r2, r3
 800d84a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6a1a      	ldr	r2, [r3, #32]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	43db      	mvns	r3, r3
 800d854:	401a      	ands	r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6a1a      	ldr	r2, [r3, #32]
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	f003 031f 	and.w	r3, r3, #31
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	fa01 f303 	lsl.w	r3, r1, r3
 800d86a:	431a      	orrs	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	621a      	str	r2, [r3, #32]
}
 800d870:	bf00      	nop
 800d872:	371c      	adds	r7, #28
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e03f      	b.n	800d90e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f003 fdb0 	bl	8011408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2224      	movs	r2, #36	; 0x24
 800d8ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68da      	ldr	r2, [r3, #12]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 fa65 	bl	800dd90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	691a      	ldr	r2, [r3, #16]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d8d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	695a      	ldr	r2, [r3, #20]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d8e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68da      	ldr	r2, [r3, #12]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2220      	movs	r2, #32
 800d908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3708      	adds	r7, #8
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
	...

0800d918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d938:	2300      	movs	r3, #0
 800d93a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d93c:	2300      	movs	r3, #0
 800d93e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	f003 030f 	and.w	r3, r3, #15
 800d946:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10d      	bne.n	800d96a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	f003 0320 	and.w	r3, r3, #32
 800d954:	2b00      	cmp	r3, #0
 800d956:	d008      	beq.n	800d96a <HAL_UART_IRQHandler+0x52>
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	f003 0320 	and.w	r3, r3, #32
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f992 	bl	800dc8c <UART_Receive_IT>
      return;
 800d968:	e0cc      	b.n	800db04 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 80ab 	beq.w	800dac8 <HAL_UART_IRQHandler+0x1b0>
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d105      	bne.n	800d988 <HAL_UART_IRQHandler+0x70>
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d982:	2b00      	cmp	r3, #0
 800d984:	f000 80a0 	beq.w	800dac8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00a      	beq.n	800d9a8 <HAL_UART_IRQHandler+0x90>
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d005      	beq.n	800d9a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a0:	f043 0201 	orr.w	r2, r3, #1
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	f003 0304 	and.w	r3, r3, #4
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00a      	beq.n	800d9c8 <HAL_UART_IRQHandler+0xb0>
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d005      	beq.n	800d9c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c0:	f043 0202 	orr.w	r2, r3, #2
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	f003 0302 	and.w	r3, r3, #2
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00a      	beq.n	800d9e8 <HAL_UART_IRQHandler+0xd0>
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d005      	beq.n	800d9e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e0:	f043 0204 	orr.w	r2, r3, #4
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	f003 0308 	and.w	r3, r3, #8
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <HAL_UART_IRQHandler+0xf0>
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d005      	beq.n	800da08 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da00:	f043 0208 	orr.w	r2, r3, #8
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d078      	beq.n	800db02 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	f003 0320 	and.w	r3, r3, #32
 800da16:	2b00      	cmp	r3, #0
 800da18:	d007      	beq.n	800da2a <HAL_UART_IRQHandler+0x112>
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	f003 0320 	and.w	r3, r3, #32
 800da20:	2b00      	cmp	r3, #0
 800da22:	d002      	beq.n	800da2a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 f931 	bl	800dc8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da34:	2b40      	cmp	r3, #64	; 0x40
 800da36:	bf0c      	ite	eq
 800da38:	2301      	moveq	r3, #1
 800da3a:	2300      	movne	r3, #0
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da44:	f003 0308 	and.w	r3, r3, #8
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d102      	bne.n	800da52 <HAL_UART_IRQHandler+0x13a>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d031      	beq.n	800dab6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f87a 	bl	800db4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da62:	2b40      	cmp	r3, #64	; 0x40
 800da64:	d123      	bne.n	800daae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	695a      	ldr	r2, [r3, #20]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d013      	beq.n	800daa6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da82:	4a22      	ldr	r2, [pc, #136]	; (800db0c <HAL_UART_IRQHandler+0x1f4>)
 800da84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fc fd92 	bl	800a5b4 <HAL_DMA_Abort_IT>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d016      	beq.n	800dac4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800daa0:	4610      	mov	r0, r2
 800daa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daa4:	e00e      	b.n	800dac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f846 	bl	800db38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daac:	e00a      	b.n	800dac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f842 	bl	800db38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dab4:	e006      	b.n	800dac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f83e 	bl	800db38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800dac2:	e01e      	b.n	800db02 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dac4:	bf00      	nop
    return;
 800dac6:	e01c      	b.n	800db02 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d008      	beq.n	800dae4 <HAL_UART_IRQHandler+0x1cc>
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d003      	beq.n	800dae4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 f867 	bl	800dbb0 <UART_Transmit_IT>
    return;
 800dae2:	e00f      	b.n	800db04 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <HAL_UART_IRQHandler+0x1ec>
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d005      	beq.n	800db04 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 f8af 	bl	800dc5c <UART_EndTransmit_IT>
    return;
 800dafe:	bf00      	nop
 800db00:	e000      	b.n	800db04 <HAL_UART_IRQHandler+0x1ec>
    return;
 800db02:	bf00      	nop
  }
}
 800db04:	3720      	adds	r7, #32
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	0800db89 	.word	0x0800db89

0800db10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68da      	ldr	r2, [r3, #12]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	695a      	ldr	r2, [r3, #20]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f022 0201 	bic.w	r2, r2, #1
 800db72:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2220      	movs	r2, #32
 800db78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2200      	movs	r2, #0
 800db9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2200      	movs	r2, #0
 800dba0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f7ff ffc8 	bl	800db38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dba8:	bf00      	nop
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	2b21      	cmp	r3, #33	; 0x21
 800dbc2:	d144      	bne.n	800dc4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbcc:	d11a      	bne.n	800dc04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	881b      	ldrh	r3, [r3, #0]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbe2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d105      	bne.n	800dbf8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a1b      	ldr	r3, [r3, #32]
 800dbf0:	1c9a      	adds	r2, r3, #2
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	621a      	str	r2, [r3, #32]
 800dbf6:	e00e      	b.n	800dc16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	1c5a      	adds	r2, r3, #1
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	621a      	str	r2, [r3, #32]
 800dc02:	e008      	b.n	800dc16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a1b      	ldr	r3, [r3, #32]
 800dc08:	1c59      	adds	r1, r3, #1
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	6211      	str	r1, [r2, #32]
 800dc0e:	781a      	ldrb	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	4619      	mov	r1, r3
 800dc24:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10f      	bne.n	800dc4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68da      	ldr	r2, [r3, #12]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	e000      	b.n	800dc50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dc4e:	2302      	movs	r3, #2
  }
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68da      	ldr	r2, [r3, #12]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2220      	movs	r2, #32
 800dc78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7ff ff47 	bl	800db10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	2b22      	cmp	r3, #34	; 0x22
 800dc9e:	d171      	bne.n	800dd84 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dca8:	d123      	bne.n	800dcf2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10e      	bne.n	800dcd6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcce:	1c9a      	adds	r2, r3, #2
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	629a      	str	r2, [r3, #40]	; 0x28
 800dcd4:	e029      	b.n	800dd2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	629a      	str	r2, [r3, #40]	; 0x28
 800dcf0:	e01b      	b.n	800dd2a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	691b      	ldr	r3, [r3, #16]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10a      	bne.n	800dd10 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6858      	ldr	r0, [r3, #4]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd04:	1c59      	adds	r1, r3, #1
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	6291      	str	r1, [r2, #40]	; 0x28
 800dd0a:	b2c2      	uxtb	r2, r0
 800dd0c:	701a      	strb	r2, [r3, #0]
 800dd0e:	e00c      	b.n	800dd2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	b2da      	uxtb	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd1c:	1c58      	adds	r0, r3, #1
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	6288      	str	r0, [r1, #40]	; 0x28
 800dd22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dd26:	b2d2      	uxtb	r2, r2
 800dd28:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	3b01      	subs	r3, #1
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	4619      	mov	r1, r3
 800dd38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d120      	bne.n	800dd80 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	68da      	ldr	r2, [r3, #12]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f022 0220 	bic.w	r2, r2, #32
 800dd4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	68da      	ldr	r2, [r3, #12]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	695a      	ldr	r2, [r3, #20]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f022 0201 	bic.w	r2, r2, #1
 800dd6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff fed4 	bl	800db24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	e002      	b.n	800dd86 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	e000      	b.n	800dd86 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800dd84:	2302      	movs	r3, #2
  }
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
	...

0800dd90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd90:	b5b0      	push	{r4, r5, r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68da      	ldr	r2, [r3, #12]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	430a      	orrs	r2, r1
 800ddac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	689a      	ldr	r2, [r3, #8]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	431a      	orrs	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	695b      	ldr	r3, [r3, #20]
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ddd0:	f023 030c 	bic.w	r3, r3, #12
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	6812      	ldr	r2, [r2, #0]
 800ddd8:	68f9      	ldr	r1, [r7, #12]
 800ddda:	430b      	orrs	r3, r1
 800dddc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	699a      	ldr	r2, [r3, #24]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	430a      	orrs	r2, r1
 800ddf2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddfc:	f040 80e4 	bne.w	800dfc8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4aab      	ldr	r2, [pc, #684]	; (800e0b4 <UART_SetConfig+0x324>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d004      	beq.n	800de14 <UART_SetConfig+0x84>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4aaa      	ldr	r2, [pc, #680]	; (800e0b8 <UART_SetConfig+0x328>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d16c      	bne.n	800deee <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800de14:	f7fd fc1c 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800de18:	4602      	mov	r2, r0
 800de1a:	4613      	mov	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4413      	add	r3, r2
 800de20:	009a      	lsls	r2, r3, #2
 800de22:	441a      	add	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de2e:	4aa3      	ldr	r2, [pc, #652]	; (800e0bc <UART_SetConfig+0x32c>)
 800de30:	fba2 2303 	umull	r2, r3, r2, r3
 800de34:	095b      	lsrs	r3, r3, #5
 800de36:	011c      	lsls	r4, r3, #4
 800de38:	f7fd fc0a 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800de3c:	4602      	mov	r2, r0
 800de3e:	4613      	mov	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	009a      	lsls	r2, r3, #2
 800de46:	441a      	add	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	fbb2 f5f3 	udiv	r5, r2, r3
 800de52:	f7fd fbfd 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800de56:	4602      	mov	r2, r0
 800de58:	4613      	mov	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	009a      	lsls	r2, r3, #2
 800de60:	441a      	add	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	fbb2 f3f3 	udiv	r3, r2, r3
 800de6c:	4a93      	ldr	r2, [pc, #588]	; (800e0bc <UART_SetConfig+0x32c>)
 800de6e:	fba2 2303 	umull	r2, r3, r2, r3
 800de72:	095b      	lsrs	r3, r3, #5
 800de74:	2264      	movs	r2, #100	; 0x64
 800de76:	fb02 f303 	mul.w	r3, r2, r3
 800de7a:	1aeb      	subs	r3, r5, r3
 800de7c:	00db      	lsls	r3, r3, #3
 800de7e:	3332      	adds	r3, #50	; 0x32
 800de80:	4a8e      	ldr	r2, [pc, #568]	; (800e0bc <UART_SetConfig+0x32c>)
 800de82:	fba2 2303 	umull	r2, r3, r2, r3
 800de86:	095b      	lsrs	r3, r3, #5
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800de8e:	441c      	add	r4, r3
 800de90:	f7fd fbde 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800de94:	4602      	mov	r2, r0
 800de96:	4613      	mov	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	009a      	lsls	r2, r3, #2
 800de9e:	441a      	add	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	fbb2 f5f3 	udiv	r5, r2, r3
 800deaa:	f7fd fbd1 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800deae:	4602      	mov	r2, r0
 800deb0:	4613      	mov	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4413      	add	r3, r2
 800deb6:	009a      	lsls	r2, r3, #2
 800deb8:	441a      	add	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dec4:	4a7d      	ldr	r2, [pc, #500]	; (800e0bc <UART_SetConfig+0x32c>)
 800dec6:	fba2 2303 	umull	r2, r3, r2, r3
 800deca:	095b      	lsrs	r3, r3, #5
 800decc:	2264      	movs	r2, #100	; 0x64
 800dece:	fb02 f303 	mul.w	r3, r2, r3
 800ded2:	1aeb      	subs	r3, r5, r3
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	3332      	adds	r3, #50	; 0x32
 800ded8:	4a78      	ldr	r2, [pc, #480]	; (800e0bc <UART_SetConfig+0x32c>)
 800deda:	fba2 2303 	umull	r2, r3, r2, r3
 800dede:	095b      	lsrs	r3, r3, #5
 800dee0:	f003 0207 	and.w	r2, r3, #7
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4422      	add	r2, r4
 800deea:	609a      	str	r2, [r3, #8]
 800deec:	e154      	b.n	800e198 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800deee:	f7fd fb9b 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800def2:	4602      	mov	r2, r0
 800def4:	4613      	mov	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	009a      	lsls	r2, r3, #2
 800defc:	441a      	add	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	005b      	lsls	r3, r3, #1
 800df04:	fbb2 f3f3 	udiv	r3, r2, r3
 800df08:	4a6c      	ldr	r2, [pc, #432]	; (800e0bc <UART_SetConfig+0x32c>)
 800df0a:	fba2 2303 	umull	r2, r3, r2, r3
 800df0e:	095b      	lsrs	r3, r3, #5
 800df10:	011c      	lsls	r4, r3, #4
 800df12:	f7fd fb89 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800df16:	4602      	mov	r2, r0
 800df18:	4613      	mov	r3, r2
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	4413      	add	r3, r2
 800df1e:	009a      	lsls	r2, r3, #2
 800df20:	441a      	add	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	fbb2 f5f3 	udiv	r5, r2, r3
 800df2c:	f7fd fb7c 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800df30:	4602      	mov	r2, r0
 800df32:	4613      	mov	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4413      	add	r3, r2
 800df38:	009a      	lsls	r2, r3, #2
 800df3a:	441a      	add	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	fbb2 f3f3 	udiv	r3, r2, r3
 800df46:	4a5d      	ldr	r2, [pc, #372]	; (800e0bc <UART_SetConfig+0x32c>)
 800df48:	fba2 2303 	umull	r2, r3, r2, r3
 800df4c:	095b      	lsrs	r3, r3, #5
 800df4e:	2264      	movs	r2, #100	; 0x64
 800df50:	fb02 f303 	mul.w	r3, r2, r3
 800df54:	1aeb      	subs	r3, r5, r3
 800df56:	00db      	lsls	r3, r3, #3
 800df58:	3332      	adds	r3, #50	; 0x32
 800df5a:	4a58      	ldr	r2, [pc, #352]	; (800e0bc <UART_SetConfig+0x32c>)
 800df5c:	fba2 2303 	umull	r2, r3, r2, r3
 800df60:	095b      	lsrs	r3, r3, #5
 800df62:	005b      	lsls	r3, r3, #1
 800df64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800df68:	441c      	add	r4, r3
 800df6a:	f7fd fb5d 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800df6e:	4602      	mov	r2, r0
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	009a      	lsls	r2, r3, #2
 800df78:	441a      	add	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	fbb2 f5f3 	udiv	r5, r2, r3
 800df84:	f7fd fb50 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800df88:	4602      	mov	r2, r0
 800df8a:	4613      	mov	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	009a      	lsls	r2, r3, #2
 800df92:	441a      	add	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df9e:	4a47      	ldr	r2, [pc, #284]	; (800e0bc <UART_SetConfig+0x32c>)
 800dfa0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa4:	095b      	lsrs	r3, r3, #5
 800dfa6:	2264      	movs	r2, #100	; 0x64
 800dfa8:	fb02 f303 	mul.w	r3, r2, r3
 800dfac:	1aeb      	subs	r3, r5, r3
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	3332      	adds	r3, #50	; 0x32
 800dfb2:	4a42      	ldr	r2, [pc, #264]	; (800e0bc <UART_SetConfig+0x32c>)
 800dfb4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfb8:	095b      	lsrs	r3, r3, #5
 800dfba:	f003 0207 	and.w	r2, r3, #7
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4422      	add	r2, r4
 800dfc4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800dfc6:	e0e7      	b.n	800e198 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4a39      	ldr	r2, [pc, #228]	; (800e0b4 <UART_SetConfig+0x324>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d004      	beq.n	800dfdc <UART_SetConfig+0x24c>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a38      	ldr	r2, [pc, #224]	; (800e0b8 <UART_SetConfig+0x328>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d171      	bne.n	800e0c0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800dfdc:	f7fd fb38 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	009a      	lsls	r2, r3, #2
 800dfea:	441a      	add	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff6:	4a31      	ldr	r2, [pc, #196]	; (800e0bc <UART_SetConfig+0x32c>)
 800dff8:	fba2 2303 	umull	r2, r3, r2, r3
 800dffc:	095b      	lsrs	r3, r3, #5
 800dffe:	011c      	lsls	r4, r3, #4
 800e000:	f7fd fb26 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800e004:	4602      	mov	r2, r0
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009a      	lsls	r2, r3, #2
 800e00e:	441a      	add	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	fbb2 f5f3 	udiv	r5, r2, r3
 800e01a:	f7fd fb19 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800e01e:	4602      	mov	r2, r0
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	009a      	lsls	r2, r3, #2
 800e028:	441a      	add	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	fbb2 f3f3 	udiv	r3, r2, r3
 800e034:	4a21      	ldr	r2, [pc, #132]	; (800e0bc <UART_SetConfig+0x32c>)
 800e036:	fba2 2303 	umull	r2, r3, r2, r3
 800e03a:	095b      	lsrs	r3, r3, #5
 800e03c:	2264      	movs	r2, #100	; 0x64
 800e03e:	fb02 f303 	mul.w	r3, r2, r3
 800e042:	1aeb      	subs	r3, r5, r3
 800e044:	011b      	lsls	r3, r3, #4
 800e046:	3332      	adds	r3, #50	; 0x32
 800e048:	4a1c      	ldr	r2, [pc, #112]	; (800e0bc <UART_SetConfig+0x32c>)
 800e04a:	fba2 2303 	umull	r2, r3, r2, r3
 800e04e:	095b      	lsrs	r3, r3, #5
 800e050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e054:	441c      	add	r4, r3
 800e056:	f7fd fafb 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800e05a:	4602      	mov	r2, r0
 800e05c:	4613      	mov	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	009a      	lsls	r2, r3, #2
 800e064:	441a      	add	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	fbb2 f5f3 	udiv	r5, r2, r3
 800e070:	f7fd faee 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800e074:	4602      	mov	r2, r0
 800e076:	4613      	mov	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	009a      	lsls	r2, r3, #2
 800e07e:	441a      	add	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	fbb2 f3f3 	udiv	r3, r2, r3
 800e08a:	4a0c      	ldr	r2, [pc, #48]	; (800e0bc <UART_SetConfig+0x32c>)
 800e08c:	fba2 2303 	umull	r2, r3, r2, r3
 800e090:	095b      	lsrs	r3, r3, #5
 800e092:	2264      	movs	r2, #100	; 0x64
 800e094:	fb02 f303 	mul.w	r3, r2, r3
 800e098:	1aeb      	subs	r3, r5, r3
 800e09a:	011b      	lsls	r3, r3, #4
 800e09c:	3332      	adds	r3, #50	; 0x32
 800e09e:	4a07      	ldr	r2, [pc, #28]	; (800e0bc <UART_SetConfig+0x32c>)
 800e0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a4:	095b      	lsrs	r3, r3, #5
 800e0a6:	f003 020f 	and.w	r2, r3, #15
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4422      	add	r2, r4
 800e0b0:	609a      	str	r2, [r3, #8]
 800e0b2:	e071      	b.n	800e198 <UART_SetConfig+0x408>
 800e0b4:	40011000 	.word	0x40011000
 800e0b8:	40011400 	.word	0x40011400
 800e0bc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e0c0:	f7fd fab2 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	009a      	lsls	r2, r3, #2
 800e0ce:	441a      	add	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0da:	4a31      	ldr	r2, [pc, #196]	; (800e1a0 <UART_SetConfig+0x410>)
 800e0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e0:	095b      	lsrs	r3, r3, #5
 800e0e2:	011c      	lsls	r4, r3, #4
 800e0e4:	f7fd faa0 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009a      	lsls	r2, r3, #2
 800e0f2:	441a      	add	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	fbb2 f5f3 	udiv	r5, r2, r3
 800e0fe:	f7fd fa93 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800e102:	4602      	mov	r2, r0
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009a      	lsls	r2, r3, #2
 800e10c:	441a      	add	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	fbb2 f3f3 	udiv	r3, r2, r3
 800e118:	4a21      	ldr	r2, [pc, #132]	; (800e1a0 <UART_SetConfig+0x410>)
 800e11a:	fba2 2303 	umull	r2, r3, r2, r3
 800e11e:	095b      	lsrs	r3, r3, #5
 800e120:	2264      	movs	r2, #100	; 0x64
 800e122:	fb02 f303 	mul.w	r3, r2, r3
 800e126:	1aeb      	subs	r3, r5, r3
 800e128:	011b      	lsls	r3, r3, #4
 800e12a:	3332      	adds	r3, #50	; 0x32
 800e12c:	4a1c      	ldr	r2, [pc, #112]	; (800e1a0 <UART_SetConfig+0x410>)
 800e12e:	fba2 2303 	umull	r2, r3, r2, r3
 800e132:	095b      	lsrs	r3, r3, #5
 800e134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e138:	441c      	add	r4, r3
 800e13a:	f7fd fa75 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800e13e:	4602      	mov	r2, r0
 800e140:	4613      	mov	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	009a      	lsls	r2, r3, #2
 800e148:	441a      	add	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	fbb2 f5f3 	udiv	r5, r2, r3
 800e154:	f7fd fa68 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800e158:	4602      	mov	r2, r0
 800e15a:	4613      	mov	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	009a      	lsls	r2, r3, #2
 800e162:	441a      	add	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16e:	4a0c      	ldr	r2, [pc, #48]	; (800e1a0 <UART_SetConfig+0x410>)
 800e170:	fba2 2303 	umull	r2, r3, r2, r3
 800e174:	095b      	lsrs	r3, r3, #5
 800e176:	2264      	movs	r2, #100	; 0x64
 800e178:	fb02 f303 	mul.w	r3, r2, r3
 800e17c:	1aeb      	subs	r3, r5, r3
 800e17e:	011b      	lsls	r3, r3, #4
 800e180:	3332      	adds	r3, #50	; 0x32
 800e182:	4a07      	ldr	r2, [pc, #28]	; (800e1a0 <UART_SetConfig+0x410>)
 800e184:	fba2 2303 	umull	r2, r3, r2, r3
 800e188:	095b      	lsrs	r3, r3, #5
 800e18a:	f003 020f 	and.w	r2, r3, #15
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4422      	add	r2, r4
 800e194:	609a      	str	r2, [r3, #8]
}
 800e196:	e7ff      	b.n	800e198 <UART_SetConfig+0x408>
 800e198:	bf00      	nop
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bdb0      	pop	{r4, r5, r7, pc}
 800e1a0:	51eb851f 	.word	0x51eb851f

0800e1a4 <ACR_Start>:
int soundCount = 0;



void ACR_Start()
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	af00      	add	r7, sp, #0

	ACR_enable = 1;
 800e1a8:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <ACR_Start+0x14>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	701a      	strb	r2, [r3, #0]
	ACR_Reset();
 800e1ae:	f000 fa61 	bl	800e674 <ACR_Reset>

}
 800e1b2:	bf00      	nop
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	200000c0 	.word	0x200000c0
 800e1bc:	00000000 	.word	0x00000000

0800e1c0 <currentControl>:
}



inline void currentControl(void)
{
 800e1c0:	b590      	push	{r4, r7, lr}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	2140      	movs	r1, #64	; 0x40
 800e1ca:	48bb      	ldr	r0, [pc, #748]	; (800e4b8 <currentControl+0x2f8>)
 800e1cc:	f7fd f90a 	bl	800b3e4 <HAL_GPIO_WritePin>



	if(forced_commute_enable)
 800e1d0:	4bba      	ldr	r3, [pc, #744]	; (800e4bc <currentControl+0x2fc>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d076      	beq.n	800e2c8 <currentControl+0x108>
	{
		float _forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 800e1da:	4bb9      	ldr	r3, [pc, #740]	; (800e4c0 <currentControl+0x300>)
 800e1dc:	edd3 7a00 	vldr	s15, [r3]
 800e1e0:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800e1e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e1ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e1f0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800e4c4 <currentControl+0x304>
 800e1f4:	eeb0 0a66 	vmov.f32	s0, s13
 800e1f8:	f004 f94a 	bl	8012490 <fmodf>
 800e1fc:	ed87 0a01 	vstr	s0, [r7, #4]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 800e200:	edd7 7a01 	vldr	s15, [r7, #4]
 800e204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e20c:	d511      	bpl.n	800e232 <currentControl+0x72>
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7fa f8ca 	bl	80083a8 <__aeabi_f2d>
 800e214:	a3a4      	add	r3, pc, #656	; (adr r3, 800e4a8 <currentControl+0x2e8>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	f7f9 ff67 	bl	80080ec <__adddf3>
 800e21e:	4603      	mov	r3, r0
 800e220:	460c      	mov	r4, r1
 800e222:	4618      	mov	r0, r3
 800e224:	4621      	mov	r1, r4
 800e226:	f7fa fbd9 	bl	80089dc <__aeabi_d2f>
 800e22a:	4602      	mov	r2, r0
 800e22c:	4ba6      	ldr	r3, [pc, #664]	; (800e4c8 <currentControl+0x308>)
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	e01f      	b.n	800e272 <currentControl+0xb2>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7fa f8b8 	bl	80083a8 <__aeabi_f2d>
 800e238:	a39b      	add	r3, pc, #620	; (adr r3, 800e4a8 <currentControl+0x2e8>)
 800e23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23e:	f7fa fb91 	bl	8008964 <__aeabi_dcmpge>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d011      	beq.n	800e26c <currentControl+0xac>
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f7fa f8ad 	bl	80083a8 <__aeabi_f2d>
 800e24e:	a396      	add	r3, pc, #600	; (adr r3, 800e4a8 <currentControl+0x2e8>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f9 ff48 	bl	80080e8 <__aeabi_dsub>
 800e258:	4603      	mov	r3, r0
 800e25a:	460c      	mov	r4, r1
 800e25c:	4618      	mov	r0, r3
 800e25e:	4621      	mov	r1, r4
 800e260:	f7fa fbbc 	bl	80089dc <__aeabi_d2f>
 800e264:	4602      	mov	r2, r0
 800e266:	4b98      	ldr	r3, [pc, #608]	; (800e4c8 <currentControl+0x308>)
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	e002      	b.n	800e272 <currentControl+0xb2>
		else									forced_theta_re = _forced_theta_re;
 800e26c:	4a96      	ldr	r2, [pc, #600]	; (800e4c8 <currentControl+0x308>)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800e272:	4b95      	ldr	r3, [pc, #596]	; (800e4c8 <currentControl+0x308>)
 800e274:	edd3 7a00 	vldr	s15, [r3]
 800e278:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800e4cc <currentControl+0x30c>
 800e27c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e280:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e284:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e288:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800e4d0 <currentControl+0x310>
 800e28c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e294:	ee17 3a90 	vmov	r3, s15
 800e298:	4a8e      	ldr	r2, [pc, #568]	; (800e4d4 <currentControl+0x314>)
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4413      	add	r3, r2
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a8d      	ldr	r2, [pc, #564]	; (800e4d8 <currentControl+0x318>)
 800e2a2:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 800e2a4:	4b88      	ldr	r3, [pc, #544]	; (800e4c8 <currentControl+0x308>)
 800e2a6:	edd3 7a00 	vldr	s15, [r3]
 800e2aa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800e4dc <currentControl+0x31c>
 800e2ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2b6:	ee17 3a90 	vmov	r3, s15
 800e2ba:	4a86      	ldr	r2, [pc, #536]	; (800e4d4 <currentControl+0x314>)
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a87      	ldr	r2, [pc, #540]	; (800e4e0 <currentControl+0x320>)
 800e2c4:	6013      	str	r3, [r2, #0]
 800e2c6:	e001      	b.n	800e2cc <currentControl+0x10c>
	}
	else
	{
		refreshEncoder();
 800e2c8:	f002 fbd6 	bl	8010a78 <refreshEncoder>
	}

	get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 800e2cc:	4b85      	ldr	r3, [pc, #532]	; (800e4e4 <currentControl+0x324>)
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	4b81      	ldr	r3, [pc, #516]	; (800e4d8 <currentControl+0x318>)
 800e2d2:	edd3 7a00 	vldr	s15, [r3]
 800e2d6:	4b82      	ldr	r3, [pc, #520]	; (800e4e0 <currentControl+0x320>)
 800e2d8:	ed93 7a00 	vldr	s14, [r3]
 800e2dc:	eef0 0a47 	vmov.f32	s1, s14
 800e2e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e2e4:	4980      	ldr	r1, [pc, #512]	; (800e4e8 <currentControl+0x328>)
 800e2e6:	4881      	ldr	r0, [pc, #516]	; (800e4ec <currentControl+0x32c>)
 800e2e8:	f000 fe78 	bl	800efdc <get_current_dq>


	if(theta_re < M_PI)
 800e2ec:	4b80      	ldr	r3, [pc, #512]	; (800e4f0 <currentControl+0x330>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fa f859 	bl	80083a8 <__aeabi_f2d>
 800e2f6:	a36e      	add	r3, pc, #440	; (adr r3, 800e4b0 <currentControl+0x2f0>)
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	f7fa fb1e 	bl	800893c <__aeabi_dcmplt>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d005      	beq.n	800e312 <currentControl+0x152>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800e306:	2200      	movs	r2, #0
 800e308:	2140      	movs	r1, #64	; 0x40
 800e30a:	487a      	ldr	r0, [pc, #488]	; (800e4f4 <currentControl+0x334>)
 800e30c:	f7fd f86a 	bl	800b3e4 <HAL_GPIO_WritePin>
 800e310:	e004      	b.n	800e31c <currentControl+0x15c>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800e312:	2201      	movs	r2, #1
 800e314:	2140      	movs	r1, #64	; 0x40
 800e316:	4877      	ldr	r0, [pc, #476]	; (800e4f4 <currentControl+0x334>)
 800e318:	f7fd f864 	bl	800b3e4 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(ACR_enable /*&& soundCount == -1*/)
 800e31c:	4b76      	ldr	r3, [pc, #472]	; (800e4f8 <currentControl+0x338>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b00      	cmp	r3, #0
 800e324:	f000 815c 	beq.w	800e5e0 <currentControl+0x420>
	{

		if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 800e328:	4b74      	ldr	r3, [pc, #464]	; (800e4fc <currentControl+0x33c>)
 800e32a:	edd3 7a00 	vldr	s15, [r3]
 800e32e:	eeb1 7a67 	vneg.f32	s14, s15
 800e332:	4b73      	ldr	r3, [pc, #460]	; (800e500 <currentControl+0x340>)
 800e334:	edd3 7a00 	vldr	s15, [r3]
 800e338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e340:	dd08      	ble.n	800e354 <currentControl+0x194>
 800e342:	4b6e      	ldr	r3, [pc, #440]	; (800e4fc <currentControl+0x33c>)
 800e344:	edd3 7a00 	vldr	s15, [r3]
 800e348:	eef1 7a67 	vneg.f32	s15, s15
 800e34c:	4b6d      	ldr	r3, [pc, #436]	; (800e504 <currentControl+0x344>)
 800e34e:	edc3 7a00 	vstr	s15, [r3]
 800e352:	e013      	b.n	800e37c <currentControl+0x1bc>
		else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 800e354:	4b6a      	ldr	r3, [pc, #424]	; (800e500 <currentControl+0x340>)
 800e356:	ed93 7a00 	vldr	s14, [r3]
 800e35a:	4b68      	ldr	r3, [pc, #416]	; (800e4fc <currentControl+0x33c>)
 800e35c:	edd3 7a00 	vldr	s15, [r3]
 800e360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e368:	dd04      	ble.n	800e374 <currentControl+0x1b4>
 800e36a:	4b64      	ldr	r3, [pc, #400]	; (800e4fc <currentControl+0x33c>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a65      	ldr	r2, [pc, #404]	; (800e504 <currentControl+0x344>)
 800e370:	6013      	str	r3, [r2, #0]
 800e372:	e003      	b.n	800e37c <currentControl+0x1bc>
		else						_Id_ref = Id_ref;
 800e374:	4b62      	ldr	r3, [pc, #392]	; (800e500 <currentControl+0x340>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a62      	ldr	r2, [pc, #392]	; (800e504 <currentControl+0x344>)
 800e37a:	6013      	str	r3, [r2, #0]

		if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 800e37c:	4b62      	ldr	r3, [pc, #392]	; (800e508 <currentControl+0x348>)
 800e37e:	edd3 7a00 	vldr	s15, [r3]
 800e382:	eeb1 7a67 	vneg.f32	s14, s15
 800e386:	4b61      	ldr	r3, [pc, #388]	; (800e50c <currentControl+0x34c>)
 800e388:	edd3 7a00 	vldr	s15, [r3]
 800e38c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e394:	dd08      	ble.n	800e3a8 <currentControl+0x1e8>
 800e396:	4b5c      	ldr	r3, [pc, #368]	; (800e508 <currentControl+0x348>)
 800e398:	edd3 7a00 	vldr	s15, [r3]
 800e39c:	eef1 7a67 	vneg.f32	s15, s15
 800e3a0:	4b5b      	ldr	r3, [pc, #364]	; (800e510 <currentControl+0x350>)
 800e3a2:	edc3 7a00 	vstr	s15, [r3]
 800e3a6:	e013      	b.n	800e3d0 <currentControl+0x210>
		else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 800e3a8:	4b58      	ldr	r3, [pc, #352]	; (800e50c <currentControl+0x34c>)
 800e3aa:	ed93 7a00 	vldr	s14, [r3]
 800e3ae:	4b56      	ldr	r3, [pc, #344]	; (800e508 <currentControl+0x348>)
 800e3b0:	edd3 7a00 	vldr	s15, [r3]
 800e3b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3bc:	dd04      	ble.n	800e3c8 <currentControl+0x208>
 800e3be:	4b52      	ldr	r3, [pc, #328]	; (800e508 <currentControl+0x348>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a53      	ldr	r2, [pc, #332]	; (800e510 <currentControl+0x350>)
 800e3c4:	6013      	str	r3, [r2, #0]
 800e3c6:	e003      	b.n	800e3d0 <currentControl+0x210>
		else						_Iq_ref = Iq_ref;
 800e3c8:	4b50      	ldr	r3, [pc, #320]	; (800e50c <currentControl+0x34c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a50      	ldr	r2, [pc, #320]	; (800e510 <currentControl+0x350>)
 800e3ce:	6013      	str	r3, [r2, #0]


		Id_error = _Id_ref - Id;
 800e3d0:	4b4c      	ldr	r3, [pc, #304]	; (800e504 <currentControl+0x344>)
 800e3d2:	ed93 7a00 	vldr	s14, [r3]
 800e3d6:	4b45      	ldr	r3, [pc, #276]	; (800e4ec <currentControl+0x32c>)
 800e3d8:	edd3 7a00 	vldr	s15, [r3]
 800e3dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3e0:	4b4c      	ldr	r3, [pc, #304]	; (800e514 <currentControl+0x354>)
 800e3e2:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 800e3e6:	4b4a      	ldr	r3, [pc, #296]	; (800e510 <currentControl+0x350>)
 800e3e8:	ed93 7a00 	vldr	s14, [r3]
 800e3ec:	4b3e      	ldr	r3, [pc, #248]	; (800e4e8 <currentControl+0x328>)
 800e3ee:	edd3 7a00 	vldr	s15, [r3]
 800e3f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3f6:	4b48      	ldr	r3, [pc, #288]	; (800e518 <currentControl+0x358>)
 800e3f8:	edc3 7a00 	vstr	s15, [r3]


		// integral
		Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 800e3fc:	4b45      	ldr	r3, [pc, #276]	; (800e514 <currentControl+0x354>)
 800e3fe:	ed93 7a00 	vldr	s14, [r3]
 800e402:	4b46      	ldr	r3, [pc, #280]	; (800e51c <currentControl+0x35c>)
 800e404:	edd3 7a00 	vldr	s15, [r3]
 800e408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e40c:	4b44      	ldr	r3, [pc, #272]	; (800e520 <currentControl+0x360>)
 800e40e:	edc3 7a00 	vstr	s15, [r3]
		if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 800e412:	4b43      	ldr	r3, [pc, #268]	; (800e520 <currentControl+0x360>)
 800e414:	edd3 7a00 	vldr	s15, [r3]
 800e418:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e524 <currentControl+0x364>
 800e41c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e424:	d503      	bpl.n	800e42e <currentControl+0x26e>
 800e426:	4b3e      	ldr	r3, [pc, #248]	; (800e520 <currentControl+0x360>)
 800e428:	4a3f      	ldr	r2, [pc, #252]	; (800e528 <currentControl+0x368>)
 800e42a:	601a      	str	r2, [r3, #0]
 800e42c:	e00c      	b.n	800e448 <currentControl+0x288>
		else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 800e42e:	4b3c      	ldr	r3, [pc, #240]	; (800e520 <currentControl+0x360>)
 800e430:	edd3 7a00 	vldr	s15, [r3]
 800e434:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800e52c <currentControl+0x36c>
 800e438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e440:	dd02      	ble.n	800e448 <currentControl+0x288>
 800e442:	4b37      	ldr	r3, [pc, #220]	; (800e520 <currentControl+0x360>)
 800e444:	4a3a      	ldr	r2, [pc, #232]	; (800e530 <currentControl+0x370>)
 800e446:	601a      	str	r2, [r3, #0]
		Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 800e448:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e534 <currentControl+0x374>
 800e44c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e450:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e454:	4b32      	ldr	r3, [pc, #200]	; (800e520 <currentControl+0x360>)
 800e456:	edd3 6a00 	vldr	s13, [r3]
 800e45a:	4b30      	ldr	r3, [pc, #192]	; (800e51c <currentControl+0x35c>)
 800e45c:	edd3 7a00 	vldr	s15, [r3]
 800e460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e468:	4b33      	ldr	r3, [pc, #204]	; (800e538 <currentControl+0x378>)
 800e46a:	edc3 7a00 	vstr	s15, [r3]
		Id_error_integ_temp2 = Id_error_integ_temp1;
 800e46e:	4b2c      	ldr	r3, [pc, #176]	; (800e520 <currentControl+0x360>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a2a      	ldr	r2, [pc, #168]	; (800e51c <currentControl+0x35c>)
 800e474:	6013      	str	r3, [r2, #0]

		Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 800e476:	4b28      	ldr	r3, [pc, #160]	; (800e518 <currentControl+0x358>)
 800e478:	ed93 7a00 	vldr	s14, [r3]
 800e47c:	4b2f      	ldr	r3, [pc, #188]	; (800e53c <currentControl+0x37c>)
 800e47e:	edd3 7a00 	vldr	s15, [r3]
 800e482:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e486:	4b2e      	ldr	r3, [pc, #184]	; (800e540 <currentControl+0x380>)
 800e488:	edc3 7a00 	vstr	s15, [r3]
		if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 800e48c:	4b2c      	ldr	r3, [pc, #176]	; (800e540 <currentControl+0x380>)
 800e48e:	edd3 7a00 	vldr	s15, [r3]
 800e492:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e524 <currentControl+0x364>
 800e496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49e:	d551      	bpl.n	800e544 <currentControl+0x384>
 800e4a0:	4b27      	ldr	r3, [pc, #156]	; (800e540 <currentControl+0x380>)
 800e4a2:	4a21      	ldr	r2, [pc, #132]	; (800e528 <currentControl+0x368>)
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	e05a      	b.n	800e55e <currentControl+0x39e>
 800e4a8:	54442d18 	.word	0x54442d18
 800e4ac:	401921fb 	.word	0x401921fb
 800e4b0:	54442d18 	.word	0x54442d18
 800e4b4:	400921fb 	.word	0x400921fb
 800e4b8:	40020400 	.word	0x40020400
 800e4bc:	200041e8 	.word	0x200041e8
 800e4c0:	200000f4 	.word	0x200000f4
 800e4c4:	40c90fdb 	.word	0x40c90fdb
 800e4c8:	200000f8 	.word	0x200000f8
 800e4cc:	3ea2f838 	.word	0x3ea2f838
 800e4d0:	459c4000 	.word	0x459c4000
 800e4d4:	08013740 	.word	0x08013740
 800e4d8:	20000034 	.word	0x20000034
 800e4dc:	44c6f195 	.word	0x44c6f195
 800e4e0:	200041e4 	.word	0x200041e4
 800e4e4:	20004194 	.word	0x20004194
 800e4e8:	200000d0 	.word	0x200000d0
 800e4ec:	200000cc 	.word	0x200000cc
 800e4f0:	200041e0 	.word	0x200041e0
 800e4f4:	40020000 	.word	0x40020000
 800e4f8:	200000c0 	.word	0x200000c0
 800e4fc:	20000010 	.word	0x20000010
 800e500:	200000c4 	.word	0x200000c4
 800e504:	20004230 	.word	0x20004230
 800e508:	20000014 	.word	0x20000014
 800e50c:	200000c8 	.word	0x200000c8
 800e510:	20004234 	.word	0x20004234
 800e514:	200000d4 	.word	0x200000d4
 800e518:	200000d8 	.word	0x200000d8
 800e51c:	200000e8 	.word	0x200000e8
 800e520:	200000e4 	.word	0x200000e4
 800e524:	c9742400 	.word	0xc9742400
 800e528:	c9742400 	.word	0xc9742400
 800e52c:	49742400 	.word	0x49742400
 800e530:	49742400 	.word	0x49742400
 800e534:	38d1b717 	.word	0x38d1b717
 800e538:	200000dc 	.word	0x200000dc
 800e53c:	200000f0 	.word	0x200000f0
 800e540:	200000ec 	.word	0x200000ec
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 800e544:	4b39      	ldr	r3, [pc, #228]	; (800e62c <currentControl+0x46c>)
 800e546:	edd3 7a00 	vldr	s15, [r3]
 800e54a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e630 <currentControl+0x470>
 800e54e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e556:	dd02      	ble.n	800e55e <currentControl+0x39e>
 800e558:	4b34      	ldr	r3, [pc, #208]	; (800e62c <currentControl+0x46c>)
 800e55a:	4a36      	ldr	r2, [pc, #216]	; (800e634 <currentControl+0x474>)
 800e55c:	601a      	str	r2, [r3, #0]
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 800e55e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e638 <currentControl+0x478>
 800e562:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e56a:	4b30      	ldr	r3, [pc, #192]	; (800e62c <currentControl+0x46c>)
 800e56c:	edd3 6a00 	vldr	s13, [r3]
 800e570:	4b32      	ldr	r3, [pc, #200]	; (800e63c <currentControl+0x47c>)
 800e572:	edd3 7a00 	vldr	s15, [r3]
 800e576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e57e:	4b30      	ldr	r3, [pc, #192]	; (800e640 <currentControl+0x480>)
 800e580:	edc3 7a00 	vstr	s15, [r3]
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
 800e584:	4b29      	ldr	r3, [pc, #164]	; (800e62c <currentControl+0x46c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a2c      	ldr	r2, [pc, #176]	; (800e63c <currentControl+0x47c>)
 800e58a:	6013      	str	r3, [r2, #0]


		Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 800e58c:	4b2d      	ldr	r3, [pc, #180]	; (800e644 <currentControl+0x484>)
 800e58e:	ed93 7a00 	vldr	s14, [r3]
 800e592:	4b2d      	ldr	r3, [pc, #180]	; (800e648 <currentControl+0x488>)
 800e594:	edd3 7a00 	vldr	s15, [r3]
 800e598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e59c:	4b2b      	ldr	r3, [pc, #172]	; (800e64c <currentControl+0x48c>)
 800e59e:	edd3 6a00 	vldr	s13, [r3]
 800e5a2:	4b2b      	ldr	r3, [pc, #172]	; (800e650 <currentControl+0x490>)
 800e5a4:	edd3 7a00 	vldr	s15, [r3]
 800e5a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5b0:	4b28      	ldr	r3, [pc, #160]	; (800e654 <currentControl+0x494>)
 800e5b2:	edc3 7a00 	vstr	s15, [r3]
		Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 800e5b6:	4b23      	ldr	r3, [pc, #140]	; (800e644 <currentControl+0x484>)
 800e5b8:	ed93 7a00 	vldr	s14, [r3]
 800e5bc:	4b26      	ldr	r3, [pc, #152]	; (800e658 <currentControl+0x498>)
 800e5be:	edd3 7a00 	vldr	s15, [r3]
 800e5c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5c6:	4b21      	ldr	r3, [pc, #132]	; (800e64c <currentControl+0x48c>)
 800e5c8:	edd3 6a00 	vldr	s13, [r3]
 800e5cc:	4b1c      	ldr	r3, [pc, #112]	; (800e640 <currentControl+0x480>)
 800e5ce:	edd3 7a00 	vldr	s15, [r3]
 800e5d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5da:	4b20      	ldr	r3, [pc, #128]	; (800e65c <currentControl+0x49c>)
 800e5dc:	edc3 7a00 	vstr	s15, [r3]


	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e5e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e5e4:	481e      	ldr	r0, [pc, #120]	; (800e660 <currentControl+0x4a0>)
 800e5e6:	f7fc fee5 	bl	800b3b4 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	setSVM_dq();
 800e5ea:	f001 fb8b 	bl	800fd04 <setSVM_dq>

#endif



	if(!forced_commute_enable)
 800e5ee:	4b1d      	ldr	r3, [pc, #116]	; (800e664 <currentControl+0x4a4>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <currentControl+0x43c>
	{
		requestEncoder();
 800e5f8:	f002 fa1e 	bl	8010a38 <requestEncoder>
	}


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 800e5fc:	4b1a      	ldr	r3, [pc, #104]	; (800e668 <currentControl+0x4a8>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	3301      	adds	r3, #1
 800e602:	4a19      	ldr	r2, [pc, #100]	; (800e668 <currentControl+0x4a8>)
 800e604:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 800e606:	4b18      	ldr	r3, [pc, #96]	; (800e668 <currentControl+0x4a8>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2b09      	cmp	r3, #9
 800e60c:	dd05      	ble.n	800e61a <currentControl+0x45a>
	{
		ASR_flg = 1;
 800e60e:	4b17      	ldr	r3, [pc, #92]	; (800e66c <currentControl+0x4ac>)
 800e610:	2201      	movs	r2, #1
 800e612:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 800e614:	4b14      	ldr	r3, [pc, #80]	; (800e668 <currentControl+0x4a8>)
 800e616:	2200      	movs	r2, #0
 800e618:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e61a:	2200      	movs	r2, #0
 800e61c:	2140      	movs	r1, #64	; 0x40
 800e61e:	4814      	ldr	r0, [pc, #80]	; (800e670 <currentControl+0x4b0>)
 800e620:	f7fc fee0 	bl	800b3e4 <HAL_GPIO_WritePin>

	return;
 800e624:	bf00      	nop
}
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd90      	pop	{r4, r7, pc}
 800e62c:	200000ec 	.word	0x200000ec
 800e630:	49742400 	.word	0x49742400
 800e634:	49742400 	.word	0x49742400
 800e638:	38d1b717 	.word	0x38d1b717
 800e63c:	200000f0 	.word	0x200000f0
 800e640:	200000e0 	.word	0x200000e0
 800e644:	20000008 	.word	0x20000008
 800e648:	200000d4 	.word	0x200000d4
 800e64c:	2000000c 	.word	0x2000000c
 800e650:	200000dc 	.word	0x200000dc
 800e654:	2000418c 	.word	0x2000418c
 800e658:	200000d8 	.word	0x200000d8
 800e65c:	20004190 	.word	0x20004190
 800e660:	40020000 	.word	0x40020000
 800e664:	200041e8 	.word	0x200041e8
 800e668:	2000011c 	.word	0x2000011c
 800e66c:	20000118 	.word	0x20000118
 800e670:	40020400 	.word	0x40020400

0800e674 <ACR_Reset>:



inline void ACR_Reset()
{
 800e674:	b480      	push	{r7}
 800e676:	af00      	add	r7, sp, #0

	Id_error_integ_temp1 = 0.0f;
 800e678:	4b14      	ldr	r3, [pc, #80]	; (800e6cc <ACR_Reset+0x58>)
 800e67a:	f04f 0200 	mov.w	r2, #0
 800e67e:	601a      	str	r2, [r3, #0]
	Id_error_integ_temp2 = 0.0f;
 800e680:	4b13      	ldr	r3, [pc, #76]	; (800e6d0 <ACR_Reset+0x5c>)
 800e682:	f04f 0200 	mov.w	r2, #0
 800e686:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp1 = 0.0f;
 800e688:	4b12      	ldr	r3, [pc, #72]	; (800e6d4 <ACR_Reset+0x60>)
 800e68a:	f04f 0200 	mov.w	r2, #0
 800e68e:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp2 = 0.0f;
 800e690:	4b11      	ldr	r3, [pc, #68]	; (800e6d8 <ACR_Reset+0x64>)
 800e692:	f04f 0200 	mov.w	r2, #0
 800e696:	601a      	str	r2, [r3, #0]


	Id = Id_ref = 0.0f;
 800e698:	f04f 0300 	mov.w	r3, #0
 800e69c:	4a0f      	ldr	r2, [pc, #60]	; (800e6dc <ACR_Reset+0x68>)
 800e69e:	6013      	str	r3, [r2, #0]
 800e6a0:	4a0f      	ldr	r2, [pc, #60]	; (800e6e0 <ACR_Reset+0x6c>)
 800e6a2:	6013      	str	r3, [r2, #0]
	Iq = Iq_ref = 0.0f;
 800e6a4:	f04f 0300 	mov.w	r3, #0
 800e6a8:	4a0e      	ldr	r2, [pc, #56]	; (800e6e4 <ACR_Reset+0x70>)
 800e6aa:	6013      	str	r3, [r2, #0]
 800e6ac:	4a0e      	ldr	r2, [pc, #56]	; (800e6e8 <ACR_Reset+0x74>)
 800e6ae:	6013      	str	r3, [r2, #0]

	Vd_ref = 0.0f;
 800e6b0:	4b0e      	ldr	r3, [pc, #56]	; (800e6ec <ACR_Reset+0x78>)
 800e6b2:	f04f 0200 	mov.w	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]
	Vq_ref = 0.0f;
 800e6b8:	4b0d      	ldr	r3, [pc, #52]	; (800e6f0 <ACR_Reset+0x7c>)
 800e6ba:	f04f 0200 	mov.w	r2, #0
 800e6be:	601a      	str	r2, [r3, #0]

}
 800e6c0:	bf00      	nop
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	200000e4 	.word	0x200000e4
 800e6d0:	200000e8 	.word	0x200000e8
 800e6d4:	200000ec 	.word	0x200000ec
 800e6d8:	200000f0 	.word	0x200000f0
 800e6dc:	200000c4 	.word	0x200000c4
 800e6e0:	200000cc 	.word	0x200000cc
 800e6e4:	200000c8 	.word	0x200000c8
 800e6e8:	200000d0 	.word	0x200000d0
 800e6ec:	2000418c 	.word	0x2000418c
 800e6f0:	20004190 	.word	0x20004190

0800e6f4 <ASR_Start>:
float omega_error_integ_temp2 = 0.0f;



void ASR_Start()
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	af00      	add	r7, sp, #0

	ASR_enable = 1;
 800e6f8:	4b03      	ldr	r3, [pc, #12]	; (800e708 <ASR_Start+0x14>)
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	701a      	strb	r2, [r3, #0]
	ASR_Reset();
 800e6fe:	f000 f9d1 	bl	800eaa4 <ASR_Reset>

}
 800e702:	bf00      	nop
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	200000fc 	.word	0x200000fc
 800e70c:	00000000 	.word	0x00000000

0800e710 <speedControl>:
}



inline void speedControl()
{
 800e710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e714:	af00      	add	r7, sp, #0



	  if(ASR_steps <= 0)
 800e716:	4b86      	ldr	r3, [pc, #536]	; (800e930 <speedControl+0x220>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	dc04      	bgt.n	800e728 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 800e71e:	4b85      	ldr	r3, [pc, #532]	; (800e934 <speedControl+0x224>)
 800e720:	f04f 0200 	mov.w	r2, #0
 800e724:	601a      	str	r2, [r3, #0]
 800e726:	e00a      	b.n	800e73e <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = theta - p_theta;
 800e728:	4b83      	ldr	r3, [pc, #524]	; (800e938 <speedControl+0x228>)
 800e72a:	ed93 7a00 	vldr	s14, [r3]
 800e72e:	4b83      	ldr	r3, [pc, #524]	; (800e93c <speedControl+0x22c>)
 800e730:	edd3 7a00 	vldr	s15, [r3]
 800e734:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e738:	4b7e      	ldr	r3, [pc, #504]	; (800e934 <speedControl+0x224>)
 800e73a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 800e73e:	4b7c      	ldr	r3, [pc, #496]	; (800e930 <speedControl+0x220>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3301      	adds	r3, #1
 800e744:	4a7a      	ldr	r2, [pc, #488]	; (800e930 <speedControl+0x220>)
 800e746:	6013      	str	r3, [r2, #0]

	  p_theta = theta;
 800e748:	4b7b      	ldr	r3, [pc, #492]	; (800e938 <speedControl+0x228>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a7b      	ldr	r2, [pc, #492]	; (800e93c <speedControl+0x22c>)
 800e74e:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 800e750:	4b78      	ldr	r3, [pc, #480]	; (800e934 <speedControl+0x224>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4618      	mov	r0, r3
 800e756:	f7f9 fe27 	bl	80083a8 <__aeabi_f2d>
 800e75a:	a36f      	add	r3, pc, #444	; (adr r3, 800e918 <speedControl+0x208>)
 800e75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e760:	f7fa f8ec 	bl	800893c <__aeabi_dcmplt>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d013      	beq.n	800e792 <speedControl+0x82>
 800e76a:	4b72      	ldr	r3, [pc, #456]	; (800e934 <speedControl+0x224>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f9 fe1a 	bl	80083a8 <__aeabi_f2d>
 800e774:	a36a      	add	r3, pc, #424	; (adr r3, 800e920 <speedControl+0x210>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f9 fcb7 	bl	80080ec <__adddf3>
 800e77e:	4603      	mov	r3, r0
 800e780:	460c      	mov	r4, r1
 800e782:	4618      	mov	r0, r3
 800e784:	4621      	mov	r1, r4
 800e786:	f7fa f929 	bl	80089dc <__aeabi_d2f>
 800e78a:	4602      	mov	r2, r0
 800e78c:	4b69      	ldr	r3, [pc, #420]	; (800e934 <speedControl+0x224>)
 800e78e:	601a      	str	r2, [r3, #0]
 800e790:	e01f      	b.n	800e7d2 <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 800e792:	4b68      	ldr	r3, [pc, #416]	; (800e934 <speedControl+0x224>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4618      	mov	r0, r3
 800e798:	f7f9 fe06 	bl	80083a8 <__aeabi_f2d>
 800e79c:	a362      	add	r3, pc, #392	; (adr r3, 800e928 <speedControl+0x218>)
 800e79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a2:	f7fa f8e9 	bl	8008978 <__aeabi_dcmpgt>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d012      	beq.n	800e7d2 <speedControl+0xc2>
 800e7ac:	4b61      	ldr	r3, [pc, #388]	; (800e934 <speedControl+0x224>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f9 fdf9 	bl	80083a8 <__aeabi_f2d>
 800e7b6:	a35a      	add	r3, pc, #360	; (adr r3, 800e920 <speedControl+0x210>)
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	f7f9 fc94 	bl	80080e8 <__aeabi_dsub>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	f7fa f908 	bl	80089dc <__aeabi_d2f>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	4b59      	ldr	r3, [pc, #356]	; (800e934 <speedControl+0x224>)
 800e7d0:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 800e7d2:	4b5b      	ldr	r3, [pc, #364]	; (800e940 <speedControl+0x230>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7f9 fde6 	bl	80083a8 <__aeabi_f2d>
 800e7dc:	f04f 0200 	mov.w	r2, #0
 800e7e0:	4b58      	ldr	r3, [pc, #352]	; (800e944 <speedControl+0x234>)
 800e7e2:	f7f9 fe39 	bl	8008458 <__aeabi_dmul>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	4625      	mov	r5, r4
 800e7ec:	461c      	mov	r4, r3
 800e7ee:	4b51      	ldr	r3, [pc, #324]	; (800e934 <speedControl+0x224>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7f9 fdd8 	bl	80083a8 <__aeabi_f2d>
 800e7f8:	f04f 0200 	mov.w	r2, #0
 800e7fc:	4b51      	ldr	r3, [pc, #324]	; (800e944 <speedControl+0x234>)
 800e7fe:	f7f9 fe2b 	bl	8008458 <__aeabi_dmul>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4690      	mov	r8, r2
 800e808:	4699      	mov	r9, r3
 800e80a:	4b4f      	ldr	r3, [pc, #316]	; (800e948 <speedControl+0x238>)
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7f9 fdcb 	bl	80083a8 <__aeabi_f2d>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4640      	mov	r0, r8
 800e818:	4649      	mov	r1, r9
 800e81a:	f7f9 ff47 	bl	80086ac <__aeabi_ddiv>
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	4620      	mov	r0, r4
 800e824:	4629      	mov	r1, r5
 800e826:	f7f9 fc61 	bl	80080ec <__adddf3>
 800e82a:	4603      	mov	r3, r0
 800e82c:	460c      	mov	r4, r1
 800e82e:	4618      	mov	r0, r3
 800e830:	4621      	mov	r1, r4
 800e832:	f7fa f8d3 	bl	80089dc <__aeabi_d2f>
 800e836:	4602      	mov	r2, r0
 800e838:	4b41      	ldr	r3, [pc, #260]	; (800e940 <speedControl+0x230>)
 800e83a:	601a      	str	r2, [r3, #0]


	  if(ASR_enable)
 800e83c:	4b43      	ldr	r3, [pc, #268]	; (800e94c <speedControl+0x23c>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	b2db      	uxtb	r3, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 810b 	beq.w	800ea5e <speedControl+0x34e>
	  {

		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 800e848:	4b41      	ldr	r3, [pc, #260]	; (800e950 <speedControl+0x240>)
 800e84a:	edd3 7a00 	vldr	s15, [r3]
 800e84e:	eeb1 7a67 	vneg.f32	s14, s15
 800e852:	4b40      	ldr	r3, [pc, #256]	; (800e954 <speedControl+0x244>)
 800e854:	edd3 7a00 	vldr	s15, [r3]
 800e858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e860:	dd08      	ble.n	800e874 <speedControl+0x164>
 800e862:	4b3b      	ldr	r3, [pc, #236]	; (800e950 <speedControl+0x240>)
 800e864:	edd3 7a00 	vldr	s15, [r3]
 800e868:	eef1 7a67 	vneg.f32	s15, s15
 800e86c:	4b3a      	ldr	r3, [pc, #232]	; (800e958 <speedControl+0x248>)
 800e86e:	edc3 7a00 	vstr	s15, [r3]
 800e872:	e013      	b.n	800e89c <speedControl+0x18c>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 800e874:	4b37      	ldr	r3, [pc, #220]	; (800e954 <speedControl+0x244>)
 800e876:	ed93 7a00 	vldr	s14, [r3]
 800e87a:	4b35      	ldr	r3, [pc, #212]	; (800e950 <speedControl+0x240>)
 800e87c:	edd3 7a00 	vldr	s15, [r3]
 800e880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e888:	dd04      	ble.n	800e894 <speedControl+0x184>
 800e88a:	4b31      	ldr	r3, [pc, #196]	; (800e950 <speedControl+0x240>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a32      	ldr	r2, [pc, #200]	; (800e958 <speedControl+0x248>)
 800e890:	6013      	str	r3, [r2, #0]
 800e892:	e003      	b.n	800e89c <speedControl+0x18c>
		  else								_omega_ref = omega_ref;
 800e894:	4b2f      	ldr	r3, [pc, #188]	; (800e954 <speedControl+0x244>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a2f      	ldr	r2, [pc, #188]	; (800e958 <speedControl+0x248>)
 800e89a:	6013      	str	r3, [r2, #0]

		  omega_error = _omega_ref - omega;
 800e89c:	4b2e      	ldr	r3, [pc, #184]	; (800e958 <speedControl+0x248>)
 800e89e:	ed93 7a00 	vldr	s14, [r3]
 800e8a2:	4b27      	ldr	r3, [pc, #156]	; (800e940 <speedControl+0x230>)
 800e8a4:	edd3 7a00 	vldr	s15, [r3]
 800e8a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8ac:	4b2b      	ldr	r3, [pc, #172]	; (800e95c <speedControl+0x24c>)
 800e8ae:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 800e8b2:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <speedControl+0x24c>)
 800e8b4:	ed93 7a00 	vldr	s14, [r3]
 800e8b8:	4b29      	ldr	r3, [pc, #164]	; (800e960 <speedControl+0x250>)
 800e8ba:	edd3 7a00 	vldr	s15, [r3]
 800e8be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8c2:	4b28      	ldr	r3, [pc, #160]	; (800e964 <speedControl+0x254>)
 800e8c4:	edc3 7a00 	vstr	s15, [r3]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 800e8c8:	4b26      	ldr	r3, [pc, #152]	; (800e964 <speedControl+0x254>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7f9 fd6b 	bl	80083a8 <__aeabi_f2d>
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	460d      	mov	r5, r1
 800e8d6:	4b1c      	ldr	r3, [pc, #112]	; (800e948 <speedControl+0x238>)
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7f9 fd65 	bl	80083a8 <__aeabi_f2d>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	f04f 0000 	mov.w	r0, #0
 800e8e6:	4920      	ldr	r1, [pc, #128]	; (800e968 <speedControl+0x258>)
 800e8e8:	f7f9 fee0 	bl	80086ac <__aeabi_ddiv>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	4629      	mov	r1, r5
 800e8f4:	f7fa f822 	bl	800893c <__aeabi_dcmplt>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d038      	beq.n	800e970 <speedControl+0x260>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 800e8fe:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800e96c <speedControl+0x25c>
 800e902:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 800e906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e90a:	4b16      	ldr	r3, [pc, #88]	; (800e964 <speedControl+0x254>)
 800e90c:	edc3 7a00 	vstr	s15, [r3]
 800e910:	e052      	b.n	800e9b8 <speedControl+0x2a8>
 800e912:	bf00      	nop
 800e914:	f3af 8000 	nop.w
 800e918:	54442d18 	.word	0x54442d18
 800e91c:	c00921fb 	.word	0xc00921fb
 800e920:	54442d18 	.word	0x54442d18
 800e924:	401921fb 	.word	0x401921fb
 800e928:	54442d18 	.word	0x54442d18
 800e92c:	400921fb 	.word	0x400921fb
 800e930:	20000114 	.word	0x20000114
 800e934:	20004238 	.word	0x20004238
 800e938:	200041dc 	.word	0x200041dc
 800e93c:	20000124 	.word	0x20000124
 800e940:	20000120 	.word	0x20000120
 800e944:	3fe00000 	.word	0x3fe00000
 800e948:	3a83126f 	.word	0x3a83126f
 800e94c:	200000fc 	.word	0x200000fc
 800e950:	20000020 	.word	0x20000020
 800e954:	20000100 	.word	0x20000100
 800e958:	2000423c 	.word	0x2000423c
 800e95c:	20000104 	.word	0x20000104
 800e960:	2000012c 	.word	0x2000012c
 800e964:	20000128 	.word	0x20000128
 800e968:	c0180000 	.word	0xc0180000
 800e96c:	3a83126f 	.word	0x3a83126f
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 800e970:	4b3f      	ldr	r3, [pc, #252]	; (800ea70 <speedControl+0x360>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4618      	mov	r0, r3
 800e976:	f7f9 fd17 	bl	80083a8 <__aeabi_f2d>
 800e97a:	4604      	mov	r4, r0
 800e97c:	460d      	mov	r5, r1
 800e97e:	4b3d      	ldr	r3, [pc, #244]	; (800ea74 <speedControl+0x364>)
 800e980:	4618      	mov	r0, r3
 800e982:	f7f9 fd11 	bl	80083a8 <__aeabi_f2d>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	f04f 0000 	mov.w	r0, #0
 800e98e:	493a      	ldr	r1, [pc, #232]	; (800ea78 <speedControl+0x368>)
 800e990:	f7f9 fe8c 	bl	80086ac <__aeabi_ddiv>
 800e994:	4602      	mov	r2, r0
 800e996:	460b      	mov	r3, r1
 800e998:	4620      	mov	r0, r4
 800e99a:	4629      	mov	r1, r5
 800e99c:	f7f9 ffec 	bl	8008978 <__aeabi_dcmpgt>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d008      	beq.n	800e9b8 <speedControl+0x2a8>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 800e9a6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ea7c <speedControl+0x36c>
 800e9aa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e9ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9b2:	4b2f      	ldr	r3, [pc, #188]	; (800ea70 <speedControl+0x360>)
 800e9b4:	edc3 7a00 	vstr	s15, [r3]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 800e9b8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ea7c <speedControl+0x36c>
 800e9bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e9c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9c4:	4b2a      	ldr	r3, [pc, #168]	; (800ea70 <speedControl+0x360>)
 800e9c6:	edd3 6a00 	vldr	s13, [r3]
 800e9ca:	4b2d      	ldr	r3, [pc, #180]	; (800ea80 <speedControl+0x370>)
 800e9cc:	edd3 7a00 	vldr	s15, [r3]
 800e9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9d8:	4b2a      	ldr	r3, [pc, #168]	; (800ea84 <speedControl+0x374>)
 800e9da:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 800e9de:	4b24      	ldr	r3, [pc, #144]	; (800ea70 <speedControl+0x360>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	4a27      	ldr	r2, [pc, #156]	; (800ea80 <speedControl+0x370>)
 800e9e4:	6013      	str	r3, [r2, #0]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 800e9e6:	4b28      	ldr	r3, [pc, #160]	; (800ea88 <speedControl+0x378>)
 800e9e8:	ed93 7a00 	vldr	s14, [r3]
 800e9ec:	4b27      	ldr	r3, [pc, #156]	; (800ea8c <speedControl+0x37c>)
 800e9ee:	edd3 7a00 	vldr	s15, [r3]
 800e9f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9f6:	4b26      	ldr	r3, [pc, #152]	; (800ea90 <speedControl+0x380>)
 800e9f8:	edd3 6a00 	vldr	s13, [r3]
 800e9fc:	4b21      	ldr	r3, [pc, #132]	; (800ea84 <speedControl+0x374>)
 800e9fe:	edd3 7a00 	vldr	s15, [r3]
 800ea02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea0a:	4b22      	ldr	r3, [pc, #136]	; (800ea94 <speedControl+0x384>)
 800ea0c:	edc3 7a00 	vstr	s15, [r3]

		  Id_ref = 0.0f;
 800ea10:	4b21      	ldr	r3, [pc, #132]	; (800ea98 <speedControl+0x388>)
 800ea12:	f04f 0200 	mov.w	r2, #0
 800ea16:	601a      	str	r2, [r3, #0]
		  Iq_ref = KT * torque_ref + coggingIq;
 800ea18:	4b1e      	ldr	r3, [pc, #120]	; (800ea94 <speedControl+0x384>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7f9 fcc3 	bl	80083a8 <__aeabi_f2d>
 800ea22:	a311      	add	r3, pc, #68	; (adr r3, 800ea68 <speedControl+0x358>)
 800ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea28:	f7f9 fd16 	bl	8008458 <__aeabi_dmul>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	460c      	mov	r4, r1
 800ea30:	4625      	mov	r5, r4
 800ea32:	461c      	mov	r4, r3
 800ea34:	4b19      	ldr	r3, [pc, #100]	; (800ea9c <speedControl+0x38c>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7f9 fcb5 	bl	80083a8 <__aeabi_f2d>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4620      	mov	r0, r4
 800ea44:	4629      	mov	r1, r5
 800ea46:	f7f9 fb51 	bl	80080ec <__adddf3>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	460c      	mov	r4, r1
 800ea4e:	4618      	mov	r0, r3
 800ea50:	4621      	mov	r1, r4
 800ea52:	f7f9 ffc3 	bl	80089dc <__aeabi_d2f>
 800ea56:	4602      	mov	r2, r0
 800ea58:	4b11      	ldr	r3, [pc, #68]	; (800eaa0 <speedControl+0x390>)
 800ea5a:	601a      	str	r2, [r3, #0]
	  }




	return;
 800ea5c:	bf00      	nop
 800ea5e:	bf00      	nop
}
 800ea60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ea64:	f3af 8000 	nop.w
 800ea68:	8b6ec798 	.word	0x8b6ec798
 800ea6c:	3fd22b62 	.word	0x3fd22b62
 800ea70:	20000128 	.word	0x20000128
 800ea74:	3a83126f 	.word	0x3a83126f
 800ea78:	40180000 	.word	0x40180000
 800ea7c:	3a83126f 	.word	0x3a83126f
 800ea80:	2000012c 	.word	0x2000012c
 800ea84:	20000108 	.word	0x20000108
 800ea88:	20000018 	.word	0x20000018
 800ea8c:	20000104 	.word	0x20000104
 800ea90:	2000001c 	.word	0x2000001c
 800ea94:	2000010c 	.word	0x2000010c
 800ea98:	200000c4 	.word	0x200000c4
 800ea9c:	20000110 	.word	0x20000110
 800eaa0:	200000c8 	.word	0x200000c8

0800eaa4 <ASR_Reset>:



inline void ASR_Reset()
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 800eaa8:	4b0c      	ldr	r3, [pc, #48]	; (800eadc <ASR_Reset+0x38>)
 800eaaa:	f04f 0200 	mov.w	r2, #0
 800eaae:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 800eab0:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <ASR_Reset+0x3c>)
 800eab2:	f04f 0200 	mov.w	r2, #0
 800eab6:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 800eab8:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <ASR_Reset+0x40>)
 800eaba:	f04f 0200 	mov.w	r2, #0
 800eabe:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 800eac0:	f04f 0300 	mov.w	r3, #0
 800eac4:	4a08      	ldr	r2, [pc, #32]	; (800eae8 <ASR_Reset+0x44>)
 800eac6:	6013      	str	r3, [r2, #0]
 800eac8:	4a08      	ldr	r2, [pc, #32]	; (800eaec <ASR_Reset+0x48>)
 800eaca:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 800eacc:	4b08      	ldr	r3, [pc, #32]	; (800eaf0 <ASR_Reset+0x4c>)
 800eace:	2200      	movs	r2, #0
 800ead0:	601a      	str	r2, [r3, #0]

}
 800ead2:	bf00      	nop
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	20000124 	.word	0x20000124
 800eae0:	20000128 	.word	0x20000128
 800eae4:	2000012c 	.word	0x2000012c
 800eae8:	20000100 	.word	0x20000100
 800eaec:	20000120 	.word	0x20000120
 800eaf0:	20000114 	.word	0x20000114

0800eaf4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800eafa:	463b      	mov	r3, r7
 800eafc:	2200      	movs	r2, #0
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	605a      	str	r2, [r3, #4]
 800eb02:	609a      	str	r2, [r3, #8]
 800eb04:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800eb06:	4b22      	ldr	r3, [pc, #136]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb08:	4a22      	ldr	r2, [pc, #136]	; (800eb94 <MX_ADC1_Init+0xa0>)
 800eb0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800eb0c:	4b20      	ldr	r3, [pc, #128]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eb12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800eb14:	4b1e      	ldr	r3, [pc, #120]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800eb1a:	4b1d      	ldr	r3, [pc, #116]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800eb20:	4b1b      	ldr	r3, [pc, #108]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eb26:	4b1a      	ldr	r3, [pc, #104]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800eb2e:	4b18      	ldr	r3, [pc, #96]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800eb34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800eb36:	4b16      	ldr	r3, [pc, #88]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb38:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800eb3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800eb3e:	4b14      	ldr	r3, [pc, #80]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800eb44:	4b12      	ldr	r3, [pc, #72]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb46:	2201      	movs	r2, #1
 800eb48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800eb4a:	4b11      	ldr	r3, [pc, #68]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800eb52:	4b0f      	ldr	r3, [pc, #60]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb54:	2201      	movs	r2, #1
 800eb56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800eb58:	480d      	ldr	r0, [pc, #52]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb5a:	f7fa f9a3 	bl	8008ea4 <HAL_ADC_Init>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800eb64:	f001 f8c6 	bl	800fcf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800eb70:	2301      	movs	r3, #1
 800eb72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eb74:	463b      	mov	r3, r7
 800eb76:	4619      	mov	r1, r3
 800eb78:	4805      	ldr	r0, [pc, #20]	; (800eb90 <MX_ADC1_Init+0x9c>)
 800eb7a:	f7fa fae7 	bl	800914c <HAL_ADC_ConfigChannel>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d001      	beq.n	800eb88 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800eb84:	f001 f8b6 	bl	800fcf4 <Error_Handler>
  }

}
 800eb88:	bf00      	nop
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	200042e8 	.word	0x200042e8
 800eb94:	40012000 	.word	0x40012000

0800eb98 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800eb9e:	463b      	mov	r3, r7
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	605a      	str	r2, [r3, #4]
 800eba6:	609a      	str	r2, [r3, #8]
 800eba8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800ebaa:	4b22      	ldr	r3, [pc, #136]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebac:	4a22      	ldr	r2, [pc, #136]	; (800ec38 <MX_ADC2_Init+0xa0>)
 800ebae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ebb0:	4b20      	ldr	r3, [pc, #128]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ebb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ebb8:	4b1e      	ldr	r3, [pc, #120]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800ebbe:	4b1d      	ldr	r3, [pc, #116]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ebc4:	4b1b      	ldr	r3, [pc, #108]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ebca:	4b1a      	ldr	r3, [pc, #104]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800ebd2:	4b18      	ldr	r3, [pc, #96]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ebd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800ebda:	4b16      	ldr	r3, [pc, #88]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebdc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ebe0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ebe2:	4b14      	ldr	r3, [pc, #80]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800ebe8:	4b12      	ldr	r3, [pc, #72]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebea:	2201      	movs	r2, #1
 800ebec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800ebee:	4b11      	ldr	r3, [pc, #68]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ebf6:	4b0f      	ldr	r3, [pc, #60]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ebfc:	480d      	ldr	r0, [pc, #52]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ebfe:	f7fa f951 	bl	8008ea4 <HAL_ADC_Init>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d001      	beq.n	800ec0c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800ec08:	f001 f874 	bl	800fcf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ec0c:	2304      	movs	r3, #4
 800ec0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ec10:	2301      	movs	r3, #1
 800ec12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800ec14:	2301      	movs	r3, #1
 800ec16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ec18:	463b      	mov	r3, r7
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	4805      	ldr	r0, [pc, #20]	; (800ec34 <MX_ADC2_Init+0x9c>)
 800ec1e:	f7fa fa95 	bl	800914c <HAL_ADC_ConfigChannel>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800ec28:	f001 f864 	bl	800fcf4 <Error_Handler>
  }

}
 800ec2c:	bf00      	nop
 800ec2e:	3710      	adds	r7, #16
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	20004240 	.word	0x20004240
 800ec38:	40012100 	.word	0x40012100

0800ec3c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800ec42:	463b      	mov	r3, r7
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	605a      	str	r2, [r3, #4]
 800ec4a:	609a      	str	r2, [r3, #8]
 800ec4c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800ec4e:	4b22      	ldr	r3, [pc, #136]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec50:	4a22      	ldr	r2, [pc, #136]	; (800ecdc <MX_ADC3_Init+0xa0>)
 800ec52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ec54:	4b20      	ldr	r3, [pc, #128]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ec5a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800ec5c:	4b1e      	ldr	r3, [pc, #120]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800ec62:	4b1d      	ldr	r3, [pc, #116]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800ec68:	4b1b      	ldr	r3, [pc, #108]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800ec6e:	4b1a      	ldr	r3, [pc, #104]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800ec76:	4b18      	ldr	r3, [pc, #96]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ec7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800ec7e:	4b16      	ldr	r3, [pc, #88]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec80:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ec84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ec86:	4b14      	ldr	r3, [pc, #80]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800ec8c:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec8e:	2201      	movs	r2, #1
 800ec90:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800ec92:	4b11      	ldr	r3, [pc, #68]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec94:	2201      	movs	r2, #1
 800ec96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ec9a:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800eca0:	480d      	ldr	r0, [pc, #52]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800eca2:	f7fa f8ff 	bl	8008ea4 <HAL_ADC_Init>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d001      	beq.n	800ecb0 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800ecac:	f001 f822 	bl	800fcf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800ecbc:	463b      	mov	r3, r7
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	4805      	ldr	r0, [pc, #20]	; (800ecd8 <MX_ADC3_Init+0x9c>)
 800ecc2:	f7fa fa43 	bl	800914c <HAL_ADC_ConfigChannel>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d001      	beq.n	800ecd0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800eccc:	f001 f812 	bl	800fcf4 <Error_Handler>
  }

}
 800ecd0:	bf00      	nop
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	20004330 	.word	0x20004330
 800ecdc:	40012200 	.word	0x40012200

0800ece0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08e      	sub	sp, #56	; 0x38
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ece8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]
 800ecf0:	605a      	str	r2, [r3, #4]
 800ecf2:	609a      	str	r2, [r3, #8]
 800ecf4:	60da      	str	r2, [r3, #12]
 800ecf6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a9b      	ldr	r2, [pc, #620]	; (800ef6c <HAL_ADC_MspInit+0x28c>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d172      	bne.n	800ede8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ed02:	2300      	movs	r3, #0
 800ed04:	623b      	str	r3, [r7, #32]
 800ed06:	4b9a      	ldr	r3, [pc, #616]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed0a:	4a99      	ldr	r2, [pc, #612]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed10:	6453      	str	r3, [r2, #68]	; 0x44
 800ed12:	4b97      	ldr	r3, [pc, #604]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed1a:	623b      	str	r3, [r7, #32]
 800ed1c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed1e:	2300      	movs	r3, #0
 800ed20:	61fb      	str	r3, [r7, #28]
 800ed22:	4b93      	ldr	r3, [pc, #588]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed26:	4a92      	ldr	r2, [pc, #584]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed28:	f043 0304 	orr.w	r3, r3, #4
 800ed2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed2e:	4b90      	ldr	r3, [pc, #576]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed32:	f003 0304 	and.w	r3, r3, #4
 800ed36:	61fb      	str	r3, [r7, #28]
 800ed38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	61bb      	str	r3, [r7, #24]
 800ed3e:	4b8c      	ldr	r3, [pc, #560]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed42:	4a8b      	ldr	r2, [pc, #556]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed44:	f043 0301 	orr.w	r3, r3, #1
 800ed48:	6313      	str	r3, [r2, #48]	; 0x30
 800ed4a:	4b89      	ldr	r3, [pc, #548]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ed4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4e:	f003 0301 	and.w	r3, r3, #1
 800ed52:	61bb      	str	r3, [r7, #24]
 800ed54:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ed56:	2301      	movs	r3, #1
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed66:	4619      	mov	r1, r3
 800ed68:	4882      	ldr	r0, [pc, #520]	; (800ef74 <HAL_ADC_MspInit+0x294>)
 800ed6a:	f7fc f991 	bl	800b090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed72:	2303      	movs	r3, #3
 800ed74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed76:	2300      	movs	r3, #0
 800ed78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed7e:	4619      	mov	r1, r3
 800ed80:	487d      	ldr	r0, [pc, #500]	; (800ef78 <HAL_ADC_MspInit+0x298>)
 800ed82:	f7fc f985 	bl	800b090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800ed86:	4b7d      	ldr	r3, [pc, #500]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800ed88:	4a7d      	ldr	r2, [pc, #500]	; (800ef80 <HAL_ADC_MspInit+0x2a0>)
 800ed8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800ed8c:	4b7b      	ldr	r3, [pc, #492]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ed92:	4b7a      	ldr	r3, [pc, #488]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ed98:	4b78      	ldr	r3, [pc, #480]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ed9e:	4b77      	ldr	r3, [pc, #476]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800eda0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eda4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800eda6:	4b75      	ldr	r3, [pc, #468]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800eda8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800edae:	4b73      	ldr	r3, [pc, #460]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800edb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800edb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800edb6:	4b71      	ldr	r3, [pc, #452]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800edb8:	2200      	movs	r2, #0
 800edba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800edbc:	4b6f      	ldr	r3, [pc, #444]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800edbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800edc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800edc4:	4b6d      	ldr	r3, [pc, #436]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800edca:	486c      	ldr	r0, [pc, #432]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800edcc:	f7fb fae4 	bl	800a398 <HAL_DMA_Init>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800edd6:	f000 ff8d 	bl	800fcf4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4a67      	ldr	r2, [pc, #412]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800edde:	639a      	str	r2, [r3, #56]	; 0x38
 800ede0:	4a66      	ldr	r2, [pc, #408]	; (800ef7c <HAL_ADC_MspInit+0x29c>)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800ede6:	e0bc      	b.n	800ef62 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a65      	ldr	r2, [pc, #404]	; (800ef84 <HAL_ADC_MspInit+0x2a4>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d159      	bne.n	800eea6 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800edf2:	2300      	movs	r3, #0
 800edf4:	617b      	str	r3, [r7, #20]
 800edf6:	4b5e      	ldr	r3, [pc, #376]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800edf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edfa:	4a5d      	ldr	r2, [pc, #372]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800edfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee00:	6453      	str	r3, [r2, #68]	; 0x44
 800ee02:	4b5b      	ldr	r3, [pc, #364]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ee04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee0e:	2300      	movs	r3, #0
 800ee10:	613b      	str	r3, [r7, #16]
 800ee12:	4b57      	ldr	r3, [pc, #348]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ee14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee16:	4a56      	ldr	r2, [pc, #344]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ee18:	f043 0301 	orr.w	r3, r3, #1
 800ee1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ee1e:	4b54      	ldr	r3, [pc, #336]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800ee20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	613b      	str	r3, [r7, #16]
 800ee28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ee2a:	2310      	movs	r3, #16
 800ee2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee32:	2300      	movs	r3, #0
 800ee34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	484e      	ldr	r0, [pc, #312]	; (800ef78 <HAL_ADC_MspInit+0x298>)
 800ee3e:	f7fc f927 	bl	800b090 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800ee42:	4b51      	ldr	r3, [pc, #324]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee44:	4a51      	ldr	r2, [pc, #324]	; (800ef8c <HAL_ADC_MspInit+0x2ac>)
 800ee46:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800ee48:	4b4f      	ldr	r3, [pc, #316]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ee4e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ee50:	4b4d      	ldr	r3, [pc, #308]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ee56:	4b4c      	ldr	r3, [pc, #304]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ee5c:	4b4a      	ldr	r3, [pc, #296]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee62:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ee64:	4b48      	ldr	r3, [pc, #288]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee6a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ee6c:	4b46      	ldr	r3, [pc, #280]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ee72:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800ee74:	4b44      	ldr	r3, [pc, #272]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee76:	2200      	movs	r2, #0
 800ee78:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800ee7a:	4b43      	ldr	r3, [pc, #268]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ee80:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ee82:	4b41      	ldr	r3, [pc, #260]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800ee88:	483f      	ldr	r0, [pc, #252]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee8a:	f7fb fa85 	bl	800a398 <HAL_DMA_Init>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d001      	beq.n	800ee98 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800ee94:	f000 ff2e 	bl	800fcf4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a3b      	ldr	r2, [pc, #236]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800ee9c:	639a      	str	r2, [r3, #56]	; 0x38
 800ee9e:	4a3a      	ldr	r2, [pc, #232]	; (800ef88 <HAL_ADC_MspInit+0x2a8>)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800eea4:	e05d      	b.n	800ef62 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a39      	ldr	r2, [pc, #228]	; (800ef90 <HAL_ADC_MspInit+0x2b0>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d158      	bne.n	800ef62 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	4b2e      	ldr	r3, [pc, #184]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800eeb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeb8:	4a2d      	ldr	r2, [pc, #180]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800eeba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eebe:	6453      	str	r3, [r2, #68]	; 0x44
 800eec0:	4b2b      	ldr	r3, [pc, #172]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800eec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eec8:	60fb      	str	r3, [r7, #12]
 800eeca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eecc:	2300      	movs	r3, #0
 800eece:	60bb      	str	r3, [r7, #8]
 800eed0:	4b27      	ldr	r3, [pc, #156]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800eed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed4:	4a26      	ldr	r2, [pc, #152]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800eed6:	f043 0301 	orr.w	r3, r3, #1
 800eeda:	6313      	str	r3, [r2, #48]	; 0x30
 800eedc:	4b24      	ldr	r3, [pc, #144]	; (800ef70 <HAL_ADC_MspInit+0x290>)
 800eede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	60bb      	str	r3, [r7, #8]
 800eee6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800eee8:	2302      	movs	r3, #2
 800eeea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800eeec:	2303      	movs	r3, #3
 800eeee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef0:	2300      	movs	r3, #0
 800eef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eef8:	4619      	mov	r1, r3
 800eefa:	481f      	ldr	r0, [pc, #124]	; (800ef78 <HAL_ADC_MspInit+0x298>)
 800eefc:	f7fc f8c8 	bl	800b090 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800ef00:	4b24      	ldr	r3, [pc, #144]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef02:	4a25      	ldr	r2, [pc, #148]	; (800ef98 <HAL_ADC_MspInit+0x2b8>)
 800ef04:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800ef06:	4b23      	ldr	r3, [pc, #140]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ef0c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ef0e:	4b21      	ldr	r3, [pc, #132]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef10:	2200      	movs	r2, #0
 800ef12:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ef14:	4b1f      	ldr	r3, [pc, #124]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef16:	2200      	movs	r2, #0
 800ef18:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800ef1a:	4b1e      	ldr	r3, [pc, #120]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ef20:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ef22:	4b1c      	ldr	r3, [pc, #112]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef28:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ef2a:	4b1a      	ldr	r3, [pc, #104]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ef30:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800ef32:	4b18      	ldr	r3, [pc, #96]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800ef38:	4b16      	ldr	r3, [pc, #88]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ef3e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ef40:	4b14      	ldr	r3, [pc, #80]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef42:	2200      	movs	r2, #0
 800ef44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800ef46:	4813      	ldr	r0, [pc, #76]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef48:	f7fb fa26 	bl	800a398 <HAL_DMA_Init>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d001      	beq.n	800ef56 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800ef52:	f000 fecf 	bl	800fcf4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a0e      	ldr	r2, [pc, #56]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef5a:	639a      	str	r2, [r3, #56]	; 0x38
 800ef5c:	4a0d      	ldr	r2, [pc, #52]	; (800ef94 <HAL_ADC_MspInit+0x2b4>)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ef62:	bf00      	nop
 800ef64:	3738      	adds	r7, #56	; 0x38
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	40012000 	.word	0x40012000
 800ef70:	40023800 	.word	0x40023800
 800ef74:	40020800 	.word	0x40020800
 800ef78:	40020000 	.word	0x40020000
 800ef7c:	20004378 	.word	0x20004378
 800ef80:	40026410 	.word	0x40026410
 800ef84:	40012100 	.word	0x40012100
 800ef88:	200043d8 	.word	0x200043d8
 800ef8c:	40026440 	.word	0x40026440
 800ef90:	40012200 	.word	0x40012200
 800ef94:	20004288 	.word	0x20004288
 800ef98:	40026428 	.word	0x40026428

0800ef9c <ADC_Init>:

/* USER CODE BEGIN 1 */


void ADC_Init(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	af00      	add	r7, sp, #0

	// ADC Starting


	HAL_ADC_Start_DMA(&hadc1, AD_Iu, 1);
 800efa0:	2201      	movs	r2, #1
 800efa2:	4908      	ldr	r1, [pc, #32]	; (800efc4 <ADC_Init+0x28>)
 800efa4:	4808      	ldr	r0, [pc, #32]	; (800efc8 <ADC_Init+0x2c>)
 800efa6:	f7f9 ffc1 	bl	8008f2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 800efaa:	2201      	movs	r2, #1
 800efac:	4907      	ldr	r1, [pc, #28]	; (800efcc <ADC_Init+0x30>)
 800efae:	4808      	ldr	r0, [pc, #32]	; (800efd0 <ADC_Init+0x34>)
 800efb0:	f7f9 ffbc 	bl	8008f2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 800efb4:	2201      	movs	r2, #1
 800efb6:	4907      	ldr	r1, [pc, #28]	; (800efd4 <ADC_Init+0x38>)
 800efb8:	4807      	ldr	r0, [pc, #28]	; (800efd8 <ADC_Init+0x3c>)
 800efba:	f7f9 ffb7 	bl	8008f2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
	HAL_ADC_Start_IT(&hadc2);
	HAL_ADC_Start_IT(&hadc3);
*/

}
 800efbe:	bf00      	nop
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	20000130 	.word	0x20000130
 800efc8:	200042e8 	.word	0x200042e8
 800efcc:	20000134 	.word	0x20000134
 800efd0:	20004240 	.word	0x20004240
 800efd4:	20000138 	.word	0x20000138
 800efd8:	20004330 	.word	0x20004330

0800efdc <get_current_dq>:



void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6178      	str	r0, [r7, #20]
 800efe4:	6139      	str	r1, [r7, #16]
 800efe6:	60fa      	str	r2, [r7, #12]
 800efe8:	ed87 0a02 	vstr	s0, [r7, #8]
 800efec:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iv[0] = HAL_ADC_GetValue(&hadc2);
	AD_Iw[0] = HAL_ADC_GetValue(&hadc3);
*/


	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_Iu, 1);
 800eff0:	2201      	movs	r2, #1
 800eff2:	49be      	ldr	r1, [pc, #760]	; (800f2ec <get_current_dq+0x310>)
 800eff4:	48be      	ldr	r0, [pc, #760]	; (800f2f0 <get_current_dq+0x314>)
 800eff6:	f7f9 ff99 	bl	8008f2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)AD_Iv, 1);
 800effa:	2201      	movs	r2, #1
 800effc:	49bd      	ldr	r1, [pc, #756]	; (800f2f4 <get_current_dq+0x318>)
 800effe:	48be      	ldr	r0, [pc, #760]	; (800f2f8 <get_current_dq+0x31c>)
 800f000:	f7f9 ff94 	bl	8008f2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)AD_Iw, 1);
 800f004:	2201      	movs	r2, #1
 800f006:	49bd      	ldr	r1, [pc, #756]	; (800f2fc <get_current_dq+0x320>)
 800f008:	48bd      	ldr	r0, [pc, #756]	; (800f300 <get_current_dq+0x324>)
 800f00a:	f7f9 ff8f 	bl	8008f2c <HAL_ADC_Start_DMA>

#endif

#if _MEDF_ENABLE_

	AD_Iu_buf[pos_MEDF_I] = (int32_t)AD_Iu[0];
 800f00e:	4bb7      	ldr	r3, [pc, #732]	; (800f2ec <get_current_dq+0x310>)
 800f010:	881b      	ldrh	r3, [r3, #0]
 800f012:	b29a      	uxth	r2, r3
 800f014:	4bbb      	ldr	r3, [pc, #748]	; (800f304 <get_current_dq+0x328>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4611      	mov	r1, r2
 800f01a:	4abb      	ldr	r2, [pc, #748]	; (800f308 <get_current_dq+0x32c>)
 800f01c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iv_buf[pos_MEDF_I] = (int32_t)AD_Iv[0];
 800f020:	4bb4      	ldr	r3, [pc, #720]	; (800f2f4 <get_current_dq+0x318>)
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	b29a      	uxth	r2, r3
 800f026:	4bb7      	ldr	r3, [pc, #732]	; (800f304 <get_current_dq+0x328>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4611      	mov	r1, r2
 800f02c:	4ab7      	ldr	r2, [pc, #732]	; (800f30c <get_current_dq+0x330>)
 800f02e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iw_buf[pos_MEDF_I] = (int32_t)AD_Iw[0];
 800f032:	4bb2      	ldr	r3, [pc, #712]	; (800f2fc <get_current_dq+0x320>)
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	b29a      	uxth	r2, r3
 800f038:	4bb2      	ldr	r3, [pc, #712]	; (800f304 <get_current_dq+0x328>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4611      	mov	r1, r2
 800f03e:	4ab4      	ldr	r2, [pc, #720]	; (800f310 <get_current_dq+0x334>)
 800f040:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


	pos_MEDF_I += 1;
 800f044:	4baf      	ldr	r3, [pc, #700]	; (800f304 <get_current_dq+0x328>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3301      	adds	r3, #1
 800f04a:	4aae      	ldr	r2, [pc, #696]	; (800f304 <get_current_dq+0x328>)
 800f04c:	6013      	str	r3, [r2, #0]
	if(pos_MEDF_I >= N_MEDF_I)
 800f04e:	4bad      	ldr	r3, [pc, #692]	; (800f304 <get_current_dq+0x328>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b02      	cmp	r3, #2
 800f054:	dd02      	ble.n	800f05c <get_current_dq+0x80>
	{
		pos_MEDF_I = 0;
 800f056:	4bab      	ldr	r3, [pc, #684]	; (800f304 <get_current_dq+0x328>)
 800f058:	2200      	movs	r2, #0
 800f05a:	601a      	str	r2, [r3, #0]
	}

	AD_Iu_MEDF = median3(AD_Iu_buf);
 800f05c:	48aa      	ldr	r0, [pc, #680]	; (800f308 <get_current_dq+0x32c>)
 800f05e:	f000 f979 	bl	800f354 <median3>
 800f062:	4602      	mov	r2, r0
 800f064:	4bab      	ldr	r3, [pc, #684]	; (800f314 <get_current_dq+0x338>)
 800f066:	601a      	str	r2, [r3, #0]
	AD_Iv_MEDF = median3(AD_Iv_buf);
 800f068:	48a8      	ldr	r0, [pc, #672]	; (800f30c <get_current_dq+0x330>)
 800f06a:	f000 f973 	bl	800f354 <median3>
 800f06e:	4602      	mov	r2, r0
 800f070:	4ba9      	ldr	r3, [pc, #676]	; (800f318 <get_current_dq+0x33c>)
 800f072:	601a      	str	r2, [r3, #0]
	AD_Iw_MEDF = median3(AD_Iw_buf);
 800f074:	48a6      	ldr	r0, [pc, #664]	; (800f310 <get_current_dq+0x334>)
 800f076:	f000 f96d 	bl	800f354 <median3>
 800f07a:	4602      	mov	r2, r0
 800f07c:	4ba7      	ldr	r3, [pc, #668]	; (800f31c <get_current_dq+0x340>)
 800f07e:	601a      	str	r2, [r3, #0]

	V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - V_Iu_offset;
 800f080:	4ba4      	ldr	r3, [pc, #656]	; (800f314 <get_current_dq+0x338>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	ee07 3a90 	vmov	s15, r3
 800f088:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f08c:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800f320 <get_current_dq+0x344>
 800f090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f098:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800f324 <get_current_dq+0x348>
 800f09c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f0a0:	4ba1      	ldr	r3, [pc, #644]	; (800f328 <get_current_dq+0x34c>)
 800f0a2:	edd3 7a00 	vldr	s15, [r3]
 800f0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0aa:	4ba0      	ldr	r3, [pc, #640]	; (800f32c <get_current_dq+0x350>)
 800f0ac:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - V_Iv_offset;
 800f0b0:	4b99      	ldr	r3, [pc, #612]	; (800f318 <get_current_dq+0x33c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	ee07 3a90 	vmov	s15, r3
 800f0b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f0bc:	eddf 7a98 	vldr	s15, [pc, #608]	; 800f320 <get_current_dq+0x344>
 800f0c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0c8:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800f324 <get_current_dq+0x348>
 800f0cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f0d0:	4b97      	ldr	r3, [pc, #604]	; (800f330 <get_current_dq+0x354>)
 800f0d2:	edd3 7a00 	vldr	s15, [r3]
 800f0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0da:	4b96      	ldr	r3, [pc, #600]	; (800f334 <get_current_dq+0x358>)
 800f0dc:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - V_Iw_offset;
 800f0e0:	4b8e      	ldr	r3, [pc, #568]	; (800f31c <get_current_dq+0x340>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	ee07 3a90 	vmov	s15, r3
 800f0e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f0ec:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800f320 <get_current_dq+0x344>
 800f0f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0f8:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f324 <get_current_dq+0x348>
 800f0fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f100:	4b8d      	ldr	r3, [pc, #564]	; (800f338 <get_current_dq+0x35c>)
 800f102:	edd3 7a00 	vldr	s15, [r3]
 800f106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f10a:	4b8c      	ldr	r3, [pc, #560]	; (800f33c <get_current_dq+0x360>)
 800f10c:	edc3 7a00 	vstr	s15, [r3]

#endif

	//Vdc = Vdc * 0.9 + 0.1 * (float)AD_Iu[1] / AD_Range * Vref_AD * Gain_Vdc_sense;

	switch(SVM_sector)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b05      	cmp	r3, #5
 800f114:	d874      	bhi.n	800f200 <get_current_dq+0x224>
 800f116:	a201      	add	r2, pc, #4	; (adr r2, 800f11c <get_current_dq+0x140>)
 800f118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f11c:	0800f135 	.word	0x0800f135
 800f120:	0800f179 	.word	0x0800f179
 800f124:	0800f179 	.word	0x0800f179
 800f128:	0800f1bd 	.word	0x0800f1bd
 800f12c:	0800f1bd 	.word	0x0800f1bd
 800f130:	0800f135 	.word	0x0800f135
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 800f134:	4b7f      	ldr	r3, [pc, #508]	; (800f334 <get_current_dq+0x358>)
 800f136:	edd3 7a00 	vldr	s15, [r3]
 800f13a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800f13e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f142:	4b7f      	ldr	r3, [pc, #508]	; (800f340 <get_current_dq+0x364>)
 800f144:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 800f148:	4b7c      	ldr	r3, [pc, #496]	; (800f33c <get_current_dq+0x360>)
 800f14a:	edd3 7a00 	vldr	s15, [r3]
 800f14e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800f152:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f156:	4b7b      	ldr	r3, [pc, #492]	; (800f344 <get_current_dq+0x368>)
 800f158:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 800f15c:	4b78      	ldr	r3, [pc, #480]	; (800f340 <get_current_dq+0x364>)
 800f15e:	edd3 7a00 	vldr	s15, [r3]
 800f162:	eeb1 7a67 	vneg.f32	s14, s15
 800f166:	4b77      	ldr	r3, [pc, #476]	; (800f344 <get_current_dq+0x368>)
 800f168:	edd3 7a00 	vldr	s15, [r3]
 800f16c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f170:	4b75      	ldr	r3, [pc, #468]	; (800f348 <get_current_dq+0x36c>)
 800f172:	edc3 7a00 	vstr	s15, [r3]
		break;
 800f176:	e043      	b.n	800f200 <get_current_dq+0x224>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 800f178:	4b70      	ldr	r3, [pc, #448]	; (800f33c <get_current_dq+0x360>)
 800f17a:	edd3 7a00 	vldr	s15, [r3]
 800f17e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800f182:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f186:	4b6f      	ldr	r3, [pc, #444]	; (800f344 <get_current_dq+0x368>)
 800f188:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 800f18c:	4b67      	ldr	r3, [pc, #412]	; (800f32c <get_current_dq+0x350>)
 800f18e:	edd3 7a00 	vldr	s15, [r3]
 800f192:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800f196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f19a:	4b6b      	ldr	r3, [pc, #428]	; (800f348 <get_current_dq+0x36c>)
 800f19c:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 800f1a0:	4b68      	ldr	r3, [pc, #416]	; (800f344 <get_current_dq+0x368>)
 800f1a2:	edd3 7a00 	vldr	s15, [r3]
 800f1a6:	eeb1 7a67 	vneg.f32	s14, s15
 800f1aa:	4b67      	ldr	r3, [pc, #412]	; (800f348 <get_current_dq+0x36c>)
 800f1ac:	edd3 7a00 	vldr	s15, [r3]
 800f1b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1b4:	4b62      	ldr	r3, [pc, #392]	; (800f340 <get_current_dq+0x364>)
 800f1b6:	edc3 7a00 	vstr	s15, [r3]
		break;
 800f1ba:	e021      	b.n	800f200 <get_current_dq+0x224>

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 800f1bc:	4b5b      	ldr	r3, [pc, #364]	; (800f32c <get_current_dq+0x350>)
 800f1be:	edd3 7a00 	vldr	s15, [r3]
 800f1c2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800f1c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1ca:	4b5f      	ldr	r3, [pc, #380]	; (800f348 <get_current_dq+0x36c>)
 800f1cc:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 800f1d0:	4b58      	ldr	r3, [pc, #352]	; (800f334 <get_current_dq+0x358>)
 800f1d2:	edd3 7a00 	vldr	s15, [r3]
 800f1d6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800f1da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f1de:	4b58      	ldr	r3, [pc, #352]	; (800f340 <get_current_dq+0x364>)
 800f1e0:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 800f1e4:	4b58      	ldr	r3, [pc, #352]	; (800f348 <get_current_dq+0x36c>)
 800f1e6:	edd3 7a00 	vldr	s15, [r3]
 800f1ea:	eeb1 7a67 	vneg.f32	s14, s15
 800f1ee:	4b54      	ldr	r3, [pc, #336]	; (800f340 <get_current_dq+0x364>)
 800f1f0:	edd3 7a00 	vldr	s15, [r3]
 800f1f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1f8:	4b52      	ldr	r3, [pc, #328]	; (800f344 <get_current_dq+0x368>)
 800f1fa:	edc3 7a00 	vstr	s15, [r3]
		break;
 800f1fe:	bf00      	nop
	}


	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800f200:	4b51      	ldr	r3, [pc, #324]	; (800f348 <get_current_dq+0x36c>)
 800f202:	ed93 7a00 	vldr	s14, [r3]
 800f206:	edd7 7a02 	vldr	s15, [r7, #8]
 800f20a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f20e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f212:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800f216:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f21a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f21e:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 800f34c <get_current_dq+0x370>
 800f222:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f226:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f22a:	4b45      	ldr	r3, [pc, #276]	; (800f340 <get_current_dq+0x364>)
 800f22c:	edd3 7a00 	vldr	s15, [r3]
 800f230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f234:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f238:	edd7 7a02 	vldr	s15, [r7, #8]
 800f23c:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800f240:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f244:	edd7 7a01 	vldr	s15, [r7, #4]
 800f248:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f34c <get_current_dq+0x370>
 800f24c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f250:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f254:	4b3b      	ldr	r3, [pc, #236]	; (800f344 <get_current_dq+0x368>)
 800f256:	edd3 7a00 	vldr	s15, [r3]
 800f25a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f25e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f262:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800f350 <get_current_dq+0x374>
 800f266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800f270:	4b35      	ldr	r3, [pc, #212]	; (800f348 <get_current_dq+0x36c>)
 800f272:	edd3 7a00 	vldr	s15, [r3]
 800f276:	eeb1 7a67 	vneg.f32	s14, s15
 800f27a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f27e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f282:	edd7 7a01 	vldr	s15, [r7, #4]
 800f286:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f28a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f28e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f292:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800f34c <get_current_dq+0x370>
 800f296:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f29a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f29e:	4b28      	ldr	r3, [pc, #160]	; (800f340 <get_current_dq+0x364>)
 800f2a0:	edd3 7a00 	vldr	s15, [r3]
 800f2a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2ac:	edd7 7a01 	vldr	s15, [r7, #4]
 800f2b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f2b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f2b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2bc:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800f34c <get_current_dq+0x370>
 800f2c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f2c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f2c8:	4b1e      	ldr	r3, [pc, #120]	; (800f344 <get_current_dq+0x368>)
 800f2ca:	edd3 7a00 	vldr	s15, [r3]
 800f2ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2d6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800f350 <get_current_dq+0x374>
 800f2da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	edc3 7a00 	vstr	s15, [r3]



	return;
 800f2e4:	bf00      	nop

}
 800f2e6:	3718      	adds	r7, #24
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	20000130 	.word	0x20000130
 800f2f0:	200042e8 	.word	0x200042e8
 800f2f4:	20000134 	.word	0x20000134
 800f2f8:	20004240 	.word	0x20004240
 800f2fc:	20000138 	.word	0x20000138
 800f300:	20004330 	.word	0x20004330
 800f304:	20000154 	.word	0x20000154
 800f308:	20000158 	.word	0x20000158
 800f30c:	20000164 	.word	0x20000164
 800f310:	20000170 	.word	0x20000170
 800f314:	2000017c 	.word	0x2000017c
 800f318:	20000180 	.word	0x20000180
 800f31c:	20000184 	.word	0x20000184
 800f320:	00001000 	.word	0x00001000
 800f324:	40533333 	.word	0x40533333
 800f328:	20000024 	.word	0x20000024
 800f32c:	2000013c 	.word	0x2000013c
 800f330:	20000028 	.word	0x20000028
 800f334:	20000140 	.word	0x20000140
 800f338:	2000002c 	.word	0x2000002c
 800f33c:	20000144 	.word	0x20000144
 800f340:	2000014c 	.word	0x2000014c
 800f344:	20000150 	.word	0x20000150
 800f348:	20000148 	.word	0x20000148
 800f34c:	3f5ae148 	.word	0x3f5ae148
 800f350:	3f510625 	.word	0x3f510625

0800f354 <median3>:



extern int32_t median3(int32_t *buf)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	3304      	adds	r3, #4
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	429a      	cmp	r2, r3
 800f368:	da17      	bge.n	800f39a <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	3308      	adds	r3, #8
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	429a      	cmp	r2, r3
 800f376:	da02      	bge.n	800f37e <median3+0x2a>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	e025      	b.n	800f3ca <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3308      	adds	r3, #8
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3304      	adds	r3, #4
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	da02      	bge.n	800f394 <median3+0x40>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	e01a      	b.n	800f3ca <median3+0x76>
		else						return buf[1];
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	e017      	b.n	800f3ca <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	3308      	adds	r3, #8
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	da02      	bge.n	800f3b0 <median3+0x5c>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	e00c      	b.n	800f3ca <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	3308      	adds	r3, #8
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	da02      	bge.n	800f3c6 <median3+0x72>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	e001      	b.n	800f3ca <median3+0x76>
		else						return buf[0];
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
	...

0800f3d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800f3dc:	4b18      	ldr	r3, [pc, #96]	; (800f440 <MX_CAN1_Init+0x68>)
 800f3de:	4a19      	ldr	r2, [pc, #100]	; (800f444 <MX_CAN1_Init+0x6c>)
 800f3e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800f3e2:	4b17      	ldr	r3, [pc, #92]	; (800f440 <MX_CAN1_Init+0x68>)
 800f3e4:	2204      	movs	r2, #4
 800f3e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800f3e8:	4b15      	ldr	r3, [pc, #84]	; (800f440 <MX_CAN1_Init+0x68>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800f3ee:	4b14      	ldr	r3, [pc, #80]	; (800f440 <MX_CAN1_Init+0x68>)
 800f3f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f3f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800f3f6:	4b12      	ldr	r3, [pc, #72]	; (800f440 <MX_CAN1_Init+0x68>)
 800f3f8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800f3fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f3fe:	4b10      	ldr	r3, [pc, #64]	; (800f440 <MX_CAN1_Init+0x68>)
 800f400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f404:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800f406:	4b0e      	ldr	r3, [pc, #56]	; (800f440 <MX_CAN1_Init+0x68>)
 800f408:	2200      	movs	r2, #0
 800f40a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800f40c:	4b0c      	ldr	r3, [pc, #48]	; (800f440 <MX_CAN1_Init+0x68>)
 800f40e:	2200      	movs	r2, #0
 800f410:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800f412:	4b0b      	ldr	r3, [pc, #44]	; (800f440 <MX_CAN1_Init+0x68>)
 800f414:	2200      	movs	r2, #0
 800f416:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800f418:	4b09      	ldr	r3, [pc, #36]	; (800f440 <MX_CAN1_Init+0x68>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800f41e:	4b08      	ldr	r3, [pc, #32]	; (800f440 <MX_CAN1_Init+0x68>)
 800f420:	2200      	movs	r2, #0
 800f422:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800f424:	4b06      	ldr	r3, [pc, #24]	; (800f440 <MX_CAN1_Init+0x68>)
 800f426:	2200      	movs	r2, #0
 800f428:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800f42a:	4805      	ldr	r0, [pc, #20]	; (800f440 <MX_CAN1_Init+0x68>)
 800f42c:	f7fa f93e 	bl	80096ac <HAL_CAN_Init>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800f436:	f000 fc5d 	bl	800fcf4 <Error_Handler>
  }

}
 800f43a:	bf00      	nop
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	20004484 	.word	0x20004484
 800f444:	40006400 	.word	0x40006400

0800f448 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b08a      	sub	sp, #40	; 0x28
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f450:	f107 0314 	add.w	r3, r7, #20
 800f454:	2200      	movs	r2, #0
 800f456:	601a      	str	r2, [r3, #0]
 800f458:	605a      	str	r2, [r3, #4]
 800f45a:	609a      	str	r2, [r3, #8]
 800f45c:	60da      	str	r2, [r3, #12]
 800f45e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4a21      	ldr	r2, [pc, #132]	; (800f4ec <HAL_CAN_MspInit+0xa4>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d13c      	bne.n	800f4e4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800f46a:	2300      	movs	r3, #0
 800f46c:	613b      	str	r3, [r7, #16]
 800f46e:	4b20      	ldr	r3, [pc, #128]	; (800f4f0 <HAL_CAN_MspInit+0xa8>)
 800f470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f472:	4a1f      	ldr	r2, [pc, #124]	; (800f4f0 <HAL_CAN_MspInit+0xa8>)
 800f474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f478:	6413      	str	r3, [r2, #64]	; 0x40
 800f47a:	4b1d      	ldr	r3, [pc, #116]	; (800f4f0 <HAL_CAN_MspInit+0xa8>)
 800f47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f482:	613b      	str	r3, [r7, #16]
 800f484:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f486:	2300      	movs	r3, #0
 800f488:	60fb      	str	r3, [r7, #12]
 800f48a:	4b19      	ldr	r3, [pc, #100]	; (800f4f0 <HAL_CAN_MspInit+0xa8>)
 800f48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f48e:	4a18      	ldr	r2, [pc, #96]	; (800f4f0 <HAL_CAN_MspInit+0xa8>)
 800f490:	f043 0301 	orr.w	r3, r3, #1
 800f494:	6313      	str	r3, [r2, #48]	; 0x30
 800f496:	4b16      	ldr	r3, [pc, #88]	; (800f4f0 <HAL_CAN_MspInit+0xa8>)
 800f498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f49a:	f003 0301 	and.w	r3, r3, #1
 800f49e:	60fb      	str	r3, [r7, #12]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f4a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f4a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4a8:	2302      	movs	r3, #2
 800f4aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800f4b4:	2309      	movs	r3, #9
 800f4b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4b8:	f107 0314 	add.w	r3, r7, #20
 800f4bc:	4619      	mov	r1, r3
 800f4be:	480d      	ldr	r0, [pc, #52]	; (800f4f4 <HAL_CAN_MspInit+0xac>)
 800f4c0:	f7fb fde6 	bl	800b090 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	2013      	movs	r0, #19
 800f4ca:	f7fa ff2e 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800f4ce:	2013      	movs	r0, #19
 800f4d0:	f7fa ff47 	bl	800a362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	2014      	movs	r0, #20
 800f4da:	f7fa ff26 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800f4de:	2014      	movs	r0, #20
 800f4e0:	f7fa ff3f 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800f4e4:	bf00      	nop
 800f4e6:	3728      	adds	r7, #40	; 0x28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	40006400 	.word	0x40006400
 800f4f0:	40023800 	.word	0x40023800
 800f4f4:	40020000 	.word	0x40020000

0800f4f8 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 800f4fc:	f000 f84a 	bl	800f594 <getChannel>
 800f500:	4603      	mov	r3, r0
 800f502:	461a      	mov	r2, r3
 800f504:	4b20      	ldr	r3, [pc, #128]	; (800f588 <CAN_Init+0x90>)
 800f506:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 800f508:	4b20      	ldr	r3, [pc, #128]	; (800f58c <CAN_Init+0x94>)
 800f50a:	2200      	movs	r2, #0
 800f50c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800f50e:	4b1f      	ldr	r3, [pc, #124]	; (800f58c <CAN_Init+0x94>)
 800f510:	2200      	movs	r2, #0
 800f512:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800f514:	4b1d      	ldr	r3, [pc, #116]	; (800f58c <CAN_Init+0x94>)
 800f516:	2201      	movs	r2, #1
 800f518:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 800f51a:	4b1b      	ldr	r3, [pc, #108]	; (800f588 <CAN_Init+0x90>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	029b      	lsls	r3, r3, #10
 800f520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f524:	461a      	mov	r2, r3
 800f526:	4b19      	ldr	r3, [pc, #100]	; (800f58c <CAN_Init+0x94>)
 800f528:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800f52a:	4b18      	ldr	r3, [pc, #96]	; (800f58c <CAN_Init+0x94>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 800f530:	4b16      	ldr	r3, [pc, #88]	; (800f58c <CAN_Init+0x94>)
 800f532:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800f536:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 800f538:	4b14      	ldr	r3, [pc, #80]	; (800f58c <CAN_Init+0x94>)
 800f53a:	2206      	movs	r2, #6
 800f53c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800f53e:	4b13      	ldr	r3, [pc, #76]	; (800f58c <CAN_Init+0x94>)
 800f540:	2200      	movs	r2, #0
 800f542:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800f544:	4b11      	ldr	r3, [pc, #68]	; (800f58c <CAN_Init+0x94>)
 800f546:	2201      	movs	r2, #1
 800f548:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800f54a:	4b10      	ldr	r3, [pc, #64]	; (800f58c <CAN_Init+0x94>)
 800f54c:	220e      	movs	r2, #14
 800f54e:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800f550:	490e      	ldr	r1, [pc, #56]	; (800f58c <CAN_Init+0x94>)
 800f552:	480f      	ldr	r0, [pc, #60]	; (800f590 <CAN_Init+0x98>)
 800f554:	f7fa f9a6 	bl	80098a4 <HAL_CAN_ConfigFilter>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <CAN_Init+0x6a>
	{
	  Error_Handler();
 800f55e:	f000 fbc9 	bl	800fcf4 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800f562:	480b      	ldr	r0, [pc, #44]	; (800f590 <CAN_Init+0x98>)
 800f564:	f7fa fa7e 	bl	8009a64 <HAL_CAN_Start>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <CAN_Init+0x7a>
	{
	  Error_Handler();
 800f56e:	f000 fbc1 	bl	800fcf4 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800f572:	2103      	movs	r1, #3
 800f574:	4806      	ldr	r0, [pc, #24]	; (800f590 <CAN_Init+0x98>)
 800f576:	f7fa fbcc 	bl	8009d12 <HAL_CAN_ActivateNotification>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d001      	beq.n	800f584 <CAN_Init+0x8c>
	{
	  Error_Handler();
 800f580:	f000 fbb8 	bl	800fcf4 <Error_Handler>
	}


}
 800f584:	bf00      	nop
 800f586:	bd80      	pop	{r7, pc}
 800f588:	20000188 	.word	0x20000188
 800f58c:	20004438 	.word	0x20004438
 800f590:	20004484 	.word	0x20004484

0800f594 <getChannel>:


uint8_t getChannel()
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800f59e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f5a2:	481b      	ldr	r0, [pc, #108]	; (800f610 <getChannel+0x7c>)
 800f5a4:	f7fb ff06 	bl	800b3b4 <HAL_GPIO_ReadPin>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	bf0c      	ite	eq
 800f5ae:	2301      	moveq	r3, #1
 800f5b0:	2300      	movne	r3, #0
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	b25a      	sxtb	r2, r3
 800f5b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	b25b      	sxtb	r3, r3
 800f5be:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800f5c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f5c4:	4812      	ldr	r0, [pc, #72]	; (800f610 <getChannel+0x7c>)
 800f5c6:	f7fb fef5 	bl	800b3b4 <HAL_GPIO_ReadPin>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d101      	bne.n	800f5d4 <getChannel+0x40>
 800f5d0:	2302      	movs	r3, #2
 800f5d2:	e000      	b.n	800f5d6 <getChannel+0x42>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	b25a      	sxtb	r2, r3
 800f5d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	b25b      	sxtb	r3, r3
 800f5e0:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800f5e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f5e6:	480a      	ldr	r0, [pc, #40]	; (800f610 <getChannel+0x7c>)
 800f5e8:	f7fb fee4 	bl	800b3b4 <HAL_GPIO_ReadPin>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d101      	bne.n	800f5f6 <getChannel+0x62>
 800f5f2:	2304      	movs	r3, #4
 800f5f4:	e000      	b.n	800f5f8 <getChannel+0x64>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	b25a      	sxtb	r2, r3
 800f5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	b25b      	sxtb	r3, r3
 800f602:	71fb      	strb	r3, [r7, #7]

	return ch;
 800f604:	79fb      	ldrb	r3, [r7, #7]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3708      	adds	r7, #8
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	40020400 	.word	0x40020400

0800f614 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f61c:	2200      	movs	r2, #0
 800f61e:	2140      	movs	r1, #64	; 0x40
 800f620:	4803      	ldr	r0, [pc, #12]	; (800f630 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800f622:	f7fb fedf 	bl	800b3e4 <HAL_GPIO_WritePin>

}
 800f626:	bf00      	nop
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	40020400 	.word	0x40020400

0800f634 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f63c:	2200      	movs	r2, #0
 800f63e:	2140      	movs	r1, #64	; 0x40
 800f640:	4803      	ldr	r0, [pc, #12]	; (800f650 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800f642:	f7fb fecf 	bl	800b3e4 <HAL_GPIO_WritePin>

}
 800f646:	bf00      	nop
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	40020400 	.word	0x40020400

0800f654 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f65c:	2200      	movs	r2, #0
 800f65e:	2140      	movs	r1, #64	; 0x40
 800f660:	4803      	ldr	r0, [pc, #12]	; (800f670 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800f662:	f7fb febf 	bl	800b3e4 <HAL_GPIO_WritePin>

}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	40020400 	.word	0x40020400

0800f674 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800f67c:	4b16      	ldr	r3, [pc, #88]	; (800f6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f67e:	4a17      	ldr	r2, [pc, #92]	; (800f6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f680:	2100      	movs	r1, #0
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7fa fa32 	bl	8009aec <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800f688:	4b15      	ldr	r3, [pc, #84]	; (800f6e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800f68a:	2201      	movs	r2, #1
 800f68c:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800f68e:	4b13      	ldr	r3, [pc, #76]	; (800f6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	089b      	lsrs	r3, r3, #2
 800f694:	f003 0307 	and.w	r3, r3, #7
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d114      	bne.n	800f6c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800f69c:	4b0f      	ldr	r3, [pc, #60]	; (800f6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f69e:	691b      	ldr	r3, [r3, #16]
 800f6a0:	2b04      	cmp	r3, #4
 800f6a2:	d110      	bne.n	800f6c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800f6a4:	4b0c      	ldr	r3, [pc, #48]	; (800f6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800f6aa:	4b0b      	ldr	r3, [pc, #44]	; (800f6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f6ac:	785b      	ldrb	r3, [r3, #1]
 800f6ae:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800f6b0:	4b09      	ldr	r3, [pc, #36]	; (800f6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f6b2:	789b      	ldrb	r3, [r3, #2]
 800f6b4:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800f6b6:	4b08      	ldr	r3, [pc, #32]	; (800f6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f6b8:	78db      	ldrb	r3, [r3, #3]
 800f6ba:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	4a09      	ldr	r2, [pc, #36]	; (800f6e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800f6c0:	6013      	str	r3, [r2, #0]

		timeoutReset();
 800f6c2:	f001 fe5d 	bl	8011380 <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	2140      	movs	r1, #64	; 0x40
 800f6ca:	4807      	ldr	r0, [pc, #28]	; (800f6e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800f6cc:	f7fb fe8a 	bl	800b3e4 <HAL_GPIO_WritePin>

}
 800f6d0:	bf00      	nop
 800f6d2:	3710      	adds	r7, #16
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	2000447c 	.word	0x2000447c
 800f6dc:	20004460 	.word	0x20004460
 800f6e0:	20000189 	.word	0x20000189
 800f6e4:	20000100 	.word	0x20000100
 800f6e8:	40020000 	.word	0x40020000

0800f6ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	607b      	str	r3, [r7, #4]
 800f6f6:	4b14      	ldr	r3, [pc, #80]	; (800f748 <MX_DMA_Init+0x5c>)
 800f6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6fa:	4a13      	ldr	r2, [pc, #76]	; (800f748 <MX_DMA_Init+0x5c>)
 800f6fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f700:	6313      	str	r3, [r2, #48]	; 0x30
 800f702:	4b11      	ldr	r3, [pc, #68]	; (800f748 <MX_DMA_Init+0x5c>)
 800f704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f70a:	607b      	str	r3, [r7, #4]
 800f70c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f70e:	2200      	movs	r2, #0
 800f710:	2100      	movs	r1, #0
 800f712:	2038      	movs	r0, #56	; 0x38
 800f714:	f7fa fe09 	bl	800a32a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f718:	2038      	movs	r0, #56	; 0x38
 800f71a:	f7fa fe22 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800f71e:	2200      	movs	r2, #0
 800f720:	2100      	movs	r1, #0
 800f722:	2039      	movs	r0, #57	; 0x39
 800f724:	f7fa fe01 	bl	800a32a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800f728:	2039      	movs	r0, #57	; 0x39
 800f72a:	f7fa fe1a 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800f72e:	2200      	movs	r2, #0
 800f730:	2100      	movs	r1, #0
 800f732:	203a      	movs	r0, #58	; 0x3a
 800f734:	f7fa fdf9 	bl	800a32a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f738:	203a      	movs	r0, #58	; 0x3a
 800f73a:	f7fa fe12 	bl	800a362 <HAL_NVIC_EnableIRQ>

}
 800f73e:	bf00      	nop
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
 800f746:	bf00      	nop
 800f748:	40023800 	.word	0x40023800

0800f74c <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b088      	sub	sp, #32
 800f750:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800f752:	f7fb fa0d 	bl	800ab70 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800f756:	2300      	movs	r3, #0
 800f758:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800f75a:	2301      	movs	r3, #1
 800f75c:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800f75e:	2302      	movs	r3, #2
 800f760:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800f762:	2301      	movs	r3, #1
 800f764:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800f766:	1d3a      	adds	r2, r7, #4
 800f768:	f107 0308 	add.w	r3, r7, #8
 800f76c:	4611      	mov	r1, r2
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fb fb6c 	bl	800ae4c <HAL_FLASHEx_Erase>
 800f774:	4603      	mov	r3, r0
 800f776:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800f778:	f7fb fa1c 	bl	800abb4 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800f77c:	7ffb      	ldrb	r3, [r7, #31]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d105      	bne.n	800f78e <Flash_clear+0x42>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f788:	d101      	bne.n	800f78e <Flash_clear+0x42>
 800f78a:	2301      	movs	r3, #1
 800f78c:	e000      	b.n	800f790 <Flash_clear+0x44>
 800f78e:	2300      	movs	r3, #0
 800f790:	b2db      	uxtb	r3, r3
}
 800f792:	4618      	mov	r0, r3
 800f794:	3720      	adds	r7, #32
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
	...

0800f79c <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 800f7a0:	4a05      	ldr	r2, [pc, #20]	; (800f7b8 <Flash_load+0x1c>)
 800f7a2:	4b06      	ldr	r3, [pc, #24]	; (800f7bc <Flash_load+0x20>)
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	f001 fecf 	bl	8011550 <memcpy>
    return work_ram;
 800f7b2:	4b01      	ldr	r3, [pc, #4]	; (800f7b8 <Flash_load+0x1c>)
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	2000018c 	.word	0x2000018c
 800f7bc:	08004000 	.word	0x08004000

0800f7c0 <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 800f7c0:	b590      	push	{r4, r7, lr}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 800f7c6:	f7ff ffc1 	bl	800f74c <Flash_clear>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d101      	bne.n	800f7d4 <Flash_store+0x14>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e02f      	b.n	800f834 <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800f7d4:	4b19      	ldr	r3, [pc, #100]	; (800f83c <Flash_store+0x7c>)
 800f7d6:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800f7d8:	f7fb f9ca 	bl	800ab70 <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 800f7dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7e0:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60bb      	str	r3, [r7, #8]
 800f7e6:	e017      	b.n	800f818 <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	4a14      	ldr	r2, [pc, #80]	; (800f840 <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 800f7ee:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800f7fa:	f04f 0400 	mov.w	r4, #0
 800f7fe:	461a      	mov	r2, r3
 800f800:	4623      	mov	r3, r4
 800f802:	2002      	movs	r0, #2
 800f804:	f7fb f960 	bl	800aac8 <HAL_FLASH_Program>
 800f808:	4603      	mov	r3, r0
 800f80a:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d107      	bne.n	800f822 <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	3301      	adds	r3, #1
 800f816:	60bb      	str	r3, [r7, #8]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d3e3      	bcc.n	800f7e8 <Flash_store+0x28>
 800f820:	e000      	b.n	800f824 <Flash_store+0x64>
        if (result != HAL_OK) break;
 800f822:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800f824:	f7fb f9c6 	bl	800abb4 <HAL_FLASH_Lock>

    return result == HAL_OK;
 800f828:	7bfb      	ldrb	r3, [r7, #15]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	bf0c      	ite	eq
 800f82e:	2301      	moveq	r3, #1
 800f830:	2300      	movne	r3, #0
 800f832:	b2db      	uxtb	r3, r3
}
 800f834:	4618      	mov	r0, r3
 800f836:	3714      	adds	r7, #20
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd90      	pop	{r4, r7, pc}
 800f83c:	2000018c 	.word	0x2000018c
 800f840:	08004000 	.word	0x08004000

0800f844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b08a      	sub	sp, #40	; 0x28
 800f848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f84a:	f107 0314 	add.w	r3, r7, #20
 800f84e:	2200      	movs	r2, #0
 800f850:	601a      	str	r2, [r3, #0]
 800f852:	605a      	str	r2, [r3, #4]
 800f854:	609a      	str	r2, [r3, #8]
 800f856:	60da      	str	r2, [r3, #12]
 800f858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f85a:	2300      	movs	r3, #0
 800f85c:	613b      	str	r3, [r7, #16]
 800f85e:	4b45      	ldr	r3, [pc, #276]	; (800f974 <MX_GPIO_Init+0x130>)
 800f860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f862:	4a44      	ldr	r2, [pc, #272]	; (800f974 <MX_GPIO_Init+0x130>)
 800f864:	f043 0304 	orr.w	r3, r3, #4
 800f868:	6313      	str	r3, [r2, #48]	; 0x30
 800f86a:	4b42      	ldr	r3, [pc, #264]	; (800f974 <MX_GPIO_Init+0x130>)
 800f86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f86e:	f003 0304 	and.w	r3, r3, #4
 800f872:	613b      	str	r3, [r7, #16]
 800f874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f876:	2300      	movs	r3, #0
 800f878:	60fb      	str	r3, [r7, #12]
 800f87a:	4b3e      	ldr	r3, [pc, #248]	; (800f974 <MX_GPIO_Init+0x130>)
 800f87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f87e:	4a3d      	ldr	r2, [pc, #244]	; (800f974 <MX_GPIO_Init+0x130>)
 800f880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f884:	6313      	str	r3, [r2, #48]	; 0x30
 800f886:	4b3b      	ldr	r3, [pc, #236]	; (800f974 <MX_GPIO_Init+0x130>)
 800f888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f88e:	60fb      	str	r3, [r7, #12]
 800f890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f892:	2300      	movs	r3, #0
 800f894:	60bb      	str	r3, [r7, #8]
 800f896:	4b37      	ldr	r3, [pc, #220]	; (800f974 <MX_GPIO_Init+0x130>)
 800f898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f89a:	4a36      	ldr	r2, [pc, #216]	; (800f974 <MX_GPIO_Init+0x130>)
 800f89c:	f043 0301 	orr.w	r3, r3, #1
 800f8a0:	6313      	str	r3, [r2, #48]	; 0x30
 800f8a2:	4b34      	ldr	r3, [pc, #208]	; (800f974 <MX_GPIO_Init+0x130>)
 800f8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a6:	f003 0301 	and.w	r3, r3, #1
 800f8aa:	60bb      	str	r3, [r7, #8]
 800f8ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	607b      	str	r3, [r7, #4]
 800f8b2:	4b30      	ldr	r3, [pc, #192]	; (800f974 <MX_GPIO_Init+0x130>)
 800f8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b6:	4a2f      	ldr	r2, [pc, #188]	; (800f974 <MX_GPIO_Init+0x130>)
 800f8b8:	f043 0302 	orr.w	r3, r3, #2
 800f8bc:	6313      	str	r3, [r2, #48]	; 0x30
 800f8be:	4b2d      	ldr	r3, [pc, #180]	; (800f974 <MX_GPIO_Init+0x130>)
 800f8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8c2:	f003 0302 	and.w	r3, r3, #2
 800f8c6:	607b      	str	r3, [r7, #4]
 800f8c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 800f8d0:	4829      	ldr	r0, [pc, #164]	; (800f978 <MX_GPIO_Init+0x134>)
 800f8d2:	f7fb fd87 	bl	800b3e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f241 0150 	movw	r1, #4176	; 0x1050
 800f8dc:	4827      	ldr	r0, [pc, #156]	; (800f97c <MX_GPIO_Init+0x138>)
 800f8de:	f7fb fd81 	bl	800b3e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800f8e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f8e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f8e8:	4b25      	ldr	r3, [pc, #148]	; (800f980 <MX_GPIO_Init+0x13c>)
 800f8ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800f8f0:	f107 0314 	add.w	r3, r7, #20
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4823      	ldr	r0, [pc, #140]	; (800f984 <MX_GPIO_Init+0x140>)
 800f8f8:	f7fb fbca 	bl	800b090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 800f8fc:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800f900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f902:	2301      	movs	r3, #1
 800f904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f906:	2300      	movs	r3, #0
 800f908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f90a:	2300      	movs	r3, #0
 800f90c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f90e:	f107 0314 	add.w	r3, r7, #20
 800f912:	4619      	mov	r1, r3
 800f914:	4818      	ldr	r0, [pc, #96]	; (800f978 <MX_GPIO_Init+0x134>)
 800f916:	f7fb fbbb 	bl	800b090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 800f91a:	f241 0350 	movw	r3, #4176	; 0x1050
 800f91e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f920:	2301      	movs	r3, #1
 800f922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f924:	2300      	movs	r3, #0
 800f926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f928:	2300      	movs	r3, #0
 800f92a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f92c:	f107 0314 	add.w	r3, r7, #20
 800f930:	4619      	mov	r1, r3
 800f932:	4812      	ldr	r0, [pc, #72]	; (800f97c <MX_GPIO_Init+0x138>)
 800f934:	f7fb fbac 	bl	800b090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 800f938:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800f93c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f93e:	2300      	movs	r3, #0
 800f940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f942:	2301      	movs	r3, #1
 800f944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f946:	f107 0314 	add.w	r3, r7, #20
 800f94a:	4619      	mov	r1, r3
 800f94c:	480b      	ldr	r0, [pc, #44]	; (800f97c <MX_GPIO_Init+0x138>)
 800f94e:	f7fb fb9f 	bl	800b090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 800f952:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f958:	2300      	movs	r3, #0
 800f95a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f95c:	2300      	movs	r3, #0
 800f95e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 800f960:	f107 0314 	add.w	r3, r7, #20
 800f964:	4619      	mov	r1, r3
 800f966:	4804      	ldr	r0, [pc, #16]	; (800f978 <MX_GPIO_Init+0x134>)
 800f968:	f7fb fb92 	bl	800b090 <HAL_GPIO_Init>

}
 800f96c:	bf00      	nop
 800f96e:	3728      	adds	r7, #40	; 0x28
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	40023800 	.word	0x40023800
 800f978:	40020000 	.word	0x40020000
 800f97c:	40020400 	.word	0x40020400
 800f980:	10210000 	.word	0x10210000
 800f984:	40020800 	.word	0x40020800

0800f988 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f990:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f994:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800f998:	f003 0301 	and.w	r3, r3, #1
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d013      	beq.n	800f9c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800f9a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f9a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800f9a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d00b      	beq.n	800f9c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800f9b0:	e000      	b.n	800f9b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 800f9b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800f9b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d0f9      	beq.n	800f9b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800f9be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	b2d2      	uxtb	r2, r2
 800f9c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800f9c8:	687b      	ldr	r3, [r7, #4]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	370c      	adds	r7, #12
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr

0800f9d6 <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b086      	sub	sp, #24
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	60f8      	str	r0, [r7, #12]
 800f9de:	60b9      	str	r1, [r7, #8]
 800f9e0:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	617b      	str	r3, [r7, #20]
 800f9e6:	e009      	b.n	800f9fc <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	1c5a      	adds	r2, r3, #1
 800f9ec:	60ba      	str	r2, [r7, #8]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7ff ffc9 	bl	800f988 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	617b      	str	r3, [r7, #20]
 800f9fc:	697a      	ldr	r2, [r7, #20]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	dbf1      	blt.n	800f9e8 <_write+0x12>
  }
  return len;
 800fa04:	687b      	ldr	r3, [r7, #4]
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3718      	adds	r7, #24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
	...

0800fa10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800fa10:	b590      	push	{r4, r7, lr}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



	int count = 0;
 800fa16:	2300      	movs	r3, #0
 800fa18:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fa1a:	f7f9 f9af 	bl	8008d7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fa1e:	f000 f8fd 	bl	800fc1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fa22:	f7ff ff0f 	bl	800f844 <MX_GPIO_Init>
  MX_DMA_Init();
 800fa26:	f7ff fe61 	bl	800f6ec <MX_DMA_Init>
  MX_ADC1_Init();
 800fa2a:	f7ff f863 	bl	800eaf4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800fa2e:	f7ff f8b3 	bl	800eb98 <MX_ADC2_Init>
  MX_ADC3_Init();
 800fa32:	f7ff f903 	bl	800ec3c <MX_ADC3_Init>
  MX_CAN1_Init();
 800fa36:	f7ff fccf 	bl	800f3d8 <MX_CAN1_Init>
  MX_SPI2_Init();
 800fa3a:	f000 fd11 	bl	8010460 <MX_SPI2_Init>
  MX_SPI3_Init();
 800fa3e:	f000 fd47 	bl	80104d0 <MX_SPI3_Init>
  MX_TIM8_Init();
 800fa42:	f001 fabd 	bl	8010fc0 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800fa46:	f001 fcb5 	bl	80113b4 <MX_USART2_UART_Init>



  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 800fa4a:	486c      	ldr	r0, [pc, #432]	; (800fbfc <main+0x1ec>)
 800fa4c:	f001 fe08 	bl	8011660 <puts>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 800fa50:	2201      	movs	r2, #1
 800fa52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fa56:	486a      	ldr	r0, [pc, #424]	; (800fc00 <main+0x1f0>)
 800fa58:	f7fb fcc4 	bl	800b3e4 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fa62:	4867      	ldr	r0, [pc, #412]	; (800fc00 <main+0x1f0>)
 800fa64:	f7fb fcbe 	bl	800b3e4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800fa68:	200a      	movs	r0, #10
 800fa6a:	f7f9 f9f9 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fa74:	4862      	ldr	r0, [pc, #392]	; (800fc00 <main+0x1f0>)
 800fa76:	f7fb fcb5 	bl	800b3e4 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	2140      	movs	r1, #64	; 0x40
 800fa7e:	4860      	ldr	r0, [pc, #384]	; (800fc00 <main+0x1f0>)
 800fa80:	f7fb fcb0 	bl	800b3e4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800fa84:	2200      	movs	r2, #0
 800fa86:	2110      	movs	r1, #16
 800fa88:	485e      	ldr	r0, [pc, #376]	; (800fc04 <main+0x1f4>)
 800fa8a:	f7fb fcab 	bl	800b3e4 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 800fa8e:	f7ff fd81 	bl	800f594 <getChannel>
 800fa92:	4603      	mov	r3, r0
 800fa94:	70fb      	strb	r3, [r7, #3]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800fa96:	2201      	movs	r2, #1
 800fa98:	2120      	movs	r1, #32
 800fa9a:	4859      	ldr	r0, [pc, #356]	; (800fc00 <main+0x1f0>)
 800fa9c:	f7fb fca2 	bl	800b3e4 <HAL_GPIO_WritePin>
 800faa0:	2064      	movs	r0, #100	; 0x64
 800faa2:	f7f9 f9dd 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800faa6:	2200      	movs	r2, #0
 800faa8:	2120      	movs	r1, #32
 800faaa:	4855      	ldr	r0, [pc, #340]	; (800fc00 <main+0x1f0>)
 800faac:	f7fb fc9a 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fab0:	2064      	movs	r0, #100	; 0x64
 800fab2:	f7f9 f9d5 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800fab6:	2201      	movs	r2, #1
 800fab8:	2120      	movs	r1, #32
 800faba:	4851      	ldr	r0, [pc, #324]	; (800fc00 <main+0x1f0>)
 800fabc:	f7fb fc92 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fac0:	2064      	movs	r0, #100	; 0x64
 800fac2:	f7f9 f9cd 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800fac6:	2200      	movs	r2, #0
 800fac8:	2120      	movs	r1, #32
 800faca:	484d      	ldr	r0, [pc, #308]	; (800fc00 <main+0x1f0>)
 800facc:	f7fb fc8a 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fad0:	2064      	movs	r0, #100	; 0x64
 800fad2:	f7f9 f9c5 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800fad6:	2201      	movs	r2, #1
 800fad8:	2120      	movs	r1, #32
 800fada:	4849      	ldr	r0, [pc, #292]	; (800fc00 <main+0x1f0>)
 800fadc:	f7fb fc82 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fae0:	2064      	movs	r0, #100	; 0x64
 800fae2:	f7f9 f9bd 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800fae6:	2200      	movs	r2, #0
 800fae8:	2120      	movs	r1, #32
 800faea:	4845      	ldr	r0, [pc, #276]	; (800fc00 <main+0x1f0>)
 800faec:	f7fb fc7a 	bl	800b3e4 <HAL_GPIO_WritePin>
 800faf0:	2064      	movs	r0, #100	; 0x64
 800faf2:	f7f9 f9b5 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800faf6:	2201      	movs	r2, #1
 800faf8:	2120      	movs	r1, #32
 800fafa:	4841      	ldr	r0, [pc, #260]	; (800fc00 <main+0x1f0>)
 800fafc:	f7fb fc72 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fb00:	2064      	movs	r0, #100	; 0x64
 800fb02:	f7f9 f9ad 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800fb06:	2200      	movs	r2, #0
 800fb08:	2120      	movs	r1, #32
 800fb0a:	483d      	ldr	r0, [pc, #244]	; (800fc00 <main+0x1f0>)
 800fb0c:	f7fb fc6a 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fb10:	2064      	movs	r0, #100	; 0x64
 800fb12:	f7f9 f9a5 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800fb16:	2201      	movs	r2, #1
 800fb18:	2120      	movs	r1, #32
 800fb1a:	4839      	ldr	r0, [pc, #228]	; (800fc00 <main+0x1f0>)
 800fb1c:	f7fb fc62 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fb20:	2064      	movs	r0, #100	; 0x64
 800fb22:	f7f9 f99d 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800fb26:	2200      	movs	r2, #0
 800fb28:	2120      	movs	r1, #32
 800fb2a:	4835      	ldr	r0, [pc, #212]	; (800fc00 <main+0x1f0>)
 800fb2c:	f7fb fc5a 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fb30:	2064      	movs	r0, #100	; 0x64
 800fb32:	f7f9 f995 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800fb36:	2201      	movs	r2, #1
 800fb38:	2120      	movs	r1, #32
 800fb3a:	4831      	ldr	r0, [pc, #196]	; (800fc00 <main+0x1f0>)
 800fb3c:	f7fb fc52 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fb40:	2064      	movs	r0, #100	; 0x64
 800fb42:	f7f9 f98d 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800fb46:	2200      	movs	r2, #0
 800fb48:	2120      	movs	r1, #32
 800fb4a:	482d      	ldr	r0, [pc, #180]	; (800fc00 <main+0x1f0>)
 800fb4c:	f7fb fc4a 	bl	800b3e4 <HAL_GPIO_WritePin>
 800fb50:	2064      	movs	r0, #100	; 0x64
 800fb52:	f7f9 f985 	bl	8008e60 <HAL_Delay>


  ch = getChannel();
 800fb56:	f7ff fd1d 	bl	800f594 <getChannel>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	70bb      	strb	r3, [r7, #2]




  CAN_Init();
 800fb5e:	f7ff fccb 	bl	800f4f8 <CAN_Init>


  SPI_Init();
 800fb62:	f000 fddf 	bl	8010724 <SPI_Init>


  HAL_Delay(100);
 800fb66:	2064      	movs	r0, #100	; 0x64
 800fb68:	f7f9 f97a 	bl	8008e60 <HAL_Delay>


  TIM_Init();
 800fb6c:	f001 fb82 	bl	8011274 <TIM_Init>

  ADC_Init();
 800fb70:	f7ff fa14 	bl	800ef9c <ADC_Init>

  HAL_Delay(10);
 800fb74:	200a      	movs	r0, #10
 800fb76:	f7f9 f973 	bl	8008e60 <HAL_Delay>



  ACR_Start();
 800fb7a:	f7fe fb13 	bl	800e1a4 <ACR_Start>

  setZeroEncoder((p_ch != ch)? 1: 0);
 800fb7e:	78fa      	ldrb	r2, [r7, #3]
 800fb80:	78bb      	ldrb	r3, [r7, #2]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	bf14      	ite	ne
 800fb86:	2301      	movne	r3, #1
 800fb88:	2300      	moveq	r3, #0
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f000 fddb 	bl	8010748 <setZeroEncoder>



  //while(1);

  ASR_Start();
 800fb92:	f7fe fdaf 	bl	800e6f4 <ASR_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(ASR_flg == 1)
 800fb96:	4b1c      	ldr	r3, [pc, #112]	; (800fc08 <main+0x1f8>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d1fb      	bne.n	800fb96 <main+0x186>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 800fb9e:	2110      	movs	r1, #16
 800fba0:	4818      	ldr	r0, [pc, #96]	; (800fc04 <main+0x1f4>)
 800fba2:	f7fb fc38 	bl	800b416 <HAL_GPIO_TogglePin>

		 coggingIq = 0.75f * cos(theta * POLES + 4.14159f);
 800fba6:	4b19      	ldr	r3, [pc, #100]	; (800fc0c <main+0x1fc>)
 800fba8:	edd3 7a00 	vldr	s15, [r3]
 800fbac:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800fbb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbb4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800fc10 <main+0x200>
 800fbb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fbbc:	ee17 0a90 	vmov	r0, s15
 800fbc0:	f7f8 fbf2 	bl	80083a8 <__aeabi_f2d>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	ec44 3b10 	vmov	d0, r3, r4
 800fbcc:	f002 fc1c 	bl	8012408 <cos>
 800fbd0:	ec51 0b10 	vmov	r0, r1, d0
 800fbd4:	f04f 0200 	mov.w	r2, #0
 800fbd8:	4b0e      	ldr	r3, [pc, #56]	; (800fc14 <main+0x204>)
 800fbda:	f7f8 fc3d 	bl	8008458 <__aeabi_dmul>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	f7f8 fef9 	bl	80089dc <__aeabi_d2f>
 800fbea:	4602      	mov	r2, r0
 800fbec:	4b0a      	ldr	r3, [pc, #40]	; (800fc18 <main+0x208>)
 800fbee:	601a      	str	r2, [r3, #0]
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 800fbf0:	f7fe fd8e 	bl	800e710 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 800fbf4:	4b04      	ldr	r3, [pc, #16]	; (800fc08 <main+0x1f8>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 800fbfa:	e7cc      	b.n	800fb96 <main+0x186>
 800fbfc:	08013610 	.word	0x08013610
 800fc00:	40020000 	.word	0x40020000
 800fc04:	40020400 	.word	0x40020400
 800fc08:	20000118 	.word	0x20000118
 800fc0c:	200041dc 	.word	0x200041dc
 800fc10:	408487e8 	.word	0x408487e8
 800fc14:	3fe80000 	.word	0x3fe80000
 800fc18:	20000110 	.word	0x20000110

0800fc1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b094      	sub	sp, #80	; 0x50
 800fc20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fc22:	f107 031c 	add.w	r3, r7, #28
 800fc26:	2234      	movs	r2, #52	; 0x34
 800fc28:	2100      	movs	r1, #0
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f001 fc9b 	bl	8011566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fc30:	f107 0308 	add.w	r3, r7, #8
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	605a      	str	r2, [r3, #4]
 800fc3a:	609a      	str	r2, [r3, #8]
 800fc3c:	60da      	str	r2, [r3, #12]
 800fc3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fc40:	2300      	movs	r3, #0
 800fc42:	607b      	str	r3, [r7, #4]
 800fc44:	4b29      	ldr	r3, [pc, #164]	; (800fcec <SystemClock_Config+0xd0>)
 800fc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc48:	4a28      	ldr	r2, [pc, #160]	; (800fcec <SystemClock_Config+0xd0>)
 800fc4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc4e:	6413      	str	r3, [r2, #64]	; 0x40
 800fc50:	4b26      	ldr	r3, [pc, #152]	; (800fcec <SystemClock_Config+0xd0>)
 800fc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	603b      	str	r3, [r7, #0]
 800fc60:	4b23      	ldr	r3, [pc, #140]	; (800fcf0 <SystemClock_Config+0xd4>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a22      	ldr	r2, [pc, #136]	; (800fcf0 <SystemClock_Config+0xd4>)
 800fc66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fc6a:	6013      	str	r3, [r2, #0]
 800fc6c:	4b20      	ldr	r3, [pc, #128]	; (800fcf0 <SystemClock_Config+0xd4>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fc74:	603b      	str	r3, [r7, #0]
 800fc76:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800fc78:	2302      	movs	r3, #2
 800fc7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800fc80:	2310      	movs	r3, #16
 800fc82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fc84:	2302      	movs	r3, #2
 800fc86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800fc8c:	2310      	movs	r3, #16
 800fc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 800fc90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800fc94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800fc96:	2302      	movs	r3, #2
 800fc98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800fc9e:	2302      	movs	r3, #2
 800fca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fca2:	f107 031c 	add.w	r3, r7, #28
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fb fe86 	bl	800b9b8 <HAL_RCC_OscConfig>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d001      	beq.n	800fcb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800fcb2:	f000 f81f 	bl	800fcf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800fcb6:	230f      	movs	r3, #15
 800fcb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fcba:	2302      	movs	r3, #2
 800fcbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800fcc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800fcc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800fcc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fccc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800fcce:	f107 0308 	add.w	r3, r7, #8
 800fcd2:	2105      	movs	r1, #5
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fb fbb9 	bl	800b44c <HAL_RCC_ClockConfig>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d001      	beq.n	800fce4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800fce0:	f000 f808 	bl	800fcf4 <Error_Handler>
  }
}
 800fce4:	bf00      	nop
 800fce6:	3750      	adds	r7, #80	; 0x50
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	40023800 	.word	0x40023800
 800fcf0:	40007000 	.word	0x40007000

0800fcf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800fcf8:	bf00      	nop
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
	...

0800fd04 <setSVM_dq>:
volatile int sector_SVM = 0;



inline void setSVM_dq()
{
 800fd04:	b5b0      	push	{r4, r5, r7, lr}
 800fd06:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 800fd08:	4bb8      	ldr	r3, [pc, #736]	; (800ffec <setSVM_dq+0x2e8>)
 800fd0a:	ed93 7a00 	vldr	s14, [r3]
 800fd0e:	4bb8      	ldr	r3, [pc, #736]	; (800fff0 <setSVM_dq+0x2ec>)
 800fd10:	edd3 7a00 	vldr	s15, [r3]
 800fd14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd18:	4bb6      	ldr	r3, [pc, #728]	; (800fff4 <setSVM_dq+0x2f0>)
 800fd1a:	edd3 6a00 	vldr	s13, [r3]
 800fd1e:	4bb6      	ldr	r3, [pc, #728]	; (800fff8 <setSVM_dq+0x2f4>)
 800fd20:	edd3 7a00 	vldr	s15, [r3]
 800fd24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd2c:	4bb3      	ldr	r3, [pc, #716]	; (800fffc <setSVM_dq+0x2f8>)
 800fd2e:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 800fd32:	4bae      	ldr	r3, [pc, #696]	; (800ffec <setSVM_dq+0x2e8>)
 800fd34:	ed93 7a00 	vldr	s14, [r3]
 800fd38:	4baf      	ldr	r3, [pc, #700]	; (800fff8 <setSVM_dq+0x2f4>)
 800fd3a:	edd3 7a00 	vldr	s15, [r3]
 800fd3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd42:	4bac      	ldr	r3, [pc, #688]	; (800fff4 <setSVM_dq+0x2f0>)
 800fd44:	edd3 6a00 	vldr	s13, [r3]
 800fd48:	4ba9      	ldr	r3, [pc, #676]	; (800fff0 <setSVM_dq+0x2ec>)
 800fd4a:	edd3 7a00 	vldr	s15, [r3]
 800fd4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd56:	4baa      	ldr	r3, [pc, #680]	; (8010000 <setSVM_dq+0x2fc>)
 800fd58:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 800fd5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd60:	4ba7      	ldr	r3, [pc, #668]	; (8010000 <setSVM_dq+0x2fc>)
 800fd62:	edd3 7a00 	vldr	s15, [r3]
 800fd66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd6a:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8010004 <setSVM_dq+0x300>
 800fd6e:	4ba3      	ldr	r3, [pc, #652]	; (800fffc <setSVM_dq+0x2f8>)
 800fd70:	edd3 7a00 	vldr	s15, [r3]
 800fd74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd7c:	4ba2      	ldr	r3, [pc, #648]	; (8010008 <setSVM_dq+0x304>)
 800fd7e:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 800fd82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fd86:	4b9e      	ldr	r3, [pc, #632]	; (8010000 <setSVM_dq+0x2fc>)
 800fd88:	edd3 7a00 	vldr	s15, [r3]
 800fd8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd90:	eddf 6a9e 	vldr	s13, [pc, #632]	; 801000c <setSVM_dq+0x308>
 800fd94:	4b99      	ldr	r3, [pc, #612]	; (800fffc <setSVM_dq+0x2f8>)
 800fd96:	edd3 7a00 	vldr	s15, [r3]
 800fd9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fda2:	4b9b      	ldr	r3, [pc, #620]	; (8010010 <setSVM_dq+0x30c>)
 800fda4:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 800fda8:	4b97      	ldr	r3, [pc, #604]	; (8010008 <setSVM_dq+0x304>)
 800fdaa:	edd3 7a00 	vldr	s15, [r3]
 800fdae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb6:	db1e      	blt.n	800fdf6 <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 800fdb8:	4b95      	ldr	r3, [pc, #596]	; (8010010 <setSVM_dq+0x30c>)
 800fdba:	edd3 7a00 	vldr	s15, [r3]
 800fdbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc6:	d803      	bhi.n	800fdd0 <setSVM_dq+0xcc>
 800fdc8:	4b92      	ldr	r3, [pc, #584]	; (8010014 <setSVM_dq+0x310>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	e030      	b.n	800fe32 <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 800fdd0:	4b8d      	ldr	r3, [pc, #564]	; (8010008 <setSVM_dq+0x304>)
 800fdd2:	ed93 7a00 	vldr	s14, [r3]
 800fdd6:	4b8e      	ldr	r3, [pc, #568]	; (8010010 <setSVM_dq+0x30c>)
 800fdd8:	edd3 7a00 	vldr	s15, [r3]
 800fddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde4:	db03      	blt.n	800fdee <setSVM_dq+0xea>
 800fde6:	4b8b      	ldr	r3, [pc, #556]	; (8010014 <setSVM_dq+0x310>)
 800fde8:	2201      	movs	r2, #1
 800fdea:	601a      	str	r2, [r3, #0]
 800fdec:	e021      	b.n	800fe32 <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 800fdee:	4b89      	ldr	r3, [pc, #548]	; (8010014 <setSVM_dq+0x310>)
 800fdf0:	2202      	movs	r2, #2
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	e01d      	b.n	800fe32 <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 800fdf6:	4b86      	ldr	r3, [pc, #536]	; (8010010 <setSVM_dq+0x30c>)
 800fdf8:	edd3 7a00 	vldr	s15, [r3]
 800fdfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe04:	db03      	blt.n	800fe0e <setSVM_dq+0x10a>
 800fe06:	4b83      	ldr	r3, [pc, #524]	; (8010014 <setSVM_dq+0x310>)
 800fe08:	2203      	movs	r2, #3
 800fe0a:	601a      	str	r2, [r3, #0]
 800fe0c:	e011      	b.n	800fe32 <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 800fe0e:	4b7e      	ldr	r3, [pc, #504]	; (8010008 <setSVM_dq+0x304>)
 800fe10:	ed93 7a00 	vldr	s14, [r3]
 800fe14:	4b7e      	ldr	r3, [pc, #504]	; (8010010 <setSVM_dq+0x30c>)
 800fe16:	edd3 7a00 	vldr	s15, [r3]
 800fe1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe22:	d803      	bhi.n	800fe2c <setSVM_dq+0x128>
 800fe24:	4b7b      	ldr	r3, [pc, #492]	; (8010014 <setSVM_dq+0x310>)
 800fe26:	2204      	movs	r2, #4
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	e002      	b.n	800fe32 <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 800fe2c:	4b79      	ldr	r3, [pc, #484]	; (8010014 <setSVM_dq+0x310>)
 800fe2e:	2205      	movs	r2, #5
 800fe30:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 800fe32:	4b78      	ldr	r3, [pc, #480]	; (8010014 <setSVM_dq+0x310>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4a78      	ldr	r2, [pc, #480]	; (8010018 <setSVM_dq+0x314>)
 800fe38:	00db      	lsls	r3, r3, #3
 800fe3a:	4413      	add	r3, r2
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4a77      	ldr	r2, [pc, #476]	; (801001c <setSVM_dq+0x318>)
 800fe40:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 800fe42:	4b74      	ldr	r3, [pc, #464]	; (8010014 <setSVM_dq+0x310>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a74      	ldr	r2, [pc, #464]	; (8010018 <setSVM_dq+0x314>)
 800fe48:	00db      	lsls	r3, r3, #3
 800fe4a:	4413      	add	r3, r2
 800fe4c:	3304      	adds	r3, #4
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a73      	ldr	r2, [pc, #460]	; (8010020 <setSVM_dq+0x31c>)
 800fe52:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 800fe54:	4b6f      	ldr	r3, [pc, #444]	; (8010014 <setSVM_dq+0x310>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	4a6f      	ldr	r2, [pc, #444]	; (8010018 <setSVM_dq+0x314>)
 800fe5c:	00db      	lsls	r3, r3, #3
 800fe5e:	4413      	add	r3, r2
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4a70      	ldr	r2, [pc, #448]	; (8010024 <setSVM_dq+0x320>)
 800fe64:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 800fe66:	4b6b      	ldr	r3, [pc, #428]	; (8010014 <setSVM_dq+0x310>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	4a6a      	ldr	r2, [pc, #424]	; (8010018 <setSVM_dq+0x314>)
 800fe6e:	00db      	lsls	r3, r3, #3
 800fe70:	4413      	add	r3, r2
 800fe72:	3304      	adds	r3, #4
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4a6c      	ldr	r2, [pc, #432]	; (8010028 <setSVM_dq+0x324>)
 800fe78:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800fe7a:	4b6b      	ldr	r3, [pc, #428]	; (8010028 <setSVM_dq+0x324>)
 800fe7c:	ed93 7a00 	vldr	s14, [r3]
 800fe80:	4b5e      	ldr	r3, [pc, #376]	; (800fffc <setSVM_dq+0x2f8>)
 800fe82:	edd3 7a00 	vldr	s15, [r3]
 800fe86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe8a:	4b66      	ldr	r3, [pc, #408]	; (8010024 <setSVM_dq+0x320>)
 800fe8c:	edd3 6a00 	vldr	s13, [r3]
 800fe90:	4b5b      	ldr	r3, [pc, #364]	; (8010000 <setSVM_dq+0x2fc>)
 800fe92:	edd3 7a00 	vldr	s15, [r3]
 800fe96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800fe9e:	4b5f      	ldr	r3, [pc, #380]	; (801001c <setSVM_dq+0x318>)
 800fea0:	ed93 7a00 	vldr	s14, [r3]
 800fea4:	4b60      	ldr	r3, [pc, #384]	; (8010028 <setSVM_dq+0x324>)
 800fea6:	edd3 7a00 	vldr	s15, [r3]
 800feaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800feae:	4b5c      	ldr	r3, [pc, #368]	; (8010020 <setSVM_dq+0x31c>)
 800feb0:	ed93 6a00 	vldr	s12, [r3]
 800feb4:	4b5b      	ldr	r3, [pc, #364]	; (8010024 <setSVM_dq+0x320>)
 800feb6:	edd3 7a00 	vldr	s15, [r3]
 800feba:	ee66 7a27 	vmul.f32	s15, s12, s15
 800febe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fec2:	4b5a      	ldr	r3, [pc, #360]	; (801002c <setSVM_dq+0x328>)
 800fec4:	edd3 7a00 	vldr	s15, [r3]
 800fec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fed0:	4b57      	ldr	r3, [pc, #348]	; (8010030 <setSVM_dq+0x32c>)
 800fed2:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800fed6:	4b52      	ldr	r3, [pc, #328]	; (8010020 <setSVM_dq+0x31c>)
 800fed8:	edd3 7a00 	vldr	s15, [r3]
 800fedc:	eeb1 7a67 	vneg.f32	s14, s15
 800fee0:	4b46      	ldr	r3, [pc, #280]	; (800fffc <setSVM_dq+0x2f8>)
 800fee2:	edd3 7a00 	vldr	s15, [r3]
 800fee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800feea:	4b4c      	ldr	r3, [pc, #304]	; (801001c <setSVM_dq+0x318>)
 800feec:	edd3 6a00 	vldr	s13, [r3]
 800fef0:	4b43      	ldr	r3, [pc, #268]	; (8010000 <setSVM_dq+0x2fc>)
 800fef2:	edd3 7a00 	vldr	s15, [r3]
 800fef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fefa:	ee77 6a27 	vadd.f32	s13, s14, s15
 800fefe:	4b47      	ldr	r3, [pc, #284]	; (801001c <setSVM_dq+0x318>)
 800ff00:	ed93 7a00 	vldr	s14, [r3]
 800ff04:	4b48      	ldr	r3, [pc, #288]	; (8010028 <setSVM_dq+0x324>)
 800ff06:	edd3 7a00 	vldr	s15, [r3]
 800ff0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff0e:	4b44      	ldr	r3, [pc, #272]	; (8010020 <setSVM_dq+0x31c>)
 800ff10:	ed93 6a00 	vldr	s12, [r3]
 800ff14:	4b43      	ldr	r3, [pc, #268]	; (8010024 <setSVM_dq+0x320>)
 800ff16:	edd3 7a00 	vldr	s15, [r3]
 800ff1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ff1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff22:	4b42      	ldr	r3, [pc, #264]	; (801002c <setSVM_dq+0x328>)
 800ff24:	edd3 7a00 	vldr	s15, [r3]
 800ff28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff30:	4b40      	ldr	r3, [pc, #256]	; (8010034 <setSVM_dq+0x330>)
 800ff32:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 800ff36:	4b37      	ldr	r3, [pc, #220]	; (8010014 <setSVM_dq+0x310>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2b05      	cmp	r3, #5
 800ff3c:	f200 81e0 	bhi.w	8010300 <setSVM_dq+0x5fc>
 800ff40:	a201      	add	r2, pc, #4	; (adr r2, 800ff48 <setSVM_dq+0x244>)
 800ff42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff46:	bf00      	nop
 800ff48:	0800ff61 	.word	0x0800ff61
 800ff4c:	08010045 	.word	0x08010045
 800ff50:	080100d1 	.word	0x080100d1
 800ff54:	0801015d 	.word	0x0801015d
 800ff58:	080101e9 	.word	0x080101e9
 800ff5c:	08010275 	.word	0x08010275
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 800ff60:	4b33      	ldr	r3, [pc, #204]	; (8010030 <setSVM_dq+0x32c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7f8 fa1f 	bl	80083a8 <__aeabi_f2d>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	461a      	mov	r2, r3
 800ff70:	4623      	mov	r3, r4
 800ff72:	f04f 0000 	mov.w	r0, #0
 800ff76:	4930      	ldr	r1, [pc, #192]	; (8010038 <setSVM_dq+0x334>)
 800ff78:	f7f8 f8b6 	bl	80080e8 <__aeabi_dsub>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	460c      	mov	r4, r1
 800ff80:	4625      	mov	r5, r4
 800ff82:	461c      	mov	r4, r3
 800ff84:	4b2b      	ldr	r3, [pc, #172]	; (8010034 <setSVM_dq+0x330>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7f8 fa0d 	bl	80083a8 <__aeabi_f2d>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4620      	mov	r0, r4
 800ff94:	4629      	mov	r1, r5
 800ff96:	f7f8 f8a7 	bl	80080e8 <__aeabi_dsub>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	460c      	mov	r4, r1
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	4621      	mov	r1, r4
 800ffa2:	f04f 0200 	mov.w	r2, #0
 800ffa6:	4b25      	ldr	r3, [pc, #148]	; (801003c <setSVM_dq+0x338>)
 800ffa8:	f7f8 fa56 	bl	8008458 <__aeabi_dmul>
 800ffac:	4603      	mov	r3, r0
 800ffae:	460c      	mov	r4, r1
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	f7f8 fd12 	bl	80089dc <__aeabi_d2f>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	4b21      	ldr	r3, [pc, #132]	; (8010040 <setSVM_dq+0x33c>)
 800ffbc:	609a      	str	r2, [r3, #8]
 800ffbe:	4b20      	ldr	r3, [pc, #128]	; (8010040 <setSVM_dq+0x33c>)
 800ffc0:	ed93 7a02 	vldr	s14, [r3, #8]
 800ffc4:	4b1b      	ldr	r3, [pc, #108]	; (8010034 <setSVM_dq+0x330>)
 800ffc6:	edd3 7a00 	vldr	s15, [r3]
 800ffca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffce:	4b1c      	ldr	r3, [pc, #112]	; (8010040 <setSVM_dq+0x33c>)
 800ffd0:	edc3 7a01 	vstr	s15, [r3, #4]
 800ffd4:	4b1a      	ldr	r3, [pc, #104]	; (8010040 <setSVM_dq+0x33c>)
 800ffd6:	ed93 7a01 	vldr	s14, [r3, #4]
 800ffda:	4b15      	ldr	r3, [pc, #84]	; (8010030 <setSVM_dq+0x32c>)
 800ffdc:	edd3 7a00 	vldr	s15, [r3]
 800ffe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffe4:	4b16      	ldr	r3, [pc, #88]	; (8010040 <setSVM_dq+0x33c>)
 800ffe6:	edc3 7a00 	vstr	s15, [r3]
 800ffea:	e189      	b.n	8010300 <setSVM_dq+0x5fc>
 800ffec:	2000418c 	.word	0x2000418c
 800fff0:	20000034 	.word	0x20000034
 800fff4:	20004190 	.word	0x20004190
 800fff8:	200041e4 	.word	0x200041e4
 800fffc:	20004198 	.word	0x20004198
 8010000:	2000419c 	.word	0x2000419c
 8010004:	00000000 	.word	0x00000000
 8010008:	200041a0 	.word	0x200041a0
 801000c:	3f5db22d 	.word	0x3f5db22d
 8010010:	200041a4 	.word	0x200041a4
 8010014:	20004194 	.word	0x20004194
 8010018:	08013708 	.word	0x08013708
 801001c:	200041a8 	.word	0x200041a8
 8010020:	200041ac 	.word	0x200041ac
 8010024:	200041b0 	.word	0x200041b0
 8010028:	200041b4 	.word	0x200041b4
 801002c:	20000030 	.word	0x20000030
 8010030:	200041b8 	.word	0x200041b8
 8010034:	200041bc 	.word	0x200041bc
 8010038:	3ff00000 	.word	0x3ff00000
 801003c:	3fe00000 	.word	0x3fe00000
 8010040:	200041c0 	.word	0x200041c0
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 8010044:	4bc3      	ldr	r3, [pc, #780]	; (8010354 <setSVM_dq+0x650>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4618      	mov	r0, r3
 801004a:	f7f8 f9ad 	bl	80083a8 <__aeabi_f2d>
 801004e:	4603      	mov	r3, r0
 8010050:	460c      	mov	r4, r1
 8010052:	461a      	mov	r2, r3
 8010054:	4623      	mov	r3, r4
 8010056:	f04f 0000 	mov.w	r0, #0
 801005a:	49bf      	ldr	r1, [pc, #764]	; (8010358 <setSVM_dq+0x654>)
 801005c:	f7f8 f844 	bl	80080e8 <__aeabi_dsub>
 8010060:	4603      	mov	r3, r0
 8010062:	460c      	mov	r4, r1
 8010064:	4625      	mov	r5, r4
 8010066:	461c      	mov	r4, r3
 8010068:	4bbc      	ldr	r3, [pc, #752]	; (801035c <setSVM_dq+0x658>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4618      	mov	r0, r3
 801006e:	f7f8 f99b 	bl	80083a8 <__aeabi_f2d>
 8010072:	4602      	mov	r2, r0
 8010074:	460b      	mov	r3, r1
 8010076:	4620      	mov	r0, r4
 8010078:	4629      	mov	r1, r5
 801007a:	f7f8 f835 	bl	80080e8 <__aeabi_dsub>
 801007e:	4603      	mov	r3, r0
 8010080:	460c      	mov	r4, r1
 8010082:	4618      	mov	r0, r3
 8010084:	4621      	mov	r1, r4
 8010086:	f04f 0200 	mov.w	r2, #0
 801008a:	4bb5      	ldr	r3, [pc, #724]	; (8010360 <setSVM_dq+0x65c>)
 801008c:	f7f8 f9e4 	bl	8008458 <__aeabi_dmul>
 8010090:	4603      	mov	r3, r0
 8010092:	460c      	mov	r4, r1
 8010094:	4618      	mov	r0, r3
 8010096:	4621      	mov	r1, r4
 8010098:	f7f8 fca0 	bl	80089dc <__aeabi_d2f>
 801009c:	4602      	mov	r2, r0
 801009e:	4bb1      	ldr	r3, [pc, #708]	; (8010364 <setSVM_dq+0x660>)
 80100a0:	609a      	str	r2, [r3, #8]
 80100a2:	4bb0      	ldr	r3, [pc, #704]	; (8010364 <setSVM_dq+0x660>)
 80100a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80100a8:	4baa      	ldr	r3, [pc, #680]	; (8010354 <setSVM_dq+0x650>)
 80100aa:	edd3 7a00 	vldr	s15, [r3]
 80100ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100b2:	4bac      	ldr	r3, [pc, #688]	; (8010364 <setSVM_dq+0x660>)
 80100b4:	edc3 7a00 	vstr	s15, [r3]
 80100b8:	4baa      	ldr	r3, [pc, #680]	; (8010364 <setSVM_dq+0x660>)
 80100ba:	ed93 7a00 	vldr	s14, [r3]
 80100be:	4ba7      	ldr	r3, [pc, #668]	; (801035c <setSVM_dq+0x658>)
 80100c0:	edd3 7a00 	vldr	s15, [r3]
 80100c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100c8:	4ba6      	ldr	r3, [pc, #664]	; (8010364 <setSVM_dq+0x660>)
 80100ca:	edc3 7a01 	vstr	s15, [r3, #4]
 80100ce:	e117      	b.n	8010300 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 80100d0:	4ba0      	ldr	r3, [pc, #640]	; (8010354 <setSVM_dq+0x650>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7f8 f967 	bl	80083a8 <__aeabi_f2d>
 80100da:	4603      	mov	r3, r0
 80100dc:	460c      	mov	r4, r1
 80100de:	461a      	mov	r2, r3
 80100e0:	4623      	mov	r3, r4
 80100e2:	f04f 0000 	mov.w	r0, #0
 80100e6:	499c      	ldr	r1, [pc, #624]	; (8010358 <setSVM_dq+0x654>)
 80100e8:	f7f7 fffe 	bl	80080e8 <__aeabi_dsub>
 80100ec:	4603      	mov	r3, r0
 80100ee:	460c      	mov	r4, r1
 80100f0:	4625      	mov	r5, r4
 80100f2:	461c      	mov	r4, r3
 80100f4:	4b99      	ldr	r3, [pc, #612]	; (801035c <setSVM_dq+0x658>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7f8 f955 	bl	80083a8 <__aeabi_f2d>
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	4620      	mov	r0, r4
 8010104:	4629      	mov	r1, r5
 8010106:	f7f7 ffef 	bl	80080e8 <__aeabi_dsub>
 801010a:	4603      	mov	r3, r0
 801010c:	460c      	mov	r4, r1
 801010e:	4618      	mov	r0, r3
 8010110:	4621      	mov	r1, r4
 8010112:	f04f 0200 	mov.w	r2, #0
 8010116:	4b92      	ldr	r3, [pc, #584]	; (8010360 <setSVM_dq+0x65c>)
 8010118:	f7f8 f99e 	bl	8008458 <__aeabi_dmul>
 801011c:	4603      	mov	r3, r0
 801011e:	460c      	mov	r4, r1
 8010120:	4618      	mov	r0, r3
 8010122:	4621      	mov	r1, r4
 8010124:	f7f8 fc5a 	bl	80089dc <__aeabi_d2f>
 8010128:	4602      	mov	r2, r0
 801012a:	4b8e      	ldr	r3, [pc, #568]	; (8010364 <setSVM_dq+0x660>)
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	4b8d      	ldr	r3, [pc, #564]	; (8010364 <setSVM_dq+0x660>)
 8010130:	ed93 7a00 	vldr	s14, [r3]
 8010134:	4b89      	ldr	r3, [pc, #548]	; (801035c <setSVM_dq+0x658>)
 8010136:	edd3 7a00 	vldr	s15, [r3]
 801013a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801013e:	4b89      	ldr	r3, [pc, #548]	; (8010364 <setSVM_dq+0x660>)
 8010140:	edc3 7a02 	vstr	s15, [r3, #8]
 8010144:	4b87      	ldr	r3, [pc, #540]	; (8010364 <setSVM_dq+0x660>)
 8010146:	ed93 7a02 	vldr	s14, [r3, #8]
 801014a:	4b82      	ldr	r3, [pc, #520]	; (8010354 <setSVM_dq+0x650>)
 801014c:	edd3 7a00 	vldr	s15, [r3]
 8010150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010154:	4b83      	ldr	r3, [pc, #524]	; (8010364 <setSVM_dq+0x660>)
 8010156:	edc3 7a01 	vstr	s15, [r3, #4]
 801015a:	e0d1      	b.n	8010300 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 801015c:	4b7d      	ldr	r3, [pc, #500]	; (8010354 <setSVM_dq+0x650>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4618      	mov	r0, r3
 8010162:	f7f8 f921 	bl	80083a8 <__aeabi_f2d>
 8010166:	4603      	mov	r3, r0
 8010168:	460c      	mov	r4, r1
 801016a:	461a      	mov	r2, r3
 801016c:	4623      	mov	r3, r4
 801016e:	f04f 0000 	mov.w	r0, #0
 8010172:	4979      	ldr	r1, [pc, #484]	; (8010358 <setSVM_dq+0x654>)
 8010174:	f7f7 ffb8 	bl	80080e8 <__aeabi_dsub>
 8010178:	4603      	mov	r3, r0
 801017a:	460c      	mov	r4, r1
 801017c:	4625      	mov	r5, r4
 801017e:	461c      	mov	r4, r3
 8010180:	4b76      	ldr	r3, [pc, #472]	; (801035c <setSVM_dq+0x658>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4618      	mov	r0, r3
 8010186:	f7f8 f90f 	bl	80083a8 <__aeabi_f2d>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	4620      	mov	r0, r4
 8010190:	4629      	mov	r1, r5
 8010192:	f7f7 ffa9 	bl	80080e8 <__aeabi_dsub>
 8010196:	4603      	mov	r3, r0
 8010198:	460c      	mov	r4, r1
 801019a:	4618      	mov	r0, r3
 801019c:	4621      	mov	r1, r4
 801019e:	f04f 0200 	mov.w	r2, #0
 80101a2:	4b6f      	ldr	r3, [pc, #444]	; (8010360 <setSVM_dq+0x65c>)
 80101a4:	f7f8 f958 	bl	8008458 <__aeabi_dmul>
 80101a8:	4603      	mov	r3, r0
 80101aa:	460c      	mov	r4, r1
 80101ac:	4618      	mov	r0, r3
 80101ae:	4621      	mov	r1, r4
 80101b0:	f7f8 fc14 	bl	80089dc <__aeabi_d2f>
 80101b4:	4602      	mov	r2, r0
 80101b6:	4b6b      	ldr	r3, [pc, #428]	; (8010364 <setSVM_dq+0x660>)
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	4b6a      	ldr	r3, [pc, #424]	; (8010364 <setSVM_dq+0x660>)
 80101bc:	ed93 7a00 	vldr	s14, [r3]
 80101c0:	4b64      	ldr	r3, [pc, #400]	; (8010354 <setSVM_dq+0x650>)
 80101c2:	edd3 7a00 	vldr	s15, [r3]
 80101c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101ca:	4b66      	ldr	r3, [pc, #408]	; (8010364 <setSVM_dq+0x660>)
 80101cc:	edc3 7a01 	vstr	s15, [r3, #4]
 80101d0:	4b64      	ldr	r3, [pc, #400]	; (8010364 <setSVM_dq+0x660>)
 80101d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80101d6:	4b61      	ldr	r3, [pc, #388]	; (801035c <setSVM_dq+0x658>)
 80101d8:	edd3 7a00 	vldr	s15, [r3]
 80101dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101e0:	4b60      	ldr	r3, [pc, #384]	; (8010364 <setSVM_dq+0x660>)
 80101e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80101e6:	e08b      	b.n	8010300 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 80101e8:	4b5a      	ldr	r3, [pc, #360]	; (8010354 <setSVM_dq+0x650>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7f8 f8db 	bl	80083a8 <__aeabi_f2d>
 80101f2:	4603      	mov	r3, r0
 80101f4:	460c      	mov	r4, r1
 80101f6:	461a      	mov	r2, r3
 80101f8:	4623      	mov	r3, r4
 80101fa:	f04f 0000 	mov.w	r0, #0
 80101fe:	4956      	ldr	r1, [pc, #344]	; (8010358 <setSVM_dq+0x654>)
 8010200:	f7f7 ff72 	bl	80080e8 <__aeabi_dsub>
 8010204:	4603      	mov	r3, r0
 8010206:	460c      	mov	r4, r1
 8010208:	4625      	mov	r5, r4
 801020a:	461c      	mov	r4, r3
 801020c:	4b53      	ldr	r3, [pc, #332]	; (801035c <setSVM_dq+0x658>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4618      	mov	r0, r3
 8010212:	f7f8 f8c9 	bl	80083a8 <__aeabi_f2d>
 8010216:	4602      	mov	r2, r0
 8010218:	460b      	mov	r3, r1
 801021a:	4620      	mov	r0, r4
 801021c:	4629      	mov	r1, r5
 801021e:	f7f7 ff63 	bl	80080e8 <__aeabi_dsub>
 8010222:	4603      	mov	r3, r0
 8010224:	460c      	mov	r4, r1
 8010226:	4618      	mov	r0, r3
 8010228:	4621      	mov	r1, r4
 801022a:	f04f 0200 	mov.w	r2, #0
 801022e:	4b4c      	ldr	r3, [pc, #304]	; (8010360 <setSVM_dq+0x65c>)
 8010230:	f7f8 f912 	bl	8008458 <__aeabi_dmul>
 8010234:	4603      	mov	r3, r0
 8010236:	460c      	mov	r4, r1
 8010238:	4618      	mov	r0, r3
 801023a:	4621      	mov	r1, r4
 801023c:	f7f8 fbce 	bl	80089dc <__aeabi_d2f>
 8010240:	4602      	mov	r2, r0
 8010242:	4b48      	ldr	r3, [pc, #288]	; (8010364 <setSVM_dq+0x660>)
 8010244:	605a      	str	r2, [r3, #4]
 8010246:	4b47      	ldr	r3, [pc, #284]	; (8010364 <setSVM_dq+0x660>)
 8010248:	ed93 7a01 	vldr	s14, [r3, #4]
 801024c:	4b43      	ldr	r3, [pc, #268]	; (801035c <setSVM_dq+0x658>)
 801024e:	edd3 7a00 	vldr	s15, [r3]
 8010252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010256:	4b43      	ldr	r3, [pc, #268]	; (8010364 <setSVM_dq+0x660>)
 8010258:	edc3 7a00 	vstr	s15, [r3]
 801025c:	4b41      	ldr	r3, [pc, #260]	; (8010364 <setSVM_dq+0x660>)
 801025e:	ed93 7a00 	vldr	s14, [r3]
 8010262:	4b3c      	ldr	r3, [pc, #240]	; (8010354 <setSVM_dq+0x650>)
 8010264:	edd3 7a00 	vldr	s15, [r3]
 8010268:	ee77 7a27 	vadd.f32	s15, s14, s15
 801026c:	4b3d      	ldr	r3, [pc, #244]	; (8010364 <setSVM_dq+0x660>)
 801026e:	edc3 7a02 	vstr	s15, [r3, #8]
 8010272:	e045      	b.n	8010300 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8010274:	4b37      	ldr	r3, [pc, #220]	; (8010354 <setSVM_dq+0x650>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4618      	mov	r0, r3
 801027a:	f7f8 f895 	bl	80083a8 <__aeabi_f2d>
 801027e:	4603      	mov	r3, r0
 8010280:	460c      	mov	r4, r1
 8010282:	461a      	mov	r2, r3
 8010284:	4623      	mov	r3, r4
 8010286:	f04f 0000 	mov.w	r0, #0
 801028a:	4933      	ldr	r1, [pc, #204]	; (8010358 <setSVM_dq+0x654>)
 801028c:	f7f7 ff2c 	bl	80080e8 <__aeabi_dsub>
 8010290:	4603      	mov	r3, r0
 8010292:	460c      	mov	r4, r1
 8010294:	4625      	mov	r5, r4
 8010296:	461c      	mov	r4, r3
 8010298:	4b30      	ldr	r3, [pc, #192]	; (801035c <setSVM_dq+0x658>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4618      	mov	r0, r3
 801029e:	f7f8 f883 	bl	80083a8 <__aeabi_f2d>
 80102a2:	4602      	mov	r2, r0
 80102a4:	460b      	mov	r3, r1
 80102a6:	4620      	mov	r0, r4
 80102a8:	4629      	mov	r1, r5
 80102aa:	f7f7 ff1d 	bl	80080e8 <__aeabi_dsub>
 80102ae:	4603      	mov	r3, r0
 80102b0:	460c      	mov	r4, r1
 80102b2:	4618      	mov	r0, r3
 80102b4:	4621      	mov	r1, r4
 80102b6:	f04f 0200 	mov.w	r2, #0
 80102ba:	4b29      	ldr	r3, [pc, #164]	; (8010360 <setSVM_dq+0x65c>)
 80102bc:	f7f8 f8cc 	bl	8008458 <__aeabi_dmul>
 80102c0:	4603      	mov	r3, r0
 80102c2:	460c      	mov	r4, r1
 80102c4:	4618      	mov	r0, r3
 80102c6:	4621      	mov	r1, r4
 80102c8:	f7f8 fb88 	bl	80089dc <__aeabi_d2f>
 80102cc:	4602      	mov	r2, r0
 80102ce:	4b25      	ldr	r3, [pc, #148]	; (8010364 <setSVM_dq+0x660>)
 80102d0:	605a      	str	r2, [r3, #4]
 80102d2:	4b24      	ldr	r3, [pc, #144]	; (8010364 <setSVM_dq+0x660>)
 80102d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80102d8:	4b1e      	ldr	r3, [pc, #120]	; (8010354 <setSVM_dq+0x650>)
 80102da:	edd3 7a00 	vldr	s15, [r3]
 80102de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102e2:	4b20      	ldr	r3, [pc, #128]	; (8010364 <setSVM_dq+0x660>)
 80102e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80102e8:	4b1e      	ldr	r3, [pc, #120]	; (8010364 <setSVM_dq+0x660>)
 80102ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80102ee:	4b1b      	ldr	r3, [pc, #108]	; (801035c <setSVM_dq+0x658>)
 80102f0:	edd3 7a00 	vldr	s15, [r3]
 80102f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102f8:	4b1a      	ldr	r3, [pc, #104]	; (8010364 <setSVM_dq+0x660>)
 80102fa:	edc3 7a00 	vstr	s15, [r3]
 80102fe:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8010300:	4b18      	ldr	r3, [pc, #96]	; (8010364 <setSVM_dq+0x660>)
 8010302:	edd3 7a00 	vldr	s15, [r3]
 8010306:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801030a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010312:	d503      	bpl.n	801031c <setSVM_dq+0x618>
 8010314:	4b13      	ldr	r3, [pc, #76]	; (8010364 <setSVM_dq+0x660>)
 8010316:	4a14      	ldr	r2, [pc, #80]	; (8010368 <setSVM_dq+0x664>)
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	e00d      	b.n	8010338 <setSVM_dq+0x634>
 801031c:	4b11      	ldr	r3, [pc, #68]	; (8010364 <setSVM_dq+0x660>)
 801031e:	edd3 7a00 	vldr	s15, [r3]
 8010322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010326:	eef4 7ac7 	vcmpe.f32	s15, s14
 801032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032e:	dd03      	ble.n	8010338 <setSVM_dq+0x634>
 8010330:	4b0c      	ldr	r3, [pc, #48]	; (8010364 <setSVM_dq+0x660>)
 8010332:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010336:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8010338:	4b0a      	ldr	r3, [pc, #40]	; (8010364 <setSVM_dq+0x660>)
 801033a:	edd3 7a01 	vldr	s15, [r3, #4]
 801033e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034a:	d50f      	bpl.n	801036c <setSVM_dq+0x668>
 801034c:	4b05      	ldr	r3, [pc, #20]	; (8010364 <setSVM_dq+0x660>)
 801034e:	4a06      	ldr	r2, [pc, #24]	; (8010368 <setSVM_dq+0x664>)
 8010350:	605a      	str	r2, [r3, #4]
 8010352:	e019      	b.n	8010388 <setSVM_dq+0x684>
 8010354:	200041b8 	.word	0x200041b8
 8010358:	3ff00000 	.word	0x3ff00000
 801035c:	200041bc 	.word	0x200041bc
 8010360:	3fe00000 	.word	0x3fe00000
 8010364:	200041c0 	.word	0x200041c0
 8010368:	bf800000 	.word	0xbf800000
 801036c:	4b35      	ldr	r3, [pc, #212]	; (8010444 <setSVM_dq+0x740>)
 801036e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010376:	eef4 7ac7 	vcmpe.f32	s15, s14
 801037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037e:	dd03      	ble.n	8010388 <setSVM_dq+0x684>
 8010380:	4b30      	ldr	r3, [pc, #192]	; (8010444 <setSVM_dq+0x740>)
 8010382:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010386:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8010388:	4b2e      	ldr	r3, [pc, #184]	; (8010444 <setSVM_dq+0x740>)
 801038a:	edd3 7a02 	vldr	s15, [r3, #8]
 801038e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039a:	d503      	bpl.n	80103a4 <setSVM_dq+0x6a0>
 801039c:	4b29      	ldr	r3, [pc, #164]	; (8010444 <setSVM_dq+0x740>)
 801039e:	4a2a      	ldr	r2, [pc, #168]	; (8010448 <setSVM_dq+0x744>)
 80103a0:	609a      	str	r2, [r3, #8]
 80103a2:	e00d      	b.n	80103c0 <setSVM_dq+0x6bc>
 80103a4:	4b27      	ldr	r3, [pc, #156]	; (8010444 <setSVM_dq+0x740>)
 80103a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80103aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b6:	dd03      	ble.n	80103c0 <setSVM_dq+0x6bc>
 80103b8:	4b22      	ldr	r3, [pc, #136]	; (8010444 <setSVM_dq+0x740>)
 80103ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80103be:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 80103c0:	4b20      	ldr	r3, [pc, #128]	; (8010444 <setSVM_dq+0x740>)
 80103c2:	edd3 7a00 	vldr	s15, [r3]
 80103c6:	4b21      	ldr	r3, [pc, #132]	; (801044c <setSVM_dq+0x748>)
 80103c8:	edc3 7a00 	vstr	s15, [r3]
 80103cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103d4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8010450 <setSVM_dq+0x74c>
 80103d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103dc:	4b1d      	ldr	r3, [pc, #116]	; (8010454 <setSVM_dq+0x750>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103e4:	ee17 2a90 	vmov	r2, s15
 80103e8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 80103ea:	4b16      	ldr	r3, [pc, #88]	; (8010444 <setSVM_dq+0x740>)
 80103ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80103f0:	4b19      	ldr	r3, [pc, #100]	; (8010458 <setSVM_dq+0x754>)
 80103f2:	edc3 7a00 	vstr	s15, [r3]
 80103f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103fe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8010450 <setSVM_dq+0x74c>
 8010402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010406:	4b13      	ldr	r3, [pc, #76]	; (8010454 <setSVM_dq+0x750>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801040e:	ee17 2a90 	vmov	r2, s15
 8010412:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 8010414:	4b0b      	ldr	r3, [pc, #44]	; (8010444 <setSVM_dq+0x740>)
 8010416:	edd3 7a02 	vldr	s15, [r3, #8]
 801041a:	4b10      	ldr	r3, [pc, #64]	; (801045c <setSVM_dq+0x758>)
 801041c:	edc3 7a00 	vstr	s15, [r3]
 8010420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010428:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8010450 <setSVM_dq+0x74c>
 801042c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010430:	4b08      	ldr	r3, [pc, #32]	; (8010454 <setSVM_dq+0x750>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010438:	ee17 2a90 	vmov	r2, s15
 801043c:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 801043e:	bf00      	nop
}
 8010440:	bdb0      	pop	{r4, r5, r7, pc}
 8010442:	bf00      	nop
 8010444:	200041c0 	.word	0x200041c0
 8010448:	bf800000 	.word	0xbf800000
 801044c:	200041f0 	.word	0x200041f0
 8010450:	45fa0000 	.word	0x45fa0000
 8010454:	20004560 	.word	0x20004560
 8010458:	200041f4 	.word	0x200041f4
 801045c:	200041f8 	.word	0x200041f8

08010460 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8010464:	4b18      	ldr	r3, [pc, #96]	; (80104c8 <MX_SPI2_Init+0x68>)
 8010466:	4a19      	ldr	r2, [pc, #100]	; (80104cc <MX_SPI2_Init+0x6c>)
 8010468:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801046a:	4b17      	ldr	r3, [pc, #92]	; (80104c8 <MX_SPI2_Init+0x68>)
 801046c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010470:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010472:	4b15      	ldr	r3, [pc, #84]	; (80104c8 <MX_SPI2_Init+0x68>)
 8010474:	2200      	movs	r2, #0
 8010476:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8010478:	4b13      	ldr	r3, [pc, #76]	; (80104c8 <MX_SPI2_Init+0x68>)
 801047a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801047e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010480:	4b11      	ldr	r3, [pc, #68]	; (80104c8 <MX_SPI2_Init+0x68>)
 8010482:	2200      	movs	r2, #0
 8010484:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8010486:	4b10      	ldr	r3, [pc, #64]	; (80104c8 <MX_SPI2_Init+0x68>)
 8010488:	2201      	movs	r2, #1
 801048a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801048c:	4b0e      	ldr	r3, [pc, #56]	; (80104c8 <MX_SPI2_Init+0x68>)
 801048e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010492:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010494:	4b0c      	ldr	r3, [pc, #48]	; (80104c8 <MX_SPI2_Init+0x68>)
 8010496:	2218      	movs	r2, #24
 8010498:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801049a:	4b0b      	ldr	r3, [pc, #44]	; (80104c8 <MX_SPI2_Init+0x68>)
 801049c:	2200      	movs	r2, #0
 801049e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80104a0:	4b09      	ldr	r3, [pc, #36]	; (80104c8 <MX_SPI2_Init+0x68>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80104a6:	4b08      	ldr	r3, [pc, #32]	; (80104c8 <MX_SPI2_Init+0x68>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80104ac:	4b06      	ldr	r3, [pc, #24]	; (80104c8 <MX_SPI2_Init+0x68>)
 80104ae:	220a      	movs	r2, #10
 80104b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80104b2:	4805      	ldr	r0, [pc, #20]	; (80104c8 <MX_SPI2_Init+0x68>)
 80104b4:	f7fb fcda 	bl	800be6c <HAL_SPI_Init>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d001      	beq.n	80104c2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80104be:	f7ff fc19 	bl	800fcf4 <Error_Handler>
  }

}
 80104c2:	bf00      	nop
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	200044ac 	.word	0x200044ac
 80104cc:	40003800 	.word	0x40003800

080104d0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80104d4:	4b17      	ldr	r3, [pc, #92]	; (8010534 <MX_SPI3_Init+0x64>)
 80104d6:	4a18      	ldr	r2, [pc, #96]	; (8010538 <MX_SPI3_Init+0x68>)
 80104d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80104da:	4b16      	ldr	r3, [pc, #88]	; (8010534 <MX_SPI3_Init+0x64>)
 80104dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80104e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80104e2:	4b14      	ldr	r3, [pc, #80]	; (8010534 <MX_SPI3_Init+0x64>)
 80104e4:	2200      	movs	r2, #0
 80104e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80104e8:	4b12      	ldr	r3, [pc, #72]	; (8010534 <MX_SPI3_Init+0x64>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80104ee:	4b11      	ldr	r3, [pc, #68]	; (8010534 <MX_SPI3_Init+0x64>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80104f4:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <MX_SPI3_Init+0x64>)
 80104f6:	2200      	movs	r2, #0
 80104f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80104fa:	4b0e      	ldr	r3, [pc, #56]	; (8010534 <MX_SPI3_Init+0x64>)
 80104fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010500:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010502:	4b0c      	ldr	r3, [pc, #48]	; (8010534 <MX_SPI3_Init+0x64>)
 8010504:	2200      	movs	r2, #0
 8010506:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010508:	4b0a      	ldr	r3, [pc, #40]	; (8010534 <MX_SPI3_Init+0x64>)
 801050a:	2200      	movs	r2, #0
 801050c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 801050e:	4b09      	ldr	r3, [pc, #36]	; (8010534 <MX_SPI3_Init+0x64>)
 8010510:	2200      	movs	r2, #0
 8010512:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010514:	4b07      	ldr	r3, [pc, #28]	; (8010534 <MX_SPI3_Init+0x64>)
 8010516:	2200      	movs	r2, #0
 8010518:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 801051a:	4b06      	ldr	r3, [pc, #24]	; (8010534 <MX_SPI3_Init+0x64>)
 801051c:	220a      	movs	r2, #10
 801051e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8010520:	4804      	ldr	r0, [pc, #16]	; (8010534 <MX_SPI3_Init+0x64>)
 8010522:	f7fb fca3 	bl	800be6c <HAL_SPI_Init>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 801052c:	f7ff fbe2 	bl	800fcf4 <Error_Handler>
  }

}
 8010530:	bf00      	nop
 8010532:	bd80      	pop	{r7, pc}
 8010534:	20004504 	.word	0x20004504
 8010538:	40003c00 	.word	0x40003c00

0801053c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b08e      	sub	sp, #56	; 0x38
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010548:	2200      	movs	r2, #0
 801054a:	601a      	str	r2, [r3, #0]
 801054c:	605a      	str	r2, [r3, #4]
 801054e:	609a      	str	r2, [r3, #8]
 8010550:	60da      	str	r2, [r3, #12]
 8010552:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a6c      	ldr	r2, [pc, #432]	; (801070c <HAL_SPI_MspInit+0x1d0>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d163      	bne.n	8010626 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801055e:	2300      	movs	r3, #0
 8010560:	623b      	str	r3, [r7, #32]
 8010562:	4b6b      	ldr	r3, [pc, #428]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010566:	4a6a      	ldr	r2, [pc, #424]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801056c:	6413      	str	r3, [r2, #64]	; 0x40
 801056e:	4b68      	ldr	r3, [pc, #416]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010576:	623b      	str	r3, [r7, #32]
 8010578:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801057a:	2300      	movs	r3, #0
 801057c:	61fb      	str	r3, [r7, #28]
 801057e:	4b64      	ldr	r3, [pc, #400]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010582:	4a63      	ldr	r2, [pc, #396]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010584:	f043 0304 	orr.w	r3, r3, #4
 8010588:	6313      	str	r3, [r2, #48]	; 0x30
 801058a:	4b61      	ldr	r3, [pc, #388]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058e:	f003 0304 	and.w	r3, r3, #4
 8010592:	61fb      	str	r3, [r7, #28]
 8010594:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010596:	2300      	movs	r3, #0
 8010598:	61bb      	str	r3, [r7, #24]
 801059a:	4b5d      	ldr	r3, [pc, #372]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801059e:	4a5c      	ldr	r2, [pc, #368]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 80105a0:	f043 0302 	orr.w	r3, r3, #2
 80105a4:	6313      	str	r3, [r2, #48]	; 0x30
 80105a6:	4b5a      	ldr	r3, [pc, #360]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 80105a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105aa:	f003 0302 	and.w	r3, r3, #2
 80105ae:	61bb      	str	r3, [r7, #24]
 80105b0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80105b2:	2302      	movs	r3, #2
 80105b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105b6:	2302      	movs	r3, #2
 80105b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105ba:	2300      	movs	r3, #0
 80105bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105be:	2303      	movs	r3, #3
 80105c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80105c2:	2307      	movs	r3, #7
 80105c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80105c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105ca:	4619      	mov	r1, r3
 80105cc:	4851      	ldr	r0, [pc, #324]	; (8010714 <HAL_SPI_MspInit+0x1d8>)
 80105ce:	f7fa fd5f 	bl	800b090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80105d2:	2304      	movs	r3, #4
 80105d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105d6:	2302      	movs	r3, #2
 80105d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105da:	2300      	movs	r3, #0
 80105dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105de:	2303      	movs	r3, #3
 80105e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80105e2:	2305      	movs	r3, #5
 80105e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80105e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105ea:	4619      	mov	r1, r3
 80105ec:	4849      	ldr	r0, [pc, #292]	; (8010714 <HAL_SPI_MspInit+0x1d8>)
 80105ee:	f7fa fd4f 	bl	800b090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80105f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105f8:	2302      	movs	r3, #2
 80105fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105fc:	2300      	movs	r3, #0
 80105fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010600:	2303      	movs	r3, #3
 8010602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010604:	2305      	movs	r3, #5
 8010606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801060c:	4619      	mov	r1, r3
 801060e:	4842      	ldr	r0, [pc, #264]	; (8010718 <HAL_SPI_MspInit+0x1dc>)
 8010610:	f7fa fd3e 	bl	800b090 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8010614:	2200      	movs	r2, #0
 8010616:	2100      	movs	r1, #0
 8010618:	2024      	movs	r0, #36	; 0x24
 801061a:	f7f9 fe86 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 801061e:	2024      	movs	r0, #36	; 0x24
 8010620:	f7f9 fe9f 	bl	800a362 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8010624:	e06e      	b.n	8010704 <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4a3c      	ldr	r2, [pc, #240]	; (801071c <HAL_SPI_MspInit+0x1e0>)
 801062c:	4293      	cmp	r3, r2
 801062e:	d169      	bne.n	8010704 <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010630:	2300      	movs	r3, #0
 8010632:	617b      	str	r3, [r7, #20]
 8010634:	4b36      	ldr	r3, [pc, #216]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010638:	4a35      	ldr	r2, [pc, #212]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801063a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801063e:	6413      	str	r3, [r2, #64]	; 0x40
 8010640:	4b33      	ldr	r3, [pc, #204]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010648:	617b      	str	r3, [r7, #20]
 801064a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801064c:	2300      	movs	r3, #0
 801064e:	613b      	str	r3, [r7, #16]
 8010650:	4b2f      	ldr	r3, [pc, #188]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010654:	4a2e      	ldr	r2, [pc, #184]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010656:	f043 0302 	orr.w	r3, r3, #2
 801065a:	6313      	str	r3, [r2, #48]	; 0x30
 801065c:	4b2c      	ldr	r3, [pc, #176]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010660:	f003 0302 	and.w	r3, r3, #2
 8010664:	613b      	str	r3, [r7, #16]
 8010666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010668:	2300      	movs	r3, #0
 801066a:	60fb      	str	r3, [r7, #12]
 801066c:	4b28      	ldr	r3, [pc, #160]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010670:	4a27      	ldr	r2, [pc, #156]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010672:	f043 0301 	orr.w	r3, r3, #1
 8010676:	6313      	str	r3, [r2, #48]	; 0x30
 8010678:	4b25      	ldr	r3, [pc, #148]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801067c:	f003 0301 	and.w	r3, r3, #1
 8010680:	60fb      	str	r3, [r7, #12]
 8010682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010684:	2300      	movs	r3, #0
 8010686:	60bb      	str	r3, [r7, #8]
 8010688:	4b21      	ldr	r3, [pc, #132]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801068c:	4a20      	ldr	r2, [pc, #128]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 801068e:	f043 0304 	orr.w	r3, r3, #4
 8010692:	6313      	str	r3, [r2, #48]	; 0x30
 8010694:	4b1e      	ldr	r3, [pc, #120]	; (8010710 <HAL_SPI_MspInit+0x1d4>)
 8010696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010698:	f003 0304 	and.w	r3, r3, #4
 801069c:	60bb      	str	r3, [r7, #8]
 801069e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80106a0:	2304      	movs	r3, #4
 80106a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106a4:	2302      	movs	r3, #2
 80106a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106a8:	2300      	movs	r3, #0
 80106aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80106ac:	2303      	movs	r3, #3
 80106ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80106b0:	2307      	movs	r3, #7
 80106b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80106b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106b8:	4619      	mov	r1, r3
 80106ba:	4817      	ldr	r0, [pc, #92]	; (8010718 <HAL_SPI_MspInit+0x1dc>)
 80106bc:	f7fa fce8 	bl	800b090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80106c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106c6:	2302      	movs	r3, #2
 80106c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80106ce:	2303      	movs	r3, #3
 80106d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80106d2:	2306      	movs	r3, #6
 80106d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106da:	4619      	mov	r1, r3
 80106dc:	4810      	ldr	r0, [pc, #64]	; (8010720 <HAL_SPI_MspInit+0x1e4>)
 80106de:	f7fa fcd7 	bl	800b090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80106e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80106e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106e8:	2302      	movs	r3, #2
 80106ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106ec:	2300      	movs	r3, #0
 80106ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80106f0:	2303      	movs	r3, #3
 80106f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80106f4:	2306      	movs	r3, #6
 80106f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80106f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106fc:	4619      	mov	r1, r3
 80106fe:	4805      	ldr	r0, [pc, #20]	; (8010714 <HAL_SPI_MspInit+0x1d8>)
 8010700:	f7fa fcc6 	bl	800b090 <HAL_GPIO_Init>
}
 8010704:	bf00      	nop
 8010706:	3738      	adds	r7, #56	; 0x38
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	40003800 	.word	0x40003800
 8010710:	40023800 	.word	0x40023800
 8010714:	40020800 	.word	0x40020800
 8010718:	40020400 	.word	0x40020400
 801071c:	40003c00 	.word	0x40003c00
 8010720:	40020000 	.word	0x40020000

08010724 <SPI_Init>:
} 

/* USER CODE BEGIN 1 */

void SPI_Init()
{
 8010724:	b480      	push	{r7}
 8010726:	af00      	add	r7, sp, #0


	  // SPI Interrupt Setting
	  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 8010728:	4b06      	ldr	r3, [pc, #24]	; (8010744 <SPI_Init+0x20>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	685a      	ldr	r2, [r3, #4]
 801072e:	4b05      	ldr	r3, [pc, #20]	; (8010744 <SPI_Init+0x20>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8010736:	605a      	str	r2, [r3, #4]

}
 8010738:	bf00      	nop
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	200044ac 	.word	0x200044ac

08010748 <setZeroEncoder>:



void setZeroEncoder(uint8_t exe)
{
 8010748:	b590      	push	{r4, r7, lr}
 801074a:	b08b      	sub	sp, #44	; 0x2c
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 8010752:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010756:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 8.0f;
 801075c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8010760:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 8010762:	f04f 0300 	mov.w	r3, #0
 8010766:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 8010768:	f04f 0300 	mov.w	r3, #0
 801076c:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 801076e:	f04f 0300 	mov.w	r3, #0
 8010772:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 8010774:	f7ff f812 	bl	800f79c <Flash_load>
 8010778:	4602      	mov	r2, r0
 801077a:	4b9d      	ldr	r3, [pc, #628]	; (80109f0 <setZeroEncoder+0x2a8>)
 801077c:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 801077e:	79fb      	ldrb	r3, [r7, #7]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d126      	bne.n	80107d2 <setZeroEncoder+0x8a>
	{

		memcpy(&theta_re_offset, flash_data, 4);
 8010784:	4b9a      	ldr	r3, [pc, #616]	; (80109f0 <setZeroEncoder+0x2a8>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	461a      	mov	r2, r3
 801078c:	4b99      	ldr	r3, [pc, #612]	; (80109f4 <setZeroEncoder+0x2ac>)
 801078e:	601a      	str	r2, [r3, #0]

		printf("flash_data:%d\n", theta_re_offset * 100000);
 8010790:	4b98      	ldr	r3, [pc, #608]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010792:	edd3 7a00 	vldr	s15, [r3]
 8010796:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80109f8 <setZeroEncoder+0x2b0>
 801079a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801079e:	ee17 0a90 	vmov	r0, s15
 80107a2:	f7f7 fe01 	bl	80083a8 <__aeabi_f2d>
 80107a6:	4603      	mov	r3, r0
 80107a8:	460c      	mov	r4, r1
 80107aa:	461a      	mov	r2, r3
 80107ac:	4623      	mov	r3, r4
 80107ae:	4893      	ldr	r0, [pc, #588]	; (80109fc <setZeroEncoder+0x2b4>)
 80107b0:	f000 fee2 	bl	8011578 <iprintf>
		printf(" theta_re_offset = %d\n", (int)(theta_re_offset * 100000));
 80107b4:	4b8f      	ldr	r3, [pc, #572]	; (80109f4 <setZeroEncoder+0x2ac>)
 80107b6:	edd3 7a00 	vldr	s15, [r3]
 80107ba:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80109f8 <setZeroEncoder+0x2b0>
 80107be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80107c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107c6:	ee17 1a90 	vmov	r1, s15
 80107ca:	488d      	ldr	r0, [pc, #564]	; (8010a00 <setZeroEncoder+0x2b8>)
 80107cc:	f000 fed4 	bl	8011578 <iprintf>
		return;
 80107d0:	e0fd      	b.n	80109ce <setZeroEncoder+0x286>
	}


	Id_ref = forced_I_gamma_ref;
 80107d2:	4a8c      	ldr	r2, [pc, #560]	; (8010a04 <setZeroEncoder+0x2bc>)
 80107d4:	6a3b      	ldr	r3, [r7, #32]
 80107d6:	6013      	str	r3, [r2, #0]
	Iq_ref = forced_I_delta_ref;
 80107d8:	4a8b      	ldr	r2, [pc, #556]	; (8010a08 <setZeroEncoder+0x2c0>)
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	6013      	str	r3, [r2, #0]

	forced_commute_enable = 1;
 80107de:	4b8b      	ldr	r3, [pc, #556]	; (8010a0c <setZeroEncoder+0x2c4>)
 80107e0:	2201      	movs	r2, #1
 80107e2:	701a      	strb	r2, [r3, #0]


	timeoutReset();	HAL_Delay(100);
 80107e4:	f000 fdcc 	bl	8011380 <timeoutReset>
 80107e8:	2064      	movs	r0, #100	; 0x64
 80107ea:	f7f8 fb39 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 80107ee:	f000 fdc7 	bl	8011380 <timeoutReset>
 80107f2:	2064      	movs	r0, #100	; 0x64
 80107f4:	f7f8 fb34 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 80107f8:	f000 fdc2 	bl	8011380 <timeoutReset>
 80107fc:	2064      	movs	r0, #100	; 0x64
 80107fe:	f7f8 fb2f 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8010802:	f000 fdbd 	bl	8011380 <timeoutReset>
 8010806:	2064      	movs	r0, #100	; 0x64
 8010808:	f7f8 fb2a 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 801080c:	f000 fdb8 	bl	8011380 <timeoutReset>
 8010810:	2064      	movs	r0, #100	; 0x64
 8010812:	f7f8 fb25 	bl	8008e60 <HAL_Delay>

	requestEncoder();
 8010816:	f000 f90f 	bl	8010a38 <requestEncoder>
	HAL_Delay(5);
 801081a:	2005      	movs	r0, #5
 801081c:	f7f8 fb20 	bl	8008e60 <HAL_Delay>
	refreshEncoder();
 8010820:	f000 f92a 	bl	8010a78 <refreshEncoder>
	HAL_Delay(5);
 8010824:	2005      	movs	r0, #5
 8010826:	f7f8 fb1b 	bl	8008e60 <HAL_Delay>
	requestEncoder();
 801082a:	f000 f905 	bl	8010a38 <requestEncoder>
	HAL_Delay(5);
 801082e:	2005      	movs	r0, #5
 8010830:	f7f8 fb16 	bl	8008e60 <HAL_Delay>
	refreshEncoder();
 8010834:	f000 f920 	bl	8010a78 <refreshEncoder>

	theta_re_offset = 0.0f - theta_re;
 8010838:	4b75      	ldr	r3, [pc, #468]	; (8010a10 <setZeroEncoder+0x2c8>)
 801083a:	edd3 7a00 	vldr	s15, [r3]
 801083e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8010a14 <setZeroEncoder+0x2cc>
 8010842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010846:	4b6b      	ldr	r3, [pc, #428]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010848:	edc3 7a00 	vstr	s15, [r3]

	while(theta_re_offset < -M_PI)	theta_re_offset += 2.0f * M_PI;
 801084c:	e012      	b.n	8010874 <setZeroEncoder+0x12c>
 801084e:	4b69      	ldr	r3, [pc, #420]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4618      	mov	r0, r3
 8010854:	f7f7 fda8 	bl	80083a8 <__aeabi_f2d>
 8010858:	a35f      	add	r3, pc, #380	; (adr r3, 80109d8 <setZeroEncoder+0x290>)
 801085a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085e:	f7f7 fc45 	bl	80080ec <__adddf3>
 8010862:	4603      	mov	r3, r0
 8010864:	460c      	mov	r4, r1
 8010866:	4618      	mov	r0, r3
 8010868:	4621      	mov	r1, r4
 801086a:	f7f8 f8b7 	bl	80089dc <__aeabi_d2f>
 801086e:	4602      	mov	r2, r0
 8010870:	4b60      	ldr	r3, [pc, #384]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	4b5f      	ldr	r3, [pc, #380]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4618      	mov	r0, r3
 801087a:	f7f7 fd95 	bl	80083a8 <__aeabi_f2d>
 801087e:	a358      	add	r3, pc, #352	; (adr r3, 80109e0 <setZeroEncoder+0x298>)
 8010880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010884:	f7f8 f85a 	bl	800893c <__aeabi_dcmplt>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d1df      	bne.n	801084e <setZeroEncoder+0x106>
	while(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
 801088e:	e012      	b.n	80108b6 <setZeroEncoder+0x16e>
 8010890:	4b58      	ldr	r3, [pc, #352]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4618      	mov	r0, r3
 8010896:	f7f7 fd87 	bl	80083a8 <__aeabi_f2d>
 801089a:	a34f      	add	r3, pc, #316	; (adr r3, 80109d8 <setZeroEncoder+0x290>)
 801089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a0:	f7f7 fc22 	bl	80080e8 <__aeabi_dsub>
 80108a4:	4603      	mov	r3, r0
 80108a6:	460c      	mov	r4, r1
 80108a8:	4618      	mov	r0, r3
 80108aa:	4621      	mov	r1, r4
 80108ac:	f7f8 f896 	bl	80089dc <__aeabi_d2f>
 80108b0:	4602      	mov	r2, r0
 80108b2:	4b50      	ldr	r3, [pc, #320]	; (80109f4 <setZeroEncoder+0x2ac>)
 80108b4:	601a      	str	r2, [r3, #0]
 80108b6:	4b4f      	ldr	r3, [pc, #316]	; (80109f4 <setZeroEncoder+0x2ac>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7f7 fd74 	bl	80083a8 <__aeabi_f2d>
 80108c0:	a349      	add	r3, pc, #292	; (adr r3, 80109e8 <setZeroEncoder+0x2a0>)
 80108c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c6:	f7f8 f857 	bl	8008978 <__aeabi_dcmpgt>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1df      	bne.n	8010890 <setZeroEncoder+0x148>


	printf(" theta_re_offset = %d -- ", (int)(theta_re_offset * 100000));
 80108d0:	4b48      	ldr	r3, [pc, #288]	; (80109f4 <setZeroEncoder+0x2ac>)
 80108d2:	edd3 7a00 	vldr	s15, [r3]
 80108d6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80109f8 <setZeroEncoder+0x2b0>
 80108da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80108de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108e2:	ee17 1a90 	vmov	r1, s15
 80108e6:	484c      	ldr	r0, [pc, #304]	; (8010a18 <setZeroEncoder+0x2d0>)
 80108e8:	f000 fe46 	bl	8011578 <iprintf>
	HAL_Delay(1);
 80108ec:	2001      	movs	r0, #1
 80108ee:	f7f8 fab7 	bl	8008e60 <HAL_Delay>
	printf(" theta_re_offset = %d\n", (int)(theta_re_offset * 100000));
 80108f2:	4b40      	ldr	r3, [pc, #256]	; (80109f4 <setZeroEncoder+0x2ac>)
 80108f4:	edd3 7a00 	vldr	s15, [r3]
 80108f8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80109f8 <setZeroEncoder+0x2b0>
 80108fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010904:	ee17 1a90 	vmov	r1, s15
 8010908:	483d      	ldr	r0, [pc, #244]	; (8010a00 <setZeroEncoder+0x2b8>)
 801090a:	f000 fe35 	bl	8011578 <iprintf>
	HAL_Delay(1);
 801090e:	2001      	movs	r0, #1
 8010910:	f7f8 faa6 	bl	8008e60 <HAL_Delay>
	printf(" theta_re_offset(4) = %d -- ", (int)(theta_re_offset * 10000));
 8010914:	4b37      	ldr	r3, [pc, #220]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010916:	edd3 7a00 	vldr	s15, [r3]
 801091a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8010a1c <setZeroEncoder+0x2d4>
 801091e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010926:	ee17 1a90 	vmov	r1, s15
 801092a:	483d      	ldr	r0, [pc, #244]	; (8010a20 <setZeroEncoder+0x2d8>)
 801092c:	f000 fe24 	bl	8011578 <iprintf>
	HAL_Delay(1);
 8010930:	2001      	movs	r0, #1
 8010932:	f7f8 fa95 	bl	8008e60 <HAL_Delay>
	printf(" theta_re_offset(4) = %d\n", (int)(theta_re_offset * 10000));
 8010936:	4b2f      	ldr	r3, [pc, #188]	; (80109f4 <setZeroEncoder+0x2ac>)
 8010938:	edd3 7a00 	vldr	s15, [r3]
 801093c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8010a1c <setZeroEncoder+0x2d4>
 8010940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010948:	ee17 1a90 	vmov	r1, s15
 801094c:	4835      	ldr	r0, [pc, #212]	; (8010a24 <setZeroEncoder+0x2dc>)
 801094e:	f000 fe13 	bl	8011578 <iprintf>
	HAL_Delay(1);
 8010952:	2001      	movs	r0, #1
 8010954:	f7f8 fa84 	bl	8008e60 <HAL_Delay>

	printf("(theta_re_offset < 1.0f) = %d\n", (int)(theta_re_offset < 1.0f));
 8010958:	4b26      	ldr	r3, [pc, #152]	; (80109f4 <setZeroEncoder+0x2ac>)
 801095a:	edd3 7a00 	vldr	s15, [r3]
 801095e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801096a:	bf4c      	ite	mi
 801096c:	2301      	movmi	r3, #1
 801096e:	2300      	movpl	r3, #0
 8010970:	b2db      	uxtb	r3, r3
 8010972:	4619      	mov	r1, r3
 8010974:	482c      	ldr	r0, [pc, #176]	; (8010a28 <setZeroEncoder+0x2e0>)
 8010976:	f000 fdff 	bl	8011578 <iprintf>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(theta_re_offset > -1.0f));
 801097a:	4b1e      	ldr	r3, [pc, #120]	; (80109f4 <setZeroEncoder+0x2ac>)
 801097c:	edd3 7a00 	vldr	s15, [r3]
 8010980:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098c:	bfcc      	ite	gt
 801098e:	2301      	movgt	r3, #1
 8010990:	2300      	movle	r3, #0
 8010992:	b2db      	uxtb	r3, r3
 8010994:	4619      	mov	r1, r3
 8010996:	4825      	ldr	r0, [pc, #148]	; (8010a2c <setZeroEncoder+0x2e4>)
 8010998:	f000 fdee 	bl	8011578 <iprintf>


	memcpy(flash_data, &theta_re_offset, 4);
 801099c:	4b14      	ldr	r3, [pc, #80]	; (80109f0 <setZeroEncoder+0x2a8>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4a14      	ldr	r2, [pc, #80]	; (80109f4 <setZeroEncoder+0x2ac>)
 80109a2:	6812      	ldr	r2, [r2, #0]
 80109a4:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 80109a6:	f7fe ff0b 	bl	800f7c0 <Flash_store>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d102      	bne.n	80109b6 <setZeroEncoder+0x26e>
	{
		printf("Failed to write flash\n");
 80109b0:	481f      	ldr	r0, [pc, #124]	; (8010a30 <setZeroEncoder+0x2e8>)
 80109b2:	f000 fe55 	bl	8011660 <puts>
	}

	printf("flash_data:%lu\n", *flash_data);
 80109b6:	4b0e      	ldr	r3, [pc, #56]	; (80109f0 <setZeroEncoder+0x2a8>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4619      	mov	r1, r3
 80109be:	481d      	ldr	r0, [pc, #116]	; (8010a34 <setZeroEncoder+0x2ec>)
 80109c0:	f000 fdda 	bl	8011578 <iprintf>



	ACR_Reset();
 80109c4:	f7fd fe56 	bl	800e674 <ACR_Reset>

	forced_commute_enable = 0;
 80109c8:	4b10      	ldr	r3, [pc, #64]	; (8010a0c <setZeroEncoder+0x2c4>)
 80109ca:	2200      	movs	r2, #0
 80109cc:	701a      	strb	r2, [r3, #0]


#endif


}
 80109ce:	372c      	adds	r7, #44	; 0x2c
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd90      	pop	{r4, r7, pc}
 80109d4:	f3af 8000 	nop.w
 80109d8:	54442d18 	.word	0x54442d18
 80109dc:	401921fb 	.word	0x401921fb
 80109e0:	54442d18 	.word	0x54442d18
 80109e4:	c00921fb 	.word	0xc00921fb
 80109e8:	54442d18 	.word	0x54442d18
 80109ec:	400921fb 	.word	0x400921fb
 80109f0:	2000455c 	.word	0x2000455c
 80109f4:	200041d8 	.word	0x200041d8
 80109f8:	47c35000 	.word	0x47c35000
 80109fc:	08013618 	.word	0x08013618
 8010a00:	08013628 	.word	0x08013628
 8010a04:	200000c4 	.word	0x200000c4
 8010a08:	200000c8 	.word	0x200000c8
 8010a0c:	200041e8 	.word	0x200041e8
 8010a10:	200041e0 	.word	0x200041e0
 8010a14:	00000000 	.word	0x00000000
 8010a18:	08013640 	.word	0x08013640
 8010a1c:	461c4000 	.word	0x461c4000
 8010a20:	0801365c 	.word	0x0801365c
 8010a24:	0801367c 	.word	0x0801367c
 8010a28:	08013698 	.word	0x08013698
 8010a2c:	080136b8 	.word	0x080136b8
 8010a30:	080136d8 	.word	0x080136d8
 8010a34:	080136f0 	.word	0x080136f0

08010a38 <requestEncoder>:




inline void requestEncoder()
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	af00      	add	r7, sp, #0


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 8010a3c:	4b09      	ldr	r3, [pc, #36]	; (8010a64 <requestEncoder+0x2c>)
 8010a3e:	22ff      	movs	r2, #255	; 0xff
 8010a40:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 8010a42:	4b08      	ldr	r3, [pc, #32]	; (8010a64 <requestEncoder+0x2c>)
 8010a44:	22ff      	movs	r2, #255	; 0xff
 8010a46:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010a4e:	4806      	ldr	r0, [pc, #24]	; (8010a68 <requestEncoder+0x30>)
 8010a50:	f7fa fcc8 	bl	800b3e4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 8010a54:	2301      	movs	r3, #1
 8010a56:	4a05      	ldr	r2, [pc, #20]	; (8010a6c <requestEncoder+0x34>)
 8010a58:	4902      	ldr	r1, [pc, #8]	; (8010a64 <requestEncoder+0x2c>)
 8010a5a:	4805      	ldr	r0, [pc, #20]	; (8010a70 <requestEncoder+0x38>)
 8010a5c:	f7fb fa6a 	bl	800bf34 <HAL_SPI_TransmitReceive_IT>


}
 8010a60:	bf00      	nop
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	200041cc 	.word	0x200041cc
 8010a68:	40020400 	.word	0x40020400
 8010a6c:	200041d0 	.word	0x200041d0
 8010a70:	200044ac 	.word	0x200044ac
 8010a74:	00000000 	.word	0x00000000

08010a78 <refreshEncoder>:


inline int refreshEncoder()
{
 8010a78:	b5b0      	push	{r4, r5, r7, lr}
 8010a7a:	b084      	sub	sp, #16
 8010a7c:	af00      	add	r7, sp, #0

	uint16_t angle_raw = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	81fb      	strh	r3, [r7, #14]
	float _theta;
	float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8010a82:	2201      	movs	r2, #1
 8010a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010a88:	4891      	ldr	r0, [pc, #580]	; (8010cd0 <refreshEncoder+0x258>)
 8010a8a:	f7fa fcab 	bl	800b3e4 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 8010a8e:	4b91      	ldr	r3, [pc, #580]	; (8010cd4 <refreshEncoder+0x25c>)
 8010a90:	785b      	ldrb	r3, [r3, #1]
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	021b      	lsls	r3, r3, #8
 8010a96:	b21b      	sxth	r3, r3
 8010a98:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8010a9c:	b21a      	sxth	r2, r3
 8010a9e:	4b8d      	ldr	r3, [pc, #564]	; (8010cd4 <refreshEncoder+0x25c>)
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	b21b      	sxth	r3, r3
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	b21b      	sxth	r3, r3
 8010aaa:	81fb      	strh	r3, [r7, #14]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 8010aac:	89fb      	ldrh	r3, [r7, #14]
 8010aae:	ee07 3a90 	vmov	s15, r3
 8010ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010ab6:	eddf 6a88 	vldr	s13, [pc, #544]	; 8010cd8 <refreshEncoder+0x260>
 8010aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010abe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010ac2:	ee17 0a90 	vmov	r0, s15
 8010ac6:	f7f7 fc6f 	bl	80083a8 <__aeabi_f2d>
 8010aca:	a37d      	add	r3, pc, #500	; (adr r3, 8010cc0 <refreshEncoder+0x248>)
 8010acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad0:	f7f7 fcc2 	bl	8008458 <__aeabi_dmul>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	460c      	mov	r4, r1
 8010ad8:	4625      	mov	r5, r4
 8010ada:	461c      	mov	r4, r3
 8010adc:	4b7f      	ldr	r3, [pc, #508]	; (8010cdc <refreshEncoder+0x264>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7f7 fc61 	bl	80083a8 <__aeabi_f2d>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	4620      	mov	r0, r4
 8010aec:	4629      	mov	r1, r5
 8010aee:	f7f7 fafd 	bl	80080ec <__adddf3>
 8010af2:	4603      	mov	r3, r0
 8010af4:	460c      	mov	r4, r1
 8010af6:	4618      	mov	r0, r3
 8010af8:	4621      	mov	r1, r4
 8010afa:	f7f7 ff6f 	bl	80089dc <__aeabi_d2f>
 8010afe:	4603      	mov	r3, r0
 8010b00:	60bb      	str	r3, [r7, #8]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 8010b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8010b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0e:	d511      	bpl.n	8010b34 <refreshEncoder+0xbc>
 8010b10:	68b8      	ldr	r0, [r7, #8]
 8010b12:	f7f7 fc49 	bl	80083a8 <__aeabi_f2d>
 8010b16:	a36c      	add	r3, pc, #432	; (adr r3, 8010cc8 <refreshEncoder+0x250>)
 8010b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1c:	f7f7 fae6 	bl	80080ec <__adddf3>
 8010b20:	4603      	mov	r3, r0
 8010b22:	460c      	mov	r4, r1
 8010b24:	4618      	mov	r0, r3
 8010b26:	4621      	mov	r1, r4
 8010b28:	f7f7 ff58 	bl	80089dc <__aeabi_d2f>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	4b6c      	ldr	r3, [pc, #432]	; (8010ce0 <refreshEncoder+0x268>)
 8010b30:	601a      	str	r2, [r3, #0]
 8010b32:	e01f      	b.n	8010b74 <refreshEncoder+0xfc>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 8010b34:	68b8      	ldr	r0, [r7, #8]
 8010b36:	f7f7 fc37 	bl	80083a8 <__aeabi_f2d>
 8010b3a:	a363      	add	r3, pc, #396	; (adr r3, 8010cc8 <refreshEncoder+0x250>)
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	f7f7 ff10 	bl	8008964 <__aeabi_dcmpge>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d011      	beq.n	8010b6e <refreshEncoder+0xf6>
 8010b4a:	68b8      	ldr	r0, [r7, #8]
 8010b4c:	f7f7 fc2c 	bl	80083a8 <__aeabi_f2d>
 8010b50:	a35d      	add	r3, pc, #372	; (adr r3, 8010cc8 <refreshEncoder+0x250>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	f7f7 fac7 	bl	80080e8 <__aeabi_dsub>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	460c      	mov	r4, r1
 8010b5e:	4618      	mov	r0, r3
 8010b60:	4621      	mov	r1, r4
 8010b62:	f7f7 ff3b 	bl	80089dc <__aeabi_d2f>
 8010b66:	4602      	mov	r2, r0
 8010b68:	4b5d      	ldr	r3, [pc, #372]	; (8010ce0 <refreshEncoder+0x268>)
 8010b6a:	601a      	str	r2, [r3, #0]
 8010b6c:	e002      	b.n	8010b74 <refreshEncoder+0xfc>
	else						theta = _theta;
 8010b6e:	4a5c      	ldr	r2, [pc, #368]	; (8010ce0 <refreshEncoder+0x268>)
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	6013      	str	r3, [r2, #0]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 8010b74:	89fb      	ldrh	r3, [r7, #14]
 8010b76:	ee07 3a90 	vmov	s15, r3
 8010b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010b7e:	eddf 6a56 	vldr	s13, [pc, #344]	; 8010cd8 <refreshEncoder+0x260>
 8010b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010b8a:	ee17 0a90 	vmov	r0, s15
 8010b8e:	f7f7 fc0b 	bl	80083a8 <__aeabi_f2d>
 8010b92:	a34b      	add	r3, pc, #300	; (adr r3, 8010cc0 <refreshEncoder+0x248>)
 8010b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b98:	f7f7 fc5e 	bl	8008458 <__aeabi_dmul>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	f04f 0200 	mov.w	r2, #0
 8010ba8:	4b4e      	ldr	r3, [pc, #312]	; (8010ce4 <refreshEncoder+0x26c>)
 8010baa:	f7f7 fc55 	bl	8008458 <__aeabi_dmul>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	460c      	mov	r4, r1
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	f04f 0200 	mov.w	r2, #0
 8010bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010bbe:	f7f7 fd75 	bl	80086ac <__aeabi_ddiv>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	4621      	mov	r1, r4
 8010bca:	f7f7 ff07 	bl	80089dc <__aeabi_d2f>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	eddf 0a45 	vldr	s1, [pc, #276]	; 8010ce8 <refreshEncoder+0x270>
 8010bd4:	ee00 3a10 	vmov	s0, r3
 8010bd8:	f001 fc5a 	bl	8012490 <fmodf>
 8010bdc:	eeb0 7a40 	vmov.f32	s14, s0
 8010be0:	4b42      	ldr	r3, [pc, #264]	; (8010cec <refreshEncoder+0x274>)
 8010be2:	edd3 7a00 	vldr	s15, [r3]
 8010be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bea:	edc7 7a01 	vstr	s15, [r7, #4]

	if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 8010bee:	edd7 7a01 	vldr	s15, [r7, #4]
 8010bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfa:	d511      	bpl.n	8010c20 <refreshEncoder+0x1a8>
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f7f7 fbd3 	bl	80083a8 <__aeabi_f2d>
 8010c02:	a331      	add	r3, pc, #196	; (adr r3, 8010cc8 <refreshEncoder+0x250>)
 8010c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c08:	f7f7 fa70 	bl	80080ec <__adddf3>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	460c      	mov	r4, r1
 8010c10:	4618      	mov	r0, r3
 8010c12:	4621      	mov	r1, r4
 8010c14:	f7f7 fee2 	bl	80089dc <__aeabi_d2f>
 8010c18:	4602      	mov	r2, r0
 8010c1a:	4b35      	ldr	r3, [pc, #212]	; (8010cf0 <refreshEncoder+0x278>)
 8010c1c:	601a      	str	r2, [r3, #0]
 8010c1e:	e01f      	b.n	8010c60 <refreshEncoder+0x1e8>
	else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7f7 fbc1 	bl	80083a8 <__aeabi_f2d>
 8010c26:	a328      	add	r3, pc, #160	; (adr r3, 8010cc8 <refreshEncoder+0x250>)
 8010c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2c:	f7f7 fe9a 	bl	8008964 <__aeabi_dcmpge>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d011      	beq.n	8010c5a <refreshEncoder+0x1e2>
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7f7 fbb6 	bl	80083a8 <__aeabi_f2d>
 8010c3c:	a322      	add	r3, pc, #136	; (adr r3, 8010cc8 <refreshEncoder+0x250>)
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	f7f7 fa51 	bl	80080e8 <__aeabi_dsub>
 8010c46:	4603      	mov	r3, r0
 8010c48:	460c      	mov	r4, r1
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	f7f7 fec5 	bl	80089dc <__aeabi_d2f>
 8010c52:	4602      	mov	r2, r0
 8010c54:	4b26      	ldr	r3, [pc, #152]	; (8010cf0 <refreshEncoder+0x278>)
 8010c56:	601a      	str	r2, [r3, #0]
 8010c58:	e002      	b.n	8010c60 <refreshEncoder+0x1e8>
	else							theta_re = _theta_re;
 8010c5a:	4a25      	ldr	r2, [pc, #148]	; (8010cf0 <refreshEncoder+0x278>)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6013      	str	r3, [r2, #0]

	cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 8010c60:	4b23      	ldr	r3, [pc, #140]	; (8010cf0 <refreshEncoder+0x278>)
 8010c62:	edd3 7a00 	vldr	s15, [r3]
 8010c66:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8010cf4 <refreshEncoder+0x27c>
 8010c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010c72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c76:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8010cf8 <refreshEncoder+0x280>
 8010c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c82:	ee17 3a90 	vmov	r3, s15
 8010c86:	4a1d      	ldr	r2, [pc, #116]	; (8010cfc <refreshEncoder+0x284>)
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	4413      	add	r3, r2
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4a1c      	ldr	r2, [pc, #112]	; (8010d00 <refreshEncoder+0x288>)
 8010c90:	6013      	str	r3, [r2, #0]
	sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 8010c92:	4b17      	ldr	r3, [pc, #92]	; (8010cf0 <refreshEncoder+0x278>)
 8010c94:	edd3 7a00 	vldr	s15, [r3]
 8010c98:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8010d04 <refreshEncoder+0x28c>
 8010c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ca4:	ee17 3a90 	vmov	r3, s15
 8010ca8:	4a14      	ldr	r2, [pc, #80]	; (8010cfc <refreshEncoder+0x284>)
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4413      	add	r3, r2
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4a15      	ldr	r2, [pc, #84]	; (8010d08 <refreshEncoder+0x290>)
 8010cb2:	6013      	str	r3, [r2, #0]


	return 0;
 8010cb4:	2300      	movs	r3, #0

}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3710      	adds	r7, #16
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	54442d18 	.word	0x54442d18
 8010cc4:	400921fb 	.word	0x400921fb
 8010cc8:	54442d18 	.word	0x54442d18
 8010ccc:	401921fb 	.word	0x401921fb
 8010cd0:	40020400 	.word	0x40020400
 8010cd4:	200041d0 	.word	0x200041d0
 8010cd8:	46800000 	.word	0x46800000
 8010cdc:	200041d4 	.word	0x200041d4
 8010ce0:	200041dc 	.word	0x200041dc
 8010ce4:	40360000 	.word	0x40360000
 8010ce8:	40c90fdb 	.word	0x40c90fdb
 8010cec:	200041d8 	.word	0x200041d8
 8010cf0:	200041e0 	.word	0x200041e0
 8010cf4:	3ea2f838 	.word	0x3ea2f838
 8010cf8:	459c4000 	.word	0x459c4000
 8010cfc:	08013740 	.word	0x08013740
 8010d00:	20000034 	.word	0x20000034
 8010d04:	44c6f195 	.word	0x44c6f195
 8010d08:	200041e4 	.word	0x200041e4

08010d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d12:	2300      	movs	r3, #0
 8010d14:	607b      	str	r3, [r7, #4]
 8010d16:	4b10      	ldr	r3, [pc, #64]	; (8010d58 <HAL_MspInit+0x4c>)
 8010d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d1a:	4a0f      	ldr	r2, [pc, #60]	; (8010d58 <HAL_MspInit+0x4c>)
 8010d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010d20:	6453      	str	r3, [r2, #68]	; 0x44
 8010d22:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <HAL_MspInit+0x4c>)
 8010d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d2a:	607b      	str	r3, [r7, #4]
 8010d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010d2e:	2300      	movs	r3, #0
 8010d30:	603b      	str	r3, [r7, #0]
 8010d32:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <HAL_MspInit+0x4c>)
 8010d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d36:	4a08      	ldr	r2, [pc, #32]	; (8010d58 <HAL_MspInit+0x4c>)
 8010d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8010d3e:	4b06      	ldr	r3, [pc, #24]	; (8010d58 <HAL_MspInit+0x4c>)
 8010d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d46:	603b      	str	r3, [r7, #0]
 8010d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8010d4a:	2007      	movs	r0, #7
 8010d4c:	f7f9 fae2 	bl	800a314 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010d50:	bf00      	nop
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	40023800 	.word	0x40023800

08010d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010d60:	bf00      	nop
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr

08010d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010d6a:	b480      	push	{r7}
 8010d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010d6e:	e7fe      	b.n	8010d6e <HardFault_Handler+0x4>

08010d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010d70:	b480      	push	{r7}
 8010d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010d74:	e7fe      	b.n	8010d74 <MemManage_Handler+0x4>

08010d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010d76:	b480      	push	{r7}
 8010d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010d7a:	e7fe      	b.n	8010d7a <BusFault_Handler+0x4>

08010d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010d80:	e7fe      	b.n	8010d80 <UsageFault_Handler+0x4>

08010d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010d82:	b480      	push	{r7}
 8010d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010d86:	bf00      	nop
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010d90:	b480      	push	{r7}
 8010d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010d94:	bf00      	nop
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr

08010d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010d9e:	b480      	push	{r7}
 8010da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010da2:	bf00      	nop
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010db0:	f7f8 f836 	bl	8008e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010db4:	bf00      	nop
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8010dbc:	4802      	ldr	r0, [pc, #8]	; (8010dc8 <CAN1_TX_IRQHandler+0x10>)
 8010dbe:	f7f8 ffce 	bl	8009d5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8010dc2:	bf00      	nop
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20004484 	.word	0x20004484

08010dcc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8010dd0:	4802      	ldr	r0, [pc, #8]	; (8010ddc <CAN1_RX0_IRQHandler+0x10>)
 8010dd2:	f7f8 ffc4 	bl	8009d5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8010dd6:	bf00      	nop
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	20004484 	.word	0x20004484

08010de0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010de4:	4802      	ldr	r0, [pc, #8]	; (8010df0 <SPI2_IRQHandler+0x10>)
 8010de6:	f7fb f939 	bl	800c05c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8010dea:	bf00      	nop
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	200044ac 	.word	0x200044ac

08010df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8010df8:	4802      	ldr	r0, [pc, #8]	; (8010e04 <USART2_IRQHandler+0x10>)
 8010dfa:	f7fc fd8d 	bl	800d918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8010dfe:	bf00      	nop
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	bf00      	nop
 8010e04:	200045a0 	.word	0x200045a0

08010e08 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010e0c:	4802      	ldr	r0, [pc, #8]	; (8010e18 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8010e0e:	f7fb fdb7 	bl	800c980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8010e12:	bf00      	nop
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	20004560 	.word	0x20004560

08010e1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010e20:	4802      	ldr	r0, [pc, #8]	; (8010e2c <DMA2_Stream0_IRQHandler+0x10>)
 8010e22:	f7f9 fbe9 	bl	800a5f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8010e26:	bf00      	nop
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	20004378 	.word	0x20004378

08010e30 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8010e34:	4802      	ldr	r0, [pc, #8]	; (8010e40 <DMA2_Stream1_IRQHandler+0x10>)
 8010e36:	f7f9 fbdf 	bl	800a5f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8010e3a:	bf00      	nop
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	20004288 	.word	0x20004288

08010e44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8010e48:	4802      	ldr	r0, [pc, #8]	; (8010e54 <DMA2_Stream2_IRQHandler+0x10>)
 8010e4a:	f7f9 fbd5 	bl	800a5f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8010e4e:	bf00      	nop
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	200043d8 	.word	0x200043d8

08010e58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b086      	sub	sp, #24
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e64:	2300      	movs	r3, #0
 8010e66:	617b      	str	r3, [r7, #20]
 8010e68:	e00a      	b.n	8010e80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010e6a:	f3af 8000 	nop.w
 8010e6e:	4601      	mov	r1, r0
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	1c5a      	adds	r2, r3, #1
 8010e74:	60ba      	str	r2, [r7, #8]
 8010e76:	b2ca      	uxtb	r2, r1
 8010e78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	617b      	str	r3, [r7, #20]
 8010e80:	697a      	ldr	r2, [r7, #20]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	dbf0      	blt.n	8010e6a <_read+0x12>
	}

return len;
 8010e88:	687b      	ldr	r3, [r7, #4]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3718      	adds	r7, #24
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <_close>:
	}
	return len;
}

int _close(int file)
{
 8010e92:	b480      	push	{r7}
 8010e94:	b083      	sub	sp, #12
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
	return -1;
 8010e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	370c      	adds	r7, #12
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010eaa:	b480      	push	{r7}
 8010eac:	b083      	sub	sp, #12
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
 8010eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010eba:	605a      	str	r2, [r3, #4]
	return 0;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	370c      	adds	r7, #12
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr

08010eca <_isatty>:

int _isatty(int file)
{
 8010eca:	b480      	push	{r7}
 8010ecc:	b083      	sub	sp, #12
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8010ed2:	2301      	movs	r3, #1
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
	return 0;
 8010eec:	2300      	movs	r3, #0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3714      	adds	r7, #20
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr
	...

08010efc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010f04:	4b11      	ldr	r3, [pc, #68]	; (8010f4c <_sbrk+0x50>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <_sbrk+0x16>
		heap_end = &end;
 8010f0c:	4b0f      	ldr	r3, [pc, #60]	; (8010f4c <_sbrk+0x50>)
 8010f0e:	4a10      	ldr	r2, [pc, #64]	; (8010f50 <_sbrk+0x54>)
 8010f10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010f12:	4b0e      	ldr	r3, [pc, #56]	; (8010f4c <_sbrk+0x50>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010f18:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <_sbrk+0x50>)
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	4413      	add	r3, r2
 8010f20:	466a      	mov	r2, sp
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d907      	bls.n	8010f36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010f26:	f000 fae9 	bl	80114fc <__errno>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	230c      	movs	r3, #12
 8010f2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8010f30:	f04f 33ff 	mov.w	r3, #4294967295
 8010f34:	e006      	b.n	8010f44 <_sbrk+0x48>
	}

	heap_end += incr;
 8010f36:	4b05      	ldr	r3, [pc, #20]	; (8010f4c <_sbrk+0x50>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	4a03      	ldr	r2, [pc, #12]	; (8010f4c <_sbrk+0x50>)
 8010f40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010f42:	68fb      	ldr	r3, [r7, #12]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3710      	adds	r7, #16
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	200041ec 	.word	0x200041ec
 8010f50:	200045e8 	.word	0x200045e8

08010f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010f54:	b480      	push	{r7}
 8010f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010f58:	4b16      	ldr	r3, [pc, #88]	; (8010fb4 <SystemInit+0x60>)
 8010f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f5e:	4a15      	ldr	r2, [pc, #84]	; (8010fb4 <SystemInit+0x60>)
 8010f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010f68:	4b13      	ldr	r3, [pc, #76]	; (8010fb8 <SystemInit+0x64>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a12      	ldr	r2, [pc, #72]	; (8010fb8 <SystemInit+0x64>)
 8010f6e:	f043 0301 	orr.w	r3, r3, #1
 8010f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010f74:	4b10      	ldr	r3, [pc, #64]	; (8010fb8 <SystemInit+0x64>)
 8010f76:	2200      	movs	r2, #0
 8010f78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010f7a:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <SystemInit+0x64>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	4a0e      	ldr	r2, [pc, #56]	; (8010fb8 <SystemInit+0x64>)
 8010f80:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010f8a:	4b0b      	ldr	r3, [pc, #44]	; (8010fb8 <SystemInit+0x64>)
 8010f8c:	4a0b      	ldr	r2, [pc, #44]	; (8010fbc <SystemInit+0x68>)
 8010f8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010f90:	4b09      	ldr	r3, [pc, #36]	; (8010fb8 <SystemInit+0x64>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4a08      	ldr	r2, [pc, #32]	; (8010fb8 <SystemInit+0x64>)
 8010f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010f9c:	4b06      	ldr	r3, [pc, #24]	; (8010fb8 <SystemInit+0x64>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010fa2:	4b04      	ldr	r3, [pc, #16]	; (8010fb4 <SystemInit+0x60>)
 8010fa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010fa8:	609a      	str	r2, [r3, #8]
#endif
}
 8010faa:	bf00      	nop
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr
 8010fb4:	e000ed00 	.word	0xe000ed00
 8010fb8:	40023800 	.word	0x40023800
 8010fbc:	24003010 	.word	0x24003010

08010fc0 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b096      	sub	sp, #88	; 0x58
 8010fc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fca:	2200      	movs	r2, #0
 8010fcc:	601a      	str	r2, [r3, #0]
 8010fce:	605a      	str	r2, [r3, #4]
 8010fd0:	609a      	str	r2, [r3, #8]
 8010fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010fd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010fd8:	2200      	movs	r2, #0
 8010fda:	601a      	str	r2, [r3, #0]
 8010fdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	601a      	str	r2, [r3, #0]
 8010fe6:	605a      	str	r2, [r3, #4]
 8010fe8:	609a      	str	r2, [r3, #8]
 8010fea:	60da      	str	r2, [r3, #12]
 8010fec:	611a      	str	r2, [r3, #16]
 8010fee:	615a      	str	r2, [r3, #20]
 8010ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010ff2:	1d3b      	adds	r3, r7, #4
 8010ff4:	2220      	movs	r2, #32
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f000 fab4 	bl	8011566 <memset>

  htim8.Instance = TIM8;
 8010ffe:	4b4a      	ldr	r3, [pc, #296]	; (8011128 <MX_TIM8_Init+0x168>)
 8011000:	4a4a      	ldr	r2, [pc, #296]	; (801112c <MX_TIM8_Init+0x16c>)
 8011002:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8011004:	4b48      	ldr	r3, [pc, #288]	; (8011128 <MX_TIM8_Init+0x168>)
 8011006:	2200      	movs	r2, #0
 8011008:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 801100a:	4b47      	ldr	r3, [pc, #284]	; (8011128 <MX_TIM8_Init+0x168>)
 801100c:	2220      	movs	r2, #32
 801100e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8011010:	4b45      	ldr	r3, [pc, #276]	; (8011128 <MX_TIM8_Init+0x168>)
 8011012:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011016:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011018:	4b43      	ldr	r3, [pc, #268]	; (8011128 <MX_TIM8_Init+0x168>)
 801101a:	2200      	movs	r2, #0
 801101c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801101e:	4b42      	ldr	r3, [pc, #264]	; (8011128 <MX_TIM8_Init+0x168>)
 8011020:	2200      	movs	r2, #0
 8011022:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011024:	4b40      	ldr	r3, [pc, #256]	; (8011128 <MX_TIM8_Init+0x168>)
 8011026:	2200      	movs	r2, #0
 8011028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801102a:	483f      	ldr	r0, [pc, #252]	; (8011128 <MX_TIM8_Init+0x168>)
 801102c:	f7fb fb2a 	bl	800c684 <HAL_TIM_Base_Init>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d001      	beq.n	801103a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8011036:	f7fe fe5d 	bl	800fcf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801103e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8011040:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011044:	4619      	mov	r1, r3
 8011046:	4838      	ldr	r0, [pc, #224]	; (8011128 <MX_TIM8_Init+0x168>)
 8011048:	f7fb fe8f 	bl	800cd6a <HAL_TIM_ConfigClockSource>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d001      	beq.n	8011056 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8011052:	f7fe fe4f 	bl	800fcf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8011056:	4834      	ldr	r0, [pc, #208]	; (8011128 <MX_TIM8_Init+0x168>)
 8011058:	f7fb fb3f 	bl	800c6da <HAL_TIM_PWM_Init>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d001      	beq.n	8011066 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8011062:	f7fe fe47 	bl	800fcf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011066:	2320      	movs	r3, #32
 8011068:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801106a:	2300      	movs	r3, #0
 801106c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801106e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011072:	4619      	mov	r1, r3
 8011074:	482c      	ldr	r0, [pc, #176]	; (8011128 <MX_TIM8_Init+0x168>)
 8011076:	f7fc fb31 	bl	800d6dc <HAL_TIMEx_MasterConfigSynchronization>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8011080:	f7fe fe38 	bl	800fcf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011084:	2360      	movs	r3, #96	; 0x60
 8011086:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8011088:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801108c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801108e:	2300      	movs	r3, #0
 8011090:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011092:	2300      	movs	r3, #0
 8011094:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011096:	2300      	movs	r3, #0
 8011098:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801109a:	2300      	movs	r3, #0
 801109c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801109e:	2300      	movs	r3, #0
 80110a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80110a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110a6:	2200      	movs	r2, #0
 80110a8:	4619      	mov	r1, r3
 80110aa:	481f      	ldr	r0, [pc, #124]	; (8011128 <MX_TIM8_Init+0x168>)
 80110ac:	f7fb fd70 	bl	800cb90 <HAL_TIM_PWM_ConfigChannel>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80110b6:	f7fe fe1d 	bl	800fcf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80110ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110be:	2204      	movs	r2, #4
 80110c0:	4619      	mov	r1, r3
 80110c2:	4819      	ldr	r0, [pc, #100]	; (8011128 <MX_TIM8_Init+0x168>)
 80110c4:	f7fb fd64 	bl	800cb90 <HAL_TIM_PWM_ConfigChannel>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80110ce:	f7fe fe11 	bl	800fcf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80110d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110d6:	2208      	movs	r2, #8
 80110d8:	4619      	mov	r1, r3
 80110da:	4813      	ldr	r0, [pc, #76]	; (8011128 <MX_TIM8_Init+0x168>)
 80110dc:	f7fb fd58 	bl	800cb90 <HAL_TIM_PWM_ConfigChannel>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d001      	beq.n	80110ea <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80110e6:	f7fe fe05 	bl	800fcf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80110ea:	2300      	movs	r3, #0
 80110ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80110ee:	2300      	movs	r3, #0
 80110f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80110f2:	2300      	movs	r3, #0
 80110f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 80110f6:	2328      	movs	r3, #40	; 0x28
 80110f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80110fa:	2300      	movs	r3, #0
 80110fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80110fe:	2300      	movs	r3, #0
 8011100:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8011102:	2300      	movs	r3, #0
 8011104:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8011106:	1d3b      	adds	r3, r7, #4
 8011108:	4619      	mov	r1, r3
 801110a:	4807      	ldr	r0, [pc, #28]	; (8011128 <MX_TIM8_Init+0x168>)
 801110c:	f7fc fb2b 	bl	800d766 <HAL_TIMEx_ConfigBreakDeadTime>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8011116:	f7fe fded 	bl	800fcf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 801111a:	4803      	ldr	r0, [pc, #12]	; (8011128 <MX_TIM8_Init+0x168>)
 801111c:	f000 f830 	bl	8011180 <HAL_TIM_MspPostInit>

}
 8011120:	bf00      	nop
 8011122:	3758      	adds	r7, #88	; 0x58
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	20004560 	.word	0x20004560
 801112c:	40010400 	.word	0x40010400

08011130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a0e      	ldr	r2, [pc, #56]	; (8011178 <HAL_TIM_Base_MspInit+0x48>)
 801113e:	4293      	cmp	r3, r2
 8011140:	d115      	bne.n	801116e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011142:	2300      	movs	r3, #0
 8011144:	60fb      	str	r3, [r7, #12]
 8011146:	4b0d      	ldr	r3, [pc, #52]	; (801117c <HAL_TIM_Base_MspInit+0x4c>)
 8011148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801114a:	4a0c      	ldr	r2, [pc, #48]	; (801117c <HAL_TIM_Base_MspInit+0x4c>)
 801114c:	f043 0302 	orr.w	r3, r3, #2
 8011150:	6453      	str	r3, [r2, #68]	; 0x44
 8011152:	4b0a      	ldr	r3, [pc, #40]	; (801117c <HAL_TIM_Base_MspInit+0x4c>)
 8011154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011156:	f003 0302 	and.w	r3, r3, #2
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 801115e:	2200      	movs	r2, #0
 8011160:	2100      	movs	r1, #0
 8011162:	202c      	movs	r0, #44	; 0x2c
 8011164:	f7f9 f8e1 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8011168:	202c      	movs	r0, #44	; 0x2c
 801116a:	f7f9 f8fa 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801116e:	bf00      	nop
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	40010400 	.word	0x40010400
 801117c:	40023800 	.word	0x40023800

08011180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b08a      	sub	sp, #40	; 0x28
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011188:	f107 0314 	add.w	r3, r7, #20
 801118c:	2200      	movs	r2, #0
 801118e:	601a      	str	r2, [r3, #0]
 8011190:	605a      	str	r2, [r3, #4]
 8011192:	609a      	str	r2, [r3, #8]
 8011194:	60da      	str	r2, [r3, #12]
 8011196:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4a30      	ldr	r2, [pc, #192]	; (8011260 <HAL_TIM_MspPostInit+0xe0>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d15a      	bne.n	8011258 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111a2:	2300      	movs	r3, #0
 80111a4:	613b      	str	r3, [r7, #16]
 80111a6:	4b2f      	ldr	r3, [pc, #188]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111aa:	4a2e      	ldr	r2, [pc, #184]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111ac:	f043 0301 	orr.w	r3, r3, #1
 80111b0:	6313      	str	r3, [r2, #48]	; 0x30
 80111b2:	4b2c      	ldr	r3, [pc, #176]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111b6:	f003 0301 	and.w	r3, r3, #1
 80111ba:	613b      	str	r3, [r7, #16]
 80111bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80111be:	2300      	movs	r3, #0
 80111c0:	60fb      	str	r3, [r7, #12]
 80111c2:	4b28      	ldr	r3, [pc, #160]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c6:	4a27      	ldr	r2, [pc, #156]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111c8:	f043 0302 	orr.w	r3, r3, #2
 80111cc:	6313      	str	r3, [r2, #48]	; 0x30
 80111ce:	4b25      	ldr	r3, [pc, #148]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111d2:	f003 0302 	and.w	r3, r3, #2
 80111d6:	60fb      	str	r3, [r7, #12]
 80111d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80111da:	2300      	movs	r3, #0
 80111dc:	60bb      	str	r3, [r7, #8]
 80111de:	4b21      	ldr	r3, [pc, #132]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e2:	4a20      	ldr	r2, [pc, #128]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111e4:	f043 0304 	orr.w	r3, r3, #4
 80111e8:	6313      	str	r3, [r2, #48]	; 0x30
 80111ea:	4b1e      	ldr	r3, [pc, #120]	; (8011264 <HAL_TIM_MspPostInit+0xe4>)
 80111ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ee:	f003 0304 	and.w	r3, r3, #4
 80111f2:	60bb      	str	r3, [r7, #8]
 80111f4:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80111f6:	2380      	movs	r3, #128	; 0x80
 80111f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111fa:	2302      	movs	r3, #2
 80111fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111fe:	2300      	movs	r3, #0
 8011200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011202:	2300      	movs	r3, #0
 8011204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011206:	2303      	movs	r3, #3
 8011208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801120a:	f107 0314 	add.w	r3, r7, #20
 801120e:	4619      	mov	r1, r3
 8011210:	4815      	ldr	r0, [pc, #84]	; (8011268 <HAL_TIM_MspPostInit+0xe8>)
 8011212:	f7f9 ff3d 	bl	800b090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011216:	2303      	movs	r3, #3
 8011218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801121a:	2302      	movs	r3, #2
 801121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801121e:	2300      	movs	r3, #0
 8011220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011222:	2300      	movs	r3, #0
 8011224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011226:	2303      	movs	r3, #3
 8011228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801122a:	f107 0314 	add.w	r3, r7, #20
 801122e:	4619      	mov	r1, r3
 8011230:	480e      	ldr	r0, [pc, #56]	; (801126c <HAL_TIM_MspPostInit+0xec>)
 8011232:	f7f9 ff2d 	bl	800b090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8011236:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 801123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801123c:	2302      	movs	r3, #2
 801123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011240:	2300      	movs	r3, #0
 8011242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011244:	2300      	movs	r3, #0
 8011246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011248:	2303      	movs	r3, #3
 801124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801124c:	f107 0314 	add.w	r3, r7, #20
 8011250:	4619      	mov	r1, r3
 8011252:	4807      	ldr	r0, [pc, #28]	; (8011270 <HAL_TIM_MspPostInit+0xf0>)
 8011254:	f7f9 ff1c 	bl	800b090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8011258:	bf00      	nop
 801125a:	3728      	adds	r7, #40	; 0x28
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	40010400 	.word	0x40010400
 8011264:	40023800 	.word	0x40023800
 8011268:	40020000 	.word	0x40020000
 801126c:	40020400 	.word	0x40020400
 8011270:	40020800 	.word	0x40020800

08011274 <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 8011274:	b580      	push	{r7, lr}
 8011276:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8011278:	4b0a      	ldr	r3, [pc, #40]	; (80112a4 <TIM_Init+0x30>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f06f 0201 	mvn.w	r2, #1
 8011280:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8011282:	4b08      	ldr	r3, [pc, #32]	; (80112a4 <TIM_Init+0x30>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68da      	ldr	r2, [r3, #12]
 8011288:	4b06      	ldr	r3, [pc, #24]	; (80112a4 <TIM_Init+0x30>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f042 0201 	orr.w	r2, r2, #1
 8011290:	60da      	str	r2, [r3, #12]


	  HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 8011292:	2101      	movs	r1, #1
 8011294:	4803      	ldr	r0, [pc, #12]	; (80112a4 <TIM_Init+0x30>)
 8011296:	f7fb fd41 	bl	800cd1c <HAL_TIM_GenerateEvent>
	  //HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);


	  startPWM();
 801129a:	f000 f805 	bl	80112a8 <startPWM>


}
 801129e:	bf00      	nop
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	20004560 	.word	0x20004560

080112a8 <startPWM>:



inline void startPWM()
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	af00      	add	r7, sp, #0


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 80112ac:	2100      	movs	r1, #0
 80112ae:	480c      	ldr	r0, [pc, #48]	; (80112e0 <startPWM+0x38>)
 80112b0:	f7fb fa48 	bl	800c744 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 80112b4:	2104      	movs	r1, #4
 80112b6:	480a      	ldr	r0, [pc, #40]	; (80112e0 <startPWM+0x38>)
 80112b8:	f7fb fa44 	bl	800c744 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 80112bc:	2108      	movs	r1, #8
 80112be:	4808      	ldr	r0, [pc, #32]	; (80112e0 <startPWM+0x38>)
 80112c0:	f7fb fa40 	bl	800c744 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 80112c4:	2100      	movs	r1, #0
 80112c6:	4806      	ldr	r0, [pc, #24]	; (80112e0 <startPWM+0x38>)
 80112c8:	f7fc f93d 	bl	800d546 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 80112cc:	2104      	movs	r1, #4
 80112ce:	4804      	ldr	r0, [pc, #16]	; (80112e0 <startPWM+0x38>)
 80112d0:	f7fc f939 	bl	800d546 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 80112d4:	2108      	movs	r1, #8
 80112d6:	4802      	ldr	r0, [pc, #8]	; (80112e0 <startPWM+0x38>)
 80112d8:	f7fc f935 	bl	800d546 <HAL_TIMEx_PWMN_Start_IT>

}
 80112dc:	bf00      	nop
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	20004560 	.word	0x20004560

080112e4 <stopPWM>:



inline void stopPWM()
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	af00      	add	r7, sp, #0

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80112e8:	2100      	movs	r1, #0
 80112ea:	480c      	ldr	r0, [pc, #48]	; (801131c <stopPWM+0x38>)
 80112ec:	f7fb faae 	bl	800c84c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_2);
 80112f0:	2104      	movs	r1, #4
 80112f2:	480a      	ldr	r0, [pc, #40]	; (801131c <stopPWM+0x38>)
 80112f4:	f7fb faaa 	bl	800c84c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_3);
 80112f8:	2108      	movs	r1, #8
 80112fa:	4808      	ldr	r0, [pc, #32]	; (801131c <stopPWM+0x38>)
 80112fc:	f7fb faa6 	bl	800c84c <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_1);
 8011300:	2100      	movs	r1, #0
 8011302:	4806      	ldr	r0, [pc, #24]	; (801131c <stopPWM+0x38>)
 8011304:	f7fc f974 	bl	800d5f0 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_2);
 8011308:	2104      	movs	r1, #4
 801130a:	4804      	ldr	r0, [pc, #16]	; (801131c <stopPWM+0x38>)
 801130c:	f7fc f970 	bl	800d5f0 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_3);
 8011310:	2108      	movs	r1, #8
 8011312:	4802      	ldr	r0, [pc, #8]	; (801131c <stopPWM+0x38>)
 8011314:	f7fc f96c 	bl	800d5f0 <HAL_TIMEx_PWMN_Stop_IT>

}
 8011318:	bf00      	nop
 801131a:	bd80      	pop	{r7, pc}
 801131c:	20004560 	.word	0x20004560

08011320 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a11      	ldr	r2, [pc, #68]	; (8011374 <HAL_TIM_PeriodElapsedCallback+0x54>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d11b      	bne.n	801136a <HAL_TIM_PeriodElapsedCallback+0x4a>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f003 0310 	and.w	r3, r3, #16
 801133c:	2b10      	cmp	r3, #16
 801133e:	d014      	beq.n	801136a <HAL_TIM_PeriodElapsedCallback+0x4a>
		{

			currentControl();
 8011340:	f7fc ff3e 	bl	800e1c0 <currentControl>

			// timeout control
			if(timeoutCount < TIMEOUT_MS * PWM_FREQ / 1000)
 8011344:	4b0c      	ldr	r3, [pc, #48]	; (8011378 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801134c:	d205      	bcs.n	801135a <HAL_TIM_PeriodElapsedCallback+0x3a>
			{
				timeoutCount += 1;
 801134e:	4b0a      	ldr	r3, [pc, #40]	; (8011378 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	3301      	adds	r3, #1
 8011354:	4a08      	ldr	r2, [pc, #32]	; (8011378 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8011356:	6013      	str	r3, [r2, #0]
		}


	}

}
 8011358:	e007      	b.n	801136a <HAL_TIM_PeriodElapsedCallback+0x4a>
				stopPWM();
 801135a:	f7ff ffc3 	bl	80112e4 <stopPWM>
				timeoutCount = 0;
 801135e:	4b06      	ldr	r3, [pc, #24]	; (8011378 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8011360:	2200      	movs	r2, #0
 8011362:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 8011364:	4b05      	ldr	r3, [pc, #20]	; (801137c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8011366:	2201      	movs	r2, #1
 8011368:	701a      	strb	r2, [r3, #0]
}
 801136a:	bf00      	nop
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	40010400 	.word	0x40010400
 8011378:	200041fc 	.word	0x200041fc
 801137c:	20004200 	.word	0x20004200

08011380 <timeoutReset>:


inline void timeoutReset()
{
 8011380:	b580      	push	{r7, lr}
 8011382:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8011384:	4b09      	ldr	r3, [pc, #36]	; (80113ac <timeoutReset+0x2c>)
 8011386:	2200      	movs	r2, #0
 8011388:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 801138a:	4b09      	ldr	r3, [pc, #36]	; (80113b0 <timeoutReset+0x30>)
 801138c:	781b      	ldrb	r3, [r3, #0]
 801138e:	b2db      	uxtb	r3, r3
 8011390:	2b01      	cmp	r3, #1
 8011392:	d108      	bne.n	80113a6 <timeoutReset+0x26>
	{
		timeoutState = 0;
 8011394:	4b06      	ldr	r3, [pc, #24]	; (80113b0 <timeoutReset+0x30>)
 8011396:	2200      	movs	r2, #0
 8011398:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 801139a:	f7fd fb83 	bl	800eaa4 <ASR_Reset>
		ACR_Reset();
 801139e:	f7fd f969 	bl	800e674 <ACR_Reset>
		startPWM();
 80113a2:	f7ff ff81 	bl	80112a8 <startPWM>
	}
}
 80113a6:	bf00      	nop
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	200041fc 	.word	0x200041fc
 80113b0:	20004200 	.word	0x20004200

080113b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80113b8:	4b11      	ldr	r3, [pc, #68]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113ba:	4a12      	ldr	r2, [pc, #72]	; (8011404 <MX_USART2_UART_Init+0x50>)
 80113bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80113be:	4b10      	ldr	r3, [pc, #64]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80113c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80113c6:	4b0e      	ldr	r3, [pc, #56]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113c8:	2200      	movs	r2, #0
 80113ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80113cc:	4b0c      	ldr	r3, [pc, #48]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80113d2:	4b0b      	ldr	r3, [pc, #44]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113d4:	2200      	movs	r2, #0
 80113d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80113d8:	4b09      	ldr	r3, [pc, #36]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113da:	220c      	movs	r2, #12
 80113dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80113de:	4b08      	ldr	r3, [pc, #32]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80113e4:	4b06      	ldr	r3, [pc, #24]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113e6:	2200      	movs	r2, #0
 80113e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80113ea:	4805      	ldr	r0, [pc, #20]	; (8011400 <MX_USART2_UART_Init+0x4c>)
 80113ec:	f7fc fa46 	bl	800d87c <HAL_UART_Init>
 80113f0:	4603      	mov	r3, r0
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d001      	beq.n	80113fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80113f6:	f7fe fc7d 	bl	800fcf4 <Error_Handler>
  }

}
 80113fa:	bf00      	nop
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	200045a0 	.word	0x200045a0
 8011404:	40004400 	.word	0x40004400

08011408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b08a      	sub	sp, #40	; 0x28
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011410:	f107 0314 	add.w	r3, r7, #20
 8011414:	2200      	movs	r2, #0
 8011416:	601a      	str	r2, [r3, #0]
 8011418:	605a      	str	r2, [r3, #4]
 801141a:	609a      	str	r2, [r3, #8]
 801141c:	60da      	str	r2, [r3, #12]
 801141e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a1d      	ldr	r2, [pc, #116]	; (801149c <HAL_UART_MspInit+0x94>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d133      	bne.n	8011492 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801142a:	2300      	movs	r3, #0
 801142c:	613b      	str	r3, [r7, #16]
 801142e:	4b1c      	ldr	r3, [pc, #112]	; (80114a0 <HAL_UART_MspInit+0x98>)
 8011430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011432:	4a1b      	ldr	r2, [pc, #108]	; (80114a0 <HAL_UART_MspInit+0x98>)
 8011434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011438:	6413      	str	r3, [r2, #64]	; 0x40
 801143a:	4b19      	ldr	r3, [pc, #100]	; (80114a0 <HAL_UART_MspInit+0x98>)
 801143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011442:	613b      	str	r3, [r7, #16]
 8011444:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011446:	2300      	movs	r3, #0
 8011448:	60fb      	str	r3, [r7, #12]
 801144a:	4b15      	ldr	r3, [pc, #84]	; (80114a0 <HAL_UART_MspInit+0x98>)
 801144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801144e:	4a14      	ldr	r2, [pc, #80]	; (80114a0 <HAL_UART_MspInit+0x98>)
 8011450:	f043 0301 	orr.w	r3, r3, #1
 8011454:	6313      	str	r3, [r2, #48]	; 0x30
 8011456:	4b12      	ldr	r3, [pc, #72]	; (80114a0 <HAL_UART_MspInit+0x98>)
 8011458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145a:	f003 0301 	and.w	r3, r3, #1
 801145e:	60fb      	str	r3, [r7, #12]
 8011460:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8011462:	230c      	movs	r3, #12
 8011464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011466:	2302      	movs	r3, #2
 8011468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801146a:	2301      	movs	r3, #1
 801146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801146e:	2303      	movs	r3, #3
 8011470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011472:	2307      	movs	r3, #7
 8011474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011476:	f107 0314 	add.w	r3, r7, #20
 801147a:	4619      	mov	r1, r3
 801147c:	4809      	ldr	r0, [pc, #36]	; (80114a4 <HAL_UART_MspInit+0x9c>)
 801147e:	f7f9 fe07 	bl	800b090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8011482:	2200      	movs	r2, #0
 8011484:	2100      	movs	r1, #0
 8011486:	2026      	movs	r0, #38	; 0x26
 8011488:	f7f8 ff4f 	bl	800a32a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801148c:	2026      	movs	r0, #38	; 0x26
 801148e:	f7f8 ff68 	bl	800a362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8011492:	bf00      	nop
 8011494:	3728      	adds	r7, #40	; 0x28
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	40004400 	.word	0x40004400
 80114a0:	40023800 	.word	0x40023800
 80114a4:	40020000 	.word	0x40020000

080114a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80114a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80114e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80114ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80114ae:	e003      	b.n	80114b8 <LoopCopyDataInit>

080114b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80114b0:	4b0c      	ldr	r3, [pc, #48]	; (80114e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80114b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80114b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80114b6:	3104      	adds	r1, #4

080114b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80114b8:	480b      	ldr	r0, [pc, #44]	; (80114e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80114ba:	4b0c      	ldr	r3, [pc, #48]	; (80114ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80114bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80114be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80114c0:	d3f6      	bcc.n	80114b0 <CopyDataInit>
  ldr  r2, =_sbss
 80114c2:	4a0b      	ldr	r2, [pc, #44]	; (80114f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80114c4:	e002      	b.n	80114cc <LoopFillZerobss>

080114c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80114c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80114c8:	f842 3b04 	str.w	r3, [r2], #4

080114cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80114cc:	4b09      	ldr	r3, [pc, #36]	; (80114f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80114ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80114d0:	d3f9      	bcc.n	80114c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80114d2:	f7ff fd3f 	bl	8010f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80114d6:	f000 f817 	bl	8011508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80114da:	f7fe fa99 	bl	800fa10 <main>
  bx  lr    
 80114de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80114e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80114e4:	08027268 	.word	0x08027268
  ldr  r0, =_sdata
 80114e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80114ec:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80114f0:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 80114f4:	200045e4 	.word	0x200045e4

080114f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80114f8:	e7fe      	b.n	80114f8 <ADC_IRQHandler>
	...

080114fc <__errno>:
 80114fc:	4b01      	ldr	r3, [pc, #4]	; (8011504 <__errno+0x8>)
 80114fe:	6818      	ldr	r0, [r3, #0]
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	2000003c 	.word	0x2000003c

08011508 <__libc_init_array>:
 8011508:	b570      	push	{r4, r5, r6, lr}
 801150a:	4e0d      	ldr	r6, [pc, #52]	; (8011540 <__libc_init_array+0x38>)
 801150c:	4c0d      	ldr	r4, [pc, #52]	; (8011544 <__libc_init_array+0x3c>)
 801150e:	1ba4      	subs	r4, r4, r6
 8011510:	10a4      	asrs	r4, r4, #2
 8011512:	2500      	movs	r5, #0
 8011514:	42a5      	cmp	r5, r4
 8011516:	d109      	bne.n	801152c <__libc_init_array+0x24>
 8011518:	4e0b      	ldr	r6, [pc, #44]	; (8011548 <__libc_init_array+0x40>)
 801151a:	4c0c      	ldr	r4, [pc, #48]	; (801154c <__libc_init_array+0x44>)
 801151c:	f002 f86a 	bl	80135f4 <_init>
 8011520:	1ba4      	subs	r4, r4, r6
 8011522:	10a4      	asrs	r4, r4, #2
 8011524:	2500      	movs	r5, #0
 8011526:	42a5      	cmp	r5, r4
 8011528:	d105      	bne.n	8011536 <__libc_init_array+0x2e>
 801152a:	bd70      	pop	{r4, r5, r6, pc}
 801152c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011530:	4798      	blx	r3
 8011532:	3501      	adds	r5, #1
 8011534:	e7ee      	b.n	8011514 <__libc_init_array+0xc>
 8011536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801153a:	4798      	blx	r3
 801153c:	3501      	adds	r5, #1
 801153e:	e7f2      	b.n	8011526 <__libc_init_array+0x1e>
 8011540:	08027260 	.word	0x08027260
 8011544:	08027260 	.word	0x08027260
 8011548:	08027260 	.word	0x08027260
 801154c:	08027264 	.word	0x08027264

08011550 <memcpy>:
 8011550:	b510      	push	{r4, lr}
 8011552:	1e43      	subs	r3, r0, #1
 8011554:	440a      	add	r2, r1
 8011556:	4291      	cmp	r1, r2
 8011558:	d100      	bne.n	801155c <memcpy+0xc>
 801155a:	bd10      	pop	{r4, pc}
 801155c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011564:	e7f7      	b.n	8011556 <memcpy+0x6>

08011566 <memset>:
 8011566:	4402      	add	r2, r0
 8011568:	4603      	mov	r3, r0
 801156a:	4293      	cmp	r3, r2
 801156c:	d100      	bne.n	8011570 <memset+0xa>
 801156e:	4770      	bx	lr
 8011570:	f803 1b01 	strb.w	r1, [r3], #1
 8011574:	e7f9      	b.n	801156a <memset+0x4>
	...

08011578 <iprintf>:
 8011578:	b40f      	push	{r0, r1, r2, r3}
 801157a:	4b0a      	ldr	r3, [pc, #40]	; (80115a4 <iprintf+0x2c>)
 801157c:	b513      	push	{r0, r1, r4, lr}
 801157e:	681c      	ldr	r4, [r3, #0]
 8011580:	b124      	cbz	r4, 801158c <iprintf+0x14>
 8011582:	69a3      	ldr	r3, [r4, #24]
 8011584:	b913      	cbnz	r3, 801158c <iprintf+0x14>
 8011586:	4620      	mov	r0, r4
 8011588:	f000 fa22 	bl	80119d0 <__sinit>
 801158c:	ab05      	add	r3, sp, #20
 801158e:	9a04      	ldr	r2, [sp, #16]
 8011590:	68a1      	ldr	r1, [r4, #8]
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	4620      	mov	r0, r4
 8011596:	f000 fbdb 	bl	8011d50 <_vfiprintf_r>
 801159a:	b002      	add	sp, #8
 801159c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115a0:	b004      	add	sp, #16
 80115a2:	4770      	bx	lr
 80115a4:	2000003c 	.word	0x2000003c

080115a8 <_puts_r>:
 80115a8:	b570      	push	{r4, r5, r6, lr}
 80115aa:	460e      	mov	r6, r1
 80115ac:	4605      	mov	r5, r0
 80115ae:	b118      	cbz	r0, 80115b8 <_puts_r+0x10>
 80115b0:	6983      	ldr	r3, [r0, #24]
 80115b2:	b90b      	cbnz	r3, 80115b8 <_puts_r+0x10>
 80115b4:	f000 fa0c 	bl	80119d0 <__sinit>
 80115b8:	69ab      	ldr	r3, [r5, #24]
 80115ba:	68ac      	ldr	r4, [r5, #8]
 80115bc:	b913      	cbnz	r3, 80115c4 <_puts_r+0x1c>
 80115be:	4628      	mov	r0, r5
 80115c0:	f000 fa06 	bl	80119d0 <__sinit>
 80115c4:	4b23      	ldr	r3, [pc, #140]	; (8011654 <_puts_r+0xac>)
 80115c6:	429c      	cmp	r4, r3
 80115c8:	d117      	bne.n	80115fa <_puts_r+0x52>
 80115ca:	686c      	ldr	r4, [r5, #4]
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	071b      	lsls	r3, r3, #28
 80115d0:	d51d      	bpl.n	801160e <_puts_r+0x66>
 80115d2:	6923      	ldr	r3, [r4, #16]
 80115d4:	b1db      	cbz	r3, 801160e <_puts_r+0x66>
 80115d6:	3e01      	subs	r6, #1
 80115d8:	68a3      	ldr	r3, [r4, #8]
 80115da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80115de:	3b01      	subs	r3, #1
 80115e0:	60a3      	str	r3, [r4, #8]
 80115e2:	b9e9      	cbnz	r1, 8011620 <_puts_r+0x78>
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	da2e      	bge.n	8011646 <_puts_r+0x9e>
 80115e8:	4622      	mov	r2, r4
 80115ea:	210a      	movs	r1, #10
 80115ec:	4628      	mov	r0, r5
 80115ee:	f000 f83f 	bl	8011670 <__swbuf_r>
 80115f2:	3001      	adds	r0, #1
 80115f4:	d011      	beq.n	801161a <_puts_r+0x72>
 80115f6:	200a      	movs	r0, #10
 80115f8:	e011      	b.n	801161e <_puts_r+0x76>
 80115fa:	4b17      	ldr	r3, [pc, #92]	; (8011658 <_puts_r+0xb0>)
 80115fc:	429c      	cmp	r4, r3
 80115fe:	d101      	bne.n	8011604 <_puts_r+0x5c>
 8011600:	68ac      	ldr	r4, [r5, #8]
 8011602:	e7e3      	b.n	80115cc <_puts_r+0x24>
 8011604:	4b15      	ldr	r3, [pc, #84]	; (801165c <_puts_r+0xb4>)
 8011606:	429c      	cmp	r4, r3
 8011608:	bf08      	it	eq
 801160a:	68ec      	ldreq	r4, [r5, #12]
 801160c:	e7de      	b.n	80115cc <_puts_r+0x24>
 801160e:	4621      	mov	r1, r4
 8011610:	4628      	mov	r0, r5
 8011612:	f000 f87f 	bl	8011714 <__swsetup_r>
 8011616:	2800      	cmp	r0, #0
 8011618:	d0dd      	beq.n	80115d6 <_puts_r+0x2e>
 801161a:	f04f 30ff 	mov.w	r0, #4294967295
 801161e:	bd70      	pop	{r4, r5, r6, pc}
 8011620:	2b00      	cmp	r3, #0
 8011622:	da04      	bge.n	801162e <_puts_r+0x86>
 8011624:	69a2      	ldr	r2, [r4, #24]
 8011626:	429a      	cmp	r2, r3
 8011628:	dc06      	bgt.n	8011638 <_puts_r+0x90>
 801162a:	290a      	cmp	r1, #10
 801162c:	d004      	beq.n	8011638 <_puts_r+0x90>
 801162e:	6823      	ldr	r3, [r4, #0]
 8011630:	1c5a      	adds	r2, r3, #1
 8011632:	6022      	str	r2, [r4, #0]
 8011634:	7019      	strb	r1, [r3, #0]
 8011636:	e7cf      	b.n	80115d8 <_puts_r+0x30>
 8011638:	4622      	mov	r2, r4
 801163a:	4628      	mov	r0, r5
 801163c:	f000 f818 	bl	8011670 <__swbuf_r>
 8011640:	3001      	adds	r0, #1
 8011642:	d1c9      	bne.n	80115d8 <_puts_r+0x30>
 8011644:	e7e9      	b.n	801161a <_puts_r+0x72>
 8011646:	6823      	ldr	r3, [r4, #0]
 8011648:	200a      	movs	r0, #10
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	6022      	str	r2, [r4, #0]
 801164e:	7018      	strb	r0, [r3, #0]
 8011650:	e7e5      	b.n	801161e <_puts_r+0x76>
 8011652:	bf00      	nop
 8011654:	08026ffc 	.word	0x08026ffc
 8011658:	0802701c 	.word	0x0802701c
 801165c:	08026fdc 	.word	0x08026fdc

08011660 <puts>:
 8011660:	4b02      	ldr	r3, [pc, #8]	; (801166c <puts+0xc>)
 8011662:	4601      	mov	r1, r0
 8011664:	6818      	ldr	r0, [r3, #0]
 8011666:	f7ff bf9f 	b.w	80115a8 <_puts_r>
 801166a:	bf00      	nop
 801166c:	2000003c 	.word	0x2000003c

08011670 <__swbuf_r>:
 8011670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011672:	460e      	mov	r6, r1
 8011674:	4614      	mov	r4, r2
 8011676:	4605      	mov	r5, r0
 8011678:	b118      	cbz	r0, 8011682 <__swbuf_r+0x12>
 801167a:	6983      	ldr	r3, [r0, #24]
 801167c:	b90b      	cbnz	r3, 8011682 <__swbuf_r+0x12>
 801167e:	f000 f9a7 	bl	80119d0 <__sinit>
 8011682:	4b21      	ldr	r3, [pc, #132]	; (8011708 <__swbuf_r+0x98>)
 8011684:	429c      	cmp	r4, r3
 8011686:	d12a      	bne.n	80116de <__swbuf_r+0x6e>
 8011688:	686c      	ldr	r4, [r5, #4]
 801168a:	69a3      	ldr	r3, [r4, #24]
 801168c:	60a3      	str	r3, [r4, #8]
 801168e:	89a3      	ldrh	r3, [r4, #12]
 8011690:	071a      	lsls	r2, r3, #28
 8011692:	d52e      	bpl.n	80116f2 <__swbuf_r+0x82>
 8011694:	6923      	ldr	r3, [r4, #16]
 8011696:	b363      	cbz	r3, 80116f2 <__swbuf_r+0x82>
 8011698:	6923      	ldr	r3, [r4, #16]
 801169a:	6820      	ldr	r0, [r4, #0]
 801169c:	1ac0      	subs	r0, r0, r3
 801169e:	6963      	ldr	r3, [r4, #20]
 80116a0:	b2f6      	uxtb	r6, r6
 80116a2:	4283      	cmp	r3, r0
 80116a4:	4637      	mov	r7, r6
 80116a6:	dc04      	bgt.n	80116b2 <__swbuf_r+0x42>
 80116a8:	4621      	mov	r1, r4
 80116aa:	4628      	mov	r0, r5
 80116ac:	f000 f926 	bl	80118fc <_fflush_r>
 80116b0:	bb28      	cbnz	r0, 80116fe <__swbuf_r+0x8e>
 80116b2:	68a3      	ldr	r3, [r4, #8]
 80116b4:	3b01      	subs	r3, #1
 80116b6:	60a3      	str	r3, [r4, #8]
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	6022      	str	r2, [r4, #0]
 80116be:	701e      	strb	r6, [r3, #0]
 80116c0:	6963      	ldr	r3, [r4, #20]
 80116c2:	3001      	adds	r0, #1
 80116c4:	4283      	cmp	r3, r0
 80116c6:	d004      	beq.n	80116d2 <__swbuf_r+0x62>
 80116c8:	89a3      	ldrh	r3, [r4, #12]
 80116ca:	07db      	lsls	r3, r3, #31
 80116cc:	d519      	bpl.n	8011702 <__swbuf_r+0x92>
 80116ce:	2e0a      	cmp	r6, #10
 80116d0:	d117      	bne.n	8011702 <__swbuf_r+0x92>
 80116d2:	4621      	mov	r1, r4
 80116d4:	4628      	mov	r0, r5
 80116d6:	f000 f911 	bl	80118fc <_fflush_r>
 80116da:	b190      	cbz	r0, 8011702 <__swbuf_r+0x92>
 80116dc:	e00f      	b.n	80116fe <__swbuf_r+0x8e>
 80116de:	4b0b      	ldr	r3, [pc, #44]	; (801170c <__swbuf_r+0x9c>)
 80116e0:	429c      	cmp	r4, r3
 80116e2:	d101      	bne.n	80116e8 <__swbuf_r+0x78>
 80116e4:	68ac      	ldr	r4, [r5, #8]
 80116e6:	e7d0      	b.n	801168a <__swbuf_r+0x1a>
 80116e8:	4b09      	ldr	r3, [pc, #36]	; (8011710 <__swbuf_r+0xa0>)
 80116ea:	429c      	cmp	r4, r3
 80116ec:	bf08      	it	eq
 80116ee:	68ec      	ldreq	r4, [r5, #12]
 80116f0:	e7cb      	b.n	801168a <__swbuf_r+0x1a>
 80116f2:	4621      	mov	r1, r4
 80116f4:	4628      	mov	r0, r5
 80116f6:	f000 f80d 	bl	8011714 <__swsetup_r>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	d0cc      	beq.n	8011698 <__swbuf_r+0x28>
 80116fe:	f04f 37ff 	mov.w	r7, #4294967295
 8011702:	4638      	mov	r0, r7
 8011704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011706:	bf00      	nop
 8011708:	08026ffc 	.word	0x08026ffc
 801170c:	0802701c 	.word	0x0802701c
 8011710:	08026fdc 	.word	0x08026fdc

08011714 <__swsetup_r>:
 8011714:	4b32      	ldr	r3, [pc, #200]	; (80117e0 <__swsetup_r+0xcc>)
 8011716:	b570      	push	{r4, r5, r6, lr}
 8011718:	681d      	ldr	r5, [r3, #0]
 801171a:	4606      	mov	r6, r0
 801171c:	460c      	mov	r4, r1
 801171e:	b125      	cbz	r5, 801172a <__swsetup_r+0x16>
 8011720:	69ab      	ldr	r3, [r5, #24]
 8011722:	b913      	cbnz	r3, 801172a <__swsetup_r+0x16>
 8011724:	4628      	mov	r0, r5
 8011726:	f000 f953 	bl	80119d0 <__sinit>
 801172a:	4b2e      	ldr	r3, [pc, #184]	; (80117e4 <__swsetup_r+0xd0>)
 801172c:	429c      	cmp	r4, r3
 801172e:	d10f      	bne.n	8011750 <__swsetup_r+0x3c>
 8011730:	686c      	ldr	r4, [r5, #4]
 8011732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011736:	b29a      	uxth	r2, r3
 8011738:	0715      	lsls	r5, r2, #28
 801173a:	d42c      	bmi.n	8011796 <__swsetup_r+0x82>
 801173c:	06d0      	lsls	r0, r2, #27
 801173e:	d411      	bmi.n	8011764 <__swsetup_r+0x50>
 8011740:	2209      	movs	r2, #9
 8011742:	6032      	str	r2, [r6, #0]
 8011744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011748:	81a3      	strh	r3, [r4, #12]
 801174a:	f04f 30ff 	mov.w	r0, #4294967295
 801174e:	e03e      	b.n	80117ce <__swsetup_r+0xba>
 8011750:	4b25      	ldr	r3, [pc, #148]	; (80117e8 <__swsetup_r+0xd4>)
 8011752:	429c      	cmp	r4, r3
 8011754:	d101      	bne.n	801175a <__swsetup_r+0x46>
 8011756:	68ac      	ldr	r4, [r5, #8]
 8011758:	e7eb      	b.n	8011732 <__swsetup_r+0x1e>
 801175a:	4b24      	ldr	r3, [pc, #144]	; (80117ec <__swsetup_r+0xd8>)
 801175c:	429c      	cmp	r4, r3
 801175e:	bf08      	it	eq
 8011760:	68ec      	ldreq	r4, [r5, #12]
 8011762:	e7e6      	b.n	8011732 <__swsetup_r+0x1e>
 8011764:	0751      	lsls	r1, r2, #29
 8011766:	d512      	bpl.n	801178e <__swsetup_r+0x7a>
 8011768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801176a:	b141      	cbz	r1, 801177e <__swsetup_r+0x6a>
 801176c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011770:	4299      	cmp	r1, r3
 8011772:	d002      	beq.n	801177a <__swsetup_r+0x66>
 8011774:	4630      	mov	r0, r6
 8011776:	f000 fa19 	bl	8011bac <_free_r>
 801177a:	2300      	movs	r3, #0
 801177c:	6363      	str	r3, [r4, #52]	; 0x34
 801177e:	89a3      	ldrh	r3, [r4, #12]
 8011780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011784:	81a3      	strh	r3, [r4, #12]
 8011786:	2300      	movs	r3, #0
 8011788:	6063      	str	r3, [r4, #4]
 801178a:	6923      	ldr	r3, [r4, #16]
 801178c:	6023      	str	r3, [r4, #0]
 801178e:	89a3      	ldrh	r3, [r4, #12]
 8011790:	f043 0308 	orr.w	r3, r3, #8
 8011794:	81a3      	strh	r3, [r4, #12]
 8011796:	6923      	ldr	r3, [r4, #16]
 8011798:	b94b      	cbnz	r3, 80117ae <__swsetup_r+0x9a>
 801179a:	89a3      	ldrh	r3, [r4, #12]
 801179c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117a4:	d003      	beq.n	80117ae <__swsetup_r+0x9a>
 80117a6:	4621      	mov	r1, r4
 80117a8:	4630      	mov	r0, r6
 80117aa:	f000 f9bf 	bl	8011b2c <__smakebuf_r>
 80117ae:	89a2      	ldrh	r2, [r4, #12]
 80117b0:	f012 0301 	ands.w	r3, r2, #1
 80117b4:	d00c      	beq.n	80117d0 <__swsetup_r+0xbc>
 80117b6:	2300      	movs	r3, #0
 80117b8:	60a3      	str	r3, [r4, #8]
 80117ba:	6963      	ldr	r3, [r4, #20]
 80117bc:	425b      	negs	r3, r3
 80117be:	61a3      	str	r3, [r4, #24]
 80117c0:	6923      	ldr	r3, [r4, #16]
 80117c2:	b953      	cbnz	r3, 80117da <__swsetup_r+0xc6>
 80117c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80117cc:	d1ba      	bne.n	8011744 <__swsetup_r+0x30>
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	0792      	lsls	r2, r2, #30
 80117d2:	bf58      	it	pl
 80117d4:	6963      	ldrpl	r3, [r4, #20]
 80117d6:	60a3      	str	r3, [r4, #8]
 80117d8:	e7f2      	b.n	80117c0 <__swsetup_r+0xac>
 80117da:	2000      	movs	r0, #0
 80117dc:	e7f7      	b.n	80117ce <__swsetup_r+0xba>
 80117de:	bf00      	nop
 80117e0:	2000003c 	.word	0x2000003c
 80117e4:	08026ffc 	.word	0x08026ffc
 80117e8:	0802701c 	.word	0x0802701c
 80117ec:	08026fdc 	.word	0x08026fdc

080117f0 <__sflush_r>:
 80117f0:	898a      	ldrh	r2, [r1, #12]
 80117f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f6:	4605      	mov	r5, r0
 80117f8:	0710      	lsls	r0, r2, #28
 80117fa:	460c      	mov	r4, r1
 80117fc:	d458      	bmi.n	80118b0 <__sflush_r+0xc0>
 80117fe:	684b      	ldr	r3, [r1, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	dc05      	bgt.n	8011810 <__sflush_r+0x20>
 8011804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011806:	2b00      	cmp	r3, #0
 8011808:	dc02      	bgt.n	8011810 <__sflush_r+0x20>
 801180a:	2000      	movs	r0, #0
 801180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011812:	2e00      	cmp	r6, #0
 8011814:	d0f9      	beq.n	801180a <__sflush_r+0x1a>
 8011816:	2300      	movs	r3, #0
 8011818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801181c:	682f      	ldr	r7, [r5, #0]
 801181e:	6a21      	ldr	r1, [r4, #32]
 8011820:	602b      	str	r3, [r5, #0]
 8011822:	d032      	beq.n	801188a <__sflush_r+0x9a>
 8011824:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011826:	89a3      	ldrh	r3, [r4, #12]
 8011828:	075a      	lsls	r2, r3, #29
 801182a:	d505      	bpl.n	8011838 <__sflush_r+0x48>
 801182c:	6863      	ldr	r3, [r4, #4]
 801182e:	1ac0      	subs	r0, r0, r3
 8011830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011832:	b10b      	cbz	r3, 8011838 <__sflush_r+0x48>
 8011834:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011836:	1ac0      	subs	r0, r0, r3
 8011838:	2300      	movs	r3, #0
 801183a:	4602      	mov	r2, r0
 801183c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801183e:	6a21      	ldr	r1, [r4, #32]
 8011840:	4628      	mov	r0, r5
 8011842:	47b0      	blx	r6
 8011844:	1c43      	adds	r3, r0, #1
 8011846:	89a3      	ldrh	r3, [r4, #12]
 8011848:	d106      	bne.n	8011858 <__sflush_r+0x68>
 801184a:	6829      	ldr	r1, [r5, #0]
 801184c:	291d      	cmp	r1, #29
 801184e:	d848      	bhi.n	80118e2 <__sflush_r+0xf2>
 8011850:	4a29      	ldr	r2, [pc, #164]	; (80118f8 <__sflush_r+0x108>)
 8011852:	40ca      	lsrs	r2, r1
 8011854:	07d6      	lsls	r6, r2, #31
 8011856:	d544      	bpl.n	80118e2 <__sflush_r+0xf2>
 8011858:	2200      	movs	r2, #0
 801185a:	6062      	str	r2, [r4, #4]
 801185c:	04d9      	lsls	r1, r3, #19
 801185e:	6922      	ldr	r2, [r4, #16]
 8011860:	6022      	str	r2, [r4, #0]
 8011862:	d504      	bpl.n	801186e <__sflush_r+0x7e>
 8011864:	1c42      	adds	r2, r0, #1
 8011866:	d101      	bne.n	801186c <__sflush_r+0x7c>
 8011868:	682b      	ldr	r3, [r5, #0]
 801186a:	b903      	cbnz	r3, 801186e <__sflush_r+0x7e>
 801186c:	6560      	str	r0, [r4, #84]	; 0x54
 801186e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011870:	602f      	str	r7, [r5, #0]
 8011872:	2900      	cmp	r1, #0
 8011874:	d0c9      	beq.n	801180a <__sflush_r+0x1a>
 8011876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801187a:	4299      	cmp	r1, r3
 801187c:	d002      	beq.n	8011884 <__sflush_r+0x94>
 801187e:	4628      	mov	r0, r5
 8011880:	f000 f994 	bl	8011bac <_free_r>
 8011884:	2000      	movs	r0, #0
 8011886:	6360      	str	r0, [r4, #52]	; 0x34
 8011888:	e7c0      	b.n	801180c <__sflush_r+0x1c>
 801188a:	2301      	movs	r3, #1
 801188c:	4628      	mov	r0, r5
 801188e:	47b0      	blx	r6
 8011890:	1c41      	adds	r1, r0, #1
 8011892:	d1c8      	bne.n	8011826 <__sflush_r+0x36>
 8011894:	682b      	ldr	r3, [r5, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d0c5      	beq.n	8011826 <__sflush_r+0x36>
 801189a:	2b1d      	cmp	r3, #29
 801189c:	d001      	beq.n	80118a2 <__sflush_r+0xb2>
 801189e:	2b16      	cmp	r3, #22
 80118a0:	d101      	bne.n	80118a6 <__sflush_r+0xb6>
 80118a2:	602f      	str	r7, [r5, #0]
 80118a4:	e7b1      	b.n	801180a <__sflush_r+0x1a>
 80118a6:	89a3      	ldrh	r3, [r4, #12]
 80118a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ac:	81a3      	strh	r3, [r4, #12]
 80118ae:	e7ad      	b.n	801180c <__sflush_r+0x1c>
 80118b0:	690f      	ldr	r7, [r1, #16]
 80118b2:	2f00      	cmp	r7, #0
 80118b4:	d0a9      	beq.n	801180a <__sflush_r+0x1a>
 80118b6:	0793      	lsls	r3, r2, #30
 80118b8:	680e      	ldr	r6, [r1, #0]
 80118ba:	bf08      	it	eq
 80118bc:	694b      	ldreq	r3, [r1, #20]
 80118be:	600f      	str	r7, [r1, #0]
 80118c0:	bf18      	it	ne
 80118c2:	2300      	movne	r3, #0
 80118c4:	eba6 0807 	sub.w	r8, r6, r7
 80118c8:	608b      	str	r3, [r1, #8]
 80118ca:	f1b8 0f00 	cmp.w	r8, #0
 80118ce:	dd9c      	ble.n	801180a <__sflush_r+0x1a>
 80118d0:	4643      	mov	r3, r8
 80118d2:	463a      	mov	r2, r7
 80118d4:	6a21      	ldr	r1, [r4, #32]
 80118d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118d8:	4628      	mov	r0, r5
 80118da:	47b0      	blx	r6
 80118dc:	2800      	cmp	r0, #0
 80118de:	dc06      	bgt.n	80118ee <__sflush_r+0xfe>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118e6:	81a3      	strh	r3, [r4, #12]
 80118e8:	f04f 30ff 	mov.w	r0, #4294967295
 80118ec:	e78e      	b.n	801180c <__sflush_r+0x1c>
 80118ee:	4407      	add	r7, r0
 80118f0:	eba8 0800 	sub.w	r8, r8, r0
 80118f4:	e7e9      	b.n	80118ca <__sflush_r+0xda>
 80118f6:	bf00      	nop
 80118f8:	20400001 	.word	0x20400001

080118fc <_fflush_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	690b      	ldr	r3, [r1, #16]
 8011900:	4605      	mov	r5, r0
 8011902:	460c      	mov	r4, r1
 8011904:	b1db      	cbz	r3, 801193e <_fflush_r+0x42>
 8011906:	b118      	cbz	r0, 8011910 <_fflush_r+0x14>
 8011908:	6983      	ldr	r3, [r0, #24]
 801190a:	b90b      	cbnz	r3, 8011910 <_fflush_r+0x14>
 801190c:	f000 f860 	bl	80119d0 <__sinit>
 8011910:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <_fflush_r+0x48>)
 8011912:	429c      	cmp	r4, r3
 8011914:	d109      	bne.n	801192a <_fflush_r+0x2e>
 8011916:	686c      	ldr	r4, [r5, #4]
 8011918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801191c:	b17b      	cbz	r3, 801193e <_fflush_r+0x42>
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011926:	f7ff bf63 	b.w	80117f0 <__sflush_r>
 801192a:	4b07      	ldr	r3, [pc, #28]	; (8011948 <_fflush_r+0x4c>)
 801192c:	429c      	cmp	r4, r3
 801192e:	d101      	bne.n	8011934 <_fflush_r+0x38>
 8011930:	68ac      	ldr	r4, [r5, #8]
 8011932:	e7f1      	b.n	8011918 <_fflush_r+0x1c>
 8011934:	4b05      	ldr	r3, [pc, #20]	; (801194c <_fflush_r+0x50>)
 8011936:	429c      	cmp	r4, r3
 8011938:	bf08      	it	eq
 801193a:	68ec      	ldreq	r4, [r5, #12]
 801193c:	e7ec      	b.n	8011918 <_fflush_r+0x1c>
 801193e:	2000      	movs	r0, #0
 8011940:	bd38      	pop	{r3, r4, r5, pc}
 8011942:	bf00      	nop
 8011944:	08026ffc 	.word	0x08026ffc
 8011948:	0802701c 	.word	0x0802701c
 801194c:	08026fdc 	.word	0x08026fdc

08011950 <std>:
 8011950:	2300      	movs	r3, #0
 8011952:	b510      	push	{r4, lr}
 8011954:	4604      	mov	r4, r0
 8011956:	e9c0 3300 	strd	r3, r3, [r0]
 801195a:	6083      	str	r3, [r0, #8]
 801195c:	8181      	strh	r1, [r0, #12]
 801195e:	6643      	str	r3, [r0, #100]	; 0x64
 8011960:	81c2      	strh	r2, [r0, #14]
 8011962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011966:	6183      	str	r3, [r0, #24]
 8011968:	4619      	mov	r1, r3
 801196a:	2208      	movs	r2, #8
 801196c:	305c      	adds	r0, #92	; 0x5c
 801196e:	f7ff fdfa 	bl	8011566 <memset>
 8011972:	4b05      	ldr	r3, [pc, #20]	; (8011988 <std+0x38>)
 8011974:	6263      	str	r3, [r4, #36]	; 0x24
 8011976:	4b05      	ldr	r3, [pc, #20]	; (801198c <std+0x3c>)
 8011978:	62a3      	str	r3, [r4, #40]	; 0x28
 801197a:	4b05      	ldr	r3, [pc, #20]	; (8011990 <std+0x40>)
 801197c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801197e:	4b05      	ldr	r3, [pc, #20]	; (8011994 <std+0x44>)
 8011980:	6224      	str	r4, [r4, #32]
 8011982:	6323      	str	r3, [r4, #48]	; 0x30
 8011984:	bd10      	pop	{r4, pc}
 8011986:	bf00      	nop
 8011988:	080122ad 	.word	0x080122ad
 801198c:	080122cf 	.word	0x080122cf
 8011990:	08012307 	.word	0x08012307
 8011994:	0801232b 	.word	0x0801232b

08011998 <_cleanup_r>:
 8011998:	4901      	ldr	r1, [pc, #4]	; (80119a0 <_cleanup_r+0x8>)
 801199a:	f000 b885 	b.w	8011aa8 <_fwalk_reent>
 801199e:	bf00      	nop
 80119a0:	080118fd 	.word	0x080118fd

080119a4 <__sfmoreglue>:
 80119a4:	b570      	push	{r4, r5, r6, lr}
 80119a6:	1e4a      	subs	r2, r1, #1
 80119a8:	2568      	movs	r5, #104	; 0x68
 80119aa:	4355      	muls	r5, r2
 80119ac:	460e      	mov	r6, r1
 80119ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119b2:	f000 f949 	bl	8011c48 <_malloc_r>
 80119b6:	4604      	mov	r4, r0
 80119b8:	b140      	cbz	r0, 80119cc <__sfmoreglue+0x28>
 80119ba:	2100      	movs	r1, #0
 80119bc:	e9c0 1600 	strd	r1, r6, [r0]
 80119c0:	300c      	adds	r0, #12
 80119c2:	60a0      	str	r0, [r4, #8]
 80119c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119c8:	f7ff fdcd 	bl	8011566 <memset>
 80119cc:	4620      	mov	r0, r4
 80119ce:	bd70      	pop	{r4, r5, r6, pc}

080119d0 <__sinit>:
 80119d0:	6983      	ldr	r3, [r0, #24]
 80119d2:	b510      	push	{r4, lr}
 80119d4:	4604      	mov	r4, r0
 80119d6:	bb33      	cbnz	r3, 8011a26 <__sinit+0x56>
 80119d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80119dc:	6503      	str	r3, [r0, #80]	; 0x50
 80119de:	4b12      	ldr	r3, [pc, #72]	; (8011a28 <__sinit+0x58>)
 80119e0:	4a12      	ldr	r2, [pc, #72]	; (8011a2c <__sinit+0x5c>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6282      	str	r2, [r0, #40]	; 0x28
 80119e6:	4298      	cmp	r0, r3
 80119e8:	bf04      	itt	eq
 80119ea:	2301      	moveq	r3, #1
 80119ec:	6183      	streq	r3, [r0, #24]
 80119ee:	f000 f81f 	bl	8011a30 <__sfp>
 80119f2:	6060      	str	r0, [r4, #4]
 80119f4:	4620      	mov	r0, r4
 80119f6:	f000 f81b 	bl	8011a30 <__sfp>
 80119fa:	60a0      	str	r0, [r4, #8]
 80119fc:	4620      	mov	r0, r4
 80119fe:	f000 f817 	bl	8011a30 <__sfp>
 8011a02:	2200      	movs	r2, #0
 8011a04:	60e0      	str	r0, [r4, #12]
 8011a06:	2104      	movs	r1, #4
 8011a08:	6860      	ldr	r0, [r4, #4]
 8011a0a:	f7ff ffa1 	bl	8011950 <std>
 8011a0e:	2201      	movs	r2, #1
 8011a10:	2109      	movs	r1, #9
 8011a12:	68a0      	ldr	r0, [r4, #8]
 8011a14:	f7ff ff9c 	bl	8011950 <std>
 8011a18:	2202      	movs	r2, #2
 8011a1a:	2112      	movs	r1, #18
 8011a1c:	68e0      	ldr	r0, [r4, #12]
 8011a1e:	f7ff ff97 	bl	8011950 <std>
 8011a22:	2301      	movs	r3, #1
 8011a24:	61a3      	str	r3, [r4, #24]
 8011a26:	bd10      	pop	{r4, pc}
 8011a28:	08026fd8 	.word	0x08026fd8
 8011a2c:	08011999 	.word	0x08011999

08011a30 <__sfp>:
 8011a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a32:	4b1b      	ldr	r3, [pc, #108]	; (8011aa0 <__sfp+0x70>)
 8011a34:	681e      	ldr	r6, [r3, #0]
 8011a36:	69b3      	ldr	r3, [r6, #24]
 8011a38:	4607      	mov	r7, r0
 8011a3a:	b913      	cbnz	r3, 8011a42 <__sfp+0x12>
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f7ff ffc7 	bl	80119d0 <__sinit>
 8011a42:	3648      	adds	r6, #72	; 0x48
 8011a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a48:	3b01      	subs	r3, #1
 8011a4a:	d503      	bpl.n	8011a54 <__sfp+0x24>
 8011a4c:	6833      	ldr	r3, [r6, #0]
 8011a4e:	b133      	cbz	r3, 8011a5e <__sfp+0x2e>
 8011a50:	6836      	ldr	r6, [r6, #0]
 8011a52:	e7f7      	b.n	8011a44 <__sfp+0x14>
 8011a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a58:	b16d      	cbz	r5, 8011a76 <__sfp+0x46>
 8011a5a:	3468      	adds	r4, #104	; 0x68
 8011a5c:	e7f4      	b.n	8011a48 <__sfp+0x18>
 8011a5e:	2104      	movs	r1, #4
 8011a60:	4638      	mov	r0, r7
 8011a62:	f7ff ff9f 	bl	80119a4 <__sfmoreglue>
 8011a66:	6030      	str	r0, [r6, #0]
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	d1f1      	bne.n	8011a50 <__sfp+0x20>
 8011a6c:	230c      	movs	r3, #12
 8011a6e:	603b      	str	r3, [r7, #0]
 8011a70:	4604      	mov	r4, r0
 8011a72:	4620      	mov	r0, r4
 8011a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a76:	4b0b      	ldr	r3, [pc, #44]	; (8011aa4 <__sfp+0x74>)
 8011a78:	6665      	str	r5, [r4, #100]	; 0x64
 8011a7a:	e9c4 5500 	strd	r5, r5, [r4]
 8011a7e:	60a5      	str	r5, [r4, #8]
 8011a80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011a84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011a88:	2208      	movs	r2, #8
 8011a8a:	4629      	mov	r1, r5
 8011a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a90:	f7ff fd69 	bl	8011566 <memset>
 8011a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a9c:	e7e9      	b.n	8011a72 <__sfp+0x42>
 8011a9e:	bf00      	nop
 8011aa0:	08026fd8 	.word	0x08026fd8
 8011aa4:	ffff0001 	.word	0xffff0001

08011aa8 <_fwalk_reent>:
 8011aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aac:	4680      	mov	r8, r0
 8011aae:	4689      	mov	r9, r1
 8011ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ab4:	2600      	movs	r6, #0
 8011ab6:	b914      	cbnz	r4, 8011abe <_fwalk_reent+0x16>
 8011ab8:	4630      	mov	r0, r6
 8011aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011abe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011ac2:	3f01      	subs	r7, #1
 8011ac4:	d501      	bpl.n	8011aca <_fwalk_reent+0x22>
 8011ac6:	6824      	ldr	r4, [r4, #0]
 8011ac8:	e7f5      	b.n	8011ab6 <_fwalk_reent+0xe>
 8011aca:	89ab      	ldrh	r3, [r5, #12]
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	d907      	bls.n	8011ae0 <_fwalk_reent+0x38>
 8011ad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	d003      	beq.n	8011ae0 <_fwalk_reent+0x38>
 8011ad8:	4629      	mov	r1, r5
 8011ada:	4640      	mov	r0, r8
 8011adc:	47c8      	blx	r9
 8011ade:	4306      	orrs	r6, r0
 8011ae0:	3568      	adds	r5, #104	; 0x68
 8011ae2:	e7ee      	b.n	8011ac2 <_fwalk_reent+0x1a>

08011ae4 <__swhatbuf_r>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	460e      	mov	r6, r1
 8011ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aec:	2900      	cmp	r1, #0
 8011aee:	b096      	sub	sp, #88	; 0x58
 8011af0:	4614      	mov	r4, r2
 8011af2:	461d      	mov	r5, r3
 8011af4:	da07      	bge.n	8011b06 <__swhatbuf_r+0x22>
 8011af6:	2300      	movs	r3, #0
 8011af8:	602b      	str	r3, [r5, #0]
 8011afa:	89b3      	ldrh	r3, [r6, #12]
 8011afc:	061a      	lsls	r2, r3, #24
 8011afe:	d410      	bmi.n	8011b22 <__swhatbuf_r+0x3e>
 8011b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b04:	e00e      	b.n	8011b24 <__swhatbuf_r+0x40>
 8011b06:	466a      	mov	r2, sp
 8011b08:	f000 fc36 	bl	8012378 <_fstat_r>
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	dbf2      	blt.n	8011af6 <__swhatbuf_r+0x12>
 8011b10:	9a01      	ldr	r2, [sp, #4]
 8011b12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b1a:	425a      	negs	r2, r3
 8011b1c:	415a      	adcs	r2, r3
 8011b1e:	602a      	str	r2, [r5, #0]
 8011b20:	e7ee      	b.n	8011b00 <__swhatbuf_r+0x1c>
 8011b22:	2340      	movs	r3, #64	; 0x40
 8011b24:	2000      	movs	r0, #0
 8011b26:	6023      	str	r3, [r4, #0]
 8011b28:	b016      	add	sp, #88	; 0x58
 8011b2a:	bd70      	pop	{r4, r5, r6, pc}

08011b2c <__smakebuf_r>:
 8011b2c:	898b      	ldrh	r3, [r1, #12]
 8011b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b30:	079d      	lsls	r5, r3, #30
 8011b32:	4606      	mov	r6, r0
 8011b34:	460c      	mov	r4, r1
 8011b36:	d507      	bpl.n	8011b48 <__smakebuf_r+0x1c>
 8011b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b3c:	6023      	str	r3, [r4, #0]
 8011b3e:	6123      	str	r3, [r4, #16]
 8011b40:	2301      	movs	r3, #1
 8011b42:	6163      	str	r3, [r4, #20]
 8011b44:	b002      	add	sp, #8
 8011b46:	bd70      	pop	{r4, r5, r6, pc}
 8011b48:	ab01      	add	r3, sp, #4
 8011b4a:	466a      	mov	r2, sp
 8011b4c:	f7ff ffca 	bl	8011ae4 <__swhatbuf_r>
 8011b50:	9900      	ldr	r1, [sp, #0]
 8011b52:	4605      	mov	r5, r0
 8011b54:	4630      	mov	r0, r6
 8011b56:	f000 f877 	bl	8011c48 <_malloc_r>
 8011b5a:	b948      	cbnz	r0, 8011b70 <__smakebuf_r+0x44>
 8011b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b60:	059a      	lsls	r2, r3, #22
 8011b62:	d4ef      	bmi.n	8011b44 <__smakebuf_r+0x18>
 8011b64:	f023 0303 	bic.w	r3, r3, #3
 8011b68:	f043 0302 	orr.w	r3, r3, #2
 8011b6c:	81a3      	strh	r3, [r4, #12]
 8011b6e:	e7e3      	b.n	8011b38 <__smakebuf_r+0xc>
 8011b70:	4b0d      	ldr	r3, [pc, #52]	; (8011ba8 <__smakebuf_r+0x7c>)
 8011b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	6020      	str	r0, [r4, #0]
 8011b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b7c:	81a3      	strh	r3, [r4, #12]
 8011b7e:	9b00      	ldr	r3, [sp, #0]
 8011b80:	6163      	str	r3, [r4, #20]
 8011b82:	9b01      	ldr	r3, [sp, #4]
 8011b84:	6120      	str	r0, [r4, #16]
 8011b86:	b15b      	cbz	r3, 8011ba0 <__smakebuf_r+0x74>
 8011b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f000 fc05 	bl	801239c <_isatty_r>
 8011b92:	b128      	cbz	r0, 8011ba0 <__smakebuf_r+0x74>
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	f023 0303 	bic.w	r3, r3, #3
 8011b9a:	f043 0301 	orr.w	r3, r3, #1
 8011b9e:	81a3      	strh	r3, [r4, #12]
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	431d      	orrs	r5, r3
 8011ba4:	81a5      	strh	r5, [r4, #12]
 8011ba6:	e7cd      	b.n	8011b44 <__smakebuf_r+0x18>
 8011ba8:	08011999 	.word	0x08011999

08011bac <_free_r>:
 8011bac:	b538      	push	{r3, r4, r5, lr}
 8011bae:	4605      	mov	r5, r0
 8011bb0:	2900      	cmp	r1, #0
 8011bb2:	d045      	beq.n	8011c40 <_free_r+0x94>
 8011bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bb8:	1f0c      	subs	r4, r1, #4
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	bfb8      	it	lt
 8011bbe:	18e4      	addlt	r4, r4, r3
 8011bc0:	f000 fc0e 	bl	80123e0 <__malloc_lock>
 8011bc4:	4a1f      	ldr	r2, [pc, #124]	; (8011c44 <_free_r+0x98>)
 8011bc6:	6813      	ldr	r3, [r2, #0]
 8011bc8:	4610      	mov	r0, r2
 8011bca:	b933      	cbnz	r3, 8011bda <_free_r+0x2e>
 8011bcc:	6063      	str	r3, [r4, #4]
 8011bce:	6014      	str	r4, [r2, #0]
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bd6:	f000 bc04 	b.w	80123e2 <__malloc_unlock>
 8011bda:	42a3      	cmp	r3, r4
 8011bdc:	d90c      	bls.n	8011bf8 <_free_r+0x4c>
 8011bde:	6821      	ldr	r1, [r4, #0]
 8011be0:	1862      	adds	r2, r4, r1
 8011be2:	4293      	cmp	r3, r2
 8011be4:	bf04      	itt	eq
 8011be6:	681a      	ldreq	r2, [r3, #0]
 8011be8:	685b      	ldreq	r3, [r3, #4]
 8011bea:	6063      	str	r3, [r4, #4]
 8011bec:	bf04      	itt	eq
 8011bee:	1852      	addeq	r2, r2, r1
 8011bf0:	6022      	streq	r2, [r4, #0]
 8011bf2:	6004      	str	r4, [r0, #0]
 8011bf4:	e7ec      	b.n	8011bd0 <_free_r+0x24>
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	685a      	ldr	r2, [r3, #4]
 8011bfa:	b10a      	cbz	r2, 8011c00 <_free_r+0x54>
 8011bfc:	42a2      	cmp	r2, r4
 8011bfe:	d9fa      	bls.n	8011bf6 <_free_r+0x4a>
 8011c00:	6819      	ldr	r1, [r3, #0]
 8011c02:	1858      	adds	r0, r3, r1
 8011c04:	42a0      	cmp	r0, r4
 8011c06:	d10b      	bne.n	8011c20 <_free_r+0x74>
 8011c08:	6820      	ldr	r0, [r4, #0]
 8011c0a:	4401      	add	r1, r0
 8011c0c:	1858      	adds	r0, r3, r1
 8011c0e:	4282      	cmp	r2, r0
 8011c10:	6019      	str	r1, [r3, #0]
 8011c12:	d1dd      	bne.n	8011bd0 <_free_r+0x24>
 8011c14:	6810      	ldr	r0, [r2, #0]
 8011c16:	6852      	ldr	r2, [r2, #4]
 8011c18:	605a      	str	r2, [r3, #4]
 8011c1a:	4401      	add	r1, r0
 8011c1c:	6019      	str	r1, [r3, #0]
 8011c1e:	e7d7      	b.n	8011bd0 <_free_r+0x24>
 8011c20:	d902      	bls.n	8011c28 <_free_r+0x7c>
 8011c22:	230c      	movs	r3, #12
 8011c24:	602b      	str	r3, [r5, #0]
 8011c26:	e7d3      	b.n	8011bd0 <_free_r+0x24>
 8011c28:	6820      	ldr	r0, [r4, #0]
 8011c2a:	1821      	adds	r1, r4, r0
 8011c2c:	428a      	cmp	r2, r1
 8011c2e:	bf04      	itt	eq
 8011c30:	6811      	ldreq	r1, [r2, #0]
 8011c32:	6852      	ldreq	r2, [r2, #4]
 8011c34:	6062      	str	r2, [r4, #4]
 8011c36:	bf04      	itt	eq
 8011c38:	1809      	addeq	r1, r1, r0
 8011c3a:	6021      	streq	r1, [r4, #0]
 8011c3c:	605c      	str	r4, [r3, #4]
 8011c3e:	e7c7      	b.n	8011bd0 <_free_r+0x24>
 8011c40:	bd38      	pop	{r3, r4, r5, pc}
 8011c42:	bf00      	nop
 8011c44:	20004204 	.word	0x20004204

08011c48 <_malloc_r>:
 8011c48:	b570      	push	{r4, r5, r6, lr}
 8011c4a:	1ccd      	adds	r5, r1, #3
 8011c4c:	f025 0503 	bic.w	r5, r5, #3
 8011c50:	3508      	adds	r5, #8
 8011c52:	2d0c      	cmp	r5, #12
 8011c54:	bf38      	it	cc
 8011c56:	250c      	movcc	r5, #12
 8011c58:	2d00      	cmp	r5, #0
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	db01      	blt.n	8011c62 <_malloc_r+0x1a>
 8011c5e:	42a9      	cmp	r1, r5
 8011c60:	d903      	bls.n	8011c6a <_malloc_r+0x22>
 8011c62:	230c      	movs	r3, #12
 8011c64:	6033      	str	r3, [r6, #0]
 8011c66:	2000      	movs	r0, #0
 8011c68:	bd70      	pop	{r4, r5, r6, pc}
 8011c6a:	f000 fbb9 	bl	80123e0 <__malloc_lock>
 8011c6e:	4a21      	ldr	r2, [pc, #132]	; (8011cf4 <_malloc_r+0xac>)
 8011c70:	6814      	ldr	r4, [r2, #0]
 8011c72:	4621      	mov	r1, r4
 8011c74:	b991      	cbnz	r1, 8011c9c <_malloc_r+0x54>
 8011c76:	4c20      	ldr	r4, [pc, #128]	; (8011cf8 <_malloc_r+0xb0>)
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	b91b      	cbnz	r3, 8011c84 <_malloc_r+0x3c>
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f000 fb05 	bl	801228c <_sbrk_r>
 8011c82:	6020      	str	r0, [r4, #0]
 8011c84:	4629      	mov	r1, r5
 8011c86:	4630      	mov	r0, r6
 8011c88:	f000 fb00 	bl	801228c <_sbrk_r>
 8011c8c:	1c43      	adds	r3, r0, #1
 8011c8e:	d124      	bne.n	8011cda <_malloc_r+0x92>
 8011c90:	230c      	movs	r3, #12
 8011c92:	6033      	str	r3, [r6, #0]
 8011c94:	4630      	mov	r0, r6
 8011c96:	f000 fba4 	bl	80123e2 <__malloc_unlock>
 8011c9a:	e7e4      	b.n	8011c66 <_malloc_r+0x1e>
 8011c9c:	680b      	ldr	r3, [r1, #0]
 8011c9e:	1b5b      	subs	r3, r3, r5
 8011ca0:	d418      	bmi.n	8011cd4 <_malloc_r+0x8c>
 8011ca2:	2b0b      	cmp	r3, #11
 8011ca4:	d90f      	bls.n	8011cc6 <_malloc_r+0x7e>
 8011ca6:	600b      	str	r3, [r1, #0]
 8011ca8:	50cd      	str	r5, [r1, r3]
 8011caa:	18cc      	adds	r4, r1, r3
 8011cac:	4630      	mov	r0, r6
 8011cae:	f000 fb98 	bl	80123e2 <__malloc_unlock>
 8011cb2:	f104 000b 	add.w	r0, r4, #11
 8011cb6:	1d23      	adds	r3, r4, #4
 8011cb8:	f020 0007 	bic.w	r0, r0, #7
 8011cbc:	1ac3      	subs	r3, r0, r3
 8011cbe:	d0d3      	beq.n	8011c68 <_malloc_r+0x20>
 8011cc0:	425a      	negs	r2, r3
 8011cc2:	50e2      	str	r2, [r4, r3]
 8011cc4:	e7d0      	b.n	8011c68 <_malloc_r+0x20>
 8011cc6:	428c      	cmp	r4, r1
 8011cc8:	684b      	ldr	r3, [r1, #4]
 8011cca:	bf16      	itet	ne
 8011ccc:	6063      	strne	r3, [r4, #4]
 8011cce:	6013      	streq	r3, [r2, #0]
 8011cd0:	460c      	movne	r4, r1
 8011cd2:	e7eb      	b.n	8011cac <_malloc_r+0x64>
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	6849      	ldr	r1, [r1, #4]
 8011cd8:	e7cc      	b.n	8011c74 <_malloc_r+0x2c>
 8011cda:	1cc4      	adds	r4, r0, #3
 8011cdc:	f024 0403 	bic.w	r4, r4, #3
 8011ce0:	42a0      	cmp	r0, r4
 8011ce2:	d005      	beq.n	8011cf0 <_malloc_r+0xa8>
 8011ce4:	1a21      	subs	r1, r4, r0
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f000 fad0 	bl	801228c <_sbrk_r>
 8011cec:	3001      	adds	r0, #1
 8011cee:	d0cf      	beq.n	8011c90 <_malloc_r+0x48>
 8011cf0:	6025      	str	r5, [r4, #0]
 8011cf2:	e7db      	b.n	8011cac <_malloc_r+0x64>
 8011cf4:	20004204 	.word	0x20004204
 8011cf8:	20004208 	.word	0x20004208

08011cfc <__sfputc_r>:
 8011cfc:	6893      	ldr	r3, [r2, #8]
 8011cfe:	3b01      	subs	r3, #1
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	b410      	push	{r4}
 8011d04:	6093      	str	r3, [r2, #8]
 8011d06:	da08      	bge.n	8011d1a <__sfputc_r+0x1e>
 8011d08:	6994      	ldr	r4, [r2, #24]
 8011d0a:	42a3      	cmp	r3, r4
 8011d0c:	db01      	blt.n	8011d12 <__sfputc_r+0x16>
 8011d0e:	290a      	cmp	r1, #10
 8011d10:	d103      	bne.n	8011d1a <__sfputc_r+0x1e>
 8011d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d16:	f7ff bcab 	b.w	8011670 <__swbuf_r>
 8011d1a:	6813      	ldr	r3, [r2, #0]
 8011d1c:	1c58      	adds	r0, r3, #1
 8011d1e:	6010      	str	r0, [r2, #0]
 8011d20:	7019      	strb	r1, [r3, #0]
 8011d22:	4608      	mov	r0, r1
 8011d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d28:	4770      	bx	lr

08011d2a <__sfputs_r>:
 8011d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	460f      	mov	r7, r1
 8011d30:	4614      	mov	r4, r2
 8011d32:	18d5      	adds	r5, r2, r3
 8011d34:	42ac      	cmp	r4, r5
 8011d36:	d101      	bne.n	8011d3c <__sfputs_r+0x12>
 8011d38:	2000      	movs	r0, #0
 8011d3a:	e007      	b.n	8011d4c <__sfputs_r+0x22>
 8011d3c:	463a      	mov	r2, r7
 8011d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d42:	4630      	mov	r0, r6
 8011d44:	f7ff ffda 	bl	8011cfc <__sfputc_r>
 8011d48:	1c43      	adds	r3, r0, #1
 8011d4a:	d1f3      	bne.n	8011d34 <__sfputs_r+0xa>
 8011d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d50 <_vfiprintf_r>:
 8011d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d54:	460c      	mov	r4, r1
 8011d56:	b09d      	sub	sp, #116	; 0x74
 8011d58:	4617      	mov	r7, r2
 8011d5a:	461d      	mov	r5, r3
 8011d5c:	4606      	mov	r6, r0
 8011d5e:	b118      	cbz	r0, 8011d68 <_vfiprintf_r+0x18>
 8011d60:	6983      	ldr	r3, [r0, #24]
 8011d62:	b90b      	cbnz	r3, 8011d68 <_vfiprintf_r+0x18>
 8011d64:	f7ff fe34 	bl	80119d0 <__sinit>
 8011d68:	4b7c      	ldr	r3, [pc, #496]	; (8011f5c <_vfiprintf_r+0x20c>)
 8011d6a:	429c      	cmp	r4, r3
 8011d6c:	d158      	bne.n	8011e20 <_vfiprintf_r+0xd0>
 8011d6e:	6874      	ldr	r4, [r6, #4]
 8011d70:	89a3      	ldrh	r3, [r4, #12]
 8011d72:	0718      	lsls	r0, r3, #28
 8011d74:	d55e      	bpl.n	8011e34 <_vfiprintf_r+0xe4>
 8011d76:	6923      	ldr	r3, [r4, #16]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d05b      	beq.n	8011e34 <_vfiprintf_r+0xe4>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d80:	2320      	movs	r3, #32
 8011d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d86:	2330      	movs	r3, #48	; 0x30
 8011d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d8c:	9503      	str	r5, [sp, #12]
 8011d8e:	f04f 0b01 	mov.w	fp, #1
 8011d92:	46b8      	mov	r8, r7
 8011d94:	4645      	mov	r5, r8
 8011d96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011d9a:	b10b      	cbz	r3, 8011da0 <_vfiprintf_r+0x50>
 8011d9c:	2b25      	cmp	r3, #37	; 0x25
 8011d9e:	d154      	bne.n	8011e4a <_vfiprintf_r+0xfa>
 8011da0:	ebb8 0a07 	subs.w	sl, r8, r7
 8011da4:	d00b      	beq.n	8011dbe <_vfiprintf_r+0x6e>
 8011da6:	4653      	mov	r3, sl
 8011da8:	463a      	mov	r2, r7
 8011daa:	4621      	mov	r1, r4
 8011dac:	4630      	mov	r0, r6
 8011dae:	f7ff ffbc 	bl	8011d2a <__sfputs_r>
 8011db2:	3001      	adds	r0, #1
 8011db4:	f000 80c2 	beq.w	8011f3c <_vfiprintf_r+0x1ec>
 8011db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dba:	4453      	add	r3, sl
 8011dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8011dbe:	f898 3000 	ldrb.w	r3, [r8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	f000 80ba 	beq.w	8011f3c <_vfiprintf_r+0x1ec>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	f04f 32ff 	mov.w	r2, #4294967295
 8011dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dd2:	9304      	str	r3, [sp, #16]
 8011dd4:	9307      	str	r3, [sp, #28]
 8011dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dda:	931a      	str	r3, [sp, #104]	; 0x68
 8011ddc:	46a8      	mov	r8, r5
 8011dde:	2205      	movs	r2, #5
 8011de0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011de4:	485e      	ldr	r0, [pc, #376]	; (8011f60 <_vfiprintf_r+0x210>)
 8011de6:	f7f6 f92b 	bl	8008040 <memchr>
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	bb78      	cbnz	r0, 8011e4e <_vfiprintf_r+0xfe>
 8011dee:	06d9      	lsls	r1, r3, #27
 8011df0:	bf44      	itt	mi
 8011df2:	2220      	movmi	r2, #32
 8011df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011df8:	071a      	lsls	r2, r3, #28
 8011dfa:	bf44      	itt	mi
 8011dfc:	222b      	movmi	r2, #43	; 0x2b
 8011dfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011e02:	782a      	ldrb	r2, [r5, #0]
 8011e04:	2a2a      	cmp	r2, #42	; 0x2a
 8011e06:	d02a      	beq.n	8011e5e <_vfiprintf_r+0x10e>
 8011e08:	9a07      	ldr	r2, [sp, #28]
 8011e0a:	46a8      	mov	r8, r5
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	250a      	movs	r5, #10
 8011e10:	4641      	mov	r1, r8
 8011e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e16:	3b30      	subs	r3, #48	; 0x30
 8011e18:	2b09      	cmp	r3, #9
 8011e1a:	d969      	bls.n	8011ef0 <_vfiprintf_r+0x1a0>
 8011e1c:	b360      	cbz	r0, 8011e78 <_vfiprintf_r+0x128>
 8011e1e:	e024      	b.n	8011e6a <_vfiprintf_r+0x11a>
 8011e20:	4b50      	ldr	r3, [pc, #320]	; (8011f64 <_vfiprintf_r+0x214>)
 8011e22:	429c      	cmp	r4, r3
 8011e24:	d101      	bne.n	8011e2a <_vfiprintf_r+0xda>
 8011e26:	68b4      	ldr	r4, [r6, #8]
 8011e28:	e7a2      	b.n	8011d70 <_vfiprintf_r+0x20>
 8011e2a:	4b4f      	ldr	r3, [pc, #316]	; (8011f68 <_vfiprintf_r+0x218>)
 8011e2c:	429c      	cmp	r4, r3
 8011e2e:	bf08      	it	eq
 8011e30:	68f4      	ldreq	r4, [r6, #12]
 8011e32:	e79d      	b.n	8011d70 <_vfiprintf_r+0x20>
 8011e34:	4621      	mov	r1, r4
 8011e36:	4630      	mov	r0, r6
 8011e38:	f7ff fc6c 	bl	8011714 <__swsetup_r>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	d09d      	beq.n	8011d7c <_vfiprintf_r+0x2c>
 8011e40:	f04f 30ff 	mov.w	r0, #4294967295
 8011e44:	b01d      	add	sp, #116	; 0x74
 8011e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e4a:	46a8      	mov	r8, r5
 8011e4c:	e7a2      	b.n	8011d94 <_vfiprintf_r+0x44>
 8011e4e:	4a44      	ldr	r2, [pc, #272]	; (8011f60 <_vfiprintf_r+0x210>)
 8011e50:	1a80      	subs	r0, r0, r2
 8011e52:	fa0b f000 	lsl.w	r0, fp, r0
 8011e56:	4318      	orrs	r0, r3
 8011e58:	9004      	str	r0, [sp, #16]
 8011e5a:	4645      	mov	r5, r8
 8011e5c:	e7be      	b.n	8011ddc <_vfiprintf_r+0x8c>
 8011e5e:	9a03      	ldr	r2, [sp, #12]
 8011e60:	1d11      	adds	r1, r2, #4
 8011e62:	6812      	ldr	r2, [r2, #0]
 8011e64:	9103      	str	r1, [sp, #12]
 8011e66:	2a00      	cmp	r2, #0
 8011e68:	db01      	blt.n	8011e6e <_vfiprintf_r+0x11e>
 8011e6a:	9207      	str	r2, [sp, #28]
 8011e6c:	e004      	b.n	8011e78 <_vfiprintf_r+0x128>
 8011e6e:	4252      	negs	r2, r2
 8011e70:	f043 0302 	orr.w	r3, r3, #2
 8011e74:	9207      	str	r2, [sp, #28]
 8011e76:	9304      	str	r3, [sp, #16]
 8011e78:	f898 3000 	ldrb.w	r3, [r8]
 8011e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e7e:	d10e      	bne.n	8011e9e <_vfiprintf_r+0x14e>
 8011e80:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011e84:	2b2a      	cmp	r3, #42	; 0x2a
 8011e86:	d138      	bne.n	8011efa <_vfiprintf_r+0x1aa>
 8011e88:	9b03      	ldr	r3, [sp, #12]
 8011e8a:	1d1a      	adds	r2, r3, #4
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	9203      	str	r2, [sp, #12]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	bfb8      	it	lt
 8011e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e98:	f108 0802 	add.w	r8, r8, #2
 8011e9c:	9305      	str	r3, [sp, #20]
 8011e9e:	4d33      	ldr	r5, [pc, #204]	; (8011f6c <_vfiprintf_r+0x21c>)
 8011ea0:	f898 1000 	ldrb.w	r1, [r8]
 8011ea4:	2203      	movs	r2, #3
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7f6 f8ca 	bl	8008040 <memchr>
 8011eac:	b140      	cbz	r0, 8011ec0 <_vfiprintf_r+0x170>
 8011eae:	2340      	movs	r3, #64	; 0x40
 8011eb0:	1b40      	subs	r0, r0, r5
 8011eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8011eb6:	9b04      	ldr	r3, [sp, #16]
 8011eb8:	4303      	orrs	r3, r0
 8011eba:	f108 0801 	add.w	r8, r8, #1
 8011ebe:	9304      	str	r3, [sp, #16]
 8011ec0:	f898 1000 	ldrb.w	r1, [r8]
 8011ec4:	482a      	ldr	r0, [pc, #168]	; (8011f70 <_vfiprintf_r+0x220>)
 8011ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011eca:	2206      	movs	r2, #6
 8011ecc:	f108 0701 	add.w	r7, r8, #1
 8011ed0:	f7f6 f8b6 	bl	8008040 <memchr>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	d037      	beq.n	8011f48 <_vfiprintf_r+0x1f8>
 8011ed8:	4b26      	ldr	r3, [pc, #152]	; (8011f74 <_vfiprintf_r+0x224>)
 8011eda:	bb1b      	cbnz	r3, 8011f24 <_vfiprintf_r+0x1d4>
 8011edc:	9b03      	ldr	r3, [sp, #12]
 8011ede:	3307      	adds	r3, #7
 8011ee0:	f023 0307 	bic.w	r3, r3, #7
 8011ee4:	3308      	adds	r3, #8
 8011ee6:	9303      	str	r3, [sp, #12]
 8011ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eea:	444b      	add	r3, r9
 8011eec:	9309      	str	r3, [sp, #36]	; 0x24
 8011eee:	e750      	b.n	8011d92 <_vfiprintf_r+0x42>
 8011ef0:	fb05 3202 	mla	r2, r5, r2, r3
 8011ef4:	2001      	movs	r0, #1
 8011ef6:	4688      	mov	r8, r1
 8011ef8:	e78a      	b.n	8011e10 <_vfiprintf_r+0xc0>
 8011efa:	2300      	movs	r3, #0
 8011efc:	f108 0801 	add.w	r8, r8, #1
 8011f00:	9305      	str	r3, [sp, #20]
 8011f02:	4619      	mov	r1, r3
 8011f04:	250a      	movs	r5, #10
 8011f06:	4640      	mov	r0, r8
 8011f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f0c:	3a30      	subs	r2, #48	; 0x30
 8011f0e:	2a09      	cmp	r2, #9
 8011f10:	d903      	bls.n	8011f1a <_vfiprintf_r+0x1ca>
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d0c3      	beq.n	8011e9e <_vfiprintf_r+0x14e>
 8011f16:	9105      	str	r1, [sp, #20]
 8011f18:	e7c1      	b.n	8011e9e <_vfiprintf_r+0x14e>
 8011f1a:	fb05 2101 	mla	r1, r5, r1, r2
 8011f1e:	2301      	movs	r3, #1
 8011f20:	4680      	mov	r8, r0
 8011f22:	e7f0      	b.n	8011f06 <_vfiprintf_r+0x1b6>
 8011f24:	ab03      	add	r3, sp, #12
 8011f26:	9300      	str	r3, [sp, #0]
 8011f28:	4622      	mov	r2, r4
 8011f2a:	4b13      	ldr	r3, [pc, #76]	; (8011f78 <_vfiprintf_r+0x228>)
 8011f2c:	a904      	add	r1, sp, #16
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f3af 8000 	nop.w
 8011f34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011f38:	4681      	mov	r9, r0
 8011f3a:	d1d5      	bne.n	8011ee8 <_vfiprintf_r+0x198>
 8011f3c:	89a3      	ldrh	r3, [r4, #12]
 8011f3e:	065b      	lsls	r3, r3, #25
 8011f40:	f53f af7e 	bmi.w	8011e40 <_vfiprintf_r+0xf0>
 8011f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f46:	e77d      	b.n	8011e44 <_vfiprintf_r+0xf4>
 8011f48:	ab03      	add	r3, sp, #12
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	4622      	mov	r2, r4
 8011f4e:	4b0a      	ldr	r3, [pc, #40]	; (8011f78 <_vfiprintf_r+0x228>)
 8011f50:	a904      	add	r1, sp, #16
 8011f52:	4630      	mov	r0, r6
 8011f54:	f000 f888 	bl	8012068 <_printf_i>
 8011f58:	e7ec      	b.n	8011f34 <_vfiprintf_r+0x1e4>
 8011f5a:	bf00      	nop
 8011f5c:	08026ffc 	.word	0x08026ffc
 8011f60:	0802703c 	.word	0x0802703c
 8011f64:	0802701c 	.word	0x0802701c
 8011f68:	08026fdc 	.word	0x08026fdc
 8011f6c:	08027042 	.word	0x08027042
 8011f70:	08027046 	.word	0x08027046
 8011f74:	00000000 	.word	0x00000000
 8011f78:	08011d2b 	.word	0x08011d2b

08011f7c <_printf_common>:
 8011f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f80:	4691      	mov	r9, r2
 8011f82:	461f      	mov	r7, r3
 8011f84:	688a      	ldr	r2, [r1, #8]
 8011f86:	690b      	ldr	r3, [r1, #16]
 8011f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	bfb8      	it	lt
 8011f90:	4613      	movlt	r3, r2
 8011f92:	f8c9 3000 	str.w	r3, [r9]
 8011f96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f9a:	4606      	mov	r6, r0
 8011f9c:	460c      	mov	r4, r1
 8011f9e:	b112      	cbz	r2, 8011fa6 <_printf_common+0x2a>
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	f8c9 3000 	str.w	r3, [r9]
 8011fa6:	6823      	ldr	r3, [r4, #0]
 8011fa8:	0699      	lsls	r1, r3, #26
 8011faa:	bf42      	ittt	mi
 8011fac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011fb0:	3302      	addmi	r3, #2
 8011fb2:	f8c9 3000 	strmi.w	r3, [r9]
 8011fb6:	6825      	ldr	r5, [r4, #0]
 8011fb8:	f015 0506 	ands.w	r5, r5, #6
 8011fbc:	d107      	bne.n	8011fce <_printf_common+0x52>
 8011fbe:	f104 0a19 	add.w	sl, r4, #25
 8011fc2:	68e3      	ldr	r3, [r4, #12]
 8011fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8011fc8:	1a9b      	subs	r3, r3, r2
 8011fca:	42ab      	cmp	r3, r5
 8011fcc:	dc28      	bgt.n	8012020 <_printf_common+0xa4>
 8011fce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011fd2:	6822      	ldr	r2, [r4, #0]
 8011fd4:	3300      	adds	r3, #0
 8011fd6:	bf18      	it	ne
 8011fd8:	2301      	movne	r3, #1
 8011fda:	0692      	lsls	r2, r2, #26
 8011fdc:	d42d      	bmi.n	801203a <_printf_common+0xbe>
 8011fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	47c0      	blx	r8
 8011fe8:	3001      	adds	r0, #1
 8011fea:	d020      	beq.n	801202e <_printf_common+0xb2>
 8011fec:	6823      	ldr	r3, [r4, #0]
 8011fee:	68e5      	ldr	r5, [r4, #12]
 8011ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8011ff4:	f003 0306 	and.w	r3, r3, #6
 8011ff8:	2b04      	cmp	r3, #4
 8011ffa:	bf08      	it	eq
 8011ffc:	1aad      	subeq	r5, r5, r2
 8011ffe:	68a3      	ldr	r3, [r4, #8]
 8012000:	6922      	ldr	r2, [r4, #16]
 8012002:	bf0c      	ite	eq
 8012004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012008:	2500      	movne	r5, #0
 801200a:	4293      	cmp	r3, r2
 801200c:	bfc4      	itt	gt
 801200e:	1a9b      	subgt	r3, r3, r2
 8012010:	18ed      	addgt	r5, r5, r3
 8012012:	f04f 0900 	mov.w	r9, #0
 8012016:	341a      	adds	r4, #26
 8012018:	454d      	cmp	r5, r9
 801201a:	d11a      	bne.n	8012052 <_printf_common+0xd6>
 801201c:	2000      	movs	r0, #0
 801201e:	e008      	b.n	8012032 <_printf_common+0xb6>
 8012020:	2301      	movs	r3, #1
 8012022:	4652      	mov	r2, sl
 8012024:	4639      	mov	r1, r7
 8012026:	4630      	mov	r0, r6
 8012028:	47c0      	blx	r8
 801202a:	3001      	adds	r0, #1
 801202c:	d103      	bne.n	8012036 <_printf_common+0xba>
 801202e:	f04f 30ff 	mov.w	r0, #4294967295
 8012032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012036:	3501      	adds	r5, #1
 8012038:	e7c3      	b.n	8011fc2 <_printf_common+0x46>
 801203a:	18e1      	adds	r1, r4, r3
 801203c:	1c5a      	adds	r2, r3, #1
 801203e:	2030      	movs	r0, #48	; 0x30
 8012040:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012044:	4422      	add	r2, r4
 8012046:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801204a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801204e:	3302      	adds	r3, #2
 8012050:	e7c5      	b.n	8011fde <_printf_common+0x62>
 8012052:	2301      	movs	r3, #1
 8012054:	4622      	mov	r2, r4
 8012056:	4639      	mov	r1, r7
 8012058:	4630      	mov	r0, r6
 801205a:	47c0      	blx	r8
 801205c:	3001      	adds	r0, #1
 801205e:	d0e6      	beq.n	801202e <_printf_common+0xb2>
 8012060:	f109 0901 	add.w	r9, r9, #1
 8012064:	e7d8      	b.n	8012018 <_printf_common+0x9c>
	...

08012068 <_printf_i>:
 8012068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801206c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012070:	460c      	mov	r4, r1
 8012072:	7e09      	ldrb	r1, [r1, #24]
 8012074:	b085      	sub	sp, #20
 8012076:	296e      	cmp	r1, #110	; 0x6e
 8012078:	4617      	mov	r7, r2
 801207a:	4606      	mov	r6, r0
 801207c:	4698      	mov	r8, r3
 801207e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012080:	f000 80b3 	beq.w	80121ea <_printf_i+0x182>
 8012084:	d822      	bhi.n	80120cc <_printf_i+0x64>
 8012086:	2963      	cmp	r1, #99	; 0x63
 8012088:	d036      	beq.n	80120f8 <_printf_i+0x90>
 801208a:	d80a      	bhi.n	80120a2 <_printf_i+0x3a>
 801208c:	2900      	cmp	r1, #0
 801208e:	f000 80b9 	beq.w	8012204 <_printf_i+0x19c>
 8012092:	2958      	cmp	r1, #88	; 0x58
 8012094:	f000 8083 	beq.w	801219e <_printf_i+0x136>
 8012098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801209c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80120a0:	e032      	b.n	8012108 <_printf_i+0xa0>
 80120a2:	2964      	cmp	r1, #100	; 0x64
 80120a4:	d001      	beq.n	80120aa <_printf_i+0x42>
 80120a6:	2969      	cmp	r1, #105	; 0x69
 80120a8:	d1f6      	bne.n	8012098 <_printf_i+0x30>
 80120aa:	6820      	ldr	r0, [r4, #0]
 80120ac:	6813      	ldr	r3, [r2, #0]
 80120ae:	0605      	lsls	r5, r0, #24
 80120b0:	f103 0104 	add.w	r1, r3, #4
 80120b4:	d52a      	bpl.n	801210c <_printf_i+0xa4>
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	6011      	str	r1, [r2, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	da03      	bge.n	80120c6 <_printf_i+0x5e>
 80120be:	222d      	movs	r2, #45	; 0x2d
 80120c0:	425b      	negs	r3, r3
 80120c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80120c6:	486f      	ldr	r0, [pc, #444]	; (8012284 <_printf_i+0x21c>)
 80120c8:	220a      	movs	r2, #10
 80120ca:	e039      	b.n	8012140 <_printf_i+0xd8>
 80120cc:	2973      	cmp	r1, #115	; 0x73
 80120ce:	f000 809d 	beq.w	801220c <_printf_i+0x1a4>
 80120d2:	d808      	bhi.n	80120e6 <_printf_i+0x7e>
 80120d4:	296f      	cmp	r1, #111	; 0x6f
 80120d6:	d020      	beq.n	801211a <_printf_i+0xb2>
 80120d8:	2970      	cmp	r1, #112	; 0x70
 80120da:	d1dd      	bne.n	8012098 <_printf_i+0x30>
 80120dc:	6823      	ldr	r3, [r4, #0]
 80120de:	f043 0320 	orr.w	r3, r3, #32
 80120e2:	6023      	str	r3, [r4, #0]
 80120e4:	e003      	b.n	80120ee <_printf_i+0x86>
 80120e6:	2975      	cmp	r1, #117	; 0x75
 80120e8:	d017      	beq.n	801211a <_printf_i+0xb2>
 80120ea:	2978      	cmp	r1, #120	; 0x78
 80120ec:	d1d4      	bne.n	8012098 <_printf_i+0x30>
 80120ee:	2378      	movs	r3, #120	; 0x78
 80120f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120f4:	4864      	ldr	r0, [pc, #400]	; (8012288 <_printf_i+0x220>)
 80120f6:	e055      	b.n	80121a4 <_printf_i+0x13c>
 80120f8:	6813      	ldr	r3, [r2, #0]
 80120fa:	1d19      	adds	r1, r3, #4
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	6011      	str	r1, [r2, #0]
 8012100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012108:	2301      	movs	r3, #1
 801210a:	e08c      	b.n	8012226 <_printf_i+0x1be>
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	6011      	str	r1, [r2, #0]
 8012110:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012114:	bf18      	it	ne
 8012116:	b21b      	sxthne	r3, r3
 8012118:	e7cf      	b.n	80120ba <_printf_i+0x52>
 801211a:	6813      	ldr	r3, [r2, #0]
 801211c:	6825      	ldr	r5, [r4, #0]
 801211e:	1d18      	adds	r0, r3, #4
 8012120:	6010      	str	r0, [r2, #0]
 8012122:	0628      	lsls	r0, r5, #24
 8012124:	d501      	bpl.n	801212a <_printf_i+0xc2>
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	e002      	b.n	8012130 <_printf_i+0xc8>
 801212a:	0668      	lsls	r0, r5, #25
 801212c:	d5fb      	bpl.n	8012126 <_printf_i+0xbe>
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	4854      	ldr	r0, [pc, #336]	; (8012284 <_printf_i+0x21c>)
 8012132:	296f      	cmp	r1, #111	; 0x6f
 8012134:	bf14      	ite	ne
 8012136:	220a      	movne	r2, #10
 8012138:	2208      	moveq	r2, #8
 801213a:	2100      	movs	r1, #0
 801213c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012140:	6865      	ldr	r5, [r4, #4]
 8012142:	60a5      	str	r5, [r4, #8]
 8012144:	2d00      	cmp	r5, #0
 8012146:	f2c0 8095 	blt.w	8012274 <_printf_i+0x20c>
 801214a:	6821      	ldr	r1, [r4, #0]
 801214c:	f021 0104 	bic.w	r1, r1, #4
 8012150:	6021      	str	r1, [r4, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d13d      	bne.n	80121d2 <_printf_i+0x16a>
 8012156:	2d00      	cmp	r5, #0
 8012158:	f040 808e 	bne.w	8012278 <_printf_i+0x210>
 801215c:	4665      	mov	r5, ip
 801215e:	2a08      	cmp	r2, #8
 8012160:	d10b      	bne.n	801217a <_printf_i+0x112>
 8012162:	6823      	ldr	r3, [r4, #0]
 8012164:	07db      	lsls	r3, r3, #31
 8012166:	d508      	bpl.n	801217a <_printf_i+0x112>
 8012168:	6923      	ldr	r3, [r4, #16]
 801216a:	6862      	ldr	r2, [r4, #4]
 801216c:	429a      	cmp	r2, r3
 801216e:	bfde      	ittt	le
 8012170:	2330      	movle	r3, #48	; 0x30
 8012172:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012176:	f105 35ff 	addle.w	r5, r5, #4294967295
 801217a:	ebac 0305 	sub.w	r3, ip, r5
 801217e:	6123      	str	r3, [r4, #16]
 8012180:	f8cd 8000 	str.w	r8, [sp]
 8012184:	463b      	mov	r3, r7
 8012186:	aa03      	add	r2, sp, #12
 8012188:	4621      	mov	r1, r4
 801218a:	4630      	mov	r0, r6
 801218c:	f7ff fef6 	bl	8011f7c <_printf_common>
 8012190:	3001      	adds	r0, #1
 8012192:	d14d      	bne.n	8012230 <_printf_i+0x1c8>
 8012194:	f04f 30ff 	mov.w	r0, #4294967295
 8012198:	b005      	add	sp, #20
 801219a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801219e:	4839      	ldr	r0, [pc, #228]	; (8012284 <_printf_i+0x21c>)
 80121a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80121a4:	6813      	ldr	r3, [r2, #0]
 80121a6:	6821      	ldr	r1, [r4, #0]
 80121a8:	1d1d      	adds	r5, r3, #4
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	6015      	str	r5, [r2, #0]
 80121ae:	060a      	lsls	r2, r1, #24
 80121b0:	d50b      	bpl.n	80121ca <_printf_i+0x162>
 80121b2:	07ca      	lsls	r2, r1, #31
 80121b4:	bf44      	itt	mi
 80121b6:	f041 0120 	orrmi.w	r1, r1, #32
 80121ba:	6021      	strmi	r1, [r4, #0]
 80121bc:	b91b      	cbnz	r3, 80121c6 <_printf_i+0x15e>
 80121be:	6822      	ldr	r2, [r4, #0]
 80121c0:	f022 0220 	bic.w	r2, r2, #32
 80121c4:	6022      	str	r2, [r4, #0]
 80121c6:	2210      	movs	r2, #16
 80121c8:	e7b7      	b.n	801213a <_printf_i+0xd2>
 80121ca:	064d      	lsls	r5, r1, #25
 80121cc:	bf48      	it	mi
 80121ce:	b29b      	uxthmi	r3, r3
 80121d0:	e7ef      	b.n	80121b2 <_printf_i+0x14a>
 80121d2:	4665      	mov	r5, ip
 80121d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80121d8:	fb02 3311 	mls	r3, r2, r1, r3
 80121dc:	5cc3      	ldrb	r3, [r0, r3]
 80121de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80121e2:	460b      	mov	r3, r1
 80121e4:	2900      	cmp	r1, #0
 80121e6:	d1f5      	bne.n	80121d4 <_printf_i+0x16c>
 80121e8:	e7b9      	b.n	801215e <_printf_i+0xf6>
 80121ea:	6813      	ldr	r3, [r2, #0]
 80121ec:	6825      	ldr	r5, [r4, #0]
 80121ee:	6961      	ldr	r1, [r4, #20]
 80121f0:	1d18      	adds	r0, r3, #4
 80121f2:	6010      	str	r0, [r2, #0]
 80121f4:	0628      	lsls	r0, r5, #24
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	d501      	bpl.n	80121fe <_printf_i+0x196>
 80121fa:	6019      	str	r1, [r3, #0]
 80121fc:	e002      	b.n	8012204 <_printf_i+0x19c>
 80121fe:	066a      	lsls	r2, r5, #25
 8012200:	d5fb      	bpl.n	80121fa <_printf_i+0x192>
 8012202:	8019      	strh	r1, [r3, #0]
 8012204:	2300      	movs	r3, #0
 8012206:	6123      	str	r3, [r4, #16]
 8012208:	4665      	mov	r5, ip
 801220a:	e7b9      	b.n	8012180 <_printf_i+0x118>
 801220c:	6813      	ldr	r3, [r2, #0]
 801220e:	1d19      	adds	r1, r3, #4
 8012210:	6011      	str	r1, [r2, #0]
 8012212:	681d      	ldr	r5, [r3, #0]
 8012214:	6862      	ldr	r2, [r4, #4]
 8012216:	2100      	movs	r1, #0
 8012218:	4628      	mov	r0, r5
 801221a:	f7f5 ff11 	bl	8008040 <memchr>
 801221e:	b108      	cbz	r0, 8012224 <_printf_i+0x1bc>
 8012220:	1b40      	subs	r0, r0, r5
 8012222:	6060      	str	r0, [r4, #4]
 8012224:	6863      	ldr	r3, [r4, #4]
 8012226:	6123      	str	r3, [r4, #16]
 8012228:	2300      	movs	r3, #0
 801222a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801222e:	e7a7      	b.n	8012180 <_printf_i+0x118>
 8012230:	6923      	ldr	r3, [r4, #16]
 8012232:	462a      	mov	r2, r5
 8012234:	4639      	mov	r1, r7
 8012236:	4630      	mov	r0, r6
 8012238:	47c0      	blx	r8
 801223a:	3001      	adds	r0, #1
 801223c:	d0aa      	beq.n	8012194 <_printf_i+0x12c>
 801223e:	6823      	ldr	r3, [r4, #0]
 8012240:	079b      	lsls	r3, r3, #30
 8012242:	d413      	bmi.n	801226c <_printf_i+0x204>
 8012244:	68e0      	ldr	r0, [r4, #12]
 8012246:	9b03      	ldr	r3, [sp, #12]
 8012248:	4298      	cmp	r0, r3
 801224a:	bfb8      	it	lt
 801224c:	4618      	movlt	r0, r3
 801224e:	e7a3      	b.n	8012198 <_printf_i+0x130>
 8012250:	2301      	movs	r3, #1
 8012252:	464a      	mov	r2, r9
 8012254:	4639      	mov	r1, r7
 8012256:	4630      	mov	r0, r6
 8012258:	47c0      	blx	r8
 801225a:	3001      	adds	r0, #1
 801225c:	d09a      	beq.n	8012194 <_printf_i+0x12c>
 801225e:	3501      	adds	r5, #1
 8012260:	68e3      	ldr	r3, [r4, #12]
 8012262:	9a03      	ldr	r2, [sp, #12]
 8012264:	1a9b      	subs	r3, r3, r2
 8012266:	42ab      	cmp	r3, r5
 8012268:	dcf2      	bgt.n	8012250 <_printf_i+0x1e8>
 801226a:	e7eb      	b.n	8012244 <_printf_i+0x1dc>
 801226c:	2500      	movs	r5, #0
 801226e:	f104 0919 	add.w	r9, r4, #25
 8012272:	e7f5      	b.n	8012260 <_printf_i+0x1f8>
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1ac      	bne.n	80121d2 <_printf_i+0x16a>
 8012278:	7803      	ldrb	r3, [r0, #0]
 801227a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801227e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012282:	e76c      	b.n	801215e <_printf_i+0xf6>
 8012284:	0802704d 	.word	0x0802704d
 8012288:	0802705e 	.word	0x0802705e

0801228c <_sbrk_r>:
 801228c:	b538      	push	{r3, r4, r5, lr}
 801228e:	4c06      	ldr	r4, [pc, #24]	; (80122a8 <_sbrk_r+0x1c>)
 8012290:	2300      	movs	r3, #0
 8012292:	4605      	mov	r5, r0
 8012294:	4608      	mov	r0, r1
 8012296:	6023      	str	r3, [r4, #0]
 8012298:	f7fe fe30 	bl	8010efc <_sbrk>
 801229c:	1c43      	adds	r3, r0, #1
 801229e:	d102      	bne.n	80122a6 <_sbrk_r+0x1a>
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	b103      	cbz	r3, 80122a6 <_sbrk_r+0x1a>
 80122a4:	602b      	str	r3, [r5, #0]
 80122a6:	bd38      	pop	{r3, r4, r5, pc}
 80122a8:	200045e0 	.word	0x200045e0

080122ac <__sread>:
 80122ac:	b510      	push	{r4, lr}
 80122ae:	460c      	mov	r4, r1
 80122b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122b4:	f000 f896 	bl	80123e4 <_read_r>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	bfab      	itete	ge
 80122bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122be:	89a3      	ldrhlt	r3, [r4, #12]
 80122c0:	181b      	addge	r3, r3, r0
 80122c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122c6:	bfac      	ite	ge
 80122c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80122ca:	81a3      	strhlt	r3, [r4, #12]
 80122cc:	bd10      	pop	{r4, pc}

080122ce <__swrite>:
 80122ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122d2:	461f      	mov	r7, r3
 80122d4:	898b      	ldrh	r3, [r1, #12]
 80122d6:	05db      	lsls	r3, r3, #23
 80122d8:	4605      	mov	r5, r0
 80122da:	460c      	mov	r4, r1
 80122dc:	4616      	mov	r6, r2
 80122de:	d505      	bpl.n	80122ec <__swrite+0x1e>
 80122e0:	2302      	movs	r3, #2
 80122e2:	2200      	movs	r2, #0
 80122e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122e8:	f000 f868 	bl	80123bc <_lseek_r>
 80122ec:	89a3      	ldrh	r3, [r4, #12]
 80122ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122f6:	81a3      	strh	r3, [r4, #12]
 80122f8:	4632      	mov	r2, r6
 80122fa:	463b      	mov	r3, r7
 80122fc:	4628      	mov	r0, r5
 80122fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012302:	f000 b817 	b.w	8012334 <_write_r>

08012306 <__sseek>:
 8012306:	b510      	push	{r4, lr}
 8012308:	460c      	mov	r4, r1
 801230a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801230e:	f000 f855 	bl	80123bc <_lseek_r>
 8012312:	1c43      	adds	r3, r0, #1
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	bf15      	itete	ne
 8012318:	6560      	strne	r0, [r4, #84]	; 0x54
 801231a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801231e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012322:	81a3      	strheq	r3, [r4, #12]
 8012324:	bf18      	it	ne
 8012326:	81a3      	strhne	r3, [r4, #12]
 8012328:	bd10      	pop	{r4, pc}

0801232a <__sclose>:
 801232a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801232e:	f000 b813 	b.w	8012358 <_close_r>
	...

08012334 <_write_r>:
 8012334:	b538      	push	{r3, r4, r5, lr}
 8012336:	4c07      	ldr	r4, [pc, #28]	; (8012354 <_write_r+0x20>)
 8012338:	4605      	mov	r5, r0
 801233a:	4608      	mov	r0, r1
 801233c:	4611      	mov	r1, r2
 801233e:	2200      	movs	r2, #0
 8012340:	6022      	str	r2, [r4, #0]
 8012342:	461a      	mov	r2, r3
 8012344:	f7fd fb47 	bl	800f9d6 <_write>
 8012348:	1c43      	adds	r3, r0, #1
 801234a:	d102      	bne.n	8012352 <_write_r+0x1e>
 801234c:	6823      	ldr	r3, [r4, #0]
 801234e:	b103      	cbz	r3, 8012352 <_write_r+0x1e>
 8012350:	602b      	str	r3, [r5, #0]
 8012352:	bd38      	pop	{r3, r4, r5, pc}
 8012354:	200045e0 	.word	0x200045e0

08012358 <_close_r>:
 8012358:	b538      	push	{r3, r4, r5, lr}
 801235a:	4c06      	ldr	r4, [pc, #24]	; (8012374 <_close_r+0x1c>)
 801235c:	2300      	movs	r3, #0
 801235e:	4605      	mov	r5, r0
 8012360:	4608      	mov	r0, r1
 8012362:	6023      	str	r3, [r4, #0]
 8012364:	f7fe fd95 	bl	8010e92 <_close>
 8012368:	1c43      	adds	r3, r0, #1
 801236a:	d102      	bne.n	8012372 <_close_r+0x1a>
 801236c:	6823      	ldr	r3, [r4, #0]
 801236e:	b103      	cbz	r3, 8012372 <_close_r+0x1a>
 8012370:	602b      	str	r3, [r5, #0]
 8012372:	bd38      	pop	{r3, r4, r5, pc}
 8012374:	200045e0 	.word	0x200045e0

08012378 <_fstat_r>:
 8012378:	b538      	push	{r3, r4, r5, lr}
 801237a:	4c07      	ldr	r4, [pc, #28]	; (8012398 <_fstat_r+0x20>)
 801237c:	2300      	movs	r3, #0
 801237e:	4605      	mov	r5, r0
 8012380:	4608      	mov	r0, r1
 8012382:	4611      	mov	r1, r2
 8012384:	6023      	str	r3, [r4, #0]
 8012386:	f7fe fd90 	bl	8010eaa <_fstat>
 801238a:	1c43      	adds	r3, r0, #1
 801238c:	d102      	bne.n	8012394 <_fstat_r+0x1c>
 801238e:	6823      	ldr	r3, [r4, #0]
 8012390:	b103      	cbz	r3, 8012394 <_fstat_r+0x1c>
 8012392:	602b      	str	r3, [r5, #0]
 8012394:	bd38      	pop	{r3, r4, r5, pc}
 8012396:	bf00      	nop
 8012398:	200045e0 	.word	0x200045e0

0801239c <_isatty_r>:
 801239c:	b538      	push	{r3, r4, r5, lr}
 801239e:	4c06      	ldr	r4, [pc, #24]	; (80123b8 <_isatty_r+0x1c>)
 80123a0:	2300      	movs	r3, #0
 80123a2:	4605      	mov	r5, r0
 80123a4:	4608      	mov	r0, r1
 80123a6:	6023      	str	r3, [r4, #0]
 80123a8:	f7fe fd8f 	bl	8010eca <_isatty>
 80123ac:	1c43      	adds	r3, r0, #1
 80123ae:	d102      	bne.n	80123b6 <_isatty_r+0x1a>
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	b103      	cbz	r3, 80123b6 <_isatty_r+0x1a>
 80123b4:	602b      	str	r3, [r5, #0]
 80123b6:	bd38      	pop	{r3, r4, r5, pc}
 80123b8:	200045e0 	.word	0x200045e0

080123bc <_lseek_r>:
 80123bc:	b538      	push	{r3, r4, r5, lr}
 80123be:	4c07      	ldr	r4, [pc, #28]	; (80123dc <_lseek_r+0x20>)
 80123c0:	4605      	mov	r5, r0
 80123c2:	4608      	mov	r0, r1
 80123c4:	4611      	mov	r1, r2
 80123c6:	2200      	movs	r2, #0
 80123c8:	6022      	str	r2, [r4, #0]
 80123ca:	461a      	mov	r2, r3
 80123cc:	f7fe fd88 	bl	8010ee0 <_lseek>
 80123d0:	1c43      	adds	r3, r0, #1
 80123d2:	d102      	bne.n	80123da <_lseek_r+0x1e>
 80123d4:	6823      	ldr	r3, [r4, #0]
 80123d6:	b103      	cbz	r3, 80123da <_lseek_r+0x1e>
 80123d8:	602b      	str	r3, [r5, #0]
 80123da:	bd38      	pop	{r3, r4, r5, pc}
 80123dc:	200045e0 	.word	0x200045e0

080123e0 <__malloc_lock>:
 80123e0:	4770      	bx	lr

080123e2 <__malloc_unlock>:
 80123e2:	4770      	bx	lr

080123e4 <_read_r>:
 80123e4:	b538      	push	{r3, r4, r5, lr}
 80123e6:	4c07      	ldr	r4, [pc, #28]	; (8012404 <_read_r+0x20>)
 80123e8:	4605      	mov	r5, r0
 80123ea:	4608      	mov	r0, r1
 80123ec:	4611      	mov	r1, r2
 80123ee:	2200      	movs	r2, #0
 80123f0:	6022      	str	r2, [r4, #0]
 80123f2:	461a      	mov	r2, r3
 80123f4:	f7fe fd30 	bl	8010e58 <_read>
 80123f8:	1c43      	adds	r3, r0, #1
 80123fa:	d102      	bne.n	8012402 <_read_r+0x1e>
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	b103      	cbz	r3, 8012402 <_read_r+0x1e>
 8012400:	602b      	str	r3, [r5, #0]
 8012402:	bd38      	pop	{r3, r4, r5, pc}
 8012404:	200045e0 	.word	0x200045e0

08012408 <cos>:
 8012408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801240a:	ec51 0b10 	vmov	r0, r1, d0
 801240e:	4a1e      	ldr	r2, [pc, #120]	; (8012488 <cos+0x80>)
 8012410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012414:	4293      	cmp	r3, r2
 8012416:	dc06      	bgt.n	8012426 <cos+0x1e>
 8012418:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012480 <cos+0x78>
 801241c:	f000 fb10 	bl	8012a40 <__kernel_cos>
 8012420:	ec51 0b10 	vmov	r0, r1, d0
 8012424:	e007      	b.n	8012436 <cos+0x2e>
 8012426:	4a19      	ldr	r2, [pc, #100]	; (801248c <cos+0x84>)
 8012428:	4293      	cmp	r3, r2
 801242a:	dd09      	ble.n	8012440 <cos+0x38>
 801242c:	ee10 2a10 	vmov	r2, s0
 8012430:	460b      	mov	r3, r1
 8012432:	f7f5 fe59 	bl	80080e8 <__aeabi_dsub>
 8012436:	ec41 0b10 	vmov	d0, r0, r1
 801243a:	b005      	add	sp, #20
 801243c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012440:	4668      	mov	r0, sp
 8012442:	f000 f881 	bl	8012548 <__ieee754_rem_pio2>
 8012446:	f000 0003 	and.w	r0, r0, #3
 801244a:	2801      	cmp	r0, #1
 801244c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012450:	ed9d 0b00 	vldr	d0, [sp]
 8012454:	d007      	beq.n	8012466 <cos+0x5e>
 8012456:	2802      	cmp	r0, #2
 8012458:	d00e      	beq.n	8012478 <cos+0x70>
 801245a:	2800      	cmp	r0, #0
 801245c:	d0de      	beq.n	801241c <cos+0x14>
 801245e:	2001      	movs	r0, #1
 8012460:	f000 fef6 	bl	8013250 <__kernel_sin>
 8012464:	e7dc      	b.n	8012420 <cos+0x18>
 8012466:	f000 fef3 	bl	8013250 <__kernel_sin>
 801246a:	ec53 2b10 	vmov	r2, r3, d0
 801246e:	ee10 0a10 	vmov	r0, s0
 8012472:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012476:	e7de      	b.n	8012436 <cos+0x2e>
 8012478:	f000 fae2 	bl	8012a40 <__kernel_cos>
 801247c:	e7f5      	b.n	801246a <cos+0x62>
 801247e:	bf00      	nop
	...
 8012488:	3fe921fb 	.word	0x3fe921fb
 801248c:	7fefffff 	.word	0x7fefffff

08012490 <fmodf>:
 8012490:	b5d0      	push	{r4, r6, r7, lr}
 8012492:	ed2d 8b02 	vpush	{d8}
 8012496:	b08a      	sub	sp, #40	; 0x28
 8012498:	eef0 8a40 	vmov.f32	s17, s0
 801249c:	eeb0 8a60 	vmov.f32	s16, s1
 80124a0:	f000 fa44 	bl	801292c <__ieee754_fmodf>
 80124a4:	4b26      	ldr	r3, [pc, #152]	; (8012540 <fmodf+0xb0>)
 80124a6:	f993 4000 	ldrsb.w	r4, [r3]
 80124aa:	1c63      	adds	r3, r4, #1
 80124ac:	d035      	beq.n	801251a <fmodf+0x8a>
 80124ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80124b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b6:	d630      	bvs.n	801251a <fmodf+0x8a>
 80124b8:	eef4 8a68 	vcmp.f32	s17, s17
 80124bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c0:	d62b      	bvs.n	801251a <fmodf+0x8a>
 80124c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80124c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ca:	d126      	bne.n	801251a <fmodf+0x8a>
 80124cc:	2301      	movs	r3, #1
 80124ce:	9300      	str	r3, [sp, #0]
 80124d0:	4b1c      	ldr	r3, [pc, #112]	; (8012544 <fmodf+0xb4>)
 80124d2:	9301      	str	r3, [sp, #4]
 80124d4:	ee18 0a90 	vmov	r0, s17
 80124d8:	2300      	movs	r3, #0
 80124da:	9308      	str	r3, [sp, #32]
 80124dc:	f7f5 ff64 	bl	80083a8 <__aeabi_f2d>
 80124e0:	4606      	mov	r6, r0
 80124e2:	460f      	mov	r7, r1
 80124e4:	ee18 0a10 	vmov	r0, s16
 80124e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80124ec:	f7f5 ff5c 	bl	80083a8 <__aeabi_f2d>
 80124f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124f4:	b9ac      	cbnz	r4, 8012522 <fmodf+0x92>
 80124f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80124fa:	4668      	mov	r0, sp
 80124fc:	f000 fff0 	bl	80134e0 <matherr>
 8012500:	b1c8      	cbz	r0, 8012536 <fmodf+0xa6>
 8012502:	9b08      	ldr	r3, [sp, #32]
 8012504:	b11b      	cbz	r3, 801250e <fmodf+0x7e>
 8012506:	f7fe fff9 	bl	80114fc <__errno>
 801250a:	9b08      	ldr	r3, [sp, #32]
 801250c:	6003      	str	r3, [r0, #0]
 801250e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012512:	f7f6 fa63 	bl	80089dc <__aeabi_d2f>
 8012516:	ee00 0a10 	vmov	s0, r0
 801251a:	b00a      	add	sp, #40	; 0x28
 801251c:	ecbd 8b02 	vpop	{d8}
 8012520:	bdd0      	pop	{r4, r6, r7, pc}
 8012522:	2200      	movs	r2, #0
 8012524:	2300      	movs	r3, #0
 8012526:	4610      	mov	r0, r2
 8012528:	4619      	mov	r1, r3
 801252a:	f7f6 f8bf 	bl	80086ac <__aeabi_ddiv>
 801252e:	2c02      	cmp	r4, #2
 8012530:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012534:	d1e1      	bne.n	80124fa <fmodf+0x6a>
 8012536:	f7fe ffe1 	bl	80114fc <__errno>
 801253a:	2321      	movs	r3, #33	; 0x21
 801253c:	6003      	str	r3, [r0, #0]
 801253e:	e7e0      	b.n	8012502 <fmodf+0x72>
 8012540:	200000a0 	.word	0x200000a0
 8012544:	0802706f 	.word	0x0802706f

08012548 <__ieee754_rem_pio2>:
 8012548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	ec57 6b10 	vmov	r6, r7, d0
 8012550:	4bc3      	ldr	r3, [pc, #780]	; (8012860 <__ieee754_rem_pio2+0x318>)
 8012552:	b08d      	sub	sp, #52	; 0x34
 8012554:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012558:	4598      	cmp	r8, r3
 801255a:	4604      	mov	r4, r0
 801255c:	9704      	str	r7, [sp, #16]
 801255e:	dc07      	bgt.n	8012570 <__ieee754_rem_pio2+0x28>
 8012560:	2200      	movs	r2, #0
 8012562:	2300      	movs	r3, #0
 8012564:	ed84 0b00 	vstr	d0, [r4]
 8012568:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801256c:	2500      	movs	r5, #0
 801256e:	e027      	b.n	80125c0 <__ieee754_rem_pio2+0x78>
 8012570:	4bbc      	ldr	r3, [pc, #752]	; (8012864 <__ieee754_rem_pio2+0x31c>)
 8012572:	4598      	cmp	r8, r3
 8012574:	dc75      	bgt.n	8012662 <__ieee754_rem_pio2+0x11a>
 8012576:	9b04      	ldr	r3, [sp, #16]
 8012578:	4dbb      	ldr	r5, [pc, #748]	; (8012868 <__ieee754_rem_pio2+0x320>)
 801257a:	2b00      	cmp	r3, #0
 801257c:	ee10 0a10 	vmov	r0, s0
 8012580:	a3a9      	add	r3, pc, #676	; (adr r3, 8012828 <__ieee754_rem_pio2+0x2e0>)
 8012582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012586:	4639      	mov	r1, r7
 8012588:	dd36      	ble.n	80125f8 <__ieee754_rem_pio2+0xb0>
 801258a:	f7f5 fdad 	bl	80080e8 <__aeabi_dsub>
 801258e:	45a8      	cmp	r8, r5
 8012590:	4606      	mov	r6, r0
 8012592:	460f      	mov	r7, r1
 8012594:	d018      	beq.n	80125c8 <__ieee754_rem_pio2+0x80>
 8012596:	a3a6      	add	r3, pc, #664	; (adr r3, 8012830 <__ieee754_rem_pio2+0x2e8>)
 8012598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259c:	f7f5 fda4 	bl	80080e8 <__aeabi_dsub>
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	e9c4 2300 	strd	r2, r3, [r4]
 80125a8:	4630      	mov	r0, r6
 80125aa:	4639      	mov	r1, r7
 80125ac:	f7f5 fd9c 	bl	80080e8 <__aeabi_dsub>
 80125b0:	a39f      	add	r3, pc, #636	; (adr r3, 8012830 <__ieee754_rem_pio2+0x2e8>)
 80125b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b6:	f7f5 fd97 	bl	80080e8 <__aeabi_dsub>
 80125ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80125be:	2501      	movs	r5, #1
 80125c0:	4628      	mov	r0, r5
 80125c2:	b00d      	add	sp, #52	; 0x34
 80125c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c8:	a39b      	add	r3, pc, #620	; (adr r3, 8012838 <__ieee754_rem_pio2+0x2f0>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	f7f5 fd8b 	bl	80080e8 <__aeabi_dsub>
 80125d2:	a39b      	add	r3, pc, #620	; (adr r3, 8012840 <__ieee754_rem_pio2+0x2f8>)
 80125d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d8:	4606      	mov	r6, r0
 80125da:	460f      	mov	r7, r1
 80125dc:	f7f5 fd84 	bl	80080e8 <__aeabi_dsub>
 80125e0:	4602      	mov	r2, r0
 80125e2:	460b      	mov	r3, r1
 80125e4:	e9c4 2300 	strd	r2, r3, [r4]
 80125e8:	4630      	mov	r0, r6
 80125ea:	4639      	mov	r1, r7
 80125ec:	f7f5 fd7c 	bl	80080e8 <__aeabi_dsub>
 80125f0:	a393      	add	r3, pc, #588	; (adr r3, 8012840 <__ieee754_rem_pio2+0x2f8>)
 80125f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f6:	e7de      	b.n	80125b6 <__ieee754_rem_pio2+0x6e>
 80125f8:	f7f5 fd78 	bl	80080ec <__adddf3>
 80125fc:	45a8      	cmp	r8, r5
 80125fe:	4606      	mov	r6, r0
 8012600:	460f      	mov	r7, r1
 8012602:	d016      	beq.n	8012632 <__ieee754_rem_pio2+0xea>
 8012604:	a38a      	add	r3, pc, #552	; (adr r3, 8012830 <__ieee754_rem_pio2+0x2e8>)
 8012606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260a:	f7f5 fd6f 	bl	80080ec <__adddf3>
 801260e:	4602      	mov	r2, r0
 8012610:	460b      	mov	r3, r1
 8012612:	e9c4 2300 	strd	r2, r3, [r4]
 8012616:	4630      	mov	r0, r6
 8012618:	4639      	mov	r1, r7
 801261a:	f7f5 fd65 	bl	80080e8 <__aeabi_dsub>
 801261e:	a384      	add	r3, pc, #528	; (adr r3, 8012830 <__ieee754_rem_pio2+0x2e8>)
 8012620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012624:	f7f5 fd62 	bl	80080ec <__adddf3>
 8012628:	f04f 35ff 	mov.w	r5, #4294967295
 801262c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012630:	e7c6      	b.n	80125c0 <__ieee754_rem_pio2+0x78>
 8012632:	a381      	add	r3, pc, #516	; (adr r3, 8012838 <__ieee754_rem_pio2+0x2f0>)
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	f7f5 fd58 	bl	80080ec <__adddf3>
 801263c:	a380      	add	r3, pc, #512	; (adr r3, 8012840 <__ieee754_rem_pio2+0x2f8>)
 801263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012642:	4606      	mov	r6, r0
 8012644:	460f      	mov	r7, r1
 8012646:	f7f5 fd51 	bl	80080ec <__adddf3>
 801264a:	4602      	mov	r2, r0
 801264c:	460b      	mov	r3, r1
 801264e:	e9c4 2300 	strd	r2, r3, [r4]
 8012652:	4630      	mov	r0, r6
 8012654:	4639      	mov	r1, r7
 8012656:	f7f5 fd47 	bl	80080e8 <__aeabi_dsub>
 801265a:	a379      	add	r3, pc, #484	; (adr r3, 8012840 <__ieee754_rem_pio2+0x2f8>)
 801265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012660:	e7e0      	b.n	8012624 <__ieee754_rem_pio2+0xdc>
 8012662:	4b82      	ldr	r3, [pc, #520]	; (801286c <__ieee754_rem_pio2+0x324>)
 8012664:	4598      	cmp	r8, r3
 8012666:	f300 80d0 	bgt.w	801280a <__ieee754_rem_pio2+0x2c2>
 801266a:	f000 feab 	bl	80133c4 <fabs>
 801266e:	ec57 6b10 	vmov	r6, r7, d0
 8012672:	ee10 0a10 	vmov	r0, s0
 8012676:	a374      	add	r3, pc, #464	; (adr r3, 8012848 <__ieee754_rem_pio2+0x300>)
 8012678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267c:	4639      	mov	r1, r7
 801267e:	f7f5 feeb 	bl	8008458 <__aeabi_dmul>
 8012682:	2200      	movs	r2, #0
 8012684:	4b7a      	ldr	r3, [pc, #488]	; (8012870 <__ieee754_rem_pio2+0x328>)
 8012686:	f7f5 fd31 	bl	80080ec <__adddf3>
 801268a:	f7f6 f97f 	bl	800898c <__aeabi_d2iz>
 801268e:	4605      	mov	r5, r0
 8012690:	f7f5 fe78 	bl	8008384 <__aeabi_i2d>
 8012694:	a364      	add	r3, pc, #400	; (adr r3, 8012828 <__ieee754_rem_pio2+0x2e0>)
 8012696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801269e:	f7f5 fedb 	bl	8008458 <__aeabi_dmul>
 80126a2:	4602      	mov	r2, r0
 80126a4:	460b      	mov	r3, r1
 80126a6:	4630      	mov	r0, r6
 80126a8:	4639      	mov	r1, r7
 80126aa:	f7f5 fd1d 	bl	80080e8 <__aeabi_dsub>
 80126ae:	a360      	add	r3, pc, #384	; (adr r3, 8012830 <__ieee754_rem_pio2+0x2e8>)
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	4682      	mov	sl, r0
 80126b6:	468b      	mov	fp, r1
 80126b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126bc:	f7f5 fecc 	bl	8008458 <__aeabi_dmul>
 80126c0:	2d1f      	cmp	r5, #31
 80126c2:	4606      	mov	r6, r0
 80126c4:	460f      	mov	r7, r1
 80126c6:	dc0c      	bgt.n	80126e2 <__ieee754_rem_pio2+0x19a>
 80126c8:	1e6a      	subs	r2, r5, #1
 80126ca:	4b6a      	ldr	r3, [pc, #424]	; (8012874 <__ieee754_rem_pio2+0x32c>)
 80126cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126d0:	4543      	cmp	r3, r8
 80126d2:	d006      	beq.n	80126e2 <__ieee754_rem_pio2+0x19a>
 80126d4:	4632      	mov	r2, r6
 80126d6:	463b      	mov	r3, r7
 80126d8:	4650      	mov	r0, sl
 80126da:	4659      	mov	r1, fp
 80126dc:	f7f5 fd04 	bl	80080e8 <__aeabi_dsub>
 80126e0:	e00e      	b.n	8012700 <__ieee754_rem_pio2+0x1b8>
 80126e2:	4632      	mov	r2, r6
 80126e4:	463b      	mov	r3, r7
 80126e6:	4650      	mov	r0, sl
 80126e8:	4659      	mov	r1, fp
 80126ea:	f7f5 fcfd 	bl	80080e8 <__aeabi_dsub>
 80126ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80126f2:	9305      	str	r3, [sp, #20]
 80126f4:	9a05      	ldr	r2, [sp, #20]
 80126f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	2b10      	cmp	r3, #16
 80126fe:	dc02      	bgt.n	8012706 <__ieee754_rem_pio2+0x1be>
 8012700:	e9c4 0100 	strd	r0, r1, [r4]
 8012704:	e039      	b.n	801277a <__ieee754_rem_pio2+0x232>
 8012706:	a34c      	add	r3, pc, #304	; (adr r3, 8012838 <__ieee754_rem_pio2+0x2f0>)
 8012708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012710:	f7f5 fea2 	bl	8008458 <__aeabi_dmul>
 8012714:	4606      	mov	r6, r0
 8012716:	460f      	mov	r7, r1
 8012718:	4602      	mov	r2, r0
 801271a:	460b      	mov	r3, r1
 801271c:	4650      	mov	r0, sl
 801271e:	4659      	mov	r1, fp
 8012720:	f7f5 fce2 	bl	80080e8 <__aeabi_dsub>
 8012724:	4602      	mov	r2, r0
 8012726:	460b      	mov	r3, r1
 8012728:	4680      	mov	r8, r0
 801272a:	4689      	mov	r9, r1
 801272c:	4650      	mov	r0, sl
 801272e:	4659      	mov	r1, fp
 8012730:	f7f5 fcda 	bl	80080e8 <__aeabi_dsub>
 8012734:	4632      	mov	r2, r6
 8012736:	463b      	mov	r3, r7
 8012738:	f7f5 fcd6 	bl	80080e8 <__aeabi_dsub>
 801273c:	a340      	add	r3, pc, #256	; (adr r3, 8012840 <__ieee754_rem_pio2+0x2f8>)
 801273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012742:	4606      	mov	r6, r0
 8012744:	460f      	mov	r7, r1
 8012746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801274a:	f7f5 fe85 	bl	8008458 <__aeabi_dmul>
 801274e:	4632      	mov	r2, r6
 8012750:	463b      	mov	r3, r7
 8012752:	f7f5 fcc9 	bl	80080e8 <__aeabi_dsub>
 8012756:	4602      	mov	r2, r0
 8012758:	460b      	mov	r3, r1
 801275a:	4606      	mov	r6, r0
 801275c:	460f      	mov	r7, r1
 801275e:	4640      	mov	r0, r8
 8012760:	4649      	mov	r1, r9
 8012762:	f7f5 fcc1 	bl	80080e8 <__aeabi_dsub>
 8012766:	9a05      	ldr	r2, [sp, #20]
 8012768:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801276c:	1ad3      	subs	r3, r2, r3
 801276e:	2b31      	cmp	r3, #49	; 0x31
 8012770:	dc20      	bgt.n	80127b4 <__ieee754_rem_pio2+0x26c>
 8012772:	e9c4 0100 	strd	r0, r1, [r4]
 8012776:	46c2      	mov	sl, r8
 8012778:	46cb      	mov	fp, r9
 801277a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801277e:	4650      	mov	r0, sl
 8012780:	4642      	mov	r2, r8
 8012782:	464b      	mov	r3, r9
 8012784:	4659      	mov	r1, fp
 8012786:	f7f5 fcaf 	bl	80080e8 <__aeabi_dsub>
 801278a:	463b      	mov	r3, r7
 801278c:	4632      	mov	r2, r6
 801278e:	f7f5 fcab 	bl	80080e8 <__aeabi_dsub>
 8012792:	9b04      	ldr	r3, [sp, #16]
 8012794:	2b00      	cmp	r3, #0
 8012796:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801279a:	f6bf af11 	bge.w	80125c0 <__ieee754_rem_pio2+0x78>
 801279e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80127a2:	6063      	str	r3, [r4, #4]
 80127a4:	f8c4 8000 	str.w	r8, [r4]
 80127a8:	60a0      	str	r0, [r4, #8]
 80127aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127ae:	60e3      	str	r3, [r4, #12]
 80127b0:	426d      	negs	r5, r5
 80127b2:	e705      	b.n	80125c0 <__ieee754_rem_pio2+0x78>
 80127b4:	a326      	add	r3, pc, #152	; (adr r3, 8012850 <__ieee754_rem_pio2+0x308>)
 80127b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127be:	f7f5 fe4b 	bl	8008458 <__aeabi_dmul>
 80127c2:	4606      	mov	r6, r0
 80127c4:	460f      	mov	r7, r1
 80127c6:	4602      	mov	r2, r0
 80127c8:	460b      	mov	r3, r1
 80127ca:	4640      	mov	r0, r8
 80127cc:	4649      	mov	r1, r9
 80127ce:	f7f5 fc8b 	bl	80080e8 <__aeabi_dsub>
 80127d2:	4602      	mov	r2, r0
 80127d4:	460b      	mov	r3, r1
 80127d6:	4682      	mov	sl, r0
 80127d8:	468b      	mov	fp, r1
 80127da:	4640      	mov	r0, r8
 80127dc:	4649      	mov	r1, r9
 80127de:	f7f5 fc83 	bl	80080e8 <__aeabi_dsub>
 80127e2:	4632      	mov	r2, r6
 80127e4:	463b      	mov	r3, r7
 80127e6:	f7f5 fc7f 	bl	80080e8 <__aeabi_dsub>
 80127ea:	a31b      	add	r3, pc, #108	; (adr r3, 8012858 <__ieee754_rem_pio2+0x310>)
 80127ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f0:	4606      	mov	r6, r0
 80127f2:	460f      	mov	r7, r1
 80127f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127f8:	f7f5 fe2e 	bl	8008458 <__aeabi_dmul>
 80127fc:	4632      	mov	r2, r6
 80127fe:	463b      	mov	r3, r7
 8012800:	f7f5 fc72 	bl	80080e8 <__aeabi_dsub>
 8012804:	4606      	mov	r6, r0
 8012806:	460f      	mov	r7, r1
 8012808:	e764      	b.n	80126d4 <__ieee754_rem_pio2+0x18c>
 801280a:	4b1b      	ldr	r3, [pc, #108]	; (8012878 <__ieee754_rem_pio2+0x330>)
 801280c:	4598      	cmp	r8, r3
 801280e:	dd35      	ble.n	801287c <__ieee754_rem_pio2+0x334>
 8012810:	ee10 2a10 	vmov	r2, s0
 8012814:	463b      	mov	r3, r7
 8012816:	4630      	mov	r0, r6
 8012818:	4639      	mov	r1, r7
 801281a:	f7f5 fc65 	bl	80080e8 <__aeabi_dsub>
 801281e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012822:	e9c4 0100 	strd	r0, r1, [r4]
 8012826:	e6a1      	b.n	801256c <__ieee754_rem_pio2+0x24>
 8012828:	54400000 	.word	0x54400000
 801282c:	3ff921fb 	.word	0x3ff921fb
 8012830:	1a626331 	.word	0x1a626331
 8012834:	3dd0b461 	.word	0x3dd0b461
 8012838:	1a600000 	.word	0x1a600000
 801283c:	3dd0b461 	.word	0x3dd0b461
 8012840:	2e037073 	.word	0x2e037073
 8012844:	3ba3198a 	.word	0x3ba3198a
 8012848:	6dc9c883 	.word	0x6dc9c883
 801284c:	3fe45f30 	.word	0x3fe45f30
 8012850:	2e000000 	.word	0x2e000000
 8012854:	3ba3198a 	.word	0x3ba3198a
 8012858:	252049c1 	.word	0x252049c1
 801285c:	397b839a 	.word	0x397b839a
 8012860:	3fe921fb 	.word	0x3fe921fb
 8012864:	4002d97b 	.word	0x4002d97b
 8012868:	3ff921fb 	.word	0x3ff921fb
 801286c:	413921fb 	.word	0x413921fb
 8012870:	3fe00000 	.word	0x3fe00000
 8012874:	08027078 	.word	0x08027078
 8012878:	7fefffff 	.word	0x7fefffff
 801287c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012880:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8012884:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012888:	4630      	mov	r0, r6
 801288a:	460f      	mov	r7, r1
 801288c:	f7f6 f87e 	bl	800898c <__aeabi_d2iz>
 8012890:	f7f5 fd78 	bl	8008384 <__aeabi_i2d>
 8012894:	4602      	mov	r2, r0
 8012896:	460b      	mov	r3, r1
 8012898:	4630      	mov	r0, r6
 801289a:	4639      	mov	r1, r7
 801289c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80128a0:	f7f5 fc22 	bl	80080e8 <__aeabi_dsub>
 80128a4:	2200      	movs	r2, #0
 80128a6:	4b1f      	ldr	r3, [pc, #124]	; (8012924 <__ieee754_rem_pio2+0x3dc>)
 80128a8:	f7f5 fdd6 	bl	8008458 <__aeabi_dmul>
 80128ac:	460f      	mov	r7, r1
 80128ae:	4606      	mov	r6, r0
 80128b0:	f7f6 f86c 	bl	800898c <__aeabi_d2iz>
 80128b4:	f7f5 fd66 	bl	8008384 <__aeabi_i2d>
 80128b8:	4602      	mov	r2, r0
 80128ba:	460b      	mov	r3, r1
 80128bc:	4630      	mov	r0, r6
 80128be:	4639      	mov	r1, r7
 80128c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80128c4:	f7f5 fc10 	bl	80080e8 <__aeabi_dsub>
 80128c8:	2200      	movs	r2, #0
 80128ca:	4b16      	ldr	r3, [pc, #88]	; (8012924 <__ieee754_rem_pio2+0x3dc>)
 80128cc:	f7f5 fdc4 	bl	8008458 <__aeabi_dmul>
 80128d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80128d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80128d8:	f04f 0803 	mov.w	r8, #3
 80128dc:	2600      	movs	r6, #0
 80128de:	2700      	movs	r7, #0
 80128e0:	4632      	mov	r2, r6
 80128e2:	463b      	mov	r3, r7
 80128e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80128e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80128ec:	f7f6 f81c 	bl	8008928 <__aeabi_dcmpeq>
 80128f0:	b9b0      	cbnz	r0, 8012920 <__ieee754_rem_pio2+0x3d8>
 80128f2:	4b0d      	ldr	r3, [pc, #52]	; (8012928 <__ieee754_rem_pio2+0x3e0>)
 80128f4:	9301      	str	r3, [sp, #4]
 80128f6:	2302      	movs	r3, #2
 80128f8:	9300      	str	r3, [sp, #0]
 80128fa:	462a      	mov	r2, r5
 80128fc:	4643      	mov	r3, r8
 80128fe:	4621      	mov	r1, r4
 8012900:	a806      	add	r0, sp, #24
 8012902:	f000 f965 	bl	8012bd0 <__kernel_rem_pio2>
 8012906:	9b04      	ldr	r3, [sp, #16]
 8012908:	2b00      	cmp	r3, #0
 801290a:	4605      	mov	r5, r0
 801290c:	f6bf ae58 	bge.w	80125c0 <__ieee754_rem_pio2+0x78>
 8012910:	6863      	ldr	r3, [r4, #4]
 8012912:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012916:	6063      	str	r3, [r4, #4]
 8012918:	68e3      	ldr	r3, [r4, #12]
 801291a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801291e:	e746      	b.n	80127ae <__ieee754_rem_pio2+0x266>
 8012920:	46d0      	mov	r8, sl
 8012922:	e7dd      	b.n	80128e0 <__ieee754_rem_pio2+0x398>
 8012924:	41700000 	.word	0x41700000
 8012928:	080270f8 	.word	0x080270f8

0801292c <__ieee754_fmodf>:
 801292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801292e:	ee10 6a90 	vmov	r6, s1
 8012932:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8012936:	ee10 3a10 	vmov	r3, s0
 801293a:	d009      	beq.n	8012950 <__ieee754_fmodf+0x24>
 801293c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012940:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012944:	ee10 7a10 	vmov	r7, s0
 8012948:	da02      	bge.n	8012950 <__ieee754_fmodf+0x24>
 801294a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801294e:	dd0a      	ble.n	8012966 <__ieee754_fmodf+0x3a>
 8012950:	ee07 3a90 	vmov	s15, r3
 8012954:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8012958:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 801295c:	ee17 3a90 	vmov	r3, s15
 8012960:	ee00 3a10 	vmov	s0, r3
 8012964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012966:	42a9      	cmp	r1, r5
 8012968:	dbfa      	blt.n	8012960 <__ieee754_fmodf+0x34>
 801296a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 801296e:	d105      	bne.n	801297c <__ieee754_fmodf+0x50>
 8012970:	4a30      	ldr	r2, [pc, #192]	; (8012a34 <__ieee754_fmodf+0x108>)
 8012972:	0fe3      	lsrs	r3, r4, #31
 8012974:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	e7f1      	b.n	8012960 <__ieee754_fmodf+0x34>
 801297c:	4b2e      	ldr	r3, [pc, #184]	; (8012a38 <__ieee754_fmodf+0x10c>)
 801297e:	4299      	cmp	r1, r3
 8012980:	dc3e      	bgt.n	8012a00 <__ieee754_fmodf+0xd4>
 8012982:	020a      	lsls	r2, r1, #8
 8012984:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012988:	2a00      	cmp	r2, #0
 801298a:	dc36      	bgt.n	80129fa <__ieee754_fmodf+0xce>
 801298c:	429d      	cmp	r5, r3
 801298e:	dc3a      	bgt.n	8012a06 <__ieee754_fmodf+0xda>
 8012990:	022b      	lsls	r3, r5, #8
 8012992:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8012996:	005b      	lsls	r3, r3, #1
 8012998:	f102 32ff 	add.w	r2, r2, #4294967295
 801299c:	d5fb      	bpl.n	8012996 <__ieee754_fmodf+0x6a>
 801299e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80129a2:	bfbb      	ittet	lt
 80129a4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80129a8:	1a1b      	sublt	r3, r3, r0
 80129aa:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80129ae:	4099      	lsllt	r1, r3
 80129b0:	bfa8      	it	ge
 80129b2:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80129b6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80129ba:	bfb5      	itete	lt
 80129bc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80129c0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80129c4:	1a9b      	sublt	r3, r3, r2
 80129c6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80129ca:	bfb8      	it	lt
 80129cc:	409d      	lsllt	r5, r3
 80129ce:	1a80      	subs	r0, r0, r2
 80129d0:	1b4b      	subs	r3, r1, r5
 80129d2:	b9d8      	cbnz	r0, 8012a0c <__ieee754_fmodf+0xe0>
 80129d4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80129d8:	bf28      	it	cs
 80129da:	460b      	movcs	r3, r1
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d0c7      	beq.n	8012970 <__ieee754_fmodf+0x44>
 80129e0:	4915      	ldr	r1, [pc, #84]	; (8012a38 <__ieee754_fmodf+0x10c>)
 80129e2:	428b      	cmp	r3, r1
 80129e4:	dd1a      	ble.n	8012a1c <__ieee754_fmodf+0xf0>
 80129e6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80129ea:	db1a      	blt.n	8012a22 <__ieee754_fmodf+0xf6>
 80129ec:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80129f0:	4323      	orrs	r3, r4
 80129f2:	327f      	adds	r2, #127	; 0x7f
 80129f4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80129f8:	e7b2      	b.n	8012960 <__ieee754_fmodf+0x34>
 80129fa:	3801      	subs	r0, #1
 80129fc:	0052      	lsls	r2, r2, #1
 80129fe:	e7c3      	b.n	8012988 <__ieee754_fmodf+0x5c>
 8012a00:	15c8      	asrs	r0, r1, #23
 8012a02:	387f      	subs	r0, #127	; 0x7f
 8012a04:	e7c2      	b.n	801298c <__ieee754_fmodf+0x60>
 8012a06:	15ea      	asrs	r2, r5, #23
 8012a08:	3a7f      	subs	r2, #127	; 0x7f
 8012a0a:	e7c8      	b.n	801299e <__ieee754_fmodf+0x72>
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	da02      	bge.n	8012a16 <__ieee754_fmodf+0xea>
 8012a10:	0049      	lsls	r1, r1, #1
 8012a12:	3801      	subs	r0, #1
 8012a14:	e7dc      	b.n	80129d0 <__ieee754_fmodf+0xa4>
 8012a16:	d0ab      	beq.n	8012970 <__ieee754_fmodf+0x44>
 8012a18:	0059      	lsls	r1, r3, #1
 8012a1a:	e7fa      	b.n	8012a12 <__ieee754_fmodf+0xe6>
 8012a1c:	005b      	lsls	r3, r3, #1
 8012a1e:	3a01      	subs	r2, #1
 8012a20:	e7df      	b.n	80129e2 <__ieee754_fmodf+0xb6>
 8012a22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012a26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012a2a:	3282      	adds	r2, #130	; 0x82
 8012a2c:	4113      	asrs	r3, r2
 8012a2e:	4323      	orrs	r3, r4
 8012a30:	e796      	b.n	8012960 <__ieee754_fmodf+0x34>
 8012a32:	bf00      	nop
 8012a34:	08027200 	.word	0x08027200
 8012a38:	007fffff 	.word	0x007fffff
 8012a3c:	00000000 	.word	0x00000000

08012a40 <__kernel_cos>:
 8012a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a44:	ec59 8b10 	vmov	r8, r9, d0
 8012a48:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012a4c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012a50:	ed2d 8b02 	vpush	{d8}
 8012a54:	eeb0 8a41 	vmov.f32	s16, s2
 8012a58:	eef0 8a61 	vmov.f32	s17, s3
 8012a5c:	da07      	bge.n	8012a6e <__kernel_cos+0x2e>
 8012a5e:	ee10 0a10 	vmov	r0, s0
 8012a62:	4649      	mov	r1, r9
 8012a64:	f7f5 ff92 	bl	800898c <__aeabi_d2iz>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	f000 8089 	beq.w	8012b80 <__kernel_cos+0x140>
 8012a6e:	4642      	mov	r2, r8
 8012a70:	464b      	mov	r3, r9
 8012a72:	4640      	mov	r0, r8
 8012a74:	4649      	mov	r1, r9
 8012a76:	f7f5 fcef 	bl	8008458 <__aeabi_dmul>
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	4b4e      	ldr	r3, [pc, #312]	; (8012bb8 <__kernel_cos+0x178>)
 8012a7e:	4604      	mov	r4, r0
 8012a80:	460d      	mov	r5, r1
 8012a82:	f7f5 fce9 	bl	8008458 <__aeabi_dmul>
 8012a86:	a340      	add	r3, pc, #256	; (adr r3, 8012b88 <__kernel_cos+0x148>)
 8012a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8c:	4682      	mov	sl, r0
 8012a8e:	468b      	mov	fp, r1
 8012a90:	4620      	mov	r0, r4
 8012a92:	4629      	mov	r1, r5
 8012a94:	f7f5 fce0 	bl	8008458 <__aeabi_dmul>
 8012a98:	a33d      	add	r3, pc, #244	; (adr r3, 8012b90 <__kernel_cos+0x150>)
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	f7f5 fb25 	bl	80080ec <__adddf3>
 8012aa2:	4622      	mov	r2, r4
 8012aa4:	462b      	mov	r3, r5
 8012aa6:	f7f5 fcd7 	bl	8008458 <__aeabi_dmul>
 8012aaa:	a33b      	add	r3, pc, #236	; (adr r3, 8012b98 <__kernel_cos+0x158>)
 8012aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab0:	f7f5 fb1a 	bl	80080e8 <__aeabi_dsub>
 8012ab4:	4622      	mov	r2, r4
 8012ab6:	462b      	mov	r3, r5
 8012ab8:	f7f5 fcce 	bl	8008458 <__aeabi_dmul>
 8012abc:	a338      	add	r3, pc, #224	; (adr r3, 8012ba0 <__kernel_cos+0x160>)
 8012abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac2:	f7f5 fb13 	bl	80080ec <__adddf3>
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	462b      	mov	r3, r5
 8012aca:	f7f5 fcc5 	bl	8008458 <__aeabi_dmul>
 8012ace:	a336      	add	r3, pc, #216	; (adr r3, 8012ba8 <__kernel_cos+0x168>)
 8012ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad4:	f7f5 fb08 	bl	80080e8 <__aeabi_dsub>
 8012ad8:	4622      	mov	r2, r4
 8012ada:	462b      	mov	r3, r5
 8012adc:	f7f5 fcbc 	bl	8008458 <__aeabi_dmul>
 8012ae0:	a333      	add	r3, pc, #204	; (adr r3, 8012bb0 <__kernel_cos+0x170>)
 8012ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae6:	f7f5 fb01 	bl	80080ec <__adddf3>
 8012aea:	4622      	mov	r2, r4
 8012aec:	462b      	mov	r3, r5
 8012aee:	f7f5 fcb3 	bl	8008458 <__aeabi_dmul>
 8012af2:	4622      	mov	r2, r4
 8012af4:	462b      	mov	r3, r5
 8012af6:	f7f5 fcaf 	bl	8008458 <__aeabi_dmul>
 8012afa:	ec53 2b18 	vmov	r2, r3, d8
 8012afe:	4604      	mov	r4, r0
 8012b00:	460d      	mov	r5, r1
 8012b02:	4640      	mov	r0, r8
 8012b04:	4649      	mov	r1, r9
 8012b06:	f7f5 fca7 	bl	8008458 <__aeabi_dmul>
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	4629      	mov	r1, r5
 8012b10:	4620      	mov	r0, r4
 8012b12:	f7f5 fae9 	bl	80080e8 <__aeabi_dsub>
 8012b16:	4b29      	ldr	r3, [pc, #164]	; (8012bbc <__kernel_cos+0x17c>)
 8012b18:	429e      	cmp	r6, r3
 8012b1a:	4680      	mov	r8, r0
 8012b1c:	4689      	mov	r9, r1
 8012b1e:	dc11      	bgt.n	8012b44 <__kernel_cos+0x104>
 8012b20:	4602      	mov	r2, r0
 8012b22:	460b      	mov	r3, r1
 8012b24:	4650      	mov	r0, sl
 8012b26:	4659      	mov	r1, fp
 8012b28:	f7f5 fade 	bl	80080e8 <__aeabi_dsub>
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	4924      	ldr	r1, [pc, #144]	; (8012bc0 <__kernel_cos+0x180>)
 8012b30:	4602      	mov	r2, r0
 8012b32:	2000      	movs	r0, #0
 8012b34:	f7f5 fad8 	bl	80080e8 <__aeabi_dsub>
 8012b38:	ecbd 8b02 	vpop	{d8}
 8012b3c:	ec41 0b10 	vmov	d0, r0, r1
 8012b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b44:	4b1f      	ldr	r3, [pc, #124]	; (8012bc4 <__kernel_cos+0x184>)
 8012b46:	491e      	ldr	r1, [pc, #120]	; (8012bc0 <__kernel_cos+0x180>)
 8012b48:	429e      	cmp	r6, r3
 8012b4a:	bfcc      	ite	gt
 8012b4c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012bc8 <__kernel_cos+0x188>)
 8012b4e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012b52:	2400      	movs	r4, #0
 8012b54:	4622      	mov	r2, r4
 8012b56:	462b      	mov	r3, r5
 8012b58:	2000      	movs	r0, #0
 8012b5a:	f7f5 fac5 	bl	80080e8 <__aeabi_dsub>
 8012b5e:	4622      	mov	r2, r4
 8012b60:	4606      	mov	r6, r0
 8012b62:	460f      	mov	r7, r1
 8012b64:	462b      	mov	r3, r5
 8012b66:	4650      	mov	r0, sl
 8012b68:	4659      	mov	r1, fp
 8012b6a:	f7f5 fabd 	bl	80080e8 <__aeabi_dsub>
 8012b6e:	4642      	mov	r2, r8
 8012b70:	464b      	mov	r3, r9
 8012b72:	f7f5 fab9 	bl	80080e8 <__aeabi_dsub>
 8012b76:	4602      	mov	r2, r0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	4639      	mov	r1, r7
 8012b7e:	e7d9      	b.n	8012b34 <__kernel_cos+0xf4>
 8012b80:	2000      	movs	r0, #0
 8012b82:	490f      	ldr	r1, [pc, #60]	; (8012bc0 <__kernel_cos+0x180>)
 8012b84:	e7d8      	b.n	8012b38 <__kernel_cos+0xf8>
 8012b86:	bf00      	nop
 8012b88:	be8838d4 	.word	0xbe8838d4
 8012b8c:	bda8fae9 	.word	0xbda8fae9
 8012b90:	bdb4b1c4 	.word	0xbdb4b1c4
 8012b94:	3e21ee9e 	.word	0x3e21ee9e
 8012b98:	809c52ad 	.word	0x809c52ad
 8012b9c:	3e927e4f 	.word	0x3e927e4f
 8012ba0:	19cb1590 	.word	0x19cb1590
 8012ba4:	3efa01a0 	.word	0x3efa01a0
 8012ba8:	16c15177 	.word	0x16c15177
 8012bac:	3f56c16c 	.word	0x3f56c16c
 8012bb0:	5555554c 	.word	0x5555554c
 8012bb4:	3fa55555 	.word	0x3fa55555
 8012bb8:	3fe00000 	.word	0x3fe00000
 8012bbc:	3fd33332 	.word	0x3fd33332
 8012bc0:	3ff00000 	.word	0x3ff00000
 8012bc4:	3fe90000 	.word	0x3fe90000
 8012bc8:	3fd20000 	.word	0x3fd20000
 8012bcc:	00000000 	.word	0x00000000

08012bd0 <__kernel_rem_pio2>:
 8012bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd4:	ed2d 8b02 	vpush	{d8}
 8012bd8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012bdc:	1ed4      	subs	r4, r2, #3
 8012bde:	9308      	str	r3, [sp, #32]
 8012be0:	9101      	str	r1, [sp, #4]
 8012be2:	4bc5      	ldr	r3, [pc, #788]	; (8012ef8 <__kernel_rem_pio2+0x328>)
 8012be4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012be6:	9009      	str	r0, [sp, #36]	; 0x24
 8012be8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bec:	9304      	str	r3, [sp, #16]
 8012bee:	9b08      	ldr	r3, [sp, #32]
 8012bf0:	3b01      	subs	r3, #1
 8012bf2:	9307      	str	r3, [sp, #28]
 8012bf4:	2318      	movs	r3, #24
 8012bf6:	fb94 f4f3 	sdiv	r4, r4, r3
 8012bfa:	f06f 0317 	mvn.w	r3, #23
 8012bfe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012c02:	fb04 3303 	mla	r3, r4, r3, r3
 8012c06:	eb03 0a02 	add.w	sl, r3, r2
 8012c0a:	9b04      	ldr	r3, [sp, #16]
 8012c0c:	9a07      	ldr	r2, [sp, #28]
 8012c0e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012ee8 <__kernel_rem_pio2+0x318>
 8012c12:	eb03 0802 	add.w	r8, r3, r2
 8012c16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012c18:	1aa7      	subs	r7, r4, r2
 8012c1a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012c1e:	ae22      	add	r6, sp, #136	; 0x88
 8012c20:	2500      	movs	r5, #0
 8012c22:	4545      	cmp	r5, r8
 8012c24:	dd13      	ble.n	8012c4e <__kernel_rem_pio2+0x7e>
 8012c26:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012ee8 <__kernel_rem_pio2+0x318>
 8012c2a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012c2e:	2600      	movs	r6, #0
 8012c30:	9b04      	ldr	r3, [sp, #16]
 8012c32:	429e      	cmp	r6, r3
 8012c34:	dc32      	bgt.n	8012c9c <__kernel_rem_pio2+0xcc>
 8012c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c38:	9302      	str	r3, [sp, #8]
 8012c3a:	9b08      	ldr	r3, [sp, #32]
 8012c3c:	199d      	adds	r5, r3, r6
 8012c3e:	ab22      	add	r3, sp, #136	; 0x88
 8012c40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012c44:	9306      	str	r3, [sp, #24]
 8012c46:	ec59 8b18 	vmov	r8, r9, d8
 8012c4a:	2700      	movs	r7, #0
 8012c4c:	e01f      	b.n	8012c8e <__kernel_rem_pio2+0xbe>
 8012c4e:	42ef      	cmn	r7, r5
 8012c50:	d407      	bmi.n	8012c62 <__kernel_rem_pio2+0x92>
 8012c52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012c56:	f7f5 fb95 	bl	8008384 <__aeabi_i2d>
 8012c5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012c5e:	3501      	adds	r5, #1
 8012c60:	e7df      	b.n	8012c22 <__kernel_rem_pio2+0x52>
 8012c62:	ec51 0b18 	vmov	r0, r1, d8
 8012c66:	e7f8      	b.n	8012c5a <__kernel_rem_pio2+0x8a>
 8012c68:	9906      	ldr	r1, [sp, #24]
 8012c6a:	9d02      	ldr	r5, [sp, #8]
 8012c6c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012c70:	9106      	str	r1, [sp, #24]
 8012c72:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012c76:	9502      	str	r5, [sp, #8]
 8012c78:	f7f5 fbee 	bl	8008458 <__aeabi_dmul>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	460b      	mov	r3, r1
 8012c80:	4640      	mov	r0, r8
 8012c82:	4649      	mov	r1, r9
 8012c84:	f7f5 fa32 	bl	80080ec <__adddf3>
 8012c88:	3701      	adds	r7, #1
 8012c8a:	4680      	mov	r8, r0
 8012c8c:	4689      	mov	r9, r1
 8012c8e:	9b07      	ldr	r3, [sp, #28]
 8012c90:	429f      	cmp	r7, r3
 8012c92:	dde9      	ble.n	8012c68 <__kernel_rem_pio2+0x98>
 8012c94:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012c98:	3601      	adds	r6, #1
 8012c9a:	e7c9      	b.n	8012c30 <__kernel_rem_pio2+0x60>
 8012c9c:	9b04      	ldr	r3, [sp, #16]
 8012c9e:	aa0e      	add	r2, sp, #56	; 0x38
 8012ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ca4:	930c      	str	r3, [sp, #48]	; 0x30
 8012ca6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012ca8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012cac:	9c04      	ldr	r4, [sp, #16]
 8012cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cb0:	ab9a      	add	r3, sp, #616	; 0x268
 8012cb2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012cb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012cba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012cbe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012cc2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012cc6:	ab9a      	add	r3, sp, #616	; 0x268
 8012cc8:	445b      	add	r3, fp
 8012cca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012cce:	2500      	movs	r5, #0
 8012cd0:	1b63      	subs	r3, r4, r5
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dc78      	bgt.n	8012dc8 <__kernel_rem_pio2+0x1f8>
 8012cd6:	4650      	mov	r0, sl
 8012cd8:	ec49 8b10 	vmov	d0, r8, r9
 8012cdc:	f000 fc04 	bl	80134e8 <scalbn>
 8012ce0:	ec57 6b10 	vmov	r6, r7, d0
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012cea:	ee10 0a10 	vmov	r0, s0
 8012cee:	4639      	mov	r1, r7
 8012cf0:	f7f5 fbb2 	bl	8008458 <__aeabi_dmul>
 8012cf4:	ec41 0b10 	vmov	d0, r0, r1
 8012cf8:	f000 fb6e 	bl	80133d8 <floor>
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	ec51 0b10 	vmov	r0, r1, d0
 8012d02:	4b7e      	ldr	r3, [pc, #504]	; (8012efc <__kernel_rem_pio2+0x32c>)
 8012d04:	f7f5 fba8 	bl	8008458 <__aeabi_dmul>
 8012d08:	4602      	mov	r2, r0
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	4630      	mov	r0, r6
 8012d0e:	4639      	mov	r1, r7
 8012d10:	f7f5 f9ea 	bl	80080e8 <__aeabi_dsub>
 8012d14:	460f      	mov	r7, r1
 8012d16:	4606      	mov	r6, r0
 8012d18:	f7f5 fe38 	bl	800898c <__aeabi_d2iz>
 8012d1c:	9006      	str	r0, [sp, #24]
 8012d1e:	f7f5 fb31 	bl	8008384 <__aeabi_i2d>
 8012d22:	4602      	mov	r2, r0
 8012d24:	460b      	mov	r3, r1
 8012d26:	4630      	mov	r0, r6
 8012d28:	4639      	mov	r1, r7
 8012d2a:	f7f5 f9dd 	bl	80080e8 <__aeabi_dsub>
 8012d2e:	f1ba 0f00 	cmp.w	sl, #0
 8012d32:	4606      	mov	r6, r0
 8012d34:	460f      	mov	r7, r1
 8012d36:	dd6c      	ble.n	8012e12 <__kernel_rem_pio2+0x242>
 8012d38:	1e62      	subs	r2, r4, #1
 8012d3a:	ab0e      	add	r3, sp, #56	; 0x38
 8012d3c:	f1ca 0118 	rsb	r1, sl, #24
 8012d40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d44:	9d06      	ldr	r5, [sp, #24]
 8012d46:	fa40 f301 	asr.w	r3, r0, r1
 8012d4a:	441d      	add	r5, r3
 8012d4c:	408b      	lsls	r3, r1
 8012d4e:	1ac0      	subs	r0, r0, r3
 8012d50:	ab0e      	add	r3, sp, #56	; 0x38
 8012d52:	9506      	str	r5, [sp, #24]
 8012d54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012d58:	f1ca 0317 	rsb	r3, sl, #23
 8012d5c:	fa40 f303 	asr.w	r3, r0, r3
 8012d60:	9302      	str	r3, [sp, #8]
 8012d62:	9b02      	ldr	r3, [sp, #8]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	dd62      	ble.n	8012e2e <__kernel_rem_pio2+0x25e>
 8012d68:	9b06      	ldr	r3, [sp, #24]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	9306      	str	r3, [sp, #24]
 8012d70:	4615      	mov	r5, r2
 8012d72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012d76:	4294      	cmp	r4, r2
 8012d78:	f300 8095 	bgt.w	8012ea6 <__kernel_rem_pio2+0x2d6>
 8012d7c:	f1ba 0f00 	cmp.w	sl, #0
 8012d80:	dd07      	ble.n	8012d92 <__kernel_rem_pio2+0x1c2>
 8012d82:	f1ba 0f01 	cmp.w	sl, #1
 8012d86:	f000 80a2 	beq.w	8012ece <__kernel_rem_pio2+0x2fe>
 8012d8a:	f1ba 0f02 	cmp.w	sl, #2
 8012d8e:	f000 80c1 	beq.w	8012f14 <__kernel_rem_pio2+0x344>
 8012d92:	9b02      	ldr	r3, [sp, #8]
 8012d94:	2b02      	cmp	r3, #2
 8012d96:	d14a      	bne.n	8012e2e <__kernel_rem_pio2+0x25e>
 8012d98:	4632      	mov	r2, r6
 8012d9a:	463b      	mov	r3, r7
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	4958      	ldr	r1, [pc, #352]	; (8012f00 <__kernel_rem_pio2+0x330>)
 8012da0:	f7f5 f9a2 	bl	80080e8 <__aeabi_dsub>
 8012da4:	4606      	mov	r6, r0
 8012da6:	460f      	mov	r7, r1
 8012da8:	2d00      	cmp	r5, #0
 8012daa:	d040      	beq.n	8012e2e <__kernel_rem_pio2+0x25e>
 8012dac:	4650      	mov	r0, sl
 8012dae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012ef0 <__kernel_rem_pio2+0x320>
 8012db2:	f000 fb99 	bl	80134e8 <scalbn>
 8012db6:	4630      	mov	r0, r6
 8012db8:	4639      	mov	r1, r7
 8012dba:	ec53 2b10 	vmov	r2, r3, d0
 8012dbe:	f7f5 f993 	bl	80080e8 <__aeabi_dsub>
 8012dc2:	4606      	mov	r6, r0
 8012dc4:	460f      	mov	r7, r1
 8012dc6:	e032      	b.n	8012e2e <__kernel_rem_pio2+0x25e>
 8012dc8:	2200      	movs	r2, #0
 8012dca:	4b4e      	ldr	r3, [pc, #312]	; (8012f04 <__kernel_rem_pio2+0x334>)
 8012dcc:	4640      	mov	r0, r8
 8012dce:	4649      	mov	r1, r9
 8012dd0:	f7f5 fb42 	bl	8008458 <__aeabi_dmul>
 8012dd4:	f7f5 fdda 	bl	800898c <__aeabi_d2iz>
 8012dd8:	f7f5 fad4 	bl	8008384 <__aeabi_i2d>
 8012ddc:	2200      	movs	r2, #0
 8012dde:	4b4a      	ldr	r3, [pc, #296]	; (8012f08 <__kernel_rem_pio2+0x338>)
 8012de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012de4:	f7f5 fb38 	bl	8008458 <__aeabi_dmul>
 8012de8:	4602      	mov	r2, r0
 8012dea:	460b      	mov	r3, r1
 8012dec:	4640      	mov	r0, r8
 8012dee:	4649      	mov	r1, r9
 8012df0:	f7f5 f97a 	bl	80080e8 <__aeabi_dsub>
 8012df4:	f7f5 fdca 	bl	800898c <__aeabi_d2iz>
 8012df8:	ab0e      	add	r3, sp, #56	; 0x38
 8012dfa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012dfe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e06:	f7f5 f971 	bl	80080ec <__adddf3>
 8012e0a:	3501      	adds	r5, #1
 8012e0c:	4680      	mov	r8, r0
 8012e0e:	4689      	mov	r9, r1
 8012e10:	e75e      	b.n	8012cd0 <__kernel_rem_pio2+0x100>
 8012e12:	d105      	bne.n	8012e20 <__kernel_rem_pio2+0x250>
 8012e14:	1e63      	subs	r3, r4, #1
 8012e16:	aa0e      	add	r2, sp, #56	; 0x38
 8012e18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012e1c:	15c3      	asrs	r3, r0, #23
 8012e1e:	e79f      	b.n	8012d60 <__kernel_rem_pio2+0x190>
 8012e20:	2200      	movs	r2, #0
 8012e22:	4b3a      	ldr	r3, [pc, #232]	; (8012f0c <__kernel_rem_pio2+0x33c>)
 8012e24:	f7f5 fd9e 	bl	8008964 <__aeabi_dcmpge>
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	d139      	bne.n	8012ea0 <__kernel_rem_pio2+0x2d0>
 8012e2c:	9002      	str	r0, [sp, #8]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	2300      	movs	r3, #0
 8012e32:	4630      	mov	r0, r6
 8012e34:	4639      	mov	r1, r7
 8012e36:	f7f5 fd77 	bl	8008928 <__aeabi_dcmpeq>
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	f000 80c7 	beq.w	8012fce <__kernel_rem_pio2+0x3fe>
 8012e40:	1e65      	subs	r5, r4, #1
 8012e42:	462b      	mov	r3, r5
 8012e44:	2200      	movs	r2, #0
 8012e46:	9904      	ldr	r1, [sp, #16]
 8012e48:	428b      	cmp	r3, r1
 8012e4a:	da6a      	bge.n	8012f22 <__kernel_rem_pio2+0x352>
 8012e4c:	2a00      	cmp	r2, #0
 8012e4e:	f000 8088 	beq.w	8012f62 <__kernel_rem_pio2+0x392>
 8012e52:	ab0e      	add	r3, sp, #56	; 0x38
 8012e54:	f1aa 0a18 	sub.w	sl, sl, #24
 8012e58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	f000 80b4 	beq.w	8012fca <__kernel_rem_pio2+0x3fa>
 8012e62:	4650      	mov	r0, sl
 8012e64:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012ef0 <__kernel_rem_pio2+0x320>
 8012e68:	f000 fb3e 	bl	80134e8 <scalbn>
 8012e6c:	00ec      	lsls	r4, r5, #3
 8012e6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012e70:	191e      	adds	r6, r3, r4
 8012e72:	ec59 8b10 	vmov	r8, r9, d0
 8012e76:	f106 0a08 	add.w	sl, r6, #8
 8012e7a:	462f      	mov	r7, r5
 8012e7c:	2f00      	cmp	r7, #0
 8012e7e:	f280 80df 	bge.w	8013040 <__kernel_rem_pio2+0x470>
 8012e82:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012ee8 <__kernel_rem_pio2+0x318>
 8012e86:	f04f 0a00 	mov.w	sl, #0
 8012e8a:	eba5 030a 	sub.w	r3, r5, sl
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	f2c0 810a 	blt.w	80130a8 <__kernel_rem_pio2+0x4d8>
 8012e94:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012f10 <__kernel_rem_pio2+0x340>
 8012e98:	ec59 8b18 	vmov	r8, r9, d8
 8012e9c:	2700      	movs	r7, #0
 8012e9e:	e0f5      	b.n	801308c <__kernel_rem_pio2+0x4bc>
 8012ea0:	2302      	movs	r3, #2
 8012ea2:	9302      	str	r3, [sp, #8]
 8012ea4:	e760      	b.n	8012d68 <__kernel_rem_pio2+0x198>
 8012ea6:	ab0e      	add	r3, sp, #56	; 0x38
 8012ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eac:	b94d      	cbnz	r5, 8012ec2 <__kernel_rem_pio2+0x2f2>
 8012eae:	b12b      	cbz	r3, 8012ebc <__kernel_rem_pio2+0x2ec>
 8012eb0:	a80e      	add	r0, sp, #56	; 0x38
 8012eb2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012eb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012eba:	2301      	movs	r3, #1
 8012ebc:	3201      	adds	r2, #1
 8012ebe:	461d      	mov	r5, r3
 8012ec0:	e759      	b.n	8012d76 <__kernel_rem_pio2+0x1a6>
 8012ec2:	a80e      	add	r0, sp, #56	; 0x38
 8012ec4:	1acb      	subs	r3, r1, r3
 8012ec6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012eca:	462b      	mov	r3, r5
 8012ecc:	e7f6      	b.n	8012ebc <__kernel_rem_pio2+0x2ec>
 8012ece:	1e62      	subs	r2, r4, #1
 8012ed0:	ab0e      	add	r3, sp, #56	; 0x38
 8012ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ed6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012eda:	a90e      	add	r1, sp, #56	; 0x38
 8012edc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ee0:	e757      	b.n	8012d92 <__kernel_rem_pio2+0x1c2>
 8012ee2:	bf00      	nop
 8012ee4:	f3af 8000 	nop.w
	...
 8012ef4:	3ff00000 	.word	0x3ff00000
 8012ef8:	08027248 	.word	0x08027248
 8012efc:	40200000 	.word	0x40200000
 8012f00:	3ff00000 	.word	0x3ff00000
 8012f04:	3e700000 	.word	0x3e700000
 8012f08:	41700000 	.word	0x41700000
 8012f0c:	3fe00000 	.word	0x3fe00000
 8012f10:	08027208 	.word	0x08027208
 8012f14:	1e62      	subs	r2, r4, #1
 8012f16:	ab0e      	add	r3, sp, #56	; 0x38
 8012f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012f20:	e7db      	b.n	8012eda <__kernel_rem_pio2+0x30a>
 8012f22:	a90e      	add	r1, sp, #56	; 0x38
 8012f24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	430a      	orrs	r2, r1
 8012f2c:	e78b      	b.n	8012e46 <__kernel_rem_pio2+0x276>
 8012f2e:	3301      	adds	r3, #1
 8012f30:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012f34:	2900      	cmp	r1, #0
 8012f36:	d0fa      	beq.n	8012f2e <__kernel_rem_pio2+0x35e>
 8012f38:	9a08      	ldr	r2, [sp, #32]
 8012f3a:	4422      	add	r2, r4
 8012f3c:	00d2      	lsls	r2, r2, #3
 8012f3e:	a922      	add	r1, sp, #136	; 0x88
 8012f40:	18e3      	adds	r3, r4, r3
 8012f42:	9206      	str	r2, [sp, #24]
 8012f44:	440a      	add	r2, r1
 8012f46:	9302      	str	r3, [sp, #8]
 8012f48:	f10b 0108 	add.w	r1, fp, #8
 8012f4c:	f102 0308 	add.w	r3, r2, #8
 8012f50:	1c66      	adds	r6, r4, #1
 8012f52:	910a      	str	r1, [sp, #40]	; 0x28
 8012f54:	2500      	movs	r5, #0
 8012f56:	930d      	str	r3, [sp, #52]	; 0x34
 8012f58:	9b02      	ldr	r3, [sp, #8]
 8012f5a:	42b3      	cmp	r3, r6
 8012f5c:	da04      	bge.n	8012f68 <__kernel_rem_pio2+0x398>
 8012f5e:	461c      	mov	r4, r3
 8012f60:	e6a6      	b.n	8012cb0 <__kernel_rem_pio2+0xe0>
 8012f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f64:	2301      	movs	r3, #1
 8012f66:	e7e3      	b.n	8012f30 <__kernel_rem_pio2+0x360>
 8012f68:	9b06      	ldr	r3, [sp, #24]
 8012f6a:	18ef      	adds	r7, r5, r3
 8012f6c:	ab22      	add	r3, sp, #136	; 0x88
 8012f6e:	441f      	add	r7, r3
 8012f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012f76:	f7f5 fa05 	bl	8008384 <__aeabi_i2d>
 8012f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f7c:	461c      	mov	r4, r3
 8012f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f80:	e9c7 0100 	strd	r0, r1, [r7]
 8012f84:	eb03 0b05 	add.w	fp, r3, r5
 8012f88:	2700      	movs	r7, #0
 8012f8a:	f04f 0800 	mov.w	r8, #0
 8012f8e:	f04f 0900 	mov.w	r9, #0
 8012f92:	9b07      	ldr	r3, [sp, #28]
 8012f94:	429f      	cmp	r7, r3
 8012f96:	dd08      	ble.n	8012faa <__kernel_rem_pio2+0x3da>
 8012f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f9a:	aa72      	add	r2, sp, #456	; 0x1c8
 8012f9c:	18eb      	adds	r3, r5, r3
 8012f9e:	4413      	add	r3, r2
 8012fa0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012fa4:	3601      	adds	r6, #1
 8012fa6:	3508      	adds	r5, #8
 8012fa8:	e7d6      	b.n	8012f58 <__kernel_rem_pio2+0x388>
 8012faa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012fae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012fb2:	f7f5 fa51 	bl	8008458 <__aeabi_dmul>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	4640      	mov	r0, r8
 8012fbc:	4649      	mov	r1, r9
 8012fbe:	f7f5 f895 	bl	80080ec <__adddf3>
 8012fc2:	3701      	adds	r7, #1
 8012fc4:	4680      	mov	r8, r0
 8012fc6:	4689      	mov	r9, r1
 8012fc8:	e7e3      	b.n	8012f92 <__kernel_rem_pio2+0x3c2>
 8012fca:	3d01      	subs	r5, #1
 8012fcc:	e741      	b.n	8012e52 <__kernel_rem_pio2+0x282>
 8012fce:	f1ca 0000 	rsb	r0, sl, #0
 8012fd2:	ec47 6b10 	vmov	d0, r6, r7
 8012fd6:	f000 fa87 	bl	80134e8 <scalbn>
 8012fda:	ec57 6b10 	vmov	r6, r7, d0
 8012fde:	2200      	movs	r2, #0
 8012fe0:	4b99      	ldr	r3, [pc, #612]	; (8013248 <__kernel_rem_pio2+0x678>)
 8012fe2:	ee10 0a10 	vmov	r0, s0
 8012fe6:	4639      	mov	r1, r7
 8012fe8:	f7f5 fcbc 	bl	8008964 <__aeabi_dcmpge>
 8012fec:	b1f8      	cbz	r0, 801302e <__kernel_rem_pio2+0x45e>
 8012fee:	2200      	movs	r2, #0
 8012ff0:	4b96      	ldr	r3, [pc, #600]	; (801324c <__kernel_rem_pio2+0x67c>)
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	4639      	mov	r1, r7
 8012ff6:	f7f5 fa2f 	bl	8008458 <__aeabi_dmul>
 8012ffa:	f7f5 fcc7 	bl	800898c <__aeabi_d2iz>
 8012ffe:	4680      	mov	r8, r0
 8013000:	f7f5 f9c0 	bl	8008384 <__aeabi_i2d>
 8013004:	2200      	movs	r2, #0
 8013006:	4b90      	ldr	r3, [pc, #576]	; (8013248 <__kernel_rem_pio2+0x678>)
 8013008:	f7f5 fa26 	bl	8008458 <__aeabi_dmul>
 801300c:	460b      	mov	r3, r1
 801300e:	4602      	mov	r2, r0
 8013010:	4639      	mov	r1, r7
 8013012:	4630      	mov	r0, r6
 8013014:	f7f5 f868 	bl	80080e8 <__aeabi_dsub>
 8013018:	f7f5 fcb8 	bl	800898c <__aeabi_d2iz>
 801301c:	1c65      	adds	r5, r4, #1
 801301e:	ab0e      	add	r3, sp, #56	; 0x38
 8013020:	f10a 0a18 	add.w	sl, sl, #24
 8013024:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013028:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801302c:	e719      	b.n	8012e62 <__kernel_rem_pio2+0x292>
 801302e:	4630      	mov	r0, r6
 8013030:	4639      	mov	r1, r7
 8013032:	f7f5 fcab 	bl	800898c <__aeabi_d2iz>
 8013036:	ab0e      	add	r3, sp, #56	; 0x38
 8013038:	4625      	mov	r5, r4
 801303a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801303e:	e710      	b.n	8012e62 <__kernel_rem_pio2+0x292>
 8013040:	ab0e      	add	r3, sp, #56	; 0x38
 8013042:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013046:	f7f5 f99d 	bl	8008384 <__aeabi_i2d>
 801304a:	4642      	mov	r2, r8
 801304c:	464b      	mov	r3, r9
 801304e:	f7f5 fa03 	bl	8008458 <__aeabi_dmul>
 8013052:	2200      	movs	r2, #0
 8013054:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013058:	4b7c      	ldr	r3, [pc, #496]	; (801324c <__kernel_rem_pio2+0x67c>)
 801305a:	4640      	mov	r0, r8
 801305c:	4649      	mov	r1, r9
 801305e:	f7f5 f9fb 	bl	8008458 <__aeabi_dmul>
 8013062:	3f01      	subs	r7, #1
 8013064:	4680      	mov	r8, r0
 8013066:	4689      	mov	r9, r1
 8013068:	e708      	b.n	8012e7c <__kernel_rem_pio2+0x2ac>
 801306a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013072:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8013076:	f7f5 f9ef 	bl	8008458 <__aeabi_dmul>
 801307a:	4602      	mov	r2, r0
 801307c:	460b      	mov	r3, r1
 801307e:	4640      	mov	r0, r8
 8013080:	4649      	mov	r1, r9
 8013082:	f7f5 f833 	bl	80080ec <__adddf3>
 8013086:	3701      	adds	r7, #1
 8013088:	4680      	mov	r8, r0
 801308a:	4689      	mov	r9, r1
 801308c:	9b04      	ldr	r3, [sp, #16]
 801308e:	429f      	cmp	r7, r3
 8013090:	dc01      	bgt.n	8013096 <__kernel_rem_pio2+0x4c6>
 8013092:	45ba      	cmp	sl, r7
 8013094:	dae9      	bge.n	801306a <__kernel_rem_pio2+0x49a>
 8013096:	ab4a      	add	r3, sp, #296	; 0x128
 8013098:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801309c:	e9c3 8900 	strd	r8, r9, [r3]
 80130a0:	f10a 0a01 	add.w	sl, sl, #1
 80130a4:	3e08      	subs	r6, #8
 80130a6:	e6f0      	b.n	8012e8a <__kernel_rem_pio2+0x2ba>
 80130a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80130aa:	2b03      	cmp	r3, #3
 80130ac:	d85b      	bhi.n	8013166 <__kernel_rem_pio2+0x596>
 80130ae:	e8df f003 	tbb	[pc, r3]
 80130b2:	264a      	.short	0x264a
 80130b4:	0226      	.short	0x0226
 80130b6:	ab9a      	add	r3, sp, #616	; 0x268
 80130b8:	441c      	add	r4, r3
 80130ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80130be:	46a2      	mov	sl, r4
 80130c0:	46ab      	mov	fp, r5
 80130c2:	f1bb 0f00 	cmp.w	fp, #0
 80130c6:	dc6c      	bgt.n	80131a2 <__kernel_rem_pio2+0x5d2>
 80130c8:	46a2      	mov	sl, r4
 80130ca:	46ab      	mov	fp, r5
 80130cc:	f1bb 0f01 	cmp.w	fp, #1
 80130d0:	f300 8086 	bgt.w	80131e0 <__kernel_rem_pio2+0x610>
 80130d4:	2000      	movs	r0, #0
 80130d6:	2100      	movs	r1, #0
 80130d8:	2d01      	cmp	r5, #1
 80130da:	f300 80a0 	bgt.w	801321e <__kernel_rem_pio2+0x64e>
 80130de:	9b02      	ldr	r3, [sp, #8]
 80130e0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80130e4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	f040 809e 	bne.w	801322a <__kernel_rem_pio2+0x65a>
 80130ee:	9b01      	ldr	r3, [sp, #4]
 80130f0:	e9c3 7800 	strd	r7, r8, [r3]
 80130f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80130f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80130fc:	e033      	b.n	8013166 <__kernel_rem_pio2+0x596>
 80130fe:	3408      	adds	r4, #8
 8013100:	ab4a      	add	r3, sp, #296	; 0x128
 8013102:	441c      	add	r4, r3
 8013104:	462e      	mov	r6, r5
 8013106:	2000      	movs	r0, #0
 8013108:	2100      	movs	r1, #0
 801310a:	2e00      	cmp	r6, #0
 801310c:	da3a      	bge.n	8013184 <__kernel_rem_pio2+0x5b4>
 801310e:	9b02      	ldr	r3, [sp, #8]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d03d      	beq.n	8013190 <__kernel_rem_pio2+0x5c0>
 8013114:	4602      	mov	r2, r0
 8013116:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801311a:	9c01      	ldr	r4, [sp, #4]
 801311c:	e9c4 2300 	strd	r2, r3, [r4]
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013128:	f7f4 ffde 	bl	80080e8 <__aeabi_dsub>
 801312c:	ae4c      	add	r6, sp, #304	; 0x130
 801312e:	2401      	movs	r4, #1
 8013130:	42a5      	cmp	r5, r4
 8013132:	da30      	bge.n	8013196 <__kernel_rem_pio2+0x5c6>
 8013134:	9b02      	ldr	r3, [sp, #8]
 8013136:	b113      	cbz	r3, 801313e <__kernel_rem_pio2+0x56e>
 8013138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801313c:	4619      	mov	r1, r3
 801313e:	9b01      	ldr	r3, [sp, #4]
 8013140:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013144:	e00f      	b.n	8013166 <__kernel_rem_pio2+0x596>
 8013146:	ab9a      	add	r3, sp, #616	; 0x268
 8013148:	441c      	add	r4, r3
 801314a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801314e:	2000      	movs	r0, #0
 8013150:	2100      	movs	r1, #0
 8013152:	2d00      	cmp	r5, #0
 8013154:	da10      	bge.n	8013178 <__kernel_rem_pio2+0x5a8>
 8013156:	9b02      	ldr	r3, [sp, #8]
 8013158:	b113      	cbz	r3, 8013160 <__kernel_rem_pio2+0x590>
 801315a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801315e:	4619      	mov	r1, r3
 8013160:	9b01      	ldr	r3, [sp, #4]
 8013162:	e9c3 0100 	strd	r0, r1, [r3]
 8013166:	9b06      	ldr	r3, [sp, #24]
 8013168:	f003 0007 	and.w	r0, r3, #7
 801316c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013170:	ecbd 8b02 	vpop	{d8}
 8013174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013178:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801317c:	f7f4 ffb6 	bl	80080ec <__adddf3>
 8013180:	3d01      	subs	r5, #1
 8013182:	e7e6      	b.n	8013152 <__kernel_rem_pio2+0x582>
 8013184:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013188:	f7f4 ffb0 	bl	80080ec <__adddf3>
 801318c:	3e01      	subs	r6, #1
 801318e:	e7bc      	b.n	801310a <__kernel_rem_pio2+0x53a>
 8013190:	4602      	mov	r2, r0
 8013192:	460b      	mov	r3, r1
 8013194:	e7c1      	b.n	801311a <__kernel_rem_pio2+0x54a>
 8013196:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801319a:	f7f4 ffa7 	bl	80080ec <__adddf3>
 801319e:	3401      	adds	r4, #1
 80131a0:	e7c6      	b.n	8013130 <__kernel_rem_pio2+0x560>
 80131a2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80131a6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80131aa:	4640      	mov	r0, r8
 80131ac:	ec53 2b17 	vmov	r2, r3, d7
 80131b0:	4649      	mov	r1, r9
 80131b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80131b6:	f7f4 ff99 	bl	80080ec <__adddf3>
 80131ba:	4602      	mov	r2, r0
 80131bc:	460b      	mov	r3, r1
 80131be:	4606      	mov	r6, r0
 80131c0:	460f      	mov	r7, r1
 80131c2:	4640      	mov	r0, r8
 80131c4:	4649      	mov	r1, r9
 80131c6:	f7f4 ff8f 	bl	80080e8 <__aeabi_dsub>
 80131ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131ce:	f7f4 ff8d 	bl	80080ec <__adddf3>
 80131d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131d6:	e9ca 0100 	strd	r0, r1, [sl]
 80131da:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80131de:	e770      	b.n	80130c2 <__kernel_rem_pio2+0x4f2>
 80131e0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80131e4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80131e8:	4630      	mov	r0, r6
 80131ea:	ec53 2b17 	vmov	r2, r3, d7
 80131ee:	4639      	mov	r1, r7
 80131f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80131f4:	f7f4 ff7a 	bl	80080ec <__adddf3>
 80131f8:	4602      	mov	r2, r0
 80131fa:	460b      	mov	r3, r1
 80131fc:	4680      	mov	r8, r0
 80131fe:	4689      	mov	r9, r1
 8013200:	4630      	mov	r0, r6
 8013202:	4639      	mov	r1, r7
 8013204:	f7f4 ff70 	bl	80080e8 <__aeabi_dsub>
 8013208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801320c:	f7f4 ff6e 	bl	80080ec <__adddf3>
 8013210:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013214:	e9ca 0100 	strd	r0, r1, [sl]
 8013218:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801321c:	e756      	b.n	80130cc <__kernel_rem_pio2+0x4fc>
 801321e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013222:	f7f4 ff63 	bl	80080ec <__adddf3>
 8013226:	3d01      	subs	r5, #1
 8013228:	e756      	b.n	80130d8 <__kernel_rem_pio2+0x508>
 801322a:	9b01      	ldr	r3, [sp, #4]
 801322c:	9a01      	ldr	r2, [sp, #4]
 801322e:	601f      	str	r7, [r3, #0]
 8013230:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013234:	605c      	str	r4, [r3, #4]
 8013236:	609d      	str	r5, [r3, #8]
 8013238:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801323c:	60d3      	str	r3, [r2, #12]
 801323e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013242:	6110      	str	r0, [r2, #16]
 8013244:	6153      	str	r3, [r2, #20]
 8013246:	e78e      	b.n	8013166 <__kernel_rem_pio2+0x596>
 8013248:	41700000 	.word	0x41700000
 801324c:	3e700000 	.word	0x3e700000

08013250 <__kernel_sin>:
 8013250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	ec55 4b10 	vmov	r4, r5, d0
 8013258:	b085      	sub	sp, #20
 801325a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801325e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013262:	ed8d 1b00 	vstr	d1, [sp]
 8013266:	9002      	str	r0, [sp, #8]
 8013268:	da06      	bge.n	8013278 <__kernel_sin+0x28>
 801326a:	ee10 0a10 	vmov	r0, s0
 801326e:	4629      	mov	r1, r5
 8013270:	f7f5 fb8c 	bl	800898c <__aeabi_d2iz>
 8013274:	2800      	cmp	r0, #0
 8013276:	d051      	beq.n	801331c <__kernel_sin+0xcc>
 8013278:	4622      	mov	r2, r4
 801327a:	462b      	mov	r3, r5
 801327c:	4620      	mov	r0, r4
 801327e:	4629      	mov	r1, r5
 8013280:	f7f5 f8ea 	bl	8008458 <__aeabi_dmul>
 8013284:	4682      	mov	sl, r0
 8013286:	468b      	mov	fp, r1
 8013288:	4602      	mov	r2, r0
 801328a:	460b      	mov	r3, r1
 801328c:	4620      	mov	r0, r4
 801328e:	4629      	mov	r1, r5
 8013290:	f7f5 f8e2 	bl	8008458 <__aeabi_dmul>
 8013294:	a341      	add	r3, pc, #260	; (adr r3, 801339c <__kernel_sin+0x14c>)
 8013296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329a:	4680      	mov	r8, r0
 801329c:	4689      	mov	r9, r1
 801329e:	4650      	mov	r0, sl
 80132a0:	4659      	mov	r1, fp
 80132a2:	f7f5 f8d9 	bl	8008458 <__aeabi_dmul>
 80132a6:	a33f      	add	r3, pc, #252	; (adr r3, 80133a4 <__kernel_sin+0x154>)
 80132a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ac:	f7f4 ff1c 	bl	80080e8 <__aeabi_dsub>
 80132b0:	4652      	mov	r2, sl
 80132b2:	465b      	mov	r3, fp
 80132b4:	f7f5 f8d0 	bl	8008458 <__aeabi_dmul>
 80132b8:	a33c      	add	r3, pc, #240	; (adr r3, 80133ac <__kernel_sin+0x15c>)
 80132ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132be:	f7f4 ff15 	bl	80080ec <__adddf3>
 80132c2:	4652      	mov	r2, sl
 80132c4:	465b      	mov	r3, fp
 80132c6:	f7f5 f8c7 	bl	8008458 <__aeabi_dmul>
 80132ca:	a33a      	add	r3, pc, #232	; (adr r3, 80133b4 <__kernel_sin+0x164>)
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	f7f4 ff0a 	bl	80080e8 <__aeabi_dsub>
 80132d4:	4652      	mov	r2, sl
 80132d6:	465b      	mov	r3, fp
 80132d8:	f7f5 f8be 	bl	8008458 <__aeabi_dmul>
 80132dc:	a337      	add	r3, pc, #220	; (adr r3, 80133bc <__kernel_sin+0x16c>)
 80132de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e2:	f7f4 ff03 	bl	80080ec <__adddf3>
 80132e6:	9b02      	ldr	r3, [sp, #8]
 80132e8:	4606      	mov	r6, r0
 80132ea:	460f      	mov	r7, r1
 80132ec:	b9db      	cbnz	r3, 8013326 <__kernel_sin+0xd6>
 80132ee:	4602      	mov	r2, r0
 80132f0:	460b      	mov	r3, r1
 80132f2:	4650      	mov	r0, sl
 80132f4:	4659      	mov	r1, fp
 80132f6:	f7f5 f8af 	bl	8008458 <__aeabi_dmul>
 80132fa:	a325      	add	r3, pc, #148	; (adr r3, 8013390 <__kernel_sin+0x140>)
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	f7f4 fef2 	bl	80080e8 <__aeabi_dsub>
 8013304:	4642      	mov	r2, r8
 8013306:	464b      	mov	r3, r9
 8013308:	f7f5 f8a6 	bl	8008458 <__aeabi_dmul>
 801330c:	4602      	mov	r2, r0
 801330e:	460b      	mov	r3, r1
 8013310:	4620      	mov	r0, r4
 8013312:	4629      	mov	r1, r5
 8013314:	f7f4 feea 	bl	80080ec <__adddf3>
 8013318:	4604      	mov	r4, r0
 801331a:	460d      	mov	r5, r1
 801331c:	ec45 4b10 	vmov	d0, r4, r5
 8013320:	b005      	add	sp, #20
 8013322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013326:	2200      	movs	r2, #0
 8013328:	4b1b      	ldr	r3, [pc, #108]	; (8013398 <__kernel_sin+0x148>)
 801332a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801332e:	f7f5 f893 	bl	8008458 <__aeabi_dmul>
 8013332:	4632      	mov	r2, r6
 8013334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013338:	463b      	mov	r3, r7
 801333a:	4640      	mov	r0, r8
 801333c:	4649      	mov	r1, r9
 801333e:	f7f5 f88b 	bl	8008458 <__aeabi_dmul>
 8013342:	4602      	mov	r2, r0
 8013344:	460b      	mov	r3, r1
 8013346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801334a:	f7f4 fecd 	bl	80080e8 <__aeabi_dsub>
 801334e:	4652      	mov	r2, sl
 8013350:	465b      	mov	r3, fp
 8013352:	f7f5 f881 	bl	8008458 <__aeabi_dmul>
 8013356:	e9dd 2300 	ldrd	r2, r3, [sp]
 801335a:	f7f4 fec5 	bl	80080e8 <__aeabi_dsub>
 801335e:	a30c      	add	r3, pc, #48	; (adr r3, 8013390 <__kernel_sin+0x140>)
 8013360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013364:	4606      	mov	r6, r0
 8013366:	460f      	mov	r7, r1
 8013368:	4640      	mov	r0, r8
 801336a:	4649      	mov	r1, r9
 801336c:	f7f5 f874 	bl	8008458 <__aeabi_dmul>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	4630      	mov	r0, r6
 8013376:	4639      	mov	r1, r7
 8013378:	f7f4 feb8 	bl	80080ec <__adddf3>
 801337c:	4602      	mov	r2, r0
 801337e:	460b      	mov	r3, r1
 8013380:	4620      	mov	r0, r4
 8013382:	4629      	mov	r1, r5
 8013384:	f7f4 feb0 	bl	80080e8 <__aeabi_dsub>
 8013388:	e7c6      	b.n	8013318 <__kernel_sin+0xc8>
 801338a:	bf00      	nop
 801338c:	f3af 8000 	nop.w
 8013390:	55555549 	.word	0x55555549
 8013394:	3fc55555 	.word	0x3fc55555
 8013398:	3fe00000 	.word	0x3fe00000
 801339c:	5acfd57c 	.word	0x5acfd57c
 80133a0:	3de5d93a 	.word	0x3de5d93a
 80133a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80133a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80133ac:	57b1fe7d 	.word	0x57b1fe7d
 80133b0:	3ec71de3 	.word	0x3ec71de3
 80133b4:	19c161d5 	.word	0x19c161d5
 80133b8:	3f2a01a0 	.word	0x3f2a01a0
 80133bc:	1110f8a6 	.word	0x1110f8a6
 80133c0:	3f811111 	.word	0x3f811111

080133c4 <fabs>:
 80133c4:	ec51 0b10 	vmov	r0, r1, d0
 80133c8:	ee10 2a10 	vmov	r2, s0
 80133cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80133d0:	ec43 2b10 	vmov	d0, r2, r3
 80133d4:	4770      	bx	lr
	...

080133d8 <floor>:
 80133d8:	ec51 0b10 	vmov	r0, r1, d0
 80133dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80133e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80133e8:	2e13      	cmp	r6, #19
 80133ea:	460c      	mov	r4, r1
 80133ec:	ee10 5a10 	vmov	r5, s0
 80133f0:	4680      	mov	r8, r0
 80133f2:	dc34      	bgt.n	801345e <floor+0x86>
 80133f4:	2e00      	cmp	r6, #0
 80133f6:	da16      	bge.n	8013426 <floor+0x4e>
 80133f8:	a335      	add	r3, pc, #212	; (adr r3, 80134d0 <floor+0xf8>)
 80133fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fe:	f7f4 fe75 	bl	80080ec <__adddf3>
 8013402:	2200      	movs	r2, #0
 8013404:	2300      	movs	r3, #0
 8013406:	f7f5 fab7 	bl	8008978 <__aeabi_dcmpgt>
 801340a:	b148      	cbz	r0, 8013420 <floor+0x48>
 801340c:	2c00      	cmp	r4, #0
 801340e:	da59      	bge.n	80134c4 <floor+0xec>
 8013410:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013414:	4a30      	ldr	r2, [pc, #192]	; (80134d8 <floor+0x100>)
 8013416:	432b      	orrs	r3, r5
 8013418:	2500      	movs	r5, #0
 801341a:	42ab      	cmp	r3, r5
 801341c:	bf18      	it	ne
 801341e:	4614      	movne	r4, r2
 8013420:	4621      	mov	r1, r4
 8013422:	4628      	mov	r0, r5
 8013424:	e025      	b.n	8013472 <floor+0x9a>
 8013426:	4f2d      	ldr	r7, [pc, #180]	; (80134dc <floor+0x104>)
 8013428:	4137      	asrs	r7, r6
 801342a:	ea01 0307 	and.w	r3, r1, r7
 801342e:	4303      	orrs	r3, r0
 8013430:	d01f      	beq.n	8013472 <floor+0x9a>
 8013432:	a327      	add	r3, pc, #156	; (adr r3, 80134d0 <floor+0xf8>)
 8013434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013438:	f7f4 fe58 	bl	80080ec <__adddf3>
 801343c:	2200      	movs	r2, #0
 801343e:	2300      	movs	r3, #0
 8013440:	f7f5 fa9a 	bl	8008978 <__aeabi_dcmpgt>
 8013444:	2800      	cmp	r0, #0
 8013446:	d0eb      	beq.n	8013420 <floor+0x48>
 8013448:	2c00      	cmp	r4, #0
 801344a:	bfbe      	ittt	lt
 801344c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013450:	fa43 f606 	asrlt.w	r6, r3, r6
 8013454:	19a4      	addlt	r4, r4, r6
 8013456:	ea24 0407 	bic.w	r4, r4, r7
 801345a:	2500      	movs	r5, #0
 801345c:	e7e0      	b.n	8013420 <floor+0x48>
 801345e:	2e33      	cmp	r6, #51	; 0x33
 8013460:	dd0b      	ble.n	801347a <floor+0xa2>
 8013462:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013466:	d104      	bne.n	8013472 <floor+0x9a>
 8013468:	ee10 2a10 	vmov	r2, s0
 801346c:	460b      	mov	r3, r1
 801346e:	f7f4 fe3d 	bl	80080ec <__adddf3>
 8013472:	ec41 0b10 	vmov	d0, r0, r1
 8013476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801347a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801347e:	f04f 33ff 	mov.w	r3, #4294967295
 8013482:	fa23 f707 	lsr.w	r7, r3, r7
 8013486:	4207      	tst	r7, r0
 8013488:	d0f3      	beq.n	8013472 <floor+0x9a>
 801348a:	a311      	add	r3, pc, #68	; (adr r3, 80134d0 <floor+0xf8>)
 801348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013490:	f7f4 fe2c 	bl	80080ec <__adddf3>
 8013494:	2200      	movs	r2, #0
 8013496:	2300      	movs	r3, #0
 8013498:	f7f5 fa6e 	bl	8008978 <__aeabi_dcmpgt>
 801349c:	2800      	cmp	r0, #0
 801349e:	d0bf      	beq.n	8013420 <floor+0x48>
 80134a0:	2c00      	cmp	r4, #0
 80134a2:	da02      	bge.n	80134aa <floor+0xd2>
 80134a4:	2e14      	cmp	r6, #20
 80134a6:	d103      	bne.n	80134b0 <floor+0xd8>
 80134a8:	3401      	adds	r4, #1
 80134aa:	ea25 0507 	bic.w	r5, r5, r7
 80134ae:	e7b7      	b.n	8013420 <floor+0x48>
 80134b0:	2301      	movs	r3, #1
 80134b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80134b6:	fa03 f606 	lsl.w	r6, r3, r6
 80134ba:	4435      	add	r5, r6
 80134bc:	4545      	cmp	r5, r8
 80134be:	bf38      	it	cc
 80134c0:	18e4      	addcc	r4, r4, r3
 80134c2:	e7f2      	b.n	80134aa <floor+0xd2>
 80134c4:	2500      	movs	r5, #0
 80134c6:	462c      	mov	r4, r5
 80134c8:	e7aa      	b.n	8013420 <floor+0x48>
 80134ca:	bf00      	nop
 80134cc:	f3af 8000 	nop.w
 80134d0:	8800759c 	.word	0x8800759c
 80134d4:	7e37e43c 	.word	0x7e37e43c
 80134d8:	bff00000 	.word	0xbff00000
 80134dc:	000fffff 	.word	0x000fffff

080134e0 <matherr>:
 80134e0:	2000      	movs	r0, #0
 80134e2:	4770      	bx	lr
 80134e4:	0000      	movs	r0, r0
	...

080134e8 <scalbn>:
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	ec55 4b10 	vmov	r4, r5, d0
 80134ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80134f2:	4606      	mov	r6, r0
 80134f4:	462b      	mov	r3, r5
 80134f6:	b9aa      	cbnz	r2, 8013524 <scalbn+0x3c>
 80134f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80134fc:	4323      	orrs	r3, r4
 80134fe:	d03b      	beq.n	8013578 <scalbn+0x90>
 8013500:	4b31      	ldr	r3, [pc, #196]	; (80135c8 <scalbn+0xe0>)
 8013502:	4629      	mov	r1, r5
 8013504:	2200      	movs	r2, #0
 8013506:	ee10 0a10 	vmov	r0, s0
 801350a:	f7f4 ffa5 	bl	8008458 <__aeabi_dmul>
 801350e:	4b2f      	ldr	r3, [pc, #188]	; (80135cc <scalbn+0xe4>)
 8013510:	429e      	cmp	r6, r3
 8013512:	4604      	mov	r4, r0
 8013514:	460d      	mov	r5, r1
 8013516:	da12      	bge.n	801353e <scalbn+0x56>
 8013518:	a327      	add	r3, pc, #156	; (adr r3, 80135b8 <scalbn+0xd0>)
 801351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351e:	f7f4 ff9b 	bl	8008458 <__aeabi_dmul>
 8013522:	e009      	b.n	8013538 <scalbn+0x50>
 8013524:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013528:	428a      	cmp	r2, r1
 801352a:	d10c      	bne.n	8013546 <scalbn+0x5e>
 801352c:	ee10 2a10 	vmov	r2, s0
 8013530:	4620      	mov	r0, r4
 8013532:	4629      	mov	r1, r5
 8013534:	f7f4 fdda 	bl	80080ec <__adddf3>
 8013538:	4604      	mov	r4, r0
 801353a:	460d      	mov	r5, r1
 801353c:	e01c      	b.n	8013578 <scalbn+0x90>
 801353e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013542:	460b      	mov	r3, r1
 8013544:	3a36      	subs	r2, #54	; 0x36
 8013546:	4432      	add	r2, r6
 8013548:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801354c:	428a      	cmp	r2, r1
 801354e:	dd0b      	ble.n	8013568 <scalbn+0x80>
 8013550:	ec45 4b11 	vmov	d1, r4, r5
 8013554:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80135c0 <scalbn+0xd8>
 8013558:	f000 f83c 	bl	80135d4 <copysign>
 801355c:	a318      	add	r3, pc, #96	; (adr r3, 80135c0 <scalbn+0xd8>)
 801355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013562:	ec51 0b10 	vmov	r0, r1, d0
 8013566:	e7da      	b.n	801351e <scalbn+0x36>
 8013568:	2a00      	cmp	r2, #0
 801356a:	dd08      	ble.n	801357e <scalbn+0x96>
 801356c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013570:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013574:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013578:	ec45 4b10 	vmov	d0, r4, r5
 801357c:	bd70      	pop	{r4, r5, r6, pc}
 801357e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013582:	da0d      	bge.n	80135a0 <scalbn+0xb8>
 8013584:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013588:	429e      	cmp	r6, r3
 801358a:	ec45 4b11 	vmov	d1, r4, r5
 801358e:	dce1      	bgt.n	8013554 <scalbn+0x6c>
 8013590:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80135b8 <scalbn+0xd0>
 8013594:	f000 f81e 	bl	80135d4 <copysign>
 8013598:	a307      	add	r3, pc, #28	; (adr r3, 80135b8 <scalbn+0xd0>)
 801359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359e:	e7e0      	b.n	8013562 <scalbn+0x7a>
 80135a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80135a4:	3236      	adds	r2, #54	; 0x36
 80135a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80135aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80135ae:	4620      	mov	r0, r4
 80135b0:	4629      	mov	r1, r5
 80135b2:	2200      	movs	r2, #0
 80135b4:	4b06      	ldr	r3, [pc, #24]	; (80135d0 <scalbn+0xe8>)
 80135b6:	e7b2      	b.n	801351e <scalbn+0x36>
 80135b8:	c2f8f359 	.word	0xc2f8f359
 80135bc:	01a56e1f 	.word	0x01a56e1f
 80135c0:	8800759c 	.word	0x8800759c
 80135c4:	7e37e43c 	.word	0x7e37e43c
 80135c8:	43500000 	.word	0x43500000
 80135cc:	ffff3cb0 	.word	0xffff3cb0
 80135d0:	3c900000 	.word	0x3c900000

080135d4 <copysign>:
 80135d4:	ec51 0b10 	vmov	r0, r1, d0
 80135d8:	ee11 0a90 	vmov	r0, s3
 80135dc:	ee10 2a10 	vmov	r2, s0
 80135e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80135e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80135e8:	ea41 0300 	orr.w	r3, r1, r0
 80135ec:	ec43 2b10 	vmov	d0, r2, r3
 80135f0:	4770      	bx	lr
	...

080135f4 <_init>:
 80135f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135f6:	bf00      	nop
 80135f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135fa:	bc08      	pop	{r3}
 80135fc:	469e      	mov	lr, r3
 80135fe:	4770      	bx	lr

08013600 <_fini>:
 8013600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013602:	bf00      	nop
 8013604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013606:	bc08      	pop	{r3}
 8013608:	469e      	mov	lr, r3
 801360a:	4770      	bx	lr
