
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000d994  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013f88  08015998  08015998  00025998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08029920  08029920  000401e4  2**0
                  CONTENTS
  5 .ARM          00000008  08029920  08029920  00039920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08029928  08029928  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08029928  08029928  00039928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0802992c  0802992c  0003992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001e4  20000000  08029930  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000046a8  200001e4  08029b14  000401e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000488c  08029b14  0004488c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021801  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000469c  00000000  00000000  00061a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015c0  00000000  00000000  000660b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001370  00000000  00000000  00067678  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026aec  00000000  00000000  000689e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00015af0  00000000  00000000  0008f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dabe6  00000000  00000000  000a4fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017fbaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067a8  00000000  00000000  0017fc28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e4 	.word	0x200001e4
 800801c:	00000000 	.word	0x00000000
 8008020:	0801597c 	.word	0x0801597c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e8 	.word	0x200001e8
 800803c:	0801597c 	.word	0x0801597c

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <HAL_Init+0x40>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <HAL_Init+0x40>)
 8008dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008dc8:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <HAL_Init+0x40>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a0a      	ldr	r2, [pc, #40]	; (8008df8 <HAL_Init+0x40>)
 8008dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <HAL_Init+0x40>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <HAL_Init+0x40>)
 8008dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008de0:	2003      	movs	r0, #3
 8008de2:	f001 f96b 	bl	800a0bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008de6:	2000      	movs	r0, #0
 8008de8:	f000 f808 	bl	8008dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008dec:	f008 fd98 	bl	8011920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40023c00 	.word	0x40023c00

08008dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e04:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <HAL_InitTick+0x54>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <HAL_InitTick+0x58>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 f983 	bl	800a126 <HAL_SYSTICK_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e00e      	b.n	8008e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b0f      	cmp	r3, #15
 8008e2e:	d80a      	bhi.n	8008e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e30:	2200      	movs	r2, #0
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	f001 f94b 	bl	800a0d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e3c:	4a06      	ldr	r2, [pc, #24]	; (8008e58 <HAL_InitTick+0x5c>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e000      	b.n	8008e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	2000000c 	.word	0x2000000c
 8008e54:	20000004 	.word	0x20000004
 8008e58:	20000000 	.word	0x20000000

08008e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <HAL_IncTick+0x20>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <HAL_IncTick+0x24>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <HAL_IncTick+0x24>)
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000004 	.word	0x20000004
 8008e80:	200042b4 	.word	0x200042b4

08008e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  return uwTick;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <HAL_GetTick+0x14>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200042b4 	.word	0x200042b4

08008e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ea4:	f7ff ffee 	bl	8008e84 <HAL_GetTick>
 8008ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d005      	beq.n	8008ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <HAL_Delay+0x40>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ec2:	bf00      	nop
 8008ec4:	f7ff ffde 	bl	8008e84 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d8f7      	bhi.n	8008ec4 <HAL_Delay+0x28>
  {
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000004 	.word	0x20000004

08008ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e033      	b.n	8008f5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f006 fcfe 	bl	800f900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d118      	bne.n	8008f50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f26:	f023 0302 	bic.w	r3, r3, #2
 8008f2a:	f043 0202 	orr.w	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa5a 	bl	80093ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	f043 0201 	orr.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8008f4e:	e001      	b.n	8008f54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_ADC_Start_DMA+0x1e>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e0cc      	b.n	8009120 <HAL_ADC_Start_DMA+0x1b8>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d018      	beq.n	8008fce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008fac:	4b5e      	ldr	r3, [pc, #376]	; (8009128 <HAL_ADC_Start_DMA+0x1c0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a5e      	ldr	r2, [pc, #376]	; (800912c <HAL_ADC_Start_DMA+0x1c4>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	0c9a      	lsrs	r2, r3, #18
 8008fb8:	4613      	mov	r3, r2
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	4413      	add	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008fc0:	e002      	b.n	8008fc8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f9      	bne.n	8008fc2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	f040 80a0 	bne.w	800911e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008fe6:	f023 0301 	bic.w	r3, r3, #1
 8008fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009008:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901c:	d106      	bne.n	800902c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009022:	f023 0206 	bic.w	r2, r3, #6
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	645a      	str	r2, [r3, #68]	; 0x44
 800902a:	e002      	b.n	8009032 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800903a:	4b3d      	ldr	r3, [pc, #244]	; (8009130 <HAL_ADC_Start_DMA+0x1c8>)
 800903c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	4a3c      	ldr	r2, [pc, #240]	; (8009134 <HAL_ADC_Start_DMA+0x1cc>)
 8009044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904a:	4a3b      	ldr	r2, [pc, #236]	; (8009138 <HAL_ADC_Start_DMA+0x1d0>)
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	4a3a      	ldr	r2, [pc, #232]	; (800913c <HAL_ADC_Start_DMA+0x1d4>)
 8009054:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800905e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800906e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800907e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	334c      	adds	r3, #76	; 0x4c
 800908a:	4619      	mov	r1, r3
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f001 f904 	bl	800a29c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f003 031f 	and.w	r3, r3, #31
 800909c:	2b00      	cmp	r3, #0
 800909e:	d12a      	bne.n	80090f6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a26      	ldr	r2, [pc, #152]	; (8009140 <HAL_ADC_Start_DMA+0x1d8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d015      	beq.n	80090d6 <HAL_ADC_Start_DMA+0x16e>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a25      	ldr	r2, [pc, #148]	; (8009144 <HAL_ADC_Start_DMA+0x1dc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d105      	bne.n	80090c0 <HAL_ADC_Start_DMA+0x158>
 80090b4:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <HAL_ADC_Start_DMA+0x1c8>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a20      	ldr	r2, [pc, #128]	; (8009148 <HAL_ADC_Start_DMA+0x1e0>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d129      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
 80090ca:	4b19      	ldr	r3, [pc, #100]	; (8009130 <HAL_ADC_Start_DMA+0x1c8>)
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f003 031f 	and.w	r3, r3, #31
 80090d2:	2b0f      	cmp	r3, #15
 80090d4:	d823      	bhi.n	800911e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11c      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090f2:	609a      	str	r2, [r3, #8]
 80090f4:	e013      	b.n	800911e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a11      	ldr	r2, [pc, #68]	; (8009140 <HAL_ADC_Start_DMA+0x1d8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d10e      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d107      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800911c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	2000000c 	.word	0x2000000c
 800912c:	431bde83 	.word	0x431bde83
 8009130:	40012300 	.word	0x40012300
 8009134:	080095e5 	.word	0x080095e5
 8009138:	0800969f 	.word	0x0800969f
 800913c:	080096bb 	.word	0x080096bb
 8009140:	40012000 	.word	0x40012000
 8009144:	40012100 	.word	0x40012100
 8009148:	40012200 	.word	0x40012200

0800914c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_ADC_ConfigChannel+0x1c>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e113      	b.n	80093cc <HAL_ADC_ConfigChannel+0x244>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b09      	cmp	r3, #9
 80091b2:	d925      	bls.n	8009200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68d9      	ldr	r1, [r3, #12]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	4613      	mov	r3, r2
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	4413      	add	r3, r2
 80091c8:	3b1e      	subs	r3, #30
 80091ca:	2207      	movs	r2, #7
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	43da      	mvns	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	400a      	ands	r2, r1
 80091d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68d9      	ldr	r1, [r3, #12]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4618      	mov	r0, r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	4403      	add	r3, r0
 80091f2:	3b1e      	subs	r3, #30
 80091f4:	409a      	lsls	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	e022      	b.n	8009246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6919      	ldr	r1, [r3, #16]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	461a      	mov	r2, r3
 800920e:	4613      	mov	r3, r2
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4413      	add	r3, r2
 8009214:	2207      	movs	r2, #7
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	43da      	mvns	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	400a      	ands	r2, r1
 8009222:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6919      	ldr	r1, [r3, #16]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	4618      	mov	r0, r3
 8009236:	4603      	mov	r3, r0
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	4403      	add	r3, r0
 800923c:	409a      	lsls	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	2b06      	cmp	r3, #6
 800924c:	d824      	bhi.n	8009298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	3b05      	subs	r3, #5
 8009260:	221f      	movs	r2, #31
 8009262:	fa02 f303 	lsl.w	r3, r2, r3
 8009266:	43da      	mvns	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	400a      	ands	r2, r1
 800926e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	4618      	mov	r0, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	3b05      	subs	r3, #5
 800928a:	fa00 f203 	lsl.w	r2, r0, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	635a      	str	r2, [r3, #52]	; 0x34
 8009296:	e04c      	b.n	8009332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d824      	bhi.n	80092ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	3b23      	subs	r3, #35	; 0x23
 80092b2:	221f      	movs	r2, #31
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	43da      	mvns	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	400a      	ands	r2, r1
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4618      	mov	r0, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	3b23      	subs	r3, #35	; 0x23
 80092dc:	fa00 f203 	lsl.w	r2, r0, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30
 80092e8:	e023      	b.n	8009332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	3b41      	subs	r3, #65	; 0x41
 80092fc:	221f      	movs	r2, #31
 80092fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009302:	43da      	mvns	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	400a      	ands	r2, r1
 800930a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	b29b      	uxth	r3, r3
 8009318:	4618      	mov	r0, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	3b41      	subs	r3, #65	; 0x41
 8009326:	fa00 f203 	lsl.w	r2, r0, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009332:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <HAL_ADC_ConfigChannel+0x250>)
 8009334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a28      	ldr	r2, [pc, #160]	; (80093dc <HAL_ADC_ConfigChannel+0x254>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10f      	bne.n	8009360 <HAL_ADC_ConfigChannel+0x1d8>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b12      	cmp	r3, #18
 8009346:	d10b      	bne.n	8009360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a1d      	ldr	r2, [pc, #116]	; (80093dc <HAL_ADC_ConfigChannel+0x254>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d12b      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x23a>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1c      	ldr	r2, [pc, #112]	; (80093e0 <HAL_ADC_ConfigChannel+0x258>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d003      	beq.n	800937c <HAL_ADC_ConfigChannel+0x1f4>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b11      	cmp	r3, #17
 800937a:	d122      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <HAL_ADC_ConfigChannel+0x258>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d111      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800939e:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <HAL_ADC_ConfigChannel+0x25c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a11      	ldr	r2, [pc, #68]	; (80093e8 <HAL_ADC_ConfigChannel+0x260>)
 80093a4:	fba2 2303 	umull	r2, r3, r2, r3
 80093a8:	0c9a      	lsrs	r2, r3, #18
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093b4:	e002      	b.n	80093bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f9      	bne.n	80093b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	40012300 	.word	0x40012300
 80093dc:	40012000 	.word	0x40012000
 80093e0:	10000012 	.word	0x10000012
 80093e4:	2000000c 	.word	0x2000000c
 80093e8:	431bde83 	.word	0x431bde83

080093ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80093f4:	4b79      	ldr	r3, [pc, #484]	; (80095dc <ADC_Init+0x1f0>)
 80093f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	431a      	orrs	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6859      	ldr	r1, [r3, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	021a      	lsls	r2, r3, #8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6859      	ldr	r1, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6899      	ldr	r1, [r3, #8]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947e:	4a58      	ldr	r2, [pc, #352]	; (80095e0 <ADC_Init+0x1f4>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d022      	beq.n	80094ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6899      	ldr	r1, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6899      	ldr	r1, [r3, #8]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	609a      	str	r2, [r3, #8]
 80094c8:	e00f      	b.n	80094ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80094d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0202 	bic.w	r2, r2, #2
 80094f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6899      	ldr	r1, [r3, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7e1b      	ldrb	r3, [r3, #24]
 8009504:	005a      	lsls	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01b      	beq.n	8009550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6859      	ldr	r1, [r3, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	3b01      	subs	r3, #1
 8009544:	035a      	lsls	r2, r3, #13
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	605a      	str	r2, [r3, #4]
 800954e:	e007      	b.n	8009560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800955e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	3b01      	subs	r3, #1
 800957c:	051a      	lsls	r2, r3, #20
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689a      	ldr	r2, [r3, #8]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6899      	ldr	r1, [r3, #8]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095a2:	025a      	lsls	r2, r3, #9
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6899      	ldr	r1, [r3, #8]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	029a      	lsls	r2, r3, #10
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	609a      	str	r2, [r3, #8]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	40012300 	.word	0x40012300
 80095e0:	0f000001 	.word	0x0f000001

080095e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d13c      	bne.n	8009678 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009602:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d12b      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800961c:	2b00      	cmp	r3, #0
 800961e:	d127      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800962a:	2b00      	cmp	r3, #0
 800962c:	d006      	beq.n	800963c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009638:	2b00      	cmp	r3, #0
 800963a:	d119      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0220 	bic.w	r2, r2, #32
 800964a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d105      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009668:	f043 0201 	orr.w	r2, r3, #1
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fd6b 	bl	800914c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009676:	e00e      	b.n	8009696 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fd75 	bl	8009174 <HAL_ADC_ErrorCallback>
}
 800968a:	e004      	b.n	8009696 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff fd57 	bl	8009160 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2240      	movs	r2, #64	; 0x40
 80096cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	f043 0204 	orr.w	r2, r3, #4
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff fd4a 	bl	8009174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e0ed      	b.n	80098d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f006 fa90 	bl	800fc2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0202 	bic.w	r2, r2, #2
 800971a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800971c:	f7ff fbb2 	bl	8008e84 <HAL_GetTick>
 8009720:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009722:	e012      	b.n	800974a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009724:	f7ff fbae 	bl	8008e84 <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2b0a      	cmp	r3, #10
 8009730:	d90b      	bls.n	800974a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2205      	movs	r2, #5
 8009742:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e0c5      	b.n	80098d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1e5      	bne.n	8009724 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009768:	f7ff fb8c 	bl	8008e84 <HAL_GetTick>
 800976c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800976e:	e012      	b.n	8009796 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009770:	f7ff fb88 	bl	8008e84 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b0a      	cmp	r3, #10
 800977c:	d90b      	bls.n	8009796 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2205      	movs	r2, #5
 800978e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e09f      	b.n	80098d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0e5      	beq.n	8009770 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7e1b      	ldrb	r3, [r3, #24]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d108      	bne.n	80097be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	e007      	b.n	80097ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7e5b      	ldrb	r3, [r3, #25]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d108      	bne.n	80097e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e007      	b.n	80097f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	7e9b      	ldrb	r3, [r3, #26]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d108      	bne.n	8009812 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0220 	orr.w	r2, r2, #32
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e007      	b.n	8009822 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0220 	bic.w	r2, r2, #32
 8009820:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7edb      	ldrb	r3, [r3, #27]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d108      	bne.n	800983c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0210 	bic.w	r2, r2, #16
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e007      	b.n	800984c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0210 	orr.w	r2, r2, #16
 800984a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	7f1b      	ldrb	r3, [r3, #28]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d108      	bne.n	8009866 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0208 	orr.w	r2, r2, #8
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e007      	b.n	8009876 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0208 	bic.w	r2, r2, #8
 8009874:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	7f5b      	ldrb	r3, [r3, #29]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d108      	bne.n	8009890 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0204 	orr.w	r2, r2, #4
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	e007      	b.n	80098a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0204 	bic.w	r2, r2, #4
 800989e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689a      	ldr	r2, [r3, #8]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	ea42 0103 	orr.w	r1, r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	1e5a      	subs	r2, r3, #1
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80098de:	b480      	push	{r7}
 80098e0:	b087      	sub	sp, #28
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	607a      	str	r2, [r7, #4]
 80098ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d003      	beq.n	8009902 <HAL_CAN_GetRxMessage+0x24>
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	f040 80f4 	bne.w	8009aea <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10e      	bne.n	8009926 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d116      	bne.n	8009944 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e0e8      	b.n	8009af8 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d107      	bne.n	8009944 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e0d9      	b.n	8009af8 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	331b      	adds	r3, #27
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	4413      	add	r3, r2
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0204 	and.w	r2, r3, #4
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10c      	bne.n	800997c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	331b      	adds	r3, #27
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	4413      	add	r3, r2
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	0d5b      	lsrs	r3, r3, #21
 8009972:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	e00b      	b.n	8009994 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	331b      	adds	r3, #27
 8009984:	011b      	lsls	r3, r3, #4
 8009986:	4413      	add	r3, r2
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	08db      	lsrs	r3, r3, #3
 800998c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	331b      	adds	r3, #27
 800999c:	011b      	lsls	r3, r3, #4
 800999e:	4413      	add	r3, r2
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	085b      	lsrs	r3, r3, #1
 80099a4:	f003 0201 	and.w	r2, r3, #1
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	331b      	adds	r3, #27
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	4413      	add	r3, r2
 80099b8:	3304      	adds	r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 020f 	and.w	r2, r3, #15
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	331b      	adds	r3, #27
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	4413      	add	r3, r2
 80099d0:	3304      	adds	r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	0a1b      	lsrs	r3, r3, #8
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	331b      	adds	r3, #27
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	4413      	add	r3, r2
 80099e8:	3304      	adds	r3, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	0c1b      	lsrs	r3, r3, #16
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	011b      	lsls	r3, r3, #4
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	0a1a      	lsrs	r2, r3, #8
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	0c1a      	lsrs	r2, r3, #16
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	3302      	adds	r3, #2
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	0e1a      	lsrs	r2, r3, #24
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	3303      	adds	r3, #3
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	011b      	lsls	r3, r3, #4
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	0a1a      	lsrs	r2, r3, #8
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	3305      	adds	r3, #5
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	0c1a      	lsrs	r2, r3, #16
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	3306      	adds	r3, #6
 8009aa0:	b2d2      	uxtb	r2, r2
 8009aa2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	011b      	lsls	r3, r3, #4
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	0e1a      	lsrs	r2, r3, #24
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	3307      	adds	r3, #7
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d108      	bne.n	8009ad6 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f042 0220 	orr.w	r2, r2, #32
 8009ad2:	60da      	str	r2, [r3, #12]
 8009ad4:	e007      	b.n	8009ae6 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0220 	orr.w	r2, r2, #32
 8009ae4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e006      	b.n	8009af8 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
  }
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	; 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d07c      	beq.n	8009c44 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d023      	beq.n	8009b9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f006 f8f8 	bl	800fd5c <HAL_CAN_TxMailbox0CompleteCallback>
 8009b6c:	e016      	b.n	8009b9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	f003 0304 	and.w	r3, r3, #4
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d004      	beq.n	8009b82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b80:	e00c      	b.n	8009b9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	f003 0308 	and.w	r3, r3, #8
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d004      	beq.n	8009b96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
 8009b94:	e002      	b.n	8009b9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f965 	bl	8009e66 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d024      	beq.n	8009bf0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f006 f8de 	bl	800fd7c <HAL_CAN_TxMailbox1CompleteCallback>
 8009bc0:	e016      	b.n	8009bf0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd4:	e00c      	b.n	8009bf0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
 8009be8:	e002      	b.n	8009bf0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f945 	bl	8009e7a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d024      	beq.n	8009c44 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f006 f8c4 	bl	800fd9c <HAL_CAN_TxMailbox2CompleteCallback>
 8009c14:	e016      	b.n	8009c44 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d004      	beq.n	8009c2a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
 8009c28:	e00c      	b.n	8009c44 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d004      	beq.n	8009c3e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3c:	e002      	b.n	8009c44 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f925 	bl	8009e8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	f003 0308 	and.w	r3, r3, #8
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00c      	beq.n	8009c68 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d007      	beq.n	8009c68 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2210      	movs	r2, #16
 8009c66:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	f003 0304 	and.w	r3, r3, #4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f003 0308 	and.w	r3, r3, #8
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2208      	movs	r2, #8
 8009c82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f90c 	bl	8009ea2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d009      	beq.n	8009ca8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f006 f88a 	bl	800fdbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00c      	beq.n	8009ccc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d007      	beq.n	8009ccc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2210      	movs	r2, #16
 8009cca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00b      	beq.n	8009cee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f003 0308 	and.w	r3, r3, #8
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f8ee 	bl	8009eca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	f003 0310 	and.w	r3, r3, #16
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d009      	beq.n	8009d0c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f8d5 	bl	8009eb6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00b      	beq.n	8009d2e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d006      	beq.n	8009d2e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2210      	movs	r2, #16
 8009d26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f8d8 	bl	8009ede <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	f003 0308 	and.w	r3, r3, #8
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d006      	beq.n	8009d50 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2208      	movs	r2, #8
 8009d48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8d1 	bl	8009ef2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d075      	beq.n	8009e46 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d06c      	beq.n	8009e3e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d008      	beq.n	8009d80 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	f043 0301 	orr.w	r3, r3, #1
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d008      	beq.n	8009d9c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	f043 0302 	orr.w	r3, r3, #2
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d008      	beq.n	8009db8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	f043 0304 	orr.w	r3, r3, #4
 8009db6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d03d      	beq.n	8009e3e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d038      	beq.n	8009e3e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dd2:	2b30      	cmp	r3, #48	; 0x30
 8009dd4:	d017      	beq.n	8009e06 <HAL_CAN_IRQHandler+0x302>
 8009dd6:	2b30      	cmp	r3, #48	; 0x30
 8009dd8:	d804      	bhi.n	8009de4 <HAL_CAN_IRQHandler+0x2e0>
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	d009      	beq.n	8009df2 <HAL_CAN_IRQHandler+0x2ee>
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	d00c      	beq.n	8009dfc <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009de2:	e024      	b.n	8009e2e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009de4:	2b50      	cmp	r3, #80	; 0x50
 8009de6:	d018      	beq.n	8009e1a <HAL_CAN_IRQHandler+0x316>
 8009de8:	2b60      	cmp	r3, #96	; 0x60
 8009dea:	d01b      	beq.n	8009e24 <HAL_CAN_IRQHandler+0x320>
 8009dec:	2b40      	cmp	r3, #64	; 0x40
 8009dee:	d00f      	beq.n	8009e10 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009df0:	e01d      	b.n	8009e2e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	f043 0308 	orr.w	r3, r3, #8
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dfa:	e018      	b.n	8009e2e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	f043 0310 	orr.w	r3, r3, #16
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e04:	e013      	b.n	8009e2e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	f043 0320 	orr.w	r3, r3, #32
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e0e:	e00e      	b.n	8009e2e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e18:	e009      	b.n	8009e2e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e22:	e004      	b.n	8009e2e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009e2c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	699a      	ldr	r2, [r3, #24]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e3c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2204      	movs	r2, #4
 8009e44:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d008      	beq.n	8009e5e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	431a      	orrs	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f854 	bl	8009f06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009e5e:	bf00      	nop
 8009e60:	3728      	adds	r7, #40	; 0x28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009efa:	bf00      	nop
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f2c:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <__NVIC_SetPriorityGrouping+0x44>)
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f38:	4013      	ands	r3, r2
 8009f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f4e:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <__NVIC_SetPriorityGrouping+0x44>)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	60d3      	str	r3, [r2, #12]
}
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	e000ed00 	.word	0xe000ed00

08009f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009f64:	b480      	push	{r7}
 8009f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f68:	4b04      	ldr	r3, [pc, #16]	; (8009f7c <__NVIC_GetPriorityGrouping+0x18>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	0a1b      	lsrs	r3, r3, #8
 8009f6e:	f003 0307 	and.w	r3, r3, #7
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	e000ed00 	.word	0xe000ed00

08009f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	db0b      	blt.n	8009faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	f003 021f 	and.w	r2, r3, #31
 8009f98:	4907      	ldr	r1, [pc, #28]	; (8009fb8 <__NVIC_EnableIRQ+0x38>)
 8009f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f9e:	095b      	lsrs	r3, r3, #5
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8009fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	e000e100 	.word	0xe000e100

08009fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	6039      	str	r1, [r7, #0]
 8009fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	db0a      	blt.n	8009fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	490c      	ldr	r1, [pc, #48]	; (800a008 <__NVIC_SetPriority+0x4c>)
 8009fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fda:	0112      	lsls	r2, r2, #4
 8009fdc:	b2d2      	uxtb	r2, r2
 8009fde:	440b      	add	r3, r1
 8009fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009fe4:	e00a      	b.n	8009ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	4908      	ldr	r1, [pc, #32]	; (800a00c <__NVIC_SetPriority+0x50>)
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	f003 030f 	and.w	r3, r3, #15
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	0112      	lsls	r2, r2, #4
 8009ff6:	b2d2      	uxtb	r2, r2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	761a      	strb	r2, [r3, #24]
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	e000e100 	.word	0xe000e100
 800a00c:	e000ed00 	.word	0xe000ed00

0800a010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a010:	b480      	push	{r7}
 800a012:	b089      	sub	sp, #36	; 0x24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	f1c3 0307 	rsb	r3, r3, #7
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	bf28      	it	cs
 800a02e:	2304      	movcs	r3, #4
 800a030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	3304      	adds	r3, #4
 800a036:	2b06      	cmp	r3, #6
 800a038:	d902      	bls.n	800a040 <NVIC_EncodePriority+0x30>
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	3b03      	subs	r3, #3
 800a03e:	e000      	b.n	800a042 <NVIC_EncodePriority+0x32>
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a044:	f04f 32ff 	mov.w	r2, #4294967295
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	43da      	mvns	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	401a      	ands	r2, r3
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a058:	f04f 31ff 	mov.w	r1, #4294967295
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	fa01 f303 	lsl.w	r3, r1, r3
 800a062:	43d9      	mvns	r1, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a068:	4313      	orrs	r3, r2
         );
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3724      	adds	r7, #36	; 0x24
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3b01      	subs	r3, #1
 800a084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a088:	d301      	bcc.n	800a08e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a08a:	2301      	movs	r3, #1
 800a08c:	e00f      	b.n	800a0ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a08e:	4a0a      	ldr	r2, [pc, #40]	; (800a0b8 <SysTick_Config+0x40>)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3b01      	subs	r3, #1
 800a094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a096:	210f      	movs	r1, #15
 800a098:	f04f 30ff 	mov.w	r0, #4294967295
 800a09c:	f7ff ff8e 	bl	8009fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0a0:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <SysTick_Config+0x40>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0a6:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <SysTick_Config+0x40>)
 800a0a8:	2207      	movs	r2, #7
 800a0aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	e000e010 	.word	0xe000e010

0800a0bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff ff29 	bl	8009f1c <__NVIC_SetPriorityGrouping>
}
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	4603      	mov	r3, r0
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
 800a0de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a0e4:	f7ff ff3e 	bl	8009f64 <__NVIC_GetPriorityGrouping>
 800a0e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	6978      	ldr	r0, [r7, #20]
 800a0f0:	f7ff ff8e 	bl	800a010 <NVIC_EncodePriority>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff ff5d 	bl	8009fbc <__NVIC_SetPriority>
}
 800a102:	bf00      	nop
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	4603      	mov	r3, r0
 800a112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff ff31 	bl	8009f80 <__NVIC_EnableIRQ>
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff ffa2 	bl	800a078 <SysTick_Config>
 800a134:	4603      	mov	r3, r0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a14c:	f7fe fe9a 	bl	8008e84 <HAL_GetTick>
 800a150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e099      	b.n	800a290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f022 0201 	bic.w	r2, r2, #1
 800a17a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a17c:	e00f      	b.n	800a19e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a17e:	f7fe fe81 	bl	8008e84 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b05      	cmp	r3, #5
 800a18a:	d908      	bls.n	800a19e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2220      	movs	r2, #32
 800a190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2203      	movs	r2, #3
 800a196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e078      	b.n	800a290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e8      	bne.n	800a17e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4b38      	ldr	r3, [pc, #224]	; (800a298 <HAL_DMA_Init+0x158>)
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d107      	bne.n	800a208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	4313      	orrs	r3, r2
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	4313      	orrs	r3, r2
 800a206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	f023 0307 	bic.w	r3, r3, #7
 800a21e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	4313      	orrs	r3, r2
 800a228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d117      	bne.n	800a262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	4313      	orrs	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00e      	beq.n	800a262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fa99 	bl	800a77c <DMA_CheckFifoParam>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d008      	beq.n	800a262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2240      	movs	r2, #64	; 0x40
 800a254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a25e:	2301      	movs	r3, #1
 800a260:	e016      	b.n	800a290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fa50 	bl	800a710 <DMA_CalcBaseAndBitshift>
 800a270:	4603      	mov	r3, r0
 800a272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a278:	223f      	movs	r2, #63	; 0x3f
 800a27a:	409a      	lsls	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	f010803f 	.word	0xf010803f

0800a29c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d101      	bne.n	800a2c2 <HAL_DMA_Start_IT+0x26>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	e048      	b.n	800a354 <HAL_DMA_Start_IT+0xb8>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d137      	bne.n	800a346 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	68b9      	ldr	r1, [r7, #8]
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 f9e2 	bl	800a6b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f4:	223f      	movs	r2, #63	; 0x3f
 800a2f6:	409a      	lsls	r2, r3
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0216 	orr.w	r2, r2, #22
 800a30a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	695a      	ldr	r2, [r3, #20]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a31a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	2b00      	cmp	r3, #0
 800a322:	d007      	beq.n	800a334 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0208 	orr.w	r2, r2, #8
 800a332:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f042 0201 	orr.w	r2, r2, #1
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	e005      	b.n	800a352 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a34e:	2302      	movs	r3, #2
 800a350:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d004      	beq.n	800a37a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2280      	movs	r2, #128	; 0x80
 800a374:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e00c      	b.n	800a394 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2205      	movs	r2, #5
 800a37e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 0201 	bic.w	r2, r2, #1
 800a390:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3ac:	4b92      	ldr	r3, [pc, #584]	; (800a5f8 <HAL_DMA_IRQHandler+0x258>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a92      	ldr	r2, [pc, #584]	; (800a5fc <HAL_DMA_IRQHandler+0x25c>)
 800a3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b6:	0a9b      	lsrs	r3, r3, #10
 800a3b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ca:	2208      	movs	r2, #8
 800a3cc:	409a      	lsls	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d01a      	beq.n	800a40c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d013      	beq.n	800a40c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0204 	bic.w	r2, r2, #4
 800a3f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	409a      	lsls	r2, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a404:	f043 0201 	orr.w	r2, r3, #1
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a410:	2201      	movs	r2, #1
 800a412:	409a      	lsls	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	4013      	ands	r3, r2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d012      	beq.n	800a442 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00b      	beq.n	800a442 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a42e:	2201      	movs	r2, #1
 800a430:	409a      	lsls	r2, r3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43a:	f043 0202 	orr.w	r2, r3, #2
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a446:	2204      	movs	r2, #4
 800a448:	409a      	lsls	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4013      	ands	r3, r2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d012      	beq.n	800a478 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0302 	and.w	r3, r3, #2
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a464:	2204      	movs	r2, #4
 800a466:	409a      	lsls	r2, r3
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a470:	f043 0204 	orr.w	r2, r3, #4
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a47c:	2210      	movs	r2, #16
 800a47e:	409a      	lsls	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4013      	ands	r3, r2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d043      	beq.n	800a510 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0308 	and.w	r3, r3, #8
 800a492:	2b00      	cmp	r3, #0
 800a494:	d03c      	beq.n	800a510 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a49a:	2210      	movs	r2, #16
 800a49c:	409a      	lsls	r2, r3
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d018      	beq.n	800a4e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d108      	bne.n	800a4d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d024      	beq.n	800a510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	4798      	blx	r3
 800a4ce:	e01f      	b.n	800a510 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01b      	beq.n	800a510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	4798      	blx	r3
 800a4e0:	e016      	b.n	800a510 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d107      	bne.n	800a500 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0208 	bic.w	r2, r2, #8
 800a4fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a514:	2220      	movs	r2, #32
 800a516:	409a      	lsls	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4013      	ands	r3, r2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 808e 	beq.w	800a63e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0310 	and.w	r3, r3, #16
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 8086 	beq.w	800a63e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a536:	2220      	movs	r2, #32
 800a538:	409a      	lsls	r2, r3
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b05      	cmp	r3, #5
 800a548:	d136      	bne.n	800a5b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0216 	bic.w	r2, r2, #22
 800a558:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	695a      	ldr	r2, [r3, #20]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a568:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d103      	bne.n	800a57a <HAL_DMA_IRQHandler+0x1da>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a576:	2b00      	cmp	r3, #0
 800a578:	d007      	beq.n	800a58a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0208 	bic.w	r2, r2, #8
 800a588:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58e:	223f      	movs	r2, #63	; 0x3f
 800a590:	409a      	lsls	r2, r3
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d07d      	beq.n	800a6aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	4798      	blx	r3
        }
        return;
 800a5b6:	e078      	b.n	800a6aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01c      	beq.n	800a600 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d108      	bne.n	800a5e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d030      	beq.n	800a63e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	4798      	blx	r3
 800a5e4:	e02b      	b.n	800a63e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d027      	beq.n	800a63e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
 800a5f6:	e022      	b.n	800a63e <HAL_DMA_IRQHandler+0x29e>
 800a5f8:	2000000c 	.word	0x2000000c
 800a5fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10f      	bne.n	800a62e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f022 0210 	bic.w	r2, r2, #16
 800a61c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a642:	2b00      	cmp	r3, #0
 800a644:	d032      	beq.n	800a6ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d022      	beq.n	800a698 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2205      	movs	r2, #5
 800a656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 0201 	bic.w	r2, r2, #1
 800a668:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	3301      	adds	r3, #1
 800a66e:	60bb      	str	r3, [r7, #8]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	429a      	cmp	r2, r3
 800a674:	d307      	bcc.n	800a686 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1f2      	bne.n	800a66a <HAL_DMA_IRQHandler+0x2ca>
 800a684:	e000      	b.n	800a688 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a686:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	4798      	blx	r3
 800a6a8:	e000      	b.n	800a6ac <HAL_DMA_IRQHandler+0x30c>
        return;
 800a6aa:	bf00      	nop
    }
  }
}
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop

0800a6b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a6d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b40      	cmp	r3, #64	; 0x40
 800a6e0:	d108      	bne.n	800a6f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a6f2:	e007      	b.n	800a704 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	60da      	str	r2, [r3, #12]
}
 800a704:	bf00      	nop
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	3b10      	subs	r3, #16
 800a720:	4a14      	ldr	r2, [pc, #80]	; (800a774 <DMA_CalcBaseAndBitshift+0x64>)
 800a722:	fba2 2303 	umull	r2, r3, r2, r3
 800a726:	091b      	lsrs	r3, r3, #4
 800a728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a72a:	4a13      	ldr	r2, [pc, #76]	; (800a778 <DMA_CalcBaseAndBitshift+0x68>)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4413      	add	r3, r2
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d909      	bls.n	800a752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a746:	f023 0303 	bic.w	r3, r3, #3
 800a74a:	1d1a      	adds	r2, r3, #4
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	659a      	str	r2, [r3, #88]	; 0x58
 800a750:	e007      	b.n	800a762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a766:	4618      	mov	r0, r3
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	aaaaaaab 	.word	0xaaaaaaab
 800a778:	08015ba0 	.word	0x08015ba0

0800a77c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d11f      	bne.n	800a7d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d855      	bhi.n	800a848 <DMA_CheckFifoParam+0xcc>
 800a79c:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <DMA_CheckFifoParam+0x28>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7b5 	.word	0x0800a7b5
 800a7a8:	0800a7c7 	.word	0x0800a7c7
 800a7ac:	0800a7b5 	.word	0x0800a7b5
 800a7b0:	0800a849 	.word	0x0800a849
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d045      	beq.n	800a84c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7c4:	e042      	b.n	800a84c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7ce:	d13f      	bne.n	800a850 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7d4:	e03c      	b.n	800a850 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7de:	d121      	bne.n	800a824 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d836      	bhi.n	800a854 <DMA_CheckFifoParam+0xd8>
 800a7e6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <DMA_CheckFifoParam+0x70>)
 800a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ec:	0800a7fd 	.word	0x0800a7fd
 800a7f0:	0800a803 	.word	0x0800a803
 800a7f4:	0800a7fd 	.word	0x0800a7fd
 800a7f8:	0800a815 	.word	0x0800a815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a800:	e02f      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d024      	beq.n	800a858 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a812:	e021      	b.n	800a858 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a81c:	d11e      	bne.n	800a85c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a822:	e01b      	b.n	800a85c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d902      	bls.n	800a830 <DMA_CheckFifoParam+0xb4>
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d003      	beq.n	800a836 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a82e:	e018      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
      break;
 800a834:	e015      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00e      	beq.n	800a860 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	73fb      	strb	r3, [r7, #15]
      break;
 800a846:	e00b      	b.n	800a860 <DMA_CheckFifoParam+0xe4>
      break;
 800a848:	bf00      	nop
 800a84a:	e00a      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      break;
 800a84c:	bf00      	nop
 800a84e:	e008      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      break;
 800a850:	bf00      	nop
 800a852:	e006      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      break;
 800a854:	bf00      	nop
 800a856:	e004      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      break;
 800a858:	bf00      	nop
 800a85a:	e002      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      break;   
 800a85c:	bf00      	nop
 800a85e:	e000      	b.n	800a862 <DMA_CheckFifoParam+0xe6>
      break;
 800a860:	bf00      	nop
    }
  } 
  
  return status; 
 800a862:	7bfb      	ldrb	r3, [r7, #15]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a882:	4b23      	ldr	r3, [pc, #140]	; (800a910 <HAL_FLASH_Program+0xa0>)
 800a884:	7e1b      	ldrb	r3, [r3, #24]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <HAL_FLASH_Program+0x1e>
 800a88a:	2302      	movs	r3, #2
 800a88c:	e03b      	b.n	800a906 <HAL_FLASH_Program+0x96>
 800a88e:	4b20      	ldr	r3, [pc, #128]	; (800a910 <HAL_FLASH_Program+0xa0>)
 800a890:	2201      	movs	r2, #1
 800a892:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a894:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a898:	f000 f870 	bl	800a97c <FLASH_WaitForLastOperation>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d12b      	bne.n	800a8fe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d105      	bne.n	800a8b8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a8ac:	783b      	ldrb	r3, [r7, #0]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	68b8      	ldr	r0, [r7, #8]
 800a8b2:	f000 f917 	bl	800aae4 <FLASH_Program_Byte>
 800a8b6:	e016      	b.n	800a8e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d105      	bne.n	800a8ca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a8be:	883b      	ldrh	r3, [r7, #0]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	68b8      	ldr	r0, [r7, #8]
 800a8c4:	f000 f8ea 	bl	800aa9c <FLASH_Program_HalfWord>
 800a8c8:	e00d      	b.n	800a8e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d105      	bne.n	800a8dc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	68b8      	ldr	r0, [r7, #8]
 800a8d6:	f000 f8bf 	bl	800aa58 <FLASH_Program_Word>
 800a8da:	e004      	b.n	800a8e6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e0:	68b8      	ldr	r0, [r7, #8]
 800a8e2:	f000 f88b 	bl	800a9fc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8ea:	f000 f847 	bl	800a97c <FLASH_WaitForLastOperation>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a8f2:	4b08      	ldr	r3, [pc, #32]	; (800a914 <HAL_FLASH_Program+0xa4>)
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	4a07      	ldr	r2, [pc, #28]	; (800a914 <HAL_FLASH_Program+0xa4>)
 800a8f8:	f023 0301 	bic.w	r3, r3, #1
 800a8fc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a8fe:	4b04      	ldr	r3, [pc, #16]	; (800a910 <HAL_FLASH_Program+0xa0>)
 800a900:	2200      	movs	r2, #0
 800a902:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a904:	7dfb      	ldrb	r3, [r7, #23]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	200042b8 	.word	0x200042b8
 800a914:	40023c00 	.word	0x40023c00

0800a918 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a922:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <HAL_FLASH_Unlock+0x38>)
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	da0b      	bge.n	800a942 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a92a:	4b09      	ldr	r3, [pc, #36]	; (800a950 <HAL_FLASH_Unlock+0x38>)
 800a92c:	4a09      	ldr	r2, [pc, #36]	; (800a954 <HAL_FLASH_Unlock+0x3c>)
 800a92e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a930:	4b07      	ldr	r3, [pc, #28]	; (800a950 <HAL_FLASH_Unlock+0x38>)
 800a932:	4a09      	ldr	r2, [pc, #36]	; (800a958 <HAL_FLASH_Unlock+0x40>)
 800a934:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a936:	4b06      	ldr	r3, [pc, #24]	; (800a950 <HAL_FLASH_Unlock+0x38>)
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da01      	bge.n	800a942 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a942:	79fb      	ldrb	r3, [r7, #7]
}
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	40023c00 	.word	0x40023c00
 800a954:	45670123 	.word	0x45670123
 800a958:	cdef89ab 	.word	0xcdef89ab

0800a95c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a960:	4b05      	ldr	r3, [pc, #20]	; (800a978 <HAL_FLASH_Lock+0x1c>)
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	4a04      	ldr	r2, [pc, #16]	; (800a978 <HAL_FLASH_Lock+0x1c>)
 800a966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a96a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	40023c00 	.word	0x40023c00

0800a97c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a988:	4b1a      	ldr	r3, [pc, #104]	; (800a9f4 <FLASH_WaitForLastOperation+0x78>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a98e:	f7fe fa79 	bl	8008e84 <HAL_GetTick>
 800a992:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a994:	e010      	b.n	800a9b8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99c:	d00c      	beq.n	800a9b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <FLASH_WaitForLastOperation+0x38>
 800a9a4:	f7fe fa6e 	bl	8008e84 <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d201      	bcs.n	800a9b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e019      	b.n	800a9ec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	; (800a9f8 <FLASH_WaitForLastOperation+0x7c>)
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e8      	bne.n	800a996 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a9c4:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <FLASH_WaitForLastOperation+0x7c>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a9d0:	4b09      	ldr	r3, [pc, #36]	; (800a9f8 <FLASH_WaitForLastOperation+0x7c>)
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a9d6:	4b08      	ldr	r3, [pc, #32]	; (800a9f8 <FLASH_WaitForLastOperation+0x7c>)
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a9e2:	f000 f8a1 	bl	800ab28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e000      	b.n	800a9ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
  
}  
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	200042b8 	.word	0x200042b8
 800a9f8:	40023c00 	.word	0x40023c00

0800a9fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a9fc:	b490      	push	{r4, r7}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa08:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <FLASH_Program_DoubleWord+0x58>)
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	4a11      	ldr	r2, [pc, #68]	; (800aa54 <FLASH_Program_DoubleWord+0x58>)
 800aa0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <FLASH_Program_DoubleWord+0x58>)
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	4a0e      	ldr	r2, [pc, #56]	; (800aa54 <FLASH_Program_DoubleWord+0x58>)
 800aa1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aa1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa20:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <FLASH_Program_DoubleWord+0x58>)
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	4a0b      	ldr	r2, [pc, #44]	; (800aa54 <FLASH_Program_DoubleWord+0x58>)
 800aa26:	f043 0301 	orr.w	r3, r3, #1
 800aa2a:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800aa32:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	f04f 0400 	mov.w	r4, #0
 800aa3e:	0013      	movs	r3, r2
 800aa40:	2400      	movs	r4, #0
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	3204      	adds	r2, #4
 800aa46:	6013      	str	r3, [r2, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bc90      	pop	{r4, r7}
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	40023c00 	.word	0x40023c00

0800aa58 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa62:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <FLASH_Program_Word+0x40>)
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	4a0c      	ldr	r2, [pc, #48]	; (800aa98 <FLASH_Program_Word+0x40>)
 800aa68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800aa6e:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <FLASH_Program_Word+0x40>)
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	4a09      	ldr	r2, [pc, #36]	; (800aa98 <FLASH_Program_Word+0x40>)
 800aa74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa7a:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <FLASH_Program_Word+0x40>)
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	4a06      	ldr	r2, [pc, #24]	; (800aa98 <FLASH_Program_Word+0x40>)
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	601a      	str	r2, [r3, #0]
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	40023c00 	.word	0x40023c00

0800aa9c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aaa8:	4b0d      	ldr	r3, [pc, #52]	; (800aae0 <FLASH_Program_HalfWord+0x44>)
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	4a0c      	ldr	r2, [pc, #48]	; (800aae0 <FLASH_Program_HalfWord+0x44>)
 800aaae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aab2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800aab4:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <FLASH_Program_HalfWord+0x44>)
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <FLASH_Program_HalfWord+0x44>)
 800aaba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aabe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <FLASH_Program_HalfWord+0x44>)
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	4a06      	ldr	r2, [pc, #24]	; (800aae0 <FLASH_Program_HalfWord+0x44>)
 800aac6:	f043 0301 	orr.w	r3, r3, #1
 800aaca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	887a      	ldrh	r2, [r7, #2]
 800aad0:	801a      	strh	r2, [r3, #0]
}
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	40023c00 	.word	0x40023c00

0800aae4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aaf0:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <FLASH_Program_Byte+0x40>)
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	4a0b      	ldr	r2, [pc, #44]	; (800ab24 <FLASH_Program_Byte+0x40>)
 800aaf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aafa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800aafc:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <FLASH_Program_Byte+0x40>)
 800aafe:	4a09      	ldr	r2, [pc, #36]	; (800ab24 <FLASH_Program_Byte+0x40>)
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab04:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <FLASH_Program_Byte+0x40>)
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	4a06      	ldr	r2, [pc, #24]	; (800ab24 <FLASH_Program_Byte+0x40>)
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	78fa      	ldrb	r2, [r7, #3]
 800ab14:	701a      	strb	r2, [r3, #0]
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	40023c00 	.word	0x40023c00

0800ab28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ab28:	b480      	push	{r7}
 800ab2a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ab2c:	4b2f      	ldr	r3, [pc, #188]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f003 0310 	and.w	r3, r3, #16
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d008      	beq.n	800ab4a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ab38:	4b2d      	ldr	r3, [pc, #180]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	f043 0310 	orr.w	r3, r3, #16
 800ab40:	4a2b      	ldr	r2, [pc, #172]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab42:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ab44:	4b29      	ldr	r3, [pc, #164]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800ab46:	2210      	movs	r2, #16
 800ab48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ab4a:	4b28      	ldr	r3, [pc, #160]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ab56:	4b26      	ldr	r3, [pc, #152]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	f043 0308 	orr.w	r3, r3, #8
 800ab5e:	4a24      	ldr	r2, [pc, #144]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab60:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ab62:	4b22      	ldr	r3, [pc, #136]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800ab64:	2220      	movs	r2, #32
 800ab66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ab68:	4b20      	ldr	r3, [pc, #128]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d008      	beq.n	800ab86 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ab74:	4b1e      	ldr	r3, [pc, #120]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	f043 0304 	orr.w	r3, r3, #4
 800ab7c:	4a1c      	ldr	r2, [pc, #112]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ab80:	4b1a      	ldr	r3, [pc, #104]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800ab82:	2240      	movs	r2, #64	; 0x40
 800ab84:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ab86:	4b19      	ldr	r3, [pc, #100]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d008      	beq.n	800aba4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ab92:	4b17      	ldr	r3, [pc, #92]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	f043 0302 	orr.w	r3, r3, #2
 800ab9a:	4a15      	ldr	r2, [pc, #84]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800ab9c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ab9e:	4b13      	ldr	r3, [pc, #76]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800aba0:	2280      	movs	r2, #128	; 0x80
 800aba2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800aba4:	4b11      	ldr	r3, [pc, #68]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abac:	2b00      	cmp	r3, #0
 800abae:	d009      	beq.n	800abc4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800abb0:	4b0f      	ldr	r3, [pc, #60]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800abb2:	69db      	ldr	r3, [r3, #28]
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	4a0d      	ldr	r2, [pc, #52]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800abba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800abbc:	4b0b      	ldr	r3, [pc, #44]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800abbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abc2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800abc4:	4b09      	ldr	r3, [pc, #36]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d008      	beq.n	800abe2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	f043 0320 	orr.w	r3, r3, #32
 800abd8:	4a05      	ldr	r2, [pc, #20]	; (800abf0 <FLASH_SetErrorCode+0xc8>)
 800abda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800abdc:	4b03      	ldr	r3, [pc, #12]	; (800abec <FLASH_SetErrorCode+0xc4>)
 800abde:	2202      	movs	r2, #2
 800abe0:	60da      	str	r2, [r3, #12]
  }
}
 800abe2:	bf00      	nop
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	40023c00 	.word	0x40023c00
 800abf0:	200042b8 	.word	0x200042b8

0800abf4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ac02:	2300      	movs	r3, #0
 800ac04:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ac06:	4b31      	ldr	r3, [pc, #196]	; (800accc <HAL_FLASHEx_Erase+0xd8>)
 800ac08:	7e1b      	ldrb	r3, [r3, #24]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d101      	bne.n	800ac12 <HAL_FLASHEx_Erase+0x1e>
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e058      	b.n	800acc4 <HAL_FLASHEx_Erase+0xd0>
 800ac12:	4b2e      	ldr	r3, [pc, #184]	; (800accc <HAL_FLASHEx_Erase+0xd8>)
 800ac14:	2201      	movs	r2, #1
 800ac16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac18:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac1c:	f7ff feae 	bl	800a97c <FLASH_WaitForLastOperation>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d148      	bne.n	800acbc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac30:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d115      	bne.n	800ac66 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	4619      	mov	r1, r3
 800ac46:	4610      	mov	r0, r2
 800ac48:	f000 f844 	bl	800acd4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac50:	f7ff fe94 	bl	800a97c <FLASH_WaitForLastOperation>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ac58:	4b1d      	ldr	r3, [pc, #116]	; (800acd0 <HAL_FLASHEx_Erase+0xdc>)
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	4a1c      	ldr	r2, [pc, #112]	; (800acd0 <HAL_FLASHEx_Erase+0xdc>)
 800ac5e:	f023 0304 	bic.w	r3, r3, #4
 800ac62:	6113      	str	r3, [r2, #16]
 800ac64:	e028      	b.n	800acb8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	60bb      	str	r3, [r7, #8]
 800ac6c:	e01c      	b.n	800aca8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	4619      	mov	r1, r3
 800ac76:	68b8      	ldr	r0, [r7, #8]
 800ac78:	f000 f850 	bl	800ad1c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac80:	f7ff fe7c 	bl	800a97c <FLASH_WaitForLastOperation>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ac88:	4b11      	ldr	r3, [pc, #68]	; (800acd0 <HAL_FLASHEx_Erase+0xdc>)
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	4a10      	ldr	r2, [pc, #64]	; (800acd0 <HAL_FLASHEx_Erase+0xdc>)
 800ac8e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ac92:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	601a      	str	r2, [r3, #0]
          break;
 800aca0:	e00a      	b.n	800acb8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	3301      	adds	r3, #1
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	4413      	add	r3, r2
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d3da      	bcc.n	800ac6e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800acb8:	f000 f878 	bl	800adac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800acbc:	4b03      	ldr	r3, [pc, #12]	; (800accc <HAL_FLASHEx_Erase+0xd8>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	761a      	strb	r2, [r3, #24]

  return status;
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	200042b8 	.word	0x200042b8
 800acd0:	40023c00 	.word	0x40023c00

0800acd4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ace0:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <FLASH_MassErase+0x44>)
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	4a0c      	ldr	r2, [pc, #48]	; (800ad18 <FLASH_MassErase+0x44>)
 800ace6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <FLASH_MassErase+0x44>)
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	4a09      	ldr	r2, [pc, #36]	; (800ad18 <FLASH_MassErase+0x44>)
 800acf2:	f043 0304 	orr.w	r3, r3, #4
 800acf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800acf8:	4b07      	ldr	r3, [pc, #28]	; (800ad18 <FLASH_MassErase+0x44>)
 800acfa:	691a      	ldr	r2, [r3, #16]
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	021b      	lsls	r3, r3, #8
 800ad00:	4313      	orrs	r3, r2
 800ad02:	4a05      	ldr	r2, [pc, #20]	; (800ad18 <FLASH_MassErase+0x44>)
 800ad04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad08:	6113      	str	r3, [r2, #16]
}
 800ad0a:	bf00      	nop
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	40023c00 	.word	0x40023c00

0800ad1c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60fb      	str	r3, [r7, #12]
 800ad36:	e010      	b.n	800ad5a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ad38:	78fb      	ldrb	r3, [r7, #3]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d103      	bne.n	800ad46 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ad3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	e009      	b.n	800ad5a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d103      	bne.n	800ad54 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ad4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	e002      	b.n	800ad5a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ad54:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad58:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad5a:	4b13      	ldr	r3, [pc, #76]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	4a12      	ldr	r2, [pc, #72]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ad66:	4b10      	ldr	r3, [pc, #64]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad68:	691a      	ldr	r2, [r3, #16]
 800ad6a:	490f      	ldr	r1, [pc, #60]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ad72:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	4a0c      	ldr	r2, [pc, #48]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ad7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ad7e:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad80:	691a      	ldr	r2, [r3, #16]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	00db      	lsls	r3, r3, #3
 800ad86:	4313      	orrs	r3, r2
 800ad88:	4a07      	ldr	r2, [pc, #28]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad8a:	f043 0302 	orr.w	r3, r3, #2
 800ad8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ad90:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	4a04      	ldr	r2, [pc, #16]	; (800ada8 <FLASH_Erase_Sector+0x8c>)
 800ad96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad9a:	6113      	str	r3, [r2, #16]
}
 800ad9c:	bf00      	nop
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	40023c00 	.word	0x40023c00

0800adac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800adb0:	4b20      	ldr	r3, [pc, #128]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d017      	beq.n	800adec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800adbc:	4b1d      	ldr	r3, [pc, #116]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a1c      	ldr	r2, [pc, #112]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adc6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800adc8:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	4b17      	ldr	r3, [pc, #92]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a16      	ldr	r2, [pc, #88]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adde:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ade0:	4b14      	ldr	r3, [pc, #80]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a13      	ldr	r2, [pc, #76]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ade6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adea:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800adec:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d017      	beq.n	800ae28 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800adf8:	4b0e      	ldr	r3, [pc, #56]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a0d      	ldr	r2, [pc, #52]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800adfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae02:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ae04:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ae0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	4b08      	ldr	r3, [pc, #32]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a07      	ldr	r2, [pc, #28]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ae16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae1a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ae1c:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a04      	ldr	r2, [pc, #16]	; (800ae34 <FLASH_FlushCaches+0x88>)
 800ae22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae26:	6013      	str	r3, [r2, #0]
  }
}
 800ae28:	bf00      	nop
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40023c00 	.word	0x40023c00

0800ae38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b089      	sub	sp, #36	; 0x24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae4e:	2300      	movs	r3, #0
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	e165      	b.n	800b120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae54:	2201      	movs	r2, #1
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4013      	ands	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	f040 8154 	bne.w	800b11a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d003      	beq.n	800ae82 <HAL_GPIO_Init+0x4a>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	2b12      	cmp	r3, #18
 800ae80:	d123      	bne.n	800aeca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	08da      	lsrs	r2, r3, #3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3208      	adds	r2, #8
 800ae8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	220f      	movs	r2, #15
 800ae9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9e:	43db      	mvns	r3, r3
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	4013      	ands	r3, r2
 800aea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	691a      	ldr	r2, [r3, #16]
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	f003 0307 	and.w	r3, r3, #7
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	08da      	lsrs	r2, r3, #3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3208      	adds	r2, #8
 800aec4:	69b9      	ldr	r1, [r7, #24]
 800aec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	2203      	movs	r2, #3
 800aed6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeda:	43db      	mvns	r3, r3
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	4013      	ands	r3, r2
 800aee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f003 0203 	and.w	r2, r3, #3
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	005b      	lsls	r3, r3, #1
 800aeee:	fa02 f303 	lsl.w	r3, r2, r3
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d00b      	beq.n	800af1e <HAL_GPIO_Init+0xe6>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d007      	beq.n	800af1e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af12:	2b11      	cmp	r3, #17
 800af14:	d003      	beq.n	800af1e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	2b12      	cmp	r3, #18
 800af1c:	d130      	bne.n	800af80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	2203      	movs	r2, #3
 800af2a:	fa02 f303 	lsl.w	r3, r2, r3
 800af2e:	43db      	mvns	r3, r3
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	4013      	ands	r3, r2
 800af34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	68da      	ldr	r2, [r3, #12]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	fa02 f303 	lsl.w	r3, r2, r3
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	4313      	orrs	r3, r2
 800af46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af54:	2201      	movs	r2, #1
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	fa02 f303 	lsl.w	r3, r2, r3
 800af5c:	43db      	mvns	r3, r3
 800af5e:	69ba      	ldr	r2, [r7, #24]
 800af60:	4013      	ands	r3, r2
 800af62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	091b      	lsrs	r3, r3, #4
 800af6a:	f003 0201 	and.w	r2, r3, #1
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	fa02 f303 	lsl.w	r3, r2, r3
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	4313      	orrs	r3, r2
 800af78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	69ba      	ldr	r2, [r7, #24]
 800af7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	2203      	movs	r2, #3
 800af8c:	fa02 f303 	lsl.w	r3, r2, r3
 800af90:	43db      	mvns	r3, r3
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	4013      	ands	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	fa02 f303 	lsl.w	r3, r2, r3
 800afa4:	69ba      	ldr	r2, [r7, #24]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 80ae 	beq.w	800b11a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	4b5c      	ldr	r3, [pc, #368]	; (800b134 <HAL_GPIO_Init+0x2fc>)
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	4a5b      	ldr	r2, [pc, #364]	; (800b134 <HAL_GPIO_Init+0x2fc>)
 800afc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afcc:	6453      	str	r3, [r2, #68]	; 0x44
 800afce:	4b59      	ldr	r3, [pc, #356]	; (800b134 <HAL_GPIO_Init+0x2fc>)
 800afd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800afda:	4a57      	ldr	r2, [pc, #348]	; (800b138 <HAL_GPIO_Init+0x300>)
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	089b      	lsrs	r3, r3, #2
 800afe0:	3302      	adds	r3, #2
 800afe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f003 0303 	and.w	r3, r3, #3
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	220f      	movs	r2, #15
 800aff2:	fa02 f303 	lsl.w	r3, r2, r3
 800aff6:	43db      	mvns	r3, r3
 800aff8:	69ba      	ldr	r2, [r7, #24]
 800affa:	4013      	ands	r3, r2
 800affc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a4e      	ldr	r2, [pc, #312]	; (800b13c <HAL_GPIO_Init+0x304>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d025      	beq.n	800b052 <HAL_GPIO_Init+0x21a>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a4d      	ldr	r2, [pc, #308]	; (800b140 <HAL_GPIO_Init+0x308>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d01f      	beq.n	800b04e <HAL_GPIO_Init+0x216>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a4c      	ldr	r2, [pc, #304]	; (800b144 <HAL_GPIO_Init+0x30c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d019      	beq.n	800b04a <HAL_GPIO_Init+0x212>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a4b      	ldr	r2, [pc, #300]	; (800b148 <HAL_GPIO_Init+0x310>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d013      	beq.n	800b046 <HAL_GPIO_Init+0x20e>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a4a      	ldr	r2, [pc, #296]	; (800b14c <HAL_GPIO_Init+0x314>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00d      	beq.n	800b042 <HAL_GPIO_Init+0x20a>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a49      	ldr	r2, [pc, #292]	; (800b150 <HAL_GPIO_Init+0x318>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d007      	beq.n	800b03e <HAL_GPIO_Init+0x206>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a48      	ldr	r2, [pc, #288]	; (800b154 <HAL_GPIO_Init+0x31c>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d101      	bne.n	800b03a <HAL_GPIO_Init+0x202>
 800b036:	2306      	movs	r3, #6
 800b038:	e00c      	b.n	800b054 <HAL_GPIO_Init+0x21c>
 800b03a:	2307      	movs	r3, #7
 800b03c:	e00a      	b.n	800b054 <HAL_GPIO_Init+0x21c>
 800b03e:	2305      	movs	r3, #5
 800b040:	e008      	b.n	800b054 <HAL_GPIO_Init+0x21c>
 800b042:	2304      	movs	r3, #4
 800b044:	e006      	b.n	800b054 <HAL_GPIO_Init+0x21c>
 800b046:	2303      	movs	r3, #3
 800b048:	e004      	b.n	800b054 <HAL_GPIO_Init+0x21c>
 800b04a:	2302      	movs	r3, #2
 800b04c:	e002      	b.n	800b054 <HAL_GPIO_Init+0x21c>
 800b04e:	2301      	movs	r3, #1
 800b050:	e000      	b.n	800b054 <HAL_GPIO_Init+0x21c>
 800b052:	2300      	movs	r3, #0
 800b054:	69fa      	ldr	r2, [r7, #28]
 800b056:	f002 0203 	and.w	r2, r2, #3
 800b05a:	0092      	lsls	r2, r2, #2
 800b05c:	4093      	lsls	r3, r2
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	4313      	orrs	r3, r2
 800b062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b064:	4934      	ldr	r1, [pc, #208]	; (800b138 <HAL_GPIO_Init+0x300>)
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	089b      	lsrs	r3, r3, #2
 800b06a:	3302      	adds	r3, #2
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b072:	4b39      	ldr	r3, [pc, #228]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	43db      	mvns	r3, r3
 800b07c:	69ba      	ldr	r2, [r7, #24]
 800b07e:	4013      	ands	r3, r2
 800b080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b08e:	69ba      	ldr	r2, [r7, #24]
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	4313      	orrs	r3, r2
 800b094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b096:	4a30      	ldr	r2, [pc, #192]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b09c:	4b2e      	ldr	r3, [pc, #184]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	43db      	mvns	r3, r3
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b0c0:	4a25      	ldr	r2, [pc, #148]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b0c6:	4b24      	ldr	r3, [pc, #144]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	43db      	mvns	r3, r3
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b0ea:	4a1b      	ldr	r2, [pc, #108]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b0f0:	4b19      	ldr	r3, [pc, #100]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	43db      	mvns	r3, r3
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	4313      	orrs	r3, r2
 800b112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b114:	4a10      	ldr	r2, [pc, #64]	; (800b158 <HAL_GPIO_Init+0x320>)
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	3301      	adds	r3, #1
 800b11e:	61fb      	str	r3, [r7, #28]
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	2b0f      	cmp	r3, #15
 800b124:	f67f ae96 	bls.w	800ae54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b128:	bf00      	nop
 800b12a:	3724      	adds	r7, #36	; 0x24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	40023800 	.word	0x40023800
 800b138:	40013800 	.word	0x40013800
 800b13c:	40020000 	.word	0x40020000
 800b140:	40020400 	.word	0x40020400
 800b144:	40020800 	.word	0x40020800
 800b148:	40020c00 	.word	0x40020c00
 800b14c:	40021000 	.word	0x40021000
 800b150:	40021400 	.word	0x40021400
 800b154:	40021800 	.word	0x40021800
 800b158:	40013c00 	.word	0x40013c00

0800b15c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	887b      	ldrh	r3, [r7, #2]
 800b16e:	4013      	ands	r3, r2
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b174:	2301      	movs	r3, #1
 800b176:	73fb      	strb	r3, [r7, #15]
 800b178:	e001      	b.n	800b17e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	807b      	strh	r3, [r7, #2]
 800b198:	4613      	mov	r3, r2
 800b19a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b19c:	787b      	ldrb	r3, [r7, #1]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b1a2:	887a      	ldrh	r2, [r7, #2]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b1a8:	e003      	b.n	800b1b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b1aa:	887b      	ldrh	r3, [r7, #2]
 800b1ac:	041a      	lsls	r2, r3, #16
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	619a      	str	r2, [r3, #24]
}
 800b1b2:	bf00      	nop
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e0ca      	b.n	800b36a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b1d4:	4b67      	ldr	r3, [pc, #412]	; (800b374 <HAL_RCC_ClockConfig+0x1b4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 030f 	and.w	r3, r3, #15
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d90c      	bls.n	800b1fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1e2:	4b64      	ldr	r3, [pc, #400]	; (800b374 <HAL_RCC_ClockConfig+0x1b4>)
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ea:	4b62      	ldr	r3, [pc, #392]	; (800b374 <HAL_RCC_ClockConfig+0x1b4>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 030f 	and.w	r3, r3, #15
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d001      	beq.n	800b1fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e0b6      	b.n	800b36a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d020      	beq.n	800b24a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b214:	4b58      	ldr	r3, [pc, #352]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	4a57      	ldr	r2, [pc, #348]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b21a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b21e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f003 0308 	and.w	r3, r3, #8
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d005      	beq.n	800b238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b22c:	4b52      	ldr	r3, [pc, #328]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	4a51      	ldr	r2, [pc, #324]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b238:	4b4f      	ldr	r3, [pc, #316]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	494c      	ldr	r1, [pc, #304]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b246:	4313      	orrs	r3, r2
 800b248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	d044      	beq.n	800b2e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d107      	bne.n	800b26e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b25e:	4b46      	ldr	r3, [pc, #280]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d119      	bne.n	800b29e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e07d      	b.n	800b36a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b02      	cmp	r3, #2
 800b274:	d003      	beq.n	800b27e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d107      	bne.n	800b28e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b27e:	4b3e      	ldr	r3, [pc, #248]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e06d      	b.n	800b36a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b28e:	4b3a      	ldr	r3, [pc, #232]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e065      	b.n	800b36a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b29e:	4b36      	ldr	r3, [pc, #216]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f023 0203 	bic.w	r2, r3, #3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	4933      	ldr	r1, [pc, #204]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b2b0:	f7fd fde8 	bl	8008e84 <HAL_GetTick>
 800b2b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2b6:	e00a      	b.n	800b2ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2b8:	f7fd fde4 	bl	8008e84 <HAL_GetTick>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d901      	bls.n	800b2ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e04d      	b.n	800b36a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2ce:	4b2a      	ldr	r3, [pc, #168]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f003 020c 	and.w	r2, r3, #12
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d1eb      	bne.n	800b2b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b2e0:	4b24      	ldr	r3, [pc, #144]	; (800b374 <HAL_RCC_ClockConfig+0x1b4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 030f 	and.w	r3, r3, #15
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d20c      	bcs.n	800b308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2ee:	4b21      	ldr	r3, [pc, #132]	; (800b374 <HAL_RCC_ClockConfig+0x1b4>)
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	b2d2      	uxtb	r2, r2
 800b2f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2f6:	4b1f      	ldr	r3, [pc, #124]	; (800b374 <HAL_RCC_ClockConfig+0x1b4>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 030f 	and.w	r3, r3, #15
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d001      	beq.n	800b308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e030      	b.n	800b36a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b00      	cmp	r3, #0
 800b312:	d008      	beq.n	800b326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b314:	4b18      	ldr	r3, [pc, #96]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	4915      	ldr	r1, [pc, #84]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b322:	4313      	orrs	r3, r2
 800b324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0308 	and.w	r3, r3, #8
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d009      	beq.n	800b346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b332:	4b11      	ldr	r3, [pc, #68]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	490d      	ldr	r1, [pc, #52]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b342:	4313      	orrs	r3, r2
 800b344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b346:	f000 f851 	bl	800b3ec <HAL_RCC_GetSysClockFreq>
 800b34a:	4601      	mov	r1, r0
 800b34c:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <HAL_RCC_ClockConfig+0x1b8>)
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	091b      	lsrs	r3, r3, #4
 800b352:	f003 030f 	and.w	r3, r3, #15
 800b356:	4a09      	ldr	r2, [pc, #36]	; (800b37c <HAL_RCC_ClockConfig+0x1bc>)
 800b358:	5cd3      	ldrb	r3, [r2, r3]
 800b35a:	fa21 f303 	lsr.w	r3, r1, r3
 800b35e:	4a08      	ldr	r2, [pc, #32]	; (800b380 <HAL_RCC_ClockConfig+0x1c0>)
 800b360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b362:	2000      	movs	r0, #0
 800b364:	f7fd fd4a 	bl	8008dfc <HAL_InitTick>

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	40023c00 	.word	0x40023c00
 800b378:	40023800 	.word	0x40023800
 800b37c:	08029460 	.word	0x08029460
 800b380:	2000000c 	.word	0x2000000c

0800b384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b384:	b480      	push	{r7}
 800b386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b388:	4b03      	ldr	r3, [pc, #12]	; (800b398 <HAL_RCC_GetHCLKFreq+0x14>)
 800b38a:	681b      	ldr	r3, [r3, #0]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	2000000c 	.word	0x2000000c

0800b39c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b3a0:	f7ff fff0 	bl	800b384 <HAL_RCC_GetHCLKFreq>
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	0a9b      	lsrs	r3, r3, #10
 800b3ac:	f003 0307 	and.w	r3, r3, #7
 800b3b0:	4a03      	ldr	r2, [pc, #12]	; (800b3c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b3b2:	5cd3      	ldrb	r3, [r2, r3]
 800b3b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	40023800 	.word	0x40023800
 800b3c0:	08029470 	.word	0x08029470

0800b3c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b3c8:	f7ff ffdc 	bl	800b384 <HAL_RCC_GetHCLKFreq>
 800b3cc:	4601      	mov	r1, r0
 800b3ce:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	0b5b      	lsrs	r3, r3, #13
 800b3d4:	f003 0307 	and.w	r3, r3, #7
 800b3d8:	4a03      	ldr	r2, [pc, #12]	; (800b3e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3da:	5cd3      	ldrb	r3, [r2, r3]
 800b3dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	40023800 	.word	0x40023800
 800b3e8:	08029470 	.word	0x08029470

0800b3ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b406:	4bc6      	ldr	r3, [pc, #792]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f003 030c 	and.w	r3, r3, #12
 800b40e:	2b0c      	cmp	r3, #12
 800b410:	f200 817e 	bhi.w	800b710 <HAL_RCC_GetSysClockFreq+0x324>
 800b414:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <HAL_RCC_GetSysClockFreq+0x30>)
 800b416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41a:	bf00      	nop
 800b41c:	0800b451 	.word	0x0800b451
 800b420:	0800b711 	.word	0x0800b711
 800b424:	0800b711 	.word	0x0800b711
 800b428:	0800b711 	.word	0x0800b711
 800b42c:	0800b457 	.word	0x0800b457
 800b430:	0800b711 	.word	0x0800b711
 800b434:	0800b711 	.word	0x0800b711
 800b438:	0800b711 	.word	0x0800b711
 800b43c:	0800b45d 	.word	0x0800b45d
 800b440:	0800b711 	.word	0x0800b711
 800b444:	0800b711 	.word	0x0800b711
 800b448:	0800b711 	.word	0x0800b711
 800b44c:	0800b5b9 	.word	0x0800b5b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b450:	4bb4      	ldr	r3, [pc, #720]	; (800b724 <HAL_RCC_GetSysClockFreq+0x338>)
 800b452:	613b      	str	r3, [r7, #16]
       break;
 800b454:	e15f      	b.n	800b716 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b456:	4bb4      	ldr	r3, [pc, #720]	; (800b728 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b458:	613b      	str	r3, [r7, #16]
      break;
 800b45a:	e15c      	b.n	800b716 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b45c:	4bb0      	ldr	r3, [pc, #704]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b464:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b466:	4bae      	ldr	r3, [pc, #696]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d04a      	beq.n	800b508 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b472:	4bab      	ldr	r3, [pc, #684]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	099b      	lsrs	r3, r3, #6
 800b478:	f04f 0400 	mov.w	r4, #0
 800b47c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b480:	f04f 0200 	mov.w	r2, #0
 800b484:	ea03 0501 	and.w	r5, r3, r1
 800b488:	ea04 0602 	and.w	r6, r4, r2
 800b48c:	4629      	mov	r1, r5
 800b48e:	4632      	mov	r2, r6
 800b490:	f04f 0300 	mov.w	r3, #0
 800b494:	f04f 0400 	mov.w	r4, #0
 800b498:	0154      	lsls	r4, r2, #5
 800b49a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b49e:	014b      	lsls	r3, r1, #5
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	1b49      	subs	r1, r1, r5
 800b4a6:	eb62 0206 	sbc.w	r2, r2, r6
 800b4aa:	f04f 0300 	mov.w	r3, #0
 800b4ae:	f04f 0400 	mov.w	r4, #0
 800b4b2:	0194      	lsls	r4, r2, #6
 800b4b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b4b8:	018b      	lsls	r3, r1, #6
 800b4ba:	1a5b      	subs	r3, r3, r1
 800b4bc:	eb64 0402 	sbc.w	r4, r4, r2
 800b4c0:	f04f 0100 	mov.w	r1, #0
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	00e2      	lsls	r2, r4, #3
 800b4ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b4ce:	00d9      	lsls	r1, r3, #3
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4614      	mov	r4, r2
 800b4d4:	195b      	adds	r3, r3, r5
 800b4d6:	eb44 0406 	adc.w	r4, r4, r6
 800b4da:	f04f 0100 	mov.w	r1, #0
 800b4de:	f04f 0200 	mov.w	r2, #0
 800b4e2:	0262      	lsls	r2, r4, #9
 800b4e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b4e8:	0259      	lsls	r1, r3, #9
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f04f 0400 	mov.w	r4, #0
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4623      	mov	r3, r4
 800b4fc:	f7fd fadc 	bl	8008ab8 <__aeabi_uldivmod>
 800b500:	4603      	mov	r3, r0
 800b502:	460c      	mov	r4, r1
 800b504:	617b      	str	r3, [r7, #20]
 800b506:	e049      	b.n	800b59c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b508:	4b85      	ldr	r3, [pc, #532]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	099b      	lsrs	r3, r3, #6
 800b50e:	f04f 0400 	mov.w	r4, #0
 800b512:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b516:	f04f 0200 	mov.w	r2, #0
 800b51a:	ea03 0501 	and.w	r5, r3, r1
 800b51e:	ea04 0602 	and.w	r6, r4, r2
 800b522:	4629      	mov	r1, r5
 800b524:	4632      	mov	r2, r6
 800b526:	f04f 0300 	mov.w	r3, #0
 800b52a:	f04f 0400 	mov.w	r4, #0
 800b52e:	0154      	lsls	r4, r2, #5
 800b530:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b534:	014b      	lsls	r3, r1, #5
 800b536:	4619      	mov	r1, r3
 800b538:	4622      	mov	r2, r4
 800b53a:	1b49      	subs	r1, r1, r5
 800b53c:	eb62 0206 	sbc.w	r2, r2, r6
 800b540:	f04f 0300 	mov.w	r3, #0
 800b544:	f04f 0400 	mov.w	r4, #0
 800b548:	0194      	lsls	r4, r2, #6
 800b54a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b54e:	018b      	lsls	r3, r1, #6
 800b550:	1a5b      	subs	r3, r3, r1
 800b552:	eb64 0402 	sbc.w	r4, r4, r2
 800b556:	f04f 0100 	mov.w	r1, #0
 800b55a:	f04f 0200 	mov.w	r2, #0
 800b55e:	00e2      	lsls	r2, r4, #3
 800b560:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b564:	00d9      	lsls	r1, r3, #3
 800b566:	460b      	mov	r3, r1
 800b568:	4614      	mov	r4, r2
 800b56a:	195b      	adds	r3, r3, r5
 800b56c:	eb44 0406 	adc.w	r4, r4, r6
 800b570:	f04f 0100 	mov.w	r1, #0
 800b574:	f04f 0200 	mov.w	r2, #0
 800b578:	02a2      	lsls	r2, r4, #10
 800b57a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b57e:	0299      	lsls	r1, r3, #10
 800b580:	460b      	mov	r3, r1
 800b582:	4614      	mov	r4, r2
 800b584:	4618      	mov	r0, r3
 800b586:	4621      	mov	r1, r4
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f04f 0400 	mov.w	r4, #0
 800b58e:	461a      	mov	r2, r3
 800b590:	4623      	mov	r3, r4
 800b592:	f7fd fa91 	bl	8008ab8 <__aeabi_uldivmod>
 800b596:	4603      	mov	r3, r0
 800b598:	460c      	mov	r4, r1
 800b59a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b59c:	4b60      	ldr	r3, [pc, #384]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	0c1b      	lsrs	r3, r3, #16
 800b5a2:	f003 0303 	and.w	r3, r3, #3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b4:	613b      	str	r3, [r7, #16]
      break;
 800b5b6:	e0ae      	b.n	800b716 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5b8:	4b59      	ldr	r3, [pc, #356]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5c2:	4b57      	ldr	r3, [pc, #348]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d04a      	beq.n	800b664 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5ce:	4b54      	ldr	r3, [pc, #336]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	099b      	lsrs	r3, r3, #6
 800b5d4:	f04f 0400 	mov.w	r4, #0
 800b5d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b5dc:	f04f 0200 	mov.w	r2, #0
 800b5e0:	ea03 0501 	and.w	r5, r3, r1
 800b5e4:	ea04 0602 	and.w	r6, r4, r2
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4632      	mov	r2, r6
 800b5ec:	f04f 0300 	mov.w	r3, #0
 800b5f0:	f04f 0400 	mov.w	r4, #0
 800b5f4:	0154      	lsls	r4, r2, #5
 800b5f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b5fa:	014b      	lsls	r3, r1, #5
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4622      	mov	r2, r4
 800b600:	1b49      	subs	r1, r1, r5
 800b602:	eb62 0206 	sbc.w	r2, r2, r6
 800b606:	f04f 0300 	mov.w	r3, #0
 800b60a:	f04f 0400 	mov.w	r4, #0
 800b60e:	0194      	lsls	r4, r2, #6
 800b610:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b614:	018b      	lsls	r3, r1, #6
 800b616:	1a5b      	subs	r3, r3, r1
 800b618:	eb64 0402 	sbc.w	r4, r4, r2
 800b61c:	f04f 0100 	mov.w	r1, #0
 800b620:	f04f 0200 	mov.w	r2, #0
 800b624:	00e2      	lsls	r2, r4, #3
 800b626:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b62a:	00d9      	lsls	r1, r3, #3
 800b62c:	460b      	mov	r3, r1
 800b62e:	4614      	mov	r4, r2
 800b630:	195b      	adds	r3, r3, r5
 800b632:	eb44 0406 	adc.w	r4, r4, r6
 800b636:	f04f 0100 	mov.w	r1, #0
 800b63a:	f04f 0200 	mov.w	r2, #0
 800b63e:	0262      	lsls	r2, r4, #9
 800b640:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b644:	0259      	lsls	r1, r3, #9
 800b646:	460b      	mov	r3, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	4618      	mov	r0, r3
 800b64c:	4621      	mov	r1, r4
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f04f 0400 	mov.w	r4, #0
 800b654:	461a      	mov	r2, r3
 800b656:	4623      	mov	r3, r4
 800b658:	f7fd fa2e 	bl	8008ab8 <__aeabi_uldivmod>
 800b65c:	4603      	mov	r3, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	e049      	b.n	800b6f8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b664:	4b2e      	ldr	r3, [pc, #184]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	099b      	lsrs	r3, r3, #6
 800b66a:	f04f 0400 	mov.w	r4, #0
 800b66e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b672:	f04f 0200 	mov.w	r2, #0
 800b676:	ea03 0501 	and.w	r5, r3, r1
 800b67a:	ea04 0602 	and.w	r6, r4, r2
 800b67e:	4629      	mov	r1, r5
 800b680:	4632      	mov	r2, r6
 800b682:	f04f 0300 	mov.w	r3, #0
 800b686:	f04f 0400 	mov.w	r4, #0
 800b68a:	0154      	lsls	r4, r2, #5
 800b68c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b690:	014b      	lsls	r3, r1, #5
 800b692:	4619      	mov	r1, r3
 800b694:	4622      	mov	r2, r4
 800b696:	1b49      	subs	r1, r1, r5
 800b698:	eb62 0206 	sbc.w	r2, r2, r6
 800b69c:	f04f 0300 	mov.w	r3, #0
 800b6a0:	f04f 0400 	mov.w	r4, #0
 800b6a4:	0194      	lsls	r4, r2, #6
 800b6a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b6aa:	018b      	lsls	r3, r1, #6
 800b6ac:	1a5b      	subs	r3, r3, r1
 800b6ae:	eb64 0402 	sbc.w	r4, r4, r2
 800b6b2:	f04f 0100 	mov.w	r1, #0
 800b6b6:	f04f 0200 	mov.w	r2, #0
 800b6ba:	00e2      	lsls	r2, r4, #3
 800b6bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b6c0:	00d9      	lsls	r1, r3, #3
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	195b      	adds	r3, r3, r5
 800b6c8:	eb44 0406 	adc.w	r4, r4, r6
 800b6cc:	f04f 0100 	mov.w	r1, #0
 800b6d0:	f04f 0200 	mov.w	r2, #0
 800b6d4:	02a2      	lsls	r2, r4, #10
 800b6d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b6da:	0299      	lsls	r1, r3, #10
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4614      	mov	r4, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f04f 0400 	mov.w	r4, #0
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4623      	mov	r3, r4
 800b6ee:	f7fd f9e3 	bl	8008ab8 <__aeabi_uldivmod>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b6f8:	4b09      	ldr	r3, [pc, #36]	; (800b720 <HAL_RCC_GetSysClockFreq+0x334>)
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	0f1b      	lsrs	r3, r3, #28
 800b6fe:	f003 0307 	and.w	r3, r3, #7
 800b702:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70c:	613b      	str	r3, [r7, #16]
      break;
 800b70e:	e002      	b.n	800b716 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b710:	4b04      	ldr	r3, [pc, #16]	; (800b724 <HAL_RCC_GetSysClockFreq+0x338>)
 800b712:	613b      	str	r3, [r7, #16]
      break;
 800b714:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b716:	693b      	ldr	r3, [r7, #16]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	371c      	adds	r7, #28
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b720:	40023800 	.word	0x40023800
 800b724:	00f42400 	.word	0x00f42400
 800b728:	007a1200 	.word	0x007a1200

0800b72c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b734:	2300      	movs	r3, #0
 800b736:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 0301 	and.w	r3, r3, #1
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 8083 	beq.w	800b84c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b746:	4b95      	ldr	r3, [pc, #596]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f003 030c 	and.w	r3, r3, #12
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d019      	beq.n	800b786 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b752:	4b92      	ldr	r3, [pc, #584]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b75a:	2b08      	cmp	r3, #8
 800b75c:	d106      	bne.n	800b76c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b75e:	4b8f      	ldr	r3, [pc, #572]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b76a:	d00c      	beq.n	800b786 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b76c:	4b8b      	ldr	r3, [pc, #556]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b774:	2b0c      	cmp	r3, #12
 800b776:	d112      	bne.n	800b79e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b778:	4b88      	ldr	r3, [pc, #544]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b784:	d10b      	bne.n	800b79e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b786:	4b85      	ldr	r3, [pc, #532]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d05b      	beq.n	800b84a <HAL_RCC_OscConfig+0x11e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d157      	bne.n	800b84a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e216      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a6:	d106      	bne.n	800b7b6 <HAL_RCC_OscConfig+0x8a>
 800b7a8:	4b7c      	ldr	r3, [pc, #496]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a7b      	ldr	r2, [pc, #492]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	e01d      	b.n	800b7f2 <HAL_RCC_OscConfig+0xc6>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7be:	d10c      	bne.n	800b7da <HAL_RCC_OscConfig+0xae>
 800b7c0:	4b76      	ldr	r3, [pc, #472]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a75      	ldr	r2, [pc, #468]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7ca:	6013      	str	r3, [r2, #0]
 800b7cc:	4b73      	ldr	r3, [pc, #460]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a72      	ldr	r2, [pc, #456]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	e00b      	b.n	800b7f2 <HAL_RCC_OscConfig+0xc6>
 800b7da:	4b70      	ldr	r3, [pc, #448]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a6f      	ldr	r2, [pc, #444]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	4b6d      	ldr	r3, [pc, #436]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a6c      	ldr	r2, [pc, #432]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b7ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d013      	beq.n	800b822 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7fa:	f7fd fb43 	bl	8008e84 <HAL_GetTick>
 800b7fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b800:	e008      	b.n	800b814 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b802:	f7fd fb3f 	bl	8008e84 <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	2b64      	cmp	r3, #100	; 0x64
 800b80e:	d901      	bls.n	800b814 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b810:	2303      	movs	r3, #3
 800b812:	e1db      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b814:	4b61      	ldr	r3, [pc, #388]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d0f0      	beq.n	800b802 <HAL_RCC_OscConfig+0xd6>
 800b820:	e014      	b.n	800b84c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b822:	f7fd fb2f 	bl	8008e84 <HAL_GetTick>
 800b826:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b828:	e008      	b.n	800b83c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b82a:	f7fd fb2b 	bl	8008e84 <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	2b64      	cmp	r3, #100	; 0x64
 800b836:	d901      	bls.n	800b83c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e1c7      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b83c:	4b57      	ldr	r3, [pc, #348]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1f0      	bne.n	800b82a <HAL_RCC_OscConfig+0xfe>
 800b848:	e000      	b.n	800b84c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b84a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0302 	and.w	r3, r3, #2
 800b854:	2b00      	cmp	r3, #0
 800b856:	d06f      	beq.n	800b938 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b858:	4b50      	ldr	r3, [pc, #320]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f003 030c 	and.w	r3, r3, #12
 800b860:	2b00      	cmp	r3, #0
 800b862:	d017      	beq.n	800b894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b864:	4b4d      	ldr	r3, [pc, #308]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b86c:	2b08      	cmp	r3, #8
 800b86e:	d105      	bne.n	800b87c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b870:	4b4a      	ldr	r3, [pc, #296]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b87c:	4b47      	ldr	r3, [pc, #284]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b884:	2b0c      	cmp	r3, #12
 800b886:	d11c      	bne.n	800b8c2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b888:	4b44      	ldr	r3, [pc, #272]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d116      	bne.n	800b8c2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b894:	4b41      	ldr	r3, [pc, #260]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <HAL_RCC_OscConfig+0x180>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d001      	beq.n	800b8ac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e18f      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8ac:	4b3b      	ldr	r3, [pc, #236]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	00db      	lsls	r3, r3, #3
 800b8ba:	4938      	ldr	r1, [pc, #224]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8c0:	e03a      	b.n	800b938 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d020      	beq.n	800b90c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8ca:	4b35      	ldr	r3, [pc, #212]	; (800b9a0 <HAL_RCC_OscConfig+0x274>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d0:	f7fd fad8 	bl	8008e84 <HAL_GetTick>
 800b8d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8d6:	e008      	b.n	800b8ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8d8:	f7fd fad4 	bl	8008e84 <HAL_GetTick>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d901      	bls.n	800b8ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e170      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8ea:	4b2c      	ldr	r3, [pc, #176]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0302 	and.w	r3, r3, #2
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d0f0      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8f6:	4b29      	ldr	r3, [pc, #164]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	4925      	ldr	r1, [pc, #148]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b906:	4313      	orrs	r3, r2
 800b908:	600b      	str	r3, [r1, #0]
 800b90a:	e015      	b.n	800b938 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b90c:	4b24      	ldr	r3, [pc, #144]	; (800b9a0 <HAL_RCC_OscConfig+0x274>)
 800b90e:	2200      	movs	r2, #0
 800b910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b912:	f7fd fab7 	bl	8008e84 <HAL_GetTick>
 800b916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b918:	e008      	b.n	800b92c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b91a:	f7fd fab3 	bl	8008e84 <HAL_GetTick>
 800b91e:	4602      	mov	r2, r0
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	2b02      	cmp	r3, #2
 800b926:	d901      	bls.n	800b92c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b928:	2303      	movs	r3, #3
 800b92a:	e14f      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b92c:	4b1b      	ldr	r3, [pc, #108]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f003 0302 	and.w	r3, r3, #2
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1f0      	bne.n	800b91a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 0308 	and.w	r3, r3, #8
 800b940:	2b00      	cmp	r3, #0
 800b942:	d037      	beq.n	800b9b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	695b      	ldr	r3, [r3, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d016      	beq.n	800b97a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b94c:	4b15      	ldr	r3, [pc, #84]	; (800b9a4 <HAL_RCC_OscConfig+0x278>)
 800b94e:	2201      	movs	r2, #1
 800b950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b952:	f7fd fa97 	bl	8008e84 <HAL_GetTick>
 800b956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b958:	e008      	b.n	800b96c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b95a:	f7fd fa93 	bl	8008e84 <HAL_GetTick>
 800b95e:	4602      	mov	r2, r0
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	2b02      	cmp	r3, #2
 800b966:	d901      	bls.n	800b96c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e12f      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b96c:	4b0b      	ldr	r3, [pc, #44]	; (800b99c <HAL_RCC_OscConfig+0x270>)
 800b96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0f0      	beq.n	800b95a <HAL_RCC_OscConfig+0x22e>
 800b978:	e01c      	b.n	800b9b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b97a:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <HAL_RCC_OscConfig+0x278>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b980:	f7fd fa80 	bl	8008e84 <HAL_GetTick>
 800b984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b986:	e00f      	b.n	800b9a8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b988:	f7fd fa7c 	bl	8008e84 <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	2b02      	cmp	r3, #2
 800b994:	d908      	bls.n	800b9a8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e118      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
 800b99a:	bf00      	nop
 800b99c:	40023800 	.word	0x40023800
 800b9a0:	42470000 	.word	0x42470000
 800b9a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9a8:	4b8a      	ldr	r3, [pc, #552]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800b9aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ac:	f003 0302 	and.w	r3, r3, #2
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e9      	bne.n	800b988 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f003 0304 	and.w	r3, r3, #4
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 8097 	beq.w	800baf0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9c6:	4b83      	ldr	r3, [pc, #524]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800b9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10f      	bne.n	800b9f2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	4b7f      	ldr	r3, [pc, #508]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800b9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9da:	4a7e      	ldr	r2, [pc, #504]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800b9dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b9e2:	4b7c      	ldr	r3, [pc, #496]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9f2:	4b79      	ldr	r3, [pc, #484]	; (800bbd8 <HAL_RCC_OscConfig+0x4ac>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d118      	bne.n	800ba30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b9fe:	4b76      	ldr	r3, [pc, #472]	; (800bbd8 <HAL_RCC_OscConfig+0x4ac>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a75      	ldr	r2, [pc, #468]	; (800bbd8 <HAL_RCC_OscConfig+0x4ac>)
 800ba04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba0a:	f7fd fa3b 	bl	8008e84 <HAL_GetTick>
 800ba0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba10:	e008      	b.n	800ba24 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba12:	f7fd fa37 	bl	8008e84 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d901      	bls.n	800ba24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e0d3      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba24:	4b6c      	ldr	r3, [pc, #432]	; (800bbd8 <HAL_RCC_OscConfig+0x4ac>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d0f0      	beq.n	800ba12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d106      	bne.n	800ba46 <HAL_RCC_OscConfig+0x31a>
 800ba38:	4b66      	ldr	r3, [pc, #408]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba3c:	4a65      	ldr	r2, [pc, #404]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	6713      	str	r3, [r2, #112]	; 0x70
 800ba44:	e01c      	b.n	800ba80 <HAL_RCC_OscConfig+0x354>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	2b05      	cmp	r3, #5
 800ba4c:	d10c      	bne.n	800ba68 <HAL_RCC_OscConfig+0x33c>
 800ba4e:	4b61      	ldr	r3, [pc, #388]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba52:	4a60      	ldr	r2, [pc, #384]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba54:	f043 0304 	orr.w	r3, r3, #4
 800ba58:	6713      	str	r3, [r2, #112]	; 0x70
 800ba5a:	4b5e      	ldr	r3, [pc, #376]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5e:	4a5d      	ldr	r2, [pc, #372]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba60:	f043 0301 	orr.w	r3, r3, #1
 800ba64:	6713      	str	r3, [r2, #112]	; 0x70
 800ba66:	e00b      	b.n	800ba80 <HAL_RCC_OscConfig+0x354>
 800ba68:	4b5a      	ldr	r3, [pc, #360]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6c:	4a59      	ldr	r2, [pc, #356]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba6e:	f023 0301 	bic.w	r3, r3, #1
 800ba72:	6713      	str	r3, [r2, #112]	; 0x70
 800ba74:	4b57      	ldr	r3, [pc, #348]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba78:	4a56      	ldr	r2, [pc, #344]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800ba7a:	f023 0304 	bic.w	r3, r3, #4
 800ba7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d015      	beq.n	800bab4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba88:	f7fd f9fc 	bl	8008e84 <HAL_GetTick>
 800ba8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba8e:	e00a      	b.n	800baa6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba90:	f7fd f9f8 	bl	8008e84 <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d901      	bls.n	800baa6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e092      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800baa6:	4b4b      	ldr	r3, [pc, #300]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800baa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baaa:	f003 0302 	and.w	r3, r3, #2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0ee      	beq.n	800ba90 <HAL_RCC_OscConfig+0x364>
 800bab2:	e014      	b.n	800bade <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bab4:	f7fd f9e6 	bl	8008e84 <HAL_GetTick>
 800bab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800baba:	e00a      	b.n	800bad2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800babc:	f7fd f9e2 	bl	8008e84 <HAL_GetTick>
 800bac0:	4602      	mov	r2, r0
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	f241 3288 	movw	r2, #5000	; 0x1388
 800baca:	4293      	cmp	r3, r2
 800bacc:	d901      	bls.n	800bad2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bace:	2303      	movs	r3, #3
 800bad0:	e07c      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bad2:	4b40      	ldr	r3, [pc, #256]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800bad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1ee      	bne.n	800babc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bade:	7dfb      	ldrb	r3, [r7, #23]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d105      	bne.n	800baf0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bae4:	4b3b      	ldr	r3, [pc, #236]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800bae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae8:	4a3a      	ldr	r2, [pc, #232]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800baea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800baee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d068      	beq.n	800bbca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800baf8:	4b36      	ldr	r3, [pc, #216]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f003 030c 	and.w	r3, r3, #12
 800bb00:	2b08      	cmp	r3, #8
 800bb02:	d060      	beq.n	800bbc6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d145      	bne.n	800bb98 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb0c:	4b33      	ldr	r3, [pc, #204]	; (800bbdc <HAL_RCC_OscConfig+0x4b0>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb12:	f7fd f9b7 	bl	8008e84 <HAL_GetTick>
 800bb16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb18:	e008      	b.n	800bb2c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb1a:	f7fd f9b3 	bl	8008e84 <HAL_GetTick>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d901      	bls.n	800bb2c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	e04f      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb2c:	4b29      	ldr	r3, [pc, #164]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1f0      	bne.n	800bb1a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	69da      	ldr	r2, [r3, #28]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	431a      	orrs	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb46:	019b      	lsls	r3, r3, #6
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4e:	085b      	lsrs	r3, r3, #1
 800bb50:	3b01      	subs	r3, #1
 800bb52:	041b      	lsls	r3, r3, #16
 800bb54:	431a      	orrs	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5a:	061b      	lsls	r3, r3, #24
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb62:	071b      	lsls	r3, r3, #28
 800bb64:	491b      	ldr	r1, [pc, #108]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800bb66:	4313      	orrs	r3, r2
 800bb68:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb6a:	4b1c      	ldr	r3, [pc, #112]	; (800bbdc <HAL_RCC_OscConfig+0x4b0>)
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb70:	f7fd f988 	bl	8008e84 <HAL_GetTick>
 800bb74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb76:	e008      	b.n	800bb8a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb78:	f7fd f984 	bl	8008e84 <HAL_GetTick>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d901      	bls.n	800bb8a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e020      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb8a:	4b12      	ldr	r3, [pc, #72]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0f0      	beq.n	800bb78 <HAL_RCC_OscConfig+0x44c>
 800bb96:	e018      	b.n	800bbca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb98:	4b10      	ldr	r3, [pc, #64]	; (800bbdc <HAL_RCC_OscConfig+0x4b0>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb9e:	f7fd f971 	bl	8008e84 <HAL_GetTick>
 800bba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bba4:	e008      	b.n	800bbb8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bba6:	f7fd f96d 	bl	8008e84 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d901      	bls.n	800bbb8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e009      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbb8:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <HAL_RCC_OscConfig+0x4a8>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1f0      	bne.n	800bba6 <HAL_RCC_OscConfig+0x47a>
 800bbc4:	e001      	b.n	800bbca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e000      	b.n	800bbcc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	40023800 	.word	0x40023800
 800bbd8:	40007000 	.word	0x40007000
 800bbdc:	42470060 	.word	0x42470060

0800bbe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e056      	b.n	800bca0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f005 fdb3 	bl	8011778 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2202      	movs	r2, #2
 800bc16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	431a      	orrs	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc4e:	431a      	orrs	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	431a      	orrs	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	ea42 0103 	orr.w	r1, r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	0c1b      	lsrs	r3, r3, #16
 800bc70:	f003 0104 	and.w	r1, r3, #4
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	430a      	orrs	r2, r1
 800bc7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	69da      	ldr	r2, [r3, #28]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b08c      	sub	sp, #48	; 0x30
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d101      	bne.n	800bcce <HAL_SPI_TransmitReceive+0x26>
 800bcca:	2302      	movs	r3, #2
 800bccc:	e18a      	b.n	800bfe4 <HAL_SPI_TransmitReceive+0x33c>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcd6:	f7fd f8d5 	bl	8008e84 <HAL_GetTick>
 800bcda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bcec:	887b      	ldrh	r3, [r7, #2]
 800bcee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bcf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d00f      	beq.n	800bd18 <HAL_SPI_TransmitReceive+0x70>
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcfe:	d107      	bne.n	800bd10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d103      	bne.n	800bd10 <HAL_SPI_TransmitReceive+0x68>
 800bd08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd0c:	2b04      	cmp	r3, #4
 800bd0e:	d003      	beq.n	800bd18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bd10:	2302      	movs	r3, #2
 800bd12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd16:	e15b      	b.n	800bfd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d005      	beq.n	800bd2a <HAL_SPI_TransmitReceive+0x82>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d002      	beq.n	800bd2a <HAL_SPI_TransmitReceive+0x82>
 800bd24:	887b      	ldrh	r3, [r7, #2]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d103      	bne.n	800bd32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd30:	e14e      	b.n	800bfd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d003      	beq.n	800bd46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2205      	movs	r2, #5
 800bd42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	887a      	ldrh	r2, [r7, #2]
 800bd56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	887a      	ldrh	r2, [r7, #2]
 800bd5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	887a      	ldrh	r2, [r7, #2]
 800bd68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	887a      	ldrh	r2, [r7, #2]
 800bd6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd86:	2b40      	cmp	r3, #64	; 0x40
 800bd88:	d007      	beq.n	800bd9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bda2:	d178      	bne.n	800be96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <HAL_SPI_TransmitReceive+0x10a>
 800bdac:	8b7b      	ldrh	r3, [r7, #26]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d166      	bne.n	800be80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb6:	881a      	ldrh	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc2:	1c9a      	adds	r2, r3, #2
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdd6:	e053      	b.n	800be80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d11b      	bne.n	800be1e <HAL_SPI_TransmitReceive+0x176>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d016      	beq.n	800be1e <HAL_SPI_TransmitReceive+0x176>
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d113      	bne.n	800be1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfa:	881a      	ldrh	r2, [r3, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be06:	1c9a      	adds	r2, r3, #2
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be10:	b29b      	uxth	r3, r3
 800be12:	3b01      	subs	r3, #1
 800be14:	b29a      	uxth	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d119      	bne.n	800be60 <HAL_SPI_TransmitReceive+0x1b8>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be30:	b29b      	uxth	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d014      	beq.n	800be60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68da      	ldr	r2, [r3, #12]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	b292      	uxth	r2, r2
 800be42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be48:	1c9a      	adds	r2, r3, #2
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be52:	b29b      	uxth	r3, r3
 800be54:	3b01      	subs	r3, #1
 800be56:	b29a      	uxth	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be5c:	2301      	movs	r3, #1
 800be5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800be60:	f7fd f810 	bl	8008e84 <HAL_GetTick>
 800be64:	4602      	mov	r2, r0
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d807      	bhi.n	800be80 <HAL_SPI_TransmitReceive+0x1d8>
 800be70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be76:	d003      	beq.n	800be80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800be7e:	e0a7      	b.n	800bfd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be84:	b29b      	uxth	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1a6      	bne.n	800bdd8 <HAL_SPI_TransmitReceive+0x130>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be8e:	b29b      	uxth	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1a1      	bne.n	800bdd8 <HAL_SPI_TransmitReceive+0x130>
 800be94:	e07c      	b.n	800bf90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d002      	beq.n	800bea4 <HAL_SPI_TransmitReceive+0x1fc>
 800be9e:	8b7b      	ldrh	r3, [r7, #26]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d16b      	bne.n	800bf7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	330c      	adds	r3, #12
 800beae:	7812      	ldrb	r2, [r2, #0]
 800beb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb6:	1c5a      	adds	r2, r3, #1
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	3b01      	subs	r3, #1
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800beca:	e057      	b.n	800bf7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d11c      	bne.n	800bf14 <HAL_SPI_TransmitReceive+0x26c>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d017      	beq.n	800bf14 <HAL_SPI_TransmitReceive+0x26c>
 800bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d114      	bne.n	800bf14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	330c      	adds	r3, #12
 800bef4:	7812      	ldrb	r2, [r2, #0]
 800bef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf10:	2300      	movs	r3, #0
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d119      	bne.n	800bf56 <HAL_SPI_TransmitReceive+0x2ae>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d014      	beq.n	800bf56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68da      	ldr	r2, [r3, #12]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf52:	2301      	movs	r3, #1
 800bf54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bf56:	f7fc ff95 	bl	8008e84 <HAL_GetTick>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d803      	bhi.n	800bf6e <HAL_SPI_TransmitReceive+0x2c6>
 800bf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6c:	d102      	bne.n	800bf74 <HAL_SPI_TransmitReceive+0x2cc>
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d103      	bne.n	800bf7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bf7a:	e029      	b.n	800bfd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1a2      	bne.n	800becc <HAL_SPI_TransmitReceive+0x224>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d19d      	bne.n	800becc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bf90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 fb1b 	bl	800c5d0 <SPI_EndRxTxTransaction>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d006      	beq.n	800bfae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bfac:	e010      	b.n	800bfd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	617b      	str	r3, [r7, #20]
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	e000      	b.n	800bfd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bfce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bfe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3730      	adds	r7, #48	; 0x30
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c004:	2b01      	cmp	r3, #1
 800c006:	d101      	bne.n	800c00c <HAL_SPI_TransmitReceive_IT+0x20>
 800c008:	2302      	movs	r3, #2
 800c00a:	e075      	b.n	800c0f8 <HAL_SPI_TransmitReceive_IT+0x10c>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c01a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c022:	7dbb      	ldrb	r3, [r7, #22]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d00d      	beq.n	800c044 <HAL_SPI_TransmitReceive_IT+0x58>
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c02e:	d106      	bne.n	800c03e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <HAL_SPI_TransmitReceive_IT+0x52>
 800c038:	7dbb      	ldrb	r3, [r7, #22]
 800c03a:	2b04      	cmp	r3, #4
 800c03c:	d002      	beq.n	800c044 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800c03e:	2302      	movs	r3, #2
 800c040:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c042:	e054      	b.n	800c0ee <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d005      	beq.n	800c056 <HAL_SPI_TransmitReceive_IT+0x6a>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <HAL_SPI_TransmitReceive_IT+0x6a>
 800c050:	887b      	ldrh	r3, [r7, #2]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d102      	bne.n	800c05c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c05a:	e048      	b.n	800c0ee <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c062:	b2db      	uxtb	r3, r3
 800c064:	2b04      	cmp	r3, #4
 800c066:	d003      	beq.n	800c070 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2205      	movs	r2, #5
 800c06c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2200      	movs	r2, #0
 800c074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	887a      	ldrh	r2, [r7, #2]
 800c080:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	887a      	ldrh	r2, [r7, #2]
 800c086:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	887a      	ldrh	r2, [r7, #2]
 800c092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	887a      	ldrh	r2, [r7, #2]
 800c098:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d006      	beq.n	800c0b0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	4a17      	ldr	r2, [pc, #92]	; (800c104 <HAL_SPI_TransmitReceive_IT+0x118>)
 800c0a6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4a17      	ldr	r2, [pc, #92]	; (800c108 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800c0ac:	645a      	str	r2, [r3, #68]	; 0x44
 800c0ae:	e005      	b.n	800c0bc <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4a16      	ldr	r2, [pc, #88]	; (800c10c <HAL_SPI_TransmitReceive_IT+0x120>)
 800c0b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4a15      	ldr	r2, [pc, #84]	; (800c110 <HAL_SPI_TransmitReceive_IT+0x124>)
 800c0ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800c0ca:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d6:	2b40      	cmp	r3, #64	; 0x40
 800c0d8:	d008      	beq.n	800c0ec <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	e000      	b.n	800c0ee <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800c0ec:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	371c      	adds	r7, #28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	0800c43d 	.word	0x0800c43d
 800c108:	0800c49d 	.word	0x0800c49d
 800c10c:	0800c379 	.word	0x0800c379
 800c110:	0800c3dd 	.word	0x0800c3dd

0800c114 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	099b      	lsrs	r3, r3, #6
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10f      	bne.n	800c158 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00a      	beq.n	800c158 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	099b      	lsrs	r3, r3, #6
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d004      	beq.n	800c158 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	4798      	blx	r3
    return;
 800c156:	e0d8      	b.n	800c30a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	085b      	lsrs	r3, r3, #1
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <HAL_SPI_IRQHandler+0x66>
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	09db      	lsrs	r3, r3, #7
 800c168:	f003 0301 	and.w	r3, r3, #1
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	4798      	blx	r3
    return;
 800c178:	e0c7      	b.n	800c30a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	095b      	lsrs	r3, r3, #5
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10c      	bne.n	800c1a0 <HAL_SPI_IRQHandler+0x8c>
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	099b      	lsrs	r3, r3, #6
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <HAL_SPI_IRQHandler+0x8c>
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	0a1b      	lsrs	r3, r3, #8
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 80b5 	beq.w	800c30a <HAL_SPI_IRQHandler+0x1f6>
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	095b      	lsrs	r3, r3, #5
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 80ae 	beq.w	800c30a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	099b      	lsrs	r3, r3, #6
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d023      	beq.n	800c202 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d011      	beq.n	800c1ea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ca:	f043 0204 	orr.w	r2, r3, #4
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	617b      	str	r3, [r7, #20]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	617b      	str	r3, [r7, #20]
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	e00b      	b.n	800c202 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	613b      	str	r3, [r7, #16]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	613b      	str	r3, [r7, #16]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	613b      	str	r3, [r7, #16]
 800c1fe:	693b      	ldr	r3, [r7, #16]
        return;
 800c200:	e083      	b.n	800c30a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	095b      	lsrs	r3, r3, #5
 800c206:	f003 0301 	and.w	r3, r3, #1
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d014      	beq.n	800c238 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c212:	f043 0201 	orr.w	r2, r3, #1
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c21a:	2300      	movs	r3, #0
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	60fb      	str	r3, [r7, #12]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	0a1b      	lsrs	r3, r3, #8
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00c      	beq.n	800c25e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c248:	f043 0208 	orr.w	r2, r3, #8
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c250:	2300      	movs	r3, #0
 800c252:	60bb      	str	r3, [r7, #8]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	60bb      	str	r3, [r7, #8]
 800c25c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c262:	2b00      	cmp	r3, #0
 800c264:	d050      	beq.n	800c308 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c274:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d104      	bne.n	800c292 <HAL_SPI_IRQHandler+0x17e>
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d034      	beq.n	800c2fc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685a      	ldr	r2, [r3, #4]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 0203 	bic.w	r2, r2, #3
 800c2a0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d011      	beq.n	800c2ce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ae:	4a18      	ldr	r2, [pc, #96]	; (800c310 <HAL_SPI_IRQHandler+0x1fc>)
 800c2b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe f850 	bl	800a35c <HAL_DMA_Abort_IT>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d005      	beq.n	800c2ce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d016      	beq.n	800c304 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2da:	4a0d      	ldr	r2, [pc, #52]	; (800c310 <HAL_SPI_IRQHandler+0x1fc>)
 800c2dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe f83a 	bl	800a35c <HAL_DMA_Abort_IT>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00a      	beq.n	800c304 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c2fa:	e003      	b.n	800c304 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f81d 	bl	800c33c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c302:	e000      	b.n	800c306 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c304:	bf00      	nop
    return;
 800c306:	bf00      	nop
 800c308:	bf00      	nop
  }
}
 800c30a:	3720      	adds	r7, #32
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	0800c351 	.word	0x0800c351

0800c314 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff ffe6 	bl	800c33c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c370:	bf00      	nop
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f103 020c 	add.w	r2, r3, #12
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38c:	7812      	ldrb	r2, [r2, #0]
 800c38e:	b2d2      	uxtb	r2, r2
 800c390:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c396:	1c5a      	adds	r2, r3, #1
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10f      	bne.n	800c3d4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	685a      	ldr	r2, [r3, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c3c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d102      	bne.n	800c3d4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 f940 	bl	800c654 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	330c      	adds	r3, #12
 800c3ee:	7812      	ldrb	r2, [r2, #0]
 800c3f0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c400:	b29b      	uxth	r3, r3
 800c402:	3b01      	subs	r3, #1
 800c404:	b29a      	uxth	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c40e:	b29b      	uxth	r3, r3
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10f      	bne.n	800c434 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	685a      	ldr	r2, [r3, #4]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c422:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c428:	b29b      	uxth	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d102      	bne.n	800c434 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f910 	bl	800c654 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68da      	ldr	r2, [r3, #12]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44e:	b292      	uxth	r2, r2
 800c450:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c456:	1c9a      	adds	r2, r3, #2
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c460:	b29b      	uxth	r3, r3
 800c462:	3b01      	subs	r3, #1
 800c464:	b29a      	uxth	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c46e:	b29b      	uxth	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10f      	bne.n	800c494 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	685a      	ldr	r2, [r3, #4]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c482:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c488:	b29b      	uxth	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f8e0 	bl	800c654 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a8:	881a      	ldrh	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b4:	1c9a      	adds	r2, r3, #2
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10f      	bne.n	800c4f2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4e0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d102      	bne.n	800c4f2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f8b1 	bl	800c654 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c4f2:	bf00      	nop
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	603b      	str	r3, [r7, #0]
 800c506:	4613      	mov	r3, r2
 800c508:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c50a:	e04c      	b.n	800c5a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c512:	d048      	beq.n	800c5a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c514:	f7fc fcb6 	bl	8008e84 <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d902      	bls.n	800c52a <SPI_WaitFlagStateUntilTimeout+0x30>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d13d      	bne.n	800c5a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c542:	d111      	bne.n	800c568 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c54c:	d004      	beq.n	800c558 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c556:	d107      	bne.n	800c568 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c570:	d10f      	bne.n	800c592 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	e00f      	b.n	800c5c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689a      	ldr	r2, [r3, #8]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	bf0c      	ite	eq
 800c5b6:	2301      	moveq	r3, #1
 800c5b8:	2300      	movne	r3, #0
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	461a      	mov	r2, r3
 800c5be:	79fb      	ldrb	r3, [r7, #7]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d1a3      	bne.n	800c50c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
	...

0800c5d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af02      	add	r7, sp, #8
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c5dc:	4b1b      	ldr	r3, [pc, #108]	; (800c64c <SPI_EndRxTxTransaction+0x7c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a1b      	ldr	r2, [pc, #108]	; (800c650 <SPI_EndRxTxTransaction+0x80>)
 800c5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e6:	0d5b      	lsrs	r3, r3, #21
 800c5e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c5ec:	fb02 f303 	mul.w	r3, r2, r3
 800c5f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5fa:	d112      	bne.n	800c622 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2200      	movs	r2, #0
 800c604:	2180      	movs	r1, #128	; 0x80
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f7ff ff77 	bl	800c4fa <SPI_WaitFlagStateUntilTimeout>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d016      	beq.n	800c640 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c616:	f043 0220 	orr.w	r2, r3, #32
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e00f      	b.n	800c642 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00a      	beq.n	800c63e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c638:	2b80      	cmp	r3, #128	; 0x80
 800c63a:	d0f2      	beq.n	800c622 <SPI_EndRxTxTransaction+0x52>
 800c63c:	e000      	b.n	800c640 <SPI_EndRxTxTransaction+0x70>
        break;
 800c63e:	bf00      	nop
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	2000000c 	.word	0x2000000c
 800c650:	165e9f81 	.word	0x165e9f81

0800c654 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c65c:	4b35      	ldr	r3, [pc, #212]	; (800c734 <SPI_CloseRxTx_ISR+0xe0>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a35      	ldr	r2, [pc, #212]	; (800c738 <SPI_CloseRxTx_ISR+0xe4>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	0a5b      	lsrs	r3, r3, #9
 800c668:	2264      	movs	r2, #100	; 0x64
 800c66a:	fb02 f303 	mul.w	r3, r2, r3
 800c66e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c670:	f7fc fc08 	bl	8008e84 <HAL_GetTick>
 800c674:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f022 0220 	bic.w	r2, r2, #32
 800c684:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d106      	bne.n	800c69a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c690:	f043 0220 	orr.w	r2, r3, #32
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c698:	e009      	b.n	800c6ae <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 0302 	and.w	r3, r3, #2
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d0eb      	beq.n	800c686 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	2164      	movs	r1, #100	; 0x64
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff ff8c 	bl	800c5d0 <SPI_EndRxTxTransaction>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d005      	beq.n	800c6ca <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6c2:	f043 0220 	orr.w	r2, r3, #32
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10a      	bne.n	800c6e8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	60fb      	str	r3, [r7, #12]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d115      	bne.n	800c71c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d107      	bne.n	800c70c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff fe05 	bl	800c314 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c70a:	e00e      	b.n	800c72a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7ff fe07 	bl	800c328 <HAL_SPI_TxRxCpltCallback>
}
 800c71a:	e006      	b.n	800c72a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff fe09 	bl	800c33c <HAL_SPI_ErrorCallback>
}
 800c72a:	bf00      	nop
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	2000000c 	.word	0x2000000c
 800c738:	057619f1 	.word	0x057619f1

0800c73c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d101      	bne.n	800c74e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e01d      	b.n	800c78a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b00      	cmp	r3, #0
 800c758:	d106      	bne.n	800c768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f005 fb0a 	bl	8011d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2202      	movs	r2, #2
 800c76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3304      	adds	r3, #4
 800c778:	4619      	mov	r1, r3
 800c77a:	4610      	mov	r0, r2
 800c77c:	f000 fc30 	bl	800cfe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e01d      	b.n	800c7e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d106      	bne.n	800c7be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f815 	bl	800c7e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2202      	movs	r2, #2
 800c7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	f000 fc05 	bl	800cfe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2b0c      	cmp	r3, #12
 800c80a:	d841      	bhi.n	800c890 <HAL_TIM_PWM_Start_IT+0x94>
 800c80c:	a201      	add	r2, pc, #4	; (adr r2, 800c814 <HAL_TIM_PWM_Start_IT+0x18>)
 800c80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c812:	bf00      	nop
 800c814:	0800c849 	.word	0x0800c849
 800c818:	0800c891 	.word	0x0800c891
 800c81c:	0800c891 	.word	0x0800c891
 800c820:	0800c891 	.word	0x0800c891
 800c824:	0800c85b 	.word	0x0800c85b
 800c828:	0800c891 	.word	0x0800c891
 800c82c:	0800c891 	.word	0x0800c891
 800c830:	0800c891 	.word	0x0800c891
 800c834:	0800c86d 	.word	0x0800c86d
 800c838:	0800c891 	.word	0x0800c891
 800c83c:	0800c891 	.word	0x0800c891
 800c840:	0800c891 	.word	0x0800c891
 800c844:	0800c87f 	.word	0x0800c87f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68da      	ldr	r2, [r3, #12]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f042 0202 	orr.w	r2, r2, #2
 800c856:	60da      	str	r2, [r3, #12]
      break;
 800c858:	e01b      	b.n	800c892 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68da      	ldr	r2, [r3, #12]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f042 0204 	orr.w	r2, r2, #4
 800c868:	60da      	str	r2, [r3, #12]
      break;
 800c86a:	e012      	b.n	800c892 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	68da      	ldr	r2, [r3, #12]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f042 0208 	orr.w	r2, r2, #8
 800c87a:	60da      	str	r2, [r3, #12]
      break;
 800c87c:	e009      	b.n	800c892 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68da      	ldr	r2, [r3, #12]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0210 	orr.w	r2, r2, #16
 800c88c:	60da      	str	r2, [r3, #12]
      break;
 800c88e:	e000      	b.n	800c892 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800c890:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2201      	movs	r2, #1
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 fe8a 	bl	800d5b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a15      	ldr	r2, [pc, #84]	; (800c8fc <HAL_TIM_PWM_Start_IT+0x100>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d004      	beq.n	800c8b4 <HAL_TIM_PWM_Start_IT+0xb8>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a14      	ldr	r2, [pc, #80]	; (800c900 <HAL_TIM_PWM_Start_IT+0x104>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d101      	bne.n	800c8b8 <HAL_TIM_PWM_Start_IT+0xbc>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <HAL_TIM_PWM_Start_IT+0xbe>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d007      	beq.n	800c8ce <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f003 0307 	and.w	r3, r3, #7
 800c8d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2b06      	cmp	r3, #6
 800c8de:	d007      	beq.n	800c8f0 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f042 0201 	orr.w	r2, r2, #1
 800c8ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	40010000 	.word	0x40010000
 800c900:	40010400 	.word	0x40010400

0800c904 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b0c      	cmp	r3, #12
 800c912:	d841      	bhi.n	800c998 <HAL_TIM_PWM_Stop_IT+0x94>
 800c914:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <HAL_TIM_PWM_Stop_IT+0x18>)
 800c916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91a:	bf00      	nop
 800c91c:	0800c951 	.word	0x0800c951
 800c920:	0800c999 	.word	0x0800c999
 800c924:	0800c999 	.word	0x0800c999
 800c928:	0800c999 	.word	0x0800c999
 800c92c:	0800c963 	.word	0x0800c963
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800c999 	.word	0x0800c999
 800c938:	0800c999 	.word	0x0800c999
 800c93c:	0800c975 	.word	0x0800c975
 800c940:	0800c999 	.word	0x0800c999
 800c944:	0800c999 	.word	0x0800c999
 800c948:	0800c999 	.word	0x0800c999
 800c94c:	0800c987 	.word	0x0800c987
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68da      	ldr	r2, [r3, #12]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f022 0202 	bic.w	r2, r2, #2
 800c95e:	60da      	str	r2, [r3, #12]
      break;
 800c960:	e01b      	b.n	800c99a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68da      	ldr	r2, [r3, #12]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f022 0204 	bic.w	r2, r2, #4
 800c970:	60da      	str	r2, [r3, #12]
      break;
 800c972:	e012      	b.n	800c99a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f022 0208 	bic.w	r2, r2, #8
 800c982:	60da      	str	r2, [r3, #12]
      break;
 800c984:	e009      	b.n	800c99a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68da      	ldr	r2, [r3, #12]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f022 0210 	bic.w	r2, r2, #16
 800c994:	60da      	str	r2, [r3, #12]
      break;
 800c996:	e000      	b.n	800c99a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800c998:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fe06 	bl	800d5b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a20      	ldr	r2, [pc, #128]	; (800ca30 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d004      	beq.n	800c9bc <HAL_TIM_PWM_Stop_IT+0xb8>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a1f      	ldr	r2, [pc, #124]	; (800ca34 <HAL_TIM_PWM_Stop_IT+0x130>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d101      	bne.n	800c9c0 <HAL_TIM_PWM_Stop_IT+0xbc>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e000      	b.n	800c9c2 <HAL_TIM_PWM_Stop_IT+0xbe>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d017      	beq.n	800c9f6 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6a1a      	ldr	r2, [r3, #32]
 800c9cc:	f241 1311 	movw	r3, #4369	; 0x1111
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10f      	bne.n	800c9f6 <HAL_TIM_PWM_Stop_IT+0xf2>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	6a1a      	ldr	r2, [r3, #32]
 800c9dc:	f240 4344 	movw	r3, #1092	; 0x444
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d107      	bne.n	800c9f6 <HAL_TIM_PWM_Stop_IT+0xf2>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c9f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6a1a      	ldr	r2, [r3, #32]
 800c9fc:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca00:	4013      	ands	r3, r2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10f      	bne.n	800ca26 <HAL_TIM_PWM_Stop_IT+0x122>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	6a1a      	ldr	r2, [r3, #32]
 800ca0c:	f240 4344 	movw	r3, #1092	; 0x444
 800ca10:	4013      	ands	r3, r2
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d107      	bne.n	800ca26 <HAL_TIM_PWM_Stop_IT+0x122>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f022 0201 	bic.w	r2, r2, #1
 800ca24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	40010000 	.word	0x40010000
 800ca34:	40010400 	.word	0x40010400

0800ca38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	f003 0302 	and.w	r3, r3, #2
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d122      	bne.n	800ca94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f003 0302 	and.w	r3, r3, #2
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d11b      	bne.n	800ca94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f06f 0202 	mvn.w	r2, #2
 800ca64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	f003 0303 	and.w	r3, r3, #3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fa92 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800ca80:	e005      	b.n	800ca8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fa84 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fa95 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	f003 0304 	and.w	r3, r3, #4
 800ca9e:	2b04      	cmp	r3, #4
 800caa0:	d122      	bne.n	800cae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f003 0304 	and.w	r3, r3, #4
 800caac:	2b04      	cmp	r3, #4
 800caae:	d11b      	bne.n	800cae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f06f 0204 	mvn.w	r2, #4
 800cab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2202      	movs	r2, #2
 800cabe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fa68 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800cad4:	e005      	b.n	800cae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa5a 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fa6b 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	f003 0308 	and.w	r3, r3, #8
 800caf2:	2b08      	cmp	r3, #8
 800caf4:	d122      	bne.n	800cb3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	f003 0308 	and.w	r3, r3, #8
 800cb00:	2b08      	cmp	r3, #8
 800cb02:	d11b      	bne.n	800cb3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f06f 0208 	mvn.w	r2, #8
 800cb0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2204      	movs	r2, #4
 800cb12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	69db      	ldr	r3, [r3, #28]
 800cb1a:	f003 0303 	and.w	r3, r3, #3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fa3e 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800cb28:	e005      	b.n	800cb36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fa30 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fa41 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	f003 0310 	and.w	r3, r3, #16
 800cb46:	2b10      	cmp	r3, #16
 800cb48:	d122      	bne.n	800cb90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f003 0310 	and.w	r3, r3, #16
 800cb54:	2b10      	cmp	r3, #16
 800cb56:	d11b      	bne.n	800cb90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f06f 0210 	mvn.w	r2, #16
 800cb60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2208      	movs	r2, #8
 800cb66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	69db      	ldr	r3, [r3, #28]
 800cb6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fa14 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800cb7c:	e005      	b.n	800cb8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fa06 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fa17 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d10e      	bne.n	800cbbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d107      	bne.n	800cbbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f06f 0201 	mvn.w	r2, #1
 800cbb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f004 f8cc 	bl	8010d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbc6:	2b80      	cmp	r3, #128	; 0x80
 800cbc8:	d10e      	bne.n	800cbe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd4:	2b80      	cmp	r3, #128	; 0x80
 800cbd6:	d107      	bne.n	800cbe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cbe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fe77 	bl	800d8d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbf2:	2b40      	cmp	r3, #64	; 0x40
 800cbf4:	d10e      	bne.n	800cc14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc00:	2b40      	cmp	r3, #64	; 0x40
 800cc02:	d107      	bne.n	800cc14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f9dc 	bl	800cfcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	f003 0320 	and.w	r3, r3, #32
 800cc1e:	2b20      	cmp	r3, #32
 800cc20:	d10e      	bne.n	800cc40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	f003 0320 	and.w	r3, r3, #32
 800cc2c:	2b20      	cmp	r3, #32
 800cc2e:	d107      	bne.n	800cc40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f06f 0220 	mvn.w	r2, #32
 800cc38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fe41 	bl	800d8c2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d101      	bne.n	800cc62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cc5e:	2302      	movs	r3, #2
 800cc60:	e0b4      	b.n	800cdcc <HAL_TIM_PWM_ConfigChannel+0x184>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b0c      	cmp	r3, #12
 800cc76:	f200 809f 	bhi.w	800cdb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800cc7a:	a201      	add	r2, pc, #4	; (adr r2, 800cc80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc80:	0800ccb5 	.word	0x0800ccb5
 800cc84:	0800cdb9 	.word	0x0800cdb9
 800cc88:	0800cdb9 	.word	0x0800cdb9
 800cc8c:	0800cdb9 	.word	0x0800cdb9
 800cc90:	0800ccf5 	.word	0x0800ccf5
 800cc94:	0800cdb9 	.word	0x0800cdb9
 800cc98:	0800cdb9 	.word	0x0800cdb9
 800cc9c:	0800cdb9 	.word	0x0800cdb9
 800cca0:	0800cd37 	.word	0x0800cd37
 800cca4:	0800cdb9 	.word	0x0800cdb9
 800cca8:	0800cdb9 	.word	0x0800cdb9
 800ccac:	0800cdb9 	.word	0x0800cdb9
 800ccb0:	0800cd77 	.word	0x0800cd77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68b9      	ldr	r1, [r7, #8]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 fa30 	bl	800d120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	699a      	ldr	r2, [r3, #24]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f042 0208 	orr.w	r2, r2, #8
 800ccce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	699a      	ldr	r2, [r3, #24]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f022 0204 	bic.w	r2, r2, #4
 800ccde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6999      	ldr	r1, [r3, #24]
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	691a      	ldr	r2, [r3, #16]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	430a      	orrs	r2, r1
 800ccf0:	619a      	str	r2, [r3, #24]
      break;
 800ccf2:	e062      	b.n	800cdba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68b9      	ldr	r1, [r7, #8]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 fa80 	bl	800d200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	699a      	ldr	r2, [r3, #24]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	699a      	ldr	r2, [r3, #24]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6999      	ldr	r1, [r3, #24]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	021a      	lsls	r2, r3, #8
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	619a      	str	r2, [r3, #24]
      break;
 800cd34:	e041      	b.n	800cdba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68b9      	ldr	r1, [r7, #8]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 fad5 	bl	800d2ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	69da      	ldr	r2, [r3, #28]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f042 0208 	orr.w	r2, r2, #8
 800cd50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	69da      	ldr	r2, [r3, #28]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f022 0204 	bic.w	r2, r2, #4
 800cd60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	69d9      	ldr	r1, [r3, #28]
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	691a      	ldr	r2, [r3, #16]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	430a      	orrs	r2, r1
 800cd72:	61da      	str	r2, [r3, #28]
      break;
 800cd74:	e021      	b.n	800cdba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 fb29 	bl	800d3d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69da      	ldr	r2, [r3, #28]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	69da      	ldr	r2, [r3, #28]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cda0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	69d9      	ldr	r1, [r3, #28]
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	021a      	lsls	r2, r3, #8
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	430a      	orrs	r2, r1
 800cdb4:	61da      	str	r2, [r3, #28]
      break;
 800cdb6:	e000      	b.n	800cdba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cdb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d101      	bne.n	800cdec <HAL_TIM_GenerateEvent+0x18>
 800cde8:	2302      	movs	r3, #2
 800cdea:	e014      	b.n	800ce16 <HAL_TIM_GenerateEvent+0x42>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d101      	bne.n	800ce3a <HAL_TIM_ConfigClockSource+0x18>
 800ce36:	2302      	movs	r3, #2
 800ce38:	e0a6      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x166>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2202      	movs	r2, #2
 800ce46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ce58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce60:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b40      	cmp	r3, #64	; 0x40
 800ce70:	d067      	beq.n	800cf42 <HAL_TIM_ConfigClockSource+0x120>
 800ce72:	2b40      	cmp	r3, #64	; 0x40
 800ce74:	d80b      	bhi.n	800ce8e <HAL_TIM_ConfigClockSource+0x6c>
 800ce76:	2b10      	cmp	r3, #16
 800ce78:	d073      	beq.n	800cf62 <HAL_TIM_ConfigClockSource+0x140>
 800ce7a:	2b10      	cmp	r3, #16
 800ce7c:	d802      	bhi.n	800ce84 <HAL_TIM_ConfigClockSource+0x62>
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d06f      	beq.n	800cf62 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ce82:	e078      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ce84:	2b20      	cmp	r3, #32
 800ce86:	d06c      	beq.n	800cf62 <HAL_TIM_ConfigClockSource+0x140>
 800ce88:	2b30      	cmp	r3, #48	; 0x30
 800ce8a:	d06a      	beq.n	800cf62 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ce8c:	e073      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ce8e:	2b70      	cmp	r3, #112	; 0x70
 800ce90:	d00d      	beq.n	800ceae <HAL_TIM_ConfigClockSource+0x8c>
 800ce92:	2b70      	cmp	r3, #112	; 0x70
 800ce94:	d804      	bhi.n	800cea0 <HAL_TIM_ConfigClockSource+0x7e>
 800ce96:	2b50      	cmp	r3, #80	; 0x50
 800ce98:	d033      	beq.n	800cf02 <HAL_TIM_ConfigClockSource+0xe0>
 800ce9a:	2b60      	cmp	r3, #96	; 0x60
 800ce9c:	d041      	beq.n	800cf22 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ce9e:	e06a      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cea4:	d066      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x152>
 800cea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceaa:	d017      	beq.n	800cedc <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ceac:	e063      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	6899      	ldr	r1, [r3, #8]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	f000 fb59 	bl	800d574 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ced0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	609a      	str	r2, [r3, #8]
      break;
 800ceda:	e04c      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6818      	ldr	r0, [r3, #0]
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	6899      	ldr	r1, [r3, #8]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	685a      	ldr	r2, [r3, #4]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	f000 fb42 	bl	800d574 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	689a      	ldr	r2, [r3, #8]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cefe:	609a      	str	r2, [r3, #8]
      break;
 800cf00:	e039      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6818      	ldr	r0, [r3, #0]
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	6859      	ldr	r1, [r3, #4]
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f000 fab6 	bl	800d480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2150      	movs	r1, #80	; 0x50
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f000 fb0f 	bl	800d53e <TIM_ITRx_SetConfig>
      break;
 800cf20:	e029      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	6859      	ldr	r1, [r3, #4]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f000 fad5 	bl	800d4de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2160      	movs	r1, #96	; 0x60
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 faff 	bl	800d53e <TIM_ITRx_SetConfig>
      break;
 800cf40:	e019      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6818      	ldr	r0, [r3, #0]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	6859      	ldr	r1, [r3, #4]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f000 fa96 	bl	800d480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2140      	movs	r1, #64	; 0x40
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 faef 	bl	800d53e <TIM_ITRx_SetConfig>
      break;
 800cf60:	e009      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	f000 fae6 	bl	800d53e <TIM_ITRx_SetConfig>
      break;
 800cf72:	e000      	b.n	800cf76 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800cf74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a40      	ldr	r2, [pc, #256]	; (800d0f4 <TIM_Base_SetConfig+0x114>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d013      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cffe:	d00f      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a3d      	ldr	r2, [pc, #244]	; (800d0f8 <TIM_Base_SetConfig+0x118>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00b      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a3c      	ldr	r2, [pc, #240]	; (800d0fc <TIM_Base_SetConfig+0x11c>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d007      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a3b      	ldr	r2, [pc, #236]	; (800d100 <TIM_Base_SetConfig+0x120>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a3a      	ldr	r2, [pc, #232]	; (800d104 <TIM_Base_SetConfig+0x124>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d108      	bne.n	800d032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a2f      	ldr	r2, [pc, #188]	; (800d0f4 <TIM_Base_SetConfig+0x114>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d02b      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d040:	d027      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a2c      	ldr	r2, [pc, #176]	; (800d0f8 <TIM_Base_SetConfig+0x118>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d023      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a2b      	ldr	r2, [pc, #172]	; (800d0fc <TIM_Base_SetConfig+0x11c>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d01f      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a2a      	ldr	r2, [pc, #168]	; (800d100 <TIM_Base_SetConfig+0x120>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d01b      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a29      	ldr	r2, [pc, #164]	; (800d104 <TIM_Base_SetConfig+0x124>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d017      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a28      	ldr	r2, [pc, #160]	; (800d108 <TIM_Base_SetConfig+0x128>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d013      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a27      	ldr	r2, [pc, #156]	; (800d10c <TIM_Base_SetConfig+0x12c>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d00f      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a26      	ldr	r2, [pc, #152]	; (800d110 <TIM_Base_SetConfig+0x130>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d00b      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a25      	ldr	r2, [pc, #148]	; (800d114 <TIM_Base_SetConfig+0x134>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d007      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a24      	ldr	r2, [pc, #144]	; (800d118 <TIM_Base_SetConfig+0x138>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d003      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a23      	ldr	r2, [pc, #140]	; (800d11c <TIM_Base_SetConfig+0x13c>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d108      	bne.n	800d0a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	695b      	ldr	r3, [r3, #20]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	689a      	ldr	r2, [r3, #8]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a0a      	ldr	r2, [pc, #40]	; (800d0f4 <TIM_Base_SetConfig+0x114>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d003      	beq.n	800d0d8 <TIM_Base_SetConfig+0xf8>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a0c      	ldr	r2, [pc, #48]	; (800d104 <TIM_Base_SetConfig+0x124>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d103      	bne.n	800d0e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	615a      	str	r2, [r3, #20]
}
 800d0e6:	bf00      	nop
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	40010000 	.word	0x40010000
 800d0f8:	40000400 	.word	0x40000400
 800d0fc:	40000800 	.word	0x40000800
 800d100:	40000c00 	.word	0x40000c00
 800d104:	40010400 	.word	0x40010400
 800d108:	40014000 	.word	0x40014000
 800d10c:	40014400 	.word	0x40014400
 800d110:	40014800 	.word	0x40014800
 800d114:	40001800 	.word	0x40001800
 800d118:	40001c00 	.word	0x40001c00
 800d11c:	40002000 	.word	0x40002000

0800d120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	f023 0201 	bic.w	r2, r3, #1
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	699b      	ldr	r3, [r3, #24]
 800d146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f023 0303 	bic.w	r3, r3, #3
 800d156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4313      	orrs	r3, r2
 800d160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f023 0302 	bic.w	r3, r3, #2
 800d168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	697a      	ldr	r2, [r7, #20]
 800d170:	4313      	orrs	r3, r2
 800d172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a20      	ldr	r2, [pc, #128]	; (800d1f8 <TIM_OC1_SetConfig+0xd8>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d003      	beq.n	800d184 <TIM_OC1_SetConfig+0x64>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a1f      	ldr	r2, [pc, #124]	; (800d1fc <TIM_OC1_SetConfig+0xdc>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d10c      	bne.n	800d19e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	f023 0308 	bic.w	r3, r3, #8
 800d18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	697a      	ldr	r2, [r7, #20]
 800d192:	4313      	orrs	r3, r2
 800d194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f023 0304 	bic.w	r3, r3, #4
 800d19c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a15      	ldr	r2, [pc, #84]	; (800d1f8 <TIM_OC1_SetConfig+0xd8>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d003      	beq.n	800d1ae <TIM_OC1_SetConfig+0x8e>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a14      	ldr	r2, [pc, #80]	; (800d1fc <TIM_OC1_SetConfig+0xdc>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d111      	bne.n	800d1d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	693a      	ldr	r2, [r7, #16]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	693a      	ldr	r2, [r7, #16]
 800d1d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	621a      	str	r2, [r3, #32]
}
 800d1ec:	bf00      	nop
 800d1ee:	371c      	adds	r7, #28
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	40010000 	.word	0x40010000
 800d1fc:	40010400 	.word	0x40010400

0800d200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d200:	b480      	push	{r7}
 800d202:	b087      	sub	sp, #28
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	f023 0210 	bic.w	r2, r3, #16
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	021b      	lsls	r3, r3, #8
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4313      	orrs	r3, r2
 800d242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	f023 0320 	bic.w	r3, r3, #32
 800d24a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	4313      	orrs	r3, r2
 800d256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a22      	ldr	r2, [pc, #136]	; (800d2e4 <TIM_OC2_SetConfig+0xe4>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d003      	beq.n	800d268 <TIM_OC2_SetConfig+0x68>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a21      	ldr	r2, [pc, #132]	; (800d2e8 <TIM_OC2_SetConfig+0xe8>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d10d      	bne.n	800d284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	4313      	orrs	r3, r2
 800d27a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a17      	ldr	r2, [pc, #92]	; (800d2e4 <TIM_OC2_SetConfig+0xe4>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d003      	beq.n	800d294 <TIM_OC2_SetConfig+0x94>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a16      	ldr	r2, [pc, #88]	; (800d2e8 <TIM_OC2_SetConfig+0xe8>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d113      	bne.n	800d2bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d29a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	621a      	str	r2, [r3, #32]
}
 800d2d6:	bf00      	nop
 800d2d8:	371c      	adds	r7, #28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	40010000 	.word	0x40010000
 800d2e8:	40010400 	.word	0x40010400

0800d2ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b087      	sub	sp, #28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f023 0303 	bic.w	r3, r3, #3
 800d322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	4313      	orrs	r3, r2
 800d32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	4313      	orrs	r3, r2
 800d340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a21      	ldr	r2, [pc, #132]	; (800d3cc <TIM_OC3_SetConfig+0xe0>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d003      	beq.n	800d352 <TIM_OC3_SetConfig+0x66>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a20      	ldr	r2, [pc, #128]	; (800d3d0 <TIM_OC3_SetConfig+0xe4>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d10d      	bne.n	800d36e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	021b      	lsls	r3, r3, #8
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	4313      	orrs	r3, r2
 800d364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4a16      	ldr	r2, [pc, #88]	; (800d3cc <TIM_OC3_SetConfig+0xe0>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d003      	beq.n	800d37e <TIM_OC3_SetConfig+0x92>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a15      	ldr	r2, [pc, #84]	; (800d3d0 <TIM_OC3_SetConfig+0xe4>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d113      	bne.n	800d3a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	695b      	ldr	r3, [r3, #20]
 800d392:	011b      	lsls	r3, r3, #4
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	4313      	orrs	r3, r2
 800d398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	011b      	lsls	r3, r3, #4
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	621a      	str	r2, [r3, #32]
}
 800d3c0:	bf00      	nop
 800d3c2:	371c      	adds	r7, #28
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	40010000 	.word	0x40010000
 800d3d0:	40010400 	.word	0x40010400

0800d3d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d40a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	021b      	lsls	r3, r3, #8
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4313      	orrs	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	031b      	lsls	r3, r3, #12
 800d426:	693a      	ldr	r2, [r7, #16]
 800d428:	4313      	orrs	r3, r2
 800d42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a12      	ldr	r2, [pc, #72]	; (800d478 <TIM_OC4_SetConfig+0xa4>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d003      	beq.n	800d43c <TIM_OC4_SetConfig+0x68>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a11      	ldr	r2, [pc, #68]	; (800d47c <TIM_OC4_SetConfig+0xa8>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d109      	bne.n	800d450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	019b      	lsls	r3, r3, #6
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	621a      	str	r2, [r3, #32]
}
 800d46a:	bf00      	nop
 800d46c:	371c      	adds	r7, #28
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	40010000 	.word	0x40010000
 800d47c:	40010400 	.word	0x40010400

0800d480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d480:	b480      	push	{r7}
 800d482:	b087      	sub	sp, #28
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6a1b      	ldr	r3, [r3, #32]
 800d490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	f023 0201 	bic.w	r2, r3, #1
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	699b      	ldr	r3, [r3, #24]
 800d4a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	011b      	lsls	r3, r3, #4
 800d4b0:	693a      	ldr	r2, [r7, #16]
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f023 030a 	bic.w	r3, r3, #10
 800d4bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	621a      	str	r2, [r3, #32]
}
 800d4d2:	bf00      	nop
 800d4d4:	371c      	adds	r7, #28
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4de:	b480      	push	{r7}
 800d4e0:	b087      	sub	sp, #28
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	60f8      	str	r0, [r7, #12]
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	f023 0210 	bic.w	r2, r3, #16
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	699b      	ldr	r3, [r3, #24]
 800d4fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	031b      	lsls	r3, r3, #12
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	4313      	orrs	r3, r2
 800d512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d51a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	011b      	lsls	r3, r3, #4
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	4313      	orrs	r3, r2
 800d524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	621a      	str	r2, [r3, #32]
}
 800d532:	bf00      	nop
 800d534:	371c      	adds	r7, #28
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d53e:	b480      	push	{r7}
 800d540:	b085      	sub	sp, #20
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	f043 0307 	orr.w	r3, r3, #7
 800d560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	609a      	str	r2, [r3, #8]
}
 800d568:	bf00      	nop
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d574:	b480      	push	{r7}
 800d576:	b087      	sub	sp, #28
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
 800d580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d58e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	021a      	lsls	r2, r3, #8
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	431a      	orrs	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	697a      	ldr	r2, [r7, #20]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	697a      	ldr	r2, [r7, #20]
 800d5a6:	609a      	str	r2, [r3, #8]
}
 800d5a8:	bf00      	nop
 800d5aa:	371c      	adds	r7, #28
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f003 031f 	and.w	r3, r3, #31
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6a1a      	ldr	r2, [r3, #32]
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	43db      	mvns	r3, r3
 800d5d6:	401a      	ands	r2, r3
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6a1a      	ldr	r2, [r3, #32]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	f003 031f 	and.w	r3, r3, #31
 800d5e6:	6879      	ldr	r1, [r7, #4]
 800d5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ec:	431a      	orrs	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	621a      	str	r2, [r3, #32]
}
 800d5f2:	bf00      	nop
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr

0800d5fe <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b084      	sub	sp, #16
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2b04      	cmp	r3, #4
 800d60c:	d00d      	beq.n	800d62a <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d60e:	2b08      	cmp	r3, #8
 800d610:	d014      	beq.n	800d63c <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d612:	2b00      	cmp	r3, #0
 800d614:	d000      	beq.n	800d618 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d616:	e01a      	b.n	800d64e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68da      	ldr	r2, [r3, #12]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f042 0202 	orr.w	r2, r2, #2
 800d626:	60da      	str	r2, [r3, #12]
      break;
 800d628:	e011      	b.n	800d64e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	68da      	ldr	r2, [r3, #12]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f042 0204 	orr.w	r2, r2, #4
 800d638:	60da      	str	r2, [r3, #12]
      break;
 800d63a:	e008      	b.n	800d64e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68da      	ldr	r2, [r3, #12]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f042 0208 	orr.w	r2, r2, #8
 800d64a:	60da      	str	r2, [r3, #12]
      break;
 800d64c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68da      	ldr	r2, [r3, #12]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d65c:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2204      	movs	r2, #4
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	4618      	mov	r0, r3
 800d668:	f000 f93f 	bl	800d8ea <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d67a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	f003 0307 	and.w	r3, r3, #7
 800d686:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2b06      	cmp	r3, #6
 800d68c:	d007      	beq.n	800d69e <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f042 0201 	orr.w	r2, r2, #1
 800d69c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b04      	cmp	r3, #4
 800d6b6:	d00d      	beq.n	800d6d4 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d6b8:	2b08      	cmp	r3, #8
 800d6ba:	d014      	beq.n	800d6e6 <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d000      	beq.n	800d6c2 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d6c0:	e01a      	b.n	800d6f8 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	68da      	ldr	r2, [r3, #12]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f022 0202 	bic.w	r2, r2, #2
 800d6d0:	60da      	str	r2, [r3, #12]
      break;
 800d6d2:	e011      	b.n	800d6f8 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68da      	ldr	r2, [r3, #12]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f022 0204 	bic.w	r2, r2, #4
 800d6e2:	60da      	str	r2, [r3, #12]
      break;
 800d6e4:	e008      	b.n	800d6f8 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f022 0208 	bic.w	r2, r2, #8
 800d6f4:	60da      	str	r2, [r3, #12]
      break;
 800d6f6:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f000 f8f2 	bl	800d8ea <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	f240 4344 	movw	r3, #1092	; 0x444
 800d714:	4013      	ands	r3, r2
 800d716:	2b00      	cmp	r3, #0
 800d718:	d107      	bne.n	800d72a <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68da      	ldr	r2, [r3, #12]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d728:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6a1a      	ldr	r2, [r3, #32]
 800d730:	f241 1311 	movw	r3, #4369	; 0x1111
 800d734:	4013      	ands	r3, r2
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10f      	bne.n	800d75a <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6a1a      	ldr	r2, [r3, #32]
 800d740:	f240 4344 	movw	r3, #1092	; 0x444
 800d744:	4013      	ands	r3, r2
 800d746:	2b00      	cmp	r3, #0
 800d748:	d107      	bne.n	800d75a <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d758:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6a1a      	ldr	r2, [r3, #32]
 800d760:	f241 1311 	movw	r3, #4369	; 0x1111
 800d764:	4013      	ands	r3, r2
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10f      	bne.n	800d78a <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	6a1a      	ldr	r2, [r3, #32]
 800d770:	f240 4344 	movw	r3, #1092	; 0x444
 800d774:	4013      	ands	r3, r2
 800d776:	2b00      	cmp	r3, #0
 800d778:	d107      	bne.n	800d78a <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f022 0201 	bic.w	r2, r2, #1
 800d788:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d101      	bne.n	800d7ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	e032      	b.n	800d812 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2202      	movs	r2, #2
 800d7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7e4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d81e:	b480      	push	{r7}
 800d820:	b085      	sub	sp, #20
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d832:	2b01      	cmp	r3, #1
 800d834:	d101      	bne.n	800d83a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d836:	2302      	movs	r3, #2
 800d838:	e03d      	b.n	800d8b6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	4313      	orrs	r3, r2
 800d86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4313      	orrs	r3, r2
 800d878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	4313      	orrs	r3, r2
 800d886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	4313      	orrs	r3, r2
 800d894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	69db      	ldr	r3, [r3, #28]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b083      	sub	sp, #12
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d8ca:	bf00      	nop
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b087      	sub	sp, #28
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	60f8      	str	r0, [r7, #12]
 800d8f2:	60b9      	str	r1, [r7, #8]
 800d8f4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f003 031f 	and.w	r3, r3, #31
 800d8fc:	2204      	movs	r2, #4
 800d8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d902:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6a1a      	ldr	r2, [r3, #32]
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	43db      	mvns	r3, r3
 800d90c:	401a      	ands	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6a1a      	ldr	r2, [r3, #32]
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	f003 031f 	and.w	r3, r3, #31
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	fa01 f303 	lsl.w	r3, r1, r3
 800d922:	431a      	orrs	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	621a      	str	r2, [r3, #32]
}
 800d928:	bf00      	nop
 800d92a:	371c      	adds	r7, #28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d101      	bne.n	800d946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	e03f      	b.n	800d9c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f004 fada 	bl	8011f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2224      	movs	r2, #36	; 0x24
 800d964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68da      	ldr	r2, [r3, #12]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 fb47 	bl	800e00c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	691a      	ldr	r2, [r3, #16]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d98c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	695a      	ldr	r2, [r3, #20]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d99c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	68da      	ldr	r2, [r3, #12]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d9ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2220      	movs	r2, #32
 800d9b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2220      	movs	r2, #32
 800d9c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b088      	sub	sp, #32
 800d9d2:	af02      	add	r7, sp, #8
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	60b9      	str	r1, [r7, #8]
 800d9d8:	603b      	str	r3, [r7, #0]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b20      	cmp	r3, #32
 800d9ec:	f040 8083 	bne.w	800daf6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <HAL_UART_Transmit+0x2e>
 800d9f6:	88fb      	ldrh	r3, [r7, #6]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d101      	bne.n	800da00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e07b      	b.n	800daf8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800da06:	2b01      	cmp	r3, #1
 800da08:	d101      	bne.n	800da0e <HAL_UART_Transmit+0x40>
 800da0a:	2302      	movs	r3, #2
 800da0c:	e074      	b.n	800daf8 <HAL_UART_Transmit+0x12a>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2221      	movs	r2, #33	; 0x21
 800da20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800da24:	f7fb fa2e 	bl	8008e84 <HAL_GetTick>
 800da28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	88fa      	ldrh	r2, [r7, #6]
 800da2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	88fa      	ldrh	r2, [r7, #6]
 800da34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800da36:	e042      	b.n	800dabe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	3b01      	subs	r3, #1
 800da40:	b29a      	uxth	r2, r3
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da4e:	d122      	bne.n	800da96 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2200      	movs	r2, #0
 800da58:	2180      	movs	r1, #128	; 0x80
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 f96a 	bl	800dd34 <UART_WaitOnFlagUntilTimeout>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800da66:	2303      	movs	r3, #3
 800da68:	e046      	b.n	800daf8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d103      	bne.n	800da8e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	3302      	adds	r3, #2
 800da8a:	60bb      	str	r3, [r7, #8]
 800da8c:	e017      	b.n	800dabe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	3301      	adds	r3, #1
 800da92:	60bb      	str	r3, [r7, #8]
 800da94:	e013      	b.n	800dabe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2200      	movs	r2, #0
 800da9e:	2180      	movs	r1, #128	; 0x80
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 f947 	bl	800dd34 <UART_WaitOnFlagUntilTimeout>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d001      	beq.n	800dab0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e023      	b.n	800daf8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	1c5a      	adds	r2, r3, #1
 800dab4:	60ba      	str	r2, [r7, #8]
 800dab6:	781a      	ldrb	r2, [r3, #0]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1b7      	bne.n	800da38 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2200      	movs	r2, #0
 800dad0:	2140      	movs	r1, #64	; 0x40
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f000 f92e 	bl	800dd34 <UART_WaitOnFlagUntilTimeout>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d001      	beq.n	800dae2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800dade:	2303      	movs	r3, #3
 800dae0:	e00a      	b.n	800daf8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	e000      	b.n	800daf8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800daf6:	2302      	movs	r3, #2
  }
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b088      	sub	sp, #32
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	695b      	ldr	r3, [r3, #20]
 800db1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800db20:	2300      	movs	r3, #0
 800db22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800db24:	2300      	movs	r3, #0
 800db26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	f003 030f 	and.w	r3, r3, #15
 800db2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10d      	bne.n	800db52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	f003 0320 	and.w	r3, r3, #32
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d008      	beq.n	800db52 <HAL_UART_IRQHandler+0x52>
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	f003 0320 	and.w	r3, r3, #32
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f9dc 	bl	800df08 <UART_Receive_IT>
      return;
 800db50:	e0cc      	b.n	800dcec <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	f000 80ab 	beq.w	800dcb0 <HAL_UART_IRQHandler+0x1b0>
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	f003 0301 	and.w	r3, r3, #1
 800db60:	2b00      	cmp	r3, #0
 800db62:	d105      	bne.n	800db70 <HAL_UART_IRQHandler+0x70>
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 80a0 	beq.w	800dcb0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <HAL_UART_IRQHandler+0x90>
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db80:	2b00      	cmp	r3, #0
 800db82:	d005      	beq.n	800db90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db88:	f043 0201 	orr.w	r2, r3, #1
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	f003 0304 	and.w	r3, r3, #4
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00a      	beq.n	800dbb0 <HAL_UART_IRQHandler+0xb0>
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f003 0301 	and.w	r3, r3, #1
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d005      	beq.n	800dbb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba8:	f043 0202 	orr.w	r2, r3, #2
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	f003 0302 	and.w	r3, r3, #2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00a      	beq.n	800dbd0 <HAL_UART_IRQHandler+0xd0>
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d005      	beq.n	800dbd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc8:	f043 0204 	orr.w	r2, r3, #4
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	f003 0308 	and.w	r3, r3, #8
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <HAL_UART_IRQHandler+0xf0>
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d005      	beq.n	800dbf0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe8:	f043 0208 	orr.w	r2, r3, #8
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d078      	beq.n	800dcea <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	f003 0320 	and.w	r3, r3, #32
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d007      	beq.n	800dc12 <HAL_UART_IRQHandler+0x112>
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	f003 0320 	and.w	r3, r3, #32
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d002      	beq.n	800dc12 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f97b 	bl	800df08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	695b      	ldr	r3, [r3, #20]
 800dc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1c:	2b40      	cmp	r3, #64	; 0x40
 800dc1e:	bf0c      	ite	eq
 800dc20:	2301      	moveq	r3, #1
 800dc22:	2300      	movne	r3, #0
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc2c:	f003 0308 	and.w	r3, r3, #8
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <HAL_UART_IRQHandler+0x13a>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d031      	beq.n	800dc9e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f8c4 	bl	800ddc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4a:	2b40      	cmp	r3, #64	; 0x40
 800dc4c:	d123      	bne.n	800dc96 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	695a      	ldr	r2, [r3, #20]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d013      	beq.n	800dc8e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6a:	4a22      	ldr	r2, [pc, #136]	; (800dcf4 <HAL_UART_IRQHandler+0x1f4>)
 800dc6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fc fb72 	bl	800a35c <HAL_DMA_Abort_IT>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d016      	beq.n	800dcac <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dc88:	4610      	mov	r0, r2
 800dc8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc8c:	e00e      	b.n	800dcac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f846 	bl	800dd20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc94:	e00a      	b.n	800dcac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f842 	bl	800dd20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc9c:	e006      	b.n	800dcac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 f83e 	bl	800dd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800dcaa:	e01e      	b.n	800dcea <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcac:	bf00      	nop
    return;
 800dcae:	e01c      	b.n	800dcea <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d008      	beq.n	800dccc <HAL_UART_IRQHandler+0x1cc>
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d003      	beq.n	800dccc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f8b1 	bl	800de2c <UART_Transmit_IT>
    return;
 800dcca:	e00f      	b.n	800dcec <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00a      	beq.n	800dcec <HAL_UART_IRQHandler+0x1ec>
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d005      	beq.n	800dcec <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 f8f9 	bl	800ded8 <UART_EndTransmit_IT>
    return;
 800dce6:	bf00      	nop
 800dce8:	e000      	b.n	800dcec <HAL_UART_IRQHandler+0x1ec>
    return;
 800dcea:	bf00      	nop
  }
}
 800dcec:	3720      	adds	r7, #32
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	0800de05 	.word	0x0800de05

0800dcf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800dd14:	bf00      	nop
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dd28:	bf00      	nop
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	603b      	str	r3, [r7, #0]
 800dd40:	4613      	mov	r3, r2
 800dd42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd44:	e02c      	b.n	800dda0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4c:	d028      	beq.n	800dda0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d007      	beq.n	800dd64 <UART_WaitOnFlagUntilTimeout+0x30>
 800dd54:	f7fb f896 	bl	8008e84 <HAL_GetTick>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	69ba      	ldr	r2, [r7, #24]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d21d      	bcs.n	800dda0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	68da      	ldr	r2, [r3, #12]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dd72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	695a      	ldr	r2, [r3, #20]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f022 0201 	bic.w	r2, r2, #1
 800dd82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2220      	movs	r2, #32
 800dd88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	e00f      	b.n	800ddc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	4013      	ands	r3, r2
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	bf0c      	ite	eq
 800ddb0:	2301      	moveq	r3, #1
 800ddb2:	2300      	movne	r3, #0
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	79fb      	ldrb	r3, [r7, #7]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d0c3      	beq.n	800dd46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68da      	ldr	r2, [r3, #12]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ddde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	695a      	ldr	r2, [r3, #20]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f022 0201 	bic.w	r2, r2, #1
 800ddee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2220      	movs	r2, #32
 800ddf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ddf8:	bf00      	nop
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2200      	movs	r2, #0
 800de1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f7ff ff7e 	bl	800dd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de24:	bf00      	nop
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b21      	cmp	r3, #33	; 0x21
 800de3e:	d144      	bne.n	800deca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de48:	d11a      	bne.n	800de80 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	881b      	ldrh	r3, [r3, #0]
 800de54:	461a      	mov	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de5e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d105      	bne.n	800de74 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6a1b      	ldr	r3, [r3, #32]
 800de6c:	1c9a      	adds	r2, r3, #2
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	621a      	str	r2, [r3, #32]
 800de72:	e00e      	b.n	800de92 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6a1b      	ldr	r3, [r3, #32]
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	621a      	str	r2, [r3, #32]
 800de7e:	e008      	b.n	800de92 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	1c59      	adds	r1, r3, #1
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	6211      	str	r1, [r2, #32]
 800de8a:	781a      	ldrb	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de96:	b29b      	uxth	r3, r3
 800de98:	3b01      	subs	r3, #1
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	4619      	mov	r1, r3
 800dea0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10f      	bne.n	800dec6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68da      	ldr	r2, [r3, #12]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800deb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	68da      	ldr	r2, [r3, #12]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dec4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	e000      	b.n	800decc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800deca:	2302      	movs	r3, #2
  }
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68da      	ldr	r2, [r3, #12]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2220      	movs	r2, #32
 800def4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7ff fefd 	bl	800dcf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b22      	cmp	r3, #34	; 0x22
 800df1a:	d171      	bne.n	800e000 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df24:	d123      	bne.n	800df6e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df2a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10e      	bne.n	800df52 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df40:	b29a      	uxth	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df4a:	1c9a      	adds	r2, r3, #2
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	629a      	str	r2, [r3, #40]	; 0x28
 800df50:	e029      	b.n	800dfa6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	b29b      	uxth	r3, r3
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	629a      	str	r2, [r3, #40]	; 0x28
 800df6c:	e01b      	b.n	800dfa6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10a      	bne.n	800df8c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	6858      	ldr	r0, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df80:	1c59      	adds	r1, r3, #1
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	6291      	str	r1, [r2, #40]	; 0x28
 800df86:	b2c2      	uxtb	r2, r0
 800df88:	701a      	strb	r2, [r3, #0]
 800df8a:	e00c      	b.n	800dfa6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	b2da      	uxtb	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df98:	1c58      	adds	r0, r3, #1
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	6288      	str	r0, [r1, #40]	; 0x28
 800df9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	3b01      	subs	r3, #1
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d120      	bne.n	800dffc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68da      	ldr	r2, [r3, #12]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f022 0220 	bic.w	r2, r2, #32
 800dfc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68da      	ldr	r2, [r3, #12]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	695a      	ldr	r2, [r3, #20]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f022 0201 	bic.w	r2, r2, #1
 800dfe8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2220      	movs	r2, #32
 800dfee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7ff fe8a 	bl	800dd0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	e002      	b.n	800e002 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800dffc:	2300      	movs	r3, #0
 800dffe:	e000      	b.n	800e002 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e000:	2302      	movs	r3, #2
  }
}
 800e002:	4618      	mov	r0, r3
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e00c:	b5b0      	push	{r4, r5, r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	68da      	ldr	r2, [r3, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	430a      	orrs	r2, r1
 800e028:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	689a      	ldr	r2, [r3, #8]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	431a      	orrs	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	695b      	ldr	r3, [r3, #20]
 800e038:	431a      	orrs	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	69db      	ldr	r3, [r3, #28]
 800e03e:	4313      	orrs	r3, r2
 800e040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e04c:	f023 030c 	bic.w	r3, r3, #12
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	6812      	ldr	r2, [r2, #0]
 800e054:	68f9      	ldr	r1, [r7, #12]
 800e056:	430b      	orrs	r3, r1
 800e058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	699a      	ldr	r2, [r3, #24]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	430a      	orrs	r2, r1
 800e06e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	69db      	ldr	r3, [r3, #28]
 800e074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e078:	f040 80e4 	bne.w	800e244 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4aab      	ldr	r2, [pc, #684]	; (800e330 <UART_SetConfig+0x324>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d004      	beq.n	800e090 <UART_SetConfig+0x84>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4aaa      	ldr	r2, [pc, #680]	; (800e334 <UART_SetConfig+0x328>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d16c      	bne.n	800e16a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e090:	f7fd f998 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e094:	4602      	mov	r2, r0
 800e096:	4613      	mov	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	009a      	lsls	r2, r3, #2
 800e09e:	441a      	add	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	005b      	lsls	r3, r3, #1
 800e0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0aa:	4aa3      	ldr	r2, [pc, #652]	; (800e338 <UART_SetConfig+0x32c>)
 800e0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b0:	095b      	lsrs	r3, r3, #5
 800e0b2:	011c      	lsls	r4, r3, #4
 800e0b4:	f7fd f986 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009a      	lsls	r2, r3, #2
 800e0c2:	441a      	add	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	005b      	lsls	r3, r3, #1
 800e0ca:	fbb2 f5f3 	udiv	r5, r2, r3
 800e0ce:	f7fd f979 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	009a      	lsls	r2, r3, #2
 800e0dc:	441a      	add	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	005b      	lsls	r3, r3, #1
 800e0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0e8:	4a93      	ldr	r2, [pc, #588]	; (800e338 <UART_SetConfig+0x32c>)
 800e0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ee:	095b      	lsrs	r3, r3, #5
 800e0f0:	2264      	movs	r2, #100	; 0x64
 800e0f2:	fb02 f303 	mul.w	r3, r2, r3
 800e0f6:	1aeb      	subs	r3, r5, r3
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	3332      	adds	r3, #50	; 0x32
 800e0fc:	4a8e      	ldr	r2, [pc, #568]	; (800e338 <UART_SetConfig+0x32c>)
 800e0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e102:	095b      	lsrs	r3, r3, #5
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e10a:	441c      	add	r4, r3
 800e10c:	f7fd f95a 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e110:	4602      	mov	r2, r0
 800e112:	4613      	mov	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4413      	add	r3, r2
 800e118:	009a      	lsls	r2, r3, #2
 800e11a:	441a      	add	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	fbb2 f5f3 	udiv	r5, r2, r3
 800e126:	f7fd f94d 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e12a:	4602      	mov	r2, r0
 800e12c:	4613      	mov	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4413      	add	r3, r2
 800e132:	009a      	lsls	r2, r3, #2
 800e134:	441a      	add	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e140:	4a7d      	ldr	r2, [pc, #500]	; (800e338 <UART_SetConfig+0x32c>)
 800e142:	fba2 2303 	umull	r2, r3, r2, r3
 800e146:	095b      	lsrs	r3, r3, #5
 800e148:	2264      	movs	r2, #100	; 0x64
 800e14a:	fb02 f303 	mul.w	r3, r2, r3
 800e14e:	1aeb      	subs	r3, r5, r3
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	3332      	adds	r3, #50	; 0x32
 800e154:	4a78      	ldr	r2, [pc, #480]	; (800e338 <UART_SetConfig+0x32c>)
 800e156:	fba2 2303 	umull	r2, r3, r2, r3
 800e15a:	095b      	lsrs	r3, r3, #5
 800e15c:	f003 0207 	and.w	r2, r3, #7
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4422      	add	r2, r4
 800e166:	609a      	str	r2, [r3, #8]
 800e168:	e154      	b.n	800e414 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e16a:	f7fd f917 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e16e:	4602      	mov	r2, r0
 800e170:	4613      	mov	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	009a      	lsls	r2, r3, #2
 800e178:	441a      	add	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	005b      	lsls	r3, r3, #1
 800e180:	fbb2 f3f3 	udiv	r3, r2, r3
 800e184:	4a6c      	ldr	r2, [pc, #432]	; (800e338 <UART_SetConfig+0x32c>)
 800e186:	fba2 2303 	umull	r2, r3, r2, r3
 800e18a:	095b      	lsrs	r3, r3, #5
 800e18c:	011c      	lsls	r4, r3, #4
 800e18e:	f7fd f905 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e192:	4602      	mov	r2, r0
 800e194:	4613      	mov	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	009a      	lsls	r2, r3, #2
 800e19c:	441a      	add	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	fbb2 f5f3 	udiv	r5, r2, r3
 800e1a8:	f7fd f8f8 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009a      	lsls	r2, r3, #2
 800e1b6:	441a      	add	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1c2:	4a5d      	ldr	r2, [pc, #372]	; (800e338 <UART_SetConfig+0x32c>)
 800e1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c8:	095b      	lsrs	r3, r3, #5
 800e1ca:	2264      	movs	r2, #100	; 0x64
 800e1cc:	fb02 f303 	mul.w	r3, r2, r3
 800e1d0:	1aeb      	subs	r3, r5, r3
 800e1d2:	00db      	lsls	r3, r3, #3
 800e1d4:	3332      	adds	r3, #50	; 0x32
 800e1d6:	4a58      	ldr	r2, [pc, #352]	; (800e338 <UART_SetConfig+0x32c>)
 800e1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1dc:	095b      	lsrs	r3, r3, #5
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e1e4:	441c      	add	r4, r3
 800e1e6:	f7fd f8d9 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009a      	lsls	r2, r3, #2
 800e1f4:	441a      	add	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	fbb2 f5f3 	udiv	r5, r2, r3
 800e200:	f7fd f8cc 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e204:	4602      	mov	r2, r0
 800e206:	4613      	mov	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	009a      	lsls	r2, r3, #2
 800e20e:	441a      	add	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	fbb2 f3f3 	udiv	r3, r2, r3
 800e21a:	4a47      	ldr	r2, [pc, #284]	; (800e338 <UART_SetConfig+0x32c>)
 800e21c:	fba2 2303 	umull	r2, r3, r2, r3
 800e220:	095b      	lsrs	r3, r3, #5
 800e222:	2264      	movs	r2, #100	; 0x64
 800e224:	fb02 f303 	mul.w	r3, r2, r3
 800e228:	1aeb      	subs	r3, r5, r3
 800e22a:	00db      	lsls	r3, r3, #3
 800e22c:	3332      	adds	r3, #50	; 0x32
 800e22e:	4a42      	ldr	r2, [pc, #264]	; (800e338 <UART_SetConfig+0x32c>)
 800e230:	fba2 2303 	umull	r2, r3, r2, r3
 800e234:	095b      	lsrs	r3, r3, #5
 800e236:	f003 0207 	and.w	r2, r3, #7
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4422      	add	r2, r4
 800e240:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800e242:	e0e7      	b.n	800e414 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a39      	ldr	r2, [pc, #228]	; (800e330 <UART_SetConfig+0x324>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d004      	beq.n	800e258 <UART_SetConfig+0x24c>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a38      	ldr	r2, [pc, #224]	; (800e334 <UART_SetConfig+0x328>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d171      	bne.n	800e33c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e258:	f7fd f8b4 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e25c:	4602      	mov	r2, r0
 800e25e:	4613      	mov	r3, r2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	009a      	lsls	r2, r3, #2
 800e266:	441a      	add	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e272:	4a31      	ldr	r2, [pc, #196]	; (800e338 <UART_SetConfig+0x32c>)
 800e274:	fba2 2303 	umull	r2, r3, r2, r3
 800e278:	095b      	lsrs	r3, r3, #5
 800e27a:	011c      	lsls	r4, r3, #4
 800e27c:	f7fd f8a2 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e280:	4602      	mov	r2, r0
 800e282:	4613      	mov	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	4413      	add	r3, r2
 800e288:	009a      	lsls	r2, r3, #2
 800e28a:	441a      	add	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	fbb2 f5f3 	udiv	r5, r2, r3
 800e296:	f7fd f895 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e29a:	4602      	mov	r2, r0
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	009a      	lsls	r2, r3, #2
 800e2a4:	441a      	add	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2b0:	4a21      	ldr	r2, [pc, #132]	; (800e338 <UART_SetConfig+0x32c>)
 800e2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b6:	095b      	lsrs	r3, r3, #5
 800e2b8:	2264      	movs	r2, #100	; 0x64
 800e2ba:	fb02 f303 	mul.w	r3, r2, r3
 800e2be:	1aeb      	subs	r3, r5, r3
 800e2c0:	011b      	lsls	r3, r3, #4
 800e2c2:	3332      	adds	r3, #50	; 0x32
 800e2c4:	4a1c      	ldr	r2, [pc, #112]	; (800e338 <UART_SetConfig+0x32c>)
 800e2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2ca:	095b      	lsrs	r3, r3, #5
 800e2cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2d0:	441c      	add	r4, r3
 800e2d2:	f7fd f877 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	009a      	lsls	r2, r3, #2
 800e2e0:	441a      	add	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	fbb2 f5f3 	udiv	r5, r2, r3
 800e2ec:	f7fd f86a 	bl	800b3c4 <HAL_RCC_GetPCLK2Freq>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4413      	add	r3, r2
 800e2f8:	009a      	lsls	r2, r3, #2
 800e2fa:	441a      	add	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	fbb2 f3f3 	udiv	r3, r2, r3
 800e306:	4a0c      	ldr	r2, [pc, #48]	; (800e338 <UART_SetConfig+0x32c>)
 800e308:	fba2 2303 	umull	r2, r3, r2, r3
 800e30c:	095b      	lsrs	r3, r3, #5
 800e30e:	2264      	movs	r2, #100	; 0x64
 800e310:	fb02 f303 	mul.w	r3, r2, r3
 800e314:	1aeb      	subs	r3, r5, r3
 800e316:	011b      	lsls	r3, r3, #4
 800e318:	3332      	adds	r3, #50	; 0x32
 800e31a:	4a07      	ldr	r2, [pc, #28]	; (800e338 <UART_SetConfig+0x32c>)
 800e31c:	fba2 2303 	umull	r2, r3, r2, r3
 800e320:	095b      	lsrs	r3, r3, #5
 800e322:	f003 020f 	and.w	r2, r3, #15
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4422      	add	r2, r4
 800e32c:	609a      	str	r2, [r3, #8]
 800e32e:	e071      	b.n	800e414 <UART_SetConfig+0x408>
 800e330:	40011000 	.word	0x40011000
 800e334:	40011400 	.word	0x40011400
 800e338:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e33c:	f7fd f82e 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e340:	4602      	mov	r2, r0
 800e342:	4613      	mov	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	009a      	lsls	r2, r3, #2
 800e34a:	441a      	add	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	fbb2 f3f3 	udiv	r3, r2, r3
 800e356:	4a31      	ldr	r2, [pc, #196]	; (800e41c <UART_SetConfig+0x410>)
 800e358:	fba2 2303 	umull	r2, r3, r2, r3
 800e35c:	095b      	lsrs	r3, r3, #5
 800e35e:	011c      	lsls	r4, r3, #4
 800e360:	f7fd f81c 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e364:	4602      	mov	r2, r0
 800e366:	4613      	mov	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	009a      	lsls	r2, r3, #2
 800e36e:	441a      	add	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	fbb2 f5f3 	udiv	r5, r2, r3
 800e37a:	f7fd f80f 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e37e:	4602      	mov	r2, r0
 800e380:	4613      	mov	r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	4413      	add	r3, r2
 800e386:	009a      	lsls	r2, r3, #2
 800e388:	441a      	add	r2, r3
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	fbb2 f3f3 	udiv	r3, r2, r3
 800e394:	4a21      	ldr	r2, [pc, #132]	; (800e41c <UART_SetConfig+0x410>)
 800e396:	fba2 2303 	umull	r2, r3, r2, r3
 800e39a:	095b      	lsrs	r3, r3, #5
 800e39c:	2264      	movs	r2, #100	; 0x64
 800e39e:	fb02 f303 	mul.w	r3, r2, r3
 800e3a2:	1aeb      	subs	r3, r5, r3
 800e3a4:	011b      	lsls	r3, r3, #4
 800e3a6:	3332      	adds	r3, #50	; 0x32
 800e3a8:	4a1c      	ldr	r2, [pc, #112]	; (800e41c <UART_SetConfig+0x410>)
 800e3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ae:	095b      	lsrs	r3, r3, #5
 800e3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3b4:	441c      	add	r4, r3
 800e3b6:	f7fc fff1 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	4613      	mov	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	009a      	lsls	r2, r3, #2
 800e3c4:	441a      	add	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	fbb2 f5f3 	udiv	r5, r2, r3
 800e3d0:	f7fc ffe4 	bl	800b39c <HAL_RCC_GetPCLK1Freq>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	009a      	lsls	r2, r3, #2
 800e3de:	441a      	add	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3ea:	4a0c      	ldr	r2, [pc, #48]	; (800e41c <UART_SetConfig+0x410>)
 800e3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f0:	095b      	lsrs	r3, r3, #5
 800e3f2:	2264      	movs	r2, #100	; 0x64
 800e3f4:	fb02 f303 	mul.w	r3, r2, r3
 800e3f8:	1aeb      	subs	r3, r5, r3
 800e3fa:	011b      	lsls	r3, r3, #4
 800e3fc:	3332      	adds	r3, #50	; 0x32
 800e3fe:	4a07      	ldr	r2, [pc, #28]	; (800e41c <UART_SetConfig+0x410>)
 800e400:	fba2 2303 	umull	r2, r3, r2, r3
 800e404:	095b      	lsrs	r3, r3, #5
 800e406:	f003 020f 	and.w	r2, r3, #15
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4422      	add	r2, r4
 800e410:	609a      	str	r2, [r3, #8]
}
 800e412:	e7ff      	b.n	800e414 <UART_SetConfig+0x408>
 800e414:	bf00      	nop
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bdb0      	pop	{r4, r5, r7, pc}
 800e41c:	51eb851f 	.word	0x51eb851f

0800e420 <ACR_Init>:
ACR_TypeDef mainACR;



void ACR_Init()
{
 800e420:	b580      	push	{r7, lr}
 800e422:	af00      	add	r7, sp, #0

	memset(&mainACR, 0x00, sizeof(mainACR));
 800e424:	2274      	movs	r2, #116	; 0x74
 800e426:	2100      	movs	r1, #0
 800e428:	4812      	ldr	r0, [pc, #72]	; (800e474 <ACR_Init+0x54>)
 800e42a:	f003 fe22 	bl	8012072 <memset>

	mainACR.Init.Kp = 0.1f;
 800e42e:	4b11      	ldr	r3, [pc, #68]	; (800e474 <ACR_Init+0x54>)
 800e430:	4a11      	ldr	r2, [pc, #68]	; (800e478 <ACR_Init+0x58>)
 800e432:	601a      	str	r2, [r3, #0]
	mainACR.Init.Ki = 100.0f;
 800e434:	4b0f      	ldr	r3, [pc, #60]	; (800e474 <ACR_Init+0x54>)
 800e436:	4a11      	ldr	r2, [pc, #68]	; (800e47c <ACR_Init+0x5c>)
 800e438:	605a      	str	r2, [r3, #4]

	mainACR.Init.Id_limit = 5.0f;
 800e43a:	4b0e      	ldr	r3, [pc, #56]	; (800e474 <ACR_Init+0x54>)
 800e43c:	4a10      	ldr	r2, [pc, #64]	; (800e480 <ACR_Init+0x60>)
 800e43e:	60da      	str	r2, [r3, #12]
	mainACR.Init.Iq_limit = 5.0f;
 800e440:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <ACR_Init+0x54>)
 800e442:	4a0f      	ldr	r2, [pc, #60]	; (800e480 <ACR_Init+0x60>)
 800e444:	611a      	str	r2, [r3, #16]

	mainACR.Init.Id_error_integ_limit = 1.0f;
 800e446:	4b0b      	ldr	r3, [pc, #44]	; (800e474 <ACR_Init+0x54>)
 800e448:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e44c:	615a      	str	r2, [r3, #20]
	mainACR.Init.Iq_error_integ_limit = 1.0f;
 800e44e:	4b09      	ldr	r3, [pc, #36]	; (800e474 <ACR_Init+0x54>)
 800e450:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e454:	619a      	str	r2, [r3, #24]

	mainACR.Init.cycleTime = 100E-6;
 800e456:	4b07      	ldr	r3, [pc, #28]	; (800e474 <ACR_Init+0x54>)
 800e458:	4a0a      	ldr	r2, [pc, #40]	; (800e484 <ACR_Init+0x64>)
 800e45a:	609a      	str	r2, [r3, #8]

	mainACR.Init.hEncoder = &mainEncoder;
 800e45c:	4b05      	ldr	r3, [pc, #20]	; (800e474 <ACR_Init+0x54>)
 800e45e:	4a0a      	ldr	r2, [pc, #40]	; (800e488 <ACR_Init+0x68>)
 800e460:	61da      	str	r2, [r3, #28]

	mainACR.Init.hCS = &mainCS;
 800e462:	4b04      	ldr	r3, [pc, #16]	; (800e474 <ACR_Init+0x54>)
 800e464:	4a09      	ldr	r2, [pc, #36]	; (800e48c <ACR_Init+0x6c>)
 800e466:	621a      	str	r2, [r3, #32]
	mainACR.Init.htim = &htim8;
 800e468:	4b02      	ldr	r3, [pc, #8]	; (800e474 <ACR_Init+0x54>)
 800e46a:	4a09      	ldr	r2, [pc, #36]	; (800e490 <ACR_Init+0x70>)
 800e46c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800e46e:	bf00      	nop
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	200042d8 	.word	0x200042d8
 800e478:	3dcccccd 	.word	0x3dcccccd
 800e47c:	42c80000 	.word	0x42c80000
 800e480:	40a00000 	.word	0x40a00000
 800e484:	38d1b717 	.word	0x38d1b717
 800e488:	2000470c 	.word	0x2000470c
 800e48c:	200043e4 	.word	0x200043e4
 800e490:	20004808 	.word	0x20004808

0800e494 <ACR_Start>:



void ACR_Start(ACR_TypeDef *hACR)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]

	hACR->enable = 1;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ACR_Reset(hACR);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 fa8f 	bl	800e9c8 <ACR_Reset>

}
 800e4aa:	bf00      	nop
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	0000      	movs	r0, r0
 800e4b4:	0000      	movs	r0, r0
	...

0800e4b8 <ACR_Refresh>:
}



inline void ACR_Refresh(ACR_TypeDef *hACR)
{
 800e4b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4bc:	b082      	sub	sp, #8
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
	static float _Id_ref;
	static float _Iq_ref;

	static ACR_InitTypeDef *hACR_Init;

	hACR_Init = &hACR->Init;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4ab4      	ldr	r2, [pc, #720]	; (800e798 <ACR_Refresh+0x2e0>)
 800e4c6:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	2140      	movs	r1, #64	; 0x40
 800e4cc:	48b3      	ldr	r0, [pc, #716]	; (800e79c <ACR_Refresh+0x2e4>)
 800e4ce:	f7fc fe5d 	bl	800b18c <HAL_GPIO_WritePin>


	CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e4de:	4bae      	ldr	r3, [pc, #696]	; (800e798 <ACR_Refresh+0x2e0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	69db      	ldr	r3, [r3, #28]
 800e4e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e4e8:	4bab      	ldr	r3, [pc, #684]	; (800e798 <ACR_Refresh+0x2e0>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800e4f2:	eef0 0a47 	vmov.f32	s1, s14
 800e4f6:	eeb0 0a67 	vmov.f32	s0, s15
 800e4fa:	48a9      	ldr	r0, [pc, #676]	; (800e7a0 <ACR_Refresh+0x2e8>)
 800e4fc:	f000 fef8 	bl	800f2f0 <CurrentSensor_getIdq>


	/*
	 * 強制転流
	 */
	if(hACR->forced_commute_enable)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800e506:	2b00      	cmp	r3, #0
 800e508:	d03d      	beq.n	800e586 <ACR_Refresh+0xce>
	{

		hACR->forced_cos_theta_re = sin_table2[(int)((hACR->forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800e510:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800e7a4 <ACR_Refresh+0x2ec>
 800e514:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e518:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e51c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e520:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800e7a8 <ACR_Refresh+0x2f0>
 800e524:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e52c:	ee17 3a90 	vmov	r3, s15
 800e530:	4a9e      	ldr	r2, [pc, #632]	; (800e7ac <ACR_Refresh+0x2f4>)
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	66da      	str	r2, [r3, #108]	; 0x6c
		hACR->forced_sin_theta_re = sin_table2[(int)(hACR->forced_theta_re * 1591.54943f)];
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800e542:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800e7b0 <ACR_Refresh+0x2f8>
 800e546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e54a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e54e:	ee17 3a90 	vmov	r3, s15
 800e552:	4a96      	ldr	r2, [pc, #600]	; (800e7ac <ACR_Refresh+0x2f4>)
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4413      	add	r3, r2
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	671a      	str	r2, [r3, #112]	; 0x70

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800e576:	eef0 0a47 	vmov.f32	s1, s14
 800e57a:	eeb0 0a67 	vmov.f32	s0, s15
 800e57e:	4888      	ldr	r0, [pc, #544]	; (800e7a0 <ACR_Refresh+0x2e8>)
 800e580:	f000 feb6 	bl	800f2f0 <CurrentSensor_getIdq>
 800e584:	e016      	b.n	800e5b4 <ACR_Refresh+0xfc>

	}
	else
	{

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e592:	4b81      	ldr	r3, [pc, #516]	; (800e798 <ACR_Refresh+0x2e0>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	69db      	ldr	r3, [r3, #28]
 800e598:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e59c:	4b7e      	ldr	r3, [pc, #504]	; (800e798 <ACR_Refresh+0x2e0>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800e5a6:	eef0 0a47 	vmov.f32	s1, s14
 800e5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ae:	487c      	ldr	r0, [pc, #496]	; (800e7a0 <ACR_Refresh+0x2e8>)
 800e5b0:	f000 fe9e 	bl	800f2f0 <CurrentSensor_getIdq>

	}



	if(hACR_Init->hEncoder->theta_re < M_PI)
 800e5b4:	4b78      	ldr	r3, [pc, #480]	; (800e798 <ACR_Refresh+0x2e0>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	69db      	ldr	r3, [r3, #28]
 800e5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f9 fefb 	bl	80083b8 <__aeabi_f2d>
 800e5c2:	a373      	add	r3, pc, #460	; (adr r3, 800e790 <ACR_Refresh+0x2d8>)
 800e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c8:	f7fa f9c0 	bl	800894c <__aeabi_dcmplt>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d005      	beq.n	800e5de <ACR_Refresh+0x126>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2140      	movs	r1, #64	; 0x40
 800e5d6:	4877      	ldr	r0, [pc, #476]	; (800e7b4 <ACR_Refresh+0x2fc>)
 800e5d8:	f7fc fdd8 	bl	800b18c <HAL_GPIO_WritePin>
 800e5dc:	e004      	b.n	800e5e8 <ACR_Refresh+0x130>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800e5de:	2201      	movs	r2, #1
 800e5e0:	2140      	movs	r1, #64	; 0x40
 800e5e2:	4874      	ldr	r0, [pc, #464]	; (800e7b4 <ACR_Refresh+0x2fc>)
 800e5e4:	f7fc fdd2 	bl	800b18c <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(hACR->enable /*&& soundCount == -1*/)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f000 81c4 	beq.w	800e97c <ACR_Refresh+0x4c4>
	{

		_Id_ref = hACR->Id_ref;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f8:	4a6f      	ldr	r2, [pc, #444]	; (800e7b8 <ACR_Refresh+0x300>)
 800e5fa:	6013      	str	r3, [r2, #0]
		//_Iq_ref = hACR->Iq_ref + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
		_Iq_ref = hACR->Iq_ref;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e600:	4a6e      	ldr	r2, [pc, #440]	; (800e7bc <ACR_Refresh+0x304>)
 800e602:	6013      	str	r3, [r2, #0]


		if(_Id_ref < -hACR_Init->Id_limit)			_Id_ref = -hACR_Init->Id_limit;
 800e604:	4b64      	ldr	r3, [pc, #400]	; (800e798 <ACR_Refresh+0x2e0>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	edd3 7a03 	vldr	s15, [r3, #12]
 800e60c:	eeb1 7a67 	vneg.f32	s14, s15
 800e610:	4b69      	ldr	r3, [pc, #420]	; (800e7b8 <ACR_Refresh+0x300>)
 800e612:	edd3 7a00 	vldr	s15, [r3]
 800e616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61e:	dd09      	ble.n	800e634 <ACR_Refresh+0x17c>
 800e620:	4b5d      	ldr	r3, [pc, #372]	; (800e798 <ACR_Refresh+0x2e0>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	edd3 7a03 	vldr	s15, [r3, #12]
 800e628:	eef1 7a67 	vneg.f32	s15, s15
 800e62c:	4b62      	ldr	r3, [pc, #392]	; (800e7b8 <ACR_Refresh+0x300>)
 800e62e:	edc3 7a00 	vstr	s15, [r3]
 800e632:	e010      	b.n	800e656 <ACR_Refresh+0x19e>
		else if(_Id_ref > hACR_Init->Id_limit)		_Id_ref = hACR_Init->Id_limit;
 800e634:	4b58      	ldr	r3, [pc, #352]	; (800e798 <ACR_Refresh+0x2e0>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	ed93 7a03 	vldr	s14, [r3, #12]
 800e63c:	4b5e      	ldr	r3, [pc, #376]	; (800e7b8 <ACR_Refresh+0x300>)
 800e63e:	edd3 7a00 	vldr	s15, [r3]
 800e642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64a:	d504      	bpl.n	800e656 <ACR_Refresh+0x19e>
 800e64c:	4b52      	ldr	r3, [pc, #328]	; (800e798 <ACR_Refresh+0x2e0>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	4a59      	ldr	r2, [pc, #356]	; (800e7b8 <ACR_Refresh+0x300>)
 800e654:	6013      	str	r3, [r2, #0]

		if(_Iq_ref < -hACR_Init->Iq_limit)			_Iq_ref = -hACR_Init->Iq_limit;
 800e656:	4b50      	ldr	r3, [pc, #320]	; (800e798 <ACR_Refresh+0x2e0>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	edd3 7a04 	vldr	s15, [r3, #16]
 800e65e:	eeb1 7a67 	vneg.f32	s14, s15
 800e662:	4b56      	ldr	r3, [pc, #344]	; (800e7bc <ACR_Refresh+0x304>)
 800e664:	edd3 7a00 	vldr	s15, [r3]
 800e668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e670:	dd09      	ble.n	800e686 <ACR_Refresh+0x1ce>
 800e672:	4b49      	ldr	r3, [pc, #292]	; (800e798 <ACR_Refresh+0x2e0>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	edd3 7a04 	vldr	s15, [r3, #16]
 800e67a:	eef1 7a67 	vneg.f32	s15, s15
 800e67e:	4b4f      	ldr	r3, [pc, #316]	; (800e7bc <ACR_Refresh+0x304>)
 800e680:	edc3 7a00 	vstr	s15, [r3]
 800e684:	e010      	b.n	800e6a8 <ACR_Refresh+0x1f0>
		else if(_Iq_ref > hACR_Init->Iq_limit)		_Iq_ref = hACR_Init->Iq_limit;
 800e686:	4b44      	ldr	r3, [pc, #272]	; (800e798 <ACR_Refresh+0x2e0>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	ed93 7a04 	vldr	s14, [r3, #16]
 800e68e:	4b4b      	ldr	r3, [pc, #300]	; (800e7bc <ACR_Refresh+0x304>)
 800e690:	edd3 7a00 	vldr	s15, [r3]
 800e694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69c:	d504      	bpl.n	800e6a8 <ACR_Refresh+0x1f0>
 800e69e:	4b3e      	ldr	r3, [pc, #248]	; (800e798 <ACR_Refresh+0x2e0>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	4a45      	ldr	r2, [pc, #276]	; (800e7bc <ACR_Refresh+0x304>)
 800e6a6:	6013      	str	r3, [r2, #0]

		hACR->Id_limitError = hACR->Id_ref - _Id_ref;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800e6ae:	4b42      	ldr	r3, [pc, #264]	; (800e7b8 <ACR_Refresh+0x300>)
 800e6b0:	edd3 7a00 	vldr	s15, [r3]
 800e6b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		hACR->Iq_limitError = hACR->Iq_ref - _Iq_ref;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e6c4:	4b3d      	ldr	r3, [pc, #244]	; (800e7bc <ACR_Refresh+0x304>)
 800e6c6:	edd3 7a00 	vldr	s15, [r3]
 800e6ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30


		hACR->Id_error = _Id_ref - hACR->Id;
 800e6d4:	4b38      	ldr	r3, [pc, #224]	; (800e7b8 <ACR_Refresh+0x300>)
 800e6d6:	ed93 7a00 	vldr	s14, [r3]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e6e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		hACR->Iq_error = _Iq_ref - hACR->Iq;
 800e6ea:	4b34      	ldr	r3, [pc, #208]	; (800e7bc <ACR_Refresh+0x304>)
 800e6ec:	ed93 7a00 	vldr	s14, [r3]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e6f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


		hACR->Id_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Id_error + hACR->p_Id_error);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800e706:	4b24      	ldr	r3, [pc, #144]	; (800e798 <ACR_Refresh+0x2e0>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	edd3 7a02 	vldr	s15, [r3, #8]
 800e70e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e712:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800e722:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e72a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		hACR->Iq_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Iq_error + hACR->p_Iq_error);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e73a:	4b17      	ldr	r3, [pc, #92]	; (800e798 <ACR_Refresh+0x2e0>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	edd3 7a02 	vldr	s15, [r3, #8]
 800e742:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e746:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800e756:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e75a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e75e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


		if(hACR->Id_error_integ > hACR_Init->Id_error_integ_limit)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800e76e:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <ACR_Refresh+0x2e0>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	edd3 7a05 	vldr	s15, [r3, #20]
 800e776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77e:	dd1f      	ble.n	800e7c0 <ACR_Refresh+0x308>
		{
			hACR->Id_error_integ = hACR_Init->Id_error_integ_limit;
 800e780:	4b05      	ldr	r3, [pc, #20]	; (800e798 <ACR_Refresh+0x2e0>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	695a      	ldr	r2, [r3, #20]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	655a      	str	r2, [r3, #84]	; 0x54
 800e78a:	e048      	b.n	800e81e <ACR_Refresh+0x366>
 800e78c:	f3af 8000 	nop.w
 800e790:	54442d18 	.word	0x54442d18
 800e794:	400921fb 	.word	0x400921fb
 800e798:	20000204 	.word	0x20000204
 800e79c:	40020400 	.word	0x40020400
 800e7a0:	200043e4 	.word	0x200043e4
 800e7a4:	3ea2f838 	.word	0x3ea2f838
 800e7a8:	459c4000 	.word	0x459c4000
 800e7ac:	08015be0 	.word	0x08015be0
 800e7b0:	44c6f195 	.word	0x44c6f195
 800e7b4:	40020000 	.word	0x40020000
 800e7b8:	20000208 	.word	0x20000208
 800e7bc:	2000020c 	.word	0x2000020c
		}
		else if(hACR->Id_error_integ < -1.0 * hACR_Init->Id_error_integ_limit)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7f9 fdf7 	bl	80083b8 <__aeabi_f2d>
 800e7ca:	4682      	mov	sl, r0
 800e7cc:	468b      	mov	fp, r1
 800e7ce:	4b78      	ldr	r3, [pc, #480]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	695b      	ldr	r3, [r3, #20]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f9 fdef 	bl	80083b8 <__aeabi_f2d>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	460b      	mov	r3, r1
 800e7de:	4690      	mov	r8, r2
 800e7e0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800e7e4:	4642      	mov	r2, r8
 800e7e6:	464b      	mov	r3, r9
 800e7e8:	4650      	mov	r0, sl
 800e7ea:	4659      	mov	r1, fp
 800e7ec:	f7fa f8ae 	bl	800894c <__aeabi_dcmplt>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d013      	beq.n	800e81e <ACR_Refresh+0x366>
		{
			hACR->Id_error_integ = -1.0 * hACR_Init->Id_error_integ_limit;
 800e7f6:	4b6e      	ldr	r3, [pc, #440]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	695b      	ldr	r3, [r3, #20]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7f9 fddb 	bl	80083b8 <__aeabi_f2d>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4610      	mov	r0, r2
 800e808:	4619      	mov	r1, r3
 800e80a:	f7fa f905 	bl	8008a18 <__aeabi_d2f>
 800e80e:	4603      	mov	r3, r0
 800e810:	ee07 3a90 	vmov	s15, r3
 800e814:	eef1 7a67 	vneg.f32	s15, s15
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		}

		if(hACR->Iq_error_integ > hACR_Init->Iq_error_integ_limit)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e824:	4b62      	ldr	r3, [pc, #392]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	edd3 7a06 	vldr	s15, [r3, #24]
 800e82c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e834:	dd05      	ble.n	800e842 <ACR_Refresh+0x38a>
		{
			hACR->Iq_error_integ = hACR_Init->Iq_error_integ_limit;
 800e836:	4b5e      	ldr	r3, [pc, #376]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	699a      	ldr	r2, [r3, #24]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	659a      	str	r2, [r3, #88]	; 0x58
 800e840:	e02e      	b.n	800e8a0 <ACR_Refresh+0x3e8>
		}
		else if(hACR->Iq_error_integ < -1.0 * hACR_Init->Iq_error_integ_limit)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e846:	4618      	mov	r0, r3
 800e848:	f7f9 fdb6 	bl	80083b8 <__aeabi_f2d>
 800e84c:	4680      	mov	r8, r0
 800e84e:	4689      	mov	r9, r1
 800e850:	4b57      	ldr	r3, [pc, #348]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	4618      	mov	r0, r3
 800e858:	f7f9 fdae 	bl	80083b8 <__aeabi_f2d>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	4614      	mov	r4, r2
 800e862:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800e866:	4622      	mov	r2, r4
 800e868:	462b      	mov	r3, r5
 800e86a:	4640      	mov	r0, r8
 800e86c:	4649      	mov	r1, r9
 800e86e:	f7fa f86d 	bl	800894c <__aeabi_dcmplt>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d013      	beq.n	800e8a0 <ACR_Refresh+0x3e8>
		{
			hACR->Iq_error_integ = -1.0 * hACR_Init->Iq_error_integ_limit;
 800e878:	4b4d      	ldr	r3, [pc, #308]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7f9 fd9a 	bl	80083b8 <__aeabi_f2d>
 800e884:	4603      	mov	r3, r0
 800e886:	460c      	mov	r4, r1
 800e888:	4618      	mov	r0, r3
 800e88a:	4621      	mov	r1, r4
 800e88c:	f7fa f8c4 	bl	8008a18 <__aeabi_d2f>
 800e890:	4603      	mov	r3, r0
 800e892:	ee07 3a90 	vmov	s15, r3
 800e896:	eef1 7a67 	vneg.f32	s15, s15
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		}


		hACR->p_Id_error = hACR->Id_error;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	64da      	str	r2, [r3, #76]	; 0x4c
		hACR->p_Iq_error = hACR->Iq_error;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	651a      	str	r2, [r3, #80]	; 0x50

		// hACR->Vd_ref = - hACR_Init->Kp * hACR->Id + hACR_Init->Ki * hACR->Id_error_integ;
		// hACR->Vq_ref = - hACR_Init->Kp * hACR->Iq + hACR_Init->Ki * hACR->Iq_error_integ;

		hACR->Vd_ref = hACR_Init->Kp * hACR->Id_error + hACR_Init->Ki * hACR->Id_error_integ;
 800e8b0:	4b3f      	ldr	r3, [pc, #252]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	ed93 7a00 	vldr	s14, [r3]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e8be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8c2:	4b3b      	ldr	r3, [pc, #236]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	edd3 6a01 	vldr	s13, [r3, #4]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e8d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e8d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		hACR->Vq_ref = hACR_Init->Kp * hACR->Iq_error + hACR_Init->Ki * hACR->Iq_error_integ;
 800e8de:	4b34      	ldr	r3, [pc, #208]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	ed93 7a00 	vldr	s14, [r3]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800e8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8f0:	4b2f      	ldr	r3, [pc, #188]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	edd3 6a01 	vldr	s13, [r3, #4]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800e8fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e902:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60


		if(hACR->forced_commute_enable)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800e912:	2b00      	cmp	r3, #0
 800e914:	d017      	beq.n	800e946 <ACR_Refresh+0x48e>
		{
			setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 800e92e:	eef0 1a46 	vmov.f32	s3, s12
 800e932:	eeb0 1a66 	vmov.f32	s2, s13
 800e936:	eef0 0a47 	vmov.f32	s1, s14
 800e93a:	eeb0 0a67 	vmov.f32	s0, s15
 800e93e:	481d      	ldr	r0, [pc, #116]	; (800e9b4 <ACR_Refresh+0x4fc>)
 800e940:	f002 fafa 	bl	8010f38 <setSVM_dq>
 800e944:	e01a      	b.n	800e97c <ACR_Refresh+0x4c4>
		}
		else
		{
			setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800e952:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800e95c:	4b14      	ldr	r3, [pc, #80]	; (800e9b0 <ACR_Refresh+0x4f8>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800e966:	eef0 1a46 	vmov.f32	s3, s12
 800e96a:	eeb0 1a66 	vmov.f32	s2, s13
 800e96e:	eef0 0a47 	vmov.f32	s1, s14
 800e972:	eeb0 0a67 	vmov.f32	s0, s15
 800e976:	480f      	ldr	r0, [pc, #60]	; (800e9b4 <ACR_Refresh+0x4fc>)
 800e978:	f002 fade 	bl	8010f38 <setSVM_dq>
	*/




	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e97c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e980:	480d      	ldr	r0, [pc, #52]	; (800e9b8 <ACR_Refresh+0x500>)
 800e982:	f7fc fbeb 	bl	800b15c <HAL_GPIO_ReadPin>
#endif




	msec += 0.1f;
 800e986:	4b0d      	ldr	r3, [pc, #52]	; (800e9bc <ACR_Refresh+0x504>)
 800e988:	edd3 7a00 	vldr	s15, [r3]
 800e98c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e9c0 <ACR_Refresh+0x508>
 800e990:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e994:	4b09      	ldr	r3, [pc, #36]	; (800e9bc <ACR_Refresh+0x504>)
 800e996:	edc3 7a00 	vstr	s15, [r3]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e99a:	2200      	movs	r2, #0
 800e99c:	2140      	movs	r1, #64	; 0x40
 800e99e:	4809      	ldr	r0, [pc, #36]	; (800e9c4 <ACR_Refresh+0x50c>)
 800e9a0:	f7fc fbf4 	bl	800b18c <HAL_GPIO_WritePin>

	return;
 800e9a4:	bf00      	nop
}
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20000204 	.word	0x20000204
 800e9b4:	20004808 	.word	0x20004808
 800e9b8:	40020000 	.word	0x40020000
 800e9bc:	20000200 	.word	0x20000200
 800e9c0:	3dcccccd 	.word	0x3dcccccd
 800e9c4:	40020400 	.word	0x40020400

0800e9c8 <ACR_Reset>:



inline void ACR_Reset(ACR_TypeDef *hACR)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]

	hACR->Id_error_integ = 0.0f;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f04f 0200 	mov.w	r2, #0
 800e9d6:	655a      	str	r2, [r3, #84]	; 0x54
	hACR->Iq_error_integ = 0.0f;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f04f 0200 	mov.w	r2, #0
 800e9de:	659a      	str	r2, [r3, #88]	; 0x58

	hACR->Id = hACR->Id_ref = 0.0f;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f04f 0200 	mov.w	r2, #0
 800e9e6:	635a      	str	r2, [r3, #52]	; 0x34
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	63da      	str	r2, [r3, #60]	; 0x3c
	hACR->Iq = hACR->Iq_ref = 0.0f;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f04f 0200 	mov.w	r2, #0
 800e9f6:	639a      	str	r2, [r3, #56]	; 0x38
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	641a      	str	r2, [r3, #64]	; 0x40

	hACR->Vd_ref = 0.0f;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f04f 0200 	mov.w	r2, #0
 800ea06:	65da      	str	r2, [r3, #92]	; 0x5c
	hACR->Vq_ref = 0.0f;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f04f 0200 	mov.w	r2, #0
 800ea0e:	661a      	str	r2, [r3, #96]	; 0x60

}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <APR_Init>:

APR_TypeDef mainAPR;


void APR_Init()
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	af00      	add	r7, sp, #0
	memset(&mainAPR, 0x00, sizeof(mainAPR));
 800ea20:	2254      	movs	r2, #84	; 0x54
 800ea22:	2100      	movs	r1, #0
 800ea24:	4814      	ldr	r0, [pc, #80]	; (800ea78 <APR_Init+0x5c>)
 800ea26:	f003 fb24 	bl	8012072 <memset>

	mainAPR.Init.Kp = 0.1f;
 800ea2a:	4b13      	ldr	r3, [pc, #76]	; (800ea78 <APR_Init+0x5c>)
 800ea2c:	4a13      	ldr	r2, [pc, #76]	; (800ea7c <APR_Init+0x60>)
 800ea2e:	601a      	str	r2, [r3, #0]
	mainAPR.Init.Ki = 0.0f;
 800ea30:	4b11      	ldr	r3, [pc, #68]	; (800ea78 <APR_Init+0x5c>)
 800ea32:	f04f 0200 	mov.w	r2, #0
 800ea36:	605a      	str	r2, [r3, #4]
	mainAPR.Init.Kd = 0.0f;
 800ea38:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <APR_Init+0x5c>)
 800ea3a:	f04f 0200 	mov.w	r2, #0
 800ea3e:	609a      	str	r2, [r3, #8]

	mainAPR.Init.theta_error_integ_limit = 10000.0f;
 800ea40:	4b0d      	ldr	r3, [pc, #52]	; (800ea78 <APR_Init+0x5c>)
 800ea42:	4a0f      	ldr	r2, [pc, #60]	; (800ea80 <APR_Init+0x64>)
 800ea44:	611a      	str	r2, [r3, #16]
	mainAPR.Init.cycleTime = 1E-3;
 800ea46:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <APR_Init+0x5c>)
 800ea48:	4a0e      	ldr	r2, [pc, #56]	; (800ea84 <APR_Init+0x68>)
 800ea4a:	60da      	str	r2, [r3, #12]
	mainAPR.Init.prescaler = 10;
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	; (800ea78 <APR_Init+0x5c>)
 800ea4e:	220a      	movs	r2, #10
 800ea50:	625a      	str	r2, [r3, #36]	; 0x24

	mainAPR.Init.hEncoder = &mainEncoder;
 800ea52:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <APR_Init+0x5c>)
 800ea54:	4a0c      	ldr	r2, [pc, #48]	; (800ea88 <APR_Init+0x6c>)
 800ea56:	615a      	str	r2, [r3, #20]
	mainAPR.Init.hASR = &mainASR;
 800ea58:	4b07      	ldr	r3, [pc, #28]	; (800ea78 <APR_Init+0x5c>)
 800ea5a:	4a0c      	ldr	r2, [pc, #48]	; (800ea8c <APR_Init+0x70>)
 800ea5c:	619a      	str	r2, [r3, #24]
	mainAPR.Init.hACR = &mainACR;
 800ea5e:	4b06      	ldr	r3, [pc, #24]	; (800ea78 <APR_Init+0x5c>)
 800ea60:	4a0b      	ldr	r2, [pc, #44]	; (800ea90 <APR_Init+0x74>)
 800ea62:	61da      	str	r2, [r3, #28]
	mainAPR.Init.htim = &htim8;
 800ea64:	4b04      	ldr	r3, [pc, #16]	; (800ea78 <APR_Init+0x5c>)
 800ea66:	4a0b      	ldr	r2, [pc, #44]	; (800ea94 <APR_Init+0x78>)
 800ea68:	621a      	str	r2, [r3, #32]

	mainAPR.MV_type = 0;
 800ea6a:	4b03      	ldr	r3, [pc, #12]	; (800ea78 <APR_Init+0x5c>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


}
 800ea72:	bf00      	nop
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	2000434c 	.word	0x2000434c
 800ea7c:	3dcccccd 	.word	0x3dcccccd
 800ea80:	461c4000 	.word	0x461c4000
 800ea84:	3a83126f 	.word	0x3a83126f
 800ea88:	2000470c 	.word	0x2000470c
 800ea8c:	200043a0 	.word	0x200043a0
 800ea90:	200042d8 	.word	0x200042d8
 800ea94:	20004808 	.word	0x20004808

0800ea98 <APR_prescaler>:

}


inline void APR_prescaler(APR_TypeDef *hAPR)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]

	hAPR->prescalerCount += 1;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	64da      	str	r2, [r3, #76]	; 0x4c

	if(hAPR->prescalerCount >= hAPR->Init.prescaler)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d306      	bcc.n	800eac4 <APR_prescaler+0x2c>
	{
		hAPR->launchFlg = 1;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2201      	movs	r2, #1
 800eaba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		hAPR->prescalerCount = 0;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	64da      	str	r2, [r3, #76]	; 0x4c
	}

}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <APR_Refresh>:


inline void APR_Refresh(APR_TypeDef *hAPR)
{
 800ead0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]

	static APR_InitTypeDef *hAPR_Init;

	// 有効時のみ実行
	if(hAPR->enable == 0)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 80c1 	beq.w	800ec68 <APR_Refresh+0x198>
	{
		return;
	}

	// プリスケーラリセット時のみ実行
	if(hAPR->launchFlg == 0)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 80bd 	beq.w	800ec6c <APR_Refresh+0x19c>
	{
		return;
	}
	hAPR->launchFlg = 0;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51


	hAPR_Init = &hAPR->Init;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4a5f      	ldr	r2, [pc, #380]	; (800ec7c <APR_Refresh+0x1ac>)
 800eafe:	6013      	str	r3, [r2, #0]

	hAPR->theta = hAPR_Init->hEncoder->theta_multiturn;
 800eb00:	4b5e      	ldr	r3, [pc, #376]	; (800ec7c <APR_Refresh+0x1ac>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	6a1a      	ldr	r2, [r3, #32]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	631a      	str	r2, [r3, #48]	; 0x30

	// 速度偏差
	hAPR->theta_error = hAPR->theta_ref - hAPR->theta;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800eb18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	// integral
	hAPR->theta_error_integ += hAPR_Init->cycleTime * 0.5 * (hAPR->theta_error + hAPR->p_theta_error);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f9 fc46 	bl	80083b8 <__aeabi_f2d>
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	460d      	mov	r5, r1
 800eb30:	4b52      	ldr	r3, [pc, #328]	; (800ec7c <APR_Refresh+0x1ac>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f9 fc3e 	bl	80083b8 <__aeabi_f2d>
 800eb3c:	f04f 0200 	mov.w	r2, #0
 800eb40:	4b4f      	ldr	r3, [pc, #316]	; (800ec80 <APR_Refresh+0x1b0>)
 800eb42:	f7f9 fc91 	bl	8008468 <__aeabi_dmul>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4690      	mov	r8, r2
 800eb4c:	4699      	mov	r9, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800eb5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb5e:	ee17 0a90 	vmov	r0, s15
 800eb62:	f7f9 fc29 	bl	80083b8 <__aeabi_f2d>
 800eb66:	4602      	mov	r2, r0
 800eb68:	460b      	mov	r3, r1
 800eb6a:	4640      	mov	r0, r8
 800eb6c:	4649      	mov	r1, r9
 800eb6e:	f7f9 fc7b 	bl	8008468 <__aeabi_dmul>
 800eb72:	4602      	mov	r2, r0
 800eb74:	460b      	mov	r3, r1
 800eb76:	4620      	mov	r0, r4
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7f9 fabf 	bl	80080fc <__adddf3>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	460c      	mov	r4, r1
 800eb82:	4618      	mov	r0, r3
 800eb84:	4621      	mov	r1, r4
 800eb86:	f7f9 ff47 	bl	8008a18 <__aeabi_d2f>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	63da      	str	r2, [r3, #60]	; 0x3c

	hAPR->p_theta_error = hAPR->theta_error;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	639a      	str	r2, [r3, #56]	; 0x38

	if(hAPR->MV_type == 0)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d11f      	bne.n	800ebe2 <APR_Refresh+0x112>
	{
		// P-D型
		hAPR_Init->hASR->omega_ref = hAPR->omega_ref = hAPR_Init->Kp * hAPR->theta_error - hAPR_Init->Kd * hAPR_Init->hEncoder->omega;
 800eba2:	4b36      	ldr	r3, [pc, #216]	; (800ec7c <APR_Refresh+0x1ac>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	ed93 7a00 	vldr	s14, [r3]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ebb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebb4:	4b31      	ldr	r3, [pc, #196]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	edd3 6a02 	vldr	s13, [r3, #8]
 800ebbc:	4b2f      	ldr	r3, [pc, #188]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ebc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 800ebd4:	4b29      	ldr	r3, [pc, #164]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ebde:	625a      	str	r2, [r3, #36]	; 0x24
		setSVM_dq(&htim8, 0.0f, hAPR->Vq_ref, hAPR_Init->hEncoder->cos_theta_re, hAPR_Init->hEncoder->sin_theta_re);

	}


	return;
 800ebe0:	e046      	b.n	800ec70 <APR_Refresh+0x1a0>
	else if(hAPR->MV_type == 2)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d141      	bne.n	800ec70 <APR_Refresh+0x1a0>
				hAPR_Init->Kp * hAPR->theta_error
 800ebec:	4b23      	ldr	r3, [pc, #140]	; (800ec7c <APR_Refresh+0x1ac>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	ed93 7a00 	vldr	s14, [r3]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ebfa:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ hAPR_Init->Ki * hAPR->theta_error_integ
 800ebfe:	4b1f      	ldr	r3, [pc, #124]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	edd3 6a01 	vldr	s13, [r3, #4]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ec0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec10:	ee37 7a27 	vadd.f32	s14, s14, s15
				- hAPR_Init->Kd * hAPR_Init->hEncoder->omega;
 800ec14:	4b19      	ldr	r3, [pc, #100]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	edd3 6a02 	vldr	s13, [r3, #8]
 800ec1c:	4b17      	ldr	r3, [pc, #92]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	695b      	ldr	r3, [r3, #20]
 800ec22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ec26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec2a:	ee77 7a67 	vsub.f32	s15, s14, s15
		hAPR->Vq_ref =
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		setSVM_dq(&htim8, 0.0f, hAPR->Vq_ref, hAPR_Init->hEncoder->cos_theta_re, hAPR_Init->hEncoder->sin_theta_re);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800ec3a:	4b10      	ldr	r3, [pc, #64]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	695b      	ldr	r3, [r3, #20]
 800ec40:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ec44:	4b0d      	ldr	r3, [pc, #52]	; (800ec7c <APR_Refresh+0x1ac>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	695b      	ldr	r3, [r3, #20]
 800ec4a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800ec4e:	eef0 1a66 	vmov.f32	s3, s13
 800ec52:	eeb0 1a47 	vmov.f32	s2, s14
 800ec56:	eef0 0a67 	vmov.f32	s1, s15
 800ec5a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ec84 <APR_Refresh+0x1b4>
 800ec5e:	480a      	ldr	r0, [pc, #40]	; (800ec88 <APR_Refresh+0x1b8>)
 800ec60:	f002 f96a 	bl	8010f38 <setSVM_dq>
	return;
 800ec64:	bf00      	nop
 800ec66:	e003      	b.n	800ec70 <APR_Refresh+0x1a0>
		return;
 800ec68:	bf00      	nop
 800ec6a:	e002      	b.n	800ec72 <APR_Refresh+0x1a2>
		return;
 800ec6c:	bf00      	nop
 800ec6e:	e000      	b.n	800ec72 <APR_Refresh+0x1a2>
	return;
 800ec70:	bf00      	nop
}
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20000210 	.word	0x20000210
 800ec80:	3fe00000 	.word	0x3fe00000
 800ec84:	00000000 	.word	0x00000000
 800ec88:	20004808 	.word	0x20004808

0800ec8c <ASR_Init>:

ASR_TypeDef mainASR;


void ASR_Init()
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	af00      	add	r7, sp, #0
	memset(&mainASR, 0x00, sizeof(mainASR));
 800ec90:	2244      	movs	r2, #68	; 0x44
 800ec92:	2100      	movs	r1, #0
 800ec94:	4812      	ldr	r0, [pc, #72]	; (800ece0 <ASR_Init+0x54>)
 800ec96:	f003 f9ec 	bl	8012072 <memset>

	mainASR.Init.Kp = 0.5f;
 800ec9a:	4b11      	ldr	r3, [pc, #68]	; (800ece0 <ASR_Init+0x54>)
 800ec9c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800eca0:	601a      	str	r2, [r3, #0]
	mainASR.Init.Ki = 15.0f;
 800eca2:	4b0f      	ldr	r3, [pc, #60]	; (800ece0 <ASR_Init+0x54>)
 800eca4:	4a0f      	ldr	r2, [pc, #60]	; (800ece4 <ASR_Init+0x58>)
 800eca6:	605a      	str	r2, [r3, #4]
	mainASR.Init.omega_limit = 400.0f;
 800eca8:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <ASR_Init+0x54>)
 800ecaa:	4a0f      	ldr	r2, [pc, #60]	; (800ece8 <ASR_Init+0x5c>)
 800ecac:	60da      	str	r2, [r3, #12]
	mainASR.Init.omega_error_integ_limit = 1000.0f;
 800ecae:	4b0c      	ldr	r3, [pc, #48]	; (800ece0 <ASR_Init+0x54>)
 800ecb0:	4a0e      	ldr	r2, [pc, #56]	; (800ecec <ASR_Init+0x60>)
 800ecb2:	611a      	str	r2, [r3, #16]
	mainASR.Init.cycleTime = 1E-3;
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <ASR_Init+0x54>)
 800ecb6:	4a0e      	ldr	r2, [pc, #56]	; (800ecf0 <ASR_Init+0x64>)
 800ecb8:	609a      	str	r2, [r3, #8]
	mainASR.Init.prescaler = 10;
 800ecba:	4b09      	ldr	r3, [pc, #36]	; (800ece0 <ASR_Init+0x54>)
 800ecbc:	220a      	movs	r2, #10
 800ecbe:	61da      	str	r2, [r3, #28]

	mainASR.Init.hEncoder = &mainEncoder;
 800ecc0:	4b07      	ldr	r3, [pc, #28]	; (800ece0 <ASR_Init+0x54>)
 800ecc2:	4a0c      	ldr	r2, [pc, #48]	; (800ecf4 <ASR_Init+0x68>)
 800ecc4:	615a      	str	r2, [r3, #20]
	mainASR.Init.hACR = &mainACR;
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <ASR_Init+0x54>)
 800ecc8:	4a0b      	ldr	r2, [pc, #44]	; (800ecf8 <ASR_Init+0x6c>)
 800ecca:	619a      	str	r2, [r3, #24]

	mainASR.firstLaunch = 1;
 800eccc:	4b04      	ldr	r3, [pc, #16]	; (800ece0 <ASR_Init+0x54>)
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	mainASR.omega = 0.0f;
 800ecd4:	4b02      	ldr	r3, [pc, #8]	; (800ece0 <ASR_Init+0x54>)
 800ecd6:	f04f 0200 	mov.w	r2, #0
 800ecda:	629a      	str	r2, [r3, #40]	; 0x28

}
 800ecdc:	bf00      	nop
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	200043a0 	.word	0x200043a0
 800ece4:	41700000 	.word	0x41700000
 800ece8:	43c80000 	.word	0x43c80000
 800ecec:	447a0000 	.word	0x447a0000
 800ecf0:	3a83126f 	.word	0x3a83126f
 800ecf4:	2000470c 	.word	0x2000470c
 800ecf8:	200042d8 	.word	0x200042d8

0800ecfc <ASR_Start>:


void ASR_Start(ASR_TypeDef *hASR)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]

	hASR->enable = 1;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 2020 	strb.w	r2, [r3, #32]
	ASR_Reset(hASR);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 f935 	bl	800ef7c <ASR_Reset>

}
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <ASR_prescaler>:

}


inline void ASR_prescaler(ASR_TypeDef *hASR)
{
 800ed1a:	b480      	push	{r7}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]

	hASR->prescalerCount += 1;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	63da      	str	r2, [r3, #60]	; 0x3c

	if(hASR->prescalerCount >= hASR->Init.prescaler)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	69db      	ldr	r3, [r3, #28]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d306      	bcc.n	800ed46 <ASR_prescaler+0x2c>
	{
		hASR->launchFlg = 1;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hASR->prescalerCount = 0;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 800ed46:	bf00      	nop
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	0000      	movs	r0, r0
 800ed54:	0000      	movs	r0, r0
	...

0800ed58 <ASR_Refresh>:


inline void ASR_Refresh(ASR_TypeDef *hASR)
{
 800ed58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ed5c:	b082      	sub	sp, #8
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
	static float integInput;

	static ASR_InitTypeDef *hASR_Init;

	// 有効時のみ実行
	if(hASR->enable == 0)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 80ef 	beq.w	800ef4c <ASR_Refresh+0x1f4>
	{
		return;
	}

	// プリスケーラリセット時のみ実行
	if(hASR->launchFlg == 0)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f000 80eb 	beq.w	800ef50 <ASR_Refresh+0x1f8>
	{
		return;
	}
	hASR->launchFlg = 0;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


	hASR_Init = &hASR->Init;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a78      	ldr	r2, [pc, #480]	; (800ef68 <ASR_Refresh+0x210>)
 800ed86:	6013      	str	r3, [r2, #0]

	hASR->omega = hASR_Init->hEncoder->omega;
 800ed88:	4b77      	ldr	r3, [pc, #476]	; (800ef68 <ASR_Refresh+0x210>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	695b      	ldr	r3, [r3, #20]
 800ed8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	629a      	str	r2, [r3, #40]	; 0x28

	// 速度制限
	if(hASR->omega_ref < -hASR_Init->omega_limit)		_omega_ref = -hASR_Init->omega_limit;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800ed9a:	4b73      	ldr	r3, [pc, #460]	; (800ef68 <ASR_Refresh+0x210>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	edd3 7a03 	vldr	s15, [r3, #12]
 800eda2:	eef1 7a67 	vneg.f32	s15, s15
 800eda6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edae:	d509      	bpl.n	800edc4 <ASR_Refresh+0x6c>
 800edb0:	4b6d      	ldr	r3, [pc, #436]	; (800ef68 <ASR_Refresh+0x210>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	edd3 7a03 	vldr	s15, [r3, #12]
 800edb8:	eef1 7a67 	vneg.f32	s15, s15
 800edbc:	4b6b      	ldr	r3, [pc, #428]	; (800ef6c <ASR_Refresh+0x214>)
 800edbe:	edc3 7a00 	vstr	s15, [r3]
 800edc2:	e015      	b.n	800edf0 <ASR_Refresh+0x98>
	else if(hASR->omega_ref > hASR_Init->omega_limit)	_omega_ref = hASR_Init->omega_limit;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800edca:	4b67      	ldr	r3, [pc, #412]	; (800ef68 <ASR_Refresh+0x210>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	edd3 7a03 	vldr	s15, [r3, #12]
 800edd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edda:	dd05      	ble.n	800ede8 <ASR_Refresh+0x90>
 800eddc:	4b62      	ldr	r3, [pc, #392]	; (800ef68 <ASR_Refresh+0x210>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	4a62      	ldr	r2, [pc, #392]	; (800ef6c <ASR_Refresh+0x214>)
 800ede4:	6013      	str	r3, [r2, #0]
 800ede6:	e003      	b.n	800edf0 <ASR_Refresh+0x98>
	else												_omega_ref = hASR->omega_ref;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edec:	4a5f      	ldr	r2, [pc, #380]	; (800ef6c <ASR_Refresh+0x214>)
 800edee:	6013      	str	r3, [r2, #0]

	// 速度偏差
	hASR->omega_error = _omega_ref - hASR->omega;
 800edf0:	4b5e      	ldr	r3, [pc, #376]	; (800ef6c <ASR_Refresh+0x214>)
 800edf2:	ed93 7a00 	vldr	s14, [r3]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800edfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

#if USE_ANTI_WINDUP
	// リミット偏差フィードバックによる

	integInput = hASR->omega_error - hASR_Init->hACR->Iq_limitError / (KT * hASR_Init->Kp);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7f9 fad4 	bl	80083b8 <__aeabi_f2d>
 800ee10:	4604      	mov	r4, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	4b54      	ldr	r3, [pc, #336]	; (800ef68 <ASR_Refresh+0x210>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	699b      	ldr	r3, [r3, #24]
 800ee1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7f9 facb 	bl	80083b8 <__aeabi_f2d>
 800ee22:	4680      	mov	r8, r0
 800ee24:	4689      	mov	r9, r1
 800ee26:	4b50      	ldr	r3, [pc, #320]	; (800ef68 <ASR_Refresh+0x210>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7f9 fac3 	bl	80083b8 <__aeabi_f2d>
 800ee32:	a34b      	add	r3, pc, #300	; (adr r3, 800ef60 <ASR_Refresh+0x208>)
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	f7f9 fb16 	bl	8008468 <__aeabi_dmul>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4640      	mov	r0, r8
 800ee42:	4649      	mov	r1, r9
 800ee44:	f7f9 fc3a 	bl	80086bc <__aeabi_ddiv>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4629      	mov	r1, r5
 800ee50:	f7f9 f952 	bl	80080f8 <__aeabi_dsub>
 800ee54:	4603      	mov	r3, r0
 800ee56:	460c      	mov	r4, r1
 800ee58:	4618      	mov	r0, r3
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	f7f9 fddc 	bl	8008a18 <__aeabi_d2f>
 800ee60:	4602      	mov	r2, r0
 800ee62:	4b43      	ldr	r3, [pc, #268]	; (800ef70 <ASR_Refresh+0x218>)
 800ee64:	601a      	str	r2, [r3, #0]

	hASR->omega_error_integ += hASR_Init->cycleTime * 0.5 * (integInput + hASR->p_omega_error);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f9 faa4 	bl	80083b8 <__aeabi_f2d>
 800ee70:	4604      	mov	r4, r0
 800ee72:	460d      	mov	r5, r1
 800ee74:	4b3c      	ldr	r3, [pc, #240]	; (800ef68 <ASR_Refresh+0x210>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7f9 fa9c 	bl	80083b8 <__aeabi_f2d>
 800ee80:	f04f 0200 	mov.w	r2, #0
 800ee84:	4b3b      	ldr	r3, [pc, #236]	; (800ef74 <ASR_Refresh+0x21c>)
 800ee86:	f7f9 faef 	bl	8008468 <__aeabi_dmul>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	4690      	mov	r8, r2
 800ee90:	4699      	mov	r9, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800ee98:	4b35      	ldr	r3, [pc, #212]	; (800ef70 <ASR_Refresh+0x218>)
 800ee9a:	edd3 7a00 	vldr	s15, [r3]
 800ee9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eea2:	ee17 0a90 	vmov	r0, s15
 800eea6:	f7f9 fa87 	bl	80083b8 <__aeabi_f2d>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	460b      	mov	r3, r1
 800eeae:	4640      	mov	r0, r8
 800eeb0:	4649      	mov	r1, r9
 800eeb2:	f7f9 fad9 	bl	8008468 <__aeabi_dmul>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	460b      	mov	r3, r1
 800eeba:	4620      	mov	r0, r4
 800eebc:	4629      	mov	r1, r5
 800eebe:	f7f9 f91d 	bl	80080fc <__adddf3>
 800eec2:	4603      	mov	r3, r0
 800eec4:	460c      	mov	r4, r1
 800eec6:	4618      	mov	r0, r3
 800eec8:	4621      	mov	r1, r4
 800eeca:	f7f9 fda5 	bl	8008a18 <__aeabi_d2f>
 800eece:	4602      	mov	r2, r0
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->p_omega_error = integInput;
 800eed4:	4b26      	ldr	r3, [pc, #152]	; (800ef70 <ASR_Refresh+0x218>)
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	631a      	str	r2, [r3, #48]	; 0x30
	hASR->omega_error_integ += hASR_Init->cycleTime * 0.5 * (hASR->omega_error + hASR->p_omega_error);
	hASR->p_omega_error = hASR->omega_error;
#endif


	torque_ref = hASR_Init->Kp * hASR->omega_error + hASR_Init->Ki * hASR->omega_error_integ;
 800eedc:	4b22      	ldr	r3, [pc, #136]	; (800ef68 <ASR_Refresh+0x210>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	ed93 7a00 	vldr	s14, [r3]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800eeea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eeee:	4b1e      	ldr	r3, [pc, #120]	; (800ef68 <ASR_Refresh+0x210>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	edd3 6a01 	vldr	s13, [r3, #4]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800eefc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef04:	4b1c      	ldr	r3, [pc, #112]	; (800ef78 <ASR_Refresh+0x220>)
 800ef06:	edc3 7a00 	vstr	s15, [r3]

	hASR_Init->hACR->Id_ref = 0.0f;
 800ef0a:	4b17      	ldr	r3, [pc, #92]	; (800ef68 <ASR_Refresh+0x210>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	699b      	ldr	r3, [r3, #24]
 800ef10:	f04f 0200 	mov.w	r2, #0
 800ef14:	635a      	str	r2, [r3, #52]	; 0x34
	hASR_Init->hACR->Iq_ref = hASR->Iq_ref = KT * torque_ref;
 800ef16:	4b18      	ldr	r3, [pc, #96]	; (800ef78 <ASR_Refresh+0x220>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7f9 fa4c 	bl	80083b8 <__aeabi_f2d>
 800ef20:	a30f      	add	r3, pc, #60	; (adr r3, 800ef60 <ASR_Refresh+0x208>)
 800ef22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef26:	f7f9 fa9f 	bl	8008468 <__aeabi_dmul>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	460c      	mov	r4, r1
 800ef2e:	4618      	mov	r0, r3
 800ef30:	4621      	mov	r1, r4
 800ef32:	f7f9 fd71 	bl	8008a18 <__aeabi_d2f>
 800ef36:	4602      	mov	r2, r0
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	639a      	str	r2, [r3, #56]	; 0x38
 800ef3c:	4b0a      	ldr	r3, [pc, #40]	; (800ef68 <ASR_Refresh+0x210>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	699b      	ldr	r3, [r3, #24]
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ef46:	639a      	str	r2, [r3, #56]	; 0x38


	return;
 800ef48:	bf00      	nop
 800ef4a:	e002      	b.n	800ef52 <ASR_Refresh+0x1fa>
		return;
 800ef4c:	bf00      	nop
 800ef4e:	e000      	b.n	800ef52 <ASR_Refresh+0x1fa>
		return;
 800ef50:	bf00      	nop
}
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ef5a:	bf00      	nop
 800ef5c:	f3af 8000 	nop.w
 800ef60:	d9ad78ef 	.word	0xd9ad78ef
 800ef64:	3fc563f2 	.word	0x3fc563f2
 800ef68:	20000214 	.word	0x20000214
 800ef6c:	20000218 	.word	0x20000218
 800ef70:	2000021c 	.word	0x2000021c
 800ef74:	3fe00000 	.word	0x3fe00000
 800ef78:	20000220 	.word	0x20000220

0800ef7c <ASR_Reset>:



inline void ASR_Reset(ASR_TypeDef *hASR)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]

	hASR->firstLaunch = 1;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hASR->omega_error_integ = 0.0f;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f04f 0200 	mov.w	r2, #0
 800ef92:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->omega = 0.0f;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f04f 0200 	mov.w	r2, #0
 800ef9a:	629a      	str	r2, [r3, #40]	; 0x28

	hASR->omega_ref = 0.0f;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f04f 0200 	mov.w	r2, #0
 800efa2:	625a      	str	r2, [r3, #36]	; 0x24


}
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <CurrentSensor_Init>:

int32_t median5(int32_t *buf);


void CurrentSensor_Init()
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0

	memset(&mainCS, 0x00, sizeof(mainCS));
 800efb4:	2290      	movs	r2, #144	; 0x90
 800efb6:	2100      	movs	r1, #0
 800efb8:	4812      	ldr	r0, [pc, #72]	; (800f004 <CurrentSensor_Init+0x54>)
 800efba:	f003 f85a 	bl	8012072 <memset>

	mainCS.Init.CS_Type = CS_Type_3shunt;
 800efbe:	4b11      	ldr	r3, [pc, #68]	; (800f004 <CurrentSensor_Init+0x54>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	701a      	strb	r2, [r3, #0]
	mainCS.Init.Iu_Gain = -10.0f;//9.0f;	// 1 / ( R * OPAmpGain) [A / V]
 800efc4:	4b0f      	ldr	r3, [pc, #60]	; (800f004 <CurrentSensor_Init+0x54>)
 800efc6:	4a10      	ldr	r2, [pc, #64]	; (800f008 <CurrentSensor_Init+0x58>)
 800efc8:	615a      	str	r2, [r3, #20]
	mainCS.Init.Iv_Gain = -10.0f;//5.3f;	// 1 / ( R * OPAmpGain) [A / V]
 800efca:	4b0e      	ldr	r3, [pc, #56]	; (800f004 <CurrentSensor_Init+0x54>)
 800efcc:	4a0e      	ldr	r2, [pc, #56]	; (800f008 <CurrentSensor_Init+0x58>)
 800efce:	619a      	str	r2, [r3, #24]
	mainCS.Init.Iw_Gain = -10.0f;//5.5f;	// 1 / ( R * OPAmpGain) [A / V]
 800efd0:	4b0c      	ldr	r3, [pc, #48]	; (800f004 <CurrentSensor_Init+0x54>)
 800efd2:	4a0d      	ldr	r2, [pc, #52]	; (800f008 <CurrentSensor_Init+0x58>)
 800efd4:	61da      	str	r2, [r3, #28]
	mainCS.Init.V_Iu_offset = 1.65;
 800efd6:	4b0b      	ldr	r3, [pc, #44]	; (800f004 <CurrentSensor_Init+0x54>)
 800efd8:	4a0c      	ldr	r2, [pc, #48]	; (800f00c <CurrentSensor_Init+0x5c>)
 800efda:	621a      	str	r2, [r3, #32]
	mainCS.Init.V_Iv_offset = 1.65;
 800efdc:	4b09      	ldr	r3, [pc, #36]	; (800f004 <CurrentSensor_Init+0x54>)
 800efde:	4a0b      	ldr	r2, [pc, #44]	; (800f00c <CurrentSensor_Init+0x5c>)
 800efe0:	625a      	str	r2, [r3, #36]	; 0x24
	mainCS.Init.V_Iw_offset = 1.65;
 800efe2:	4b08      	ldr	r3, [pc, #32]	; (800f004 <CurrentSensor_Init+0x54>)
 800efe4:	4a09      	ldr	r2, [pc, #36]	; (800f00c <CurrentSensor_Init+0x5c>)
 800efe6:	629a      	str	r2, [r3, #40]	; 0x28
	mainCS.Init.hadc_Iu = &hadc1;
 800efe8:	4b06      	ldr	r3, [pc, #24]	; (800f004 <CurrentSensor_Init+0x54>)
 800efea:	4a09      	ldr	r2, [pc, #36]	; (800f010 <CurrentSensor_Init+0x60>)
 800efec:	605a      	str	r2, [r3, #4]
	mainCS.Init.hadc_Iv = &hadc2;
 800efee:	4b05      	ldr	r3, [pc, #20]	; (800f004 <CurrentSensor_Init+0x54>)
 800eff0:	4a08      	ldr	r2, [pc, #32]	; (800f014 <CurrentSensor_Init+0x64>)
 800eff2:	609a      	str	r2, [r3, #8]
	mainCS.Init.hadc_Iw = &hadc3;
 800eff4:	4b03      	ldr	r3, [pc, #12]	; (800f004 <CurrentSensor_Init+0x54>)
 800eff6:	4a08      	ldr	r2, [pc, #32]	; (800f018 <CurrentSensor_Init+0x68>)
 800eff8:	60da      	str	r2, [r3, #12]

	mainCS.pos_MEDF_I = 0;
 800effa:	4b02      	ldr	r3, [pc, #8]	; (800f004 <CurrentSensor_Init+0x54>)
 800effc:	2200      	movs	r2, #0
 800effe:	639a      	str	r2, [r3, #56]	; 0x38

}
 800f000:	bf00      	nop
 800f002:	bd80      	pop	{r7, pc}
 800f004:	200043e4 	.word	0x200043e4
 800f008:	c1200000 	.word	0xc1200000
 800f00c:	3fd33333 	.word	0x3fd33333
 800f010:	20004548 	.word	0x20004548
 800f014:	200044a0 	.word	0x200044a0
 800f018:	20004590 	.word	0x20004590

0800f01c <CurrentSensor_Start>:


void CurrentSensor_Start(CurrentSensor_TypeDef *hCS)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]

	switch(hCS->Init.CS_Type)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d000      	beq.n	800f02e <CurrentSensor_Start+0x12>
		break;
	}



}
 800f02c:	e018      	b.n	800f060 <CurrentSensor_Start+0x44>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iu, hCS->AD_Iu, 1);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6858      	ldr	r0, [r3, #4]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3330      	adds	r3, #48	; 0x30
 800f036:	2201      	movs	r2, #1
 800f038:	4619      	mov	r1, r3
 800f03a:	f7f9 ff95 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iv, hCS->AD_Iv, 1);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6898      	ldr	r0, [r3, #8]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	3332      	adds	r3, #50	; 0x32
 800f046:	2201      	movs	r2, #1
 800f048:	4619      	mov	r1, r3
 800f04a:	f7f9 ff8d 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iw, hCS->AD_Iw, 1);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68d8      	ldr	r0, [r3, #12]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	3334      	adds	r3, #52	; 0x34
 800f056:	2201      	movs	r2, #1
 800f058:	4619      	mov	r1, r3
 800f05a:	f7f9 ff85 	bl	8008f68 <HAL_ADC_Start_DMA>
		break;
 800f05e:	bf00      	nop
}
 800f060:	bf00      	nop
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <CurrentSensor_Refresh>:
/*
 * UVWの電流値を更新するだけ
 * 座標変換とかはやらない
 */
inline void CurrentSensor_Refresh(CurrentSensor_TypeDef *hCS, uint8_t SVM_sector)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	460b      	mov	r3, r1
 800f072:	70fb      	strb	r3, [r7, #3]
	static int32_t AD_Iv_MEDF = 0;
	static int32_t AD_Iw_MEDF = 0;

	static CurrentSensor_InitTypeDef *hCS_Init;

	hCS_Init = &hCS->Init;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a98      	ldr	r2, [pc, #608]	; (800f2d8 <CurrentSensor_Refresh+0x270>)
 800f078:	6013      	str	r3, [r2, #0]

	switch(hCS->Init.CS_Type)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d000      	beq.n	800f084 <CurrentSensor_Refresh+0x1c>

		break; /* CS_Type_3shunt */


		default:
			break;
 800f082:	e124      	b.n	800f2ce <CurrentSensor_Refresh+0x266>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iu, hCS->AD_Iu, 1);
 800f084:	4b94      	ldr	r3, [pc, #592]	; (800f2d8 <CurrentSensor_Refresh+0x270>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6858      	ldr	r0, [r3, #4]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3330      	adds	r3, #48	; 0x30
 800f08e:	2201      	movs	r2, #1
 800f090:	4619      	mov	r1, r3
 800f092:	f7f9 ff69 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iv, hCS->AD_Iv, 1);
 800f096:	4b90      	ldr	r3, [pc, #576]	; (800f2d8 <CurrentSensor_Refresh+0x270>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	6898      	ldr	r0, [r3, #8]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3332      	adds	r3, #50	; 0x32
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	f7f9 ff60 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iw, hCS->AD_Iw, 1);
 800f0a8:	4b8b      	ldr	r3, [pc, #556]	; (800f2d8 <CurrentSensor_Refresh+0x270>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68d8      	ldr	r0, [r3, #12]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	3334      	adds	r3, #52	; 0x34
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	f7f9 ff57 	bl	8008f68 <HAL_ADC_Start_DMA>
		hCS->AD_Iu_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iu[0];
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	330e      	adds	r3, #14
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	4413      	add	r3, r2
 800f0cc:	6059      	str	r1, [r3, #4]
		hCS->AD_Iv_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iv[0];
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	3214      	adds	r2, #20
 800f0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hCS->AD_Iw_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iw[0];
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	3318      	adds	r3, #24
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4413      	add	r3, r2
 800f0f0:	6059      	str	r1, [r3, #4]
		hCS->pos_MEDF_I += 1;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	639a      	str	r2, [r3, #56]	; 0x38
		if(hCS->pos_MEDF_I >= MEDIAN_ORDER)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f100:	2b04      	cmp	r3, #4
 800f102:	dd02      	ble.n	800f10a <CurrentSensor_Refresh+0xa2>
			hCS->pos_MEDF_I = 0;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	639a      	str	r2, [r3, #56]	; 0x38
		AD_Iu_MEDF = median5(hCS->AD_Iu_buf);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	333c      	adds	r3, #60	; 0x3c
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 f974 	bl	800f3fc <median5>
 800f114:	4602      	mov	r2, r0
 800f116:	4b71      	ldr	r3, [pc, #452]	; (800f2dc <CurrentSensor_Refresh+0x274>)
 800f118:	601a      	str	r2, [r3, #0]
		AD_Iv_MEDF = median5(hCS->AD_Iv_buf);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3350      	adds	r3, #80	; 0x50
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 f96c 	bl	800f3fc <median5>
 800f124:	4602      	mov	r2, r0
 800f126:	4b6e      	ldr	r3, [pc, #440]	; (800f2e0 <CurrentSensor_Refresh+0x278>)
 800f128:	601a      	str	r2, [r3, #0]
		AD_Iw_MEDF = median5(hCS->AD_Iw_buf);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	3364      	adds	r3, #100	; 0x64
 800f12e:	4618      	mov	r0, r3
 800f130:	f000 f964 	bl	800f3fc <median5>
 800f134:	4602      	mov	r2, r0
 800f136:	4b6b      	ldr	r3, [pc, #428]	; (800f2e4 <CurrentSensor_Refresh+0x27c>)
 800f138:	601a      	str	r2, [r3, #0]
		hCS->V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iu_offset;
 800f13a:	4b68      	ldr	r3, [pc, #416]	; (800f2dc <CurrentSensor_Refresh+0x274>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	ee07 3a90 	vmov	s15, r3
 800f142:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f146:	eddf 7a68 	vldr	s15, [pc, #416]	; 800f2e8 <CurrentSensor_Refresh+0x280>
 800f14a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f14e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f152:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800f2ec <CurrentSensor_Refresh+0x284>
 800f156:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f15a:	4b5f      	ldr	r3, [pc, #380]	; (800f2d8 <CurrentSensor_Refresh+0x270>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	edd3 7a08 	vldr	s15, [r3, #32]
 800f162:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		hCS->V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iv_offset;
 800f16c:	4b5c      	ldr	r3, [pc, #368]	; (800f2e0 <CurrentSensor_Refresh+0x278>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	ee07 3a90 	vmov	s15, r3
 800f174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f178:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f2e8 <CurrentSensor_Refresh+0x280>
 800f17c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f184:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f2ec <CurrentSensor_Refresh+0x284>
 800f188:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f18c:	4b52      	ldr	r3, [pc, #328]	; (800f2d8 <CurrentSensor_Refresh+0x270>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f194:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		hCS->V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iw_offset;
 800f19e:	4b51      	ldr	r3, [pc, #324]	; (800f2e4 <CurrentSensor_Refresh+0x27c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	ee07 3a90 	vmov	s15, r3
 800f1a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f1aa:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800f2e8 <CurrentSensor_Refresh+0x280>
 800f1ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f1b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1b6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f2ec <CurrentSensor_Refresh+0x284>
 800f1ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f1be:	4b46      	ldr	r3, [pc, #280]	; (800f2d8 <CurrentSensor_Refresh+0x270>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f1c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		switch(SVM_sector)
 800f1d0:	78fb      	ldrb	r3, [r7, #3]
 800f1d2:	2b05      	cmp	r3, #5
 800f1d4:	d87a      	bhi.n	800f2cc <CurrentSensor_Refresh+0x264>
 800f1d6:	a201      	add	r2, pc, #4	; (adr r2, 800f1dc <CurrentSensor_Refresh+0x174>)
 800f1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1dc:	0800f1f5 	.word	0x0800f1f5
 800f1e0:	0800f23d 	.word	0x0800f23d
 800f1e4:	0800f23d 	.word	0x0800f23d
 800f1e8:	0800f285 	.word	0x0800f285
 800f1ec:	0800f285 	.word	0x0800f285
 800f1f0:	0800f1f5 	.word	0x0800f1f5
			hCS->Iv = hCS->V_Iv * hCS->Init.Iv_Gain;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	edd3 7a06 	vldr	s15, [r3, #24]
 800f200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
			hCS->Iw = hCS->V_Iw * hCS->Init.Iw_Gain;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	edd3 7a07 	vldr	s15, [r3, #28]
 800f216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
			hCS->Iu = - hCS->Iv - hCS->Iw;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f226:	eeb1 7a67 	vneg.f32	s14, s15
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800f230:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 800f23a:	e047      	b.n	800f2cc <CurrentSensor_Refresh+0x264>
			hCS->Iw = hCS->V_Iw * hCS->Init.Iw_Gain;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	edd3 7a07 	vldr	s15, [r3, #28]
 800f248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
			hCS->Iu = hCS->V_Iu * hCS->Init.Iu_Gain;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	edd3 7a05 	vldr	s15, [r3, #20]
 800f25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			hCS->Iv = - hCS->Iw - hCS->Iu;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800f26e:	eeb1 7a67 	vneg.f32	s14, s15
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
			break;
 800f282:	e023      	b.n	800f2cc <CurrentSensor_Refresh+0x264>
			hCS->Iu = hCS->V_Iu * hCS->Init.Iu_Gain;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	edd3 7a05 	vldr	s15, [r3, #20]
 800f290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			hCS->Iv = hCS->V_Iv * hCS->Init.Iv_Gain;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	edd3 7a06 	vldr	s15, [r3, #24]
 800f2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
			hCS->Iw = - hCS->Iu - hCS->Iv;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f2b6:	eeb1 7a67 	vneg.f32	s14, s15
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f2c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
			break;
 800f2ca:	bf00      	nop
		break; /* CS_Type_3shunt */
 800f2cc:	bf00      	nop
	}




}
 800f2ce:	bf00      	nop
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20000224 	.word	0x20000224
 800f2dc:	20000228 	.word	0x20000228
 800f2e0:	2000022c 	.word	0x2000022c
 800f2e4:	20000230 	.word	0x20000230
 800f2e8:	00001000 	.word	0x00001000
 800f2ec:	40533333 	.word	0x40533333

0800f2f0 <CurrentSensor_getIdq>:

/*
 * 回転座標系における電流を算出
 */
inline void CurrentSensor_getIdq(CurrentSensor_TypeDef *hCS, float *Id, float *Iq, float cos_theta_re, float sin_theta_re)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6178      	str	r0, [r7, #20]
 800f2f8:	6139      	str	r1, [r7, #16]
 800f2fa:	60fa      	str	r2, [r7, #12]
 800f2fc:	ed87 0a02 	vstr	s0, [r7, #8]
 800f300:	edc7 0a01 	vstr	s1, [r7, #4]

	*Id = 0.8165f * (
			+ hCS->Iu * cos_theta_re
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800f30a:	edd7 7a02 	vldr	s15, [r7, #8]
 800f30e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re)
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800f318:	edd7 7a02 	vldr	s15, [r7, #8]
 800f31c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f320:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f324:	edd7 7a01 	vldr	s15, [r7, #4]
 800f328:	eddf 5a32 	vldr	s11, [pc, #200]	; 800f3f4 <CurrentSensor_getIdq+0x104>
 800f32c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f330:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f338:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800f342:	edd7 7a02 	vldr	s15, [r7, #8]
 800f346:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f34a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f34e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f352:	eddf 5a28 	vldr	s11, [pc, #160]	; 800f3f4 <CurrentSensor_getIdq+0x104>
 800f356:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f35a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f35e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f362:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Id = 0.8165f * (
 800f366:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800f3f8 <CurrentSensor_getIdq+0x108>
 800f36a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	edc3 7a00 	vstr	s15, [r3]

	*Iq = 0.8165f * (
			- hCS->Iu * sin_theta_re
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f37a:	eeb1 7a67 	vneg.f32	s14, s15
 800f37e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f382:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re)
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800f38c:	edd7 7a01 	vldr	s15, [r7, #4]
 800f390:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f394:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f398:	edd7 7a02 	vldr	s15, [r7, #8]
 800f39c:	eddf 5a15 	vldr	s11, [pc, #84]	; 800f3f4 <CurrentSensor_getIdq+0x104>
 800f3a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f3a4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f3a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3ac:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800f3b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800f3ba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f3be:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f3c2:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3c6:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800f3f4 <CurrentSensor_getIdq+0x104>
 800f3ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f3ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f3d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3d6:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Iq = 0.8165f * (
 800f3da:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f3f8 <CurrentSensor_getIdq+0x108>
 800f3de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	edc3 7a00 	vstr	s15, [r3]

}
 800f3e8:	bf00      	nop
 800f3ea:	371c      	adds	r7, #28
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr
 800f3f4:	3f5ae148 	.word	0x3f5ae148
 800f3f8:	3f510625 	.word	0x3f510625

0800f3fc <median5>:
	return 0;
}


inline int32_t median5(int32_t *buf)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
	static uint32_t winCount[5] = {0};

	winCount[0] = 0;
 800f404:	4b76      	ldr	r3, [pc, #472]	; (800f5e0 <median5+0x1e4>)
 800f406:	2200      	movs	r2, #0
 800f408:	601a      	str	r2, [r3, #0]
	winCount[1] = 0;
 800f40a:	4b75      	ldr	r3, [pc, #468]	; (800f5e0 <median5+0x1e4>)
 800f40c:	2200      	movs	r2, #0
 800f40e:	605a      	str	r2, [r3, #4]
	winCount[2] = 0;
 800f410:	4b73      	ldr	r3, [pc, #460]	; (800f5e0 <median5+0x1e4>)
 800f412:	2200      	movs	r2, #0
 800f414:	609a      	str	r2, [r3, #8]
	winCount[3] = 0;
 800f416:	4b72      	ldr	r3, [pc, #456]	; (800f5e0 <median5+0x1e4>)
 800f418:	2200      	movs	r2, #0
 800f41a:	60da      	str	r2, [r3, #12]
	winCount[4] = 0;
 800f41c:	4b70      	ldr	r3, [pc, #448]	; (800f5e0 <median5+0x1e4>)
 800f41e:	2200      	movs	r2, #0
 800f420:	611a      	str	r2, [r3, #16]

	if (buf[0] > buf[1]) winCount[0]++; else winCount[1]++;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3304      	adds	r3, #4
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	dd05      	ble.n	800f43c <median5+0x40>
 800f430:	4b6b      	ldr	r3, [pc, #428]	; (800f5e0 <median5+0x1e4>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3301      	adds	r3, #1
 800f436:	4a6a      	ldr	r2, [pc, #424]	; (800f5e0 <median5+0x1e4>)
 800f438:	6013      	str	r3, [r2, #0]
 800f43a:	e004      	b.n	800f446 <median5+0x4a>
 800f43c:	4b68      	ldr	r3, [pc, #416]	; (800f5e0 <median5+0x1e4>)
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	3301      	adds	r3, #1
 800f442:	4a67      	ldr	r2, [pc, #412]	; (800f5e0 <median5+0x1e4>)
 800f444:	6053      	str	r3, [r2, #4]
	if (buf[0] > buf[2]) winCount[0]++; else winCount[2]++;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	3308      	adds	r3, #8
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	429a      	cmp	r2, r3
 800f452:	dd05      	ble.n	800f460 <median5+0x64>
 800f454:	4b62      	ldr	r3, [pc, #392]	; (800f5e0 <median5+0x1e4>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	3301      	adds	r3, #1
 800f45a:	4a61      	ldr	r2, [pc, #388]	; (800f5e0 <median5+0x1e4>)
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	e004      	b.n	800f46a <median5+0x6e>
 800f460:	4b5f      	ldr	r3, [pc, #380]	; (800f5e0 <median5+0x1e4>)
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	3301      	adds	r3, #1
 800f466:	4a5e      	ldr	r2, [pc, #376]	; (800f5e0 <median5+0x1e4>)
 800f468:	6093      	str	r3, [r2, #8]
	if (buf[0] > buf[3]) winCount[0]++; else winCount[3]++;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	330c      	adds	r3, #12
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	429a      	cmp	r2, r3
 800f476:	dd05      	ble.n	800f484 <median5+0x88>
 800f478:	4b59      	ldr	r3, [pc, #356]	; (800f5e0 <median5+0x1e4>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	3301      	adds	r3, #1
 800f47e:	4a58      	ldr	r2, [pc, #352]	; (800f5e0 <median5+0x1e4>)
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	e004      	b.n	800f48e <median5+0x92>
 800f484:	4b56      	ldr	r3, [pc, #344]	; (800f5e0 <median5+0x1e4>)
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	3301      	adds	r3, #1
 800f48a:	4a55      	ldr	r2, [pc, #340]	; (800f5e0 <median5+0x1e4>)
 800f48c:	60d3      	str	r3, [r2, #12]
	if (buf[0] > buf[4]) winCount[0]++; else winCount[4]++;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	3310      	adds	r3, #16
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	dd05      	ble.n	800f4a8 <median5+0xac>
 800f49c:	4b50      	ldr	r3, [pc, #320]	; (800f5e0 <median5+0x1e4>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	4a4f      	ldr	r2, [pc, #316]	; (800f5e0 <median5+0x1e4>)
 800f4a4:	6013      	str	r3, [r2, #0]
 800f4a6:	e004      	b.n	800f4b2 <median5+0xb6>
 800f4a8:	4b4d      	ldr	r3, [pc, #308]	; (800f5e0 <median5+0x1e4>)
 800f4aa:	691b      	ldr	r3, [r3, #16]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	4a4c      	ldr	r2, [pc, #304]	; (800f5e0 <median5+0x1e4>)
 800f4b0:	6113      	str	r3, [r2, #16]

	if (winCount[0] == 2) return buf[0];
 800f4b2:	4b4b      	ldr	r3, [pc, #300]	; (800f5e0 <median5+0x1e4>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d102      	bne.n	800f4c0 <median5+0xc4>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	e088      	b.n	800f5d2 <median5+0x1d6>

	if (buf[1] > buf[2]) winCount[1]++; else winCount[2]++;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	dd05      	ble.n	800f4dc <median5+0xe0>
 800f4d0:	4b43      	ldr	r3, [pc, #268]	; (800f5e0 <median5+0x1e4>)
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	4a42      	ldr	r2, [pc, #264]	; (800f5e0 <median5+0x1e4>)
 800f4d8:	6053      	str	r3, [r2, #4]
 800f4da:	e004      	b.n	800f4e6 <median5+0xea>
 800f4dc:	4b40      	ldr	r3, [pc, #256]	; (800f5e0 <median5+0x1e4>)
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	4a3f      	ldr	r2, [pc, #252]	; (800f5e0 <median5+0x1e4>)
 800f4e4:	6093      	str	r3, [r2, #8]
	if (buf[1] > buf[3]) winCount[1]++; else winCount[3]++;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	330c      	adds	r3, #12
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	dd05      	ble.n	800f502 <median5+0x106>
 800f4f6:	4b3a      	ldr	r3, [pc, #232]	; (800f5e0 <median5+0x1e4>)
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	4a38      	ldr	r2, [pc, #224]	; (800f5e0 <median5+0x1e4>)
 800f4fe:	6053      	str	r3, [r2, #4]
 800f500:	e004      	b.n	800f50c <median5+0x110>
 800f502:	4b37      	ldr	r3, [pc, #220]	; (800f5e0 <median5+0x1e4>)
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	3301      	adds	r3, #1
 800f508:	4a35      	ldr	r2, [pc, #212]	; (800f5e0 <median5+0x1e4>)
 800f50a:	60d3      	str	r3, [r2, #12]
	if (buf[1] > buf[4]) winCount[1]++; else winCount[4]++;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	3304      	adds	r3, #4
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	3310      	adds	r3, #16
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	429a      	cmp	r2, r3
 800f51a:	dd05      	ble.n	800f528 <median5+0x12c>
 800f51c:	4b30      	ldr	r3, [pc, #192]	; (800f5e0 <median5+0x1e4>)
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	3301      	adds	r3, #1
 800f522:	4a2f      	ldr	r2, [pc, #188]	; (800f5e0 <median5+0x1e4>)
 800f524:	6053      	str	r3, [r2, #4]
 800f526:	e004      	b.n	800f532 <median5+0x136>
 800f528:	4b2d      	ldr	r3, [pc, #180]	; (800f5e0 <median5+0x1e4>)
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	3301      	adds	r3, #1
 800f52e:	4a2c      	ldr	r2, [pc, #176]	; (800f5e0 <median5+0x1e4>)
 800f530:	6113      	str	r3, [r2, #16]

	if (winCount[1] == 2) return buf[1];
 800f532:	4b2b      	ldr	r3, [pc, #172]	; (800f5e0 <median5+0x1e4>)
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	2b02      	cmp	r3, #2
 800f538:	d102      	bne.n	800f540 <median5+0x144>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	e048      	b.n	800f5d2 <median5+0x1d6>

	if (buf[2] > buf[3]) winCount[2]++; else winCount[3]++;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3308      	adds	r3, #8
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	330c      	adds	r3, #12
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	dd05      	ble.n	800f55c <median5+0x160>
 800f550:	4b23      	ldr	r3, [pc, #140]	; (800f5e0 <median5+0x1e4>)
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	3301      	adds	r3, #1
 800f556:	4a22      	ldr	r2, [pc, #136]	; (800f5e0 <median5+0x1e4>)
 800f558:	6093      	str	r3, [r2, #8]
 800f55a:	e004      	b.n	800f566 <median5+0x16a>
 800f55c:	4b20      	ldr	r3, [pc, #128]	; (800f5e0 <median5+0x1e4>)
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	3301      	adds	r3, #1
 800f562:	4a1f      	ldr	r2, [pc, #124]	; (800f5e0 <median5+0x1e4>)
 800f564:	60d3      	str	r3, [r2, #12]
	if (buf[2] > buf[4]) winCount[2]++; else winCount[4]++;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3308      	adds	r3, #8
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3310      	adds	r3, #16
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	429a      	cmp	r2, r3
 800f574:	dd05      	ble.n	800f582 <median5+0x186>
 800f576:	4b1a      	ldr	r3, [pc, #104]	; (800f5e0 <median5+0x1e4>)
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	3301      	adds	r3, #1
 800f57c:	4a18      	ldr	r2, [pc, #96]	; (800f5e0 <median5+0x1e4>)
 800f57e:	6093      	str	r3, [r2, #8]
 800f580:	e004      	b.n	800f58c <median5+0x190>
 800f582:	4b17      	ldr	r3, [pc, #92]	; (800f5e0 <median5+0x1e4>)
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	3301      	adds	r3, #1
 800f588:	4a15      	ldr	r2, [pc, #84]	; (800f5e0 <median5+0x1e4>)
 800f58a:	6113      	str	r3, [r2, #16]

	if (winCount[2] == 2) return buf[2];
 800f58c:	4b14      	ldr	r3, [pc, #80]	; (800f5e0 <median5+0x1e4>)
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	2b02      	cmp	r3, #2
 800f592:	d102      	bne.n	800f59a <median5+0x19e>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	e01b      	b.n	800f5d2 <median5+0x1d6>

	if (buf[3] > buf[4]) winCount[3]++; else winCount[4]++;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	330c      	adds	r3, #12
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	3310      	adds	r3, #16
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	dd05      	ble.n	800f5b6 <median5+0x1ba>
 800f5aa:	4b0d      	ldr	r3, [pc, #52]	; (800f5e0 <median5+0x1e4>)
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	4a0b      	ldr	r2, [pc, #44]	; (800f5e0 <median5+0x1e4>)
 800f5b2:	60d3      	str	r3, [r2, #12]
 800f5b4:	e004      	b.n	800f5c0 <median5+0x1c4>
 800f5b6:	4b0a      	ldr	r3, [pc, #40]	; (800f5e0 <median5+0x1e4>)
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	4a08      	ldr	r2, [pc, #32]	; (800f5e0 <median5+0x1e4>)
 800f5be:	6113      	str	r3, [r2, #16]

	if (winCount[3] == 2) return buf[3];
 800f5c0:	4b07      	ldr	r3, [pc, #28]	; (800f5e0 <median5+0x1e4>)
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	d102      	bne.n	800f5ce <median5+0x1d2>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	e001      	b.n	800f5d2 <median5+0x1d6>

	return buf[4];
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	691b      	ldr	r3, [r3, #16]

}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	370c      	adds	r7, #12
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	20000234 	.word	0x20000234

0800f5e4 <DRV_Init>:
DRV_TypeDef drv8323;



void DRV_Init()
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	af00      	add	r7, sp, #0

	drv8323.NSS_GPIOx = SPI3_NSS_GPIO_Port;
 800f5e8:	4b07      	ldr	r3, [pc, #28]	; (800f608 <DRV_Init+0x24>)
 800f5ea:	4a08      	ldr	r2, [pc, #32]	; (800f60c <DRV_Init+0x28>)
 800f5ec:	621a      	str	r2, [r3, #32]
	drv8323.NSS_GPIO_Pin = SPI3_NSS_Pin;
 800f5ee:	4b06      	ldr	r3, [pc, #24]	; (800f608 <DRV_Init+0x24>)
 800f5f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f5f4:	849a      	strh	r2, [r3, #36]	; 0x24
	drv8323.hspi = &hspi3;
 800f5f6:	4b04      	ldr	r3, [pc, #16]	; (800f608 <DRV_Init+0x24>)
 800f5f8:	4a05      	ldr	r2, [pc, #20]	; (800f610 <DRV_Init+0x2c>)
 800f5fa:	61da      	str	r2, [r3, #28]



}
 800f5fc:	bf00      	nop
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	20004474 	.word	0x20004474
 800f60c:	40020000 	.word	0x40020000
 800f610:	200047b0 	.word	0x200047b0

0800f614 <DRV_WriteData>:


void DRV_WriteData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af02      	add	r7, sp, #8
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	460b      	mov	r3, r1
 800f61e:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = (addr << 3) | (hdrv->Reg.words[addr] >> 8);
 800f620:	78fb      	ldrb	r3, [r7, #3]
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	b2da      	uxtb	r2, r3
 800f626:	78f9      	ldrb	r1, [r7, #3]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f62e:	0a1b      	lsrs	r3, r3, #8
 800f630:	b2db      	uxtb	r3, r3
 800f632:	4313      	orrs	r3, r2
 800f634:	b2da      	uxtb	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = hdrv->Reg.words[addr] & 0xff;
 800f63c:	78fa      	ldrb	r2, [r7, #3]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f644:	b2da      	uxtb	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a18      	ldr	r0, [r3, #32]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f654:	2200      	movs	r2, #0
 800f656:	4619      	mov	r1, r3
 800f658:	f7fb fd98 	bl	800b18c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	69d8      	ldr	r0, [r3, #28]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f66c:	2301      	movs	r3, #1
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	2302      	movs	r3, #2
 800f672:	f7fc fb19 	bl	800bca8 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a18      	ldr	r0, [r3, #32]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f67e:	2201      	movs	r2, #1
 800f680:	4619      	mov	r1, r3
 800f682:	f7fb fd83 	bl	800b18c <HAL_GPIO_WritePin>

}
 800f686:	bf00      	nop
 800f688:	3708      	adds	r7, #8
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <DRV_ReadData>:



void DRV_ReadData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b084      	sub	sp, #16
 800f692:	af02      	add	r7, sp, #8
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	460b      	mov	r3, r1
 800f698:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = 0x80 | (addr << 3);
 800f69a:	78fb      	ldrb	r3, [r7, #3]
 800f69c:	00db      	lsls	r3, r3, #3
 800f69e:	b25b      	sxtb	r3, r3
 800f6a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f6a4:	b25b      	sxtb	r3, r3
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = 0x00;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a18      	ldr	r0, [r3, #32]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	f7fb fd63 	bl	800b18c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	69d8      	ldr	r0, [r3, #28]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	2302      	movs	r3, #2
 800f6dc:	f7fc fae4 	bl	800bca8 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a18      	ldr	r0, [r3, #32]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	f7fb fd4e 	bl	800b18c <HAL_GPIO_WritePin>

	hdrv->Reg.words[addr] = (hdrv->rxBuf[0] << 8) | hdrv->rxBuf[1];
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6f6:	021b      	lsls	r3, r3, #8
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800f6fe:	4313      	orrs	r3, r2
 800f700:	78fa      	ldrb	r2, [r7, #3]
 800f702:	4619      	mov	r1, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800f70a:	bf00      	nop
 800f70c:	3708      	adds	r7, #8
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
	...

0800f714 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f71a:	463b      	mov	r3, r7
 800f71c:	2200      	movs	r2, #0
 800f71e:	601a      	str	r2, [r3, #0]
 800f720:	605a      	str	r2, [r3, #4]
 800f722:	609a      	str	r2, [r3, #8]
 800f724:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800f726:	4b22      	ldr	r3, [pc, #136]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f728:	4a22      	ldr	r2, [pc, #136]	; (800f7b4 <MX_ADC1_Init+0xa0>)
 800f72a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f72c:	4b20      	ldr	r3, [pc, #128]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f72e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f732:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f734:	4b1e      	ldr	r3, [pc, #120]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f736:	2200      	movs	r2, #0
 800f738:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800f73a:	4b1d      	ldr	r3, [pc, #116]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800f740:	4b1b      	ldr	r3, [pc, #108]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f742:	2200      	movs	r2, #0
 800f744:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f746:	4b1a      	ldr	r3, [pc, #104]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f74e:	4b18      	ldr	r3, [pc, #96]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f750:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f754:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f756:	4b16      	ldr	r3, [pc, #88]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f758:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f75c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f75e:	4b14      	ldr	r3, [pc, #80]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f760:	2200      	movs	r2, #0
 800f762:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800f764:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f766:	2201      	movs	r2, #1
 800f768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f76a:	4b11      	ldr	r3, [pc, #68]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f76c:	2201      	movs	r2, #1
 800f76e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f772:	4b0f      	ldr	r3, [pc, #60]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f774:	2201      	movs	r2, #1
 800f776:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f778:	480d      	ldr	r0, [pc, #52]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f77a:	f7f9 fbb1 	bl	8008ee0 <HAL_ADC_Init>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d001      	beq.n	800f788 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800f784:	f001 fb76 	bl	8010e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800f788:	2300      	movs	r3, #0
 800f78a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f78c:	2301      	movs	r3, #1
 800f78e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f790:	2301      	movs	r3, #1
 800f792:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f794:	463b      	mov	r3, r7
 800f796:	4619      	mov	r1, r3
 800f798:	4805      	ldr	r0, [pc, #20]	; (800f7b0 <MX_ADC1_Init+0x9c>)
 800f79a:	f7f9 fcf5 	bl	8009188 <HAL_ADC_ConfigChannel>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800f7a4:	f001 fb66 	bl	8010e74 <Error_Handler>
  }

}
 800f7a8:	bf00      	nop
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	20004548 	.word	0x20004548
 800f7b4:	40012000 	.word	0x40012000

0800f7b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f7be:	463b      	mov	r3, r7
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]
 800f7c4:	605a      	str	r2, [r3, #4]
 800f7c6:	609a      	str	r2, [r3, #8]
 800f7c8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800f7ca:	4b22      	ldr	r3, [pc, #136]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7cc:	4a22      	ldr	r2, [pc, #136]	; (800f858 <MX_ADC2_Init+0xa0>)
 800f7ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f7d0:	4b20      	ldr	r3, [pc, #128]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f7d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f7d8:	4b1e      	ldr	r3, [pc, #120]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800f7de:	4b1d      	ldr	r3, [pc, #116]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800f7e4:	4b1b      	ldr	r3, [pc, #108]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f7ea:	4b1a      	ldr	r3, [pc, #104]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f7f2:	4b18      	ldr	r3, [pc, #96]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f7f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f7fa:	4b16      	ldr	r3, [pc, #88]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f7fc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f802:	4b14      	ldr	r3, [pc, #80]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f804:	2200      	movs	r2, #0
 800f806:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800f808:	4b12      	ldr	r3, [pc, #72]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f80a:	2201      	movs	r2, #1
 800f80c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800f80e:	4b11      	ldr	r3, [pc, #68]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f810:	2201      	movs	r2, #1
 800f812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f816:	4b0f      	ldr	r3, [pc, #60]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f818:	2201      	movs	r2, #1
 800f81a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f81c:	480d      	ldr	r0, [pc, #52]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f81e:	f7f9 fb5f 	bl	8008ee0 <HAL_ADC_Init>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d001      	beq.n	800f82c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800f828:	f001 fb24 	bl	8010e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800f82c:	2304      	movs	r3, #4
 800f82e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f830:	2301      	movs	r3, #1
 800f832:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f834:	2301      	movs	r3, #1
 800f836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f838:	463b      	mov	r3, r7
 800f83a:	4619      	mov	r1, r3
 800f83c:	4805      	ldr	r0, [pc, #20]	; (800f854 <MX_ADC2_Init+0x9c>)
 800f83e:	f7f9 fca3 	bl	8009188 <HAL_ADC_ConfigChannel>
 800f842:	4603      	mov	r3, r0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d001      	beq.n	800f84c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800f848:	f001 fb14 	bl	8010e74 <Error_Handler>
  }

}
 800f84c:	bf00      	nop
 800f84e:	3710      	adds	r7, #16
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	200044a0 	.word	0x200044a0
 800f858:	40012100 	.word	0x40012100

0800f85c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f862:	463b      	mov	r3, r7
 800f864:	2200      	movs	r2, #0
 800f866:	601a      	str	r2, [r3, #0]
 800f868:	605a      	str	r2, [r3, #4]
 800f86a:	609a      	str	r2, [r3, #8]
 800f86c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800f86e:	4b22      	ldr	r3, [pc, #136]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f870:	4a22      	ldr	r2, [pc, #136]	; (800f8fc <MX_ADC3_Init+0xa0>)
 800f872:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f874:	4b20      	ldr	r3, [pc, #128]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f87a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800f87c:	4b1e      	ldr	r3, [pc, #120]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f87e:	2200      	movs	r2, #0
 800f880:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800f882:	4b1d      	ldr	r3, [pc, #116]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f884:	2200      	movs	r2, #0
 800f886:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800f888:	4b1b      	ldr	r3, [pc, #108]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800f88e:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f896:	4b18      	ldr	r3, [pc, #96]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f898:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f89c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f89e:	4b16      	ldr	r3, [pc, #88]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f8a0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f8a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f8a6:	4b14      	ldr	r3, [pc, #80]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800f8ac:	4b12      	ldr	r3, [pc, #72]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800f8b2:	4b11      	ldr	r3, [pc, #68]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f8ba:	4b0f      	ldr	r3, [pc, #60]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f8bc:	2201      	movs	r2, #1
 800f8be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f8c0:	480d      	ldr	r0, [pc, #52]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f8c2:	f7f9 fb0d 	bl	8008ee0 <HAL_ADC_Init>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800f8cc:	f001 fad2 	bl	8010e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f8d8:	2301      	movs	r3, #1
 800f8da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f8dc:	463b      	mov	r3, r7
 800f8de:	4619      	mov	r1, r3
 800f8e0:	4805      	ldr	r0, [pc, #20]	; (800f8f8 <MX_ADC3_Init+0x9c>)
 800f8e2:	f7f9 fc51 	bl	8009188 <HAL_ADC_ConfigChannel>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d001      	beq.n	800f8f0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800f8ec:	f001 fac2 	bl	8010e74 <Error_Handler>
  }

}
 800f8f0:	bf00      	nop
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	20004590 	.word	0x20004590
 800f8fc:	40012200 	.word	0x40012200

0800f900 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b08e      	sub	sp, #56	; 0x38
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f90c:	2200      	movs	r2, #0
 800f90e:	601a      	str	r2, [r3, #0]
 800f910:	605a      	str	r2, [r3, #4]
 800f912:	609a      	str	r2, [r3, #8]
 800f914:	60da      	str	r2, [r3, #12]
 800f916:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a9b      	ldr	r2, [pc, #620]	; (800fb8c <HAL_ADC_MspInit+0x28c>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d172      	bne.n	800fa08 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f922:	2300      	movs	r3, #0
 800f924:	623b      	str	r3, [r7, #32]
 800f926:	4b9a      	ldr	r3, [pc, #616]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f92a:	4a99      	ldr	r2, [pc, #612]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f92c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f930:	6453      	str	r3, [r2, #68]	; 0x44
 800f932:	4b97      	ldr	r3, [pc, #604]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f93a:	623b      	str	r3, [r7, #32]
 800f93c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f93e:	2300      	movs	r3, #0
 800f940:	61fb      	str	r3, [r7, #28]
 800f942:	4b93      	ldr	r3, [pc, #588]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f946:	4a92      	ldr	r2, [pc, #584]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f948:	f043 0304 	orr.w	r3, r3, #4
 800f94c:	6313      	str	r3, [r2, #48]	; 0x30
 800f94e:	4b90      	ldr	r3, [pc, #576]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f952:	f003 0304 	and.w	r3, r3, #4
 800f956:	61fb      	str	r3, [r7, #28]
 800f958:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f95a:	2300      	movs	r3, #0
 800f95c:	61bb      	str	r3, [r7, #24]
 800f95e:	4b8c      	ldr	r3, [pc, #560]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f962:	4a8b      	ldr	r2, [pc, #556]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f964:	f043 0301 	orr.w	r3, r3, #1
 800f968:	6313      	str	r3, [r2, #48]	; 0x30
 800f96a:	4b89      	ldr	r3, [pc, #548]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800f96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f96e:	f003 0301 	and.w	r3, r3, #1
 800f972:	61bb      	str	r3, [r7, #24]
 800f974:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f976:	2301      	movs	r3, #1
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f97a:	2303      	movs	r3, #3
 800f97c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f97e:	2300      	movs	r3, #0
 800f980:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f986:	4619      	mov	r1, r3
 800f988:	4882      	ldr	r0, [pc, #520]	; (800fb94 <HAL_ADC_MspInit+0x294>)
 800f98a:	f7fb fa55 	bl	800ae38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f98e:	2301      	movs	r3, #1
 800f990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f992:	2303      	movs	r3, #3
 800f994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f996:	2300      	movs	r3, #0
 800f998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f99e:	4619      	mov	r1, r3
 800f9a0:	487d      	ldr	r0, [pc, #500]	; (800fb98 <HAL_ADC_MspInit+0x298>)
 800f9a2:	f7fb fa49 	bl	800ae38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f9a6:	4b7d      	ldr	r3, [pc, #500]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9a8:	4a7d      	ldr	r2, [pc, #500]	; (800fba0 <HAL_ADC_MspInit+0x2a0>)
 800f9aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f9ac:	4b7b      	ldr	r3, [pc, #492]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f9b2:	4b7a      	ldr	r3, [pc, #488]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f9b8:	4b78      	ldr	r3, [pc, #480]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f9be:	4b77      	ldr	r3, [pc, #476]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f9c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f9c6:	4b75      	ldr	r3, [pc, #468]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f9ce:	4b73      	ldr	r3, [pc, #460]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f9d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f9d6:	4b71      	ldr	r3, [pc, #452]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800f9dc:	4b6f      	ldr	r3, [pc, #444]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f9e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f9e4:	4b6d      	ldr	r3, [pc, #436]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f9ea:	486c      	ldr	r0, [pc, #432]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9ec:	f7fa fba8 	bl	800a140 <HAL_DMA_Init>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800f9f6:	f001 fa3d 	bl	8010e74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a67      	ldr	r2, [pc, #412]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800f9fe:	639a      	str	r2, [r3, #56]	; 0x38
 800fa00:	4a66      	ldr	r2, [pc, #408]	; (800fb9c <HAL_ADC_MspInit+0x29c>)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800fa06:	e0bc      	b.n	800fb82 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a65      	ldr	r2, [pc, #404]	; (800fba4 <HAL_ADC_MspInit+0x2a4>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d159      	bne.n	800fac6 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800fa12:	2300      	movs	r3, #0
 800fa14:	617b      	str	r3, [r7, #20]
 800fa16:	4b5e      	ldr	r3, [pc, #376]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fa18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa1a:	4a5d      	ldr	r2, [pc, #372]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fa1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa20:	6453      	str	r3, [r2, #68]	; 0x44
 800fa22:	4b5b      	ldr	r3, [pc, #364]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fa24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fa2a:	617b      	str	r3, [r7, #20]
 800fa2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa2e:	2300      	movs	r3, #0
 800fa30:	613b      	str	r3, [r7, #16]
 800fa32:	4b57      	ldr	r3, [pc, #348]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa36:	4a56      	ldr	r2, [pc, #344]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fa38:	f043 0301 	orr.w	r3, r3, #1
 800fa3c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa3e:	4b54      	ldr	r3, [pc, #336]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa42:	f003 0301 	and.w	r3, r3, #1
 800fa46:	613b      	str	r3, [r7, #16]
 800fa48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800fa4a:	2310      	movs	r3, #16
 800fa4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fa4e:	2303      	movs	r3, #3
 800fa50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa52:	2300      	movs	r3, #0
 800fa54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	484e      	ldr	r0, [pc, #312]	; (800fb98 <HAL_ADC_MspInit+0x298>)
 800fa5e:	f7fb f9eb 	bl	800ae38 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800fa62:	4b51      	ldr	r3, [pc, #324]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa64:	4a51      	ldr	r2, [pc, #324]	; (800fbac <HAL_ADC_MspInit+0x2ac>)
 800fa66:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800fa68:	4b4f      	ldr	r3, [pc, #316]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800fa6e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fa70:	4b4d      	ldr	r3, [pc, #308]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800fa76:	4b4c      	ldr	r3, [pc, #304]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800fa7c:	4b4a      	ldr	r3, [pc, #296]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa82:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fa84:	4b48      	ldr	r3, [pc, #288]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa8a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fa8c:	4b46      	ldr	r3, [pc, #280]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fa92:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800fa94:	4b44      	ldr	r3, [pc, #272]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800fa9a:	4b43      	ldr	r3, [pc, #268]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fa9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800faa0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800faa2:	4b41      	ldr	r3, [pc, #260]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800faa8:	483f      	ldr	r0, [pc, #252]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800faaa:	f7fa fb49 	bl	800a140 <HAL_DMA_Init>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d001      	beq.n	800fab8 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800fab4:	f001 f9de 	bl	8010e74 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	4a3b      	ldr	r2, [pc, #236]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fabc:	639a      	str	r2, [r3, #56]	; 0x38
 800fabe:	4a3a      	ldr	r2, [pc, #232]	; (800fba8 <HAL_ADC_MspInit+0x2a8>)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fac4:	e05d      	b.n	800fb82 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a39      	ldr	r2, [pc, #228]	; (800fbb0 <HAL_ADC_MspInit+0x2b0>)
 800facc:	4293      	cmp	r3, r2
 800face:	d158      	bne.n	800fb82 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800fad0:	2300      	movs	r3, #0
 800fad2:	60fb      	str	r3, [r7, #12]
 800fad4:	4b2e      	ldr	r3, [pc, #184]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad8:	4a2d      	ldr	r2, [pc, #180]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fade:	6453      	str	r3, [r2, #68]	; 0x44
 800fae0:	4b2b      	ldr	r3, [pc, #172]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fae8:	60fb      	str	r3, [r7, #12]
 800faea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800faec:	2300      	movs	r3, #0
 800faee:	60bb      	str	r3, [r7, #8]
 800faf0:	4b27      	ldr	r3, [pc, #156]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800faf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faf4:	4a26      	ldr	r2, [pc, #152]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800faf6:	f043 0301 	orr.w	r3, r3, #1
 800fafa:	6313      	str	r3, [r2, #48]	; 0x30
 800fafc:	4b24      	ldr	r3, [pc, #144]	; (800fb90 <HAL_ADC_MspInit+0x290>)
 800fafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb00:	f003 0301 	and.w	r3, r3, #1
 800fb04:	60bb      	str	r3, [r7, #8]
 800fb06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800fb08:	2302      	movs	r3, #2
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fb0c:	2303      	movs	r3, #3
 800fb0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb10:	2300      	movs	r3, #0
 800fb12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb18:	4619      	mov	r1, r3
 800fb1a:	481f      	ldr	r0, [pc, #124]	; (800fb98 <HAL_ADC_MspInit+0x298>)
 800fb1c:	f7fb f98c 	bl	800ae38 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800fb20:	4b24      	ldr	r3, [pc, #144]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb22:	4a25      	ldr	r2, [pc, #148]	; (800fbb8 <HAL_ADC_MspInit+0x2b8>)
 800fb24:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800fb26:	4b23      	ldr	r3, [pc, #140]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fb2c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fb2e:	4b21      	ldr	r3, [pc, #132]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb30:	2200      	movs	r2, #0
 800fb32:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800fb34:	4b1f      	ldr	r3, [pc, #124]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800fb3a:	4b1e      	ldr	r3, [pc, #120]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fb40:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fb42:	4b1c      	ldr	r3, [pc, #112]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb48:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fb4a:	4b1a      	ldr	r3, [pc, #104]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fb50:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800fb52:	4b18      	ldr	r3, [pc, #96]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800fb58:	4b16      	ldr	r3, [pc, #88]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fb5e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fb60:	4b14      	ldr	r3, [pc, #80]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800fb66:	4813      	ldr	r0, [pc, #76]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb68:	f7fa faea 	bl	800a140 <HAL_DMA_Init>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800fb72:	f001 f97f 	bl	8010e74 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4a0e      	ldr	r2, [pc, #56]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb7a:	639a      	str	r2, [r3, #56]	; 0x38
 800fb7c:	4a0d      	ldr	r2, [pc, #52]	; (800fbb4 <HAL_ADC_MspInit+0x2b4>)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fb82:	bf00      	nop
 800fb84:	3738      	adds	r7, #56	; 0x38
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	40012000 	.word	0x40012000
 800fb90:	40023800 	.word	0x40023800
 800fb94:	40020800 	.word	0x40020800
 800fb98:	40020000 	.word	0x40020000
 800fb9c:	200045d8 	.word	0x200045d8
 800fba0:	40026410 	.word	0x40026410
 800fba4:	40012100 	.word	0x40012100
 800fba8:	20004638 	.word	0x20004638
 800fbac:	40026440 	.word	0x40026440
 800fbb0:	40012200 	.word	0x40012200
 800fbb4:	200044e8 	.word	0x200044e8
 800fbb8:	40026428 	.word	0x40026428

0800fbbc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800fbc0:	4b18      	ldr	r3, [pc, #96]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbc2:	4a19      	ldr	r2, [pc, #100]	; (800fc28 <MX_CAN1_Init+0x6c>)
 800fbc4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800fbc6:	4b17      	ldr	r3, [pc, #92]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbc8:	2204      	movs	r2, #4
 800fbca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800fbcc:	4b15      	ldr	r3, [pc, #84]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800fbd2:	4b14      	ldr	r3, [pc, #80]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fbd8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800fbda:	4b12      	ldr	r3, [pc, #72]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbdc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800fbe0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800fbe2:	4b10      	ldr	r3, [pc, #64]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbe4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fbe8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800fbea:	4b0e      	ldr	r3, [pc, #56]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800fbf0:	4b0c      	ldr	r3, [pc, #48]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800fbf6:	4b0b      	ldr	r3, [pc, #44]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800fbfc:	4b09      	ldr	r3, [pc, #36]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800fc02:	4b08      	ldr	r3, [pc, #32]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800fc08:	4b06      	ldr	r3, [pc, #24]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800fc0e:	4805      	ldr	r0, [pc, #20]	; (800fc24 <MX_CAN1_Init+0x68>)
 800fc10:	f7f9 fd6a 	bl	80096e8 <HAL_CAN_Init>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800fc1a:	f001 f92b 	bl	8010e74 <Error_Handler>
  }

}
 800fc1e:	bf00      	nop
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	200046e4 	.word	0x200046e4
 800fc28:	40006400 	.word	0x40006400

0800fc2c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b08a      	sub	sp, #40	; 0x28
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc34:	f107 0314 	add.w	r3, r7, #20
 800fc38:	2200      	movs	r2, #0
 800fc3a:	601a      	str	r2, [r3, #0]
 800fc3c:	605a      	str	r2, [r3, #4]
 800fc3e:	609a      	str	r2, [r3, #8]
 800fc40:	60da      	str	r2, [r3, #12]
 800fc42:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a21      	ldr	r2, [pc, #132]	; (800fcd0 <HAL_CAN_MspInit+0xa4>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d13c      	bne.n	800fcc8 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800fc4e:	2300      	movs	r3, #0
 800fc50:	613b      	str	r3, [r7, #16]
 800fc52:	4b20      	ldr	r3, [pc, #128]	; (800fcd4 <HAL_CAN_MspInit+0xa8>)
 800fc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc56:	4a1f      	ldr	r2, [pc, #124]	; (800fcd4 <HAL_CAN_MspInit+0xa8>)
 800fc58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fc5c:	6413      	str	r3, [r2, #64]	; 0x40
 800fc5e:	4b1d      	ldr	r3, [pc, #116]	; (800fcd4 <HAL_CAN_MspInit+0xa8>)
 800fc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc66:	613b      	str	r3, [r7, #16]
 800fc68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	60fb      	str	r3, [r7, #12]
 800fc6e:	4b19      	ldr	r3, [pc, #100]	; (800fcd4 <HAL_CAN_MspInit+0xa8>)
 800fc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc72:	4a18      	ldr	r2, [pc, #96]	; (800fcd4 <HAL_CAN_MspInit+0xa8>)
 800fc74:	f043 0301 	orr.w	r3, r3, #1
 800fc78:	6313      	str	r3, [r2, #48]	; 0x30
 800fc7a:	4b16      	ldr	r3, [pc, #88]	; (800fcd4 <HAL_CAN_MspInit+0xa8>)
 800fc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc7e:	f003 0301 	and.w	r3, r3, #1
 800fc82:	60fb      	str	r3, [r7, #12]
 800fc84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fc86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fc8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc90:	2300      	movs	r3, #0
 800fc92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc94:	2303      	movs	r3, #3
 800fc96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800fc98:	2309      	movs	r3, #9
 800fc9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc9c:	f107 0314 	add.w	r3, r7, #20
 800fca0:	4619      	mov	r1, r3
 800fca2:	480d      	ldr	r0, [pc, #52]	; (800fcd8 <HAL_CAN_MspInit+0xac>)
 800fca4:	f7fb f8c8 	bl	800ae38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800fca8:	2200      	movs	r2, #0
 800fcaa:	2100      	movs	r1, #0
 800fcac:	2013      	movs	r0, #19
 800fcae:	f7fa fa10 	bl	800a0d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800fcb2:	2013      	movs	r0, #19
 800fcb4:	f7fa fa29 	bl	800a10a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2100      	movs	r1, #0
 800fcbc:	2014      	movs	r0, #20
 800fcbe:	f7fa fa08 	bl	800a0d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800fcc2:	2014      	movs	r0, #20
 800fcc4:	f7fa fa21 	bl	800a10a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800fcc8:	bf00      	nop
 800fcca:	3728      	adds	r7, #40	; 0x28
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	40006400 	.word	0x40006400
 800fcd4:	40023800 	.word	0x40023800
 800fcd8:	40020000 	.word	0x40020000

0800fcdc <getChannel>:

}


uint8_t getChannel()
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800fce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fcea:	481b      	ldr	r0, [pc, #108]	; (800fd58 <getChannel+0x7c>)
 800fcec:	f7fb fa36 	bl	800b15c <HAL_GPIO_ReadPin>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	bf0c      	ite	eq
 800fcf6:	2301      	moveq	r3, #1
 800fcf8:	2300      	movne	r3, #0
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	b25a      	sxtb	r2, r3
 800fcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	b25b      	sxtb	r3, r3
 800fd06:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800fd08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd0c:	4812      	ldr	r0, [pc, #72]	; (800fd58 <getChannel+0x7c>)
 800fd0e:	f7fb fa25 	bl	800b15c <HAL_GPIO_ReadPin>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d101      	bne.n	800fd1c <getChannel+0x40>
 800fd18:	2302      	movs	r3, #2
 800fd1a:	e000      	b.n	800fd1e <getChannel+0x42>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	b25a      	sxtb	r2, r3
 800fd20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	b25b      	sxtb	r3, r3
 800fd28:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800fd2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fd2e:	480a      	ldr	r0, [pc, #40]	; (800fd58 <getChannel+0x7c>)
 800fd30:	f7fb fa14 	bl	800b15c <HAL_GPIO_ReadPin>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d101      	bne.n	800fd3e <getChannel+0x62>
 800fd3a:	2304      	movs	r3, #4
 800fd3c:	e000      	b.n	800fd40 <getChannel+0x64>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	b25a      	sxtb	r2, r3
 800fd42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	b25b      	sxtb	r3, r3
 800fd4a:	71fb      	strb	r3, [r7, #7]

	return ch;
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	40020400 	.word	0x40020400

0800fd5c <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800fd64:	2200      	movs	r2, #0
 800fd66:	2140      	movs	r1, #64	; 0x40
 800fd68:	4803      	ldr	r0, [pc, #12]	; (800fd78 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800fd6a:	f7fb fa0f 	bl	800b18c <HAL_GPIO_WritePin>

}
 800fd6e:	bf00      	nop
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	40020400 	.word	0x40020400

0800fd7c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800fd84:	2200      	movs	r2, #0
 800fd86:	2140      	movs	r1, #64	; 0x40
 800fd88:	4803      	ldr	r0, [pc, #12]	; (800fd98 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800fd8a:	f7fb f9ff 	bl	800b18c <HAL_GPIO_WritePin>

}
 800fd8e:	bf00      	nop
 800fd90:	3708      	adds	r7, #8
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	40020400 	.word	0x40020400

0800fd9c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800fda4:	2200      	movs	r2, #0
 800fda6:	2140      	movs	r1, #64	; 0x40
 800fda8:	4803      	ldr	r0, [pc, #12]	; (800fdb8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800fdaa:	f7fb f9ef 	bl	800b18c <HAL_GPIO_WritePin>

}
 800fdae:	bf00      	nop
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	40020400 	.word	0x40020400

0800fdbc <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800fdc4:	4b24      	ldr	r3, [pc, #144]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fdc6:	4a25      	ldr	r2, [pc, #148]	; (800fe5c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fdc8:	2100      	movs	r1, #0
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7f9 fd87 	bl	80098de <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800fdd0:	4b23      	ldr	r3, [pc, #140]	; (800fe60 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800fdd6:	4b21      	ldr	r3, [pc, #132]	; (800fe5c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	089b      	lsrs	r3, r3, #2
 800fddc:	f003 0307 	and.w	r3, r3, #7
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d114      	bne.n	800fe0e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800fde4:	4b1d      	ldr	r3, [pc, #116]	; (800fe5c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fde6:	691b      	ldr	r3, [r3, #16]
 800fde8:	2b04      	cmp	r3, #4
 800fdea:	d110      	bne.n	800fe0e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800fdec:	4b1a      	ldr	r3, [pc, #104]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800fdf2:	4b19      	ldr	r3, [pc, #100]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fdf4:	785b      	ldrb	r3, [r3, #1]
 800fdf6:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800fdf8:	4b17      	ldr	r3, [pc, #92]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fdfa:	789b      	ldrb	r3, [r3, #2]
 800fdfc:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800fdfe:	4b16      	ldr	r3, [pc, #88]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe00:	78db      	ldrb	r3, [r3, #3]
 800fe02:	73fb      	strb	r3, [r7, #15]

		mainASR.omega_ref = controlRef.fval;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	4a17      	ldr	r2, [pc, #92]	; (800fe64 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800fe08:	6253      	str	r3, [r2, #36]	; 0x24

		timeoutReset();
 800fe0a:	f001 f811 	bl	8010e30 <timeoutReset>

	}


	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x02 && can1RxHeader.DLC == 0x4)
 800fe0e:	4b13      	ldr	r3, [pc, #76]	; (800fe5c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	089b      	lsrs	r3, r3, #2
 800fe14:	f003 0307 	and.w	r3, r3, #7
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	d114      	bne.n	800fe46 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 800fe1c:	4b0f      	ldr	r3, [pc, #60]	; (800fe5c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	2b04      	cmp	r3, #4
 800fe22:	d110      	bne.n	800fe46 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	{
		controlRef.byte[0] = can1RxData[0];
 800fe24:	4b0c      	ldr	r3, [pc, #48]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800fe2a:	4b0b      	ldr	r3, [pc, #44]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe2c:	785b      	ldrb	r3, [r3, #1]
 800fe2e:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800fe30:	4b09      	ldr	r3, [pc, #36]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe32:	789b      	ldrb	r3, [r3, #2]
 800fe34:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800fe36:	4b08      	ldr	r3, [pc, #32]	; (800fe58 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800fe38:	78db      	ldrb	r3, [r3, #3]
 800fe3a:	73fb      	strb	r3, [r7, #15]

		mainAPR.theta_ref = controlRef.fval;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	4a0a      	ldr	r2, [pc, #40]	; (800fe68 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800fe40:	62d3      	str	r3, [r2, #44]	; 0x2c

		timeoutReset();
 800fe42:	f000 fff5 	bl	8010e30 <timeoutReset>
	}


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800fe46:	2201      	movs	r2, #1
 800fe48:	2140      	movs	r1, #64	; 0x40
 800fe4a:	4808      	ldr	r0, [pc, #32]	; (800fe6c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800fe4c:	f7fb f99e 	bl	800b18c <HAL_GPIO_WritePin>

}
 800fe50:	bf00      	nop
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	200046dc 	.word	0x200046dc
 800fe5c:	200046c0 	.word	0x200046c0
 800fe60:	20000248 	.word	0x20000248
 800fe64:	200043a0 	.word	0x200043a0
 800fe68:	2000434c 	.word	0x2000434c
 800fe6c:	40020000 	.word	0x40020000

0800fe70 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800fe76:	2300      	movs	r3, #0
 800fe78:	607b      	str	r3, [r7, #4]
 800fe7a:	4b14      	ldr	r3, [pc, #80]	; (800fecc <MX_DMA_Init+0x5c>)
 800fe7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe7e:	4a13      	ldr	r2, [pc, #76]	; (800fecc <MX_DMA_Init+0x5c>)
 800fe80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fe84:	6313      	str	r3, [r2, #48]	; 0x30
 800fe86:	4b11      	ldr	r3, [pc, #68]	; (800fecc <MX_DMA_Init+0x5c>)
 800fe88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe8e:	607b      	str	r3, [r7, #4]
 800fe90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800fe92:	2200      	movs	r2, #0
 800fe94:	2100      	movs	r1, #0
 800fe96:	2038      	movs	r0, #56	; 0x38
 800fe98:	f7fa f91b 	bl	800a0d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fe9c:	2038      	movs	r0, #56	; 0x38
 800fe9e:	f7fa f934 	bl	800a10a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800fea2:	2200      	movs	r2, #0
 800fea4:	2100      	movs	r1, #0
 800fea6:	2039      	movs	r0, #57	; 0x39
 800fea8:	f7fa f913 	bl	800a0d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800feac:	2039      	movs	r0, #57	; 0x39
 800feae:	f7fa f92c 	bl	800a10a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800feb2:	2200      	movs	r2, #0
 800feb4:	2100      	movs	r1, #0
 800feb6:	203a      	movs	r0, #58	; 0x3a
 800feb8:	f7fa f90b 	bl	800a0d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800febc:	203a      	movs	r0, #58	; 0x3a
 800febe:	f7fa f924 	bl	800a10a <HAL_NVIC_EnableIRQ>

}
 800fec2:	bf00      	nop
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	40023800 	.word	0x40023800

0800fed0 <Encoder_Init>:
Encoder_TypeDef mainEncoder;



void Encoder_Init()
{
 800fed0:	b480      	push	{r7}
 800fed2:	af00      	add	r7, sp, #0

	mainEncoder.Init.hspi = &hspi2;
 800fed4:	4b1d      	ldr	r3, [pc, #116]	; (800ff4c <Encoder_Init+0x7c>)
 800fed6:	4a1e      	ldr	r2, [pc, #120]	; (800ff50 <Encoder_Init+0x80>)
 800fed8:	60da      	str	r2, [r3, #12]
	mainEncoder.Init.SPI_NSS_Port = SPI2_NSS_GPIO_Port;
 800feda:	4b1c      	ldr	r3, [pc, #112]	; (800ff4c <Encoder_Init+0x7c>)
 800fedc:	4a1d      	ldr	r2, [pc, #116]	; (800ff54 <Encoder_Init+0x84>)
 800fede:	611a      	str	r2, [r3, #16]
	mainEncoder.Init.SPI_NSS_Pin = SPI2_NSS_Pin;
 800fee0:	4b1a      	ldr	r3, [pc, #104]	; (800ff4c <Encoder_Init+0x7c>)
 800fee2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fee6:	829a      	strh	r2, [r3, #20]

	mainEncoder.Init.theta_offset = 0.0f;
 800fee8:	4b18      	ldr	r3, [pc, #96]	; (800ff4c <Encoder_Init+0x7c>)
 800feea:	f04f 0200 	mov.w	r2, #0
 800feee:	601a      	str	r2, [r3, #0]
	mainEncoder.Init.theta_re_offset = -3.0723f;
 800fef0:	4b16      	ldr	r3, [pc, #88]	; (800ff4c <Encoder_Init+0x7c>)
 800fef2:	4a19      	ldr	r2, [pc, #100]	; (800ff58 <Encoder_Init+0x88>)
 800fef4:	605a      	str	r2, [r3, #4]
	mainEncoder.Init.cycleTime = 100E-6;
 800fef6:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <Encoder_Init+0x7c>)
 800fef8:	4a18      	ldr	r2, [pc, #96]	; (800ff5c <Encoder_Init+0x8c>)
 800fefa:	609a      	str	r2, [r3, #8]

	mainEncoder.theta = 0.0f;
 800fefc:	4b13      	ldr	r3, [pc, #76]	; (800ff4c <Encoder_Init+0x7c>)
 800fefe:	f04f 0200 	mov.w	r2, #0
 800ff02:	619a      	str	r2, [r3, #24]
	mainEncoder.theta_re = 0.0f;
 800ff04:	4b11      	ldr	r3, [pc, #68]	; (800ff4c <Encoder_Init+0x7c>)
 800ff06:	f04f 0200 	mov.w	r2, #0
 800ff0a:	635a      	str	r2, [r3, #52]	; 0x34
	mainEncoder.forced_commute_enable = 0;
 800ff0c:	4b0f      	ldr	r3, [pc, #60]	; (800ff4c <Encoder_Init+0x7c>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mainEncoder.cos_theta_re = 1.0f;
 800ff14:	4b0d      	ldr	r3, [pc, #52]	; (800ff4c <Encoder_Init+0x7c>)
 800ff16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ff1a:	639a      	str	r2, [r3, #56]	; 0x38
	mainEncoder.sin_theta_re = 0.0f;
 800ff1c:	4b0b      	ldr	r3, [pc, #44]	; (800ff4c <Encoder_Init+0x7c>)
 800ff1e:	f04f 0200 	mov.w	r2, #0
 800ff22:	63da      	str	r2, [r3, #60]	; 0x3c


	mainEncoder.firstLaunch = 1;
 800ff24:	4b09      	ldr	r3, [pc, #36]	; (800ff4c <Encoder_Init+0x7c>)
 800ff26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ff2a:	62da      	str	r2, [r3, #44]	; 0x2c

	// SPI Interrupt Setting
	__HAL_SPI_ENABLE_IT(mainEncoder.Init.hspi, SPI_IT_TXE | SPI_IT_RXNE);
 800ff2c:	4b07      	ldr	r3, [pc, #28]	; (800ff4c <Encoder_Init+0x7c>)
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	4b05      	ldr	r3, [pc, #20]	; (800ff4c <Encoder_Init+0x7c>)
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800ff3e:	605a      	str	r2, [r3, #4]


}
 800ff40:	bf00      	nop
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	2000470c 	.word	0x2000470c
 800ff50:	20004758 	.word	0x20004758
 800ff54:	40020400 	.word	0x40020400
 800ff58:	c044a090 	.word	0xc044a090
 800ff5c:	38d1b717 	.word	0x38d1b717

0800ff60 <setZeroEncoder>:


#if 1

void setZeroEncoder(uint8_t exe)
{
 800ff60:	b590      	push	{r4, r7, lr}
 800ff62:	b08b      	sub	sp, #44	; 0x2c
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	4603      	mov	r3, r0
 800ff68:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 800ff6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ff6e:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 800ff70:	2300      	movs	r3, #0
 800ff72:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 5.0f;
 800ff74:	4b9a      	ldr	r3, [pc, #616]	; (80101e0 <setZeroEncoder+0x280>)
 800ff76:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 800ff78:	f04f 0300 	mov.w	r3, #0
 800ff7c:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 800ff7e:	f04f 0300 	mov.w	r3, #0
 800ff82:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 800ff84:	f04f 0300 	mov.w	r3, #0
 800ff88:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 800ff8a:	f000 fbb9 	bl	8010700 <Flash_load>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	4b94      	ldr	r3, [pc, #592]	; (80101e4 <setZeroEncoder+0x284>)
 800ff92:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d126      	bne.n	800ffe8 <setZeroEncoder+0x88>
	{

		memcpy(&mainEncoder.Init.theta_re_offset, flash_data, 4);
 800ff9a:	4b92      	ldr	r3, [pc, #584]	; (80101e4 <setZeroEncoder+0x284>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	4b91      	ldr	r3, [pc, #580]	; (80101e8 <setZeroEncoder+0x288>)
 800ffa4:	605a      	str	r2, [r3, #4]

#if DEBUG_PRINT_ENABLE
		printf("flash_data:%d\n", mainEncoder.Init.theta_re_offset * 100000);
 800ffa6:	4b90      	ldr	r3, [pc, #576]	; (80101e8 <setZeroEncoder+0x288>)
 800ffa8:	edd3 7a01 	vldr	s15, [r3, #4]
 800ffac:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80101ec <setZeroEncoder+0x28c>
 800ffb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffb4:	ee17 0a90 	vmov	r0, s15
 800ffb8:	f7f8 f9fe 	bl	80083b8 <__aeabi_f2d>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4623      	mov	r3, r4
 800ffc4:	488a      	ldr	r0, [pc, #552]	; (80101f0 <setZeroEncoder+0x290>)
 800ffc6:	f002 fcb9 	bl	801293c <iprintf>
		printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 800ffca:	4b87      	ldr	r3, [pc, #540]	; (80101e8 <setZeroEncoder+0x288>)
 800ffcc:	edd3 7a01 	vldr	s15, [r3, #4]
 800ffd0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80101ec <setZeroEncoder+0x28c>
 800ffd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffdc:	ee17 1a90 	vmov	r1, s15
 800ffe0:	4884      	ldr	r0, [pc, #528]	; (80101f4 <setZeroEncoder+0x294>)
 800ffe2:	f002 fcab 	bl	801293c <iprintf>
#endif

		return;
 800ffe6:	e0ea      	b.n	80101be <setZeroEncoder+0x25e>
	}


	mainACR.Id_ref = forced_I_gamma_ref;
 800ffe8:	4a83      	ldr	r2, [pc, #524]	; (80101f8 <setZeroEncoder+0x298>)
 800ffea:	6a3b      	ldr	r3, [r7, #32]
 800ffec:	6353      	str	r3, [r2, #52]	; 0x34
	mainACR.Iq_ref = forced_I_delta_ref;
 800ffee:	4a82      	ldr	r2, [pc, #520]	; (80101f8 <setZeroEncoder+0x298>)
 800fff0:	69fb      	ldr	r3, [r7, #28]
 800fff2:	6393      	str	r3, [r2, #56]	; 0x38

	mainEncoder.Init.theta_re_offset = 0.0f;
 800fff4:	4b7c      	ldr	r3, [pc, #496]	; (80101e8 <setZeroEncoder+0x288>)
 800fff6:	f04f 0200 	mov.w	r2, #0
 800fffa:	605a      	str	r2, [r3, #4]

	mainACR.forced_theta_re = 0.0f;
 800fffc:	4b7e      	ldr	r3, [pc, #504]	; (80101f8 <setZeroEncoder+0x298>)
 800fffe:	f04f 0200 	mov.w	r2, #0
 8010002:	669a      	str	r2, [r3, #104]	; 0x68

	mainACR.forced_commute_enable = 1;
 8010004:	4b7c      	ldr	r3, [pc, #496]	; (80101f8 <setZeroEncoder+0x298>)
 8010006:	2201      	movs	r2, #1
 8010008:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	HAL_Delay(1000);
 801000c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010010:	f7f8 ff44 	bl	8008e9c <HAL_Delay>


	mainEncoder.Init.theta_re_offset = 0.0f - mainEncoder.theta_re;
 8010014:	4b74      	ldr	r3, [pc, #464]	; (80101e8 <setZeroEncoder+0x288>)
 8010016:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801001a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80101fc <setZeroEncoder+0x29c>
 801001e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010022:	4b71      	ldr	r3, [pc, #452]	; (80101e8 <setZeroEncoder+0x288>)
 8010024:	edc3 7a01 	vstr	s15, [r3, #4]

	mainACR.Id_ref = 0.0f;
 8010028:	4b73      	ldr	r3, [pc, #460]	; (80101f8 <setZeroEncoder+0x298>)
 801002a:	f04f 0200 	mov.w	r2, #0
 801002e:	635a      	str	r2, [r3, #52]	; 0x34
	mainACR.Iq_ref = 0.0f;
 8010030:	4b71      	ldr	r3, [pc, #452]	; (80101f8 <setZeroEncoder+0x298>)
 8010032:	f04f 0200 	mov.w	r2, #0
 8010036:	639a      	str	r2, [r3, #56]	; 0x38


	while(mainEncoder.Init.theta_re_offset < -M_PI)	mainEncoder.Init.theta_re_offset += 2.0f * M_PI;
 8010038:	e012      	b.n	8010060 <setZeroEncoder+0x100>
 801003a:	4b6b      	ldr	r3, [pc, #428]	; (80101e8 <setZeroEncoder+0x288>)
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	4618      	mov	r0, r3
 8010040:	f7f8 f9ba 	bl	80083b8 <__aeabi_f2d>
 8010044:	a360      	add	r3, pc, #384	; (adr r3, 80101c8 <setZeroEncoder+0x268>)
 8010046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004a:	f7f8 f857 	bl	80080fc <__adddf3>
 801004e:	4603      	mov	r3, r0
 8010050:	460c      	mov	r4, r1
 8010052:	4618      	mov	r0, r3
 8010054:	4621      	mov	r1, r4
 8010056:	f7f8 fcdf 	bl	8008a18 <__aeabi_d2f>
 801005a:	4602      	mov	r2, r0
 801005c:	4b62      	ldr	r3, [pc, #392]	; (80101e8 <setZeroEncoder+0x288>)
 801005e:	605a      	str	r2, [r3, #4]
 8010060:	4b61      	ldr	r3, [pc, #388]	; (80101e8 <setZeroEncoder+0x288>)
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	f7f8 f9a7 	bl	80083b8 <__aeabi_f2d>
 801006a:	a359      	add	r3, pc, #356	; (adr r3, 80101d0 <setZeroEncoder+0x270>)
 801006c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010070:	f7f8 fc6c 	bl	800894c <__aeabi_dcmplt>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1df      	bne.n	801003a <setZeroEncoder+0xda>
	while(mainEncoder.Init.theta_re_offset > M_PI)	mainEncoder.Init.theta_re_offset -= 2.0f * M_PI;
 801007a:	e012      	b.n	80100a2 <setZeroEncoder+0x142>
 801007c:	4b5a      	ldr	r3, [pc, #360]	; (80101e8 <setZeroEncoder+0x288>)
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	4618      	mov	r0, r3
 8010082:	f7f8 f999 	bl	80083b8 <__aeabi_f2d>
 8010086:	a350      	add	r3, pc, #320	; (adr r3, 80101c8 <setZeroEncoder+0x268>)
 8010088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008c:	f7f8 f834 	bl	80080f8 <__aeabi_dsub>
 8010090:	4603      	mov	r3, r0
 8010092:	460c      	mov	r4, r1
 8010094:	4618      	mov	r0, r3
 8010096:	4621      	mov	r1, r4
 8010098:	f7f8 fcbe 	bl	8008a18 <__aeabi_d2f>
 801009c:	4602      	mov	r2, r0
 801009e:	4b52      	ldr	r3, [pc, #328]	; (80101e8 <setZeroEncoder+0x288>)
 80100a0:	605a      	str	r2, [r3, #4]
 80100a2:	4b51      	ldr	r3, [pc, #324]	; (80101e8 <setZeroEncoder+0x288>)
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7f8 f986 	bl	80083b8 <__aeabi_f2d>
 80100ac:	a34a      	add	r3, pc, #296	; (adr r3, 80101d8 <setZeroEncoder+0x278>)
 80100ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b2:	f7f8 fc69 	bl	8008988 <__aeabi_dcmpgt>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1df      	bne.n	801007c <setZeroEncoder+0x11c>

#if DEBUG_PRINT_ENABLE

	printf(" theta_re_offset = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 100000));
 80100bc:	4b4a      	ldr	r3, [pc, #296]	; (80101e8 <setZeroEncoder+0x288>)
 80100be:	edd3 7a01 	vldr	s15, [r3, #4]
 80100c2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80101ec <setZeroEncoder+0x28c>
 80100c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100ce:	ee17 1a90 	vmov	r1, s15
 80100d2:	484b      	ldr	r0, [pc, #300]	; (8010200 <setZeroEncoder+0x2a0>)
 80100d4:	f002 fc32 	bl	801293c <iprintf>
	HAL_Delay(1);
 80100d8:	2001      	movs	r0, #1
 80100da:	f7f8 fedf 	bl	8008e9c <HAL_Delay>
	printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 80100de:	4b42      	ldr	r3, [pc, #264]	; (80101e8 <setZeroEncoder+0x288>)
 80100e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80100e4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80101ec <setZeroEncoder+0x28c>
 80100e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100f0:	ee17 1a90 	vmov	r1, s15
 80100f4:	483f      	ldr	r0, [pc, #252]	; (80101f4 <setZeroEncoder+0x294>)
 80100f6:	f002 fc21 	bl	801293c <iprintf>
	HAL_Delay(1);
 80100fa:	2001      	movs	r0, #1
 80100fc:	f7f8 fece 	bl	8008e9c <HAL_Delay>
	printf(" theta_re_offset(4) = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 10000));
 8010100:	4b39      	ldr	r3, [pc, #228]	; (80101e8 <setZeroEncoder+0x288>)
 8010102:	edd3 7a01 	vldr	s15, [r3, #4]
 8010106:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8010204 <setZeroEncoder+0x2a4>
 801010a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801010e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010112:	ee17 1a90 	vmov	r1, s15
 8010116:	483c      	ldr	r0, [pc, #240]	; (8010208 <setZeroEncoder+0x2a8>)
 8010118:	f002 fc10 	bl	801293c <iprintf>
	HAL_Delay(1);
 801011c:	2001      	movs	r0, #1
 801011e:	f7f8 febd 	bl	8008e9c <HAL_Delay>
	printf(" theta_re_offset(4) = %d\n", (int)(mainEncoder.Init.theta_re_offset * 10000));
 8010122:	4b31      	ldr	r3, [pc, #196]	; (80101e8 <setZeroEncoder+0x288>)
 8010124:	edd3 7a01 	vldr	s15, [r3, #4]
 8010128:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010204 <setZeroEncoder+0x2a4>
 801012c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010134:	ee17 1a90 	vmov	r1, s15
 8010138:	4834      	ldr	r0, [pc, #208]	; (801020c <setZeroEncoder+0x2ac>)
 801013a:	f002 fbff 	bl	801293c <iprintf>
	HAL_Delay(1);
 801013e:	2001      	movs	r0, #1
 8010140:	f7f8 feac 	bl	8008e9c <HAL_Delay>

	printf("(theta_re_offset < 1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset < 1.0f));
 8010144:	4b28      	ldr	r3, [pc, #160]	; (80101e8 <setZeroEncoder+0x288>)
 8010146:	edd3 7a01 	vldr	s15, [r3, #4]
 801014a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801014e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010156:	bf4c      	ite	mi
 8010158:	2301      	movmi	r3, #1
 801015a:	2300      	movpl	r3, #0
 801015c:	b2db      	uxtb	r3, r3
 801015e:	4619      	mov	r1, r3
 8010160:	482b      	ldr	r0, [pc, #172]	; (8010210 <setZeroEncoder+0x2b0>)
 8010162:	f002 fbeb 	bl	801293c <iprintf>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset > -1.0f));
 8010166:	4b20      	ldr	r3, [pc, #128]	; (80101e8 <setZeroEncoder+0x288>)
 8010168:	edd3 7a01 	vldr	s15, [r3, #4]
 801016c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010178:	bfcc      	ite	gt
 801017a:	2301      	movgt	r3, #1
 801017c:	2300      	movle	r3, #0
 801017e:	b2db      	uxtb	r3, r3
 8010180:	4619      	mov	r1, r3
 8010182:	4824      	ldr	r0, [pc, #144]	; (8010214 <setZeroEncoder+0x2b4>)
 8010184:	f002 fbda 	bl	801293c <iprintf>

#endif

	memcpy(flash_data, &mainEncoder.Init.theta_re_offset, 4);
 8010188:	4b16      	ldr	r3, [pc, #88]	; (80101e4 <setZeroEncoder+0x284>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a16      	ldr	r2, [pc, #88]	; (80101e8 <setZeroEncoder+0x288>)
 801018e:	6852      	ldr	r2, [r2, #4]
 8010190:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 8010192:	f000 fac7 	bl	8010724 <Flash_store>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d102      	bne.n	80101a2 <setZeroEncoder+0x242>
	{
#if DEBUG_PRINT_ENABLE
		printf("Failed to write flash\n");
 801019c:	481e      	ldr	r0, [pc, #120]	; (8010218 <setZeroEncoder+0x2b8>)
 801019e:	f002 fc41 	bl	8012a24 <puts>
#endif
	}


#if DEBUG_PRINT_ENABLE
	printf("flash_data:%lu\n", *flash_data);
 80101a2:	4b10      	ldr	r3, [pc, #64]	; (80101e4 <setZeroEncoder+0x284>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4619      	mov	r1, r3
 80101aa:	481c      	ldr	r0, [pc, #112]	; (801021c <setZeroEncoder+0x2bc>)
 80101ac:	f002 fbc6 	bl	801293c <iprintf>
#endif


	mainACR.forced_commute_enable = 0;
 80101b0:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <setZeroEncoder+0x298>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	ACR_Reset(&mainACR);
 80101b8:	480f      	ldr	r0, [pc, #60]	; (80101f8 <setZeroEncoder+0x298>)
 80101ba:	f7fe fc05 	bl	800e9c8 <ACR_Reset>


#endif


}
 80101be:	372c      	adds	r7, #44	; 0x2c
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd90      	pop	{r4, r7, pc}
 80101c4:	f3af 8000 	nop.w
 80101c8:	54442d18 	.word	0x54442d18
 80101cc:	401921fb 	.word	0x401921fb
 80101d0:	54442d18 	.word	0x54442d18
 80101d4:	c00921fb 	.word	0xc00921fb
 80101d8:	54442d18 	.word	0x54442d18
 80101dc:	400921fb 	.word	0x400921fb
 80101e0:	40a00000 	.word	0x40a00000
 80101e4:	20004754 	.word	0x20004754
 80101e8:	2000470c 	.word	0x2000470c
 80101ec:	47c35000 	.word	0x47c35000
 80101f0:	08015998 	.word	0x08015998
 80101f4:	080159a8 	.word	0x080159a8
 80101f8:	200042d8 	.word	0x200042d8
 80101fc:	00000000 	.word	0x00000000
 8010200:	080159c0 	.word	0x080159c0
 8010204:	461c4000 	.word	0x461c4000
 8010208:	080159dc 	.word	0x080159dc
 801020c:	080159fc 	.word	0x080159fc
 8010210:	08015a18 	.word	0x08015a18
 8010214:	08015a38 	.word	0x08015a38
 8010218:	08015a58 	.word	0x08015a58
 801021c:	08015a70 	.word	0x08015a70

08010220 <Encoder_Request>:

#endif


inline void Encoder_Request(Encoder_TypeDef *hEncoder)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]


	// Reading Encoder for next sampling
	hEncoder->spi2txBuf[0] = 0xff;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	22ff      	movs	r2, #255	; 0xff
 801022c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hEncoder->spi2txBuf[1] = 0xff;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	22ff      	movs	r2, #255	; 0xff
 8010234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_RESET);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6918      	ldr	r0, [r3, #16]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	8a9b      	ldrh	r3, [r3, #20]
 8010240:	2200      	movs	r2, #0
 8010242:	4619      	mov	r1, r3
 8010244:	f7fa ffa2 	bl	800b18c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_IT(hEncoder->Init.hspi, hEncoder->spi2txBuf, hEncoder->spi2rxBuf, 1);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	68d8      	ldr	r0, [r3, #12]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f103 0141 	add.w	r1, r3, #65	; 0x41
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f103 0243 	add.w	r2, r3, #67	; 0x43
 8010258:	2301      	movs	r3, #1
 801025a:	f7fb fec7 	bl	800bfec <HAL_SPI_TransmitReceive_IT>


}
 801025e:	bf00      	nop
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
	...

08010268 <Encoder_Refresh>:


inline int Encoder_Refresh(Encoder_TypeDef *hEncoder)
{
 8010268:	b5b0      	push	{r4, r5, r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
	static float _theta;
	static float _theta_re;
	static float d_theta;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_SET);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6918      	ldr	r0, [r3, #16]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	8a9b      	ldrh	r3, [r3, #20]
 8010278:	2201      	movs	r2, #1
 801027a:	4619      	mov	r1, r3
 801027c:	f7fa ff86 	bl	800b18c <HAL_GPIO_WritePin>

	angle_raw = (hEncoder->spi2rxBuf[1] & 0x3f) << 8 | hEncoder->spi2rxBuf[0];
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010286:	021b      	lsls	r3, r3, #8
 8010288:	b21b      	sxth	r3, r3
 801028a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801028e:	b21a      	sxth	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010296:	b21b      	sxth	r3, r3
 8010298:	4313      	orrs	r3, r2
 801029a:	b21b      	sxth	r3, r3
 801029c:	b29a      	uxth	r2, r3
 801029e:	4b62      	ldr	r3, [pc, #392]	; (8010428 <Encoder_Refresh+0x1c0>)
 80102a0:	801a      	strh	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + hEncoder->Init.theta_offset;
 80102a2:	4b61      	ldr	r3, [pc, #388]	; (8010428 <Encoder_Refresh+0x1c0>)
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	ee07 3a90 	vmov	s15, r3
 80102aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80102ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801042c <Encoder_Refresh+0x1c4>
 80102b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80102b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80102ba:	ee17 0a90 	vmov	r0, s15
 80102be:	f7f8 f87b 	bl	80083b8 <__aeabi_f2d>
 80102c2:	a353      	add	r3, pc, #332	; (adr r3, 8010410 <Encoder_Refresh+0x1a8>)
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	f7f8 f8ce 	bl	8008468 <__aeabi_dmul>
 80102cc:	4603      	mov	r3, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	4625      	mov	r5, r4
 80102d2:	461c      	mov	r4, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7f8 f86d 	bl	80083b8 <__aeabi_f2d>
 80102de:	4602      	mov	r2, r0
 80102e0:	460b      	mov	r3, r1
 80102e2:	4620      	mov	r0, r4
 80102e4:	4629      	mov	r1, r5
 80102e6:	f7f7 ff09 	bl	80080fc <__adddf3>
 80102ea:	4603      	mov	r3, r0
 80102ec:	460c      	mov	r4, r1
 80102ee:	4618      	mov	r0, r3
 80102f0:	4621      	mov	r1, r4
 80102f2:	f7f8 fb91 	bl	8008a18 <__aeabi_d2f>
 80102f6:	4602      	mov	r2, r0
 80102f8:	4b4d      	ldr	r3, [pc, #308]	; (8010430 <Encoder_Refresh+0x1c8>)
 80102fa:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			hEncoder->theta = _theta + 2 * M_PI;
 80102fc:	4b4c      	ldr	r3, [pc, #304]	; (8010430 <Encoder_Refresh+0x1c8>)
 80102fe:	edd3 7a00 	vldr	s15, [r3]
 8010302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030a:	d513      	bpl.n	8010334 <Encoder_Refresh+0xcc>
 801030c:	4b48      	ldr	r3, [pc, #288]	; (8010430 <Encoder_Refresh+0x1c8>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4618      	mov	r0, r3
 8010312:	f7f8 f851 	bl	80083b8 <__aeabi_f2d>
 8010316:	a340      	add	r3, pc, #256	; (adr r3, 8010418 <Encoder_Refresh+0x1b0>)
 8010318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031c:	f7f7 feee 	bl	80080fc <__adddf3>
 8010320:	4603      	mov	r3, r0
 8010322:	460c      	mov	r4, r1
 8010324:	4618      	mov	r0, r3
 8010326:	4621      	mov	r1, r4
 8010328:	f7f8 fb76 	bl	8008a18 <__aeabi_d2f>
 801032c:	4602      	mov	r2, r0
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	619a      	str	r2, [r3, #24]
 8010332:	e024      	b.n	801037e <Encoder_Refresh+0x116>
	else if(_theta >= 2 * M_PI)	hEncoder->theta = _theta - 2 * M_PI;
 8010334:	4b3e      	ldr	r3, [pc, #248]	; (8010430 <Encoder_Refresh+0x1c8>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4618      	mov	r0, r3
 801033a:	f7f8 f83d 	bl	80083b8 <__aeabi_f2d>
 801033e:	a336      	add	r3, pc, #216	; (adr r3, 8010418 <Encoder_Refresh+0x1b0>)
 8010340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010344:	f7f8 fb16 	bl	8008974 <__aeabi_dcmpge>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d013      	beq.n	8010376 <Encoder_Refresh+0x10e>
 801034e:	4b38      	ldr	r3, [pc, #224]	; (8010430 <Encoder_Refresh+0x1c8>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4618      	mov	r0, r3
 8010354:	f7f8 f830 	bl	80083b8 <__aeabi_f2d>
 8010358:	a32f      	add	r3, pc, #188	; (adr r3, 8010418 <Encoder_Refresh+0x1b0>)
 801035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035e:	f7f7 fecb 	bl	80080f8 <__aeabi_dsub>
 8010362:	4603      	mov	r3, r0
 8010364:	460c      	mov	r4, r1
 8010366:	4618      	mov	r0, r3
 8010368:	4621      	mov	r1, r4
 801036a:	f7f8 fb55 	bl	8008a18 <__aeabi_d2f>
 801036e:	4602      	mov	r2, r0
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	619a      	str	r2, [r3, #24]
 8010374:	e003      	b.n	801037e <Encoder_Refresh+0x116>
	else						hEncoder->theta = _theta;
 8010376:	4b2e      	ldr	r3, [pc, #184]	; (8010430 <Encoder_Refresh+0x1c8>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	619a      	str	r2, [r3, #24]


	// 差分角度計算，初めのステップは速度ゼロとする
	if(hEncoder->firstLaunch != 0)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010384:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038c:	d008      	beq.n	80103a0 <Encoder_Refresh+0x138>
	{
		d_theta = 0.0f;
 801038e:	4b29      	ldr	r3, [pc, #164]	; (8010434 <Encoder_Refresh+0x1cc>)
 8010390:	f04f 0200 	mov.w	r2, #0
 8010394:	601a      	str	r2, [r3, #0]
		hEncoder->firstLaunch = 0;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f04f 0200 	mov.w	r2, #0
 801039c:	62da      	str	r2, [r3, #44]	; 0x2c
 801039e:	e00a      	b.n	80103b6 <Encoder_Refresh+0x14e>
	}
	else
	{
		d_theta = hEncoder->theta - hEncoder->p_theta;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80103ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103b0:	4b20      	ldr	r3, [pc, #128]	; (8010434 <Encoder_Refresh+0x1cc>)
 80103b2:	edc3 7a00 	vstr	s15, [r3]
	}
	hEncoder->p_theta = hEncoder->theta;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	699a      	ldr	r2, [r3, #24]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	625a      	str	r2, [r3, #36]	; 0x24

	// Unwrapping Process
	if(d_theta < - M_PI)
 80103be:	4b1d      	ldr	r3, [pc, #116]	; (8010434 <Encoder_Refresh+0x1cc>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7f7 fff8 	bl	80083b8 <__aeabi_f2d>
 80103c8:	a315      	add	r3, pc, #84	; (adr r3, 8010420 <Encoder_Refresh+0x1b8>)
 80103ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ce:	f7f8 fabd 	bl	800894c <__aeabi_dcmplt>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d02f      	beq.n	8010438 <Encoder_Refresh+0x1d0>
	{
		d_theta += 2 * M_PI;
 80103d8:	4b16      	ldr	r3, [pc, #88]	; (8010434 <Encoder_Refresh+0x1cc>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	4618      	mov	r0, r3
 80103de:	f7f7 ffeb 	bl	80083b8 <__aeabi_f2d>
 80103e2:	a30d      	add	r3, pc, #52	; (adr r3, 8010418 <Encoder_Refresh+0x1b0>)
 80103e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e8:	f7f7 fe88 	bl	80080fc <__adddf3>
 80103ec:	4603      	mov	r3, r0
 80103ee:	460c      	mov	r4, r1
 80103f0:	4618      	mov	r0, r3
 80103f2:	4621      	mov	r1, r4
 80103f4:	f7f8 fb10 	bl	8008a18 <__aeabi_d2f>
 80103f8:	4602      	mov	r2, r0
 80103fa:	4b0e      	ldr	r3, [pc, #56]	; (8010434 <Encoder_Refresh+0x1cc>)
 80103fc:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += 1;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	69db      	ldr	r3, [r3, #28]
 8010402:	1c5a      	adds	r2, r3, #1
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	61da      	str	r2, [r3, #28]
 8010408:	e03b      	b.n	8010482 <Encoder_Refresh+0x21a>
 801040a:	bf00      	nop
 801040c:	f3af 8000 	nop.w
 8010410:	54442d18 	.word	0x54442d18
 8010414:	400921fb 	.word	0x400921fb
 8010418:	54442d18 	.word	0x54442d18
 801041c:	401921fb 	.word	0x401921fb
 8010420:	54442d18 	.word	0x54442d18
 8010424:	c00921fb 	.word	0xc00921fb
 8010428:	2000024a 	.word	0x2000024a
 801042c:	46800000 	.word	0x46800000
 8010430:	2000024c 	.word	0x2000024c
 8010434:	20000250 	.word	0x20000250
	}
	else if(d_theta > M_PI)
 8010438:	4b93      	ldr	r3, [pc, #588]	; (8010688 <Encoder_Refresh+0x420>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4618      	mov	r0, r3
 801043e:	f7f7 ffbb 	bl	80083b8 <__aeabi_f2d>
 8010442:	a389      	add	r3, pc, #548	; (adr r3, 8010668 <Encoder_Refresh+0x400>)
 8010444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010448:	f7f8 fa9e 	bl	8008988 <__aeabi_dcmpgt>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d017      	beq.n	8010482 <Encoder_Refresh+0x21a>
	{
		d_theta -= 2 * M_PI;
 8010452:	4b8d      	ldr	r3, [pc, #564]	; (8010688 <Encoder_Refresh+0x420>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4618      	mov	r0, r3
 8010458:	f7f7 ffae 	bl	80083b8 <__aeabi_f2d>
 801045c:	a384      	add	r3, pc, #528	; (adr r3, 8010670 <Encoder_Refresh+0x408>)
 801045e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010462:	f7f7 fe49 	bl	80080f8 <__aeabi_dsub>
 8010466:	4603      	mov	r3, r0
 8010468:	460c      	mov	r4, r1
 801046a:	4618      	mov	r0, r3
 801046c:	4621      	mov	r1, r4
 801046e:	f7f8 fad3 	bl	8008a18 <__aeabi_d2f>
 8010472:	4602      	mov	r2, r0
 8010474:	4b84      	ldr	r3, [pc, #528]	; (8010688 <Encoder_Refresh+0x420>)
 8010476:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += -1;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	69db      	ldr	r3, [r3, #28]
 801047c:	1e5a      	subs	r2, r3, #1
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	61da      	str	r2, [r3, #28]
	}

	// 速度計算，LPF付き
	hEncoder->omega = hEncoder->omega * SPEED_LPF_COEFF + d_theta / hEncoder->Init.cycleTime * (1.0f - SPEED_LPF_COEFF);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010486:	4618      	mov	r0, r3
 8010488:	f7f7 ff96 	bl	80083b8 <__aeabi_f2d>
 801048c:	a37a      	add	r3, pc, #488	; (adr r3, 8010678 <Encoder_Refresh+0x410>)
 801048e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010492:	f7f7 ffe9 	bl	8008468 <__aeabi_dmul>
 8010496:	4603      	mov	r3, r0
 8010498:	460c      	mov	r4, r1
 801049a:	4625      	mov	r5, r4
 801049c:	461c      	mov	r4, r3
 801049e:	4b7a      	ldr	r3, [pc, #488]	; (8010688 <Encoder_Refresh+0x420>)
 80104a0:	ed93 7a00 	vldr	s14, [r3]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80104aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80104ae:	ee16 0a90 	vmov	r0, s13
 80104b2:	f7f7 ff81 	bl	80083b8 <__aeabi_f2d>
 80104b6:	a372      	add	r3, pc, #456	; (adr r3, 8010680 <Encoder_Refresh+0x418>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	f7f7 ffd4 	bl	8008468 <__aeabi_dmul>
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	4620      	mov	r0, r4
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7f7 fe18 	bl	80080fc <__adddf3>
 80104cc:	4603      	mov	r3, r0
 80104ce:	460c      	mov	r4, r1
 80104d0:	4618      	mov	r0, r3
 80104d2:	4621      	mov	r1, r4
 80104d4:	f7f8 faa0 	bl	8008a18 <__aeabi_d2f>
 80104d8:	4602      	mov	r2, r0
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	629a      	str	r2, [r3, #40]	; 0x28

	// マルチターン角度更新
	hEncoder->theta_multiturn = hEncoder->theta + 2.0f * M_PI * hEncoder->turnCount;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	699b      	ldr	r3, [r3, #24]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7f7 ff68 	bl	80083b8 <__aeabi_f2d>
 80104e8:	4604      	mov	r4, r0
 80104ea:	460d      	mov	r5, r1
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	69db      	ldr	r3, [r3, #28]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7f7 ff4f 	bl	8008394 <__aeabi_i2d>
 80104f6:	a35e      	add	r3, pc, #376	; (adr r3, 8010670 <Encoder_Refresh+0x408>)
 80104f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fc:	f7f7 ffb4 	bl	8008468 <__aeabi_dmul>
 8010500:	4602      	mov	r2, r0
 8010502:	460b      	mov	r3, r1
 8010504:	4620      	mov	r0, r4
 8010506:	4629      	mov	r1, r5
 8010508:	f7f7 fdf8 	bl	80080fc <__adddf3>
 801050c:	4603      	mov	r3, r0
 801050e:	460c      	mov	r4, r1
 8010510:	4618      	mov	r0, r3
 8010512:	4621      	mov	r1, r4
 8010514:	f7f8 fa80 	bl	8008a18 <__aeabi_d2f>
 8010518:	4602      	mov	r2, r0
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	621a      	str	r2, [r3, #32]

	// 電気角取得
	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLE_PAIRS, 2.0f * M_PI) + hEncoder->Init.theta_re_offset;
 801051e:	4b5b      	ldr	r3, [pc, #364]	; (801068c <Encoder_Refresh+0x424>)
 8010520:	881b      	ldrh	r3, [r3, #0]
 8010522:	ee07 3a90 	vmov	s15, r3
 8010526:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801052a:	eddf 6a59 	vldr	s13, [pc, #356]	; 8010690 <Encoder_Refresh+0x428>
 801052e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010532:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010536:	ee17 0a90 	vmov	r0, s15
 801053a:	f7f7 ff3d 	bl	80083b8 <__aeabi_f2d>
 801053e:	a34a      	add	r3, pc, #296	; (adr r3, 8010668 <Encoder_Refresh+0x400>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	f7f7 ff90 	bl	8008468 <__aeabi_dmul>
 8010548:	4603      	mov	r3, r0
 801054a:	460c      	mov	r4, r1
 801054c:	4618      	mov	r0, r3
 801054e:	4621      	mov	r1, r4
 8010550:	f04f 0200 	mov.w	r2, #0
 8010554:	4b4f      	ldr	r3, [pc, #316]	; (8010694 <Encoder_Refresh+0x42c>)
 8010556:	f7f7 ff87 	bl	8008468 <__aeabi_dmul>
 801055a:	4603      	mov	r3, r0
 801055c:	460c      	mov	r4, r1
 801055e:	4618      	mov	r0, r3
 8010560:	4621      	mov	r1, r4
 8010562:	f7f8 fa59 	bl	8008a18 <__aeabi_d2f>
 8010566:	4603      	mov	r3, r0
 8010568:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8010698 <Encoder_Refresh+0x430>
 801056c:	ee00 3a10 	vmov	s0, r3
 8010570:	f004 f952 	bl	8014818 <fmodf>
 8010574:	eeb0 7a40 	vmov.f32	s14, s0
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	edd3 7a01 	vldr	s15, [r3, #4]
 801057e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010582:	4b46      	ldr	r3, [pc, #280]	; (801069c <Encoder_Refresh+0x434>)
 8010584:	edc3 7a00 	vstr	s15, [r3]

	if(_theta_re < 0.0f)			hEncoder->theta_re = _theta_re + 2 * M_PI;
 8010588:	4b44      	ldr	r3, [pc, #272]	; (801069c <Encoder_Refresh+0x434>)
 801058a:	edd3 7a00 	vldr	s15, [r3]
 801058e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010596:	d513      	bpl.n	80105c0 <Encoder_Refresh+0x358>
 8010598:	4b40      	ldr	r3, [pc, #256]	; (801069c <Encoder_Refresh+0x434>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4618      	mov	r0, r3
 801059e:	f7f7 ff0b 	bl	80083b8 <__aeabi_f2d>
 80105a2:	a333      	add	r3, pc, #204	; (adr r3, 8010670 <Encoder_Refresh+0x408>)
 80105a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a8:	f7f7 fda8 	bl	80080fc <__adddf3>
 80105ac:	4603      	mov	r3, r0
 80105ae:	460c      	mov	r4, r1
 80105b0:	4618      	mov	r0, r3
 80105b2:	4621      	mov	r1, r4
 80105b4:	f7f8 fa30 	bl	8008a18 <__aeabi_d2f>
 80105b8:	4602      	mov	r2, r0
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	635a      	str	r2, [r3, #52]	; 0x34
 80105be:	e024      	b.n	801060a <Encoder_Refresh+0x3a2>
	else if(_theta_re >= 2 * M_PI)	hEncoder->theta_re = _theta_re - 2 * M_PI;
 80105c0:	4b36      	ldr	r3, [pc, #216]	; (801069c <Encoder_Refresh+0x434>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7f7 fef7 	bl	80083b8 <__aeabi_f2d>
 80105ca:	a329      	add	r3, pc, #164	; (adr r3, 8010670 <Encoder_Refresh+0x408>)
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	f7f8 f9d0 	bl	8008974 <__aeabi_dcmpge>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d013      	beq.n	8010602 <Encoder_Refresh+0x39a>
 80105da:	4b30      	ldr	r3, [pc, #192]	; (801069c <Encoder_Refresh+0x434>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4618      	mov	r0, r3
 80105e0:	f7f7 feea 	bl	80083b8 <__aeabi_f2d>
 80105e4:	a322      	add	r3, pc, #136	; (adr r3, 8010670 <Encoder_Refresh+0x408>)
 80105e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ea:	f7f7 fd85 	bl	80080f8 <__aeabi_dsub>
 80105ee:	4603      	mov	r3, r0
 80105f0:	460c      	mov	r4, r1
 80105f2:	4618      	mov	r0, r3
 80105f4:	4621      	mov	r1, r4
 80105f6:	f7f8 fa0f 	bl	8008a18 <__aeabi_d2f>
 80105fa:	4602      	mov	r2, r0
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	635a      	str	r2, [r3, #52]	; 0x34
 8010600:	e003      	b.n	801060a <Encoder_Refresh+0x3a2>
	else							hEncoder->theta_re = _theta_re;
 8010602:	4b26      	ldr	r3, [pc, #152]	; (801069c <Encoder_Refresh+0x434>)
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	635a      	str	r2, [r3, #52]	; 0x34

	hEncoder->cos_theta_re = sin_table2[(int)((hEncoder->theta_re * 0.3183f + 0.5f) * 5000.0f)];
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010610:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80106a0 <Encoder_Refresh+0x438>
 8010614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010618:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801061c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010620:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80106a4 <Encoder_Refresh+0x43c>
 8010624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801062c:	ee17 3a90 	vmov	r3, s15
 8010630:	4a1d      	ldr	r2, [pc, #116]	; (80106a8 <Encoder_Refresh+0x440>)
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	4413      	add	r3, r2
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	639a      	str	r2, [r3, #56]	; 0x38
	hEncoder->sin_theta_re = sin_table2[(int)(hEncoder->theta_re * 1591.54943f)];
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010642:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80106ac <Encoder_Refresh+0x444>
 8010646:	ee67 7a87 	vmul.f32	s15, s15, s14
 801064a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801064e:	ee17 3a90 	vmov	r3, s15
 8010652:	4a15      	ldr	r2, [pc, #84]	; (80106a8 <Encoder_Refresh+0x440>)
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	4413      	add	r3, r2
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	63da      	str	r2, [r3, #60]	; 0x3c


	return 0;
 801065e:	2300      	movs	r3, #0

}
 8010660:	4618      	mov	r0, r3
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bdb0      	pop	{r4, r5, r7, pc}
 8010668:	54442d18 	.word	0x54442d18
 801066c:	400921fb 	.word	0x400921fb
 8010670:	54442d18 	.word	0x54442d18
 8010674:	401921fb 	.word	0x401921fb
 8010678:	aa57066e 	.word	0xaa57066e
 801067c:	3fe859a4 	.word	0x3fe859a4
 8010680:	56a3e648 	.word	0x56a3e648
 8010684:	3fce996d 	.word	0x3fce996d
 8010688:	20000250 	.word	0x20000250
 801068c:	2000024a 	.word	0x2000024a
 8010690:	46800000 	.word	0x46800000
 8010694:	401c0000 	.word	0x401c0000
 8010698:	40c90fdb 	.word	0x40c90fdb
 801069c:	20000254 	.word	0x20000254
 80106a0:	3ea2f838 	.word	0x3ea2f838
 80106a4:	459c4000 	.word	0x459c4000
 80106a8:	08015be0 	.word	0x08015be0
 80106ac:	44c6f195 	.word	0x44c6f195

080106b0 <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b088      	sub	sp, #32
 80106b4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80106b6:	f7fa f92f 	bl	800a918 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80106ba:	2300      	movs	r3, #0
 80106bc:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 80106be:	2301      	movs	r3, #1
 80106c0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80106c2:	2302      	movs	r3, #2
 80106c4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 80106c6:	2301      	movs	r3, #1
 80106c8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 80106ca:	1d3a      	adds	r2, r7, #4
 80106cc:	f107 0308 	add.w	r3, r7, #8
 80106d0:	4611      	mov	r1, r2
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fa fa8e 	bl	800abf4 <HAL_FLASHEx_Erase>
 80106d8:	4603      	mov	r3, r0
 80106da:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 80106dc:	f7fa f93e 	bl	800a95c <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 80106e0:	7ffb      	ldrb	r3, [r7, #31]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d105      	bne.n	80106f2 <Flash_clear+0x42>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ec:	d101      	bne.n	80106f2 <Flash_clear+0x42>
 80106ee:	2301      	movs	r3, #1
 80106f0:	e000      	b.n	80106f4 <Flash_clear+0x44>
 80106f2:	2300      	movs	r3, #0
 80106f4:	b2db      	uxtb	r3, r3
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3720      	adds	r7, #32
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
	...

08010700 <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 8010700:	b580      	push	{r7, lr}
 8010702:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 8010704:	4a05      	ldr	r2, [pc, #20]	; (801071c <Flash_load+0x1c>)
 8010706:	4b06      	ldr	r3, [pc, #24]	; (8010720 <Flash_load+0x20>)
 8010708:	4610      	mov	r0, r2
 801070a:	4619      	mov	r1, r3
 801070c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010710:	461a      	mov	r2, r3
 8010712:	f001 fca3 	bl	801205c <memcpy>
    return work_ram;
 8010716:	4b01      	ldr	r3, [pc, #4]	; (801071c <Flash_load+0x1c>)
}
 8010718:	4618      	mov	r0, r3
 801071a:	bd80      	pop	{r7, pc}
 801071c:	20000258 	.word	0x20000258
 8010720:	08004000 	.word	0x08004000

08010724 <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 801072a:	f7ff ffc1 	bl	80106b0 <Flash_clear>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d101      	bne.n	8010738 <Flash_store+0x14>
 8010734:	2301      	movs	r3, #1
 8010736:	e02f      	b.n	8010798 <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8010738:	4b19      	ldr	r3, [pc, #100]	; (80107a0 <Flash_store+0x7c>)
 801073a:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 801073c:	f7fa f8ec 	bl	800a918 <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8010740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010744:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8010746:	2300      	movs	r3, #0
 8010748:	60bb      	str	r3, [r7, #8]
 801074a:	e017      	b.n	801077c <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	4a14      	ldr	r2, [pc, #80]	; (80107a4 <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 8010752:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	4413      	add	r3, r2
 801075c:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 801075e:	f04f 0400 	mov.w	r4, #0
 8010762:	461a      	mov	r2, r3
 8010764:	4623      	mov	r3, r4
 8010766:	2002      	movs	r0, #2
 8010768:	f7fa f882 	bl	800a870 <HAL_FLASH_Program>
 801076c:	4603      	mov	r3, r0
 801076e:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8010770:	7bfb      	ldrb	r3, [r7, #15]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d107      	bne.n	8010786 <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	3301      	adds	r3, #1
 801077a:	60bb      	str	r3, [r7, #8]
 801077c:	68ba      	ldr	r2, [r7, #8]
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	429a      	cmp	r2, r3
 8010782:	d3e3      	bcc.n	801074c <Flash_store+0x28>
 8010784:	e000      	b.n	8010788 <Flash_store+0x64>
        if (result != HAL_OK) break;
 8010786:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8010788:	f7fa f8e8 	bl	800a95c <HAL_FLASH_Lock>

    return result == HAL_OK;
 801078c:	7bfb      	ldrb	r3, [r7, #15]
 801078e:	2b00      	cmp	r3, #0
 8010790:	bf0c      	ite	eq
 8010792:	2301      	moveq	r3, #1
 8010794:	2300      	movne	r3, #0
 8010796:	b2db      	uxtb	r3, r3
}
 8010798:	4618      	mov	r0, r3
 801079a:	3714      	adds	r7, #20
 801079c:	46bd      	mov	sp, r7
 801079e:	bd90      	pop	{r4, r7, pc}
 80107a0:	20000258 	.word	0x20000258
 80107a4:	08004000 	.word	0x08004000

080107a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b08a      	sub	sp, #40	; 0x28
 80107ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107ae:	f107 0314 	add.w	r3, r7, #20
 80107b2:	2200      	movs	r2, #0
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	605a      	str	r2, [r3, #4]
 80107b8:	609a      	str	r2, [r3, #8]
 80107ba:	60da      	str	r2, [r3, #12]
 80107bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80107be:	2300      	movs	r3, #0
 80107c0:	613b      	str	r3, [r7, #16]
 80107c2:	4b45      	ldr	r3, [pc, #276]	; (80108d8 <MX_GPIO_Init+0x130>)
 80107c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107c6:	4a44      	ldr	r2, [pc, #272]	; (80108d8 <MX_GPIO_Init+0x130>)
 80107c8:	f043 0304 	orr.w	r3, r3, #4
 80107cc:	6313      	str	r3, [r2, #48]	; 0x30
 80107ce:	4b42      	ldr	r3, [pc, #264]	; (80108d8 <MX_GPIO_Init+0x130>)
 80107d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107d2:	f003 0304 	and.w	r3, r3, #4
 80107d6:	613b      	str	r3, [r7, #16]
 80107d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80107da:	2300      	movs	r3, #0
 80107dc:	60fb      	str	r3, [r7, #12]
 80107de:	4b3e      	ldr	r3, [pc, #248]	; (80108d8 <MX_GPIO_Init+0x130>)
 80107e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107e2:	4a3d      	ldr	r2, [pc, #244]	; (80108d8 <MX_GPIO_Init+0x130>)
 80107e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107e8:	6313      	str	r3, [r2, #48]	; 0x30
 80107ea:	4b3b      	ldr	r3, [pc, #236]	; (80108d8 <MX_GPIO_Init+0x130>)
 80107ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107f2:	60fb      	str	r3, [r7, #12]
 80107f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80107f6:	2300      	movs	r3, #0
 80107f8:	60bb      	str	r3, [r7, #8]
 80107fa:	4b37      	ldr	r3, [pc, #220]	; (80108d8 <MX_GPIO_Init+0x130>)
 80107fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107fe:	4a36      	ldr	r2, [pc, #216]	; (80108d8 <MX_GPIO_Init+0x130>)
 8010800:	f043 0301 	orr.w	r3, r3, #1
 8010804:	6313      	str	r3, [r2, #48]	; 0x30
 8010806:	4b34      	ldr	r3, [pc, #208]	; (80108d8 <MX_GPIO_Init+0x130>)
 8010808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801080a:	f003 0301 	and.w	r3, r3, #1
 801080e:	60bb      	str	r3, [r7, #8]
 8010810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010812:	2300      	movs	r3, #0
 8010814:	607b      	str	r3, [r7, #4]
 8010816:	4b30      	ldr	r3, [pc, #192]	; (80108d8 <MX_GPIO_Init+0x130>)
 8010818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081a:	4a2f      	ldr	r2, [pc, #188]	; (80108d8 <MX_GPIO_Init+0x130>)
 801081c:	f043 0302 	orr.w	r3, r3, #2
 8010820:	6313      	str	r3, [r2, #48]	; 0x30
 8010822:	4b2d      	ldr	r3, [pc, #180]	; (80108d8 <MX_GPIO_Init+0x130>)
 8010824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010826:	f003 0302 	and.w	r3, r3, #2
 801082a:	607b      	str	r3, [r7, #4]
 801082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 801082e:	2200      	movs	r2, #0
 8010830:	f248 6160 	movw	r1, #34400	; 0x8660
 8010834:	4829      	ldr	r0, [pc, #164]	; (80108dc <MX_GPIO_Init+0x134>)
 8010836:	f7fa fca9 	bl	800b18c <HAL_GPIO_WritePin>
                          |SPI3_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 801083a:	2200      	movs	r2, #0
 801083c:	f241 0150 	movw	r1, #4176	; 0x1050
 8010840:	4827      	ldr	r0, [pc, #156]	; (80108e0 <MX_GPIO_Init+0x138>)
 8010842:	f7fa fca3 	bl	800b18c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8010846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801084c:	4b25      	ldr	r3, [pc, #148]	; (80108e4 <MX_GPIO_Init+0x13c>)
 801084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010850:	2300      	movs	r3, #0
 8010852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8010854:	f107 0314 	add.w	r3, r7, #20
 8010858:	4619      	mov	r1, r3
 801085a:	4823      	ldr	r0, [pc, #140]	; (80108e8 <MX_GPIO_Init+0x140>)
 801085c:	f7fa faec 	bl	800ae38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 8010860:	f248 6360 	movw	r3, #34400	; 0x8660
 8010864:	617b      	str	r3, [r7, #20]
                          |SPI3_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010866:	2301      	movs	r3, #1
 8010868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801086a:	2300      	movs	r3, #0
 801086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801086e:	2300      	movs	r3, #0
 8010870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010872:	f107 0314 	add.w	r3, r7, #20
 8010876:	4619      	mov	r1, r3
 8010878:	4818      	ldr	r0, [pc, #96]	; (80108dc <MX_GPIO_Init+0x134>)
 801087a:	f7fa fadd 	bl	800ae38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 801087e:	f241 0350 	movw	r3, #4176	; 0x1050
 8010882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010884:	2301      	movs	r3, #1
 8010886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010888:	2300      	movs	r3, #0
 801088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801088c:	2300      	movs	r3, #0
 801088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010890:	f107 0314 	add.w	r3, r7, #20
 8010894:	4619      	mov	r1, r3
 8010896:	4812      	ldr	r0, [pc, #72]	; (80108e0 <MX_GPIO_Init+0x138>)
 8010898:	f7fa face 	bl	800ae38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 801089c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80108a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80108a2:	2300      	movs	r3, #0
 80108a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80108a6:	2301      	movs	r3, #1
 80108a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80108aa:	f107 0314 	add.w	r3, r7, #20
 80108ae:	4619      	mov	r1, r3
 80108b0:	480b      	ldr	r0, [pc, #44]	; (80108e0 <MX_GPIO_Init+0x138>)
 80108b2:	f7fa fac1 	bl	800ae38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 80108b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80108bc:	2300      	movs	r3, #0
 80108be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108c0:	2300      	movs	r3, #0
 80108c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 80108c4:	f107 0314 	add.w	r3, r7, #20
 80108c8:	4619      	mov	r1, r3
 80108ca:	4804      	ldr	r0, [pc, #16]	; (80108dc <MX_GPIO_Init+0x134>)
 80108cc:	f7fa fab4 	bl	800ae38 <HAL_GPIO_Init>

}
 80108d0:	bf00      	nop
 80108d2:	3728      	adds	r7, #40	; 0x28
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	40023800 	.word	0x40023800
 80108dc:	40020000 	.word	0x40020000
 80108e0:	40020400 	.word	0x40020400
 80108e4:	10210000 	.word	0x10210000
 80108e8:	40020800 	.word	0x40020800

080108ec <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	4603      	mov	r3, r0
 80108f4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 80108f6:	1df9      	adds	r1, r7, #7
 80108f8:	2301      	movs	r3, #1
 80108fa:	2201      	movs	r2, #1
 80108fc:	4803      	ldr	r0, [pc, #12]	; (801090c <__io_putchar+0x20>)
 80108fe:	f7fd f866 	bl	800d9ce <HAL_UART_Transmit>
}
 8010902:	bf00      	nop
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	20004848 	.word	0x20004848

08010910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010910:	b590      	push	{r4, r7, lr}
 8010912:	b085      	sub	sp, #20
 8010914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	float phase = 0.0f;
 8010916:	f04f 0300 	mov.w	r3, #0
 801091a:	60fb      	str	r3, [r7, #12]

	int count = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	60bb      	str	r3, [r7, #8]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010920:	f7f8 fa4a 	bl	8008db8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010924:	f000 f9aa 	bl	8010c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010928:	f7ff ff3e 	bl	80107a8 <MX_GPIO_Init>
  MX_DMA_Init();
 801092c:	f7ff faa0 	bl	800fe70 <MX_DMA_Init>
  MX_ADC1_Init();
 8010930:	f7fe fef0 	bl	800f714 <MX_ADC1_Init>
  MX_ADC2_Init();
 8010934:	f7fe ff40 	bl	800f7b8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8010938:	f7fe ff90 	bl	800f85c <MX_ADC3_Init>
  MX_CAN1_Init();
 801093c:	f7ff f93e 	bl	800fbbc <MX_CAN1_Init>
  MX_SPI2_Init();
 8010940:	f000 feac 	bl	801169c <MX_SPI2_Init>
  MX_SPI3_Init();
 8010944:	f000 fee2 	bl	801170c <MX_SPI3_Init>
  MX_TIM8_Init();
 8010948:	f001 f960 	bl	8011c0c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 801094c:	f001 fab8 	bl	8011ec0 <MX_USART2_UART_Init>


  //initialise_monitor_handles();


  DRV_Init();
 8010950:	f7fe fe48 	bl	800f5e4 <DRV_Init>
  //UartPrintf(&huart2, "Hello world\n");


#if DEBUG_PRINT_ENABLE

  printf("Hello\n");
 8010954:	48b8      	ldr	r0, [pc, #736]	; (8010c38 <main+0x328>)
 8010956:	f002 f865 	bl	8012a24 <puts>

#endif


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 801095a:	2201      	movs	r2, #1
 801095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010960:	48b6      	ldr	r0, [pc, #728]	; (8010c3c <main+0x32c>)
 8010962:	f7fa fc13 	bl	800b18c <HAL_GPIO_WritePin>


  //printf("Hello SPI Gate Driver\n");


  DRV_ReadData(&drv8323, ADDR_OCP_Control);
 8010966:	2105      	movs	r1, #5
 8010968:	48b5      	ldr	r0, [pc, #724]	; (8010c40 <main+0x330>)
 801096a:	f7fe fe90 	bl	800f68e <DRV_ReadData>

  drv8323.Reg.OCP_Control.DEAD_TIME = 0b01; // Dead Time : 100ns
 801096e:	4ab4      	ldr	r2, [pc, #720]	; (8010c40 <main+0x330>)
 8010970:	7d53      	ldrb	r3, [r2, #21]
 8010972:	2101      	movs	r1, #1
 8010974:	f361 0301 	bfi	r3, r1, #0, #2
 8010978:	7553      	strb	r3, [r2, #21]
  drv8323.Reg.OCP_Control.OCP_MODE = 0b00; // Overcurrentcausesa latchedfault
 801097a:	4ab1      	ldr	r2, [pc, #708]	; (8010c40 <main+0x330>)
 801097c:	7d13      	ldrb	r3, [r2, #20]
 801097e:	f36f 1387 	bfc	r3, #6, #2
 8010982:	7513      	strb	r3, [r2, #20]
  drv8323.Reg.OCP_Control.OCP_DEG = 0b11; // Deglitch Time of 8us
 8010984:	4aae      	ldr	r2, [pc, #696]	; (8010c40 <main+0x330>)
 8010986:	7d13      	ldrb	r3, [r2, #20]
 8010988:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801098c:	7513      	strb	r3, [r2, #20]
  drv8323.Reg.OCP_Control.VDS_LVL = 0b1001; // VDS = 0.75V -> ID = 75A
 801098e:	4aac      	ldr	r2, [pc, #688]	; (8010c40 <main+0x330>)
 8010990:	7d13      	ldrb	r3, [r2, #20]
 8010992:	2109      	movs	r1, #9
 8010994:	f361 0303 	bfi	r3, r1, #0, #4
 8010998:	7513      	strb	r3, [r2, #20]

  DRV_WriteData(&drv8323, ADDR_OCP_Control);
 801099a:	2105      	movs	r1, #5
 801099c:	48a8      	ldr	r0, [pc, #672]	; (8010c40 <main+0x330>)
 801099e:	f7fe fe39 	bl	800f614 <DRV_WriteData>


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 80109a2:	2106      	movs	r1, #6
 80109a4:	48a6      	ldr	r0, [pc, #664]	; (8010c40 <main+0x330>)
 80109a6:	f7fe fe72 	bl	800f68e <DRV_ReadData>

  drv8323.Reg.CSA_Control.SEN_LVL = 0b11;	// Vsense = 0.5V -> 50A
 80109aa:	4aa5      	ldr	r2, [pc, #660]	; (8010c40 <main+0x330>)
 80109ac:	7e13      	ldrb	r3, [r2, #24]
 80109ae:	f043 0303 	orr.w	r3, r3, #3
 80109b2:	7613      	strb	r3, [r2, #24]
  drv8323.Reg.CSA_Control.CSA_GAIN = 0b01;	// Amplifier Gain = 10V/V
 80109b4:	4aa2      	ldr	r2, [pc, #648]	; (8010c40 <main+0x330>)
 80109b6:	7e13      	ldrb	r3, [r2, #24]
 80109b8:	2101      	movs	r1, #1
 80109ba:	f361 1387 	bfi	r3, r1, #6, #2
 80109be:	7613      	strb	r3, [r2, #24]

  DRV_WriteData(&drv8323, ADDR_CSA_Control);
 80109c0:	2106      	movs	r1, #6
 80109c2:	489f      	ldr	r0, [pc, #636]	; (8010c40 <main+0x330>)
 80109c4:	f7fe fe26 	bl	800f614 <DRV_WriteData>


#if DEBUG_PRINT_ENABLE

  PRINT_HEX(drv8323.Reg.FaultStatus1.word);
 80109c8:	4b9d      	ldr	r3, [pc, #628]	; (8010c40 <main+0x330>)
 80109ca:	881b      	ldrh	r3, [r3, #0]
 80109cc:	4619      	mov	r1, r3
 80109ce:	489d      	ldr	r0, [pc, #628]	; (8010c44 <main+0x334>)
 80109d0:	f001 ffb4 	bl	801293c <iprintf>
  PRINT_HEX(drv8323.Reg.FaultStatus2.word);
 80109d4:	4b9a      	ldr	r3, [pc, #616]	; (8010c40 <main+0x330>)
 80109d6:	889b      	ldrh	r3, [r3, #4]
 80109d8:	4619      	mov	r1, r3
 80109da:	489b      	ldr	r0, [pc, #620]	; (8010c48 <main+0x338>)
 80109dc:	f001 ffae 	bl	801293c <iprintf>
  PRINT_HEX(drv8323.Reg.DriverControl.word);
 80109e0:	4b97      	ldr	r3, [pc, #604]	; (8010c40 <main+0x330>)
 80109e2:	891b      	ldrh	r3, [r3, #8]
 80109e4:	4619      	mov	r1, r3
 80109e6:	4899      	ldr	r0, [pc, #612]	; (8010c4c <main+0x33c>)
 80109e8:	f001 ffa8 	bl	801293c <iprintf>
  PRINT_HEX(drv8323.Reg.GateDrive_HS.word);
 80109ec:	4b94      	ldr	r3, [pc, #592]	; (8010c40 <main+0x330>)
 80109ee:	899b      	ldrh	r3, [r3, #12]
 80109f0:	4619      	mov	r1, r3
 80109f2:	4897      	ldr	r0, [pc, #604]	; (8010c50 <main+0x340>)
 80109f4:	f001 ffa2 	bl	801293c <iprintf>
  PRINT_HEX(drv8323.Reg.GateDrive_LS.word);
 80109f8:	4b91      	ldr	r3, [pc, #580]	; (8010c40 <main+0x330>)
 80109fa:	8a1b      	ldrh	r3, [r3, #16]
 80109fc:	4619      	mov	r1, r3
 80109fe:	4895      	ldr	r0, [pc, #596]	; (8010c54 <main+0x344>)
 8010a00:	f001 ff9c 	bl	801293c <iprintf>
  PRINT_HEX(drv8323.Reg.OCP_Control.word);
 8010a04:	4b8e      	ldr	r3, [pc, #568]	; (8010c40 <main+0x330>)
 8010a06:	8a9b      	ldrh	r3, [r3, #20]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4893      	ldr	r0, [pc, #588]	; (8010c58 <main+0x348>)
 8010a0c:	f001 ff96 	bl	801293c <iprintf>
  PRINT_HEX(drv8323.Reg.CSA_Control.word);
 8010a10:	4b8b      	ldr	r3, [pc, #556]	; (8010c40 <main+0x330>)
 8010a12:	8b1b      	ldrh	r3, [r3, #24]
 8010a14:	4619      	mov	r1, r3
 8010a16:	4891      	ldr	r0, [pc, #580]	; (8010c5c <main+0x34c>)
 8010a18:	f001 ff90 	bl	801293c <iprintf>

#endif

  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a22:	4886      	ldr	r0, [pc, #536]	; (8010c3c <main+0x32c>)
 8010a24:	f7fa fbb2 	bl	800b18c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8010a28:	200a      	movs	r0, #10
 8010a2a:	f7f8 fa37 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a34:	4881      	ldr	r0, [pc, #516]	; (8010c3c <main+0x32c>)
 8010a36:	f7fa fba9 	bl	800b18c <HAL_GPIO_WritePin>


  /******** DEBUG ********/


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 8010a3a:	2106      	movs	r1, #6
 8010a3c:	4880      	ldr	r0, [pc, #512]	; (8010c40 <main+0x330>)
 8010a3e:	f7fe fe26 	bl	800f68e <DRV_ReadData>


#if DEBUG_PRINT_ENABLE
  PRINT_HEX(drv8323.Reg.CSA_Control.word);
 8010a42:	4b7f      	ldr	r3, [pc, #508]	; (8010c40 <main+0x330>)
 8010a44:	8b1b      	ldrh	r3, [r3, #24]
 8010a46:	4619      	mov	r1, r3
 8010a48:	4884      	ldr	r0, [pc, #528]	; (8010c5c <main+0x34c>)
 8010a4a:	f001 ff77 	bl	801293c <iprintf>
#endif

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2140      	movs	r1, #64	; 0x40
 8010a52:	487a      	ldr	r0, [pc, #488]	; (8010c3c <main+0x32c>)
 8010a54:	f7fa fb9a 	bl	800b18c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8010a58:	2200      	movs	r2, #0
 8010a5a:	2110      	movs	r1, #16
 8010a5c:	4880      	ldr	r0, [pc, #512]	; (8010c60 <main+0x350>)
 8010a5e:	f7fa fb95 	bl	800b18c <HAL_GPIO_WritePin>


  p_ch = getChannel();
 8010a62:	f7ff f93b 	bl	800fcdc <getChannel>
 8010a66:	4603      	mov	r3, r0
 8010a68:	71fb      	strb	r3, [r7, #7]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	2120      	movs	r1, #32
 8010a6e:	4873      	ldr	r0, [pc, #460]	; (8010c3c <main+0x32c>)
 8010a70:	f7fa fb8c 	bl	800b18c <HAL_GPIO_WritePin>
 8010a74:	2064      	movs	r0, #100	; 0x64
 8010a76:	f7f8 fa11 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	2120      	movs	r1, #32
 8010a7e:	486f      	ldr	r0, [pc, #444]	; (8010c3c <main+0x32c>)
 8010a80:	f7fa fb84 	bl	800b18c <HAL_GPIO_WritePin>
 8010a84:	2064      	movs	r0, #100	; 0x64
 8010a86:	f7f8 fa09 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	2120      	movs	r1, #32
 8010a8e:	486b      	ldr	r0, [pc, #428]	; (8010c3c <main+0x32c>)
 8010a90:	f7fa fb7c 	bl	800b18c <HAL_GPIO_WritePin>
 8010a94:	2064      	movs	r0, #100	; 0x64
 8010a96:	f7f8 fa01 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	2120      	movs	r1, #32
 8010a9e:	4867      	ldr	r0, [pc, #412]	; (8010c3c <main+0x32c>)
 8010aa0:	f7fa fb74 	bl	800b18c <HAL_GPIO_WritePin>
 8010aa4:	2064      	movs	r0, #100	; 0x64
 8010aa6:	f7f8 f9f9 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010aaa:	2201      	movs	r2, #1
 8010aac:	2120      	movs	r1, #32
 8010aae:	4863      	ldr	r0, [pc, #396]	; (8010c3c <main+0x32c>)
 8010ab0:	f7fa fb6c 	bl	800b18c <HAL_GPIO_WritePin>
 8010ab4:	2064      	movs	r0, #100	; 0x64
 8010ab6:	f7f8 f9f1 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010aba:	2200      	movs	r2, #0
 8010abc:	2120      	movs	r1, #32
 8010abe:	485f      	ldr	r0, [pc, #380]	; (8010c3c <main+0x32c>)
 8010ac0:	f7fa fb64 	bl	800b18c <HAL_GPIO_WritePin>
 8010ac4:	2064      	movs	r0, #100	; 0x64
 8010ac6:	f7f8 f9e9 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010aca:	2201      	movs	r2, #1
 8010acc:	2120      	movs	r1, #32
 8010ace:	485b      	ldr	r0, [pc, #364]	; (8010c3c <main+0x32c>)
 8010ad0:	f7fa fb5c 	bl	800b18c <HAL_GPIO_WritePin>
 8010ad4:	2064      	movs	r0, #100	; 0x64
 8010ad6:	f7f8 f9e1 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010ada:	2200      	movs	r2, #0
 8010adc:	2120      	movs	r1, #32
 8010ade:	4857      	ldr	r0, [pc, #348]	; (8010c3c <main+0x32c>)
 8010ae0:	f7fa fb54 	bl	800b18c <HAL_GPIO_WritePin>
 8010ae4:	2064      	movs	r0, #100	; 0x64
 8010ae6:	f7f8 f9d9 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010aea:	2201      	movs	r2, #1
 8010aec:	2120      	movs	r1, #32
 8010aee:	4853      	ldr	r0, [pc, #332]	; (8010c3c <main+0x32c>)
 8010af0:	f7fa fb4c 	bl	800b18c <HAL_GPIO_WritePin>
 8010af4:	2064      	movs	r0, #100	; 0x64
 8010af6:	f7f8 f9d1 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010afa:	2200      	movs	r2, #0
 8010afc:	2120      	movs	r1, #32
 8010afe:	484f      	ldr	r0, [pc, #316]	; (8010c3c <main+0x32c>)
 8010b00:	f7fa fb44 	bl	800b18c <HAL_GPIO_WritePin>
 8010b04:	2064      	movs	r0, #100	; 0x64
 8010b06:	f7f8 f9c9 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	2120      	movs	r1, #32
 8010b0e:	484b      	ldr	r0, [pc, #300]	; (8010c3c <main+0x32c>)
 8010b10:	f7fa fb3c 	bl	800b18c <HAL_GPIO_WritePin>
 8010b14:	2064      	movs	r0, #100	; 0x64
 8010b16:	f7f8 f9c1 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	2120      	movs	r1, #32
 8010b1e:	4847      	ldr	r0, [pc, #284]	; (8010c3c <main+0x32c>)
 8010b20:	f7fa fb34 	bl	800b18c <HAL_GPIO_WritePin>
 8010b24:	2064      	movs	r0, #100	; 0x64
 8010b26:	f7f8 f9b9 	bl	8008e9c <HAL_Delay>


  ch = getChannel();
 8010b2a:	f7ff f8d7 	bl	800fcdc <getChannel>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	71bb      	strb	r3, [r7, #6]


  //CAN_Init();


  Encoder_Init();
 8010b32:	f7ff f9cd 	bl	800fed0 <Encoder_Init>


  HAL_Delay(100);
 8010b36:	2064      	movs	r0, #100	; 0x64
 8010b38:	f7f8 f9b0 	bl	8008e9c <HAL_Delay>

  CurrentSensor_Init();
 8010b3c:	f7fe fa38 	bl	800efb0 <CurrentSensor_Init>

  CurrentSensor_Start(&mainCS);
 8010b40:	4848      	ldr	r0, [pc, #288]	; (8010c64 <main+0x354>)
 8010b42:	f7fe fa6b 	bl	800f01c <CurrentSensor_Start>


  ACR_Init();
 8010b46:	f7fd fc6b 	bl	800e420 <ACR_Init>

  ASR_Init();
 8010b4a:	f7fe f89f 	bl	800ec8c <ASR_Init>

  APR_Init();
 8010b4e:	f7fd ff65 	bl	800ea1c <APR_Init>

  PWM_Init();
 8010b52:	f000 f997 	bl	8010e84 <PWM_Init>

  HAL_Delay(1);
 8010b56:	2001      	movs	r0, #1
 8010b58:	f7f8 f9a0 	bl	8008e9c <HAL_Delay>

  ACR_Start(&mainACR);
 8010b5c:	4842      	ldr	r0, [pc, #264]	; (8010c68 <main+0x358>)
 8010b5e:	f7fd fc99 	bl	800e494 <ACR_Start>

  setZeroEncoder((p_ch != ch)? 1: 0);
 8010b62:	79fa      	ldrb	r2, [r7, #7]
 8010b64:	79bb      	ldrb	r3, [r7, #6]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	bf14      	ite	ne
 8010b6a:	2301      	movne	r3, #1
 8010b6c:	2300      	moveq	r3, #0
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7ff f9f5 	bl	800ff60 <setZeroEncoder>


  ASR_Start(&mainASR);
 8010b76:	483d      	ldr	r0, [pc, #244]	; (8010c6c <main+0x35c>)
 8010b78:	f7fe f8c0 	bl	800ecfc <ASR_Start>

    /* USER CODE BEGIN 3 */



	  if(timing_10ms_flg == 1)
 8010b7c:	4b3c      	ldr	r3, [pc, #240]	; (8010c70 <main+0x360>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d146      	bne.n	8010c14 <main+0x304>
	  {

		  mainASR.omega_ref = 50.0 * sin(phase);
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f7f7 fc16 	bl	80083b8 <__aeabi_f2d>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	460c      	mov	r4, r1
 8010b90:	ec44 3b10 	vmov	d0, r3, r4
 8010b94:	f003 fdf8 	bl	8014788 <sin>
 8010b98:	ec51 0b10 	vmov	r0, r1, d0
 8010b9c:	f04f 0200 	mov.w	r2, #0
 8010ba0:	4b34      	ldr	r3, [pc, #208]	; (8010c74 <main+0x364>)
 8010ba2:	f7f7 fc61 	bl	8008468 <__aeabi_dmul>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	460c      	mov	r4, r1
 8010baa:	4618      	mov	r0, r3
 8010bac:	4621      	mov	r1, r4
 8010bae:	f7f7 ff33 	bl	8008a18 <__aeabi_d2f>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	4b2d      	ldr	r3, [pc, #180]	; (8010c6c <main+0x35c>)
 8010bb6:	625a      	str	r2, [r3, #36]	; 0x24

		  phase += 10E-3 * 2 * M_PI * 0.2;
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f7f7 fbfd 	bl	80083b8 <__aeabi_f2d>
 8010bbe:	a31a      	add	r3, pc, #104	; (adr r3, 8010c28 <main+0x318>)
 8010bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc4:	f7f7 fa9a 	bl	80080fc <__adddf3>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	460c      	mov	r4, r1
 8010bcc:	4618      	mov	r0, r3
 8010bce:	4621      	mov	r1, r4
 8010bd0:	f7f7 ff22 	bl	8008a18 <__aeabi_d2f>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	60fb      	str	r3, [r7, #12]

		  if(phase > 2 * M_PI)
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f7f7 fbed 	bl	80083b8 <__aeabi_f2d>
 8010bde:	a314      	add	r3, pc, #80	; (adr r3, 8010c30 <main+0x320>)
 8010be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be4:	f7f7 fed0 	bl	8008988 <__aeabi_dcmpgt>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00f      	beq.n	8010c0e <main+0x2fe>
		  {
			  phase -= 2 * M_PI;
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f7f7 fbe2 	bl	80083b8 <__aeabi_f2d>
 8010bf4:	a30e      	add	r3, pc, #56	; (adr r3, 8010c30 <main+0x320>)
 8010bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfa:	f7f7 fa7d 	bl	80080f8 <__aeabi_dsub>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	460c      	mov	r4, r1
 8010c02:	4618      	mov	r0, r3
 8010c04:	4621      	mov	r1, r4
 8010c06:	f7f7 ff07 	bl	8008a18 <__aeabi_d2f>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	60fb      	str	r3, [r7, #12]
		  }

		  timing_10ms_flg = 0;
 8010c0e:	4b18      	ldr	r3, [pc, #96]	; (8010c70 <main+0x360>)
 8010c10:	2200      	movs	r2, #0
 8010c12:	701a      	strb	r2, [r3, #0]

	  }

	  APR_Refresh(&mainAPR);
 8010c14:	4818      	ldr	r0, [pc, #96]	; (8010c78 <main+0x368>)
 8010c16:	f7fd ff5b 	bl	800ead0 <APR_Refresh>

	  ASR_Refresh(&mainASR);
 8010c1a:	4814      	ldr	r0, [pc, #80]	; (8010c6c <main+0x35c>)
 8010c1c:	f7fe f89c 	bl	800ed58 <ASR_Refresh>
	  if(timing_10ms_flg == 1)
 8010c20:	e7ac      	b.n	8010b7c <main+0x26c>
 8010c22:	bf00      	nop
 8010c24:	f3af 8000 	nop.w
 8010c28:	b68b71c4 	.word	0xb68b71c4
 8010c2c:	3f89bc65 	.word	0x3f89bc65
 8010c30:	54442d18 	.word	0x54442d18
 8010c34:	401921fb 	.word	0x401921fb
 8010c38:	08015a80 	.word	0x08015a80
 8010c3c:	40020000 	.word	0x40020000
 8010c40:	20004474 	.word	0x20004474
 8010c44:	08015a88 	.word	0x08015a88
 8010c48:	08015ab0 	.word	0x08015ab0
 8010c4c:	08015ad8 	.word	0x08015ad8
 8010c50:	08015b00 	.word	0x08015b00
 8010c54:	08015b28 	.word	0x08015b28
 8010c58:	08015b50 	.word	0x08015b50
 8010c5c:	08015b78 	.word	0x08015b78
 8010c60:	40020400 	.word	0x40020400
 8010c64:	200043e4 	.word	0x200043e4
 8010c68:	200042d8 	.word	0x200042d8
 8010c6c:	200043a0 	.word	0x200043a0
 8010c70:	20004258 	.word	0x20004258
 8010c74:	40490000 	.word	0x40490000
 8010c78:	2000434c 	.word	0x2000434c

08010c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b094      	sub	sp, #80	; 0x50
 8010c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010c82:	f107 031c 	add.w	r3, r7, #28
 8010c86:	2234      	movs	r2, #52	; 0x34
 8010c88:	2100      	movs	r1, #0
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f001 f9f1 	bl	8012072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010c90:	f107 0308 	add.w	r3, r7, #8
 8010c94:	2200      	movs	r2, #0
 8010c96:	601a      	str	r2, [r3, #0]
 8010c98:	605a      	str	r2, [r3, #4]
 8010c9a:	609a      	str	r2, [r3, #8]
 8010c9c:	60da      	str	r2, [r3, #12]
 8010c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	607b      	str	r3, [r7, #4]
 8010ca4:	4b29      	ldr	r3, [pc, #164]	; (8010d4c <SystemClock_Config+0xd0>)
 8010ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ca8:	4a28      	ldr	r2, [pc, #160]	; (8010d4c <SystemClock_Config+0xd0>)
 8010caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cae:	6413      	str	r3, [r2, #64]	; 0x40
 8010cb0:	4b26      	ldr	r3, [pc, #152]	; (8010d4c <SystemClock_Config+0xd0>)
 8010cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cb8:	607b      	str	r3, [r7, #4]
 8010cba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	603b      	str	r3, [r7, #0]
 8010cc0:	4b23      	ldr	r3, [pc, #140]	; (8010d50 <SystemClock_Config+0xd4>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4a22      	ldr	r2, [pc, #136]	; (8010d50 <SystemClock_Config+0xd4>)
 8010cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010cca:	6013      	str	r3, [r2, #0]
 8010ccc:	4b20      	ldr	r3, [pc, #128]	; (8010d50 <SystemClock_Config+0xd4>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010cd4:	603b      	str	r3, [r7, #0]
 8010cd6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010cd8:	2302      	movs	r3, #2
 8010cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010ce0:	2310      	movs	r3, #16
 8010ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8010cec:	2310      	movs	r3, #16
 8010cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8010cf0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010cf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010cf6:	2302      	movs	r3, #2
 8010cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010cfa:	2302      	movs	r3, #2
 8010cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010cfe:	2302      	movs	r3, #2
 8010d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010d02:	f107 031c 	add.w	r3, r7, #28
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fa fd10 	bl	800b72c <HAL_RCC_OscConfig>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8010d12:	f000 f8af 	bl	8010e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010d16:	230f      	movs	r3, #15
 8010d18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010d1a:	2302      	movs	r3, #2
 8010d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010d22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010d26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010d2e:	f107 0308 	add.w	r3, r7, #8
 8010d32:	2105      	movs	r1, #5
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fa fa43 	bl	800b1c0 <HAL_RCC_ClockConfig>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8010d40:	f000 f898 	bl	8010e74 <Error_Handler>
  }
}
 8010d44:	bf00      	nop
 8010d46:	3750      	adds	r7, #80	; 0x50
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	40023800 	.word	0x40023800
 8010d50:	40007000 	.word	0x40007000

08010d54 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_SET);
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	2110      	movs	r1, #16
 8010d60:	4826      	ldr	r0, [pc, #152]	; (8010dfc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8010d62:	f7fa fa13 	bl	800b18c <HAL_GPIO_WritePin>

	if(htim->Instance == TIM8 && !__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a25      	ldr	r2, [pc, #148]	; (8010e00 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d13c      	bne.n	8010dea <HAL_TIM_PeriodElapsedCallback+0x96>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f003 0310 	and.w	r3, r3, #16
 8010d7a:	2b10      	cmp	r3, #16
 8010d7c:	d035      	beq.n	8010dea <HAL_TIM_PeriodElapsedCallback+0x96>
	{

		Encoder_Refresh(&mainEncoder);
 8010d7e:	4821      	ldr	r0, [pc, #132]	; (8010e04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8010d80:	f7ff fa72 	bl	8010268 <Encoder_Refresh>

		CurrentSensor_Refresh(&mainCS, sector_SVM);
 8010d84:	4b20      	ldr	r3, [pc, #128]	; (8010e08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	481f      	ldr	r0, [pc, #124]	; (8010e0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8010d8e:	f7fe f96b 	bl	800f068 <CurrentSensor_Refresh>

		ACR_Refresh(&mainACR);
 8010d92:	481f      	ldr	r0, [pc, #124]	; (8010e10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8010d94:	f7fd fb90 	bl	800e4b8 <ACR_Refresh>

		ASR_prescaler(&mainASR);
 8010d98:	481e      	ldr	r0, [pc, #120]	; (8010e14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8010d9a:	f7fd ffbe 	bl	800ed1a <ASR_prescaler>

		APR_prescaler(&mainAPR);
 8010d9e:	481e      	ldr	r0, [pc, #120]	; (8010e18 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8010da0:	f7fd fe7a 	bl	800ea98 <APR_prescaler>

		Encoder_Request(&mainEncoder);
 8010da4:	4817      	ldr	r0, [pc, #92]	; (8010e04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8010da6:	f7ff fa3b 	bl	8010220 <Encoder_Request>

		timing_10ms_count ++;
 8010daa:	4b1c      	ldr	r3, [pc, #112]	; (8010e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	3301      	adds	r3, #1
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	4b19      	ldr	r3, [pc, #100]	; (8010e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8010db6:	701a      	strb	r2, [r3, #0]

		if(timing_10ms_count >= 100)
 8010db8:	4b18      	ldr	r3, [pc, #96]	; (8010e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	b2db      	uxtb	r3, r3
 8010dbe:	2b63      	cmp	r3, #99	; 0x63
 8010dc0:	d905      	bls.n	8010dce <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
			timing_10ms_count = 0;
 8010dc2:	4b16      	ldr	r3, [pc, #88]	; (8010e1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	701a      	strb	r2, [r3, #0]
			timing_10ms_flg = 1;
 8010dc8:	4b15      	ldr	r3, [pc, #84]	; (8010e20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	701a      	strb	r2, [r3, #0]
		}

		// timeout control
		if(timeoutCount < TIMEOUT_MS * TIMEOUT_BASE_FREQ / 1000)
 8010dce:	4b15      	ldr	r3, [pc, #84]	; (8010e24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010dd6:	d308      	bcc.n	8010dea <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			//timeoutCount += 1;
		}
		else
		{
			stopPWM(&htim8);
 8010dd8:	4813      	ldr	r0, [pc, #76]	; (8010e28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8010dda:	f000 f88d 	bl	8010ef8 <stopPWM>
			timeoutCount = 0;
 8010dde:	4b11      	ldr	r3, [pc, #68]	; (8010e24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8010de0:	2200      	movs	r2, #0
 8010de2:	601a      	str	r2, [r3, #0]
			timeoutState = 1;
 8010de4:	4b11      	ldr	r3, [pc, #68]	; (8010e2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8010de6:	2201      	movs	r2, #1
 8010de8:	701a      	strb	r2, [r3, #0]
#endif


	}

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8010dea:	2200      	movs	r2, #0
 8010dec:	2110      	movs	r1, #16
 8010dee:	4803      	ldr	r0, [pc, #12]	; (8010dfc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8010df0:	f7fa f9cc 	bl	800b18c <HAL_GPIO_WritePin>

}
 8010df4:	bf00      	nop
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	40020400 	.word	0x40020400
 8010e00:	40010400 	.word	0x40010400
 8010e04:	2000470c 	.word	0x2000470c
 8010e08:	20004270 	.word	0x20004270
 8010e0c:	200043e4 	.word	0x200043e4
 8010e10:	200042d8 	.word	0x200042d8
 8010e14:	200043a0 	.word	0x200043a0
 8010e18:	2000434c 	.word	0x2000434c
 8010e1c:	20004259 	.word	0x20004259
 8010e20:	20004258 	.word	0x20004258
 8010e24:	2000425c 	.word	0x2000425c
 8010e28:	20004808 	.word	0x20004808
 8010e2c:	20004260 	.word	0x20004260

08010e30 <timeoutReset>:



inline void timeoutReset()
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8010e34:	4b0a      	ldr	r3, [pc, #40]	; (8010e60 <timeoutReset+0x30>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 8010e3a:	4b0a      	ldr	r3, [pc, #40]	; (8010e64 <timeoutReset+0x34>)
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d10b      	bne.n	8010e5c <timeoutReset+0x2c>
	{
		timeoutState = 0;
 8010e44:	4b07      	ldr	r3, [pc, #28]	; (8010e64 <timeoutReset+0x34>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	701a      	strb	r2, [r3, #0]
		ASR_Reset(&mainASR);
 8010e4a:	4807      	ldr	r0, [pc, #28]	; (8010e68 <timeoutReset+0x38>)
 8010e4c:	f7fe f896 	bl	800ef7c <ASR_Reset>
		ACR_Reset(&mainACR);
 8010e50:	4806      	ldr	r0, [pc, #24]	; (8010e6c <timeoutReset+0x3c>)
 8010e52:	f7fd fdb9 	bl	800e9c8 <ACR_Reset>
		startPWM(&htim8);
 8010e56:	4806      	ldr	r0, [pc, #24]	; (8010e70 <timeoutReset+0x40>)
 8010e58:	f000 f82e 	bl	8010eb8 <startPWM>
	}
}
 8010e5c:	bf00      	nop
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	2000425c 	.word	0x2000425c
 8010e64:	20004260 	.word	0x20004260
 8010e68:	200043a0 	.word	0x200043a0
 8010e6c:	200042d8 	.word	0x200042d8
 8010e70:	20004808 	.word	0x20004808

08010e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010e74:	b480      	push	{r7}
 8010e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8010e78:	bf00      	nop
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
	...

08010e84 <PWM_Init>:

volatile int sector_SVM = 0;


void PWM_Init()
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8010e88:	4b0a      	ldr	r3, [pc, #40]	; (8010eb4 <PWM_Init+0x30>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f06f 0201 	mvn.w	r2, #1
 8010e90:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8010e92:	4b08      	ldr	r3, [pc, #32]	; (8010eb4 <PWM_Init+0x30>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	68da      	ldr	r2, [r3, #12]
 8010e98:	4b06      	ldr	r3, [pc, #24]	; (8010eb4 <PWM_Init+0x30>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f042 0201 	orr.w	r2, r2, #1
 8010ea0:	60da      	str	r2, [r3, #12]


	HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	4803      	ldr	r0, [pc, #12]	; (8010eb4 <PWM_Init+0x30>)
 8010ea6:	f7fb ff95 	bl	800cdd4 <HAL_TIM_GenerateEvent>
	//HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);


	startPWM(&htim8);
 8010eaa:	4802      	ldr	r0, [pc, #8]	; (8010eb4 <PWM_Init+0x30>)
 8010eac:	f000 f804 	bl	8010eb8 <startPWM>

}
 8010eb0:	bf00      	nop
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	20004808 	.word	0x20004808

08010eb8 <startPWM>:


inline void startPWM(TIM_HandleTypeDef *htim)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7fb fc9a 	bl	800c7fc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 8010ec8:	2104      	movs	r1, #4
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7fb fc96 	bl	800c7fc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 8010ed0:	2108      	movs	r1, #8
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7fb fc92 	bl	800c7fc <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_1);
 8010ed8:	2100      	movs	r1, #0
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7fc fb8f 	bl	800d5fe <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_2);
 8010ee0:	2104      	movs	r1, #4
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7fc fb8b 	bl	800d5fe <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_3);
 8010ee8:	2108      	movs	r1, #8
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7fc fb87 	bl	800d5fe <HAL_TIMEx_PWMN_Start_IT>

}
 8010ef0:	bf00      	nop
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <stopPWM>:



inline void stopPWM(TIM_HandleTypeDef *htim)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8010f00:	2100      	movs	r1, #0
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7fb fcfe 	bl	800c904 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 8010f08:	2104      	movs	r1, #4
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f7fb fcfa 	bl	800c904 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_3);
 8010f10:	2108      	movs	r1, #8
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f7fb fcf6 	bl	800c904 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_1);
 8010f18:	2100      	movs	r1, #0
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7fc fbc4 	bl	800d6a8 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_2);
 8010f20:	2104      	movs	r1, #4
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f7fc fbc0 	bl	800d6a8 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_3);
 8010f28:	2108      	movs	r1, #8
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f7fc fbbc 	bl	800d6a8 <HAL_TIMEx_PWMN_Stop_IT>

}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <setSVM_dq>:


inline void setSVM_dq(TIM_HandleTypeDef *htim, float Vd_ref, float Vq_ref, float cos_theta_re, float sin_theta_re)
{
 8010f38:	b5b0      	push	{r4, r5, r7, lr}
 8010f3a:	b086      	sub	sp, #24
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6178      	str	r0, [r7, #20]
 8010f40:	ed87 0a04 	vstr	s0, [r7, #16]
 8010f44:	edc7 0a03 	vstr	s1, [r7, #12]
 8010f48:	ed87 1a02 	vstr	s2, [r7, #8]
 8010f4c:	edc7 1a01 	vstr	s3, [r7, #4]
	static float x1, y1, x2, y2;
	static float x, y;
	static float vect1, vect2;


	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 8010f50:	ed97 7a04 	vldr	s14, [r7, #16]
 8010f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8010f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f5c:	edd7 6a03 	vldr	s13, [r7, #12]
 8010f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8010f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f6c:	4bad      	ldr	r3, [pc, #692]	; (8011224 <setSVM_dq+0x2ec>)
 8010f6e:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 8010f72:	ed97 7a04 	vldr	s14, [r7, #16]
 8010f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8010f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f7e:	edd7 6a03 	vldr	s13, [r7, #12]
 8010f82:	edd7 7a02 	vldr	s15, [r7, #8]
 8010f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f8e:	4ba6      	ldr	r3, [pc, #664]	; (8011228 <setSVM_dq+0x2f0>)
 8010f90:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 8010f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f98:	4ba3      	ldr	r3, [pc, #652]	; (8011228 <setSVM_dq+0x2f0>)
 8010f9a:	edd3 7a00 	vldr	s15, [r3]
 8010f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010fa2:	eddf 6aa2 	vldr	s13, [pc, #648]	; 801122c <setSVM_dq+0x2f4>
 8010fa6:	4b9f      	ldr	r3, [pc, #636]	; (8011224 <setSVM_dq+0x2ec>)
 8010fa8:	edd3 7a00 	vldr	s15, [r3]
 8010fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fb4:	4b9e      	ldr	r3, [pc, #632]	; (8011230 <setSVM_dq+0x2f8>)
 8010fb6:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8010fba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010fbe:	4b9a      	ldr	r3, [pc, #616]	; (8011228 <setSVM_dq+0x2f0>)
 8010fc0:	edd3 7a00 	vldr	s15, [r3]
 8010fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010fc8:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8011234 <setSVM_dq+0x2fc>
 8010fcc:	4b95      	ldr	r3, [pc, #596]	; (8011224 <setSVM_dq+0x2ec>)
 8010fce:	edd3 7a00 	vldr	s15, [r3]
 8010fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fda:	4b97      	ldr	r3, [pc, #604]	; (8011238 <setSVM_dq+0x300>)
 8010fdc:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8010fe0:	4b93      	ldr	r3, [pc, #588]	; (8011230 <setSVM_dq+0x2f8>)
 8010fe2:	edd3 7a00 	vldr	s15, [r3]
 8010fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fee:	db1e      	blt.n	801102e <setSVM_dq+0xf6>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8010ff0:	4b91      	ldr	r3, [pc, #580]	; (8011238 <setSVM_dq+0x300>)
 8010ff2:	edd3 7a00 	vldr	s15, [r3]
 8010ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffe:	d803      	bhi.n	8011008 <setSVM_dq+0xd0>
 8011000:	4b8e      	ldr	r3, [pc, #568]	; (801123c <setSVM_dq+0x304>)
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]
 8011006:	e030      	b.n	801106a <setSVM_dq+0x132>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8011008:	4b89      	ldr	r3, [pc, #548]	; (8011230 <setSVM_dq+0x2f8>)
 801100a:	ed93 7a00 	vldr	s14, [r3]
 801100e:	4b8a      	ldr	r3, [pc, #552]	; (8011238 <setSVM_dq+0x300>)
 8011010:	edd3 7a00 	vldr	s15, [r3]
 8011014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101c:	db03      	blt.n	8011026 <setSVM_dq+0xee>
 801101e:	4b87      	ldr	r3, [pc, #540]	; (801123c <setSVM_dq+0x304>)
 8011020:	2201      	movs	r2, #1
 8011022:	601a      	str	r2, [r3, #0]
 8011024:	e021      	b.n	801106a <setSVM_dq+0x132>
		else						sector_SVM = 2;
 8011026:	4b85      	ldr	r3, [pc, #532]	; (801123c <setSVM_dq+0x304>)
 8011028:	2202      	movs	r2, #2
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	e01d      	b.n	801106a <setSVM_dq+0x132>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 801102e:	4b82      	ldr	r3, [pc, #520]	; (8011238 <setSVM_dq+0x300>)
 8011030:	edd3 7a00 	vldr	s15, [r3]
 8011034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	db03      	blt.n	8011046 <setSVM_dq+0x10e>
 801103e:	4b7f      	ldr	r3, [pc, #508]	; (801123c <setSVM_dq+0x304>)
 8011040:	2203      	movs	r2, #3
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	e011      	b.n	801106a <setSVM_dq+0x132>
		else if(cross0 <= cross1)	sector_SVM = 4;
 8011046:	4b7a      	ldr	r3, [pc, #488]	; (8011230 <setSVM_dq+0x2f8>)
 8011048:	ed93 7a00 	vldr	s14, [r3]
 801104c:	4b7a      	ldr	r3, [pc, #488]	; (8011238 <setSVM_dq+0x300>)
 801104e:	edd3 7a00 	vldr	s15, [r3]
 8011052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105a:	d803      	bhi.n	8011064 <setSVM_dq+0x12c>
 801105c:	4b77      	ldr	r3, [pc, #476]	; (801123c <setSVM_dq+0x304>)
 801105e:	2204      	movs	r2, #4
 8011060:	601a      	str	r2, [r3, #0]
 8011062:	e002      	b.n	801106a <setSVM_dq+0x132>
		else						sector_SVM = 5;
 8011064:	4b75      	ldr	r3, [pc, #468]	; (801123c <setSVM_dq+0x304>)
 8011066:	2205      	movs	r2, #5
 8011068:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 801106a:	4b74      	ldr	r3, [pc, #464]	; (801123c <setSVM_dq+0x304>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4a74      	ldr	r2, [pc, #464]	; (8011240 <setSVM_dq+0x308>)
 8011070:	00db      	lsls	r3, r3, #3
 8011072:	4413      	add	r3, r2
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4a73      	ldr	r2, [pc, #460]	; (8011244 <setSVM_dq+0x30c>)
 8011078:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 801107a:	4b70      	ldr	r3, [pc, #448]	; (801123c <setSVM_dq+0x304>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	4a70      	ldr	r2, [pc, #448]	; (8011240 <setSVM_dq+0x308>)
 8011080:	00db      	lsls	r3, r3, #3
 8011082:	4413      	add	r3, r2
 8011084:	3304      	adds	r3, #4
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4a6f      	ldr	r2, [pc, #444]	; (8011248 <setSVM_dq+0x310>)
 801108a:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 801108c:	4b6b      	ldr	r3, [pc, #428]	; (801123c <setSVM_dq+0x304>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3301      	adds	r3, #1
 8011092:	4a6b      	ldr	r2, [pc, #428]	; (8011240 <setSVM_dq+0x308>)
 8011094:	00db      	lsls	r3, r3, #3
 8011096:	4413      	add	r3, r2
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4a6c      	ldr	r2, [pc, #432]	; (801124c <setSVM_dq+0x314>)
 801109c:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 801109e:	4b67      	ldr	r3, [pc, #412]	; (801123c <setSVM_dq+0x304>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	3301      	adds	r3, #1
 80110a4:	4a66      	ldr	r2, [pc, #408]	; (8011240 <setSVM_dq+0x308>)
 80110a6:	00db      	lsls	r3, r3, #3
 80110a8:	4413      	add	r3, r2
 80110aa:	3304      	adds	r3, #4
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4a68      	ldr	r2, [pc, #416]	; (8011250 <setSVM_dq+0x318>)
 80110b0:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 80110b2:	4b67      	ldr	r3, [pc, #412]	; (8011250 <setSVM_dq+0x318>)
 80110b4:	ed93 7a00 	vldr	s14, [r3]
 80110b8:	4b5a      	ldr	r3, [pc, #360]	; (8011224 <setSVM_dq+0x2ec>)
 80110ba:	edd3 7a00 	vldr	s15, [r3]
 80110be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110c2:	4b62      	ldr	r3, [pc, #392]	; (801124c <setSVM_dq+0x314>)
 80110c4:	edd3 6a00 	vldr	s13, [r3]
 80110c8:	4b57      	ldr	r3, [pc, #348]	; (8011228 <setSVM_dq+0x2f0>)
 80110ca:	edd3 7a00 	vldr	s15, [r3]
 80110ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80110d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80110d6:	4b5b      	ldr	r3, [pc, #364]	; (8011244 <setSVM_dq+0x30c>)
 80110d8:	ed93 7a00 	vldr	s14, [r3]
 80110dc:	4b5c      	ldr	r3, [pc, #368]	; (8011250 <setSVM_dq+0x318>)
 80110de:	edd3 7a00 	vldr	s15, [r3]
 80110e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110e6:	4b58      	ldr	r3, [pc, #352]	; (8011248 <setSVM_dq+0x310>)
 80110e8:	ed93 6a00 	vldr	s12, [r3]
 80110ec:	4b57      	ldr	r3, [pc, #348]	; (801124c <setSVM_dq+0x314>)
 80110ee:	edd3 7a00 	vldr	s15, [r3]
 80110f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80110f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110fa:	4b56      	ldr	r3, [pc, #344]	; (8011254 <setSVM_dq+0x31c>)
 80110fc:	edd3 7a00 	vldr	s15, [r3]
 8011100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011108:	4b53      	ldr	r3, [pc, #332]	; (8011258 <setSVM_dq+0x320>)
 801110a:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 801110e:	4b4e      	ldr	r3, [pc, #312]	; (8011248 <setSVM_dq+0x310>)
 8011110:	edd3 7a00 	vldr	s15, [r3]
 8011114:	eeb1 7a67 	vneg.f32	s14, s15
 8011118:	4b42      	ldr	r3, [pc, #264]	; (8011224 <setSVM_dq+0x2ec>)
 801111a:	edd3 7a00 	vldr	s15, [r3]
 801111e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011122:	4b48      	ldr	r3, [pc, #288]	; (8011244 <setSVM_dq+0x30c>)
 8011124:	edd3 6a00 	vldr	s13, [r3]
 8011128:	4b3f      	ldr	r3, [pc, #252]	; (8011228 <setSVM_dq+0x2f0>)
 801112a:	edd3 7a00 	vldr	s15, [r3]
 801112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011132:	ee77 6a27 	vadd.f32	s13, s14, s15
 8011136:	4b43      	ldr	r3, [pc, #268]	; (8011244 <setSVM_dq+0x30c>)
 8011138:	ed93 7a00 	vldr	s14, [r3]
 801113c:	4b44      	ldr	r3, [pc, #272]	; (8011250 <setSVM_dq+0x318>)
 801113e:	edd3 7a00 	vldr	s15, [r3]
 8011142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011146:	4b40      	ldr	r3, [pc, #256]	; (8011248 <setSVM_dq+0x310>)
 8011148:	ed93 6a00 	vldr	s12, [r3]
 801114c:	4b3f      	ldr	r3, [pc, #252]	; (801124c <setSVM_dq+0x314>)
 801114e:	edd3 7a00 	vldr	s15, [r3]
 8011152:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011156:	ee37 7a67 	vsub.f32	s14, s14, s15
 801115a:	4b3e      	ldr	r3, [pc, #248]	; (8011254 <setSVM_dq+0x31c>)
 801115c:	edd3 7a00 	vldr	s15, [r3]
 8011160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011168:	4b3c      	ldr	r3, [pc, #240]	; (801125c <setSVM_dq+0x324>)
 801116a:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 801116e:	4b33      	ldr	r3, [pc, #204]	; (801123c <setSVM_dq+0x304>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b05      	cmp	r3, #5
 8011174:	f200 81d8 	bhi.w	8011528 <setSVM_dq+0x5f0>
 8011178:	a201      	add	r2, pc, #4	; (adr r2, 8011180 <setSVM_dq+0x248>)
 801117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801117e:	bf00      	nop
 8011180:	08011199 	.word	0x08011199
 8011184:	0801126d 	.word	0x0801126d
 8011188:	080112f9 	.word	0x080112f9
 801118c:	08011385 	.word	0x08011385
 8011190:	08011411 	.word	0x08011411
 8011194:	0801149d 	.word	0x0801149d
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8011198:	4b2f      	ldr	r3, [pc, #188]	; (8011258 <setSVM_dq+0x320>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4618      	mov	r0, r3
 801119e:	f7f7 f90b 	bl	80083b8 <__aeabi_f2d>
 80111a2:	4603      	mov	r3, r0
 80111a4:	460c      	mov	r4, r1
 80111a6:	461a      	mov	r2, r3
 80111a8:	4623      	mov	r3, r4
 80111aa:	f04f 0000 	mov.w	r0, #0
 80111ae:	492c      	ldr	r1, [pc, #176]	; (8011260 <setSVM_dq+0x328>)
 80111b0:	f7f6 ffa2 	bl	80080f8 <__aeabi_dsub>
 80111b4:	4603      	mov	r3, r0
 80111b6:	460c      	mov	r4, r1
 80111b8:	4625      	mov	r5, r4
 80111ba:	461c      	mov	r4, r3
 80111bc:	4b27      	ldr	r3, [pc, #156]	; (801125c <setSVM_dq+0x324>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7f7 f8f9 	bl	80083b8 <__aeabi_f2d>
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	4620      	mov	r0, r4
 80111cc:	4629      	mov	r1, r5
 80111ce:	f7f6 ff93 	bl	80080f8 <__aeabi_dsub>
 80111d2:	4603      	mov	r3, r0
 80111d4:	460c      	mov	r4, r1
 80111d6:	4618      	mov	r0, r3
 80111d8:	4621      	mov	r1, r4
 80111da:	f04f 0200 	mov.w	r2, #0
 80111de:	4b21      	ldr	r3, [pc, #132]	; (8011264 <setSVM_dq+0x32c>)
 80111e0:	f7f7 f942 	bl	8008468 <__aeabi_dmul>
 80111e4:	4603      	mov	r3, r0
 80111e6:	460c      	mov	r4, r1
 80111e8:	4618      	mov	r0, r3
 80111ea:	4621      	mov	r1, r4
 80111ec:	f7f7 fc14 	bl	8008a18 <__aeabi_d2f>
 80111f0:	4602      	mov	r2, r0
 80111f2:	4b1d      	ldr	r3, [pc, #116]	; (8011268 <setSVM_dq+0x330>)
 80111f4:	609a      	str	r2, [r3, #8]
 80111f6:	4b1c      	ldr	r3, [pc, #112]	; (8011268 <setSVM_dq+0x330>)
 80111f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80111fc:	4b17      	ldr	r3, [pc, #92]	; (801125c <setSVM_dq+0x324>)
 80111fe:	edd3 7a00 	vldr	s15, [r3]
 8011202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011206:	4b18      	ldr	r3, [pc, #96]	; (8011268 <setSVM_dq+0x330>)
 8011208:	edc3 7a01 	vstr	s15, [r3, #4]
 801120c:	4b16      	ldr	r3, [pc, #88]	; (8011268 <setSVM_dq+0x330>)
 801120e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011212:	4b11      	ldr	r3, [pc, #68]	; (8011258 <setSVM_dq+0x320>)
 8011214:	edd3 7a00 	vldr	s15, [r3]
 8011218:	ee77 7a27 	vadd.f32	s15, s14, s15
 801121c:	4b12      	ldr	r3, [pc, #72]	; (8011268 <setSVM_dq+0x330>)
 801121e:	edc3 7a00 	vstr	s15, [r3]
 8011222:	e181      	b.n	8011528 <setSVM_dq+0x5f0>
 8011224:	20004274 	.word	0x20004274
 8011228:	20004278 	.word	0x20004278
 801122c:	00000000 	.word	0x00000000
 8011230:	2000427c 	.word	0x2000427c
 8011234:	3f5db22d 	.word	0x3f5db22d
 8011238:	20004280 	.word	0x20004280
 801123c:	20004270 	.word	0x20004270
 8011240:	08015ba8 	.word	0x08015ba8
 8011244:	20004284 	.word	0x20004284
 8011248:	20004288 	.word	0x20004288
 801124c:	2000428c 	.word	0x2000428c
 8011250:	20004290 	.word	0x20004290
 8011254:	20000008 	.word	0x20000008
 8011258:	20004294 	.word	0x20004294
 801125c:	20004298 	.word	0x20004298
 8011260:	3ff00000 	.word	0x3ff00000
 8011264:	3fe00000 	.word	0x3fe00000
 8011268:	2000429c 	.word	0x2000429c
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 801126c:	4bc3      	ldr	r3, [pc, #780]	; (801157c <setSVM_dq+0x644>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4618      	mov	r0, r3
 8011272:	f7f7 f8a1 	bl	80083b8 <__aeabi_f2d>
 8011276:	4603      	mov	r3, r0
 8011278:	460c      	mov	r4, r1
 801127a:	461a      	mov	r2, r3
 801127c:	4623      	mov	r3, r4
 801127e:	f04f 0000 	mov.w	r0, #0
 8011282:	49bf      	ldr	r1, [pc, #764]	; (8011580 <setSVM_dq+0x648>)
 8011284:	f7f6 ff38 	bl	80080f8 <__aeabi_dsub>
 8011288:	4603      	mov	r3, r0
 801128a:	460c      	mov	r4, r1
 801128c:	4625      	mov	r5, r4
 801128e:	461c      	mov	r4, r3
 8011290:	4bbc      	ldr	r3, [pc, #752]	; (8011584 <setSVM_dq+0x64c>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4618      	mov	r0, r3
 8011296:	f7f7 f88f 	bl	80083b8 <__aeabi_f2d>
 801129a:	4602      	mov	r2, r0
 801129c:	460b      	mov	r3, r1
 801129e:	4620      	mov	r0, r4
 80112a0:	4629      	mov	r1, r5
 80112a2:	f7f6 ff29 	bl	80080f8 <__aeabi_dsub>
 80112a6:	4603      	mov	r3, r0
 80112a8:	460c      	mov	r4, r1
 80112aa:	4618      	mov	r0, r3
 80112ac:	4621      	mov	r1, r4
 80112ae:	f04f 0200 	mov.w	r2, #0
 80112b2:	4bb5      	ldr	r3, [pc, #724]	; (8011588 <setSVM_dq+0x650>)
 80112b4:	f7f7 f8d8 	bl	8008468 <__aeabi_dmul>
 80112b8:	4603      	mov	r3, r0
 80112ba:	460c      	mov	r4, r1
 80112bc:	4618      	mov	r0, r3
 80112be:	4621      	mov	r1, r4
 80112c0:	f7f7 fbaa 	bl	8008a18 <__aeabi_d2f>
 80112c4:	4602      	mov	r2, r0
 80112c6:	4bb1      	ldr	r3, [pc, #708]	; (801158c <setSVM_dq+0x654>)
 80112c8:	609a      	str	r2, [r3, #8]
 80112ca:	4bb0      	ldr	r3, [pc, #704]	; (801158c <setSVM_dq+0x654>)
 80112cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80112d0:	4baa      	ldr	r3, [pc, #680]	; (801157c <setSVM_dq+0x644>)
 80112d2:	edd3 7a00 	vldr	s15, [r3]
 80112d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112da:	4bac      	ldr	r3, [pc, #688]	; (801158c <setSVM_dq+0x654>)
 80112dc:	edc3 7a00 	vstr	s15, [r3]
 80112e0:	4baa      	ldr	r3, [pc, #680]	; (801158c <setSVM_dq+0x654>)
 80112e2:	ed93 7a00 	vldr	s14, [r3]
 80112e6:	4ba7      	ldr	r3, [pc, #668]	; (8011584 <setSVM_dq+0x64c>)
 80112e8:	edd3 7a00 	vldr	s15, [r3]
 80112ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112f0:	4ba6      	ldr	r3, [pc, #664]	; (801158c <setSVM_dq+0x654>)
 80112f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80112f6:	e117      	b.n	8011528 <setSVM_dq+0x5f0>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 80112f8:	4ba0      	ldr	r3, [pc, #640]	; (801157c <setSVM_dq+0x644>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f7 f85b 	bl	80083b8 <__aeabi_f2d>
 8011302:	4603      	mov	r3, r0
 8011304:	460c      	mov	r4, r1
 8011306:	461a      	mov	r2, r3
 8011308:	4623      	mov	r3, r4
 801130a:	f04f 0000 	mov.w	r0, #0
 801130e:	499c      	ldr	r1, [pc, #624]	; (8011580 <setSVM_dq+0x648>)
 8011310:	f7f6 fef2 	bl	80080f8 <__aeabi_dsub>
 8011314:	4603      	mov	r3, r0
 8011316:	460c      	mov	r4, r1
 8011318:	4625      	mov	r5, r4
 801131a:	461c      	mov	r4, r3
 801131c:	4b99      	ldr	r3, [pc, #612]	; (8011584 <setSVM_dq+0x64c>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4618      	mov	r0, r3
 8011322:	f7f7 f849 	bl	80083b8 <__aeabi_f2d>
 8011326:	4602      	mov	r2, r0
 8011328:	460b      	mov	r3, r1
 801132a:	4620      	mov	r0, r4
 801132c:	4629      	mov	r1, r5
 801132e:	f7f6 fee3 	bl	80080f8 <__aeabi_dsub>
 8011332:	4603      	mov	r3, r0
 8011334:	460c      	mov	r4, r1
 8011336:	4618      	mov	r0, r3
 8011338:	4621      	mov	r1, r4
 801133a:	f04f 0200 	mov.w	r2, #0
 801133e:	4b92      	ldr	r3, [pc, #584]	; (8011588 <setSVM_dq+0x650>)
 8011340:	f7f7 f892 	bl	8008468 <__aeabi_dmul>
 8011344:	4603      	mov	r3, r0
 8011346:	460c      	mov	r4, r1
 8011348:	4618      	mov	r0, r3
 801134a:	4621      	mov	r1, r4
 801134c:	f7f7 fb64 	bl	8008a18 <__aeabi_d2f>
 8011350:	4602      	mov	r2, r0
 8011352:	4b8e      	ldr	r3, [pc, #568]	; (801158c <setSVM_dq+0x654>)
 8011354:	601a      	str	r2, [r3, #0]
 8011356:	4b8d      	ldr	r3, [pc, #564]	; (801158c <setSVM_dq+0x654>)
 8011358:	ed93 7a00 	vldr	s14, [r3]
 801135c:	4b89      	ldr	r3, [pc, #548]	; (8011584 <setSVM_dq+0x64c>)
 801135e:	edd3 7a00 	vldr	s15, [r3]
 8011362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011366:	4b89      	ldr	r3, [pc, #548]	; (801158c <setSVM_dq+0x654>)
 8011368:	edc3 7a02 	vstr	s15, [r3, #8]
 801136c:	4b87      	ldr	r3, [pc, #540]	; (801158c <setSVM_dq+0x654>)
 801136e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011372:	4b82      	ldr	r3, [pc, #520]	; (801157c <setSVM_dq+0x644>)
 8011374:	edd3 7a00 	vldr	s15, [r3]
 8011378:	ee77 7a27 	vadd.f32	s15, s14, s15
 801137c:	4b83      	ldr	r3, [pc, #524]	; (801158c <setSVM_dq+0x654>)
 801137e:	edc3 7a01 	vstr	s15, [r3, #4]
 8011382:	e0d1      	b.n	8011528 <setSVM_dq+0x5f0>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 8011384:	4b7d      	ldr	r3, [pc, #500]	; (801157c <setSVM_dq+0x644>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4618      	mov	r0, r3
 801138a:	f7f7 f815 	bl	80083b8 <__aeabi_f2d>
 801138e:	4603      	mov	r3, r0
 8011390:	460c      	mov	r4, r1
 8011392:	461a      	mov	r2, r3
 8011394:	4623      	mov	r3, r4
 8011396:	f04f 0000 	mov.w	r0, #0
 801139a:	4979      	ldr	r1, [pc, #484]	; (8011580 <setSVM_dq+0x648>)
 801139c:	f7f6 feac 	bl	80080f8 <__aeabi_dsub>
 80113a0:	4603      	mov	r3, r0
 80113a2:	460c      	mov	r4, r1
 80113a4:	4625      	mov	r5, r4
 80113a6:	461c      	mov	r4, r3
 80113a8:	4b76      	ldr	r3, [pc, #472]	; (8011584 <setSVM_dq+0x64c>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7f7 f803 	bl	80083b8 <__aeabi_f2d>
 80113b2:	4602      	mov	r2, r0
 80113b4:	460b      	mov	r3, r1
 80113b6:	4620      	mov	r0, r4
 80113b8:	4629      	mov	r1, r5
 80113ba:	f7f6 fe9d 	bl	80080f8 <__aeabi_dsub>
 80113be:	4603      	mov	r3, r0
 80113c0:	460c      	mov	r4, r1
 80113c2:	4618      	mov	r0, r3
 80113c4:	4621      	mov	r1, r4
 80113c6:	f04f 0200 	mov.w	r2, #0
 80113ca:	4b6f      	ldr	r3, [pc, #444]	; (8011588 <setSVM_dq+0x650>)
 80113cc:	f7f7 f84c 	bl	8008468 <__aeabi_dmul>
 80113d0:	4603      	mov	r3, r0
 80113d2:	460c      	mov	r4, r1
 80113d4:	4618      	mov	r0, r3
 80113d6:	4621      	mov	r1, r4
 80113d8:	f7f7 fb1e 	bl	8008a18 <__aeabi_d2f>
 80113dc:	4602      	mov	r2, r0
 80113de:	4b6b      	ldr	r3, [pc, #428]	; (801158c <setSVM_dq+0x654>)
 80113e0:	601a      	str	r2, [r3, #0]
 80113e2:	4b6a      	ldr	r3, [pc, #424]	; (801158c <setSVM_dq+0x654>)
 80113e4:	ed93 7a00 	vldr	s14, [r3]
 80113e8:	4b64      	ldr	r3, [pc, #400]	; (801157c <setSVM_dq+0x644>)
 80113ea:	edd3 7a00 	vldr	s15, [r3]
 80113ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113f2:	4b66      	ldr	r3, [pc, #408]	; (801158c <setSVM_dq+0x654>)
 80113f4:	edc3 7a01 	vstr	s15, [r3, #4]
 80113f8:	4b64      	ldr	r3, [pc, #400]	; (801158c <setSVM_dq+0x654>)
 80113fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80113fe:	4b61      	ldr	r3, [pc, #388]	; (8011584 <setSVM_dq+0x64c>)
 8011400:	edd3 7a00 	vldr	s15, [r3]
 8011404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011408:	4b60      	ldr	r3, [pc, #384]	; (801158c <setSVM_dq+0x654>)
 801140a:	edc3 7a02 	vstr	s15, [r3, #8]
 801140e:	e08b      	b.n	8011528 <setSVM_dq+0x5f0>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8011410:	4b5a      	ldr	r3, [pc, #360]	; (801157c <setSVM_dq+0x644>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	4618      	mov	r0, r3
 8011416:	f7f6 ffcf 	bl	80083b8 <__aeabi_f2d>
 801141a:	4603      	mov	r3, r0
 801141c:	460c      	mov	r4, r1
 801141e:	461a      	mov	r2, r3
 8011420:	4623      	mov	r3, r4
 8011422:	f04f 0000 	mov.w	r0, #0
 8011426:	4956      	ldr	r1, [pc, #344]	; (8011580 <setSVM_dq+0x648>)
 8011428:	f7f6 fe66 	bl	80080f8 <__aeabi_dsub>
 801142c:	4603      	mov	r3, r0
 801142e:	460c      	mov	r4, r1
 8011430:	4625      	mov	r5, r4
 8011432:	461c      	mov	r4, r3
 8011434:	4b53      	ldr	r3, [pc, #332]	; (8011584 <setSVM_dq+0x64c>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4618      	mov	r0, r3
 801143a:	f7f6 ffbd 	bl	80083b8 <__aeabi_f2d>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	4620      	mov	r0, r4
 8011444:	4629      	mov	r1, r5
 8011446:	f7f6 fe57 	bl	80080f8 <__aeabi_dsub>
 801144a:	4603      	mov	r3, r0
 801144c:	460c      	mov	r4, r1
 801144e:	4618      	mov	r0, r3
 8011450:	4621      	mov	r1, r4
 8011452:	f04f 0200 	mov.w	r2, #0
 8011456:	4b4c      	ldr	r3, [pc, #304]	; (8011588 <setSVM_dq+0x650>)
 8011458:	f7f7 f806 	bl	8008468 <__aeabi_dmul>
 801145c:	4603      	mov	r3, r0
 801145e:	460c      	mov	r4, r1
 8011460:	4618      	mov	r0, r3
 8011462:	4621      	mov	r1, r4
 8011464:	f7f7 fad8 	bl	8008a18 <__aeabi_d2f>
 8011468:	4602      	mov	r2, r0
 801146a:	4b48      	ldr	r3, [pc, #288]	; (801158c <setSVM_dq+0x654>)
 801146c:	605a      	str	r2, [r3, #4]
 801146e:	4b47      	ldr	r3, [pc, #284]	; (801158c <setSVM_dq+0x654>)
 8011470:	ed93 7a01 	vldr	s14, [r3, #4]
 8011474:	4b43      	ldr	r3, [pc, #268]	; (8011584 <setSVM_dq+0x64c>)
 8011476:	edd3 7a00 	vldr	s15, [r3]
 801147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801147e:	4b43      	ldr	r3, [pc, #268]	; (801158c <setSVM_dq+0x654>)
 8011480:	edc3 7a00 	vstr	s15, [r3]
 8011484:	4b41      	ldr	r3, [pc, #260]	; (801158c <setSVM_dq+0x654>)
 8011486:	ed93 7a00 	vldr	s14, [r3]
 801148a:	4b3c      	ldr	r3, [pc, #240]	; (801157c <setSVM_dq+0x644>)
 801148c:	edd3 7a00 	vldr	s15, [r3]
 8011490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011494:	4b3d      	ldr	r3, [pc, #244]	; (801158c <setSVM_dq+0x654>)
 8011496:	edc3 7a02 	vstr	s15, [r3, #8]
 801149a:	e045      	b.n	8011528 <setSVM_dq+0x5f0>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 801149c:	4b37      	ldr	r3, [pc, #220]	; (801157c <setSVM_dq+0x644>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7f6 ff89 	bl	80083b8 <__aeabi_f2d>
 80114a6:	4603      	mov	r3, r0
 80114a8:	460c      	mov	r4, r1
 80114aa:	461a      	mov	r2, r3
 80114ac:	4623      	mov	r3, r4
 80114ae:	f04f 0000 	mov.w	r0, #0
 80114b2:	4933      	ldr	r1, [pc, #204]	; (8011580 <setSVM_dq+0x648>)
 80114b4:	f7f6 fe20 	bl	80080f8 <__aeabi_dsub>
 80114b8:	4603      	mov	r3, r0
 80114ba:	460c      	mov	r4, r1
 80114bc:	4625      	mov	r5, r4
 80114be:	461c      	mov	r4, r3
 80114c0:	4b30      	ldr	r3, [pc, #192]	; (8011584 <setSVM_dq+0x64c>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7f6 ff77 	bl	80083b8 <__aeabi_f2d>
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	4620      	mov	r0, r4
 80114d0:	4629      	mov	r1, r5
 80114d2:	f7f6 fe11 	bl	80080f8 <__aeabi_dsub>
 80114d6:	4603      	mov	r3, r0
 80114d8:	460c      	mov	r4, r1
 80114da:	4618      	mov	r0, r3
 80114dc:	4621      	mov	r1, r4
 80114de:	f04f 0200 	mov.w	r2, #0
 80114e2:	4b29      	ldr	r3, [pc, #164]	; (8011588 <setSVM_dq+0x650>)
 80114e4:	f7f6 ffc0 	bl	8008468 <__aeabi_dmul>
 80114e8:	4603      	mov	r3, r0
 80114ea:	460c      	mov	r4, r1
 80114ec:	4618      	mov	r0, r3
 80114ee:	4621      	mov	r1, r4
 80114f0:	f7f7 fa92 	bl	8008a18 <__aeabi_d2f>
 80114f4:	4602      	mov	r2, r0
 80114f6:	4b25      	ldr	r3, [pc, #148]	; (801158c <setSVM_dq+0x654>)
 80114f8:	605a      	str	r2, [r3, #4]
 80114fa:	4b24      	ldr	r3, [pc, #144]	; (801158c <setSVM_dq+0x654>)
 80114fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8011500:	4b1e      	ldr	r3, [pc, #120]	; (801157c <setSVM_dq+0x644>)
 8011502:	edd3 7a00 	vldr	s15, [r3]
 8011506:	ee77 7a27 	vadd.f32	s15, s14, s15
 801150a:	4b20      	ldr	r3, [pc, #128]	; (801158c <setSVM_dq+0x654>)
 801150c:	edc3 7a02 	vstr	s15, [r3, #8]
 8011510:	4b1e      	ldr	r3, [pc, #120]	; (801158c <setSVM_dq+0x654>)
 8011512:	ed93 7a02 	vldr	s14, [r3, #8]
 8011516:	4b1b      	ldr	r3, [pc, #108]	; (8011584 <setSVM_dq+0x64c>)
 8011518:	edd3 7a00 	vldr	s15, [r3]
 801151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011520:	4b1a      	ldr	r3, [pc, #104]	; (801158c <setSVM_dq+0x654>)
 8011522:	edc3 7a00 	vstr	s15, [r3]
 8011526:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8011528:	4b18      	ldr	r3, [pc, #96]	; (801158c <setSVM_dq+0x654>)
 801152a:	edd3 7a00 	vldr	s15, [r3]
 801152e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801153a:	d503      	bpl.n	8011544 <setSVM_dq+0x60c>
 801153c:	4b13      	ldr	r3, [pc, #76]	; (801158c <setSVM_dq+0x654>)
 801153e:	4a14      	ldr	r2, [pc, #80]	; (8011590 <setSVM_dq+0x658>)
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	e00d      	b.n	8011560 <setSVM_dq+0x628>
 8011544:	4b11      	ldr	r3, [pc, #68]	; (801158c <setSVM_dq+0x654>)
 8011546:	edd3 7a00 	vldr	s15, [r3]
 801154a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011556:	dd03      	ble.n	8011560 <setSVM_dq+0x628>
 8011558:	4b0c      	ldr	r3, [pc, #48]	; (801158c <setSVM_dq+0x654>)
 801155a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801155e:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8011560:	4b0a      	ldr	r3, [pc, #40]	; (801158c <setSVM_dq+0x654>)
 8011562:	edd3 7a01 	vldr	s15, [r3, #4]
 8011566:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801156a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011572:	d50f      	bpl.n	8011594 <setSVM_dq+0x65c>
 8011574:	4b05      	ldr	r3, [pc, #20]	; (801158c <setSVM_dq+0x654>)
 8011576:	4a06      	ldr	r2, [pc, #24]	; (8011590 <setSVM_dq+0x658>)
 8011578:	605a      	str	r2, [r3, #4]
 801157a:	e019      	b.n	80115b0 <setSVM_dq+0x678>
 801157c:	20004294 	.word	0x20004294
 8011580:	3ff00000 	.word	0x3ff00000
 8011584:	20004298 	.word	0x20004298
 8011588:	3fe00000 	.word	0x3fe00000
 801158c:	2000429c 	.word	0x2000429c
 8011590:	bf800000 	.word	0xbf800000
 8011594:	4b3c      	ldr	r3, [pc, #240]	; (8011688 <setSVM_dq+0x750>)
 8011596:	edd3 7a01 	vldr	s15, [r3, #4]
 801159a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a6:	dd03      	ble.n	80115b0 <setSVM_dq+0x678>
 80115a8:	4b37      	ldr	r3, [pc, #220]	; (8011688 <setSVM_dq+0x750>)
 80115aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80115ae:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 80115b0:	4b35      	ldr	r3, [pc, #212]	; (8011688 <setSVM_dq+0x750>)
 80115b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80115b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80115ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c2:	d503      	bpl.n	80115cc <setSVM_dq+0x694>
 80115c4:	4b30      	ldr	r3, [pc, #192]	; (8011688 <setSVM_dq+0x750>)
 80115c6:	4a31      	ldr	r2, [pc, #196]	; (801168c <setSVM_dq+0x754>)
 80115c8:	609a      	str	r2, [r3, #8]
 80115ca:	e00d      	b.n	80115e8 <setSVM_dq+0x6b0>
 80115cc:	4b2e      	ldr	r3, [pc, #184]	; (8011688 <setSVM_dq+0x750>)
 80115ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80115d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115de:	dd03      	ble.n	80115e8 <setSVM_dq+0x6b0>
 80115e0:	4b29      	ldr	r3, [pc, #164]	; (8011688 <setSVM_dq+0x750>)
 80115e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80115e6:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, htim->Init.Period * (1.0f - (amp_u = duty[0])));
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	ee07 3a90 	vmov	s15, r3
 80115f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80115f4:	4b24      	ldr	r3, [pc, #144]	; (8011688 <setSVM_dq+0x750>)
 80115f6:	edd3 7a00 	vldr	s15, [r3]
 80115fa:	4b25      	ldr	r3, [pc, #148]	; (8011690 <setSVM_dq+0x758>)
 80115fc:	edc3 7a00 	vstr	s15, [r3]
 8011600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011604:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011608:	ee67 7a27 	vmul.f32	s15, s14, s15
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011614:	ee17 2a90 	vmov	r2, s15
 8011618:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, htim->Init.Period * (1.0f - (amp_v = duty[1])));
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	ee07 3a90 	vmov	s15, r3
 8011622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011626:	4b18      	ldr	r3, [pc, #96]	; (8011688 <setSVM_dq+0x750>)
 8011628:	edd3 7a01 	vldr	s15, [r3, #4]
 801162c:	4b19      	ldr	r3, [pc, #100]	; (8011694 <setSVM_dq+0x75c>)
 801162e:	edc3 7a00 	vstr	s15, [r3]
 8011632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011636:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011646:	ee17 2a90 	vmov	r2, s15
 801164a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, htim->Init.Period * (1.0f - (amp_w = duty[2])));
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	ee07 3a90 	vmov	s15, r3
 8011654:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011658:	4b0b      	ldr	r3, [pc, #44]	; (8011688 <setSVM_dq+0x750>)
 801165a:	edd3 7a02 	vldr	s15, [r3, #8]
 801165e:	4b0e      	ldr	r3, [pc, #56]	; (8011698 <setSVM_dq+0x760>)
 8011660:	edc3 7a00 	vstr	s15, [r3]
 8011664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011668:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011678:	ee17 2a90 	vmov	r2, s15
 801167c:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 801167e:	bf00      	nop
}
 8011680:	3718      	adds	r7, #24
 8011682:	46bd      	mov	sp, r7
 8011684:	bdb0      	pop	{r4, r5, r7, pc}
 8011686:	bf00      	nop
 8011688:	2000429c 	.word	0x2000429c
 801168c:	bf800000 	.word	0xbf800000
 8011690:	20004264 	.word	0x20004264
 8011694:	20004268 	.word	0x20004268
 8011698:	2000426c 	.word	0x2000426c

0801169c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80116a0:	4b18      	ldr	r3, [pc, #96]	; (8011704 <MX_SPI2_Init+0x68>)
 80116a2:	4a19      	ldr	r2, [pc, #100]	; (8011708 <MX_SPI2_Init+0x6c>)
 80116a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80116a6:	4b17      	ldr	r3, [pc, #92]	; (8011704 <MX_SPI2_Init+0x68>)
 80116a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80116ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80116ae:	4b15      	ldr	r3, [pc, #84]	; (8011704 <MX_SPI2_Init+0x68>)
 80116b0:	2200      	movs	r2, #0
 80116b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80116b4:	4b13      	ldr	r3, [pc, #76]	; (8011704 <MX_SPI2_Init+0x68>)
 80116b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80116bc:	4b11      	ldr	r3, [pc, #68]	; (8011704 <MX_SPI2_Init+0x68>)
 80116be:	2200      	movs	r2, #0
 80116c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80116c2:	4b10      	ldr	r3, [pc, #64]	; (8011704 <MX_SPI2_Init+0x68>)
 80116c4:	2201      	movs	r2, #1
 80116c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80116c8:	4b0e      	ldr	r3, [pc, #56]	; (8011704 <MX_SPI2_Init+0x68>)
 80116ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80116ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80116d0:	4b0c      	ldr	r3, [pc, #48]	; (8011704 <MX_SPI2_Init+0x68>)
 80116d2:	2218      	movs	r2, #24
 80116d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80116d6:	4b0b      	ldr	r3, [pc, #44]	; (8011704 <MX_SPI2_Init+0x68>)
 80116d8:	2200      	movs	r2, #0
 80116da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80116dc:	4b09      	ldr	r3, [pc, #36]	; (8011704 <MX_SPI2_Init+0x68>)
 80116de:	2200      	movs	r2, #0
 80116e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80116e2:	4b08      	ldr	r3, [pc, #32]	; (8011704 <MX_SPI2_Init+0x68>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80116e8:	4b06      	ldr	r3, [pc, #24]	; (8011704 <MX_SPI2_Init+0x68>)
 80116ea:	220a      	movs	r2, #10
 80116ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80116ee:	4805      	ldr	r0, [pc, #20]	; (8011704 <MX_SPI2_Init+0x68>)
 80116f0:	f7fa fa76 	bl	800bbe0 <HAL_SPI_Init>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d001      	beq.n	80116fe <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80116fa:	f7ff fbbb 	bl	8010e74 <Error_Handler>
  }

}
 80116fe:	bf00      	nop
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	20004758 	.word	0x20004758
 8011708:	40003800 	.word	0x40003800

0801170c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8011710:	4b17      	ldr	r3, [pc, #92]	; (8011770 <MX_SPI3_Init+0x64>)
 8011712:	4a18      	ldr	r2, [pc, #96]	; (8011774 <MX_SPI3_Init+0x68>)
 8011714:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8011716:	4b16      	ldr	r3, [pc, #88]	; (8011770 <MX_SPI3_Init+0x64>)
 8011718:	f44f 7282 	mov.w	r2, #260	; 0x104
 801171c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801171e:	4b14      	ldr	r3, [pc, #80]	; (8011770 <MX_SPI3_Init+0x64>)
 8011720:	2200      	movs	r2, #0
 8011722:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8011724:	4b12      	ldr	r3, [pc, #72]	; (8011770 <MX_SPI3_Init+0x64>)
 8011726:	2200      	movs	r2, #0
 8011728:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 801172a:	4b11      	ldr	r3, [pc, #68]	; (8011770 <MX_SPI3_Init+0x64>)
 801172c:	2200      	movs	r2, #0
 801172e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011730:	4b0f      	ldr	r3, [pc, #60]	; (8011770 <MX_SPI3_Init+0x64>)
 8011732:	2201      	movs	r2, #1
 8011734:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011736:	4b0e      	ldr	r3, [pc, #56]	; (8011770 <MX_SPI3_Init+0x64>)
 8011738:	f44f 7200 	mov.w	r2, #512	; 0x200
 801173c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 801173e:	4b0c      	ldr	r3, [pc, #48]	; (8011770 <MX_SPI3_Init+0x64>)
 8011740:	2220      	movs	r2, #32
 8011742:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011744:	4b0a      	ldr	r3, [pc, #40]	; (8011770 <MX_SPI3_Init+0x64>)
 8011746:	2200      	movs	r2, #0
 8011748:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 801174a:	4b09      	ldr	r3, [pc, #36]	; (8011770 <MX_SPI3_Init+0x64>)
 801174c:	2200      	movs	r2, #0
 801174e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011750:	4b07      	ldr	r3, [pc, #28]	; (8011770 <MX_SPI3_Init+0x64>)
 8011752:	2200      	movs	r2, #0
 8011754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011756:	4b06      	ldr	r3, [pc, #24]	; (8011770 <MX_SPI3_Init+0x64>)
 8011758:	220a      	movs	r2, #10
 801175a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801175c:	4804      	ldr	r0, [pc, #16]	; (8011770 <MX_SPI3_Init+0x64>)
 801175e:	f7fa fa3f 	bl	800bbe0 <HAL_SPI_Init>
 8011762:	4603      	mov	r3, r0
 8011764:	2b00      	cmp	r3, #0
 8011766:	d001      	beq.n	801176c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011768:	f7ff fb84 	bl	8010e74 <Error_Handler>
  }

}
 801176c:	bf00      	nop
 801176e:	bd80      	pop	{r7, pc}
 8011770:	200047b0 	.word	0x200047b0
 8011774:	40003c00 	.word	0x40003c00

08011778 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b08e      	sub	sp, #56	; 0x38
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011784:	2200      	movs	r2, #0
 8011786:	601a      	str	r2, [r3, #0]
 8011788:	605a      	str	r2, [r3, #4]
 801178a:	609a      	str	r2, [r3, #8]
 801178c:	60da      	str	r2, [r3, #12]
 801178e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	4a5d      	ldr	r2, [pc, #372]	; (801190c <HAL_SPI_MspInit+0x194>)
 8011796:	4293      	cmp	r3, r2
 8011798:	d163      	bne.n	8011862 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801179a:	2300      	movs	r3, #0
 801179c:	623b      	str	r3, [r7, #32]
 801179e:	4b5c      	ldr	r3, [pc, #368]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117a2:	4a5b      	ldr	r2, [pc, #364]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80117a8:	6413      	str	r3, [r2, #64]	; 0x40
 80117aa:	4b59      	ldr	r3, [pc, #356]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117b2:	623b      	str	r3, [r7, #32]
 80117b4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80117b6:	2300      	movs	r3, #0
 80117b8:	61fb      	str	r3, [r7, #28]
 80117ba:	4b55      	ldr	r3, [pc, #340]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117be:	4a54      	ldr	r2, [pc, #336]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117c0:	f043 0304 	orr.w	r3, r3, #4
 80117c4:	6313      	str	r3, [r2, #48]	; 0x30
 80117c6:	4b52      	ldr	r3, [pc, #328]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ca:	f003 0304 	and.w	r3, r3, #4
 80117ce:	61fb      	str	r3, [r7, #28]
 80117d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80117d2:	2300      	movs	r3, #0
 80117d4:	61bb      	str	r3, [r7, #24]
 80117d6:	4b4e      	ldr	r3, [pc, #312]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117da:	4a4d      	ldr	r2, [pc, #308]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117dc:	f043 0302 	orr.w	r3, r3, #2
 80117e0:	6313      	str	r3, [r2, #48]	; 0x30
 80117e2:	4b4b      	ldr	r3, [pc, #300]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80117e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117e6:	f003 0302 	and.w	r3, r3, #2
 80117ea:	61bb      	str	r3, [r7, #24]
 80117ec:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80117ee:	2302      	movs	r3, #2
 80117f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117f2:	2302      	movs	r3, #2
 80117f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117f6:	2300      	movs	r3, #0
 80117f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117fa:	2303      	movs	r3, #3
 80117fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80117fe:	2307      	movs	r3, #7
 8011800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011806:	4619      	mov	r1, r3
 8011808:	4842      	ldr	r0, [pc, #264]	; (8011914 <HAL_SPI_MspInit+0x19c>)
 801180a:	f7f9 fb15 	bl	800ae38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801180e:	2304      	movs	r3, #4
 8011810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011812:	2302      	movs	r3, #2
 8011814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011816:	2300      	movs	r3, #0
 8011818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801181a:	2303      	movs	r3, #3
 801181c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801181e:	2305      	movs	r3, #5
 8011820:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011826:	4619      	mov	r1, r3
 8011828:	483a      	ldr	r0, [pc, #232]	; (8011914 <HAL_SPI_MspInit+0x19c>)
 801182a:	f7f9 fb05 	bl	800ae38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801182e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011834:	2302      	movs	r3, #2
 8011836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011838:	2300      	movs	r3, #0
 801183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801183c:	2303      	movs	r3, #3
 801183e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011840:	2305      	movs	r3, #5
 8011842:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011848:	4619      	mov	r1, r3
 801184a:	4833      	ldr	r0, [pc, #204]	; (8011918 <HAL_SPI_MspInit+0x1a0>)
 801184c:	f7f9 faf4 	bl	800ae38 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8011850:	2200      	movs	r2, #0
 8011852:	2100      	movs	r1, #0
 8011854:	2024      	movs	r0, #36	; 0x24
 8011856:	f7f8 fc3c 	bl	800a0d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 801185a:	2024      	movs	r0, #36	; 0x24
 801185c:	f7f8 fc55 	bl	800a10a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8011860:	e04f      	b.n	8011902 <HAL_SPI_MspInit+0x18a>
  else if(spiHandle->Instance==SPI3)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4a2d      	ldr	r2, [pc, #180]	; (801191c <HAL_SPI_MspInit+0x1a4>)
 8011868:	4293      	cmp	r3, r2
 801186a:	d14a      	bne.n	8011902 <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 801186c:	2300      	movs	r3, #0
 801186e:	617b      	str	r3, [r7, #20]
 8011870:	4b27      	ldr	r3, [pc, #156]	; (8011910 <HAL_SPI_MspInit+0x198>)
 8011872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011874:	4a26      	ldr	r2, [pc, #152]	; (8011910 <HAL_SPI_MspInit+0x198>)
 8011876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801187a:	6413      	str	r3, [r2, #64]	; 0x40
 801187c:	4b24      	ldr	r3, [pc, #144]	; (8011910 <HAL_SPI_MspInit+0x198>)
 801187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011884:	617b      	str	r3, [r7, #20]
 8011886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011888:	2300      	movs	r3, #0
 801188a:	613b      	str	r3, [r7, #16]
 801188c:	4b20      	ldr	r3, [pc, #128]	; (8011910 <HAL_SPI_MspInit+0x198>)
 801188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011890:	4a1f      	ldr	r2, [pc, #124]	; (8011910 <HAL_SPI_MspInit+0x198>)
 8011892:	f043 0302 	orr.w	r3, r3, #2
 8011896:	6313      	str	r3, [r2, #48]	; 0x30
 8011898:	4b1d      	ldr	r3, [pc, #116]	; (8011910 <HAL_SPI_MspInit+0x198>)
 801189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801189c:	f003 0302 	and.w	r3, r3, #2
 80118a0:	613b      	str	r3, [r7, #16]
 80118a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80118a4:	2300      	movs	r3, #0
 80118a6:	60fb      	str	r3, [r7, #12]
 80118a8:	4b19      	ldr	r3, [pc, #100]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80118aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ac:	4a18      	ldr	r2, [pc, #96]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80118ae:	f043 0304 	orr.w	r3, r3, #4
 80118b2:	6313      	str	r3, [r2, #48]	; 0x30
 80118b4:	4b16      	ldr	r3, [pc, #88]	; (8011910 <HAL_SPI_MspInit+0x198>)
 80118b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118b8:	f003 0304 	and.w	r3, r3, #4
 80118bc:	60fb      	str	r3, [r7, #12]
 80118be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80118c0:	2304      	movs	r3, #4
 80118c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118c4:	2302      	movs	r3, #2
 80118c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118c8:	2300      	movs	r3, #0
 80118ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118cc:	2303      	movs	r3, #3
 80118ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80118d0:	2307      	movs	r3, #7
 80118d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80118d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118d8:	4619      	mov	r1, r3
 80118da:	480f      	ldr	r0, [pc, #60]	; (8011918 <HAL_SPI_MspInit+0x1a0>)
 80118dc:	f7f9 faac 	bl	800ae38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80118e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80118e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118e6:	2302      	movs	r3, #2
 80118e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118ee:	2303      	movs	r3, #3
 80118f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80118f2:	2306      	movs	r3, #6
 80118f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80118f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118fa:	4619      	mov	r1, r3
 80118fc:	4805      	ldr	r0, [pc, #20]	; (8011914 <HAL_SPI_MspInit+0x19c>)
 80118fe:	f7f9 fa9b 	bl	800ae38 <HAL_GPIO_Init>
}
 8011902:	bf00      	nop
 8011904:	3738      	adds	r7, #56	; 0x38
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	40003800 	.word	0x40003800
 8011910:	40023800 	.word	0x40023800
 8011914:	40020800 	.word	0x40020800
 8011918:	40020400 	.word	0x40020400
 801191c:	40003c00 	.word	0x40003c00

08011920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011926:	2300      	movs	r3, #0
 8011928:	607b      	str	r3, [r7, #4]
 801192a:	4b10      	ldr	r3, [pc, #64]	; (801196c <HAL_MspInit+0x4c>)
 801192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801192e:	4a0f      	ldr	r2, [pc, #60]	; (801196c <HAL_MspInit+0x4c>)
 8011930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011934:	6453      	str	r3, [r2, #68]	; 0x44
 8011936:	4b0d      	ldr	r3, [pc, #52]	; (801196c <HAL_MspInit+0x4c>)
 8011938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801193e:	607b      	str	r3, [r7, #4]
 8011940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011942:	2300      	movs	r3, #0
 8011944:	603b      	str	r3, [r7, #0]
 8011946:	4b09      	ldr	r3, [pc, #36]	; (801196c <HAL_MspInit+0x4c>)
 8011948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194a:	4a08      	ldr	r2, [pc, #32]	; (801196c <HAL_MspInit+0x4c>)
 801194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011950:	6413      	str	r3, [r2, #64]	; 0x40
 8011952:	4b06      	ldr	r3, [pc, #24]	; (801196c <HAL_MspInit+0x4c>)
 8011954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801195a:	603b      	str	r3, [r7, #0]
 801195c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801195e:	2007      	movs	r0, #7
 8011960:	f7f8 fbac 	bl	800a0bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011964:	bf00      	nop
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	40023800 	.word	0x40023800

08011970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011970:	b480      	push	{r7}
 8011972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011974:	bf00      	nop
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801197e:	b480      	push	{r7}
 8011980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011982:	e7fe      	b.n	8011982 <HardFault_Handler+0x4>

08011984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011984:	b480      	push	{r7}
 8011986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011988:	e7fe      	b.n	8011988 <MemManage_Handler+0x4>

0801198a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801198a:	b480      	push	{r7}
 801198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801198e:	e7fe      	b.n	801198e <BusFault_Handler+0x4>

08011990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011990:	b480      	push	{r7}
 8011992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011994:	e7fe      	b.n	8011994 <UsageFault_Handler+0x4>

08011996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011996:	b480      	push	{r7}
 8011998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801199a:	bf00      	nop
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr

080119a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80119a4:	b480      	push	{r7}
 80119a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80119a8:	bf00      	nop
 80119aa:	46bd      	mov	sp, r7
 80119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b0:	4770      	bx	lr

080119b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80119b2:	b480      	push	{r7}
 80119b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80119b6:	bf00      	nop
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80119c4:	f7f7 fa4a 	bl	8008e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80119c8:	bf00      	nop
 80119ca:	bd80      	pop	{r7, pc}

080119cc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80119d0:	4802      	ldr	r0, [pc, #8]	; (80119dc <CAN1_TX_IRQHandler+0x10>)
 80119d2:	f7f8 f897 	bl	8009b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80119d6:	bf00      	nop
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	200046e4 	.word	0x200046e4

080119e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80119e4:	4802      	ldr	r0, [pc, #8]	; (80119f0 <CAN1_RX0_IRQHandler+0x10>)
 80119e6:	f7f8 f88d 	bl	8009b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80119ea:	bf00      	nop
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	200046e4 	.word	0x200046e4

080119f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80119f8:	4802      	ldr	r0, [pc, #8]	; (8011a04 <SPI2_IRQHandler+0x10>)
 80119fa:	f7fa fb8b 	bl	800c114 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80119fe:	bf00      	nop
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop
 8011a04:	20004758 	.word	0x20004758

08011a08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8011a0c:	4802      	ldr	r0, [pc, #8]	; (8011a18 <USART2_IRQHandler+0x10>)
 8011a0e:	f7fc f877 	bl	800db00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8011a12:	bf00      	nop
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	20004848 	.word	0x20004848

08011a1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8011a20:	4802      	ldr	r0, [pc, #8]	; (8011a2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8011a22:	f7fb f809 	bl	800ca38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8011a26:	bf00      	nop
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	20004808 	.word	0x20004808

08011a30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011a34:	4802      	ldr	r0, [pc, #8]	; (8011a40 <DMA2_Stream0_IRQHandler+0x10>)
 8011a36:	f7f8 fcb3 	bl	800a3a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8011a3a:	bf00      	nop
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	200045d8 	.word	0x200045d8

08011a44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8011a48:	4802      	ldr	r0, [pc, #8]	; (8011a54 <DMA2_Stream1_IRQHandler+0x10>)
 8011a4a:	f7f8 fca9 	bl	800a3a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8011a4e:	bf00      	nop
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	200044e8 	.word	0x200044e8

08011a58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8011a5c:	4802      	ldr	r0, [pc, #8]	; (8011a68 <DMA2_Stream2_IRQHandler+0x10>)
 8011a5e:	f7f8 fc9f 	bl	800a3a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8011a62:	bf00      	nop
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	20004638 	.word	0x20004638

08011a6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b086      	sub	sp, #24
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011a78:	2300      	movs	r3, #0
 8011a7a:	617b      	str	r3, [r7, #20]
 8011a7c:	e00a      	b.n	8011a94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011a7e:	f3af 8000 	nop.w
 8011a82:	4601      	mov	r1, r0
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	1c5a      	adds	r2, r3, #1
 8011a88:	60ba      	str	r2, [r7, #8]
 8011a8a:	b2ca      	uxtb	r2, r1
 8011a8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	3301      	adds	r3, #1
 8011a92:	617b      	str	r3, [r7, #20]
 8011a94:	697a      	ldr	r2, [r7, #20]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	dbf0      	blt.n	8011a7e <_read+0x12>
	}

return len;
 8011a9c:	687b      	ldr	r3, [r7, #4]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3718      	adds	r7, #24
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b086      	sub	sp, #24
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	60f8      	str	r0, [r7, #12]
 8011aae:	60b9      	str	r1, [r7, #8]
 8011ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	617b      	str	r3, [r7, #20]
 8011ab6:	e009      	b.n	8011acc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	1c5a      	adds	r2, r3, #1
 8011abc:	60ba      	str	r2, [r7, #8]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fe ff13 	bl	80108ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	617b      	str	r3, [r7, #20]
 8011acc:	697a      	ldr	r2, [r7, #20]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	dbf1      	blt.n	8011ab8 <_write+0x12>
	}
	return len;
 8011ad4:	687b      	ldr	r3, [r7, #4]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3718      	adds	r7, #24
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <_close>:

int _close(int file)
{
 8011ade:	b480      	push	{r7}
 8011ae0:	b083      	sub	sp, #12
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
	return -1;
 8011ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	370c      	adds	r7, #12
 8011aee:	46bd      	mov	sp, r7
 8011af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af4:	4770      	bx	lr

08011af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011af6:	b480      	push	{r7}
 8011af8:	b083      	sub	sp, #12
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
 8011afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011b06:	605a      	str	r2, [r3, #4]
	return 0;
 8011b08:	2300      	movs	r3, #0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr

08011b16 <_isatty>:

int _isatty(int file)
{
 8011b16:	b480      	push	{r7}
 8011b18:	b083      	sub	sp, #12
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
	return 1;
 8011b1e:	2301      	movs	r3, #1
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr

08011b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	60b9      	str	r1, [r7, #8]
 8011b36:	607a      	str	r2, [r7, #4]
	return 0;
 8011b38:	2300      	movs	r3, #0
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3714      	adds	r7, #20
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr
	...

08011b48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011b50:	4b11      	ldr	r3, [pc, #68]	; (8011b98 <_sbrk+0x50>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d102      	bne.n	8011b5e <_sbrk+0x16>
		heap_end = &end;
 8011b58:	4b0f      	ldr	r3, [pc, #60]	; (8011b98 <_sbrk+0x50>)
 8011b5a:	4a10      	ldr	r2, [pc, #64]	; (8011b9c <_sbrk+0x54>)
 8011b5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011b5e:	4b0e      	ldr	r3, [pc, #56]	; (8011b98 <_sbrk+0x50>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8011b64:	4b0c      	ldr	r3, [pc, #48]	; (8011b98 <_sbrk+0x50>)
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	4413      	add	r3, r2
 8011b6c:	466a      	mov	r2, sp
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d907      	bls.n	8011b82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8011b72:	f000 fa49 	bl	8012008 <__errno>
 8011b76:	4602      	mov	r2, r0
 8011b78:	230c      	movs	r3, #12
 8011b7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8011b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b80:	e006      	b.n	8011b90 <_sbrk+0x48>
	}

	heap_end += incr;
 8011b82:	4b05      	ldr	r3, [pc, #20]	; (8011b98 <_sbrk+0x50>)
 8011b84:	681a      	ldr	r2, [r3, #0]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4413      	add	r3, r2
 8011b8a:	4a03      	ldr	r2, [pc, #12]	; (8011b98 <_sbrk+0x50>)
 8011b8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3710      	adds	r7, #16
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	200042a8 	.word	0x200042a8
 8011b9c:	20004890 	.word	0x20004890

08011ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011ba4:	4b16      	ldr	r3, [pc, #88]	; (8011c00 <SystemInit+0x60>)
 8011ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011baa:	4a15      	ldr	r2, [pc, #84]	; (8011c00 <SystemInit+0x60>)
 8011bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011bb4:	4b13      	ldr	r3, [pc, #76]	; (8011c04 <SystemInit+0x64>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4a12      	ldr	r2, [pc, #72]	; (8011c04 <SystemInit+0x64>)
 8011bba:	f043 0301 	orr.w	r3, r3, #1
 8011bbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011bc0:	4b10      	ldr	r3, [pc, #64]	; (8011c04 <SystemInit+0x64>)
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011bc6:	4b0f      	ldr	r3, [pc, #60]	; (8011c04 <SystemInit+0x64>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a0e      	ldr	r2, [pc, #56]	; (8011c04 <SystemInit+0x64>)
 8011bcc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011bd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011bd6:	4b0b      	ldr	r3, [pc, #44]	; (8011c04 <SystemInit+0x64>)
 8011bd8:	4a0b      	ldr	r2, [pc, #44]	; (8011c08 <SystemInit+0x68>)
 8011bda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011bdc:	4b09      	ldr	r3, [pc, #36]	; (8011c04 <SystemInit+0x64>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4a08      	ldr	r2, [pc, #32]	; (8011c04 <SystemInit+0x64>)
 8011be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011be6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011be8:	4b06      	ldr	r3, [pc, #24]	; (8011c04 <SystemInit+0x64>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011bee:	4b04      	ldr	r3, [pc, #16]	; (8011c00 <SystemInit+0x60>)
 8011bf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011bf4:	609a      	str	r2, [r3, #8]
#endif
}
 8011bf6:	bf00      	nop
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	e000ed00 	.word	0xe000ed00
 8011c04:	40023800 	.word	0x40023800
 8011c08:	24003010 	.word	0x24003010

08011c0c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b096      	sub	sp, #88	; 0x58
 8011c10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011c12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	605a      	str	r2, [r3, #4]
 8011c1c:	609a      	str	r2, [r3, #8]
 8011c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011c20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011c24:	2200      	movs	r2, #0
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c2e:	2200      	movs	r2, #0
 8011c30:	601a      	str	r2, [r3, #0]
 8011c32:	605a      	str	r2, [r3, #4]
 8011c34:	609a      	str	r2, [r3, #8]
 8011c36:	60da      	str	r2, [r3, #12]
 8011c38:	611a      	str	r2, [r3, #16]
 8011c3a:	615a      	str	r2, [r3, #20]
 8011c3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8011c3e:	1d3b      	adds	r3, r7, #4
 8011c40:	2220      	movs	r2, #32
 8011c42:	2100      	movs	r1, #0
 8011c44:	4618      	mov	r0, r3
 8011c46:	f000 fa14 	bl	8012072 <memset>

  htim8.Instance = TIM8;
 8011c4a:	4b4a      	ldr	r3, [pc, #296]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c4c:	4a4a      	ldr	r2, [pc, #296]	; (8011d78 <MX_TIM8_Init+0x16c>)
 8011c4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8011c50:	4b48      	ldr	r3, [pc, #288]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8011c56:	4b47      	ldr	r3, [pc, #284]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c58:	2220      	movs	r2, #32
 8011c5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8011c5c:	4b45      	ldr	r3, [pc, #276]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c5e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011c62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011c64:	4b43      	ldr	r3, [pc, #268]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c66:	2200      	movs	r2, #0
 8011c68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8011c6a:	4b42      	ldr	r3, [pc, #264]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011c70:	4b40      	ldr	r3, [pc, #256]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c72:	2200      	movs	r2, #0
 8011c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8011c76:	483f      	ldr	r0, [pc, #252]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c78:	f7fa fd60 	bl	800c73c <HAL_TIM_Base_Init>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d001      	beq.n	8011c86 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8011c82:	f7ff f8f7 	bl	8010e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8011c8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c90:	4619      	mov	r1, r3
 8011c92:	4838      	ldr	r0, [pc, #224]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011c94:	f7fb f8c5 	bl	800ce22 <HAL_TIM_ConfigClockSource>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d001      	beq.n	8011ca2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8011c9e:	f7ff f8e9 	bl	8010e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8011ca2:	4834      	ldr	r0, [pc, #208]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011ca4:	f7fa fd75 	bl	800c792 <HAL_TIM_PWM_Init>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d001      	beq.n	8011cb2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8011cae:	f7ff f8e1 	bl	8010e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011cb2:	2320      	movs	r3, #32
 8011cb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8011cba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	482c      	ldr	r0, [pc, #176]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011cc2:	f7fb fd67 	bl	800d794 <HAL_TIMEx_MasterConfigSynchronization>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d001      	beq.n	8011cd0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8011ccc:	f7ff f8d2 	bl	8010e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011cd0:	2360      	movs	r3, #96	; 0x60
 8011cd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8011cd4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8011cea:	2300      	movs	r3, #0
 8011cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	481f      	ldr	r0, [pc, #124]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011cf8:	f7fa ffa6 	bl	800cc48 <HAL_TIM_PWM_ConfigChannel>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8011d02:	f7ff f8b7 	bl	8010e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d0a:	2204      	movs	r2, #4
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	4819      	ldr	r0, [pc, #100]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011d10:	f7fa ff9a 	bl	800cc48 <HAL_TIM_PWM_ConfigChannel>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d001      	beq.n	8011d1e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8011d1a:	f7ff f8ab 	bl	8010e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d22:	2208      	movs	r2, #8
 8011d24:	4619      	mov	r1, r3
 8011d26:	4813      	ldr	r0, [pc, #76]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011d28:	f7fa ff8e 	bl	800cc48 <HAL_TIM_PWM_ConfigChannel>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8011d32:	f7ff f89f 	bl	8010e74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011d36:	2300      	movs	r3, #0
 8011d38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011d46:	2300      	movs	r3, #0
 8011d48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8011d52:	1d3b      	adds	r3, r7, #4
 8011d54:	4619      	mov	r1, r3
 8011d56:	4807      	ldr	r0, [pc, #28]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011d58:	f7fb fd61 	bl	800d81e <HAL_TIMEx_ConfigBreakDeadTime>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8011d62:	f7ff f887 	bl	8010e74 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8011d66:	4803      	ldr	r0, [pc, #12]	; (8011d74 <MX_TIM8_Init+0x168>)
 8011d68:	f000 f830 	bl	8011dcc <HAL_TIM_MspPostInit>

}
 8011d6c:	bf00      	nop
 8011d6e:	3758      	adds	r7, #88	; 0x58
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	20004808 	.word	0x20004808
 8011d78:	40010400 	.word	0x40010400

08011d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4a0e      	ldr	r2, [pc, #56]	; (8011dc4 <HAL_TIM_Base_MspInit+0x48>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d115      	bne.n	8011dba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011d8e:	2300      	movs	r3, #0
 8011d90:	60fb      	str	r3, [r7, #12]
 8011d92:	4b0d      	ldr	r3, [pc, #52]	; (8011dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8011d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d96:	4a0c      	ldr	r2, [pc, #48]	; (8011dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8011d98:	f043 0302 	orr.w	r3, r3, #2
 8011d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8011d9e:	4b0a      	ldr	r3, [pc, #40]	; (8011dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8011da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011da2:	f003 0302 	and.w	r3, r3, #2
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8011daa:	2200      	movs	r2, #0
 8011dac:	2100      	movs	r1, #0
 8011dae:	202c      	movs	r0, #44	; 0x2c
 8011db0:	f7f8 f98f 	bl	800a0d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8011db4:	202c      	movs	r0, #44	; 0x2c
 8011db6:	f7f8 f9a8 	bl	800a10a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8011dba:	bf00      	nop
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	40010400 	.word	0x40010400
 8011dc8:	40023800 	.word	0x40023800

08011dcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b08a      	sub	sp, #40	; 0x28
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011dd4:	f107 0314 	add.w	r3, r7, #20
 8011dd8:	2200      	movs	r2, #0
 8011dda:	601a      	str	r2, [r3, #0]
 8011ddc:	605a      	str	r2, [r3, #4]
 8011dde:	609a      	str	r2, [r3, #8]
 8011de0:	60da      	str	r2, [r3, #12]
 8011de2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4a30      	ldr	r2, [pc, #192]	; (8011eac <HAL_TIM_MspPostInit+0xe0>)
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d15a      	bne.n	8011ea4 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011dee:	2300      	movs	r3, #0
 8011df0:	613b      	str	r3, [r7, #16]
 8011df2:	4b2f      	ldr	r3, [pc, #188]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011df6:	4a2e      	ldr	r2, [pc, #184]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011df8:	f043 0301 	orr.w	r3, r3, #1
 8011dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8011dfe:	4b2c      	ldr	r3, [pc, #176]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e02:	f003 0301 	and.w	r3, r3, #1
 8011e06:	613b      	str	r3, [r7, #16]
 8011e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	60fb      	str	r3, [r7, #12]
 8011e0e:	4b28      	ldr	r3, [pc, #160]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e12:	4a27      	ldr	r2, [pc, #156]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011e14:	f043 0302 	orr.w	r3, r3, #2
 8011e18:	6313      	str	r3, [r2, #48]	; 0x30
 8011e1a:	4b25      	ldr	r3, [pc, #148]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e1e:	f003 0302 	and.w	r3, r3, #2
 8011e22:	60fb      	str	r3, [r7, #12]
 8011e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011e26:	2300      	movs	r3, #0
 8011e28:	60bb      	str	r3, [r7, #8]
 8011e2a:	4b21      	ldr	r3, [pc, #132]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e2e:	4a20      	ldr	r2, [pc, #128]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011e30:	f043 0304 	orr.w	r3, r3, #4
 8011e34:	6313      	str	r3, [r2, #48]	; 0x30
 8011e36:	4b1e      	ldr	r3, [pc, #120]	; (8011eb0 <HAL_TIM_MspPostInit+0xe4>)
 8011e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e3a:	f003 0304 	and.w	r3, r3, #4
 8011e3e:	60bb      	str	r3, [r7, #8]
 8011e40:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8011e42:	2380      	movs	r3, #128	; 0x80
 8011e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e46:	2302      	movs	r3, #2
 8011e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011e52:	2303      	movs	r3, #3
 8011e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e56:	f107 0314 	add.w	r3, r7, #20
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	4815      	ldr	r0, [pc, #84]	; (8011eb4 <HAL_TIM_MspPostInit+0xe8>)
 8011e5e:	f7f8 ffeb 	bl	800ae38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011e62:	2303      	movs	r3, #3
 8011e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e66:	2302      	movs	r3, #2
 8011e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011e72:	2303      	movs	r3, #3
 8011e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011e76:	f107 0314 	add.w	r3, r7, #20
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	480e      	ldr	r0, [pc, #56]	; (8011eb8 <HAL_TIM_MspPostInit+0xec>)
 8011e7e:	f7f8 ffdb 	bl	800ae38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8011e82:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8011e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e88:	2302      	movs	r3, #2
 8011e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e90:	2300      	movs	r3, #0
 8011e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011e94:	2303      	movs	r3, #3
 8011e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011e98:	f107 0314 	add.w	r3, r7, #20
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	4807      	ldr	r0, [pc, #28]	; (8011ebc <HAL_TIM_MspPostInit+0xf0>)
 8011ea0:	f7f8 ffca 	bl	800ae38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8011ea4:	bf00      	nop
 8011ea6:	3728      	adds	r7, #40	; 0x28
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	40010400 	.word	0x40010400
 8011eb0:	40023800 	.word	0x40023800
 8011eb4:	40020000 	.word	0x40020000
 8011eb8:	40020400 	.word	0x40020400
 8011ebc:	40020800 	.word	0x40020800

08011ec0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8011ec4:	4b11      	ldr	r3, [pc, #68]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011ec6:	4a12      	ldr	r2, [pc, #72]	; (8011f10 <MX_USART2_UART_Init+0x50>)
 8011ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8011eca:	4b10      	ldr	r3, [pc, #64]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011ed2:	4b0e      	ldr	r3, [pc, #56]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011ed8:	4b0c      	ldr	r3, [pc, #48]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011ede:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011ee4:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011ee6:	220c      	movs	r2, #12
 8011ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011eea:	4b08      	ldr	r3, [pc, #32]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011eec:	2200      	movs	r2, #0
 8011eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011ef0:	4b06      	ldr	r3, [pc, #24]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011ef6:	4805      	ldr	r0, [pc, #20]	; (8011f0c <MX_USART2_UART_Init+0x4c>)
 8011ef8:	f7fb fd1c 	bl	800d934 <HAL_UART_Init>
 8011efc:	4603      	mov	r3, r0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d001      	beq.n	8011f06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8011f02:	f7fe ffb7 	bl	8010e74 <Error_Handler>
  }

}
 8011f06:	bf00      	nop
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	20004848 	.word	0x20004848
 8011f10:	40004400 	.word	0x40004400

08011f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b08a      	sub	sp, #40	; 0x28
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f1c:	f107 0314 	add.w	r3, r7, #20
 8011f20:	2200      	movs	r2, #0
 8011f22:	601a      	str	r2, [r3, #0]
 8011f24:	605a      	str	r2, [r3, #4]
 8011f26:	609a      	str	r2, [r3, #8]
 8011f28:	60da      	str	r2, [r3, #12]
 8011f2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a1d      	ldr	r2, [pc, #116]	; (8011fa8 <HAL_UART_MspInit+0x94>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d133      	bne.n	8011f9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8011f36:	2300      	movs	r3, #0
 8011f38:	613b      	str	r3, [r7, #16]
 8011f3a:	4b1c      	ldr	r3, [pc, #112]	; (8011fac <HAL_UART_MspInit+0x98>)
 8011f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f3e:	4a1b      	ldr	r2, [pc, #108]	; (8011fac <HAL_UART_MspInit+0x98>)
 8011f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011f44:	6413      	str	r3, [r2, #64]	; 0x40
 8011f46:	4b19      	ldr	r3, [pc, #100]	; (8011fac <HAL_UART_MspInit+0x98>)
 8011f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f4e:	613b      	str	r3, [r7, #16]
 8011f50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f52:	2300      	movs	r3, #0
 8011f54:	60fb      	str	r3, [r7, #12]
 8011f56:	4b15      	ldr	r3, [pc, #84]	; (8011fac <HAL_UART_MspInit+0x98>)
 8011f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f5a:	4a14      	ldr	r2, [pc, #80]	; (8011fac <HAL_UART_MspInit+0x98>)
 8011f5c:	f043 0301 	orr.w	r3, r3, #1
 8011f60:	6313      	str	r3, [r2, #48]	; 0x30
 8011f62:	4b12      	ldr	r3, [pc, #72]	; (8011fac <HAL_UART_MspInit+0x98>)
 8011f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f66:	f003 0301 	and.w	r3, r3, #1
 8011f6a:	60fb      	str	r3, [r7, #12]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8011f6e:	230c      	movs	r3, #12
 8011f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f72:	2302      	movs	r3, #2
 8011f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011f76:	2301      	movs	r3, #1
 8011f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011f7e:	2307      	movs	r3, #7
 8011f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f82:	f107 0314 	add.w	r3, r7, #20
 8011f86:	4619      	mov	r1, r3
 8011f88:	4809      	ldr	r0, [pc, #36]	; (8011fb0 <HAL_UART_MspInit+0x9c>)
 8011f8a:	f7f8 ff55 	bl	800ae38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8011f8e:	2200      	movs	r2, #0
 8011f90:	2100      	movs	r1, #0
 8011f92:	2026      	movs	r0, #38	; 0x26
 8011f94:	f7f8 f89d 	bl	800a0d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8011f98:	2026      	movs	r0, #38	; 0x26
 8011f9a:	f7f8 f8b6 	bl	800a10a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8011f9e:	bf00      	nop
 8011fa0:	3728      	adds	r7, #40	; 0x28
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	40004400 	.word	0x40004400
 8011fac:	40023800 	.word	0x40023800
 8011fb0:	40020000 	.word	0x40020000

08011fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011fec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011fb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011fba:	e003      	b.n	8011fc4 <LoopCopyDataInit>

08011fbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011fbc:	4b0c      	ldr	r3, [pc, #48]	; (8011ff0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011fbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011fc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011fc2:	3104      	adds	r1, #4

08011fc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011fc4:	480b      	ldr	r0, [pc, #44]	; (8011ff4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011fc6:	4b0c      	ldr	r3, [pc, #48]	; (8011ff8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011fc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011fca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011fcc:	d3f6      	bcc.n	8011fbc <CopyDataInit>
  ldr  r2, =_sbss
 8011fce:	4a0b      	ldr	r2, [pc, #44]	; (8011ffc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011fd0:	e002      	b.n	8011fd8 <LoopFillZerobss>

08011fd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011fd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011fd4:	f842 3b04 	str.w	r3, [r2], #4

08011fd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011fd8:	4b09      	ldr	r3, [pc, #36]	; (8012000 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011fda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011fdc:	d3f9      	bcc.n	8011fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011fde:	f7ff fddf 	bl	8011ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011fe2:	f000 f817 	bl	8012014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011fe6:	f7fe fc93 	bl	8010910 <main>
  bx  lr    
 8011fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011fec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8011ff0:	08029930 	.word	0x08029930
  ldr  r0, =_sdata
 8011ff4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011ff8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8011ffc:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8012000:	2000488c 	.word	0x2000488c

08012004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012004:	e7fe      	b.n	8012004 <ADC_IRQHandler>
	...

08012008 <__errno>:
 8012008:	4b01      	ldr	r3, [pc, #4]	; (8012010 <__errno+0x8>)
 801200a:	6818      	ldr	r0, [r3, #0]
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	20000010 	.word	0x20000010

08012014 <__libc_init_array>:
 8012014:	b570      	push	{r4, r5, r6, lr}
 8012016:	4e0d      	ldr	r6, [pc, #52]	; (801204c <__libc_init_array+0x38>)
 8012018:	4c0d      	ldr	r4, [pc, #52]	; (8012050 <__libc_init_array+0x3c>)
 801201a:	1ba4      	subs	r4, r4, r6
 801201c:	10a4      	asrs	r4, r4, #2
 801201e:	2500      	movs	r5, #0
 8012020:	42a5      	cmp	r5, r4
 8012022:	d109      	bne.n	8012038 <__libc_init_array+0x24>
 8012024:	4e0b      	ldr	r6, [pc, #44]	; (8012054 <__libc_init_array+0x40>)
 8012026:	4c0c      	ldr	r4, [pc, #48]	; (8012058 <__libc_init_array+0x44>)
 8012028:	f003 fca8 	bl	801597c <_init>
 801202c:	1ba4      	subs	r4, r4, r6
 801202e:	10a4      	asrs	r4, r4, #2
 8012030:	2500      	movs	r5, #0
 8012032:	42a5      	cmp	r5, r4
 8012034:	d105      	bne.n	8012042 <__libc_init_array+0x2e>
 8012036:	bd70      	pop	{r4, r5, r6, pc}
 8012038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801203c:	4798      	blx	r3
 801203e:	3501      	adds	r5, #1
 8012040:	e7ee      	b.n	8012020 <__libc_init_array+0xc>
 8012042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012046:	4798      	blx	r3
 8012048:	3501      	adds	r5, #1
 801204a:	e7f2      	b.n	8012032 <__libc_init_array+0x1e>
 801204c:	08029928 	.word	0x08029928
 8012050:	08029928 	.word	0x08029928
 8012054:	08029928 	.word	0x08029928
 8012058:	0802992c 	.word	0x0802992c

0801205c <memcpy>:
 801205c:	b510      	push	{r4, lr}
 801205e:	1e43      	subs	r3, r0, #1
 8012060:	440a      	add	r2, r1
 8012062:	4291      	cmp	r1, r2
 8012064:	d100      	bne.n	8012068 <memcpy+0xc>
 8012066:	bd10      	pop	{r4, pc}
 8012068:	f811 4b01 	ldrb.w	r4, [r1], #1
 801206c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012070:	e7f7      	b.n	8012062 <memcpy+0x6>

08012072 <memset>:
 8012072:	4402      	add	r2, r0
 8012074:	4603      	mov	r3, r0
 8012076:	4293      	cmp	r3, r2
 8012078:	d100      	bne.n	801207c <memset+0xa>
 801207a:	4770      	bx	lr
 801207c:	f803 1b01 	strb.w	r1, [r3], #1
 8012080:	e7f9      	b.n	8012076 <memset+0x4>

08012082 <__cvt>:
 8012082:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012086:	ec55 4b10 	vmov	r4, r5, d0
 801208a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801208c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012090:	2d00      	cmp	r5, #0
 8012092:	460e      	mov	r6, r1
 8012094:	4691      	mov	r9, r2
 8012096:	4619      	mov	r1, r3
 8012098:	bfb8      	it	lt
 801209a:	4622      	movlt	r2, r4
 801209c:	462b      	mov	r3, r5
 801209e:	f027 0720 	bic.w	r7, r7, #32
 80120a2:	bfbb      	ittet	lt
 80120a4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80120a8:	461d      	movlt	r5, r3
 80120aa:	2300      	movge	r3, #0
 80120ac:	232d      	movlt	r3, #45	; 0x2d
 80120ae:	bfb8      	it	lt
 80120b0:	4614      	movlt	r4, r2
 80120b2:	2f46      	cmp	r7, #70	; 0x46
 80120b4:	700b      	strb	r3, [r1, #0]
 80120b6:	d004      	beq.n	80120c2 <__cvt+0x40>
 80120b8:	2f45      	cmp	r7, #69	; 0x45
 80120ba:	d100      	bne.n	80120be <__cvt+0x3c>
 80120bc:	3601      	adds	r6, #1
 80120be:	2102      	movs	r1, #2
 80120c0:	e000      	b.n	80120c4 <__cvt+0x42>
 80120c2:	2103      	movs	r1, #3
 80120c4:	ab03      	add	r3, sp, #12
 80120c6:	9301      	str	r3, [sp, #4]
 80120c8:	ab02      	add	r3, sp, #8
 80120ca:	9300      	str	r3, [sp, #0]
 80120cc:	4632      	mov	r2, r6
 80120ce:	4653      	mov	r3, sl
 80120d0:	ec45 4b10 	vmov	d0, r4, r5
 80120d4:	f000 fdfc 	bl	8012cd0 <_dtoa_r>
 80120d8:	2f47      	cmp	r7, #71	; 0x47
 80120da:	4680      	mov	r8, r0
 80120dc:	d102      	bne.n	80120e4 <__cvt+0x62>
 80120de:	f019 0f01 	tst.w	r9, #1
 80120e2:	d026      	beq.n	8012132 <__cvt+0xb0>
 80120e4:	2f46      	cmp	r7, #70	; 0x46
 80120e6:	eb08 0906 	add.w	r9, r8, r6
 80120ea:	d111      	bne.n	8012110 <__cvt+0x8e>
 80120ec:	f898 3000 	ldrb.w	r3, [r8]
 80120f0:	2b30      	cmp	r3, #48	; 0x30
 80120f2:	d10a      	bne.n	801210a <__cvt+0x88>
 80120f4:	2200      	movs	r2, #0
 80120f6:	2300      	movs	r3, #0
 80120f8:	4620      	mov	r0, r4
 80120fa:	4629      	mov	r1, r5
 80120fc:	f7f6 fc1c 	bl	8008938 <__aeabi_dcmpeq>
 8012100:	b918      	cbnz	r0, 801210a <__cvt+0x88>
 8012102:	f1c6 0601 	rsb	r6, r6, #1
 8012106:	f8ca 6000 	str.w	r6, [sl]
 801210a:	f8da 3000 	ldr.w	r3, [sl]
 801210e:	4499      	add	r9, r3
 8012110:	2200      	movs	r2, #0
 8012112:	2300      	movs	r3, #0
 8012114:	4620      	mov	r0, r4
 8012116:	4629      	mov	r1, r5
 8012118:	f7f6 fc0e 	bl	8008938 <__aeabi_dcmpeq>
 801211c:	b938      	cbnz	r0, 801212e <__cvt+0xac>
 801211e:	2230      	movs	r2, #48	; 0x30
 8012120:	9b03      	ldr	r3, [sp, #12]
 8012122:	454b      	cmp	r3, r9
 8012124:	d205      	bcs.n	8012132 <__cvt+0xb0>
 8012126:	1c59      	adds	r1, r3, #1
 8012128:	9103      	str	r1, [sp, #12]
 801212a:	701a      	strb	r2, [r3, #0]
 801212c:	e7f8      	b.n	8012120 <__cvt+0x9e>
 801212e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012132:	9b03      	ldr	r3, [sp, #12]
 8012134:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012136:	eba3 0308 	sub.w	r3, r3, r8
 801213a:	4640      	mov	r0, r8
 801213c:	6013      	str	r3, [r2, #0]
 801213e:	b004      	add	sp, #16
 8012140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012144 <__exponent>:
 8012144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012146:	2900      	cmp	r1, #0
 8012148:	4604      	mov	r4, r0
 801214a:	bfba      	itte	lt
 801214c:	4249      	neglt	r1, r1
 801214e:	232d      	movlt	r3, #45	; 0x2d
 8012150:	232b      	movge	r3, #43	; 0x2b
 8012152:	2909      	cmp	r1, #9
 8012154:	f804 2b02 	strb.w	r2, [r4], #2
 8012158:	7043      	strb	r3, [r0, #1]
 801215a:	dd20      	ble.n	801219e <__exponent+0x5a>
 801215c:	f10d 0307 	add.w	r3, sp, #7
 8012160:	461f      	mov	r7, r3
 8012162:	260a      	movs	r6, #10
 8012164:	fb91 f5f6 	sdiv	r5, r1, r6
 8012168:	fb06 1115 	mls	r1, r6, r5, r1
 801216c:	3130      	adds	r1, #48	; 0x30
 801216e:	2d09      	cmp	r5, #9
 8012170:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012174:	f103 32ff 	add.w	r2, r3, #4294967295
 8012178:	4629      	mov	r1, r5
 801217a:	dc09      	bgt.n	8012190 <__exponent+0x4c>
 801217c:	3130      	adds	r1, #48	; 0x30
 801217e:	3b02      	subs	r3, #2
 8012180:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012184:	42bb      	cmp	r3, r7
 8012186:	4622      	mov	r2, r4
 8012188:	d304      	bcc.n	8012194 <__exponent+0x50>
 801218a:	1a10      	subs	r0, r2, r0
 801218c:	b003      	add	sp, #12
 801218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012190:	4613      	mov	r3, r2
 8012192:	e7e7      	b.n	8012164 <__exponent+0x20>
 8012194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012198:	f804 2b01 	strb.w	r2, [r4], #1
 801219c:	e7f2      	b.n	8012184 <__exponent+0x40>
 801219e:	2330      	movs	r3, #48	; 0x30
 80121a0:	4419      	add	r1, r3
 80121a2:	7083      	strb	r3, [r0, #2]
 80121a4:	1d02      	adds	r2, r0, #4
 80121a6:	70c1      	strb	r1, [r0, #3]
 80121a8:	e7ef      	b.n	801218a <__exponent+0x46>
	...

080121ac <_printf_float>:
 80121ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b0:	b08d      	sub	sp, #52	; 0x34
 80121b2:	460c      	mov	r4, r1
 80121b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80121b8:	4616      	mov	r6, r2
 80121ba:	461f      	mov	r7, r3
 80121bc:	4605      	mov	r5, r0
 80121be:	f001 fcb9 	bl	8013b34 <_localeconv_r>
 80121c2:	6803      	ldr	r3, [r0, #0]
 80121c4:	9304      	str	r3, [sp, #16]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7f5 ff3a 	bl	8008040 <strlen>
 80121cc:	2300      	movs	r3, #0
 80121ce:	930a      	str	r3, [sp, #40]	; 0x28
 80121d0:	f8d8 3000 	ldr.w	r3, [r8]
 80121d4:	9005      	str	r0, [sp, #20]
 80121d6:	3307      	adds	r3, #7
 80121d8:	f023 0307 	bic.w	r3, r3, #7
 80121dc:	f103 0208 	add.w	r2, r3, #8
 80121e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80121e4:	f8d4 b000 	ldr.w	fp, [r4]
 80121e8:	f8c8 2000 	str.w	r2, [r8]
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80121f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80121f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80121fc:	9307      	str	r3, [sp, #28]
 80121fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8012202:	f04f 32ff 	mov.w	r2, #4294967295
 8012206:	4ba7      	ldr	r3, [pc, #668]	; (80124a4 <_printf_float+0x2f8>)
 8012208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801220c:	f7f6 fbc6 	bl	800899c <__aeabi_dcmpun>
 8012210:	bb70      	cbnz	r0, 8012270 <_printf_float+0xc4>
 8012212:	f04f 32ff 	mov.w	r2, #4294967295
 8012216:	4ba3      	ldr	r3, [pc, #652]	; (80124a4 <_printf_float+0x2f8>)
 8012218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801221c:	f7f6 fba0 	bl	8008960 <__aeabi_dcmple>
 8012220:	bb30      	cbnz	r0, 8012270 <_printf_float+0xc4>
 8012222:	2200      	movs	r2, #0
 8012224:	2300      	movs	r3, #0
 8012226:	4640      	mov	r0, r8
 8012228:	4649      	mov	r1, r9
 801222a:	f7f6 fb8f 	bl	800894c <__aeabi_dcmplt>
 801222e:	b110      	cbz	r0, 8012236 <_printf_float+0x8a>
 8012230:	232d      	movs	r3, #45	; 0x2d
 8012232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012236:	4a9c      	ldr	r2, [pc, #624]	; (80124a8 <_printf_float+0x2fc>)
 8012238:	4b9c      	ldr	r3, [pc, #624]	; (80124ac <_printf_float+0x300>)
 801223a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801223e:	bf8c      	ite	hi
 8012240:	4690      	movhi	r8, r2
 8012242:	4698      	movls	r8, r3
 8012244:	2303      	movs	r3, #3
 8012246:	f02b 0204 	bic.w	r2, fp, #4
 801224a:	6123      	str	r3, [r4, #16]
 801224c:	6022      	str	r2, [r4, #0]
 801224e:	f04f 0900 	mov.w	r9, #0
 8012252:	9700      	str	r7, [sp, #0]
 8012254:	4633      	mov	r3, r6
 8012256:	aa0b      	add	r2, sp, #44	; 0x2c
 8012258:	4621      	mov	r1, r4
 801225a:	4628      	mov	r0, r5
 801225c:	f000 f9e6 	bl	801262c <_printf_common>
 8012260:	3001      	adds	r0, #1
 8012262:	f040 808d 	bne.w	8012380 <_printf_float+0x1d4>
 8012266:	f04f 30ff 	mov.w	r0, #4294967295
 801226a:	b00d      	add	sp, #52	; 0x34
 801226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012270:	4642      	mov	r2, r8
 8012272:	464b      	mov	r3, r9
 8012274:	4640      	mov	r0, r8
 8012276:	4649      	mov	r1, r9
 8012278:	f7f6 fb90 	bl	800899c <__aeabi_dcmpun>
 801227c:	b110      	cbz	r0, 8012284 <_printf_float+0xd8>
 801227e:	4a8c      	ldr	r2, [pc, #560]	; (80124b0 <_printf_float+0x304>)
 8012280:	4b8c      	ldr	r3, [pc, #560]	; (80124b4 <_printf_float+0x308>)
 8012282:	e7da      	b.n	801223a <_printf_float+0x8e>
 8012284:	6861      	ldr	r1, [r4, #4]
 8012286:	1c4b      	adds	r3, r1, #1
 8012288:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801228c:	a80a      	add	r0, sp, #40	; 0x28
 801228e:	d13e      	bne.n	801230e <_printf_float+0x162>
 8012290:	2306      	movs	r3, #6
 8012292:	6063      	str	r3, [r4, #4]
 8012294:	2300      	movs	r3, #0
 8012296:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801229a:	ab09      	add	r3, sp, #36	; 0x24
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	ec49 8b10 	vmov	d0, r8, r9
 80122a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80122a6:	6022      	str	r2, [r4, #0]
 80122a8:	f8cd a004 	str.w	sl, [sp, #4]
 80122ac:	6861      	ldr	r1, [r4, #4]
 80122ae:	4628      	mov	r0, r5
 80122b0:	f7ff fee7 	bl	8012082 <__cvt>
 80122b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80122b8:	2b47      	cmp	r3, #71	; 0x47
 80122ba:	4680      	mov	r8, r0
 80122bc:	d109      	bne.n	80122d2 <_printf_float+0x126>
 80122be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122c0:	1cd8      	adds	r0, r3, #3
 80122c2:	db02      	blt.n	80122ca <_printf_float+0x11e>
 80122c4:	6862      	ldr	r2, [r4, #4]
 80122c6:	4293      	cmp	r3, r2
 80122c8:	dd47      	ble.n	801235a <_printf_float+0x1ae>
 80122ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80122ce:	fa5f fa8a 	uxtb.w	sl, sl
 80122d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80122d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80122d8:	d824      	bhi.n	8012324 <_printf_float+0x178>
 80122da:	3901      	subs	r1, #1
 80122dc:	4652      	mov	r2, sl
 80122de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80122e2:	9109      	str	r1, [sp, #36]	; 0x24
 80122e4:	f7ff ff2e 	bl	8012144 <__exponent>
 80122e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122ea:	1813      	adds	r3, r2, r0
 80122ec:	2a01      	cmp	r2, #1
 80122ee:	4681      	mov	r9, r0
 80122f0:	6123      	str	r3, [r4, #16]
 80122f2:	dc02      	bgt.n	80122fa <_printf_float+0x14e>
 80122f4:	6822      	ldr	r2, [r4, #0]
 80122f6:	07d1      	lsls	r1, r2, #31
 80122f8:	d501      	bpl.n	80122fe <_printf_float+0x152>
 80122fa:	3301      	adds	r3, #1
 80122fc:	6123      	str	r3, [r4, #16]
 80122fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012302:	2b00      	cmp	r3, #0
 8012304:	d0a5      	beq.n	8012252 <_printf_float+0xa6>
 8012306:	232d      	movs	r3, #45	; 0x2d
 8012308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801230c:	e7a1      	b.n	8012252 <_printf_float+0xa6>
 801230e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012312:	f000 8177 	beq.w	8012604 <_printf_float+0x458>
 8012316:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801231a:	d1bb      	bne.n	8012294 <_printf_float+0xe8>
 801231c:	2900      	cmp	r1, #0
 801231e:	d1b9      	bne.n	8012294 <_printf_float+0xe8>
 8012320:	2301      	movs	r3, #1
 8012322:	e7b6      	b.n	8012292 <_printf_float+0xe6>
 8012324:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012328:	d119      	bne.n	801235e <_printf_float+0x1b2>
 801232a:	2900      	cmp	r1, #0
 801232c:	6863      	ldr	r3, [r4, #4]
 801232e:	dd0c      	ble.n	801234a <_printf_float+0x19e>
 8012330:	6121      	str	r1, [r4, #16]
 8012332:	b913      	cbnz	r3, 801233a <_printf_float+0x18e>
 8012334:	6822      	ldr	r2, [r4, #0]
 8012336:	07d2      	lsls	r2, r2, #31
 8012338:	d502      	bpl.n	8012340 <_printf_float+0x194>
 801233a:	3301      	adds	r3, #1
 801233c:	440b      	add	r3, r1
 801233e:	6123      	str	r3, [r4, #16]
 8012340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012342:	65a3      	str	r3, [r4, #88]	; 0x58
 8012344:	f04f 0900 	mov.w	r9, #0
 8012348:	e7d9      	b.n	80122fe <_printf_float+0x152>
 801234a:	b913      	cbnz	r3, 8012352 <_printf_float+0x1a6>
 801234c:	6822      	ldr	r2, [r4, #0]
 801234e:	07d0      	lsls	r0, r2, #31
 8012350:	d501      	bpl.n	8012356 <_printf_float+0x1aa>
 8012352:	3302      	adds	r3, #2
 8012354:	e7f3      	b.n	801233e <_printf_float+0x192>
 8012356:	2301      	movs	r3, #1
 8012358:	e7f1      	b.n	801233e <_printf_float+0x192>
 801235a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801235e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012362:	4293      	cmp	r3, r2
 8012364:	db05      	blt.n	8012372 <_printf_float+0x1c6>
 8012366:	6822      	ldr	r2, [r4, #0]
 8012368:	6123      	str	r3, [r4, #16]
 801236a:	07d1      	lsls	r1, r2, #31
 801236c:	d5e8      	bpl.n	8012340 <_printf_float+0x194>
 801236e:	3301      	adds	r3, #1
 8012370:	e7e5      	b.n	801233e <_printf_float+0x192>
 8012372:	2b00      	cmp	r3, #0
 8012374:	bfd4      	ite	le
 8012376:	f1c3 0302 	rsble	r3, r3, #2
 801237a:	2301      	movgt	r3, #1
 801237c:	4413      	add	r3, r2
 801237e:	e7de      	b.n	801233e <_printf_float+0x192>
 8012380:	6823      	ldr	r3, [r4, #0]
 8012382:	055a      	lsls	r2, r3, #21
 8012384:	d407      	bmi.n	8012396 <_printf_float+0x1ea>
 8012386:	6923      	ldr	r3, [r4, #16]
 8012388:	4642      	mov	r2, r8
 801238a:	4631      	mov	r1, r6
 801238c:	4628      	mov	r0, r5
 801238e:	47b8      	blx	r7
 8012390:	3001      	adds	r0, #1
 8012392:	d12b      	bne.n	80123ec <_printf_float+0x240>
 8012394:	e767      	b.n	8012266 <_printf_float+0xba>
 8012396:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801239a:	f240 80dc 	bls.w	8012556 <_printf_float+0x3aa>
 801239e:	2200      	movs	r2, #0
 80123a0:	2300      	movs	r3, #0
 80123a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123a6:	f7f6 fac7 	bl	8008938 <__aeabi_dcmpeq>
 80123aa:	2800      	cmp	r0, #0
 80123ac:	d033      	beq.n	8012416 <_printf_float+0x26a>
 80123ae:	2301      	movs	r3, #1
 80123b0:	4a41      	ldr	r2, [pc, #260]	; (80124b8 <_printf_float+0x30c>)
 80123b2:	4631      	mov	r1, r6
 80123b4:	4628      	mov	r0, r5
 80123b6:	47b8      	blx	r7
 80123b8:	3001      	adds	r0, #1
 80123ba:	f43f af54 	beq.w	8012266 <_printf_float+0xba>
 80123be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123c2:	429a      	cmp	r2, r3
 80123c4:	db02      	blt.n	80123cc <_printf_float+0x220>
 80123c6:	6823      	ldr	r3, [r4, #0]
 80123c8:	07d8      	lsls	r0, r3, #31
 80123ca:	d50f      	bpl.n	80123ec <_printf_float+0x240>
 80123cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123d0:	4631      	mov	r1, r6
 80123d2:	4628      	mov	r0, r5
 80123d4:	47b8      	blx	r7
 80123d6:	3001      	adds	r0, #1
 80123d8:	f43f af45 	beq.w	8012266 <_printf_float+0xba>
 80123dc:	f04f 0800 	mov.w	r8, #0
 80123e0:	f104 091a 	add.w	r9, r4, #26
 80123e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123e6:	3b01      	subs	r3, #1
 80123e8:	4543      	cmp	r3, r8
 80123ea:	dc09      	bgt.n	8012400 <_printf_float+0x254>
 80123ec:	6823      	ldr	r3, [r4, #0]
 80123ee:	079b      	lsls	r3, r3, #30
 80123f0:	f100 8103 	bmi.w	80125fa <_printf_float+0x44e>
 80123f4:	68e0      	ldr	r0, [r4, #12]
 80123f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123f8:	4298      	cmp	r0, r3
 80123fa:	bfb8      	it	lt
 80123fc:	4618      	movlt	r0, r3
 80123fe:	e734      	b.n	801226a <_printf_float+0xbe>
 8012400:	2301      	movs	r3, #1
 8012402:	464a      	mov	r2, r9
 8012404:	4631      	mov	r1, r6
 8012406:	4628      	mov	r0, r5
 8012408:	47b8      	blx	r7
 801240a:	3001      	adds	r0, #1
 801240c:	f43f af2b 	beq.w	8012266 <_printf_float+0xba>
 8012410:	f108 0801 	add.w	r8, r8, #1
 8012414:	e7e6      	b.n	80123e4 <_printf_float+0x238>
 8012416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012418:	2b00      	cmp	r3, #0
 801241a:	dc2b      	bgt.n	8012474 <_printf_float+0x2c8>
 801241c:	2301      	movs	r3, #1
 801241e:	4a26      	ldr	r2, [pc, #152]	; (80124b8 <_printf_float+0x30c>)
 8012420:	4631      	mov	r1, r6
 8012422:	4628      	mov	r0, r5
 8012424:	47b8      	blx	r7
 8012426:	3001      	adds	r0, #1
 8012428:	f43f af1d 	beq.w	8012266 <_printf_float+0xba>
 801242c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801242e:	b923      	cbnz	r3, 801243a <_printf_float+0x28e>
 8012430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012432:	b913      	cbnz	r3, 801243a <_printf_float+0x28e>
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	07d9      	lsls	r1, r3, #31
 8012438:	d5d8      	bpl.n	80123ec <_printf_float+0x240>
 801243a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801243e:	4631      	mov	r1, r6
 8012440:	4628      	mov	r0, r5
 8012442:	47b8      	blx	r7
 8012444:	3001      	adds	r0, #1
 8012446:	f43f af0e 	beq.w	8012266 <_printf_float+0xba>
 801244a:	f04f 0900 	mov.w	r9, #0
 801244e:	f104 0a1a 	add.w	sl, r4, #26
 8012452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012454:	425b      	negs	r3, r3
 8012456:	454b      	cmp	r3, r9
 8012458:	dc01      	bgt.n	801245e <_printf_float+0x2b2>
 801245a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801245c:	e794      	b.n	8012388 <_printf_float+0x1dc>
 801245e:	2301      	movs	r3, #1
 8012460:	4652      	mov	r2, sl
 8012462:	4631      	mov	r1, r6
 8012464:	4628      	mov	r0, r5
 8012466:	47b8      	blx	r7
 8012468:	3001      	adds	r0, #1
 801246a:	f43f aefc 	beq.w	8012266 <_printf_float+0xba>
 801246e:	f109 0901 	add.w	r9, r9, #1
 8012472:	e7ee      	b.n	8012452 <_printf_float+0x2a6>
 8012474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012478:	429a      	cmp	r2, r3
 801247a:	bfa8      	it	ge
 801247c:	461a      	movge	r2, r3
 801247e:	2a00      	cmp	r2, #0
 8012480:	4691      	mov	r9, r2
 8012482:	dd07      	ble.n	8012494 <_printf_float+0x2e8>
 8012484:	4613      	mov	r3, r2
 8012486:	4631      	mov	r1, r6
 8012488:	4642      	mov	r2, r8
 801248a:	4628      	mov	r0, r5
 801248c:	47b8      	blx	r7
 801248e:	3001      	adds	r0, #1
 8012490:	f43f aee9 	beq.w	8012266 <_printf_float+0xba>
 8012494:	f104 031a 	add.w	r3, r4, #26
 8012498:	f04f 0b00 	mov.w	fp, #0
 801249c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80124a0:	9306      	str	r3, [sp, #24]
 80124a2:	e015      	b.n	80124d0 <_printf_float+0x324>
 80124a4:	7fefffff 	.word	0x7fefffff
 80124a8:	08029480 	.word	0x08029480
 80124ac:	0802947c 	.word	0x0802947c
 80124b0:	08029488 	.word	0x08029488
 80124b4:	08029484 	.word	0x08029484
 80124b8:	0802948c 	.word	0x0802948c
 80124bc:	2301      	movs	r3, #1
 80124be:	9a06      	ldr	r2, [sp, #24]
 80124c0:	4631      	mov	r1, r6
 80124c2:	4628      	mov	r0, r5
 80124c4:	47b8      	blx	r7
 80124c6:	3001      	adds	r0, #1
 80124c8:	f43f aecd 	beq.w	8012266 <_printf_float+0xba>
 80124cc:	f10b 0b01 	add.w	fp, fp, #1
 80124d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80124d4:	ebaa 0309 	sub.w	r3, sl, r9
 80124d8:	455b      	cmp	r3, fp
 80124da:	dcef      	bgt.n	80124bc <_printf_float+0x310>
 80124dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80124e0:	429a      	cmp	r2, r3
 80124e2:	44d0      	add	r8, sl
 80124e4:	db15      	blt.n	8012512 <_printf_float+0x366>
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	07da      	lsls	r2, r3, #31
 80124ea:	d412      	bmi.n	8012512 <_printf_float+0x366>
 80124ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124f0:	eba3 020a 	sub.w	r2, r3, sl
 80124f4:	eba3 0a01 	sub.w	sl, r3, r1
 80124f8:	4592      	cmp	sl, r2
 80124fa:	bfa8      	it	ge
 80124fc:	4692      	movge	sl, r2
 80124fe:	f1ba 0f00 	cmp.w	sl, #0
 8012502:	dc0e      	bgt.n	8012522 <_printf_float+0x376>
 8012504:	f04f 0800 	mov.w	r8, #0
 8012508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801250c:	f104 091a 	add.w	r9, r4, #26
 8012510:	e019      	b.n	8012546 <_printf_float+0x39a>
 8012512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012516:	4631      	mov	r1, r6
 8012518:	4628      	mov	r0, r5
 801251a:	47b8      	blx	r7
 801251c:	3001      	adds	r0, #1
 801251e:	d1e5      	bne.n	80124ec <_printf_float+0x340>
 8012520:	e6a1      	b.n	8012266 <_printf_float+0xba>
 8012522:	4653      	mov	r3, sl
 8012524:	4642      	mov	r2, r8
 8012526:	4631      	mov	r1, r6
 8012528:	4628      	mov	r0, r5
 801252a:	47b8      	blx	r7
 801252c:	3001      	adds	r0, #1
 801252e:	d1e9      	bne.n	8012504 <_printf_float+0x358>
 8012530:	e699      	b.n	8012266 <_printf_float+0xba>
 8012532:	2301      	movs	r3, #1
 8012534:	464a      	mov	r2, r9
 8012536:	4631      	mov	r1, r6
 8012538:	4628      	mov	r0, r5
 801253a:	47b8      	blx	r7
 801253c:	3001      	adds	r0, #1
 801253e:	f43f ae92 	beq.w	8012266 <_printf_float+0xba>
 8012542:	f108 0801 	add.w	r8, r8, #1
 8012546:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801254a:	1a9b      	subs	r3, r3, r2
 801254c:	eba3 030a 	sub.w	r3, r3, sl
 8012550:	4543      	cmp	r3, r8
 8012552:	dcee      	bgt.n	8012532 <_printf_float+0x386>
 8012554:	e74a      	b.n	80123ec <_printf_float+0x240>
 8012556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012558:	2a01      	cmp	r2, #1
 801255a:	dc01      	bgt.n	8012560 <_printf_float+0x3b4>
 801255c:	07db      	lsls	r3, r3, #31
 801255e:	d53a      	bpl.n	80125d6 <_printf_float+0x42a>
 8012560:	2301      	movs	r3, #1
 8012562:	4642      	mov	r2, r8
 8012564:	4631      	mov	r1, r6
 8012566:	4628      	mov	r0, r5
 8012568:	47b8      	blx	r7
 801256a:	3001      	adds	r0, #1
 801256c:	f43f ae7b 	beq.w	8012266 <_printf_float+0xba>
 8012570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012574:	4631      	mov	r1, r6
 8012576:	4628      	mov	r0, r5
 8012578:	47b8      	blx	r7
 801257a:	3001      	adds	r0, #1
 801257c:	f108 0801 	add.w	r8, r8, #1
 8012580:	f43f ae71 	beq.w	8012266 <_printf_float+0xba>
 8012584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012586:	2200      	movs	r2, #0
 8012588:	f103 3aff 	add.w	sl, r3, #4294967295
 801258c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012590:	2300      	movs	r3, #0
 8012592:	f7f6 f9d1 	bl	8008938 <__aeabi_dcmpeq>
 8012596:	b9c8      	cbnz	r0, 80125cc <_printf_float+0x420>
 8012598:	4653      	mov	r3, sl
 801259a:	4642      	mov	r2, r8
 801259c:	4631      	mov	r1, r6
 801259e:	4628      	mov	r0, r5
 80125a0:	47b8      	blx	r7
 80125a2:	3001      	adds	r0, #1
 80125a4:	d10e      	bne.n	80125c4 <_printf_float+0x418>
 80125a6:	e65e      	b.n	8012266 <_printf_float+0xba>
 80125a8:	2301      	movs	r3, #1
 80125aa:	4652      	mov	r2, sl
 80125ac:	4631      	mov	r1, r6
 80125ae:	4628      	mov	r0, r5
 80125b0:	47b8      	blx	r7
 80125b2:	3001      	adds	r0, #1
 80125b4:	f43f ae57 	beq.w	8012266 <_printf_float+0xba>
 80125b8:	f108 0801 	add.w	r8, r8, #1
 80125bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125be:	3b01      	subs	r3, #1
 80125c0:	4543      	cmp	r3, r8
 80125c2:	dcf1      	bgt.n	80125a8 <_printf_float+0x3fc>
 80125c4:	464b      	mov	r3, r9
 80125c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80125ca:	e6de      	b.n	801238a <_printf_float+0x1de>
 80125cc:	f04f 0800 	mov.w	r8, #0
 80125d0:	f104 0a1a 	add.w	sl, r4, #26
 80125d4:	e7f2      	b.n	80125bc <_printf_float+0x410>
 80125d6:	2301      	movs	r3, #1
 80125d8:	e7df      	b.n	801259a <_printf_float+0x3ee>
 80125da:	2301      	movs	r3, #1
 80125dc:	464a      	mov	r2, r9
 80125de:	4631      	mov	r1, r6
 80125e0:	4628      	mov	r0, r5
 80125e2:	47b8      	blx	r7
 80125e4:	3001      	adds	r0, #1
 80125e6:	f43f ae3e 	beq.w	8012266 <_printf_float+0xba>
 80125ea:	f108 0801 	add.w	r8, r8, #1
 80125ee:	68e3      	ldr	r3, [r4, #12]
 80125f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80125f2:	1a9b      	subs	r3, r3, r2
 80125f4:	4543      	cmp	r3, r8
 80125f6:	dcf0      	bgt.n	80125da <_printf_float+0x42e>
 80125f8:	e6fc      	b.n	80123f4 <_printf_float+0x248>
 80125fa:	f04f 0800 	mov.w	r8, #0
 80125fe:	f104 0919 	add.w	r9, r4, #25
 8012602:	e7f4      	b.n	80125ee <_printf_float+0x442>
 8012604:	2900      	cmp	r1, #0
 8012606:	f43f ae8b 	beq.w	8012320 <_printf_float+0x174>
 801260a:	2300      	movs	r3, #0
 801260c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012610:	ab09      	add	r3, sp, #36	; 0x24
 8012612:	9300      	str	r3, [sp, #0]
 8012614:	ec49 8b10 	vmov	d0, r8, r9
 8012618:	6022      	str	r2, [r4, #0]
 801261a:	f8cd a004 	str.w	sl, [sp, #4]
 801261e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012622:	4628      	mov	r0, r5
 8012624:	f7ff fd2d 	bl	8012082 <__cvt>
 8012628:	4680      	mov	r8, r0
 801262a:	e648      	b.n	80122be <_printf_float+0x112>

0801262c <_printf_common>:
 801262c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012630:	4691      	mov	r9, r2
 8012632:	461f      	mov	r7, r3
 8012634:	688a      	ldr	r2, [r1, #8]
 8012636:	690b      	ldr	r3, [r1, #16]
 8012638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801263c:	4293      	cmp	r3, r2
 801263e:	bfb8      	it	lt
 8012640:	4613      	movlt	r3, r2
 8012642:	f8c9 3000 	str.w	r3, [r9]
 8012646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801264a:	4606      	mov	r6, r0
 801264c:	460c      	mov	r4, r1
 801264e:	b112      	cbz	r2, 8012656 <_printf_common+0x2a>
 8012650:	3301      	adds	r3, #1
 8012652:	f8c9 3000 	str.w	r3, [r9]
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	0699      	lsls	r1, r3, #26
 801265a:	bf42      	ittt	mi
 801265c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012660:	3302      	addmi	r3, #2
 8012662:	f8c9 3000 	strmi.w	r3, [r9]
 8012666:	6825      	ldr	r5, [r4, #0]
 8012668:	f015 0506 	ands.w	r5, r5, #6
 801266c:	d107      	bne.n	801267e <_printf_common+0x52>
 801266e:	f104 0a19 	add.w	sl, r4, #25
 8012672:	68e3      	ldr	r3, [r4, #12]
 8012674:	f8d9 2000 	ldr.w	r2, [r9]
 8012678:	1a9b      	subs	r3, r3, r2
 801267a:	42ab      	cmp	r3, r5
 801267c:	dc28      	bgt.n	80126d0 <_printf_common+0xa4>
 801267e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012682:	6822      	ldr	r2, [r4, #0]
 8012684:	3300      	adds	r3, #0
 8012686:	bf18      	it	ne
 8012688:	2301      	movne	r3, #1
 801268a:	0692      	lsls	r2, r2, #26
 801268c:	d42d      	bmi.n	80126ea <_printf_common+0xbe>
 801268e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012692:	4639      	mov	r1, r7
 8012694:	4630      	mov	r0, r6
 8012696:	47c0      	blx	r8
 8012698:	3001      	adds	r0, #1
 801269a:	d020      	beq.n	80126de <_printf_common+0xb2>
 801269c:	6823      	ldr	r3, [r4, #0]
 801269e:	68e5      	ldr	r5, [r4, #12]
 80126a0:	f8d9 2000 	ldr.w	r2, [r9]
 80126a4:	f003 0306 	and.w	r3, r3, #6
 80126a8:	2b04      	cmp	r3, #4
 80126aa:	bf08      	it	eq
 80126ac:	1aad      	subeq	r5, r5, r2
 80126ae:	68a3      	ldr	r3, [r4, #8]
 80126b0:	6922      	ldr	r2, [r4, #16]
 80126b2:	bf0c      	ite	eq
 80126b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80126b8:	2500      	movne	r5, #0
 80126ba:	4293      	cmp	r3, r2
 80126bc:	bfc4      	itt	gt
 80126be:	1a9b      	subgt	r3, r3, r2
 80126c0:	18ed      	addgt	r5, r5, r3
 80126c2:	f04f 0900 	mov.w	r9, #0
 80126c6:	341a      	adds	r4, #26
 80126c8:	454d      	cmp	r5, r9
 80126ca:	d11a      	bne.n	8012702 <_printf_common+0xd6>
 80126cc:	2000      	movs	r0, #0
 80126ce:	e008      	b.n	80126e2 <_printf_common+0xb6>
 80126d0:	2301      	movs	r3, #1
 80126d2:	4652      	mov	r2, sl
 80126d4:	4639      	mov	r1, r7
 80126d6:	4630      	mov	r0, r6
 80126d8:	47c0      	blx	r8
 80126da:	3001      	adds	r0, #1
 80126dc:	d103      	bne.n	80126e6 <_printf_common+0xba>
 80126de:	f04f 30ff 	mov.w	r0, #4294967295
 80126e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126e6:	3501      	adds	r5, #1
 80126e8:	e7c3      	b.n	8012672 <_printf_common+0x46>
 80126ea:	18e1      	adds	r1, r4, r3
 80126ec:	1c5a      	adds	r2, r3, #1
 80126ee:	2030      	movs	r0, #48	; 0x30
 80126f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80126f4:	4422      	add	r2, r4
 80126f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80126fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80126fe:	3302      	adds	r3, #2
 8012700:	e7c5      	b.n	801268e <_printf_common+0x62>
 8012702:	2301      	movs	r3, #1
 8012704:	4622      	mov	r2, r4
 8012706:	4639      	mov	r1, r7
 8012708:	4630      	mov	r0, r6
 801270a:	47c0      	blx	r8
 801270c:	3001      	adds	r0, #1
 801270e:	d0e6      	beq.n	80126de <_printf_common+0xb2>
 8012710:	f109 0901 	add.w	r9, r9, #1
 8012714:	e7d8      	b.n	80126c8 <_printf_common+0x9c>
	...

08012718 <_printf_i>:
 8012718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801271c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012720:	460c      	mov	r4, r1
 8012722:	7e09      	ldrb	r1, [r1, #24]
 8012724:	b085      	sub	sp, #20
 8012726:	296e      	cmp	r1, #110	; 0x6e
 8012728:	4617      	mov	r7, r2
 801272a:	4606      	mov	r6, r0
 801272c:	4698      	mov	r8, r3
 801272e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012730:	f000 80b3 	beq.w	801289a <_printf_i+0x182>
 8012734:	d822      	bhi.n	801277c <_printf_i+0x64>
 8012736:	2963      	cmp	r1, #99	; 0x63
 8012738:	d036      	beq.n	80127a8 <_printf_i+0x90>
 801273a:	d80a      	bhi.n	8012752 <_printf_i+0x3a>
 801273c:	2900      	cmp	r1, #0
 801273e:	f000 80b9 	beq.w	80128b4 <_printf_i+0x19c>
 8012742:	2958      	cmp	r1, #88	; 0x58
 8012744:	f000 8083 	beq.w	801284e <_printf_i+0x136>
 8012748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801274c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012750:	e032      	b.n	80127b8 <_printf_i+0xa0>
 8012752:	2964      	cmp	r1, #100	; 0x64
 8012754:	d001      	beq.n	801275a <_printf_i+0x42>
 8012756:	2969      	cmp	r1, #105	; 0x69
 8012758:	d1f6      	bne.n	8012748 <_printf_i+0x30>
 801275a:	6820      	ldr	r0, [r4, #0]
 801275c:	6813      	ldr	r3, [r2, #0]
 801275e:	0605      	lsls	r5, r0, #24
 8012760:	f103 0104 	add.w	r1, r3, #4
 8012764:	d52a      	bpl.n	80127bc <_printf_i+0xa4>
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	6011      	str	r1, [r2, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	da03      	bge.n	8012776 <_printf_i+0x5e>
 801276e:	222d      	movs	r2, #45	; 0x2d
 8012770:	425b      	negs	r3, r3
 8012772:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012776:	486f      	ldr	r0, [pc, #444]	; (8012934 <_printf_i+0x21c>)
 8012778:	220a      	movs	r2, #10
 801277a:	e039      	b.n	80127f0 <_printf_i+0xd8>
 801277c:	2973      	cmp	r1, #115	; 0x73
 801277e:	f000 809d 	beq.w	80128bc <_printf_i+0x1a4>
 8012782:	d808      	bhi.n	8012796 <_printf_i+0x7e>
 8012784:	296f      	cmp	r1, #111	; 0x6f
 8012786:	d020      	beq.n	80127ca <_printf_i+0xb2>
 8012788:	2970      	cmp	r1, #112	; 0x70
 801278a:	d1dd      	bne.n	8012748 <_printf_i+0x30>
 801278c:	6823      	ldr	r3, [r4, #0]
 801278e:	f043 0320 	orr.w	r3, r3, #32
 8012792:	6023      	str	r3, [r4, #0]
 8012794:	e003      	b.n	801279e <_printf_i+0x86>
 8012796:	2975      	cmp	r1, #117	; 0x75
 8012798:	d017      	beq.n	80127ca <_printf_i+0xb2>
 801279a:	2978      	cmp	r1, #120	; 0x78
 801279c:	d1d4      	bne.n	8012748 <_printf_i+0x30>
 801279e:	2378      	movs	r3, #120	; 0x78
 80127a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80127a4:	4864      	ldr	r0, [pc, #400]	; (8012938 <_printf_i+0x220>)
 80127a6:	e055      	b.n	8012854 <_printf_i+0x13c>
 80127a8:	6813      	ldr	r3, [r2, #0]
 80127aa:	1d19      	adds	r1, r3, #4
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6011      	str	r1, [r2, #0]
 80127b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80127b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80127b8:	2301      	movs	r3, #1
 80127ba:	e08c      	b.n	80128d6 <_printf_i+0x1be>
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	6011      	str	r1, [r2, #0]
 80127c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80127c4:	bf18      	it	ne
 80127c6:	b21b      	sxthne	r3, r3
 80127c8:	e7cf      	b.n	801276a <_printf_i+0x52>
 80127ca:	6813      	ldr	r3, [r2, #0]
 80127cc:	6825      	ldr	r5, [r4, #0]
 80127ce:	1d18      	adds	r0, r3, #4
 80127d0:	6010      	str	r0, [r2, #0]
 80127d2:	0628      	lsls	r0, r5, #24
 80127d4:	d501      	bpl.n	80127da <_printf_i+0xc2>
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	e002      	b.n	80127e0 <_printf_i+0xc8>
 80127da:	0668      	lsls	r0, r5, #25
 80127dc:	d5fb      	bpl.n	80127d6 <_printf_i+0xbe>
 80127de:	881b      	ldrh	r3, [r3, #0]
 80127e0:	4854      	ldr	r0, [pc, #336]	; (8012934 <_printf_i+0x21c>)
 80127e2:	296f      	cmp	r1, #111	; 0x6f
 80127e4:	bf14      	ite	ne
 80127e6:	220a      	movne	r2, #10
 80127e8:	2208      	moveq	r2, #8
 80127ea:	2100      	movs	r1, #0
 80127ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80127f0:	6865      	ldr	r5, [r4, #4]
 80127f2:	60a5      	str	r5, [r4, #8]
 80127f4:	2d00      	cmp	r5, #0
 80127f6:	f2c0 8095 	blt.w	8012924 <_printf_i+0x20c>
 80127fa:	6821      	ldr	r1, [r4, #0]
 80127fc:	f021 0104 	bic.w	r1, r1, #4
 8012800:	6021      	str	r1, [r4, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d13d      	bne.n	8012882 <_printf_i+0x16a>
 8012806:	2d00      	cmp	r5, #0
 8012808:	f040 808e 	bne.w	8012928 <_printf_i+0x210>
 801280c:	4665      	mov	r5, ip
 801280e:	2a08      	cmp	r2, #8
 8012810:	d10b      	bne.n	801282a <_printf_i+0x112>
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	07db      	lsls	r3, r3, #31
 8012816:	d508      	bpl.n	801282a <_printf_i+0x112>
 8012818:	6923      	ldr	r3, [r4, #16]
 801281a:	6862      	ldr	r2, [r4, #4]
 801281c:	429a      	cmp	r2, r3
 801281e:	bfde      	ittt	le
 8012820:	2330      	movle	r3, #48	; 0x30
 8012822:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012826:	f105 35ff 	addle.w	r5, r5, #4294967295
 801282a:	ebac 0305 	sub.w	r3, ip, r5
 801282e:	6123      	str	r3, [r4, #16]
 8012830:	f8cd 8000 	str.w	r8, [sp]
 8012834:	463b      	mov	r3, r7
 8012836:	aa03      	add	r2, sp, #12
 8012838:	4621      	mov	r1, r4
 801283a:	4630      	mov	r0, r6
 801283c:	f7ff fef6 	bl	801262c <_printf_common>
 8012840:	3001      	adds	r0, #1
 8012842:	d14d      	bne.n	80128e0 <_printf_i+0x1c8>
 8012844:	f04f 30ff 	mov.w	r0, #4294967295
 8012848:	b005      	add	sp, #20
 801284a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801284e:	4839      	ldr	r0, [pc, #228]	; (8012934 <_printf_i+0x21c>)
 8012850:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012854:	6813      	ldr	r3, [r2, #0]
 8012856:	6821      	ldr	r1, [r4, #0]
 8012858:	1d1d      	adds	r5, r3, #4
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	6015      	str	r5, [r2, #0]
 801285e:	060a      	lsls	r2, r1, #24
 8012860:	d50b      	bpl.n	801287a <_printf_i+0x162>
 8012862:	07ca      	lsls	r2, r1, #31
 8012864:	bf44      	itt	mi
 8012866:	f041 0120 	orrmi.w	r1, r1, #32
 801286a:	6021      	strmi	r1, [r4, #0]
 801286c:	b91b      	cbnz	r3, 8012876 <_printf_i+0x15e>
 801286e:	6822      	ldr	r2, [r4, #0]
 8012870:	f022 0220 	bic.w	r2, r2, #32
 8012874:	6022      	str	r2, [r4, #0]
 8012876:	2210      	movs	r2, #16
 8012878:	e7b7      	b.n	80127ea <_printf_i+0xd2>
 801287a:	064d      	lsls	r5, r1, #25
 801287c:	bf48      	it	mi
 801287e:	b29b      	uxthmi	r3, r3
 8012880:	e7ef      	b.n	8012862 <_printf_i+0x14a>
 8012882:	4665      	mov	r5, ip
 8012884:	fbb3 f1f2 	udiv	r1, r3, r2
 8012888:	fb02 3311 	mls	r3, r2, r1, r3
 801288c:	5cc3      	ldrb	r3, [r0, r3]
 801288e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012892:	460b      	mov	r3, r1
 8012894:	2900      	cmp	r1, #0
 8012896:	d1f5      	bne.n	8012884 <_printf_i+0x16c>
 8012898:	e7b9      	b.n	801280e <_printf_i+0xf6>
 801289a:	6813      	ldr	r3, [r2, #0]
 801289c:	6825      	ldr	r5, [r4, #0]
 801289e:	6961      	ldr	r1, [r4, #20]
 80128a0:	1d18      	adds	r0, r3, #4
 80128a2:	6010      	str	r0, [r2, #0]
 80128a4:	0628      	lsls	r0, r5, #24
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	d501      	bpl.n	80128ae <_printf_i+0x196>
 80128aa:	6019      	str	r1, [r3, #0]
 80128ac:	e002      	b.n	80128b4 <_printf_i+0x19c>
 80128ae:	066a      	lsls	r2, r5, #25
 80128b0:	d5fb      	bpl.n	80128aa <_printf_i+0x192>
 80128b2:	8019      	strh	r1, [r3, #0]
 80128b4:	2300      	movs	r3, #0
 80128b6:	6123      	str	r3, [r4, #16]
 80128b8:	4665      	mov	r5, ip
 80128ba:	e7b9      	b.n	8012830 <_printf_i+0x118>
 80128bc:	6813      	ldr	r3, [r2, #0]
 80128be:	1d19      	adds	r1, r3, #4
 80128c0:	6011      	str	r1, [r2, #0]
 80128c2:	681d      	ldr	r5, [r3, #0]
 80128c4:	6862      	ldr	r2, [r4, #4]
 80128c6:	2100      	movs	r1, #0
 80128c8:	4628      	mov	r0, r5
 80128ca:	f7f5 fbc1 	bl	8008050 <memchr>
 80128ce:	b108      	cbz	r0, 80128d4 <_printf_i+0x1bc>
 80128d0:	1b40      	subs	r0, r0, r5
 80128d2:	6060      	str	r0, [r4, #4]
 80128d4:	6863      	ldr	r3, [r4, #4]
 80128d6:	6123      	str	r3, [r4, #16]
 80128d8:	2300      	movs	r3, #0
 80128da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128de:	e7a7      	b.n	8012830 <_printf_i+0x118>
 80128e0:	6923      	ldr	r3, [r4, #16]
 80128e2:	462a      	mov	r2, r5
 80128e4:	4639      	mov	r1, r7
 80128e6:	4630      	mov	r0, r6
 80128e8:	47c0      	blx	r8
 80128ea:	3001      	adds	r0, #1
 80128ec:	d0aa      	beq.n	8012844 <_printf_i+0x12c>
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	079b      	lsls	r3, r3, #30
 80128f2:	d413      	bmi.n	801291c <_printf_i+0x204>
 80128f4:	68e0      	ldr	r0, [r4, #12]
 80128f6:	9b03      	ldr	r3, [sp, #12]
 80128f8:	4298      	cmp	r0, r3
 80128fa:	bfb8      	it	lt
 80128fc:	4618      	movlt	r0, r3
 80128fe:	e7a3      	b.n	8012848 <_printf_i+0x130>
 8012900:	2301      	movs	r3, #1
 8012902:	464a      	mov	r2, r9
 8012904:	4639      	mov	r1, r7
 8012906:	4630      	mov	r0, r6
 8012908:	47c0      	blx	r8
 801290a:	3001      	adds	r0, #1
 801290c:	d09a      	beq.n	8012844 <_printf_i+0x12c>
 801290e:	3501      	adds	r5, #1
 8012910:	68e3      	ldr	r3, [r4, #12]
 8012912:	9a03      	ldr	r2, [sp, #12]
 8012914:	1a9b      	subs	r3, r3, r2
 8012916:	42ab      	cmp	r3, r5
 8012918:	dcf2      	bgt.n	8012900 <_printf_i+0x1e8>
 801291a:	e7eb      	b.n	80128f4 <_printf_i+0x1dc>
 801291c:	2500      	movs	r5, #0
 801291e:	f104 0919 	add.w	r9, r4, #25
 8012922:	e7f5      	b.n	8012910 <_printf_i+0x1f8>
 8012924:	2b00      	cmp	r3, #0
 8012926:	d1ac      	bne.n	8012882 <_printf_i+0x16a>
 8012928:	7803      	ldrb	r3, [r0, #0]
 801292a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801292e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012932:	e76c      	b.n	801280e <_printf_i+0xf6>
 8012934:	0802948e 	.word	0x0802948e
 8012938:	0802949f 	.word	0x0802949f

0801293c <iprintf>:
 801293c:	b40f      	push	{r0, r1, r2, r3}
 801293e:	4b0a      	ldr	r3, [pc, #40]	; (8012968 <iprintf+0x2c>)
 8012940:	b513      	push	{r0, r1, r4, lr}
 8012942:	681c      	ldr	r4, [r3, #0]
 8012944:	b124      	cbz	r4, 8012950 <iprintf+0x14>
 8012946:	69a3      	ldr	r3, [r4, #24]
 8012948:	b913      	cbnz	r3, 8012950 <iprintf+0x14>
 801294a:	4620      	mov	r0, r4
 801294c:	f001 f868 	bl	8013a20 <__sinit>
 8012950:	ab05      	add	r3, sp, #20
 8012952:	9a04      	ldr	r2, [sp, #16]
 8012954:	68a1      	ldr	r1, [r4, #8]
 8012956:	9301      	str	r3, [sp, #4]
 8012958:	4620      	mov	r0, r4
 801295a:	f001 fd21 	bl	80143a0 <_vfiprintf_r>
 801295e:	b002      	add	sp, #8
 8012960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012964:	b004      	add	sp, #16
 8012966:	4770      	bx	lr
 8012968:	20000010 	.word	0x20000010

0801296c <_puts_r>:
 801296c:	b570      	push	{r4, r5, r6, lr}
 801296e:	460e      	mov	r6, r1
 8012970:	4605      	mov	r5, r0
 8012972:	b118      	cbz	r0, 801297c <_puts_r+0x10>
 8012974:	6983      	ldr	r3, [r0, #24]
 8012976:	b90b      	cbnz	r3, 801297c <_puts_r+0x10>
 8012978:	f001 f852 	bl	8013a20 <__sinit>
 801297c:	69ab      	ldr	r3, [r5, #24]
 801297e:	68ac      	ldr	r4, [r5, #8]
 8012980:	b913      	cbnz	r3, 8012988 <_puts_r+0x1c>
 8012982:	4628      	mov	r0, r5
 8012984:	f001 f84c 	bl	8013a20 <__sinit>
 8012988:	4b23      	ldr	r3, [pc, #140]	; (8012a18 <_puts_r+0xac>)
 801298a:	429c      	cmp	r4, r3
 801298c:	d117      	bne.n	80129be <_puts_r+0x52>
 801298e:	686c      	ldr	r4, [r5, #4]
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	071b      	lsls	r3, r3, #28
 8012994:	d51d      	bpl.n	80129d2 <_puts_r+0x66>
 8012996:	6923      	ldr	r3, [r4, #16]
 8012998:	b1db      	cbz	r3, 80129d2 <_puts_r+0x66>
 801299a:	3e01      	subs	r6, #1
 801299c:	68a3      	ldr	r3, [r4, #8]
 801299e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80129a2:	3b01      	subs	r3, #1
 80129a4:	60a3      	str	r3, [r4, #8]
 80129a6:	b9e9      	cbnz	r1, 80129e4 <_puts_r+0x78>
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	da2e      	bge.n	8012a0a <_puts_r+0x9e>
 80129ac:	4622      	mov	r2, r4
 80129ae:	210a      	movs	r1, #10
 80129b0:	4628      	mov	r0, r5
 80129b2:	f000 f83f 	bl	8012a34 <__swbuf_r>
 80129b6:	3001      	adds	r0, #1
 80129b8:	d011      	beq.n	80129de <_puts_r+0x72>
 80129ba:	200a      	movs	r0, #10
 80129bc:	e011      	b.n	80129e2 <_puts_r+0x76>
 80129be:	4b17      	ldr	r3, [pc, #92]	; (8012a1c <_puts_r+0xb0>)
 80129c0:	429c      	cmp	r4, r3
 80129c2:	d101      	bne.n	80129c8 <_puts_r+0x5c>
 80129c4:	68ac      	ldr	r4, [r5, #8]
 80129c6:	e7e3      	b.n	8012990 <_puts_r+0x24>
 80129c8:	4b15      	ldr	r3, [pc, #84]	; (8012a20 <_puts_r+0xb4>)
 80129ca:	429c      	cmp	r4, r3
 80129cc:	bf08      	it	eq
 80129ce:	68ec      	ldreq	r4, [r5, #12]
 80129d0:	e7de      	b.n	8012990 <_puts_r+0x24>
 80129d2:	4621      	mov	r1, r4
 80129d4:	4628      	mov	r0, r5
 80129d6:	f000 f87f 	bl	8012ad8 <__swsetup_r>
 80129da:	2800      	cmp	r0, #0
 80129dc:	d0dd      	beq.n	801299a <_puts_r+0x2e>
 80129de:	f04f 30ff 	mov.w	r0, #4294967295
 80129e2:	bd70      	pop	{r4, r5, r6, pc}
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	da04      	bge.n	80129f2 <_puts_r+0x86>
 80129e8:	69a2      	ldr	r2, [r4, #24]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	dc06      	bgt.n	80129fc <_puts_r+0x90>
 80129ee:	290a      	cmp	r1, #10
 80129f0:	d004      	beq.n	80129fc <_puts_r+0x90>
 80129f2:	6823      	ldr	r3, [r4, #0]
 80129f4:	1c5a      	adds	r2, r3, #1
 80129f6:	6022      	str	r2, [r4, #0]
 80129f8:	7019      	strb	r1, [r3, #0]
 80129fa:	e7cf      	b.n	801299c <_puts_r+0x30>
 80129fc:	4622      	mov	r2, r4
 80129fe:	4628      	mov	r0, r5
 8012a00:	f000 f818 	bl	8012a34 <__swbuf_r>
 8012a04:	3001      	adds	r0, #1
 8012a06:	d1c9      	bne.n	801299c <_puts_r+0x30>
 8012a08:	e7e9      	b.n	80129de <_puts_r+0x72>
 8012a0a:	6823      	ldr	r3, [r4, #0]
 8012a0c:	200a      	movs	r0, #10
 8012a0e:	1c5a      	adds	r2, r3, #1
 8012a10:	6022      	str	r2, [r4, #0]
 8012a12:	7018      	strb	r0, [r3, #0]
 8012a14:	e7e5      	b.n	80129e2 <_puts_r+0x76>
 8012a16:	bf00      	nop
 8012a18:	080294e0 	.word	0x080294e0
 8012a1c:	08029500 	.word	0x08029500
 8012a20:	080294c0 	.word	0x080294c0

08012a24 <puts>:
 8012a24:	4b02      	ldr	r3, [pc, #8]	; (8012a30 <puts+0xc>)
 8012a26:	4601      	mov	r1, r0
 8012a28:	6818      	ldr	r0, [r3, #0]
 8012a2a:	f7ff bf9f 	b.w	801296c <_puts_r>
 8012a2e:	bf00      	nop
 8012a30:	20000010 	.word	0x20000010

08012a34 <__swbuf_r>:
 8012a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a36:	460e      	mov	r6, r1
 8012a38:	4614      	mov	r4, r2
 8012a3a:	4605      	mov	r5, r0
 8012a3c:	b118      	cbz	r0, 8012a46 <__swbuf_r+0x12>
 8012a3e:	6983      	ldr	r3, [r0, #24]
 8012a40:	b90b      	cbnz	r3, 8012a46 <__swbuf_r+0x12>
 8012a42:	f000 ffed 	bl	8013a20 <__sinit>
 8012a46:	4b21      	ldr	r3, [pc, #132]	; (8012acc <__swbuf_r+0x98>)
 8012a48:	429c      	cmp	r4, r3
 8012a4a:	d12a      	bne.n	8012aa2 <__swbuf_r+0x6e>
 8012a4c:	686c      	ldr	r4, [r5, #4]
 8012a4e:	69a3      	ldr	r3, [r4, #24]
 8012a50:	60a3      	str	r3, [r4, #8]
 8012a52:	89a3      	ldrh	r3, [r4, #12]
 8012a54:	071a      	lsls	r2, r3, #28
 8012a56:	d52e      	bpl.n	8012ab6 <__swbuf_r+0x82>
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	b363      	cbz	r3, 8012ab6 <__swbuf_r+0x82>
 8012a5c:	6923      	ldr	r3, [r4, #16]
 8012a5e:	6820      	ldr	r0, [r4, #0]
 8012a60:	1ac0      	subs	r0, r0, r3
 8012a62:	6963      	ldr	r3, [r4, #20]
 8012a64:	b2f6      	uxtb	r6, r6
 8012a66:	4283      	cmp	r3, r0
 8012a68:	4637      	mov	r7, r6
 8012a6a:	dc04      	bgt.n	8012a76 <__swbuf_r+0x42>
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f000 ff6c 	bl	801394c <_fflush_r>
 8012a74:	bb28      	cbnz	r0, 8012ac2 <__swbuf_r+0x8e>
 8012a76:	68a3      	ldr	r3, [r4, #8]
 8012a78:	3b01      	subs	r3, #1
 8012a7a:	60a3      	str	r3, [r4, #8]
 8012a7c:	6823      	ldr	r3, [r4, #0]
 8012a7e:	1c5a      	adds	r2, r3, #1
 8012a80:	6022      	str	r2, [r4, #0]
 8012a82:	701e      	strb	r6, [r3, #0]
 8012a84:	6963      	ldr	r3, [r4, #20]
 8012a86:	3001      	adds	r0, #1
 8012a88:	4283      	cmp	r3, r0
 8012a8a:	d004      	beq.n	8012a96 <__swbuf_r+0x62>
 8012a8c:	89a3      	ldrh	r3, [r4, #12]
 8012a8e:	07db      	lsls	r3, r3, #31
 8012a90:	d519      	bpl.n	8012ac6 <__swbuf_r+0x92>
 8012a92:	2e0a      	cmp	r6, #10
 8012a94:	d117      	bne.n	8012ac6 <__swbuf_r+0x92>
 8012a96:	4621      	mov	r1, r4
 8012a98:	4628      	mov	r0, r5
 8012a9a:	f000 ff57 	bl	801394c <_fflush_r>
 8012a9e:	b190      	cbz	r0, 8012ac6 <__swbuf_r+0x92>
 8012aa0:	e00f      	b.n	8012ac2 <__swbuf_r+0x8e>
 8012aa2:	4b0b      	ldr	r3, [pc, #44]	; (8012ad0 <__swbuf_r+0x9c>)
 8012aa4:	429c      	cmp	r4, r3
 8012aa6:	d101      	bne.n	8012aac <__swbuf_r+0x78>
 8012aa8:	68ac      	ldr	r4, [r5, #8]
 8012aaa:	e7d0      	b.n	8012a4e <__swbuf_r+0x1a>
 8012aac:	4b09      	ldr	r3, [pc, #36]	; (8012ad4 <__swbuf_r+0xa0>)
 8012aae:	429c      	cmp	r4, r3
 8012ab0:	bf08      	it	eq
 8012ab2:	68ec      	ldreq	r4, [r5, #12]
 8012ab4:	e7cb      	b.n	8012a4e <__swbuf_r+0x1a>
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f000 f80d 	bl	8012ad8 <__swsetup_r>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d0cc      	beq.n	8012a5c <__swbuf_r+0x28>
 8012ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8012ac6:	4638      	mov	r0, r7
 8012ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aca:	bf00      	nop
 8012acc:	080294e0 	.word	0x080294e0
 8012ad0:	08029500 	.word	0x08029500
 8012ad4:	080294c0 	.word	0x080294c0

08012ad8 <__swsetup_r>:
 8012ad8:	4b32      	ldr	r3, [pc, #200]	; (8012ba4 <__swsetup_r+0xcc>)
 8012ada:	b570      	push	{r4, r5, r6, lr}
 8012adc:	681d      	ldr	r5, [r3, #0]
 8012ade:	4606      	mov	r6, r0
 8012ae0:	460c      	mov	r4, r1
 8012ae2:	b125      	cbz	r5, 8012aee <__swsetup_r+0x16>
 8012ae4:	69ab      	ldr	r3, [r5, #24]
 8012ae6:	b913      	cbnz	r3, 8012aee <__swsetup_r+0x16>
 8012ae8:	4628      	mov	r0, r5
 8012aea:	f000 ff99 	bl	8013a20 <__sinit>
 8012aee:	4b2e      	ldr	r3, [pc, #184]	; (8012ba8 <__swsetup_r+0xd0>)
 8012af0:	429c      	cmp	r4, r3
 8012af2:	d10f      	bne.n	8012b14 <__swsetup_r+0x3c>
 8012af4:	686c      	ldr	r4, [r5, #4]
 8012af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	0715      	lsls	r5, r2, #28
 8012afe:	d42c      	bmi.n	8012b5a <__swsetup_r+0x82>
 8012b00:	06d0      	lsls	r0, r2, #27
 8012b02:	d411      	bmi.n	8012b28 <__swsetup_r+0x50>
 8012b04:	2209      	movs	r2, #9
 8012b06:	6032      	str	r2, [r6, #0]
 8012b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b0c:	81a3      	strh	r3, [r4, #12]
 8012b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b12:	e03e      	b.n	8012b92 <__swsetup_r+0xba>
 8012b14:	4b25      	ldr	r3, [pc, #148]	; (8012bac <__swsetup_r+0xd4>)
 8012b16:	429c      	cmp	r4, r3
 8012b18:	d101      	bne.n	8012b1e <__swsetup_r+0x46>
 8012b1a:	68ac      	ldr	r4, [r5, #8]
 8012b1c:	e7eb      	b.n	8012af6 <__swsetup_r+0x1e>
 8012b1e:	4b24      	ldr	r3, [pc, #144]	; (8012bb0 <__swsetup_r+0xd8>)
 8012b20:	429c      	cmp	r4, r3
 8012b22:	bf08      	it	eq
 8012b24:	68ec      	ldreq	r4, [r5, #12]
 8012b26:	e7e6      	b.n	8012af6 <__swsetup_r+0x1e>
 8012b28:	0751      	lsls	r1, r2, #29
 8012b2a:	d512      	bpl.n	8012b52 <__swsetup_r+0x7a>
 8012b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b2e:	b141      	cbz	r1, 8012b42 <__swsetup_r+0x6a>
 8012b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b34:	4299      	cmp	r1, r3
 8012b36:	d002      	beq.n	8012b3e <__swsetup_r+0x66>
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f001 fb5f 	bl	80141fc <_free_r>
 8012b3e:	2300      	movs	r3, #0
 8012b40:	6363      	str	r3, [r4, #52]	; 0x34
 8012b42:	89a3      	ldrh	r3, [r4, #12]
 8012b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b48:	81a3      	strh	r3, [r4, #12]
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	6063      	str	r3, [r4, #4]
 8012b4e:	6923      	ldr	r3, [r4, #16]
 8012b50:	6023      	str	r3, [r4, #0]
 8012b52:	89a3      	ldrh	r3, [r4, #12]
 8012b54:	f043 0308 	orr.w	r3, r3, #8
 8012b58:	81a3      	strh	r3, [r4, #12]
 8012b5a:	6923      	ldr	r3, [r4, #16]
 8012b5c:	b94b      	cbnz	r3, 8012b72 <__swsetup_r+0x9a>
 8012b5e:	89a3      	ldrh	r3, [r4, #12]
 8012b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b68:	d003      	beq.n	8012b72 <__swsetup_r+0x9a>
 8012b6a:	4621      	mov	r1, r4
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f001 f813 	bl	8013b98 <__smakebuf_r>
 8012b72:	89a2      	ldrh	r2, [r4, #12]
 8012b74:	f012 0301 	ands.w	r3, r2, #1
 8012b78:	d00c      	beq.n	8012b94 <__swsetup_r+0xbc>
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	60a3      	str	r3, [r4, #8]
 8012b7e:	6963      	ldr	r3, [r4, #20]
 8012b80:	425b      	negs	r3, r3
 8012b82:	61a3      	str	r3, [r4, #24]
 8012b84:	6923      	ldr	r3, [r4, #16]
 8012b86:	b953      	cbnz	r3, 8012b9e <__swsetup_r+0xc6>
 8012b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012b90:	d1ba      	bne.n	8012b08 <__swsetup_r+0x30>
 8012b92:	bd70      	pop	{r4, r5, r6, pc}
 8012b94:	0792      	lsls	r2, r2, #30
 8012b96:	bf58      	it	pl
 8012b98:	6963      	ldrpl	r3, [r4, #20]
 8012b9a:	60a3      	str	r3, [r4, #8]
 8012b9c:	e7f2      	b.n	8012b84 <__swsetup_r+0xac>
 8012b9e:	2000      	movs	r0, #0
 8012ba0:	e7f7      	b.n	8012b92 <__swsetup_r+0xba>
 8012ba2:	bf00      	nop
 8012ba4:	20000010 	.word	0x20000010
 8012ba8:	080294e0 	.word	0x080294e0
 8012bac:	08029500 	.word	0x08029500
 8012bb0:	080294c0 	.word	0x080294c0

08012bb4 <quorem>:
 8012bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb8:	6903      	ldr	r3, [r0, #16]
 8012bba:	690c      	ldr	r4, [r1, #16]
 8012bbc:	42a3      	cmp	r3, r4
 8012bbe:	4680      	mov	r8, r0
 8012bc0:	f2c0 8082 	blt.w	8012cc8 <quorem+0x114>
 8012bc4:	3c01      	subs	r4, #1
 8012bc6:	f101 0714 	add.w	r7, r1, #20
 8012bca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012bce:	f100 0614 	add.w	r6, r0, #20
 8012bd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012bd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012bda:	eb06 030c 	add.w	r3, r6, ip
 8012bde:	3501      	adds	r5, #1
 8012be0:	eb07 090c 	add.w	r9, r7, ip
 8012be4:	9301      	str	r3, [sp, #4]
 8012be6:	fbb0 f5f5 	udiv	r5, r0, r5
 8012bea:	b395      	cbz	r5, 8012c52 <quorem+0x9e>
 8012bec:	f04f 0a00 	mov.w	sl, #0
 8012bf0:	4638      	mov	r0, r7
 8012bf2:	46b6      	mov	lr, r6
 8012bf4:	46d3      	mov	fp, sl
 8012bf6:	f850 2b04 	ldr.w	r2, [r0], #4
 8012bfa:	b293      	uxth	r3, r2
 8012bfc:	fb05 a303 	mla	r3, r5, r3, sl
 8012c00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	ebab 0303 	sub.w	r3, fp, r3
 8012c0a:	0c12      	lsrs	r2, r2, #16
 8012c0c:	f8de b000 	ldr.w	fp, [lr]
 8012c10:	fb05 a202 	mla	r2, r5, r2, sl
 8012c14:	fa13 f38b 	uxtah	r3, r3, fp
 8012c18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012c1c:	fa1f fb82 	uxth.w	fp, r2
 8012c20:	f8de 2000 	ldr.w	r2, [lr]
 8012c24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c32:	4581      	cmp	r9, r0
 8012c34:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012c38:	f84e 3b04 	str.w	r3, [lr], #4
 8012c3c:	d2db      	bcs.n	8012bf6 <quorem+0x42>
 8012c3e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012c42:	b933      	cbnz	r3, 8012c52 <quorem+0x9e>
 8012c44:	9b01      	ldr	r3, [sp, #4]
 8012c46:	3b04      	subs	r3, #4
 8012c48:	429e      	cmp	r6, r3
 8012c4a:	461a      	mov	r2, r3
 8012c4c:	d330      	bcc.n	8012cb0 <quorem+0xfc>
 8012c4e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012c52:	4640      	mov	r0, r8
 8012c54:	f001 f9fe 	bl	8014054 <__mcmp>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	db25      	blt.n	8012ca8 <quorem+0xf4>
 8012c5c:	3501      	adds	r5, #1
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f04f 0c00 	mov.w	ip, #0
 8012c64:	f857 2b04 	ldr.w	r2, [r7], #4
 8012c68:	f8d0 e000 	ldr.w	lr, [r0]
 8012c6c:	b293      	uxth	r3, r2
 8012c6e:	ebac 0303 	sub.w	r3, ip, r3
 8012c72:	0c12      	lsrs	r2, r2, #16
 8012c74:	fa13 f38e 	uxtah	r3, r3, lr
 8012c78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012c7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c86:	45b9      	cmp	r9, r7
 8012c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012c8c:	f840 3b04 	str.w	r3, [r0], #4
 8012c90:	d2e8      	bcs.n	8012c64 <quorem+0xb0>
 8012c92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012c96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012c9a:	b92a      	cbnz	r2, 8012ca8 <quorem+0xf4>
 8012c9c:	3b04      	subs	r3, #4
 8012c9e:	429e      	cmp	r6, r3
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	d30b      	bcc.n	8012cbc <quorem+0x108>
 8012ca4:	f8c8 4010 	str.w	r4, [r8, #16]
 8012ca8:	4628      	mov	r0, r5
 8012caa:	b003      	add	sp, #12
 8012cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb0:	6812      	ldr	r2, [r2, #0]
 8012cb2:	3b04      	subs	r3, #4
 8012cb4:	2a00      	cmp	r2, #0
 8012cb6:	d1ca      	bne.n	8012c4e <quorem+0x9a>
 8012cb8:	3c01      	subs	r4, #1
 8012cba:	e7c5      	b.n	8012c48 <quorem+0x94>
 8012cbc:	6812      	ldr	r2, [r2, #0]
 8012cbe:	3b04      	subs	r3, #4
 8012cc0:	2a00      	cmp	r2, #0
 8012cc2:	d1ef      	bne.n	8012ca4 <quorem+0xf0>
 8012cc4:	3c01      	subs	r4, #1
 8012cc6:	e7ea      	b.n	8012c9e <quorem+0xea>
 8012cc8:	2000      	movs	r0, #0
 8012cca:	e7ee      	b.n	8012caa <quorem+0xf6>
 8012ccc:	0000      	movs	r0, r0
	...

08012cd0 <_dtoa_r>:
 8012cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd4:	ec57 6b10 	vmov	r6, r7, d0
 8012cd8:	b097      	sub	sp, #92	; 0x5c
 8012cda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012cdc:	9106      	str	r1, [sp, #24]
 8012cde:	4604      	mov	r4, r0
 8012ce0:	920b      	str	r2, [sp, #44]	; 0x2c
 8012ce2:	9312      	str	r3, [sp, #72]	; 0x48
 8012ce4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012ce8:	e9cd 6700 	strd	r6, r7, [sp]
 8012cec:	b93d      	cbnz	r5, 8012cfe <_dtoa_r+0x2e>
 8012cee:	2010      	movs	r0, #16
 8012cf0:	f000 ff92 	bl	8013c18 <malloc>
 8012cf4:	6260      	str	r0, [r4, #36]	; 0x24
 8012cf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012cfa:	6005      	str	r5, [r0, #0]
 8012cfc:	60c5      	str	r5, [r0, #12]
 8012cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d00:	6819      	ldr	r1, [r3, #0]
 8012d02:	b151      	cbz	r1, 8012d1a <_dtoa_r+0x4a>
 8012d04:	685a      	ldr	r2, [r3, #4]
 8012d06:	604a      	str	r2, [r1, #4]
 8012d08:	2301      	movs	r3, #1
 8012d0a:	4093      	lsls	r3, r2
 8012d0c:	608b      	str	r3, [r1, #8]
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f000 ffbe 	bl	8013c90 <_Bfree>
 8012d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d16:	2200      	movs	r2, #0
 8012d18:	601a      	str	r2, [r3, #0]
 8012d1a:	1e3b      	subs	r3, r7, #0
 8012d1c:	bfbb      	ittet	lt
 8012d1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012d22:	9301      	strlt	r3, [sp, #4]
 8012d24:	2300      	movge	r3, #0
 8012d26:	2201      	movlt	r2, #1
 8012d28:	bfac      	ite	ge
 8012d2a:	f8c8 3000 	strge.w	r3, [r8]
 8012d2e:	f8c8 2000 	strlt.w	r2, [r8]
 8012d32:	4baf      	ldr	r3, [pc, #700]	; (8012ff0 <_dtoa_r+0x320>)
 8012d34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012d38:	ea33 0308 	bics.w	r3, r3, r8
 8012d3c:	d114      	bne.n	8012d68 <_dtoa_r+0x98>
 8012d3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d40:	f242 730f 	movw	r3, #9999	; 0x270f
 8012d44:	6013      	str	r3, [r2, #0]
 8012d46:	9b00      	ldr	r3, [sp, #0]
 8012d48:	b923      	cbnz	r3, 8012d54 <_dtoa_r+0x84>
 8012d4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	f000 8542 	beq.w	80137d8 <_dtoa_r+0xb08>
 8012d54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013004 <_dtoa_r+0x334>
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	f000 8544 	beq.w	80137e8 <_dtoa_r+0xb18>
 8012d60:	f10b 0303 	add.w	r3, fp, #3
 8012d64:	f000 bd3e 	b.w	80137e4 <_dtoa_r+0xb14>
 8012d68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	2300      	movs	r3, #0
 8012d70:	4630      	mov	r0, r6
 8012d72:	4639      	mov	r1, r7
 8012d74:	f7f5 fde0 	bl	8008938 <__aeabi_dcmpeq>
 8012d78:	4681      	mov	r9, r0
 8012d7a:	b168      	cbz	r0, 8012d98 <_dtoa_r+0xc8>
 8012d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d7e:	2301      	movs	r3, #1
 8012d80:	6013      	str	r3, [r2, #0]
 8012d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f000 8524 	beq.w	80137d2 <_dtoa_r+0xb02>
 8012d8a:	4b9a      	ldr	r3, [pc, #616]	; (8012ff4 <_dtoa_r+0x324>)
 8012d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012d8e:	f103 3bff 	add.w	fp, r3, #4294967295
 8012d92:	6013      	str	r3, [r2, #0]
 8012d94:	f000 bd28 	b.w	80137e8 <_dtoa_r+0xb18>
 8012d98:	aa14      	add	r2, sp, #80	; 0x50
 8012d9a:	a915      	add	r1, sp, #84	; 0x54
 8012d9c:	ec47 6b10 	vmov	d0, r6, r7
 8012da0:	4620      	mov	r0, r4
 8012da2:	f001 f9ce 	bl	8014142 <__d2b>
 8012da6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012daa:	9004      	str	r0, [sp, #16]
 8012dac:	2d00      	cmp	r5, #0
 8012dae:	d07c      	beq.n	8012eaa <_dtoa_r+0x1da>
 8012db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012db4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012db8:	46b2      	mov	sl, r6
 8012dba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012dc2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	4b8b      	ldr	r3, [pc, #556]	; (8012ff8 <_dtoa_r+0x328>)
 8012dca:	4650      	mov	r0, sl
 8012dcc:	4659      	mov	r1, fp
 8012dce:	f7f5 f993 	bl	80080f8 <__aeabi_dsub>
 8012dd2:	a381      	add	r3, pc, #516	; (adr r3, 8012fd8 <_dtoa_r+0x308>)
 8012dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd8:	f7f5 fb46 	bl	8008468 <__aeabi_dmul>
 8012ddc:	a380      	add	r3, pc, #512	; (adr r3, 8012fe0 <_dtoa_r+0x310>)
 8012dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de2:	f7f5 f98b 	bl	80080fc <__adddf3>
 8012de6:	4606      	mov	r6, r0
 8012de8:	4628      	mov	r0, r5
 8012dea:	460f      	mov	r7, r1
 8012dec:	f7f5 fad2 	bl	8008394 <__aeabi_i2d>
 8012df0:	a37d      	add	r3, pc, #500	; (adr r3, 8012fe8 <_dtoa_r+0x318>)
 8012df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df6:	f7f5 fb37 	bl	8008468 <__aeabi_dmul>
 8012dfa:	4602      	mov	r2, r0
 8012dfc:	460b      	mov	r3, r1
 8012dfe:	4630      	mov	r0, r6
 8012e00:	4639      	mov	r1, r7
 8012e02:	f7f5 f97b 	bl	80080fc <__adddf3>
 8012e06:	4606      	mov	r6, r0
 8012e08:	460f      	mov	r7, r1
 8012e0a:	f7f5 fddd 	bl	80089c8 <__aeabi_d2iz>
 8012e0e:	2200      	movs	r2, #0
 8012e10:	4682      	mov	sl, r0
 8012e12:	2300      	movs	r3, #0
 8012e14:	4630      	mov	r0, r6
 8012e16:	4639      	mov	r1, r7
 8012e18:	f7f5 fd98 	bl	800894c <__aeabi_dcmplt>
 8012e1c:	b148      	cbz	r0, 8012e32 <_dtoa_r+0x162>
 8012e1e:	4650      	mov	r0, sl
 8012e20:	f7f5 fab8 	bl	8008394 <__aeabi_i2d>
 8012e24:	4632      	mov	r2, r6
 8012e26:	463b      	mov	r3, r7
 8012e28:	f7f5 fd86 	bl	8008938 <__aeabi_dcmpeq>
 8012e2c:	b908      	cbnz	r0, 8012e32 <_dtoa_r+0x162>
 8012e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e32:	f1ba 0f16 	cmp.w	sl, #22
 8012e36:	d859      	bhi.n	8012eec <_dtoa_r+0x21c>
 8012e38:	4970      	ldr	r1, [pc, #448]	; (8012ffc <_dtoa_r+0x32c>)
 8012e3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e46:	f7f5 fd9f 	bl	8008988 <__aeabi_dcmpgt>
 8012e4a:	2800      	cmp	r0, #0
 8012e4c:	d050      	beq.n	8012ef0 <_dtoa_r+0x220>
 8012e4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e52:	2300      	movs	r3, #0
 8012e54:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e58:	1b5d      	subs	r5, r3, r5
 8012e5a:	f1b5 0801 	subs.w	r8, r5, #1
 8012e5e:	bf49      	itett	mi
 8012e60:	f1c5 0301 	rsbmi	r3, r5, #1
 8012e64:	2300      	movpl	r3, #0
 8012e66:	9305      	strmi	r3, [sp, #20]
 8012e68:	f04f 0800 	movmi.w	r8, #0
 8012e6c:	bf58      	it	pl
 8012e6e:	9305      	strpl	r3, [sp, #20]
 8012e70:	f1ba 0f00 	cmp.w	sl, #0
 8012e74:	db3e      	blt.n	8012ef4 <_dtoa_r+0x224>
 8012e76:	2300      	movs	r3, #0
 8012e78:	44d0      	add	r8, sl
 8012e7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012e7e:	9307      	str	r3, [sp, #28]
 8012e80:	9b06      	ldr	r3, [sp, #24]
 8012e82:	2b09      	cmp	r3, #9
 8012e84:	f200 8090 	bhi.w	8012fa8 <_dtoa_r+0x2d8>
 8012e88:	2b05      	cmp	r3, #5
 8012e8a:	bfc4      	itt	gt
 8012e8c:	3b04      	subgt	r3, #4
 8012e8e:	9306      	strgt	r3, [sp, #24]
 8012e90:	9b06      	ldr	r3, [sp, #24]
 8012e92:	f1a3 0302 	sub.w	r3, r3, #2
 8012e96:	bfcc      	ite	gt
 8012e98:	2500      	movgt	r5, #0
 8012e9a:	2501      	movle	r5, #1
 8012e9c:	2b03      	cmp	r3, #3
 8012e9e:	f200 808f 	bhi.w	8012fc0 <_dtoa_r+0x2f0>
 8012ea2:	e8df f003 	tbb	[pc, r3]
 8012ea6:	7f7d      	.short	0x7f7d
 8012ea8:	7131      	.short	0x7131
 8012eaa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012eae:	441d      	add	r5, r3
 8012eb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012eb4:	2820      	cmp	r0, #32
 8012eb6:	dd13      	ble.n	8012ee0 <_dtoa_r+0x210>
 8012eb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012ebc:	9b00      	ldr	r3, [sp, #0]
 8012ebe:	fa08 f800 	lsl.w	r8, r8, r0
 8012ec2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012ec6:	fa23 f000 	lsr.w	r0, r3, r0
 8012eca:	ea48 0000 	orr.w	r0, r8, r0
 8012ece:	f7f5 fa51 	bl	8008374 <__aeabi_ui2d>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	4682      	mov	sl, r0
 8012ed6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012eda:	3d01      	subs	r5, #1
 8012edc:	9313      	str	r3, [sp, #76]	; 0x4c
 8012ede:	e772      	b.n	8012dc6 <_dtoa_r+0xf6>
 8012ee0:	9b00      	ldr	r3, [sp, #0]
 8012ee2:	f1c0 0020 	rsb	r0, r0, #32
 8012ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8012eea:	e7f0      	b.n	8012ece <_dtoa_r+0x1fe>
 8012eec:	2301      	movs	r3, #1
 8012eee:	e7b1      	b.n	8012e54 <_dtoa_r+0x184>
 8012ef0:	900f      	str	r0, [sp, #60]	; 0x3c
 8012ef2:	e7b0      	b.n	8012e56 <_dtoa_r+0x186>
 8012ef4:	9b05      	ldr	r3, [sp, #20]
 8012ef6:	eba3 030a 	sub.w	r3, r3, sl
 8012efa:	9305      	str	r3, [sp, #20]
 8012efc:	f1ca 0300 	rsb	r3, sl, #0
 8012f00:	9307      	str	r3, [sp, #28]
 8012f02:	2300      	movs	r3, #0
 8012f04:	930e      	str	r3, [sp, #56]	; 0x38
 8012f06:	e7bb      	b.n	8012e80 <_dtoa_r+0x1b0>
 8012f08:	2301      	movs	r3, #1
 8012f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	dd59      	ble.n	8012fc6 <_dtoa_r+0x2f6>
 8012f12:	9302      	str	r3, [sp, #8]
 8012f14:	4699      	mov	r9, r3
 8012f16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012f18:	2200      	movs	r2, #0
 8012f1a:	6072      	str	r2, [r6, #4]
 8012f1c:	2204      	movs	r2, #4
 8012f1e:	f102 0014 	add.w	r0, r2, #20
 8012f22:	4298      	cmp	r0, r3
 8012f24:	6871      	ldr	r1, [r6, #4]
 8012f26:	d953      	bls.n	8012fd0 <_dtoa_r+0x300>
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f000 fe7d 	bl	8013c28 <_Balloc>
 8012f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f30:	6030      	str	r0, [r6, #0]
 8012f32:	f1b9 0f0e 	cmp.w	r9, #14
 8012f36:	f8d3 b000 	ldr.w	fp, [r3]
 8012f3a:	f200 80e6 	bhi.w	801310a <_dtoa_r+0x43a>
 8012f3e:	2d00      	cmp	r5, #0
 8012f40:	f000 80e3 	beq.w	801310a <_dtoa_r+0x43a>
 8012f44:	ed9d 7b00 	vldr	d7, [sp]
 8012f48:	f1ba 0f00 	cmp.w	sl, #0
 8012f4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012f50:	dd74      	ble.n	801303c <_dtoa_r+0x36c>
 8012f52:	4a2a      	ldr	r2, [pc, #168]	; (8012ffc <_dtoa_r+0x32c>)
 8012f54:	f00a 030f 	and.w	r3, sl, #15
 8012f58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012f5c:	ed93 7b00 	vldr	d7, [r3]
 8012f60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012f64:	06f0      	lsls	r0, r6, #27
 8012f66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012f6a:	d565      	bpl.n	8013038 <_dtoa_r+0x368>
 8012f6c:	4b24      	ldr	r3, [pc, #144]	; (8013000 <_dtoa_r+0x330>)
 8012f6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012f72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012f76:	f7f5 fba1 	bl	80086bc <__aeabi_ddiv>
 8012f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8012f7e:	f006 060f 	and.w	r6, r6, #15
 8012f82:	2503      	movs	r5, #3
 8012f84:	4f1e      	ldr	r7, [pc, #120]	; (8013000 <_dtoa_r+0x330>)
 8012f86:	e04c      	b.n	8013022 <_dtoa_r+0x352>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f8e:	4453      	add	r3, sl
 8012f90:	f103 0901 	add.w	r9, r3, #1
 8012f94:	9302      	str	r3, [sp, #8]
 8012f96:	464b      	mov	r3, r9
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	bfb8      	it	lt
 8012f9c:	2301      	movlt	r3, #1
 8012f9e:	e7ba      	b.n	8012f16 <_dtoa_r+0x246>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	e7b2      	b.n	8012f0a <_dtoa_r+0x23a>
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	e7f0      	b.n	8012f8a <_dtoa_r+0x2ba>
 8012fa8:	2501      	movs	r5, #1
 8012faa:	2300      	movs	r3, #0
 8012fac:	9306      	str	r3, [sp, #24]
 8012fae:	950a      	str	r5, [sp, #40]	; 0x28
 8012fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb4:	9302      	str	r3, [sp, #8]
 8012fb6:	4699      	mov	r9, r3
 8012fb8:	2200      	movs	r2, #0
 8012fba:	2312      	movs	r3, #18
 8012fbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8012fbe:	e7aa      	b.n	8012f16 <_dtoa_r+0x246>
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8012fc4:	e7f4      	b.n	8012fb0 <_dtoa_r+0x2e0>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	9302      	str	r3, [sp, #8]
 8012fca:	4699      	mov	r9, r3
 8012fcc:	461a      	mov	r2, r3
 8012fce:	e7f5      	b.n	8012fbc <_dtoa_r+0x2ec>
 8012fd0:	3101      	adds	r1, #1
 8012fd2:	6071      	str	r1, [r6, #4]
 8012fd4:	0052      	lsls	r2, r2, #1
 8012fd6:	e7a2      	b.n	8012f1e <_dtoa_r+0x24e>
 8012fd8:	636f4361 	.word	0x636f4361
 8012fdc:	3fd287a7 	.word	0x3fd287a7
 8012fe0:	8b60c8b3 	.word	0x8b60c8b3
 8012fe4:	3fc68a28 	.word	0x3fc68a28
 8012fe8:	509f79fb 	.word	0x509f79fb
 8012fec:	3fd34413 	.word	0x3fd34413
 8012ff0:	7ff00000 	.word	0x7ff00000
 8012ff4:	0802948d 	.word	0x0802948d
 8012ff8:	3ff80000 	.word	0x3ff80000
 8012ffc:	08029548 	.word	0x08029548
 8013000:	08029520 	.word	0x08029520
 8013004:	080294b9 	.word	0x080294b9
 8013008:	07f1      	lsls	r1, r6, #31
 801300a:	d508      	bpl.n	801301e <_dtoa_r+0x34e>
 801300c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013014:	f7f5 fa28 	bl	8008468 <__aeabi_dmul>
 8013018:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801301c:	3501      	adds	r5, #1
 801301e:	1076      	asrs	r6, r6, #1
 8013020:	3708      	adds	r7, #8
 8013022:	2e00      	cmp	r6, #0
 8013024:	d1f0      	bne.n	8013008 <_dtoa_r+0x338>
 8013026:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801302a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801302e:	f7f5 fb45 	bl	80086bc <__aeabi_ddiv>
 8013032:	e9cd 0100 	strd	r0, r1, [sp]
 8013036:	e01a      	b.n	801306e <_dtoa_r+0x39e>
 8013038:	2502      	movs	r5, #2
 801303a:	e7a3      	b.n	8012f84 <_dtoa_r+0x2b4>
 801303c:	f000 80a0 	beq.w	8013180 <_dtoa_r+0x4b0>
 8013040:	f1ca 0600 	rsb	r6, sl, #0
 8013044:	4b9f      	ldr	r3, [pc, #636]	; (80132c4 <_dtoa_r+0x5f4>)
 8013046:	4fa0      	ldr	r7, [pc, #640]	; (80132c8 <_dtoa_r+0x5f8>)
 8013048:	f006 020f 	and.w	r2, r6, #15
 801304c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013054:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013058:	f7f5 fa06 	bl	8008468 <__aeabi_dmul>
 801305c:	e9cd 0100 	strd	r0, r1, [sp]
 8013060:	1136      	asrs	r6, r6, #4
 8013062:	2300      	movs	r3, #0
 8013064:	2502      	movs	r5, #2
 8013066:	2e00      	cmp	r6, #0
 8013068:	d17f      	bne.n	801316a <_dtoa_r+0x49a>
 801306a:	2b00      	cmp	r3, #0
 801306c:	d1e1      	bne.n	8013032 <_dtoa_r+0x362>
 801306e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013070:	2b00      	cmp	r3, #0
 8013072:	f000 8087 	beq.w	8013184 <_dtoa_r+0x4b4>
 8013076:	e9dd 6700 	ldrd	r6, r7, [sp]
 801307a:	2200      	movs	r2, #0
 801307c:	4b93      	ldr	r3, [pc, #588]	; (80132cc <_dtoa_r+0x5fc>)
 801307e:	4630      	mov	r0, r6
 8013080:	4639      	mov	r1, r7
 8013082:	f7f5 fc63 	bl	800894c <__aeabi_dcmplt>
 8013086:	2800      	cmp	r0, #0
 8013088:	d07c      	beq.n	8013184 <_dtoa_r+0x4b4>
 801308a:	f1b9 0f00 	cmp.w	r9, #0
 801308e:	d079      	beq.n	8013184 <_dtoa_r+0x4b4>
 8013090:	9b02      	ldr	r3, [sp, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	dd35      	ble.n	8013102 <_dtoa_r+0x432>
 8013096:	f10a 33ff 	add.w	r3, sl, #4294967295
 801309a:	9308      	str	r3, [sp, #32]
 801309c:	4639      	mov	r1, r7
 801309e:	2200      	movs	r2, #0
 80130a0:	4b8b      	ldr	r3, [pc, #556]	; (80132d0 <_dtoa_r+0x600>)
 80130a2:	4630      	mov	r0, r6
 80130a4:	f7f5 f9e0 	bl	8008468 <__aeabi_dmul>
 80130a8:	e9cd 0100 	strd	r0, r1, [sp]
 80130ac:	9f02      	ldr	r7, [sp, #8]
 80130ae:	3501      	adds	r5, #1
 80130b0:	4628      	mov	r0, r5
 80130b2:	f7f5 f96f 	bl	8008394 <__aeabi_i2d>
 80130b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130ba:	f7f5 f9d5 	bl	8008468 <__aeabi_dmul>
 80130be:	2200      	movs	r2, #0
 80130c0:	4b84      	ldr	r3, [pc, #528]	; (80132d4 <_dtoa_r+0x604>)
 80130c2:	f7f5 f81b 	bl	80080fc <__adddf3>
 80130c6:	4605      	mov	r5, r0
 80130c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80130cc:	2f00      	cmp	r7, #0
 80130ce:	d15d      	bne.n	801318c <_dtoa_r+0x4bc>
 80130d0:	2200      	movs	r2, #0
 80130d2:	4b81      	ldr	r3, [pc, #516]	; (80132d8 <_dtoa_r+0x608>)
 80130d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130d8:	f7f5 f80e 	bl	80080f8 <__aeabi_dsub>
 80130dc:	462a      	mov	r2, r5
 80130de:	4633      	mov	r3, r6
 80130e0:	e9cd 0100 	strd	r0, r1, [sp]
 80130e4:	f7f5 fc50 	bl	8008988 <__aeabi_dcmpgt>
 80130e8:	2800      	cmp	r0, #0
 80130ea:	f040 8288 	bne.w	80135fe <_dtoa_r+0x92e>
 80130ee:	462a      	mov	r2, r5
 80130f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80130f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130f8:	f7f5 fc28 	bl	800894c <__aeabi_dcmplt>
 80130fc:	2800      	cmp	r0, #0
 80130fe:	f040 827c 	bne.w	80135fa <_dtoa_r+0x92a>
 8013102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013106:	e9cd 2300 	strd	r2, r3, [sp]
 801310a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801310c:	2b00      	cmp	r3, #0
 801310e:	f2c0 8150 	blt.w	80133b2 <_dtoa_r+0x6e2>
 8013112:	f1ba 0f0e 	cmp.w	sl, #14
 8013116:	f300 814c 	bgt.w	80133b2 <_dtoa_r+0x6e2>
 801311a:	4b6a      	ldr	r3, [pc, #424]	; (80132c4 <_dtoa_r+0x5f4>)
 801311c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013120:	ed93 7b00 	vldr	d7, [r3]
 8013124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013126:	2b00      	cmp	r3, #0
 8013128:	ed8d 7b02 	vstr	d7, [sp, #8]
 801312c:	f280 80d8 	bge.w	80132e0 <_dtoa_r+0x610>
 8013130:	f1b9 0f00 	cmp.w	r9, #0
 8013134:	f300 80d4 	bgt.w	80132e0 <_dtoa_r+0x610>
 8013138:	f040 825e 	bne.w	80135f8 <_dtoa_r+0x928>
 801313c:	2200      	movs	r2, #0
 801313e:	4b66      	ldr	r3, [pc, #408]	; (80132d8 <_dtoa_r+0x608>)
 8013140:	ec51 0b17 	vmov	r0, r1, d7
 8013144:	f7f5 f990 	bl	8008468 <__aeabi_dmul>
 8013148:	e9dd 2300 	ldrd	r2, r3, [sp]
 801314c:	f7f5 fc12 	bl	8008974 <__aeabi_dcmpge>
 8013150:	464f      	mov	r7, r9
 8013152:	464e      	mov	r6, r9
 8013154:	2800      	cmp	r0, #0
 8013156:	f040 8234 	bne.w	80135c2 <_dtoa_r+0x8f2>
 801315a:	2331      	movs	r3, #49	; 0x31
 801315c:	f10b 0501 	add.w	r5, fp, #1
 8013160:	f88b 3000 	strb.w	r3, [fp]
 8013164:	f10a 0a01 	add.w	sl, sl, #1
 8013168:	e22f      	b.n	80135ca <_dtoa_r+0x8fa>
 801316a:	07f2      	lsls	r2, r6, #31
 801316c:	d505      	bpl.n	801317a <_dtoa_r+0x4aa>
 801316e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013172:	f7f5 f979 	bl	8008468 <__aeabi_dmul>
 8013176:	3501      	adds	r5, #1
 8013178:	2301      	movs	r3, #1
 801317a:	1076      	asrs	r6, r6, #1
 801317c:	3708      	adds	r7, #8
 801317e:	e772      	b.n	8013066 <_dtoa_r+0x396>
 8013180:	2502      	movs	r5, #2
 8013182:	e774      	b.n	801306e <_dtoa_r+0x39e>
 8013184:	f8cd a020 	str.w	sl, [sp, #32]
 8013188:	464f      	mov	r7, r9
 801318a:	e791      	b.n	80130b0 <_dtoa_r+0x3e0>
 801318c:	4b4d      	ldr	r3, [pc, #308]	; (80132c4 <_dtoa_r+0x5f4>)
 801318e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013192:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013198:	2b00      	cmp	r3, #0
 801319a:	d047      	beq.n	801322c <_dtoa_r+0x55c>
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	2000      	movs	r0, #0
 80131a2:	494e      	ldr	r1, [pc, #312]	; (80132dc <_dtoa_r+0x60c>)
 80131a4:	f7f5 fa8a 	bl	80086bc <__aeabi_ddiv>
 80131a8:	462a      	mov	r2, r5
 80131aa:	4633      	mov	r3, r6
 80131ac:	f7f4 ffa4 	bl	80080f8 <__aeabi_dsub>
 80131b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80131b4:	465d      	mov	r5, fp
 80131b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131ba:	f7f5 fc05 	bl	80089c8 <__aeabi_d2iz>
 80131be:	4606      	mov	r6, r0
 80131c0:	f7f5 f8e8 	bl	8008394 <__aeabi_i2d>
 80131c4:	4602      	mov	r2, r0
 80131c6:	460b      	mov	r3, r1
 80131c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131cc:	f7f4 ff94 	bl	80080f8 <__aeabi_dsub>
 80131d0:	3630      	adds	r6, #48	; 0x30
 80131d2:	f805 6b01 	strb.w	r6, [r5], #1
 80131d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80131da:	e9cd 0100 	strd	r0, r1, [sp]
 80131de:	f7f5 fbb5 	bl	800894c <__aeabi_dcmplt>
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d163      	bne.n	80132ae <_dtoa_r+0x5de>
 80131e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131ea:	2000      	movs	r0, #0
 80131ec:	4937      	ldr	r1, [pc, #220]	; (80132cc <_dtoa_r+0x5fc>)
 80131ee:	f7f4 ff83 	bl	80080f8 <__aeabi_dsub>
 80131f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80131f6:	f7f5 fba9 	bl	800894c <__aeabi_dcmplt>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	f040 80b7 	bne.w	801336e <_dtoa_r+0x69e>
 8013200:	eba5 030b 	sub.w	r3, r5, fp
 8013204:	429f      	cmp	r7, r3
 8013206:	f77f af7c 	ble.w	8013102 <_dtoa_r+0x432>
 801320a:	2200      	movs	r2, #0
 801320c:	4b30      	ldr	r3, [pc, #192]	; (80132d0 <_dtoa_r+0x600>)
 801320e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013212:	f7f5 f929 	bl	8008468 <__aeabi_dmul>
 8013216:	2200      	movs	r2, #0
 8013218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801321c:	4b2c      	ldr	r3, [pc, #176]	; (80132d0 <_dtoa_r+0x600>)
 801321e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013222:	f7f5 f921 	bl	8008468 <__aeabi_dmul>
 8013226:	e9cd 0100 	strd	r0, r1, [sp]
 801322a:	e7c4      	b.n	80131b6 <_dtoa_r+0x4e6>
 801322c:	462a      	mov	r2, r5
 801322e:	4633      	mov	r3, r6
 8013230:	f7f5 f91a 	bl	8008468 <__aeabi_dmul>
 8013234:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013238:	eb0b 0507 	add.w	r5, fp, r7
 801323c:	465e      	mov	r6, fp
 801323e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013242:	f7f5 fbc1 	bl	80089c8 <__aeabi_d2iz>
 8013246:	4607      	mov	r7, r0
 8013248:	f7f5 f8a4 	bl	8008394 <__aeabi_i2d>
 801324c:	3730      	adds	r7, #48	; 0x30
 801324e:	4602      	mov	r2, r0
 8013250:	460b      	mov	r3, r1
 8013252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013256:	f7f4 ff4f 	bl	80080f8 <__aeabi_dsub>
 801325a:	f806 7b01 	strb.w	r7, [r6], #1
 801325e:	42ae      	cmp	r6, r5
 8013260:	e9cd 0100 	strd	r0, r1, [sp]
 8013264:	f04f 0200 	mov.w	r2, #0
 8013268:	d126      	bne.n	80132b8 <_dtoa_r+0x5e8>
 801326a:	4b1c      	ldr	r3, [pc, #112]	; (80132dc <_dtoa_r+0x60c>)
 801326c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013270:	f7f4 ff44 	bl	80080fc <__adddf3>
 8013274:	4602      	mov	r2, r0
 8013276:	460b      	mov	r3, r1
 8013278:	e9dd 0100 	ldrd	r0, r1, [sp]
 801327c:	f7f5 fb84 	bl	8008988 <__aeabi_dcmpgt>
 8013280:	2800      	cmp	r0, #0
 8013282:	d174      	bne.n	801336e <_dtoa_r+0x69e>
 8013284:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013288:	2000      	movs	r0, #0
 801328a:	4914      	ldr	r1, [pc, #80]	; (80132dc <_dtoa_r+0x60c>)
 801328c:	f7f4 ff34 	bl	80080f8 <__aeabi_dsub>
 8013290:	4602      	mov	r2, r0
 8013292:	460b      	mov	r3, r1
 8013294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013298:	f7f5 fb58 	bl	800894c <__aeabi_dcmplt>
 801329c:	2800      	cmp	r0, #0
 801329e:	f43f af30 	beq.w	8013102 <_dtoa_r+0x432>
 80132a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80132a6:	2b30      	cmp	r3, #48	; 0x30
 80132a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80132ac:	d002      	beq.n	80132b4 <_dtoa_r+0x5e4>
 80132ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80132b2:	e04a      	b.n	801334a <_dtoa_r+0x67a>
 80132b4:	4615      	mov	r5, r2
 80132b6:	e7f4      	b.n	80132a2 <_dtoa_r+0x5d2>
 80132b8:	4b05      	ldr	r3, [pc, #20]	; (80132d0 <_dtoa_r+0x600>)
 80132ba:	f7f5 f8d5 	bl	8008468 <__aeabi_dmul>
 80132be:	e9cd 0100 	strd	r0, r1, [sp]
 80132c2:	e7bc      	b.n	801323e <_dtoa_r+0x56e>
 80132c4:	08029548 	.word	0x08029548
 80132c8:	08029520 	.word	0x08029520
 80132cc:	3ff00000 	.word	0x3ff00000
 80132d0:	40240000 	.word	0x40240000
 80132d4:	401c0000 	.word	0x401c0000
 80132d8:	40140000 	.word	0x40140000
 80132dc:	3fe00000 	.word	0x3fe00000
 80132e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80132e4:	465d      	mov	r5, fp
 80132e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132ea:	4630      	mov	r0, r6
 80132ec:	4639      	mov	r1, r7
 80132ee:	f7f5 f9e5 	bl	80086bc <__aeabi_ddiv>
 80132f2:	f7f5 fb69 	bl	80089c8 <__aeabi_d2iz>
 80132f6:	4680      	mov	r8, r0
 80132f8:	f7f5 f84c 	bl	8008394 <__aeabi_i2d>
 80132fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013300:	f7f5 f8b2 	bl	8008468 <__aeabi_dmul>
 8013304:	4602      	mov	r2, r0
 8013306:	460b      	mov	r3, r1
 8013308:	4630      	mov	r0, r6
 801330a:	4639      	mov	r1, r7
 801330c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013310:	f7f4 fef2 	bl	80080f8 <__aeabi_dsub>
 8013314:	f805 6b01 	strb.w	r6, [r5], #1
 8013318:	eba5 060b 	sub.w	r6, r5, fp
 801331c:	45b1      	cmp	r9, r6
 801331e:	4602      	mov	r2, r0
 8013320:	460b      	mov	r3, r1
 8013322:	d139      	bne.n	8013398 <_dtoa_r+0x6c8>
 8013324:	f7f4 feea 	bl	80080fc <__adddf3>
 8013328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801332c:	4606      	mov	r6, r0
 801332e:	460f      	mov	r7, r1
 8013330:	f7f5 fb2a 	bl	8008988 <__aeabi_dcmpgt>
 8013334:	b9c8      	cbnz	r0, 801336a <_dtoa_r+0x69a>
 8013336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801333a:	4630      	mov	r0, r6
 801333c:	4639      	mov	r1, r7
 801333e:	f7f5 fafb 	bl	8008938 <__aeabi_dcmpeq>
 8013342:	b110      	cbz	r0, 801334a <_dtoa_r+0x67a>
 8013344:	f018 0f01 	tst.w	r8, #1
 8013348:	d10f      	bne.n	801336a <_dtoa_r+0x69a>
 801334a:	9904      	ldr	r1, [sp, #16]
 801334c:	4620      	mov	r0, r4
 801334e:	f000 fc9f 	bl	8013c90 <_Bfree>
 8013352:	2300      	movs	r3, #0
 8013354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013356:	702b      	strb	r3, [r5, #0]
 8013358:	f10a 0301 	add.w	r3, sl, #1
 801335c:	6013      	str	r3, [r2, #0]
 801335e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013360:	2b00      	cmp	r3, #0
 8013362:	f000 8241 	beq.w	80137e8 <_dtoa_r+0xb18>
 8013366:	601d      	str	r5, [r3, #0]
 8013368:	e23e      	b.n	80137e8 <_dtoa_r+0xb18>
 801336a:	f8cd a020 	str.w	sl, [sp, #32]
 801336e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013372:	2a39      	cmp	r2, #57	; 0x39
 8013374:	f105 33ff 	add.w	r3, r5, #4294967295
 8013378:	d108      	bne.n	801338c <_dtoa_r+0x6bc>
 801337a:	459b      	cmp	fp, r3
 801337c:	d10a      	bne.n	8013394 <_dtoa_r+0x6c4>
 801337e:	9b08      	ldr	r3, [sp, #32]
 8013380:	3301      	adds	r3, #1
 8013382:	9308      	str	r3, [sp, #32]
 8013384:	2330      	movs	r3, #48	; 0x30
 8013386:	f88b 3000 	strb.w	r3, [fp]
 801338a:	465b      	mov	r3, fp
 801338c:	781a      	ldrb	r2, [r3, #0]
 801338e:	3201      	adds	r2, #1
 8013390:	701a      	strb	r2, [r3, #0]
 8013392:	e78c      	b.n	80132ae <_dtoa_r+0x5de>
 8013394:	461d      	mov	r5, r3
 8013396:	e7ea      	b.n	801336e <_dtoa_r+0x69e>
 8013398:	2200      	movs	r2, #0
 801339a:	4b9b      	ldr	r3, [pc, #620]	; (8013608 <_dtoa_r+0x938>)
 801339c:	f7f5 f864 	bl	8008468 <__aeabi_dmul>
 80133a0:	2200      	movs	r2, #0
 80133a2:	2300      	movs	r3, #0
 80133a4:	4606      	mov	r6, r0
 80133a6:	460f      	mov	r7, r1
 80133a8:	f7f5 fac6 	bl	8008938 <__aeabi_dcmpeq>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d09a      	beq.n	80132e6 <_dtoa_r+0x616>
 80133b0:	e7cb      	b.n	801334a <_dtoa_r+0x67a>
 80133b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133b4:	2a00      	cmp	r2, #0
 80133b6:	f000 808b 	beq.w	80134d0 <_dtoa_r+0x800>
 80133ba:	9a06      	ldr	r2, [sp, #24]
 80133bc:	2a01      	cmp	r2, #1
 80133be:	dc6e      	bgt.n	801349e <_dtoa_r+0x7ce>
 80133c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80133c2:	2a00      	cmp	r2, #0
 80133c4:	d067      	beq.n	8013496 <_dtoa_r+0x7c6>
 80133c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80133ca:	9f07      	ldr	r7, [sp, #28]
 80133cc:	9d05      	ldr	r5, [sp, #20]
 80133ce:	9a05      	ldr	r2, [sp, #20]
 80133d0:	2101      	movs	r1, #1
 80133d2:	441a      	add	r2, r3
 80133d4:	4620      	mov	r0, r4
 80133d6:	9205      	str	r2, [sp, #20]
 80133d8:	4498      	add	r8, r3
 80133da:	f000 fcf9 	bl	8013dd0 <__i2b>
 80133de:	4606      	mov	r6, r0
 80133e0:	2d00      	cmp	r5, #0
 80133e2:	dd0c      	ble.n	80133fe <_dtoa_r+0x72e>
 80133e4:	f1b8 0f00 	cmp.w	r8, #0
 80133e8:	dd09      	ble.n	80133fe <_dtoa_r+0x72e>
 80133ea:	4545      	cmp	r5, r8
 80133ec:	9a05      	ldr	r2, [sp, #20]
 80133ee:	462b      	mov	r3, r5
 80133f0:	bfa8      	it	ge
 80133f2:	4643      	movge	r3, r8
 80133f4:	1ad2      	subs	r2, r2, r3
 80133f6:	9205      	str	r2, [sp, #20]
 80133f8:	1aed      	subs	r5, r5, r3
 80133fa:	eba8 0803 	sub.w	r8, r8, r3
 80133fe:	9b07      	ldr	r3, [sp, #28]
 8013400:	b1eb      	cbz	r3, 801343e <_dtoa_r+0x76e>
 8013402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013404:	2b00      	cmp	r3, #0
 8013406:	d067      	beq.n	80134d8 <_dtoa_r+0x808>
 8013408:	b18f      	cbz	r7, 801342e <_dtoa_r+0x75e>
 801340a:	4631      	mov	r1, r6
 801340c:	463a      	mov	r2, r7
 801340e:	4620      	mov	r0, r4
 8013410:	f000 fd7e 	bl	8013f10 <__pow5mult>
 8013414:	9a04      	ldr	r2, [sp, #16]
 8013416:	4601      	mov	r1, r0
 8013418:	4606      	mov	r6, r0
 801341a:	4620      	mov	r0, r4
 801341c:	f000 fce1 	bl	8013de2 <__multiply>
 8013420:	9904      	ldr	r1, [sp, #16]
 8013422:	9008      	str	r0, [sp, #32]
 8013424:	4620      	mov	r0, r4
 8013426:	f000 fc33 	bl	8013c90 <_Bfree>
 801342a:	9b08      	ldr	r3, [sp, #32]
 801342c:	9304      	str	r3, [sp, #16]
 801342e:	9b07      	ldr	r3, [sp, #28]
 8013430:	1bda      	subs	r2, r3, r7
 8013432:	d004      	beq.n	801343e <_dtoa_r+0x76e>
 8013434:	9904      	ldr	r1, [sp, #16]
 8013436:	4620      	mov	r0, r4
 8013438:	f000 fd6a 	bl	8013f10 <__pow5mult>
 801343c:	9004      	str	r0, [sp, #16]
 801343e:	2101      	movs	r1, #1
 8013440:	4620      	mov	r0, r4
 8013442:	f000 fcc5 	bl	8013dd0 <__i2b>
 8013446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013448:	4607      	mov	r7, r0
 801344a:	2b00      	cmp	r3, #0
 801344c:	f000 81d0 	beq.w	80137f0 <_dtoa_r+0xb20>
 8013450:	461a      	mov	r2, r3
 8013452:	4601      	mov	r1, r0
 8013454:	4620      	mov	r0, r4
 8013456:	f000 fd5b 	bl	8013f10 <__pow5mult>
 801345a:	9b06      	ldr	r3, [sp, #24]
 801345c:	2b01      	cmp	r3, #1
 801345e:	4607      	mov	r7, r0
 8013460:	dc40      	bgt.n	80134e4 <_dtoa_r+0x814>
 8013462:	9b00      	ldr	r3, [sp, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d139      	bne.n	80134dc <_dtoa_r+0x80c>
 8013468:	9b01      	ldr	r3, [sp, #4]
 801346a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801346e:	2b00      	cmp	r3, #0
 8013470:	d136      	bne.n	80134e0 <_dtoa_r+0x810>
 8013472:	9b01      	ldr	r3, [sp, #4]
 8013474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013478:	0d1b      	lsrs	r3, r3, #20
 801347a:	051b      	lsls	r3, r3, #20
 801347c:	b12b      	cbz	r3, 801348a <_dtoa_r+0x7ba>
 801347e:	9b05      	ldr	r3, [sp, #20]
 8013480:	3301      	adds	r3, #1
 8013482:	9305      	str	r3, [sp, #20]
 8013484:	f108 0801 	add.w	r8, r8, #1
 8013488:	2301      	movs	r3, #1
 801348a:	9307      	str	r3, [sp, #28]
 801348c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801348e:	2b00      	cmp	r3, #0
 8013490:	d12a      	bne.n	80134e8 <_dtoa_r+0x818>
 8013492:	2001      	movs	r0, #1
 8013494:	e030      	b.n	80134f8 <_dtoa_r+0x828>
 8013496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013498:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801349c:	e795      	b.n	80133ca <_dtoa_r+0x6fa>
 801349e:	9b07      	ldr	r3, [sp, #28]
 80134a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80134a4:	42bb      	cmp	r3, r7
 80134a6:	bfbf      	itttt	lt
 80134a8:	9b07      	ldrlt	r3, [sp, #28]
 80134aa:	9707      	strlt	r7, [sp, #28]
 80134ac:	1afa      	sublt	r2, r7, r3
 80134ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80134b0:	bfbb      	ittet	lt
 80134b2:	189b      	addlt	r3, r3, r2
 80134b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80134b6:	1bdf      	subge	r7, r3, r7
 80134b8:	2700      	movlt	r7, #0
 80134ba:	f1b9 0f00 	cmp.w	r9, #0
 80134be:	bfb5      	itete	lt
 80134c0:	9b05      	ldrlt	r3, [sp, #20]
 80134c2:	9d05      	ldrge	r5, [sp, #20]
 80134c4:	eba3 0509 	sublt.w	r5, r3, r9
 80134c8:	464b      	movge	r3, r9
 80134ca:	bfb8      	it	lt
 80134cc:	2300      	movlt	r3, #0
 80134ce:	e77e      	b.n	80133ce <_dtoa_r+0x6fe>
 80134d0:	9f07      	ldr	r7, [sp, #28]
 80134d2:	9d05      	ldr	r5, [sp, #20]
 80134d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80134d6:	e783      	b.n	80133e0 <_dtoa_r+0x710>
 80134d8:	9a07      	ldr	r2, [sp, #28]
 80134da:	e7ab      	b.n	8013434 <_dtoa_r+0x764>
 80134dc:	2300      	movs	r3, #0
 80134de:	e7d4      	b.n	801348a <_dtoa_r+0x7ba>
 80134e0:	9b00      	ldr	r3, [sp, #0]
 80134e2:	e7d2      	b.n	801348a <_dtoa_r+0x7ba>
 80134e4:	2300      	movs	r3, #0
 80134e6:	9307      	str	r3, [sp, #28]
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80134ee:	6918      	ldr	r0, [r3, #16]
 80134f0:	f000 fc20 	bl	8013d34 <__hi0bits>
 80134f4:	f1c0 0020 	rsb	r0, r0, #32
 80134f8:	4440      	add	r0, r8
 80134fa:	f010 001f 	ands.w	r0, r0, #31
 80134fe:	d047      	beq.n	8013590 <_dtoa_r+0x8c0>
 8013500:	f1c0 0320 	rsb	r3, r0, #32
 8013504:	2b04      	cmp	r3, #4
 8013506:	dd3b      	ble.n	8013580 <_dtoa_r+0x8b0>
 8013508:	9b05      	ldr	r3, [sp, #20]
 801350a:	f1c0 001c 	rsb	r0, r0, #28
 801350e:	4403      	add	r3, r0
 8013510:	9305      	str	r3, [sp, #20]
 8013512:	4405      	add	r5, r0
 8013514:	4480      	add	r8, r0
 8013516:	9b05      	ldr	r3, [sp, #20]
 8013518:	2b00      	cmp	r3, #0
 801351a:	dd05      	ble.n	8013528 <_dtoa_r+0x858>
 801351c:	461a      	mov	r2, r3
 801351e:	9904      	ldr	r1, [sp, #16]
 8013520:	4620      	mov	r0, r4
 8013522:	f000 fd43 	bl	8013fac <__lshift>
 8013526:	9004      	str	r0, [sp, #16]
 8013528:	f1b8 0f00 	cmp.w	r8, #0
 801352c:	dd05      	ble.n	801353a <_dtoa_r+0x86a>
 801352e:	4639      	mov	r1, r7
 8013530:	4642      	mov	r2, r8
 8013532:	4620      	mov	r0, r4
 8013534:	f000 fd3a 	bl	8013fac <__lshift>
 8013538:	4607      	mov	r7, r0
 801353a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801353c:	b353      	cbz	r3, 8013594 <_dtoa_r+0x8c4>
 801353e:	4639      	mov	r1, r7
 8013540:	9804      	ldr	r0, [sp, #16]
 8013542:	f000 fd87 	bl	8014054 <__mcmp>
 8013546:	2800      	cmp	r0, #0
 8013548:	da24      	bge.n	8013594 <_dtoa_r+0x8c4>
 801354a:	2300      	movs	r3, #0
 801354c:	220a      	movs	r2, #10
 801354e:	9904      	ldr	r1, [sp, #16]
 8013550:	4620      	mov	r0, r4
 8013552:	f000 fbb4 	bl	8013cbe <__multadd>
 8013556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013558:	9004      	str	r0, [sp, #16]
 801355a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801355e:	2b00      	cmp	r3, #0
 8013560:	f000 814d 	beq.w	80137fe <_dtoa_r+0xb2e>
 8013564:	2300      	movs	r3, #0
 8013566:	4631      	mov	r1, r6
 8013568:	220a      	movs	r2, #10
 801356a:	4620      	mov	r0, r4
 801356c:	f000 fba7 	bl	8013cbe <__multadd>
 8013570:	9b02      	ldr	r3, [sp, #8]
 8013572:	2b00      	cmp	r3, #0
 8013574:	4606      	mov	r6, r0
 8013576:	dc4f      	bgt.n	8013618 <_dtoa_r+0x948>
 8013578:	9b06      	ldr	r3, [sp, #24]
 801357a:	2b02      	cmp	r3, #2
 801357c:	dd4c      	ble.n	8013618 <_dtoa_r+0x948>
 801357e:	e011      	b.n	80135a4 <_dtoa_r+0x8d4>
 8013580:	d0c9      	beq.n	8013516 <_dtoa_r+0x846>
 8013582:	9a05      	ldr	r2, [sp, #20]
 8013584:	331c      	adds	r3, #28
 8013586:	441a      	add	r2, r3
 8013588:	9205      	str	r2, [sp, #20]
 801358a:	441d      	add	r5, r3
 801358c:	4498      	add	r8, r3
 801358e:	e7c2      	b.n	8013516 <_dtoa_r+0x846>
 8013590:	4603      	mov	r3, r0
 8013592:	e7f6      	b.n	8013582 <_dtoa_r+0x8b2>
 8013594:	f1b9 0f00 	cmp.w	r9, #0
 8013598:	dc38      	bgt.n	801360c <_dtoa_r+0x93c>
 801359a:	9b06      	ldr	r3, [sp, #24]
 801359c:	2b02      	cmp	r3, #2
 801359e:	dd35      	ble.n	801360c <_dtoa_r+0x93c>
 80135a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80135a4:	9b02      	ldr	r3, [sp, #8]
 80135a6:	b963      	cbnz	r3, 80135c2 <_dtoa_r+0x8f2>
 80135a8:	4639      	mov	r1, r7
 80135aa:	2205      	movs	r2, #5
 80135ac:	4620      	mov	r0, r4
 80135ae:	f000 fb86 	bl	8013cbe <__multadd>
 80135b2:	4601      	mov	r1, r0
 80135b4:	4607      	mov	r7, r0
 80135b6:	9804      	ldr	r0, [sp, #16]
 80135b8:	f000 fd4c 	bl	8014054 <__mcmp>
 80135bc:	2800      	cmp	r0, #0
 80135be:	f73f adcc 	bgt.w	801315a <_dtoa_r+0x48a>
 80135c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135c4:	465d      	mov	r5, fp
 80135c6:	ea6f 0a03 	mvn.w	sl, r3
 80135ca:	f04f 0900 	mov.w	r9, #0
 80135ce:	4639      	mov	r1, r7
 80135d0:	4620      	mov	r0, r4
 80135d2:	f000 fb5d 	bl	8013c90 <_Bfree>
 80135d6:	2e00      	cmp	r6, #0
 80135d8:	f43f aeb7 	beq.w	801334a <_dtoa_r+0x67a>
 80135dc:	f1b9 0f00 	cmp.w	r9, #0
 80135e0:	d005      	beq.n	80135ee <_dtoa_r+0x91e>
 80135e2:	45b1      	cmp	r9, r6
 80135e4:	d003      	beq.n	80135ee <_dtoa_r+0x91e>
 80135e6:	4649      	mov	r1, r9
 80135e8:	4620      	mov	r0, r4
 80135ea:	f000 fb51 	bl	8013c90 <_Bfree>
 80135ee:	4631      	mov	r1, r6
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 fb4d 	bl	8013c90 <_Bfree>
 80135f6:	e6a8      	b.n	801334a <_dtoa_r+0x67a>
 80135f8:	2700      	movs	r7, #0
 80135fa:	463e      	mov	r6, r7
 80135fc:	e7e1      	b.n	80135c2 <_dtoa_r+0x8f2>
 80135fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013602:	463e      	mov	r6, r7
 8013604:	e5a9      	b.n	801315a <_dtoa_r+0x48a>
 8013606:	bf00      	nop
 8013608:	40240000 	.word	0x40240000
 801360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801360e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013612:	2b00      	cmp	r3, #0
 8013614:	f000 80fa 	beq.w	801380c <_dtoa_r+0xb3c>
 8013618:	2d00      	cmp	r5, #0
 801361a:	dd05      	ble.n	8013628 <_dtoa_r+0x958>
 801361c:	4631      	mov	r1, r6
 801361e:	462a      	mov	r2, r5
 8013620:	4620      	mov	r0, r4
 8013622:	f000 fcc3 	bl	8013fac <__lshift>
 8013626:	4606      	mov	r6, r0
 8013628:	9b07      	ldr	r3, [sp, #28]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d04c      	beq.n	80136c8 <_dtoa_r+0x9f8>
 801362e:	6871      	ldr	r1, [r6, #4]
 8013630:	4620      	mov	r0, r4
 8013632:	f000 faf9 	bl	8013c28 <_Balloc>
 8013636:	6932      	ldr	r2, [r6, #16]
 8013638:	3202      	adds	r2, #2
 801363a:	4605      	mov	r5, r0
 801363c:	0092      	lsls	r2, r2, #2
 801363e:	f106 010c 	add.w	r1, r6, #12
 8013642:	300c      	adds	r0, #12
 8013644:	f7fe fd0a 	bl	801205c <memcpy>
 8013648:	2201      	movs	r2, #1
 801364a:	4629      	mov	r1, r5
 801364c:	4620      	mov	r0, r4
 801364e:	f000 fcad 	bl	8013fac <__lshift>
 8013652:	9b00      	ldr	r3, [sp, #0]
 8013654:	f8cd b014 	str.w	fp, [sp, #20]
 8013658:	f003 0301 	and.w	r3, r3, #1
 801365c:	46b1      	mov	r9, r6
 801365e:	9307      	str	r3, [sp, #28]
 8013660:	4606      	mov	r6, r0
 8013662:	4639      	mov	r1, r7
 8013664:	9804      	ldr	r0, [sp, #16]
 8013666:	f7ff faa5 	bl	8012bb4 <quorem>
 801366a:	4649      	mov	r1, r9
 801366c:	4605      	mov	r5, r0
 801366e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013672:	9804      	ldr	r0, [sp, #16]
 8013674:	f000 fcee 	bl	8014054 <__mcmp>
 8013678:	4632      	mov	r2, r6
 801367a:	9000      	str	r0, [sp, #0]
 801367c:	4639      	mov	r1, r7
 801367e:	4620      	mov	r0, r4
 8013680:	f000 fd02 	bl	8014088 <__mdiff>
 8013684:	68c3      	ldr	r3, [r0, #12]
 8013686:	4602      	mov	r2, r0
 8013688:	bb03      	cbnz	r3, 80136cc <_dtoa_r+0x9fc>
 801368a:	4601      	mov	r1, r0
 801368c:	9008      	str	r0, [sp, #32]
 801368e:	9804      	ldr	r0, [sp, #16]
 8013690:	f000 fce0 	bl	8014054 <__mcmp>
 8013694:	9a08      	ldr	r2, [sp, #32]
 8013696:	4603      	mov	r3, r0
 8013698:	4611      	mov	r1, r2
 801369a:	4620      	mov	r0, r4
 801369c:	9308      	str	r3, [sp, #32]
 801369e:	f000 faf7 	bl	8013c90 <_Bfree>
 80136a2:	9b08      	ldr	r3, [sp, #32]
 80136a4:	b9a3      	cbnz	r3, 80136d0 <_dtoa_r+0xa00>
 80136a6:	9a06      	ldr	r2, [sp, #24]
 80136a8:	b992      	cbnz	r2, 80136d0 <_dtoa_r+0xa00>
 80136aa:	9a07      	ldr	r2, [sp, #28]
 80136ac:	b982      	cbnz	r2, 80136d0 <_dtoa_r+0xa00>
 80136ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80136b2:	d029      	beq.n	8013708 <_dtoa_r+0xa38>
 80136b4:	9b00      	ldr	r3, [sp, #0]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	dd01      	ble.n	80136be <_dtoa_r+0x9ee>
 80136ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80136be:	9b05      	ldr	r3, [sp, #20]
 80136c0:	1c5d      	adds	r5, r3, #1
 80136c2:	f883 8000 	strb.w	r8, [r3]
 80136c6:	e782      	b.n	80135ce <_dtoa_r+0x8fe>
 80136c8:	4630      	mov	r0, r6
 80136ca:	e7c2      	b.n	8013652 <_dtoa_r+0x982>
 80136cc:	2301      	movs	r3, #1
 80136ce:	e7e3      	b.n	8013698 <_dtoa_r+0x9c8>
 80136d0:	9a00      	ldr	r2, [sp, #0]
 80136d2:	2a00      	cmp	r2, #0
 80136d4:	db04      	blt.n	80136e0 <_dtoa_r+0xa10>
 80136d6:	d125      	bne.n	8013724 <_dtoa_r+0xa54>
 80136d8:	9a06      	ldr	r2, [sp, #24]
 80136da:	bb1a      	cbnz	r2, 8013724 <_dtoa_r+0xa54>
 80136dc:	9a07      	ldr	r2, [sp, #28]
 80136de:	bb0a      	cbnz	r2, 8013724 <_dtoa_r+0xa54>
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	ddec      	ble.n	80136be <_dtoa_r+0x9ee>
 80136e4:	2201      	movs	r2, #1
 80136e6:	9904      	ldr	r1, [sp, #16]
 80136e8:	4620      	mov	r0, r4
 80136ea:	f000 fc5f 	bl	8013fac <__lshift>
 80136ee:	4639      	mov	r1, r7
 80136f0:	9004      	str	r0, [sp, #16]
 80136f2:	f000 fcaf 	bl	8014054 <__mcmp>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	dc03      	bgt.n	8013702 <_dtoa_r+0xa32>
 80136fa:	d1e0      	bne.n	80136be <_dtoa_r+0x9ee>
 80136fc:	f018 0f01 	tst.w	r8, #1
 8013700:	d0dd      	beq.n	80136be <_dtoa_r+0x9ee>
 8013702:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013706:	d1d8      	bne.n	80136ba <_dtoa_r+0x9ea>
 8013708:	9b05      	ldr	r3, [sp, #20]
 801370a:	9a05      	ldr	r2, [sp, #20]
 801370c:	1c5d      	adds	r5, r3, #1
 801370e:	2339      	movs	r3, #57	; 0x39
 8013710:	7013      	strb	r3, [r2, #0]
 8013712:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013716:	2b39      	cmp	r3, #57	; 0x39
 8013718:	f105 32ff 	add.w	r2, r5, #4294967295
 801371c:	d04f      	beq.n	80137be <_dtoa_r+0xaee>
 801371e:	3301      	adds	r3, #1
 8013720:	7013      	strb	r3, [r2, #0]
 8013722:	e754      	b.n	80135ce <_dtoa_r+0x8fe>
 8013724:	9a05      	ldr	r2, [sp, #20]
 8013726:	2b00      	cmp	r3, #0
 8013728:	f102 0501 	add.w	r5, r2, #1
 801372c:	dd06      	ble.n	801373c <_dtoa_r+0xa6c>
 801372e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013732:	d0e9      	beq.n	8013708 <_dtoa_r+0xa38>
 8013734:	f108 0801 	add.w	r8, r8, #1
 8013738:	9b05      	ldr	r3, [sp, #20]
 801373a:	e7c2      	b.n	80136c2 <_dtoa_r+0x9f2>
 801373c:	9a02      	ldr	r2, [sp, #8]
 801373e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013742:	eba5 030b 	sub.w	r3, r5, fp
 8013746:	4293      	cmp	r3, r2
 8013748:	d021      	beq.n	801378e <_dtoa_r+0xabe>
 801374a:	2300      	movs	r3, #0
 801374c:	220a      	movs	r2, #10
 801374e:	9904      	ldr	r1, [sp, #16]
 8013750:	4620      	mov	r0, r4
 8013752:	f000 fab4 	bl	8013cbe <__multadd>
 8013756:	45b1      	cmp	r9, r6
 8013758:	9004      	str	r0, [sp, #16]
 801375a:	f04f 0300 	mov.w	r3, #0
 801375e:	f04f 020a 	mov.w	r2, #10
 8013762:	4649      	mov	r1, r9
 8013764:	4620      	mov	r0, r4
 8013766:	d105      	bne.n	8013774 <_dtoa_r+0xaa4>
 8013768:	f000 faa9 	bl	8013cbe <__multadd>
 801376c:	4681      	mov	r9, r0
 801376e:	4606      	mov	r6, r0
 8013770:	9505      	str	r5, [sp, #20]
 8013772:	e776      	b.n	8013662 <_dtoa_r+0x992>
 8013774:	f000 faa3 	bl	8013cbe <__multadd>
 8013778:	4631      	mov	r1, r6
 801377a:	4681      	mov	r9, r0
 801377c:	2300      	movs	r3, #0
 801377e:	220a      	movs	r2, #10
 8013780:	4620      	mov	r0, r4
 8013782:	f000 fa9c 	bl	8013cbe <__multadd>
 8013786:	4606      	mov	r6, r0
 8013788:	e7f2      	b.n	8013770 <_dtoa_r+0xaa0>
 801378a:	f04f 0900 	mov.w	r9, #0
 801378e:	2201      	movs	r2, #1
 8013790:	9904      	ldr	r1, [sp, #16]
 8013792:	4620      	mov	r0, r4
 8013794:	f000 fc0a 	bl	8013fac <__lshift>
 8013798:	4639      	mov	r1, r7
 801379a:	9004      	str	r0, [sp, #16]
 801379c:	f000 fc5a 	bl	8014054 <__mcmp>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	dcb6      	bgt.n	8013712 <_dtoa_r+0xa42>
 80137a4:	d102      	bne.n	80137ac <_dtoa_r+0xadc>
 80137a6:	f018 0f01 	tst.w	r8, #1
 80137aa:	d1b2      	bne.n	8013712 <_dtoa_r+0xa42>
 80137ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80137b0:	2b30      	cmp	r3, #48	; 0x30
 80137b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80137b6:	f47f af0a 	bne.w	80135ce <_dtoa_r+0x8fe>
 80137ba:	4615      	mov	r5, r2
 80137bc:	e7f6      	b.n	80137ac <_dtoa_r+0xadc>
 80137be:	4593      	cmp	fp, r2
 80137c0:	d105      	bne.n	80137ce <_dtoa_r+0xafe>
 80137c2:	2331      	movs	r3, #49	; 0x31
 80137c4:	f10a 0a01 	add.w	sl, sl, #1
 80137c8:	f88b 3000 	strb.w	r3, [fp]
 80137cc:	e6ff      	b.n	80135ce <_dtoa_r+0x8fe>
 80137ce:	4615      	mov	r5, r2
 80137d0:	e79f      	b.n	8013712 <_dtoa_r+0xa42>
 80137d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013838 <_dtoa_r+0xb68>
 80137d6:	e007      	b.n	80137e8 <_dtoa_r+0xb18>
 80137d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137da:	f8df b060 	ldr.w	fp, [pc, #96]	; 801383c <_dtoa_r+0xb6c>
 80137de:	b11b      	cbz	r3, 80137e8 <_dtoa_r+0xb18>
 80137e0:	f10b 0308 	add.w	r3, fp, #8
 80137e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80137e6:	6013      	str	r3, [r2, #0]
 80137e8:	4658      	mov	r0, fp
 80137ea:	b017      	add	sp, #92	; 0x5c
 80137ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f0:	9b06      	ldr	r3, [sp, #24]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	f77f ae35 	ble.w	8013462 <_dtoa_r+0x792>
 80137f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137fa:	9307      	str	r3, [sp, #28]
 80137fc:	e649      	b.n	8013492 <_dtoa_r+0x7c2>
 80137fe:	9b02      	ldr	r3, [sp, #8]
 8013800:	2b00      	cmp	r3, #0
 8013802:	dc03      	bgt.n	801380c <_dtoa_r+0xb3c>
 8013804:	9b06      	ldr	r3, [sp, #24]
 8013806:	2b02      	cmp	r3, #2
 8013808:	f73f aecc 	bgt.w	80135a4 <_dtoa_r+0x8d4>
 801380c:	465d      	mov	r5, fp
 801380e:	4639      	mov	r1, r7
 8013810:	9804      	ldr	r0, [sp, #16]
 8013812:	f7ff f9cf 	bl	8012bb4 <quorem>
 8013816:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801381a:	f805 8b01 	strb.w	r8, [r5], #1
 801381e:	9a02      	ldr	r2, [sp, #8]
 8013820:	eba5 030b 	sub.w	r3, r5, fp
 8013824:	429a      	cmp	r2, r3
 8013826:	ddb0      	ble.n	801378a <_dtoa_r+0xaba>
 8013828:	2300      	movs	r3, #0
 801382a:	220a      	movs	r2, #10
 801382c:	9904      	ldr	r1, [sp, #16]
 801382e:	4620      	mov	r0, r4
 8013830:	f000 fa45 	bl	8013cbe <__multadd>
 8013834:	9004      	str	r0, [sp, #16]
 8013836:	e7ea      	b.n	801380e <_dtoa_r+0xb3e>
 8013838:	0802948c 	.word	0x0802948c
 801383c:	080294b0 	.word	0x080294b0

08013840 <__sflush_r>:
 8013840:	898a      	ldrh	r2, [r1, #12]
 8013842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013846:	4605      	mov	r5, r0
 8013848:	0710      	lsls	r0, r2, #28
 801384a:	460c      	mov	r4, r1
 801384c:	d458      	bmi.n	8013900 <__sflush_r+0xc0>
 801384e:	684b      	ldr	r3, [r1, #4]
 8013850:	2b00      	cmp	r3, #0
 8013852:	dc05      	bgt.n	8013860 <__sflush_r+0x20>
 8013854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013856:	2b00      	cmp	r3, #0
 8013858:	dc02      	bgt.n	8013860 <__sflush_r+0x20>
 801385a:	2000      	movs	r0, #0
 801385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013862:	2e00      	cmp	r6, #0
 8013864:	d0f9      	beq.n	801385a <__sflush_r+0x1a>
 8013866:	2300      	movs	r3, #0
 8013868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801386c:	682f      	ldr	r7, [r5, #0]
 801386e:	6a21      	ldr	r1, [r4, #32]
 8013870:	602b      	str	r3, [r5, #0]
 8013872:	d032      	beq.n	80138da <__sflush_r+0x9a>
 8013874:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	075a      	lsls	r2, r3, #29
 801387a:	d505      	bpl.n	8013888 <__sflush_r+0x48>
 801387c:	6863      	ldr	r3, [r4, #4]
 801387e:	1ac0      	subs	r0, r0, r3
 8013880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013882:	b10b      	cbz	r3, 8013888 <__sflush_r+0x48>
 8013884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013886:	1ac0      	subs	r0, r0, r3
 8013888:	2300      	movs	r3, #0
 801388a:	4602      	mov	r2, r0
 801388c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801388e:	6a21      	ldr	r1, [r4, #32]
 8013890:	4628      	mov	r0, r5
 8013892:	47b0      	blx	r6
 8013894:	1c43      	adds	r3, r0, #1
 8013896:	89a3      	ldrh	r3, [r4, #12]
 8013898:	d106      	bne.n	80138a8 <__sflush_r+0x68>
 801389a:	6829      	ldr	r1, [r5, #0]
 801389c:	291d      	cmp	r1, #29
 801389e:	d848      	bhi.n	8013932 <__sflush_r+0xf2>
 80138a0:	4a29      	ldr	r2, [pc, #164]	; (8013948 <__sflush_r+0x108>)
 80138a2:	40ca      	lsrs	r2, r1
 80138a4:	07d6      	lsls	r6, r2, #31
 80138a6:	d544      	bpl.n	8013932 <__sflush_r+0xf2>
 80138a8:	2200      	movs	r2, #0
 80138aa:	6062      	str	r2, [r4, #4]
 80138ac:	04d9      	lsls	r1, r3, #19
 80138ae:	6922      	ldr	r2, [r4, #16]
 80138b0:	6022      	str	r2, [r4, #0]
 80138b2:	d504      	bpl.n	80138be <__sflush_r+0x7e>
 80138b4:	1c42      	adds	r2, r0, #1
 80138b6:	d101      	bne.n	80138bc <__sflush_r+0x7c>
 80138b8:	682b      	ldr	r3, [r5, #0]
 80138ba:	b903      	cbnz	r3, 80138be <__sflush_r+0x7e>
 80138bc:	6560      	str	r0, [r4, #84]	; 0x54
 80138be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138c0:	602f      	str	r7, [r5, #0]
 80138c2:	2900      	cmp	r1, #0
 80138c4:	d0c9      	beq.n	801385a <__sflush_r+0x1a>
 80138c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138ca:	4299      	cmp	r1, r3
 80138cc:	d002      	beq.n	80138d4 <__sflush_r+0x94>
 80138ce:	4628      	mov	r0, r5
 80138d0:	f000 fc94 	bl	80141fc <_free_r>
 80138d4:	2000      	movs	r0, #0
 80138d6:	6360      	str	r0, [r4, #52]	; 0x34
 80138d8:	e7c0      	b.n	801385c <__sflush_r+0x1c>
 80138da:	2301      	movs	r3, #1
 80138dc:	4628      	mov	r0, r5
 80138de:	47b0      	blx	r6
 80138e0:	1c41      	adds	r1, r0, #1
 80138e2:	d1c8      	bne.n	8013876 <__sflush_r+0x36>
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d0c5      	beq.n	8013876 <__sflush_r+0x36>
 80138ea:	2b1d      	cmp	r3, #29
 80138ec:	d001      	beq.n	80138f2 <__sflush_r+0xb2>
 80138ee:	2b16      	cmp	r3, #22
 80138f0:	d101      	bne.n	80138f6 <__sflush_r+0xb6>
 80138f2:	602f      	str	r7, [r5, #0]
 80138f4:	e7b1      	b.n	801385a <__sflush_r+0x1a>
 80138f6:	89a3      	ldrh	r3, [r4, #12]
 80138f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138fc:	81a3      	strh	r3, [r4, #12]
 80138fe:	e7ad      	b.n	801385c <__sflush_r+0x1c>
 8013900:	690f      	ldr	r7, [r1, #16]
 8013902:	2f00      	cmp	r7, #0
 8013904:	d0a9      	beq.n	801385a <__sflush_r+0x1a>
 8013906:	0793      	lsls	r3, r2, #30
 8013908:	680e      	ldr	r6, [r1, #0]
 801390a:	bf08      	it	eq
 801390c:	694b      	ldreq	r3, [r1, #20]
 801390e:	600f      	str	r7, [r1, #0]
 8013910:	bf18      	it	ne
 8013912:	2300      	movne	r3, #0
 8013914:	eba6 0807 	sub.w	r8, r6, r7
 8013918:	608b      	str	r3, [r1, #8]
 801391a:	f1b8 0f00 	cmp.w	r8, #0
 801391e:	dd9c      	ble.n	801385a <__sflush_r+0x1a>
 8013920:	4643      	mov	r3, r8
 8013922:	463a      	mov	r2, r7
 8013924:	6a21      	ldr	r1, [r4, #32]
 8013926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013928:	4628      	mov	r0, r5
 801392a:	47b0      	blx	r6
 801392c:	2800      	cmp	r0, #0
 801392e:	dc06      	bgt.n	801393e <__sflush_r+0xfe>
 8013930:	89a3      	ldrh	r3, [r4, #12]
 8013932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013936:	81a3      	strh	r3, [r4, #12]
 8013938:	f04f 30ff 	mov.w	r0, #4294967295
 801393c:	e78e      	b.n	801385c <__sflush_r+0x1c>
 801393e:	4407      	add	r7, r0
 8013940:	eba8 0800 	sub.w	r8, r8, r0
 8013944:	e7e9      	b.n	801391a <__sflush_r+0xda>
 8013946:	bf00      	nop
 8013948:	20400001 	.word	0x20400001

0801394c <_fflush_r>:
 801394c:	b538      	push	{r3, r4, r5, lr}
 801394e:	690b      	ldr	r3, [r1, #16]
 8013950:	4605      	mov	r5, r0
 8013952:	460c      	mov	r4, r1
 8013954:	b1db      	cbz	r3, 801398e <_fflush_r+0x42>
 8013956:	b118      	cbz	r0, 8013960 <_fflush_r+0x14>
 8013958:	6983      	ldr	r3, [r0, #24]
 801395a:	b90b      	cbnz	r3, 8013960 <_fflush_r+0x14>
 801395c:	f000 f860 	bl	8013a20 <__sinit>
 8013960:	4b0c      	ldr	r3, [pc, #48]	; (8013994 <_fflush_r+0x48>)
 8013962:	429c      	cmp	r4, r3
 8013964:	d109      	bne.n	801397a <_fflush_r+0x2e>
 8013966:	686c      	ldr	r4, [r5, #4]
 8013968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801396c:	b17b      	cbz	r3, 801398e <_fflush_r+0x42>
 801396e:	4621      	mov	r1, r4
 8013970:	4628      	mov	r0, r5
 8013972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013976:	f7ff bf63 	b.w	8013840 <__sflush_r>
 801397a:	4b07      	ldr	r3, [pc, #28]	; (8013998 <_fflush_r+0x4c>)
 801397c:	429c      	cmp	r4, r3
 801397e:	d101      	bne.n	8013984 <_fflush_r+0x38>
 8013980:	68ac      	ldr	r4, [r5, #8]
 8013982:	e7f1      	b.n	8013968 <_fflush_r+0x1c>
 8013984:	4b05      	ldr	r3, [pc, #20]	; (801399c <_fflush_r+0x50>)
 8013986:	429c      	cmp	r4, r3
 8013988:	bf08      	it	eq
 801398a:	68ec      	ldreq	r4, [r5, #12]
 801398c:	e7ec      	b.n	8013968 <_fflush_r+0x1c>
 801398e:	2000      	movs	r0, #0
 8013990:	bd38      	pop	{r3, r4, r5, pc}
 8013992:	bf00      	nop
 8013994:	080294e0 	.word	0x080294e0
 8013998:	08029500 	.word	0x08029500
 801399c:	080294c0 	.word	0x080294c0

080139a0 <std>:
 80139a0:	2300      	movs	r3, #0
 80139a2:	b510      	push	{r4, lr}
 80139a4:	4604      	mov	r4, r0
 80139a6:	e9c0 3300 	strd	r3, r3, [r0]
 80139aa:	6083      	str	r3, [r0, #8]
 80139ac:	8181      	strh	r1, [r0, #12]
 80139ae:	6643      	str	r3, [r0, #100]	; 0x64
 80139b0:	81c2      	strh	r2, [r0, #14]
 80139b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139b6:	6183      	str	r3, [r0, #24]
 80139b8:	4619      	mov	r1, r3
 80139ba:	2208      	movs	r2, #8
 80139bc:	305c      	adds	r0, #92	; 0x5c
 80139be:	f7fe fb58 	bl	8012072 <memset>
 80139c2:	4b05      	ldr	r3, [pc, #20]	; (80139d8 <std+0x38>)
 80139c4:	6263      	str	r3, [r4, #36]	; 0x24
 80139c6:	4b05      	ldr	r3, [pc, #20]	; (80139dc <std+0x3c>)
 80139c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80139ca:	4b05      	ldr	r3, [pc, #20]	; (80139e0 <std+0x40>)
 80139cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80139ce:	4b05      	ldr	r3, [pc, #20]	; (80139e4 <std+0x44>)
 80139d0:	6224      	str	r4, [r4, #32]
 80139d2:	6323      	str	r3, [r4, #48]	; 0x30
 80139d4:	bd10      	pop	{r4, pc}
 80139d6:	bf00      	nop
 80139d8:	080145ed 	.word	0x080145ed
 80139dc:	0801460f 	.word	0x0801460f
 80139e0:	08014647 	.word	0x08014647
 80139e4:	0801466b 	.word	0x0801466b

080139e8 <_cleanup_r>:
 80139e8:	4901      	ldr	r1, [pc, #4]	; (80139f0 <_cleanup_r+0x8>)
 80139ea:	f000 b885 	b.w	8013af8 <_fwalk_reent>
 80139ee:	bf00      	nop
 80139f0:	0801394d 	.word	0x0801394d

080139f4 <__sfmoreglue>:
 80139f4:	b570      	push	{r4, r5, r6, lr}
 80139f6:	1e4a      	subs	r2, r1, #1
 80139f8:	2568      	movs	r5, #104	; 0x68
 80139fa:	4355      	muls	r5, r2
 80139fc:	460e      	mov	r6, r1
 80139fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a02:	f000 fc49 	bl	8014298 <_malloc_r>
 8013a06:	4604      	mov	r4, r0
 8013a08:	b140      	cbz	r0, 8013a1c <__sfmoreglue+0x28>
 8013a0a:	2100      	movs	r1, #0
 8013a0c:	e9c0 1600 	strd	r1, r6, [r0]
 8013a10:	300c      	adds	r0, #12
 8013a12:	60a0      	str	r0, [r4, #8]
 8013a14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013a18:	f7fe fb2b 	bl	8012072 <memset>
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	bd70      	pop	{r4, r5, r6, pc}

08013a20 <__sinit>:
 8013a20:	6983      	ldr	r3, [r0, #24]
 8013a22:	b510      	push	{r4, lr}
 8013a24:	4604      	mov	r4, r0
 8013a26:	bb33      	cbnz	r3, 8013a76 <__sinit+0x56>
 8013a28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013a2c:	6503      	str	r3, [r0, #80]	; 0x50
 8013a2e:	4b12      	ldr	r3, [pc, #72]	; (8013a78 <__sinit+0x58>)
 8013a30:	4a12      	ldr	r2, [pc, #72]	; (8013a7c <__sinit+0x5c>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	6282      	str	r2, [r0, #40]	; 0x28
 8013a36:	4298      	cmp	r0, r3
 8013a38:	bf04      	itt	eq
 8013a3a:	2301      	moveq	r3, #1
 8013a3c:	6183      	streq	r3, [r0, #24]
 8013a3e:	f000 f81f 	bl	8013a80 <__sfp>
 8013a42:	6060      	str	r0, [r4, #4]
 8013a44:	4620      	mov	r0, r4
 8013a46:	f000 f81b 	bl	8013a80 <__sfp>
 8013a4a:	60a0      	str	r0, [r4, #8]
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f000 f817 	bl	8013a80 <__sfp>
 8013a52:	2200      	movs	r2, #0
 8013a54:	60e0      	str	r0, [r4, #12]
 8013a56:	2104      	movs	r1, #4
 8013a58:	6860      	ldr	r0, [r4, #4]
 8013a5a:	f7ff ffa1 	bl	80139a0 <std>
 8013a5e:	2201      	movs	r2, #1
 8013a60:	2109      	movs	r1, #9
 8013a62:	68a0      	ldr	r0, [r4, #8]
 8013a64:	f7ff ff9c 	bl	80139a0 <std>
 8013a68:	2202      	movs	r2, #2
 8013a6a:	2112      	movs	r1, #18
 8013a6c:	68e0      	ldr	r0, [r4, #12]
 8013a6e:	f7ff ff97 	bl	80139a0 <std>
 8013a72:	2301      	movs	r3, #1
 8013a74:	61a3      	str	r3, [r4, #24]
 8013a76:	bd10      	pop	{r4, pc}
 8013a78:	08029478 	.word	0x08029478
 8013a7c:	080139e9 	.word	0x080139e9

08013a80 <__sfp>:
 8013a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a82:	4b1b      	ldr	r3, [pc, #108]	; (8013af0 <__sfp+0x70>)
 8013a84:	681e      	ldr	r6, [r3, #0]
 8013a86:	69b3      	ldr	r3, [r6, #24]
 8013a88:	4607      	mov	r7, r0
 8013a8a:	b913      	cbnz	r3, 8013a92 <__sfp+0x12>
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	f7ff ffc7 	bl	8013a20 <__sinit>
 8013a92:	3648      	adds	r6, #72	; 0x48
 8013a94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	d503      	bpl.n	8013aa4 <__sfp+0x24>
 8013a9c:	6833      	ldr	r3, [r6, #0]
 8013a9e:	b133      	cbz	r3, 8013aae <__sfp+0x2e>
 8013aa0:	6836      	ldr	r6, [r6, #0]
 8013aa2:	e7f7      	b.n	8013a94 <__sfp+0x14>
 8013aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013aa8:	b16d      	cbz	r5, 8013ac6 <__sfp+0x46>
 8013aaa:	3468      	adds	r4, #104	; 0x68
 8013aac:	e7f4      	b.n	8013a98 <__sfp+0x18>
 8013aae:	2104      	movs	r1, #4
 8013ab0:	4638      	mov	r0, r7
 8013ab2:	f7ff ff9f 	bl	80139f4 <__sfmoreglue>
 8013ab6:	6030      	str	r0, [r6, #0]
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d1f1      	bne.n	8013aa0 <__sfp+0x20>
 8013abc:	230c      	movs	r3, #12
 8013abe:	603b      	str	r3, [r7, #0]
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ac6:	4b0b      	ldr	r3, [pc, #44]	; (8013af4 <__sfp+0x74>)
 8013ac8:	6665      	str	r5, [r4, #100]	; 0x64
 8013aca:	e9c4 5500 	strd	r5, r5, [r4]
 8013ace:	60a5      	str	r5, [r4, #8]
 8013ad0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013ad4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013ad8:	2208      	movs	r2, #8
 8013ada:	4629      	mov	r1, r5
 8013adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ae0:	f7fe fac7 	bl	8012072 <memset>
 8013ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013aec:	e7e9      	b.n	8013ac2 <__sfp+0x42>
 8013aee:	bf00      	nop
 8013af0:	08029478 	.word	0x08029478
 8013af4:	ffff0001 	.word	0xffff0001

08013af8 <_fwalk_reent>:
 8013af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013afc:	4680      	mov	r8, r0
 8013afe:	4689      	mov	r9, r1
 8013b00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013b04:	2600      	movs	r6, #0
 8013b06:	b914      	cbnz	r4, 8013b0e <_fwalk_reent+0x16>
 8013b08:	4630      	mov	r0, r6
 8013b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013b12:	3f01      	subs	r7, #1
 8013b14:	d501      	bpl.n	8013b1a <_fwalk_reent+0x22>
 8013b16:	6824      	ldr	r4, [r4, #0]
 8013b18:	e7f5      	b.n	8013b06 <_fwalk_reent+0xe>
 8013b1a:	89ab      	ldrh	r3, [r5, #12]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d907      	bls.n	8013b30 <_fwalk_reent+0x38>
 8013b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b24:	3301      	adds	r3, #1
 8013b26:	d003      	beq.n	8013b30 <_fwalk_reent+0x38>
 8013b28:	4629      	mov	r1, r5
 8013b2a:	4640      	mov	r0, r8
 8013b2c:	47c8      	blx	r9
 8013b2e:	4306      	orrs	r6, r0
 8013b30:	3568      	adds	r5, #104	; 0x68
 8013b32:	e7ee      	b.n	8013b12 <_fwalk_reent+0x1a>

08013b34 <_localeconv_r>:
 8013b34:	4b04      	ldr	r3, [pc, #16]	; (8013b48 <_localeconv_r+0x14>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	6a18      	ldr	r0, [r3, #32]
 8013b3a:	4b04      	ldr	r3, [pc, #16]	; (8013b4c <_localeconv_r+0x18>)
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	bf08      	it	eq
 8013b40:	4618      	moveq	r0, r3
 8013b42:	30f0      	adds	r0, #240	; 0xf0
 8013b44:	4770      	bx	lr
 8013b46:	bf00      	nop
 8013b48:	20000010 	.word	0x20000010
 8013b4c:	20000074 	.word	0x20000074

08013b50 <__swhatbuf_r>:
 8013b50:	b570      	push	{r4, r5, r6, lr}
 8013b52:	460e      	mov	r6, r1
 8013b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b58:	2900      	cmp	r1, #0
 8013b5a:	b096      	sub	sp, #88	; 0x58
 8013b5c:	4614      	mov	r4, r2
 8013b5e:	461d      	mov	r5, r3
 8013b60:	da07      	bge.n	8013b72 <__swhatbuf_r+0x22>
 8013b62:	2300      	movs	r3, #0
 8013b64:	602b      	str	r3, [r5, #0]
 8013b66:	89b3      	ldrh	r3, [r6, #12]
 8013b68:	061a      	lsls	r2, r3, #24
 8013b6a:	d410      	bmi.n	8013b8e <__swhatbuf_r+0x3e>
 8013b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b70:	e00e      	b.n	8013b90 <__swhatbuf_r+0x40>
 8013b72:	466a      	mov	r2, sp
 8013b74:	f000 fda0 	bl	80146b8 <_fstat_r>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	dbf2      	blt.n	8013b62 <__swhatbuf_r+0x12>
 8013b7c:	9a01      	ldr	r2, [sp, #4]
 8013b7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b86:	425a      	negs	r2, r3
 8013b88:	415a      	adcs	r2, r3
 8013b8a:	602a      	str	r2, [r5, #0]
 8013b8c:	e7ee      	b.n	8013b6c <__swhatbuf_r+0x1c>
 8013b8e:	2340      	movs	r3, #64	; 0x40
 8013b90:	2000      	movs	r0, #0
 8013b92:	6023      	str	r3, [r4, #0]
 8013b94:	b016      	add	sp, #88	; 0x58
 8013b96:	bd70      	pop	{r4, r5, r6, pc}

08013b98 <__smakebuf_r>:
 8013b98:	898b      	ldrh	r3, [r1, #12]
 8013b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b9c:	079d      	lsls	r5, r3, #30
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	460c      	mov	r4, r1
 8013ba2:	d507      	bpl.n	8013bb4 <__smakebuf_r+0x1c>
 8013ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ba8:	6023      	str	r3, [r4, #0]
 8013baa:	6123      	str	r3, [r4, #16]
 8013bac:	2301      	movs	r3, #1
 8013bae:	6163      	str	r3, [r4, #20]
 8013bb0:	b002      	add	sp, #8
 8013bb2:	bd70      	pop	{r4, r5, r6, pc}
 8013bb4:	ab01      	add	r3, sp, #4
 8013bb6:	466a      	mov	r2, sp
 8013bb8:	f7ff ffca 	bl	8013b50 <__swhatbuf_r>
 8013bbc:	9900      	ldr	r1, [sp, #0]
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	f000 fb69 	bl	8014298 <_malloc_r>
 8013bc6:	b948      	cbnz	r0, 8013bdc <__smakebuf_r+0x44>
 8013bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bcc:	059a      	lsls	r2, r3, #22
 8013bce:	d4ef      	bmi.n	8013bb0 <__smakebuf_r+0x18>
 8013bd0:	f023 0303 	bic.w	r3, r3, #3
 8013bd4:	f043 0302 	orr.w	r3, r3, #2
 8013bd8:	81a3      	strh	r3, [r4, #12]
 8013bda:	e7e3      	b.n	8013ba4 <__smakebuf_r+0xc>
 8013bdc:	4b0d      	ldr	r3, [pc, #52]	; (8013c14 <__smakebuf_r+0x7c>)
 8013bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8013be0:	89a3      	ldrh	r3, [r4, #12]
 8013be2:	6020      	str	r0, [r4, #0]
 8013be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013be8:	81a3      	strh	r3, [r4, #12]
 8013bea:	9b00      	ldr	r3, [sp, #0]
 8013bec:	6163      	str	r3, [r4, #20]
 8013bee:	9b01      	ldr	r3, [sp, #4]
 8013bf0:	6120      	str	r0, [r4, #16]
 8013bf2:	b15b      	cbz	r3, 8013c0c <__smakebuf_r+0x74>
 8013bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f000 fd6f 	bl	80146dc <_isatty_r>
 8013bfe:	b128      	cbz	r0, 8013c0c <__smakebuf_r+0x74>
 8013c00:	89a3      	ldrh	r3, [r4, #12]
 8013c02:	f023 0303 	bic.w	r3, r3, #3
 8013c06:	f043 0301 	orr.w	r3, r3, #1
 8013c0a:	81a3      	strh	r3, [r4, #12]
 8013c0c:	89a3      	ldrh	r3, [r4, #12]
 8013c0e:	431d      	orrs	r5, r3
 8013c10:	81a5      	strh	r5, [r4, #12]
 8013c12:	e7cd      	b.n	8013bb0 <__smakebuf_r+0x18>
 8013c14:	080139e9 	.word	0x080139e9

08013c18 <malloc>:
 8013c18:	4b02      	ldr	r3, [pc, #8]	; (8013c24 <malloc+0xc>)
 8013c1a:	4601      	mov	r1, r0
 8013c1c:	6818      	ldr	r0, [r3, #0]
 8013c1e:	f000 bb3b 	b.w	8014298 <_malloc_r>
 8013c22:	bf00      	nop
 8013c24:	20000010 	.word	0x20000010

08013c28 <_Balloc>:
 8013c28:	b570      	push	{r4, r5, r6, lr}
 8013c2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013c2c:	4604      	mov	r4, r0
 8013c2e:	460e      	mov	r6, r1
 8013c30:	b93d      	cbnz	r5, 8013c42 <_Balloc+0x1a>
 8013c32:	2010      	movs	r0, #16
 8013c34:	f7ff fff0 	bl	8013c18 <malloc>
 8013c38:	6260      	str	r0, [r4, #36]	; 0x24
 8013c3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013c3e:	6005      	str	r5, [r0, #0]
 8013c40:	60c5      	str	r5, [r0, #12]
 8013c42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013c44:	68eb      	ldr	r3, [r5, #12]
 8013c46:	b183      	cbz	r3, 8013c6a <_Balloc+0x42>
 8013c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013c50:	b9b8      	cbnz	r0, 8013c82 <_Balloc+0x5a>
 8013c52:	2101      	movs	r1, #1
 8013c54:	fa01 f506 	lsl.w	r5, r1, r6
 8013c58:	1d6a      	adds	r2, r5, #5
 8013c5a:	0092      	lsls	r2, r2, #2
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f000 fabf 	bl	80141e0 <_calloc_r>
 8013c62:	b160      	cbz	r0, 8013c7e <_Balloc+0x56>
 8013c64:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013c68:	e00e      	b.n	8013c88 <_Balloc+0x60>
 8013c6a:	2221      	movs	r2, #33	; 0x21
 8013c6c:	2104      	movs	r1, #4
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f000 fab6 	bl	80141e0 <_calloc_r>
 8013c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c76:	60e8      	str	r0, [r5, #12]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d1e4      	bne.n	8013c48 <_Balloc+0x20>
 8013c7e:	2000      	movs	r0, #0
 8013c80:	bd70      	pop	{r4, r5, r6, pc}
 8013c82:	6802      	ldr	r2, [r0, #0]
 8013c84:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013c88:	2300      	movs	r3, #0
 8013c8a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c8e:	e7f7      	b.n	8013c80 <_Balloc+0x58>

08013c90 <_Bfree>:
 8013c90:	b570      	push	{r4, r5, r6, lr}
 8013c92:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013c94:	4606      	mov	r6, r0
 8013c96:	460d      	mov	r5, r1
 8013c98:	b93c      	cbnz	r4, 8013caa <_Bfree+0x1a>
 8013c9a:	2010      	movs	r0, #16
 8013c9c:	f7ff ffbc 	bl	8013c18 <malloc>
 8013ca0:	6270      	str	r0, [r6, #36]	; 0x24
 8013ca2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ca6:	6004      	str	r4, [r0, #0]
 8013ca8:	60c4      	str	r4, [r0, #12]
 8013caa:	b13d      	cbz	r5, 8013cbc <_Bfree+0x2c>
 8013cac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013cae:	686a      	ldr	r2, [r5, #4]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013cb6:	6029      	str	r1, [r5, #0]
 8013cb8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013cbc:	bd70      	pop	{r4, r5, r6, pc}

08013cbe <__multadd>:
 8013cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc2:	690d      	ldr	r5, [r1, #16]
 8013cc4:	461f      	mov	r7, r3
 8013cc6:	4606      	mov	r6, r0
 8013cc8:	460c      	mov	r4, r1
 8013cca:	f101 0c14 	add.w	ip, r1, #20
 8013cce:	2300      	movs	r3, #0
 8013cd0:	f8dc 0000 	ldr.w	r0, [ip]
 8013cd4:	b281      	uxth	r1, r0
 8013cd6:	fb02 7101 	mla	r1, r2, r1, r7
 8013cda:	0c0f      	lsrs	r7, r1, #16
 8013cdc:	0c00      	lsrs	r0, r0, #16
 8013cde:	fb02 7000 	mla	r0, r2, r0, r7
 8013ce2:	b289      	uxth	r1, r1
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013cea:	429d      	cmp	r5, r3
 8013cec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013cf0:	f84c 1b04 	str.w	r1, [ip], #4
 8013cf4:	dcec      	bgt.n	8013cd0 <__multadd+0x12>
 8013cf6:	b1d7      	cbz	r7, 8013d2e <__multadd+0x70>
 8013cf8:	68a3      	ldr	r3, [r4, #8]
 8013cfa:	42ab      	cmp	r3, r5
 8013cfc:	dc12      	bgt.n	8013d24 <__multadd+0x66>
 8013cfe:	6861      	ldr	r1, [r4, #4]
 8013d00:	4630      	mov	r0, r6
 8013d02:	3101      	adds	r1, #1
 8013d04:	f7ff ff90 	bl	8013c28 <_Balloc>
 8013d08:	6922      	ldr	r2, [r4, #16]
 8013d0a:	3202      	adds	r2, #2
 8013d0c:	f104 010c 	add.w	r1, r4, #12
 8013d10:	4680      	mov	r8, r0
 8013d12:	0092      	lsls	r2, r2, #2
 8013d14:	300c      	adds	r0, #12
 8013d16:	f7fe f9a1 	bl	801205c <memcpy>
 8013d1a:	4621      	mov	r1, r4
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	f7ff ffb7 	bl	8013c90 <_Bfree>
 8013d22:	4644      	mov	r4, r8
 8013d24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013d28:	3501      	adds	r5, #1
 8013d2a:	615f      	str	r7, [r3, #20]
 8013d2c:	6125      	str	r5, [r4, #16]
 8013d2e:	4620      	mov	r0, r4
 8013d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d34 <__hi0bits>:
 8013d34:	0c02      	lsrs	r2, r0, #16
 8013d36:	0412      	lsls	r2, r2, #16
 8013d38:	4603      	mov	r3, r0
 8013d3a:	b9b2      	cbnz	r2, 8013d6a <__hi0bits+0x36>
 8013d3c:	0403      	lsls	r3, r0, #16
 8013d3e:	2010      	movs	r0, #16
 8013d40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013d44:	bf04      	itt	eq
 8013d46:	021b      	lsleq	r3, r3, #8
 8013d48:	3008      	addeq	r0, #8
 8013d4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013d4e:	bf04      	itt	eq
 8013d50:	011b      	lsleq	r3, r3, #4
 8013d52:	3004      	addeq	r0, #4
 8013d54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013d58:	bf04      	itt	eq
 8013d5a:	009b      	lsleq	r3, r3, #2
 8013d5c:	3002      	addeq	r0, #2
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	db06      	blt.n	8013d70 <__hi0bits+0x3c>
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	d503      	bpl.n	8013d6e <__hi0bits+0x3a>
 8013d66:	3001      	adds	r0, #1
 8013d68:	4770      	bx	lr
 8013d6a:	2000      	movs	r0, #0
 8013d6c:	e7e8      	b.n	8013d40 <__hi0bits+0xc>
 8013d6e:	2020      	movs	r0, #32
 8013d70:	4770      	bx	lr

08013d72 <__lo0bits>:
 8013d72:	6803      	ldr	r3, [r0, #0]
 8013d74:	f013 0207 	ands.w	r2, r3, #7
 8013d78:	4601      	mov	r1, r0
 8013d7a:	d00b      	beq.n	8013d94 <__lo0bits+0x22>
 8013d7c:	07da      	lsls	r2, r3, #31
 8013d7e:	d423      	bmi.n	8013dc8 <__lo0bits+0x56>
 8013d80:	0798      	lsls	r0, r3, #30
 8013d82:	bf49      	itett	mi
 8013d84:	085b      	lsrmi	r3, r3, #1
 8013d86:	089b      	lsrpl	r3, r3, #2
 8013d88:	2001      	movmi	r0, #1
 8013d8a:	600b      	strmi	r3, [r1, #0]
 8013d8c:	bf5c      	itt	pl
 8013d8e:	600b      	strpl	r3, [r1, #0]
 8013d90:	2002      	movpl	r0, #2
 8013d92:	4770      	bx	lr
 8013d94:	b298      	uxth	r0, r3
 8013d96:	b9a8      	cbnz	r0, 8013dc4 <__lo0bits+0x52>
 8013d98:	0c1b      	lsrs	r3, r3, #16
 8013d9a:	2010      	movs	r0, #16
 8013d9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013da0:	bf04      	itt	eq
 8013da2:	0a1b      	lsreq	r3, r3, #8
 8013da4:	3008      	addeq	r0, #8
 8013da6:	071a      	lsls	r2, r3, #28
 8013da8:	bf04      	itt	eq
 8013daa:	091b      	lsreq	r3, r3, #4
 8013dac:	3004      	addeq	r0, #4
 8013dae:	079a      	lsls	r2, r3, #30
 8013db0:	bf04      	itt	eq
 8013db2:	089b      	lsreq	r3, r3, #2
 8013db4:	3002      	addeq	r0, #2
 8013db6:	07da      	lsls	r2, r3, #31
 8013db8:	d402      	bmi.n	8013dc0 <__lo0bits+0x4e>
 8013dba:	085b      	lsrs	r3, r3, #1
 8013dbc:	d006      	beq.n	8013dcc <__lo0bits+0x5a>
 8013dbe:	3001      	adds	r0, #1
 8013dc0:	600b      	str	r3, [r1, #0]
 8013dc2:	4770      	bx	lr
 8013dc4:	4610      	mov	r0, r2
 8013dc6:	e7e9      	b.n	8013d9c <__lo0bits+0x2a>
 8013dc8:	2000      	movs	r0, #0
 8013dca:	4770      	bx	lr
 8013dcc:	2020      	movs	r0, #32
 8013dce:	4770      	bx	lr

08013dd0 <__i2b>:
 8013dd0:	b510      	push	{r4, lr}
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	f7ff ff27 	bl	8013c28 <_Balloc>
 8013dda:	2201      	movs	r2, #1
 8013ddc:	6144      	str	r4, [r0, #20]
 8013dde:	6102      	str	r2, [r0, #16]
 8013de0:	bd10      	pop	{r4, pc}

08013de2 <__multiply>:
 8013de2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de6:	4614      	mov	r4, r2
 8013de8:	690a      	ldr	r2, [r1, #16]
 8013dea:	6923      	ldr	r3, [r4, #16]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	bfb8      	it	lt
 8013df0:	460b      	movlt	r3, r1
 8013df2:	4688      	mov	r8, r1
 8013df4:	bfbc      	itt	lt
 8013df6:	46a0      	movlt	r8, r4
 8013df8:	461c      	movlt	r4, r3
 8013dfa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013dfe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013e02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013e06:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e0a:	eb07 0609 	add.w	r6, r7, r9
 8013e0e:	42b3      	cmp	r3, r6
 8013e10:	bfb8      	it	lt
 8013e12:	3101      	addlt	r1, #1
 8013e14:	f7ff ff08 	bl	8013c28 <_Balloc>
 8013e18:	f100 0514 	add.w	r5, r0, #20
 8013e1c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013e20:	462b      	mov	r3, r5
 8013e22:	2200      	movs	r2, #0
 8013e24:	4573      	cmp	r3, lr
 8013e26:	d316      	bcc.n	8013e56 <__multiply+0x74>
 8013e28:	f104 0214 	add.w	r2, r4, #20
 8013e2c:	f108 0114 	add.w	r1, r8, #20
 8013e30:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013e34:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	9b00      	ldr	r3, [sp, #0]
 8013e3c:	9201      	str	r2, [sp, #4]
 8013e3e:	4293      	cmp	r3, r2
 8013e40:	d80c      	bhi.n	8013e5c <__multiply+0x7a>
 8013e42:	2e00      	cmp	r6, #0
 8013e44:	dd03      	ble.n	8013e4e <__multiply+0x6c>
 8013e46:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d05d      	beq.n	8013f0a <__multiply+0x128>
 8013e4e:	6106      	str	r6, [r0, #16]
 8013e50:	b003      	add	sp, #12
 8013e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e56:	f843 2b04 	str.w	r2, [r3], #4
 8013e5a:	e7e3      	b.n	8013e24 <__multiply+0x42>
 8013e5c:	f8b2 b000 	ldrh.w	fp, [r2]
 8013e60:	f1bb 0f00 	cmp.w	fp, #0
 8013e64:	d023      	beq.n	8013eae <__multiply+0xcc>
 8013e66:	4689      	mov	r9, r1
 8013e68:	46ac      	mov	ip, r5
 8013e6a:	f04f 0800 	mov.w	r8, #0
 8013e6e:	f859 4b04 	ldr.w	r4, [r9], #4
 8013e72:	f8dc a000 	ldr.w	sl, [ip]
 8013e76:	b2a3      	uxth	r3, r4
 8013e78:	fa1f fa8a 	uxth.w	sl, sl
 8013e7c:	fb0b a303 	mla	r3, fp, r3, sl
 8013e80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013e84:	f8dc 4000 	ldr.w	r4, [ip]
 8013e88:	4443      	add	r3, r8
 8013e8a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013e8e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013e92:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013e96:	46e2      	mov	sl, ip
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013e9e:	454f      	cmp	r7, r9
 8013ea0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013ea4:	f84a 3b04 	str.w	r3, [sl], #4
 8013ea8:	d82b      	bhi.n	8013f02 <__multiply+0x120>
 8013eaa:	f8cc 8004 	str.w	r8, [ip, #4]
 8013eae:	9b01      	ldr	r3, [sp, #4]
 8013eb0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013eb4:	3204      	adds	r2, #4
 8013eb6:	f1ba 0f00 	cmp.w	sl, #0
 8013eba:	d020      	beq.n	8013efe <__multiply+0x11c>
 8013ebc:	682b      	ldr	r3, [r5, #0]
 8013ebe:	4689      	mov	r9, r1
 8013ec0:	46a8      	mov	r8, r5
 8013ec2:	f04f 0b00 	mov.w	fp, #0
 8013ec6:	f8b9 c000 	ldrh.w	ip, [r9]
 8013eca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013ece:	fb0a 440c 	mla	r4, sl, ip, r4
 8013ed2:	445c      	add	r4, fp
 8013ed4:	46c4      	mov	ip, r8
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013edc:	f84c 3b04 	str.w	r3, [ip], #4
 8013ee0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013ee4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013ee8:	0c1b      	lsrs	r3, r3, #16
 8013eea:	fb0a b303 	mla	r3, sl, r3, fp
 8013eee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013ef2:	454f      	cmp	r7, r9
 8013ef4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013ef8:	d805      	bhi.n	8013f06 <__multiply+0x124>
 8013efa:	f8c8 3004 	str.w	r3, [r8, #4]
 8013efe:	3504      	adds	r5, #4
 8013f00:	e79b      	b.n	8013e3a <__multiply+0x58>
 8013f02:	46d4      	mov	ip, sl
 8013f04:	e7b3      	b.n	8013e6e <__multiply+0x8c>
 8013f06:	46e0      	mov	r8, ip
 8013f08:	e7dd      	b.n	8013ec6 <__multiply+0xe4>
 8013f0a:	3e01      	subs	r6, #1
 8013f0c:	e799      	b.n	8013e42 <__multiply+0x60>
	...

08013f10 <__pow5mult>:
 8013f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f14:	4615      	mov	r5, r2
 8013f16:	f012 0203 	ands.w	r2, r2, #3
 8013f1a:	4606      	mov	r6, r0
 8013f1c:	460f      	mov	r7, r1
 8013f1e:	d007      	beq.n	8013f30 <__pow5mult+0x20>
 8013f20:	3a01      	subs	r2, #1
 8013f22:	4c21      	ldr	r4, [pc, #132]	; (8013fa8 <__pow5mult+0x98>)
 8013f24:	2300      	movs	r3, #0
 8013f26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f2a:	f7ff fec8 	bl	8013cbe <__multadd>
 8013f2e:	4607      	mov	r7, r0
 8013f30:	10ad      	asrs	r5, r5, #2
 8013f32:	d035      	beq.n	8013fa0 <__pow5mult+0x90>
 8013f34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013f36:	b93c      	cbnz	r4, 8013f48 <__pow5mult+0x38>
 8013f38:	2010      	movs	r0, #16
 8013f3a:	f7ff fe6d 	bl	8013c18 <malloc>
 8013f3e:	6270      	str	r0, [r6, #36]	; 0x24
 8013f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f44:	6004      	str	r4, [r0, #0]
 8013f46:	60c4      	str	r4, [r0, #12]
 8013f48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f50:	b94c      	cbnz	r4, 8013f66 <__pow5mult+0x56>
 8013f52:	f240 2171 	movw	r1, #625	; 0x271
 8013f56:	4630      	mov	r0, r6
 8013f58:	f7ff ff3a 	bl	8013dd0 <__i2b>
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f62:	4604      	mov	r4, r0
 8013f64:	6003      	str	r3, [r0, #0]
 8013f66:	f04f 0800 	mov.w	r8, #0
 8013f6a:	07eb      	lsls	r3, r5, #31
 8013f6c:	d50a      	bpl.n	8013f84 <__pow5mult+0x74>
 8013f6e:	4639      	mov	r1, r7
 8013f70:	4622      	mov	r2, r4
 8013f72:	4630      	mov	r0, r6
 8013f74:	f7ff ff35 	bl	8013de2 <__multiply>
 8013f78:	4639      	mov	r1, r7
 8013f7a:	4681      	mov	r9, r0
 8013f7c:	4630      	mov	r0, r6
 8013f7e:	f7ff fe87 	bl	8013c90 <_Bfree>
 8013f82:	464f      	mov	r7, r9
 8013f84:	106d      	asrs	r5, r5, #1
 8013f86:	d00b      	beq.n	8013fa0 <__pow5mult+0x90>
 8013f88:	6820      	ldr	r0, [r4, #0]
 8013f8a:	b938      	cbnz	r0, 8013f9c <__pow5mult+0x8c>
 8013f8c:	4622      	mov	r2, r4
 8013f8e:	4621      	mov	r1, r4
 8013f90:	4630      	mov	r0, r6
 8013f92:	f7ff ff26 	bl	8013de2 <__multiply>
 8013f96:	6020      	str	r0, [r4, #0]
 8013f98:	f8c0 8000 	str.w	r8, [r0]
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	e7e4      	b.n	8013f6a <__pow5mult+0x5a>
 8013fa0:	4638      	mov	r0, r7
 8013fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fa6:	bf00      	nop
 8013fa8:	08029610 	.word	0x08029610

08013fac <__lshift>:
 8013fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fb0:	460c      	mov	r4, r1
 8013fb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013fb6:	6923      	ldr	r3, [r4, #16]
 8013fb8:	6849      	ldr	r1, [r1, #4]
 8013fba:	eb0a 0903 	add.w	r9, sl, r3
 8013fbe:	68a3      	ldr	r3, [r4, #8]
 8013fc0:	4607      	mov	r7, r0
 8013fc2:	4616      	mov	r6, r2
 8013fc4:	f109 0501 	add.w	r5, r9, #1
 8013fc8:	42ab      	cmp	r3, r5
 8013fca:	db32      	blt.n	8014032 <__lshift+0x86>
 8013fcc:	4638      	mov	r0, r7
 8013fce:	f7ff fe2b 	bl	8013c28 <_Balloc>
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	4680      	mov	r8, r0
 8013fd6:	f100 0114 	add.w	r1, r0, #20
 8013fda:	461a      	mov	r2, r3
 8013fdc:	4553      	cmp	r3, sl
 8013fde:	db2b      	blt.n	8014038 <__lshift+0x8c>
 8013fe0:	6920      	ldr	r0, [r4, #16]
 8013fe2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013fe6:	f104 0314 	add.w	r3, r4, #20
 8013fea:	f016 021f 	ands.w	r2, r6, #31
 8013fee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ff2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ff6:	d025      	beq.n	8014044 <__lshift+0x98>
 8013ff8:	f1c2 0e20 	rsb	lr, r2, #32
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	681e      	ldr	r6, [r3, #0]
 8014000:	468a      	mov	sl, r1
 8014002:	4096      	lsls	r6, r2
 8014004:	4330      	orrs	r0, r6
 8014006:	f84a 0b04 	str.w	r0, [sl], #4
 801400a:	f853 0b04 	ldr.w	r0, [r3], #4
 801400e:	459c      	cmp	ip, r3
 8014010:	fa20 f00e 	lsr.w	r0, r0, lr
 8014014:	d814      	bhi.n	8014040 <__lshift+0x94>
 8014016:	6048      	str	r0, [r1, #4]
 8014018:	b108      	cbz	r0, 801401e <__lshift+0x72>
 801401a:	f109 0502 	add.w	r5, r9, #2
 801401e:	3d01      	subs	r5, #1
 8014020:	4638      	mov	r0, r7
 8014022:	f8c8 5010 	str.w	r5, [r8, #16]
 8014026:	4621      	mov	r1, r4
 8014028:	f7ff fe32 	bl	8013c90 <_Bfree>
 801402c:	4640      	mov	r0, r8
 801402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014032:	3101      	adds	r1, #1
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	e7c7      	b.n	8013fc8 <__lshift+0x1c>
 8014038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801403c:	3301      	adds	r3, #1
 801403e:	e7cd      	b.n	8013fdc <__lshift+0x30>
 8014040:	4651      	mov	r1, sl
 8014042:	e7dc      	b.n	8013ffe <__lshift+0x52>
 8014044:	3904      	subs	r1, #4
 8014046:	f853 2b04 	ldr.w	r2, [r3], #4
 801404a:	f841 2f04 	str.w	r2, [r1, #4]!
 801404e:	459c      	cmp	ip, r3
 8014050:	d8f9      	bhi.n	8014046 <__lshift+0x9a>
 8014052:	e7e4      	b.n	801401e <__lshift+0x72>

08014054 <__mcmp>:
 8014054:	6903      	ldr	r3, [r0, #16]
 8014056:	690a      	ldr	r2, [r1, #16]
 8014058:	1a9b      	subs	r3, r3, r2
 801405a:	b530      	push	{r4, r5, lr}
 801405c:	d10c      	bne.n	8014078 <__mcmp+0x24>
 801405e:	0092      	lsls	r2, r2, #2
 8014060:	3014      	adds	r0, #20
 8014062:	3114      	adds	r1, #20
 8014064:	1884      	adds	r4, r0, r2
 8014066:	4411      	add	r1, r2
 8014068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801406c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014070:	4295      	cmp	r5, r2
 8014072:	d003      	beq.n	801407c <__mcmp+0x28>
 8014074:	d305      	bcc.n	8014082 <__mcmp+0x2e>
 8014076:	2301      	movs	r3, #1
 8014078:	4618      	mov	r0, r3
 801407a:	bd30      	pop	{r4, r5, pc}
 801407c:	42a0      	cmp	r0, r4
 801407e:	d3f3      	bcc.n	8014068 <__mcmp+0x14>
 8014080:	e7fa      	b.n	8014078 <__mcmp+0x24>
 8014082:	f04f 33ff 	mov.w	r3, #4294967295
 8014086:	e7f7      	b.n	8014078 <__mcmp+0x24>

08014088 <__mdiff>:
 8014088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801408c:	460d      	mov	r5, r1
 801408e:	4607      	mov	r7, r0
 8014090:	4611      	mov	r1, r2
 8014092:	4628      	mov	r0, r5
 8014094:	4614      	mov	r4, r2
 8014096:	f7ff ffdd 	bl	8014054 <__mcmp>
 801409a:	1e06      	subs	r6, r0, #0
 801409c:	d108      	bne.n	80140b0 <__mdiff+0x28>
 801409e:	4631      	mov	r1, r6
 80140a0:	4638      	mov	r0, r7
 80140a2:	f7ff fdc1 	bl	8013c28 <_Balloc>
 80140a6:	2301      	movs	r3, #1
 80140a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80140ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140b0:	bfa4      	itt	ge
 80140b2:	4623      	movge	r3, r4
 80140b4:	462c      	movge	r4, r5
 80140b6:	4638      	mov	r0, r7
 80140b8:	6861      	ldr	r1, [r4, #4]
 80140ba:	bfa6      	itte	ge
 80140bc:	461d      	movge	r5, r3
 80140be:	2600      	movge	r6, #0
 80140c0:	2601      	movlt	r6, #1
 80140c2:	f7ff fdb1 	bl	8013c28 <_Balloc>
 80140c6:	692b      	ldr	r3, [r5, #16]
 80140c8:	60c6      	str	r6, [r0, #12]
 80140ca:	6926      	ldr	r6, [r4, #16]
 80140cc:	f105 0914 	add.w	r9, r5, #20
 80140d0:	f104 0214 	add.w	r2, r4, #20
 80140d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80140d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80140dc:	f100 0514 	add.w	r5, r0, #20
 80140e0:	f04f 0e00 	mov.w	lr, #0
 80140e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80140e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80140ec:	fa1e f18a 	uxtah	r1, lr, sl
 80140f0:	b2a3      	uxth	r3, r4
 80140f2:	1ac9      	subs	r1, r1, r3
 80140f4:	0c23      	lsrs	r3, r4, #16
 80140f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80140fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80140fe:	b289      	uxth	r1, r1
 8014100:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014104:	45c8      	cmp	r8, r9
 8014106:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801410a:	4694      	mov	ip, r2
 801410c:	f845 3b04 	str.w	r3, [r5], #4
 8014110:	d8e8      	bhi.n	80140e4 <__mdiff+0x5c>
 8014112:	45bc      	cmp	ip, r7
 8014114:	d304      	bcc.n	8014120 <__mdiff+0x98>
 8014116:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801411a:	b183      	cbz	r3, 801413e <__mdiff+0xb6>
 801411c:	6106      	str	r6, [r0, #16]
 801411e:	e7c5      	b.n	80140ac <__mdiff+0x24>
 8014120:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014124:	fa1e f381 	uxtah	r3, lr, r1
 8014128:	141a      	asrs	r2, r3, #16
 801412a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801412e:	b29b      	uxth	r3, r3
 8014130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014134:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014138:	f845 3b04 	str.w	r3, [r5], #4
 801413c:	e7e9      	b.n	8014112 <__mdiff+0x8a>
 801413e:	3e01      	subs	r6, #1
 8014140:	e7e9      	b.n	8014116 <__mdiff+0x8e>

08014142 <__d2b>:
 8014142:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014146:	460e      	mov	r6, r1
 8014148:	2101      	movs	r1, #1
 801414a:	ec59 8b10 	vmov	r8, r9, d0
 801414e:	4615      	mov	r5, r2
 8014150:	f7ff fd6a 	bl	8013c28 <_Balloc>
 8014154:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014158:	4607      	mov	r7, r0
 801415a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801415e:	bb34      	cbnz	r4, 80141ae <__d2b+0x6c>
 8014160:	9301      	str	r3, [sp, #4]
 8014162:	f1b8 0300 	subs.w	r3, r8, #0
 8014166:	d027      	beq.n	80141b8 <__d2b+0x76>
 8014168:	a802      	add	r0, sp, #8
 801416a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801416e:	f7ff fe00 	bl	8013d72 <__lo0bits>
 8014172:	9900      	ldr	r1, [sp, #0]
 8014174:	b1f0      	cbz	r0, 80141b4 <__d2b+0x72>
 8014176:	9a01      	ldr	r2, [sp, #4]
 8014178:	f1c0 0320 	rsb	r3, r0, #32
 801417c:	fa02 f303 	lsl.w	r3, r2, r3
 8014180:	430b      	orrs	r3, r1
 8014182:	40c2      	lsrs	r2, r0
 8014184:	617b      	str	r3, [r7, #20]
 8014186:	9201      	str	r2, [sp, #4]
 8014188:	9b01      	ldr	r3, [sp, #4]
 801418a:	61bb      	str	r3, [r7, #24]
 801418c:	2b00      	cmp	r3, #0
 801418e:	bf14      	ite	ne
 8014190:	2102      	movne	r1, #2
 8014192:	2101      	moveq	r1, #1
 8014194:	6139      	str	r1, [r7, #16]
 8014196:	b1c4      	cbz	r4, 80141ca <__d2b+0x88>
 8014198:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801419c:	4404      	add	r4, r0
 801419e:	6034      	str	r4, [r6, #0]
 80141a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80141a4:	6028      	str	r0, [r5, #0]
 80141a6:	4638      	mov	r0, r7
 80141a8:	b003      	add	sp, #12
 80141aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80141b2:	e7d5      	b.n	8014160 <__d2b+0x1e>
 80141b4:	6179      	str	r1, [r7, #20]
 80141b6:	e7e7      	b.n	8014188 <__d2b+0x46>
 80141b8:	a801      	add	r0, sp, #4
 80141ba:	f7ff fdda 	bl	8013d72 <__lo0bits>
 80141be:	9b01      	ldr	r3, [sp, #4]
 80141c0:	617b      	str	r3, [r7, #20]
 80141c2:	2101      	movs	r1, #1
 80141c4:	6139      	str	r1, [r7, #16]
 80141c6:	3020      	adds	r0, #32
 80141c8:	e7e5      	b.n	8014196 <__d2b+0x54>
 80141ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80141ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80141d2:	6030      	str	r0, [r6, #0]
 80141d4:	6918      	ldr	r0, [r3, #16]
 80141d6:	f7ff fdad 	bl	8013d34 <__hi0bits>
 80141da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80141de:	e7e1      	b.n	80141a4 <__d2b+0x62>

080141e0 <_calloc_r>:
 80141e0:	b538      	push	{r3, r4, r5, lr}
 80141e2:	fb02 f401 	mul.w	r4, r2, r1
 80141e6:	4621      	mov	r1, r4
 80141e8:	f000 f856 	bl	8014298 <_malloc_r>
 80141ec:	4605      	mov	r5, r0
 80141ee:	b118      	cbz	r0, 80141f8 <_calloc_r+0x18>
 80141f0:	4622      	mov	r2, r4
 80141f2:	2100      	movs	r1, #0
 80141f4:	f7fd ff3d 	bl	8012072 <memset>
 80141f8:	4628      	mov	r0, r5
 80141fa:	bd38      	pop	{r3, r4, r5, pc}

080141fc <_free_r>:
 80141fc:	b538      	push	{r3, r4, r5, lr}
 80141fe:	4605      	mov	r5, r0
 8014200:	2900      	cmp	r1, #0
 8014202:	d045      	beq.n	8014290 <_free_r+0x94>
 8014204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014208:	1f0c      	subs	r4, r1, #4
 801420a:	2b00      	cmp	r3, #0
 801420c:	bfb8      	it	lt
 801420e:	18e4      	addlt	r4, r4, r3
 8014210:	f000 fa98 	bl	8014744 <__malloc_lock>
 8014214:	4a1f      	ldr	r2, [pc, #124]	; (8014294 <_free_r+0x98>)
 8014216:	6813      	ldr	r3, [r2, #0]
 8014218:	4610      	mov	r0, r2
 801421a:	b933      	cbnz	r3, 801422a <_free_r+0x2e>
 801421c:	6063      	str	r3, [r4, #4]
 801421e:	6014      	str	r4, [r2, #0]
 8014220:	4628      	mov	r0, r5
 8014222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014226:	f000 ba8e 	b.w	8014746 <__malloc_unlock>
 801422a:	42a3      	cmp	r3, r4
 801422c:	d90c      	bls.n	8014248 <_free_r+0x4c>
 801422e:	6821      	ldr	r1, [r4, #0]
 8014230:	1862      	adds	r2, r4, r1
 8014232:	4293      	cmp	r3, r2
 8014234:	bf04      	itt	eq
 8014236:	681a      	ldreq	r2, [r3, #0]
 8014238:	685b      	ldreq	r3, [r3, #4]
 801423a:	6063      	str	r3, [r4, #4]
 801423c:	bf04      	itt	eq
 801423e:	1852      	addeq	r2, r2, r1
 8014240:	6022      	streq	r2, [r4, #0]
 8014242:	6004      	str	r4, [r0, #0]
 8014244:	e7ec      	b.n	8014220 <_free_r+0x24>
 8014246:	4613      	mov	r3, r2
 8014248:	685a      	ldr	r2, [r3, #4]
 801424a:	b10a      	cbz	r2, 8014250 <_free_r+0x54>
 801424c:	42a2      	cmp	r2, r4
 801424e:	d9fa      	bls.n	8014246 <_free_r+0x4a>
 8014250:	6819      	ldr	r1, [r3, #0]
 8014252:	1858      	adds	r0, r3, r1
 8014254:	42a0      	cmp	r0, r4
 8014256:	d10b      	bne.n	8014270 <_free_r+0x74>
 8014258:	6820      	ldr	r0, [r4, #0]
 801425a:	4401      	add	r1, r0
 801425c:	1858      	adds	r0, r3, r1
 801425e:	4282      	cmp	r2, r0
 8014260:	6019      	str	r1, [r3, #0]
 8014262:	d1dd      	bne.n	8014220 <_free_r+0x24>
 8014264:	6810      	ldr	r0, [r2, #0]
 8014266:	6852      	ldr	r2, [r2, #4]
 8014268:	605a      	str	r2, [r3, #4]
 801426a:	4401      	add	r1, r0
 801426c:	6019      	str	r1, [r3, #0]
 801426e:	e7d7      	b.n	8014220 <_free_r+0x24>
 8014270:	d902      	bls.n	8014278 <_free_r+0x7c>
 8014272:	230c      	movs	r3, #12
 8014274:	602b      	str	r3, [r5, #0]
 8014276:	e7d3      	b.n	8014220 <_free_r+0x24>
 8014278:	6820      	ldr	r0, [r4, #0]
 801427a:	1821      	adds	r1, r4, r0
 801427c:	428a      	cmp	r2, r1
 801427e:	bf04      	itt	eq
 8014280:	6811      	ldreq	r1, [r2, #0]
 8014282:	6852      	ldreq	r2, [r2, #4]
 8014284:	6062      	str	r2, [r4, #4]
 8014286:	bf04      	itt	eq
 8014288:	1809      	addeq	r1, r1, r0
 801428a:	6021      	streq	r1, [r4, #0]
 801428c:	605c      	str	r4, [r3, #4]
 801428e:	e7c7      	b.n	8014220 <_free_r+0x24>
 8014290:	bd38      	pop	{r3, r4, r5, pc}
 8014292:	bf00      	nop
 8014294:	200042ac 	.word	0x200042ac

08014298 <_malloc_r>:
 8014298:	b570      	push	{r4, r5, r6, lr}
 801429a:	1ccd      	adds	r5, r1, #3
 801429c:	f025 0503 	bic.w	r5, r5, #3
 80142a0:	3508      	adds	r5, #8
 80142a2:	2d0c      	cmp	r5, #12
 80142a4:	bf38      	it	cc
 80142a6:	250c      	movcc	r5, #12
 80142a8:	2d00      	cmp	r5, #0
 80142aa:	4606      	mov	r6, r0
 80142ac:	db01      	blt.n	80142b2 <_malloc_r+0x1a>
 80142ae:	42a9      	cmp	r1, r5
 80142b0:	d903      	bls.n	80142ba <_malloc_r+0x22>
 80142b2:	230c      	movs	r3, #12
 80142b4:	6033      	str	r3, [r6, #0]
 80142b6:	2000      	movs	r0, #0
 80142b8:	bd70      	pop	{r4, r5, r6, pc}
 80142ba:	f000 fa43 	bl	8014744 <__malloc_lock>
 80142be:	4a21      	ldr	r2, [pc, #132]	; (8014344 <_malloc_r+0xac>)
 80142c0:	6814      	ldr	r4, [r2, #0]
 80142c2:	4621      	mov	r1, r4
 80142c4:	b991      	cbnz	r1, 80142ec <_malloc_r+0x54>
 80142c6:	4c20      	ldr	r4, [pc, #128]	; (8014348 <_malloc_r+0xb0>)
 80142c8:	6823      	ldr	r3, [r4, #0]
 80142ca:	b91b      	cbnz	r3, 80142d4 <_malloc_r+0x3c>
 80142cc:	4630      	mov	r0, r6
 80142ce:	f000 f97d 	bl	80145cc <_sbrk_r>
 80142d2:	6020      	str	r0, [r4, #0]
 80142d4:	4629      	mov	r1, r5
 80142d6:	4630      	mov	r0, r6
 80142d8:	f000 f978 	bl	80145cc <_sbrk_r>
 80142dc:	1c43      	adds	r3, r0, #1
 80142de:	d124      	bne.n	801432a <_malloc_r+0x92>
 80142e0:	230c      	movs	r3, #12
 80142e2:	6033      	str	r3, [r6, #0]
 80142e4:	4630      	mov	r0, r6
 80142e6:	f000 fa2e 	bl	8014746 <__malloc_unlock>
 80142ea:	e7e4      	b.n	80142b6 <_malloc_r+0x1e>
 80142ec:	680b      	ldr	r3, [r1, #0]
 80142ee:	1b5b      	subs	r3, r3, r5
 80142f0:	d418      	bmi.n	8014324 <_malloc_r+0x8c>
 80142f2:	2b0b      	cmp	r3, #11
 80142f4:	d90f      	bls.n	8014316 <_malloc_r+0x7e>
 80142f6:	600b      	str	r3, [r1, #0]
 80142f8:	50cd      	str	r5, [r1, r3]
 80142fa:	18cc      	adds	r4, r1, r3
 80142fc:	4630      	mov	r0, r6
 80142fe:	f000 fa22 	bl	8014746 <__malloc_unlock>
 8014302:	f104 000b 	add.w	r0, r4, #11
 8014306:	1d23      	adds	r3, r4, #4
 8014308:	f020 0007 	bic.w	r0, r0, #7
 801430c:	1ac3      	subs	r3, r0, r3
 801430e:	d0d3      	beq.n	80142b8 <_malloc_r+0x20>
 8014310:	425a      	negs	r2, r3
 8014312:	50e2      	str	r2, [r4, r3]
 8014314:	e7d0      	b.n	80142b8 <_malloc_r+0x20>
 8014316:	428c      	cmp	r4, r1
 8014318:	684b      	ldr	r3, [r1, #4]
 801431a:	bf16      	itet	ne
 801431c:	6063      	strne	r3, [r4, #4]
 801431e:	6013      	streq	r3, [r2, #0]
 8014320:	460c      	movne	r4, r1
 8014322:	e7eb      	b.n	80142fc <_malloc_r+0x64>
 8014324:	460c      	mov	r4, r1
 8014326:	6849      	ldr	r1, [r1, #4]
 8014328:	e7cc      	b.n	80142c4 <_malloc_r+0x2c>
 801432a:	1cc4      	adds	r4, r0, #3
 801432c:	f024 0403 	bic.w	r4, r4, #3
 8014330:	42a0      	cmp	r0, r4
 8014332:	d005      	beq.n	8014340 <_malloc_r+0xa8>
 8014334:	1a21      	subs	r1, r4, r0
 8014336:	4630      	mov	r0, r6
 8014338:	f000 f948 	bl	80145cc <_sbrk_r>
 801433c:	3001      	adds	r0, #1
 801433e:	d0cf      	beq.n	80142e0 <_malloc_r+0x48>
 8014340:	6025      	str	r5, [r4, #0]
 8014342:	e7db      	b.n	80142fc <_malloc_r+0x64>
 8014344:	200042ac 	.word	0x200042ac
 8014348:	200042b0 	.word	0x200042b0

0801434c <__sfputc_r>:
 801434c:	6893      	ldr	r3, [r2, #8]
 801434e:	3b01      	subs	r3, #1
 8014350:	2b00      	cmp	r3, #0
 8014352:	b410      	push	{r4}
 8014354:	6093      	str	r3, [r2, #8]
 8014356:	da08      	bge.n	801436a <__sfputc_r+0x1e>
 8014358:	6994      	ldr	r4, [r2, #24]
 801435a:	42a3      	cmp	r3, r4
 801435c:	db01      	blt.n	8014362 <__sfputc_r+0x16>
 801435e:	290a      	cmp	r1, #10
 8014360:	d103      	bne.n	801436a <__sfputc_r+0x1e>
 8014362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014366:	f7fe bb65 	b.w	8012a34 <__swbuf_r>
 801436a:	6813      	ldr	r3, [r2, #0]
 801436c:	1c58      	adds	r0, r3, #1
 801436e:	6010      	str	r0, [r2, #0]
 8014370:	7019      	strb	r1, [r3, #0]
 8014372:	4608      	mov	r0, r1
 8014374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014378:	4770      	bx	lr

0801437a <__sfputs_r>:
 801437a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801437c:	4606      	mov	r6, r0
 801437e:	460f      	mov	r7, r1
 8014380:	4614      	mov	r4, r2
 8014382:	18d5      	adds	r5, r2, r3
 8014384:	42ac      	cmp	r4, r5
 8014386:	d101      	bne.n	801438c <__sfputs_r+0x12>
 8014388:	2000      	movs	r0, #0
 801438a:	e007      	b.n	801439c <__sfputs_r+0x22>
 801438c:	463a      	mov	r2, r7
 801438e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014392:	4630      	mov	r0, r6
 8014394:	f7ff ffda 	bl	801434c <__sfputc_r>
 8014398:	1c43      	adds	r3, r0, #1
 801439a:	d1f3      	bne.n	8014384 <__sfputs_r+0xa>
 801439c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143a0 <_vfiprintf_r>:
 80143a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a4:	460c      	mov	r4, r1
 80143a6:	b09d      	sub	sp, #116	; 0x74
 80143a8:	4617      	mov	r7, r2
 80143aa:	461d      	mov	r5, r3
 80143ac:	4606      	mov	r6, r0
 80143ae:	b118      	cbz	r0, 80143b8 <_vfiprintf_r+0x18>
 80143b0:	6983      	ldr	r3, [r0, #24]
 80143b2:	b90b      	cbnz	r3, 80143b8 <_vfiprintf_r+0x18>
 80143b4:	f7ff fb34 	bl	8013a20 <__sinit>
 80143b8:	4b7c      	ldr	r3, [pc, #496]	; (80145ac <_vfiprintf_r+0x20c>)
 80143ba:	429c      	cmp	r4, r3
 80143bc:	d158      	bne.n	8014470 <_vfiprintf_r+0xd0>
 80143be:	6874      	ldr	r4, [r6, #4]
 80143c0:	89a3      	ldrh	r3, [r4, #12]
 80143c2:	0718      	lsls	r0, r3, #28
 80143c4:	d55e      	bpl.n	8014484 <_vfiprintf_r+0xe4>
 80143c6:	6923      	ldr	r3, [r4, #16]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d05b      	beq.n	8014484 <_vfiprintf_r+0xe4>
 80143cc:	2300      	movs	r3, #0
 80143ce:	9309      	str	r3, [sp, #36]	; 0x24
 80143d0:	2320      	movs	r3, #32
 80143d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143d6:	2330      	movs	r3, #48	; 0x30
 80143d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143dc:	9503      	str	r5, [sp, #12]
 80143de:	f04f 0b01 	mov.w	fp, #1
 80143e2:	46b8      	mov	r8, r7
 80143e4:	4645      	mov	r5, r8
 80143e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80143ea:	b10b      	cbz	r3, 80143f0 <_vfiprintf_r+0x50>
 80143ec:	2b25      	cmp	r3, #37	; 0x25
 80143ee:	d154      	bne.n	801449a <_vfiprintf_r+0xfa>
 80143f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80143f4:	d00b      	beq.n	801440e <_vfiprintf_r+0x6e>
 80143f6:	4653      	mov	r3, sl
 80143f8:	463a      	mov	r2, r7
 80143fa:	4621      	mov	r1, r4
 80143fc:	4630      	mov	r0, r6
 80143fe:	f7ff ffbc 	bl	801437a <__sfputs_r>
 8014402:	3001      	adds	r0, #1
 8014404:	f000 80c2 	beq.w	801458c <_vfiprintf_r+0x1ec>
 8014408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801440a:	4453      	add	r3, sl
 801440c:	9309      	str	r3, [sp, #36]	; 0x24
 801440e:	f898 3000 	ldrb.w	r3, [r8]
 8014412:	2b00      	cmp	r3, #0
 8014414:	f000 80ba 	beq.w	801458c <_vfiprintf_r+0x1ec>
 8014418:	2300      	movs	r3, #0
 801441a:	f04f 32ff 	mov.w	r2, #4294967295
 801441e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014422:	9304      	str	r3, [sp, #16]
 8014424:	9307      	str	r3, [sp, #28]
 8014426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801442a:	931a      	str	r3, [sp, #104]	; 0x68
 801442c:	46a8      	mov	r8, r5
 801442e:	2205      	movs	r2, #5
 8014430:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014434:	485e      	ldr	r0, [pc, #376]	; (80145b0 <_vfiprintf_r+0x210>)
 8014436:	f7f3 fe0b 	bl	8008050 <memchr>
 801443a:	9b04      	ldr	r3, [sp, #16]
 801443c:	bb78      	cbnz	r0, 801449e <_vfiprintf_r+0xfe>
 801443e:	06d9      	lsls	r1, r3, #27
 8014440:	bf44      	itt	mi
 8014442:	2220      	movmi	r2, #32
 8014444:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014448:	071a      	lsls	r2, r3, #28
 801444a:	bf44      	itt	mi
 801444c:	222b      	movmi	r2, #43	; 0x2b
 801444e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014452:	782a      	ldrb	r2, [r5, #0]
 8014454:	2a2a      	cmp	r2, #42	; 0x2a
 8014456:	d02a      	beq.n	80144ae <_vfiprintf_r+0x10e>
 8014458:	9a07      	ldr	r2, [sp, #28]
 801445a:	46a8      	mov	r8, r5
 801445c:	2000      	movs	r0, #0
 801445e:	250a      	movs	r5, #10
 8014460:	4641      	mov	r1, r8
 8014462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014466:	3b30      	subs	r3, #48	; 0x30
 8014468:	2b09      	cmp	r3, #9
 801446a:	d969      	bls.n	8014540 <_vfiprintf_r+0x1a0>
 801446c:	b360      	cbz	r0, 80144c8 <_vfiprintf_r+0x128>
 801446e:	e024      	b.n	80144ba <_vfiprintf_r+0x11a>
 8014470:	4b50      	ldr	r3, [pc, #320]	; (80145b4 <_vfiprintf_r+0x214>)
 8014472:	429c      	cmp	r4, r3
 8014474:	d101      	bne.n	801447a <_vfiprintf_r+0xda>
 8014476:	68b4      	ldr	r4, [r6, #8]
 8014478:	e7a2      	b.n	80143c0 <_vfiprintf_r+0x20>
 801447a:	4b4f      	ldr	r3, [pc, #316]	; (80145b8 <_vfiprintf_r+0x218>)
 801447c:	429c      	cmp	r4, r3
 801447e:	bf08      	it	eq
 8014480:	68f4      	ldreq	r4, [r6, #12]
 8014482:	e79d      	b.n	80143c0 <_vfiprintf_r+0x20>
 8014484:	4621      	mov	r1, r4
 8014486:	4630      	mov	r0, r6
 8014488:	f7fe fb26 	bl	8012ad8 <__swsetup_r>
 801448c:	2800      	cmp	r0, #0
 801448e:	d09d      	beq.n	80143cc <_vfiprintf_r+0x2c>
 8014490:	f04f 30ff 	mov.w	r0, #4294967295
 8014494:	b01d      	add	sp, #116	; 0x74
 8014496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801449a:	46a8      	mov	r8, r5
 801449c:	e7a2      	b.n	80143e4 <_vfiprintf_r+0x44>
 801449e:	4a44      	ldr	r2, [pc, #272]	; (80145b0 <_vfiprintf_r+0x210>)
 80144a0:	1a80      	subs	r0, r0, r2
 80144a2:	fa0b f000 	lsl.w	r0, fp, r0
 80144a6:	4318      	orrs	r0, r3
 80144a8:	9004      	str	r0, [sp, #16]
 80144aa:	4645      	mov	r5, r8
 80144ac:	e7be      	b.n	801442c <_vfiprintf_r+0x8c>
 80144ae:	9a03      	ldr	r2, [sp, #12]
 80144b0:	1d11      	adds	r1, r2, #4
 80144b2:	6812      	ldr	r2, [r2, #0]
 80144b4:	9103      	str	r1, [sp, #12]
 80144b6:	2a00      	cmp	r2, #0
 80144b8:	db01      	blt.n	80144be <_vfiprintf_r+0x11e>
 80144ba:	9207      	str	r2, [sp, #28]
 80144bc:	e004      	b.n	80144c8 <_vfiprintf_r+0x128>
 80144be:	4252      	negs	r2, r2
 80144c0:	f043 0302 	orr.w	r3, r3, #2
 80144c4:	9207      	str	r2, [sp, #28]
 80144c6:	9304      	str	r3, [sp, #16]
 80144c8:	f898 3000 	ldrb.w	r3, [r8]
 80144cc:	2b2e      	cmp	r3, #46	; 0x2e
 80144ce:	d10e      	bne.n	80144ee <_vfiprintf_r+0x14e>
 80144d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80144d4:	2b2a      	cmp	r3, #42	; 0x2a
 80144d6:	d138      	bne.n	801454a <_vfiprintf_r+0x1aa>
 80144d8:	9b03      	ldr	r3, [sp, #12]
 80144da:	1d1a      	adds	r2, r3, #4
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	9203      	str	r2, [sp, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	bfb8      	it	lt
 80144e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80144e8:	f108 0802 	add.w	r8, r8, #2
 80144ec:	9305      	str	r3, [sp, #20]
 80144ee:	4d33      	ldr	r5, [pc, #204]	; (80145bc <_vfiprintf_r+0x21c>)
 80144f0:	f898 1000 	ldrb.w	r1, [r8]
 80144f4:	2203      	movs	r2, #3
 80144f6:	4628      	mov	r0, r5
 80144f8:	f7f3 fdaa 	bl	8008050 <memchr>
 80144fc:	b140      	cbz	r0, 8014510 <_vfiprintf_r+0x170>
 80144fe:	2340      	movs	r3, #64	; 0x40
 8014500:	1b40      	subs	r0, r0, r5
 8014502:	fa03 f000 	lsl.w	r0, r3, r0
 8014506:	9b04      	ldr	r3, [sp, #16]
 8014508:	4303      	orrs	r3, r0
 801450a:	f108 0801 	add.w	r8, r8, #1
 801450e:	9304      	str	r3, [sp, #16]
 8014510:	f898 1000 	ldrb.w	r1, [r8]
 8014514:	482a      	ldr	r0, [pc, #168]	; (80145c0 <_vfiprintf_r+0x220>)
 8014516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801451a:	2206      	movs	r2, #6
 801451c:	f108 0701 	add.w	r7, r8, #1
 8014520:	f7f3 fd96 	bl	8008050 <memchr>
 8014524:	2800      	cmp	r0, #0
 8014526:	d037      	beq.n	8014598 <_vfiprintf_r+0x1f8>
 8014528:	4b26      	ldr	r3, [pc, #152]	; (80145c4 <_vfiprintf_r+0x224>)
 801452a:	bb1b      	cbnz	r3, 8014574 <_vfiprintf_r+0x1d4>
 801452c:	9b03      	ldr	r3, [sp, #12]
 801452e:	3307      	adds	r3, #7
 8014530:	f023 0307 	bic.w	r3, r3, #7
 8014534:	3308      	adds	r3, #8
 8014536:	9303      	str	r3, [sp, #12]
 8014538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801453a:	444b      	add	r3, r9
 801453c:	9309      	str	r3, [sp, #36]	; 0x24
 801453e:	e750      	b.n	80143e2 <_vfiprintf_r+0x42>
 8014540:	fb05 3202 	mla	r2, r5, r2, r3
 8014544:	2001      	movs	r0, #1
 8014546:	4688      	mov	r8, r1
 8014548:	e78a      	b.n	8014460 <_vfiprintf_r+0xc0>
 801454a:	2300      	movs	r3, #0
 801454c:	f108 0801 	add.w	r8, r8, #1
 8014550:	9305      	str	r3, [sp, #20]
 8014552:	4619      	mov	r1, r3
 8014554:	250a      	movs	r5, #10
 8014556:	4640      	mov	r0, r8
 8014558:	f810 2b01 	ldrb.w	r2, [r0], #1
 801455c:	3a30      	subs	r2, #48	; 0x30
 801455e:	2a09      	cmp	r2, #9
 8014560:	d903      	bls.n	801456a <_vfiprintf_r+0x1ca>
 8014562:	2b00      	cmp	r3, #0
 8014564:	d0c3      	beq.n	80144ee <_vfiprintf_r+0x14e>
 8014566:	9105      	str	r1, [sp, #20]
 8014568:	e7c1      	b.n	80144ee <_vfiprintf_r+0x14e>
 801456a:	fb05 2101 	mla	r1, r5, r1, r2
 801456e:	2301      	movs	r3, #1
 8014570:	4680      	mov	r8, r0
 8014572:	e7f0      	b.n	8014556 <_vfiprintf_r+0x1b6>
 8014574:	ab03      	add	r3, sp, #12
 8014576:	9300      	str	r3, [sp, #0]
 8014578:	4622      	mov	r2, r4
 801457a:	4b13      	ldr	r3, [pc, #76]	; (80145c8 <_vfiprintf_r+0x228>)
 801457c:	a904      	add	r1, sp, #16
 801457e:	4630      	mov	r0, r6
 8014580:	f7fd fe14 	bl	80121ac <_printf_float>
 8014584:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014588:	4681      	mov	r9, r0
 801458a:	d1d5      	bne.n	8014538 <_vfiprintf_r+0x198>
 801458c:	89a3      	ldrh	r3, [r4, #12]
 801458e:	065b      	lsls	r3, r3, #25
 8014590:	f53f af7e 	bmi.w	8014490 <_vfiprintf_r+0xf0>
 8014594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014596:	e77d      	b.n	8014494 <_vfiprintf_r+0xf4>
 8014598:	ab03      	add	r3, sp, #12
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	4622      	mov	r2, r4
 801459e:	4b0a      	ldr	r3, [pc, #40]	; (80145c8 <_vfiprintf_r+0x228>)
 80145a0:	a904      	add	r1, sp, #16
 80145a2:	4630      	mov	r0, r6
 80145a4:	f7fe f8b8 	bl	8012718 <_printf_i>
 80145a8:	e7ec      	b.n	8014584 <_vfiprintf_r+0x1e4>
 80145aa:	bf00      	nop
 80145ac:	080294e0 	.word	0x080294e0
 80145b0:	0802961c 	.word	0x0802961c
 80145b4:	08029500 	.word	0x08029500
 80145b8:	080294c0 	.word	0x080294c0
 80145bc:	08029622 	.word	0x08029622
 80145c0:	08029626 	.word	0x08029626
 80145c4:	080121ad 	.word	0x080121ad
 80145c8:	0801437b 	.word	0x0801437b

080145cc <_sbrk_r>:
 80145cc:	b538      	push	{r3, r4, r5, lr}
 80145ce:	4c06      	ldr	r4, [pc, #24]	; (80145e8 <_sbrk_r+0x1c>)
 80145d0:	2300      	movs	r3, #0
 80145d2:	4605      	mov	r5, r0
 80145d4:	4608      	mov	r0, r1
 80145d6:	6023      	str	r3, [r4, #0]
 80145d8:	f7fd fab6 	bl	8011b48 <_sbrk>
 80145dc:	1c43      	adds	r3, r0, #1
 80145de:	d102      	bne.n	80145e6 <_sbrk_r+0x1a>
 80145e0:	6823      	ldr	r3, [r4, #0]
 80145e2:	b103      	cbz	r3, 80145e6 <_sbrk_r+0x1a>
 80145e4:	602b      	str	r3, [r5, #0]
 80145e6:	bd38      	pop	{r3, r4, r5, pc}
 80145e8:	20004888 	.word	0x20004888

080145ec <__sread>:
 80145ec:	b510      	push	{r4, lr}
 80145ee:	460c      	mov	r4, r1
 80145f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145f4:	f000 f8a8 	bl	8014748 <_read_r>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	bfab      	itete	ge
 80145fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014600:	181b      	addge	r3, r3, r0
 8014602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014606:	bfac      	ite	ge
 8014608:	6563      	strge	r3, [r4, #84]	; 0x54
 801460a:	81a3      	strhlt	r3, [r4, #12]
 801460c:	bd10      	pop	{r4, pc}

0801460e <__swrite>:
 801460e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014612:	461f      	mov	r7, r3
 8014614:	898b      	ldrh	r3, [r1, #12]
 8014616:	05db      	lsls	r3, r3, #23
 8014618:	4605      	mov	r5, r0
 801461a:	460c      	mov	r4, r1
 801461c:	4616      	mov	r6, r2
 801461e:	d505      	bpl.n	801462c <__swrite+0x1e>
 8014620:	2302      	movs	r3, #2
 8014622:	2200      	movs	r2, #0
 8014624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014628:	f000 f868 	bl	80146fc <_lseek_r>
 801462c:	89a3      	ldrh	r3, [r4, #12]
 801462e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014636:	81a3      	strh	r3, [r4, #12]
 8014638:	4632      	mov	r2, r6
 801463a:	463b      	mov	r3, r7
 801463c:	4628      	mov	r0, r5
 801463e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014642:	f000 b817 	b.w	8014674 <_write_r>

08014646 <__sseek>:
 8014646:	b510      	push	{r4, lr}
 8014648:	460c      	mov	r4, r1
 801464a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801464e:	f000 f855 	bl	80146fc <_lseek_r>
 8014652:	1c43      	adds	r3, r0, #1
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	bf15      	itete	ne
 8014658:	6560      	strne	r0, [r4, #84]	; 0x54
 801465a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801465e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014662:	81a3      	strheq	r3, [r4, #12]
 8014664:	bf18      	it	ne
 8014666:	81a3      	strhne	r3, [r4, #12]
 8014668:	bd10      	pop	{r4, pc}

0801466a <__sclose>:
 801466a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801466e:	f000 b813 	b.w	8014698 <_close_r>
	...

08014674 <_write_r>:
 8014674:	b538      	push	{r3, r4, r5, lr}
 8014676:	4c07      	ldr	r4, [pc, #28]	; (8014694 <_write_r+0x20>)
 8014678:	4605      	mov	r5, r0
 801467a:	4608      	mov	r0, r1
 801467c:	4611      	mov	r1, r2
 801467e:	2200      	movs	r2, #0
 8014680:	6022      	str	r2, [r4, #0]
 8014682:	461a      	mov	r2, r3
 8014684:	f7fd fa0f 	bl	8011aa6 <_write>
 8014688:	1c43      	adds	r3, r0, #1
 801468a:	d102      	bne.n	8014692 <_write_r+0x1e>
 801468c:	6823      	ldr	r3, [r4, #0]
 801468e:	b103      	cbz	r3, 8014692 <_write_r+0x1e>
 8014690:	602b      	str	r3, [r5, #0]
 8014692:	bd38      	pop	{r3, r4, r5, pc}
 8014694:	20004888 	.word	0x20004888

08014698 <_close_r>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	4c06      	ldr	r4, [pc, #24]	; (80146b4 <_close_r+0x1c>)
 801469c:	2300      	movs	r3, #0
 801469e:	4605      	mov	r5, r0
 80146a0:	4608      	mov	r0, r1
 80146a2:	6023      	str	r3, [r4, #0]
 80146a4:	f7fd fa1b 	bl	8011ade <_close>
 80146a8:	1c43      	adds	r3, r0, #1
 80146aa:	d102      	bne.n	80146b2 <_close_r+0x1a>
 80146ac:	6823      	ldr	r3, [r4, #0]
 80146ae:	b103      	cbz	r3, 80146b2 <_close_r+0x1a>
 80146b0:	602b      	str	r3, [r5, #0]
 80146b2:	bd38      	pop	{r3, r4, r5, pc}
 80146b4:	20004888 	.word	0x20004888

080146b8 <_fstat_r>:
 80146b8:	b538      	push	{r3, r4, r5, lr}
 80146ba:	4c07      	ldr	r4, [pc, #28]	; (80146d8 <_fstat_r+0x20>)
 80146bc:	2300      	movs	r3, #0
 80146be:	4605      	mov	r5, r0
 80146c0:	4608      	mov	r0, r1
 80146c2:	4611      	mov	r1, r2
 80146c4:	6023      	str	r3, [r4, #0]
 80146c6:	f7fd fa16 	bl	8011af6 <_fstat>
 80146ca:	1c43      	adds	r3, r0, #1
 80146cc:	d102      	bne.n	80146d4 <_fstat_r+0x1c>
 80146ce:	6823      	ldr	r3, [r4, #0]
 80146d0:	b103      	cbz	r3, 80146d4 <_fstat_r+0x1c>
 80146d2:	602b      	str	r3, [r5, #0]
 80146d4:	bd38      	pop	{r3, r4, r5, pc}
 80146d6:	bf00      	nop
 80146d8:	20004888 	.word	0x20004888

080146dc <_isatty_r>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	4c06      	ldr	r4, [pc, #24]	; (80146f8 <_isatty_r+0x1c>)
 80146e0:	2300      	movs	r3, #0
 80146e2:	4605      	mov	r5, r0
 80146e4:	4608      	mov	r0, r1
 80146e6:	6023      	str	r3, [r4, #0]
 80146e8:	f7fd fa15 	bl	8011b16 <_isatty>
 80146ec:	1c43      	adds	r3, r0, #1
 80146ee:	d102      	bne.n	80146f6 <_isatty_r+0x1a>
 80146f0:	6823      	ldr	r3, [r4, #0]
 80146f2:	b103      	cbz	r3, 80146f6 <_isatty_r+0x1a>
 80146f4:	602b      	str	r3, [r5, #0]
 80146f6:	bd38      	pop	{r3, r4, r5, pc}
 80146f8:	20004888 	.word	0x20004888

080146fc <_lseek_r>:
 80146fc:	b538      	push	{r3, r4, r5, lr}
 80146fe:	4c07      	ldr	r4, [pc, #28]	; (801471c <_lseek_r+0x20>)
 8014700:	4605      	mov	r5, r0
 8014702:	4608      	mov	r0, r1
 8014704:	4611      	mov	r1, r2
 8014706:	2200      	movs	r2, #0
 8014708:	6022      	str	r2, [r4, #0]
 801470a:	461a      	mov	r2, r3
 801470c:	f7fd fa0e 	bl	8011b2c <_lseek>
 8014710:	1c43      	adds	r3, r0, #1
 8014712:	d102      	bne.n	801471a <_lseek_r+0x1e>
 8014714:	6823      	ldr	r3, [r4, #0]
 8014716:	b103      	cbz	r3, 801471a <_lseek_r+0x1e>
 8014718:	602b      	str	r3, [r5, #0]
 801471a:	bd38      	pop	{r3, r4, r5, pc}
 801471c:	20004888 	.word	0x20004888

08014720 <__ascii_mbtowc>:
 8014720:	b082      	sub	sp, #8
 8014722:	b901      	cbnz	r1, 8014726 <__ascii_mbtowc+0x6>
 8014724:	a901      	add	r1, sp, #4
 8014726:	b142      	cbz	r2, 801473a <__ascii_mbtowc+0x1a>
 8014728:	b14b      	cbz	r3, 801473e <__ascii_mbtowc+0x1e>
 801472a:	7813      	ldrb	r3, [r2, #0]
 801472c:	600b      	str	r3, [r1, #0]
 801472e:	7812      	ldrb	r2, [r2, #0]
 8014730:	1c10      	adds	r0, r2, #0
 8014732:	bf18      	it	ne
 8014734:	2001      	movne	r0, #1
 8014736:	b002      	add	sp, #8
 8014738:	4770      	bx	lr
 801473a:	4610      	mov	r0, r2
 801473c:	e7fb      	b.n	8014736 <__ascii_mbtowc+0x16>
 801473e:	f06f 0001 	mvn.w	r0, #1
 8014742:	e7f8      	b.n	8014736 <__ascii_mbtowc+0x16>

08014744 <__malloc_lock>:
 8014744:	4770      	bx	lr

08014746 <__malloc_unlock>:
 8014746:	4770      	bx	lr

08014748 <_read_r>:
 8014748:	b538      	push	{r3, r4, r5, lr}
 801474a:	4c07      	ldr	r4, [pc, #28]	; (8014768 <_read_r+0x20>)
 801474c:	4605      	mov	r5, r0
 801474e:	4608      	mov	r0, r1
 8014750:	4611      	mov	r1, r2
 8014752:	2200      	movs	r2, #0
 8014754:	6022      	str	r2, [r4, #0]
 8014756:	461a      	mov	r2, r3
 8014758:	f7fd f988 	bl	8011a6c <_read>
 801475c:	1c43      	adds	r3, r0, #1
 801475e:	d102      	bne.n	8014766 <_read_r+0x1e>
 8014760:	6823      	ldr	r3, [r4, #0]
 8014762:	b103      	cbz	r3, 8014766 <_read_r+0x1e>
 8014764:	602b      	str	r3, [r5, #0]
 8014766:	bd38      	pop	{r3, r4, r5, pc}
 8014768:	20004888 	.word	0x20004888

0801476c <__ascii_wctomb>:
 801476c:	b149      	cbz	r1, 8014782 <__ascii_wctomb+0x16>
 801476e:	2aff      	cmp	r2, #255	; 0xff
 8014770:	bf85      	ittet	hi
 8014772:	238a      	movhi	r3, #138	; 0x8a
 8014774:	6003      	strhi	r3, [r0, #0]
 8014776:	700a      	strbls	r2, [r1, #0]
 8014778:	f04f 30ff 	movhi.w	r0, #4294967295
 801477c:	bf98      	it	ls
 801477e:	2001      	movls	r0, #1
 8014780:	4770      	bx	lr
 8014782:	4608      	mov	r0, r1
 8014784:	4770      	bx	lr
	...

08014788 <sin>:
 8014788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801478a:	ec51 0b10 	vmov	r0, r1, d0
 801478e:	4a20      	ldr	r2, [pc, #128]	; (8014810 <sin+0x88>)
 8014790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014794:	4293      	cmp	r3, r2
 8014796:	dc07      	bgt.n	80147a8 <sin+0x20>
 8014798:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014808 <sin+0x80>
 801479c:	2000      	movs	r0, #0
 801479e:	f000 ff1b 	bl	80155d8 <__kernel_sin>
 80147a2:	ec51 0b10 	vmov	r0, r1, d0
 80147a6:	e007      	b.n	80147b8 <sin+0x30>
 80147a8:	4a1a      	ldr	r2, [pc, #104]	; (8014814 <sin+0x8c>)
 80147aa:	4293      	cmp	r3, r2
 80147ac:	dd09      	ble.n	80147c2 <sin+0x3a>
 80147ae:	ee10 2a10 	vmov	r2, s0
 80147b2:	460b      	mov	r3, r1
 80147b4:	f7f3 fca0 	bl	80080f8 <__aeabi_dsub>
 80147b8:	ec41 0b10 	vmov	d0, r0, r1
 80147bc:	b005      	add	sp, #20
 80147be:	f85d fb04 	ldr.w	pc, [sp], #4
 80147c2:	4668      	mov	r0, sp
 80147c4:	f000 f884 	bl	80148d0 <__ieee754_rem_pio2>
 80147c8:	f000 0003 	and.w	r0, r0, #3
 80147cc:	2801      	cmp	r0, #1
 80147ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80147d2:	ed9d 0b00 	vldr	d0, [sp]
 80147d6:	d004      	beq.n	80147e2 <sin+0x5a>
 80147d8:	2802      	cmp	r0, #2
 80147da:	d005      	beq.n	80147e8 <sin+0x60>
 80147dc:	b970      	cbnz	r0, 80147fc <sin+0x74>
 80147de:	2001      	movs	r0, #1
 80147e0:	e7dd      	b.n	801479e <sin+0x16>
 80147e2:	f000 faf1 	bl	8014dc8 <__kernel_cos>
 80147e6:	e7dc      	b.n	80147a2 <sin+0x1a>
 80147e8:	2001      	movs	r0, #1
 80147ea:	f000 fef5 	bl	80155d8 <__kernel_sin>
 80147ee:	ec53 2b10 	vmov	r2, r3, d0
 80147f2:	ee10 0a10 	vmov	r0, s0
 80147f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147fa:	e7dd      	b.n	80147b8 <sin+0x30>
 80147fc:	f000 fae4 	bl	8014dc8 <__kernel_cos>
 8014800:	e7f5      	b.n	80147ee <sin+0x66>
 8014802:	bf00      	nop
 8014804:	f3af 8000 	nop.w
	...
 8014810:	3fe921fb 	.word	0x3fe921fb
 8014814:	7fefffff 	.word	0x7fefffff

08014818 <fmodf>:
 8014818:	b5d0      	push	{r4, r6, r7, lr}
 801481a:	ed2d 8b02 	vpush	{d8}
 801481e:	b08a      	sub	sp, #40	; 0x28
 8014820:	eef0 8a40 	vmov.f32	s17, s0
 8014824:	eeb0 8a60 	vmov.f32	s16, s1
 8014828:	f000 fa44 	bl	8014cb4 <__ieee754_fmodf>
 801482c:	4b26      	ldr	r3, [pc, #152]	; (80148c8 <fmodf+0xb0>)
 801482e:	f993 4000 	ldrsb.w	r4, [r3]
 8014832:	1c63      	adds	r3, r4, #1
 8014834:	d035      	beq.n	80148a2 <fmodf+0x8a>
 8014836:	eeb4 8a48 	vcmp.f32	s16, s16
 801483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801483e:	d630      	bvs.n	80148a2 <fmodf+0x8a>
 8014840:	eef4 8a68 	vcmp.f32	s17, s17
 8014844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014848:	d62b      	bvs.n	80148a2 <fmodf+0x8a>
 801484a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014852:	d126      	bne.n	80148a2 <fmodf+0x8a>
 8014854:	2301      	movs	r3, #1
 8014856:	9300      	str	r3, [sp, #0]
 8014858:	4b1c      	ldr	r3, [pc, #112]	; (80148cc <fmodf+0xb4>)
 801485a:	9301      	str	r3, [sp, #4]
 801485c:	ee18 0a90 	vmov	r0, s17
 8014860:	2300      	movs	r3, #0
 8014862:	9308      	str	r3, [sp, #32]
 8014864:	f7f3 fda8 	bl	80083b8 <__aeabi_f2d>
 8014868:	4606      	mov	r6, r0
 801486a:	460f      	mov	r7, r1
 801486c:	ee18 0a10 	vmov	r0, s16
 8014870:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014874:	f7f3 fda0 	bl	80083b8 <__aeabi_f2d>
 8014878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801487c:	b9ac      	cbnz	r4, 80148aa <fmodf+0x92>
 801487e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014882:	4668      	mov	r0, sp
 8014884:	f000 fff0 	bl	8015868 <matherr>
 8014888:	b1c8      	cbz	r0, 80148be <fmodf+0xa6>
 801488a:	9b08      	ldr	r3, [sp, #32]
 801488c:	b11b      	cbz	r3, 8014896 <fmodf+0x7e>
 801488e:	f7fd fbbb 	bl	8012008 <__errno>
 8014892:	9b08      	ldr	r3, [sp, #32]
 8014894:	6003      	str	r3, [r0, #0]
 8014896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801489a:	f7f4 f8bd 	bl	8008a18 <__aeabi_d2f>
 801489e:	ee00 0a10 	vmov	s0, r0
 80148a2:	b00a      	add	sp, #40	; 0x28
 80148a4:	ecbd 8b02 	vpop	{d8}
 80148a8:	bdd0      	pop	{r4, r6, r7, pc}
 80148aa:	2200      	movs	r2, #0
 80148ac:	2300      	movs	r3, #0
 80148ae:	4610      	mov	r0, r2
 80148b0:	4619      	mov	r1, r3
 80148b2:	f7f3 ff03 	bl	80086bc <__aeabi_ddiv>
 80148b6:	2c02      	cmp	r4, #2
 80148b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80148bc:	d1e1      	bne.n	8014882 <fmodf+0x6a>
 80148be:	f7fd fba3 	bl	8012008 <__errno>
 80148c2:	2321      	movs	r3, #33	; 0x21
 80148c4:	6003      	str	r3, [r0, #0]
 80148c6:	e7e0      	b.n	801488a <fmodf+0x72>
 80148c8:	200001e0 	.word	0x200001e0
 80148cc:	08029738 	.word	0x08029738

080148d0 <__ieee754_rem_pio2>:
 80148d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d4:	ec57 6b10 	vmov	r6, r7, d0
 80148d8:	4bc3      	ldr	r3, [pc, #780]	; (8014be8 <__ieee754_rem_pio2+0x318>)
 80148da:	b08d      	sub	sp, #52	; 0x34
 80148dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80148e0:	4598      	cmp	r8, r3
 80148e2:	4604      	mov	r4, r0
 80148e4:	9704      	str	r7, [sp, #16]
 80148e6:	dc07      	bgt.n	80148f8 <__ieee754_rem_pio2+0x28>
 80148e8:	2200      	movs	r2, #0
 80148ea:	2300      	movs	r3, #0
 80148ec:	ed84 0b00 	vstr	d0, [r4]
 80148f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80148f4:	2500      	movs	r5, #0
 80148f6:	e027      	b.n	8014948 <__ieee754_rem_pio2+0x78>
 80148f8:	4bbc      	ldr	r3, [pc, #752]	; (8014bec <__ieee754_rem_pio2+0x31c>)
 80148fa:	4598      	cmp	r8, r3
 80148fc:	dc75      	bgt.n	80149ea <__ieee754_rem_pio2+0x11a>
 80148fe:	9b04      	ldr	r3, [sp, #16]
 8014900:	4dbb      	ldr	r5, [pc, #748]	; (8014bf0 <__ieee754_rem_pio2+0x320>)
 8014902:	2b00      	cmp	r3, #0
 8014904:	ee10 0a10 	vmov	r0, s0
 8014908:	a3a9      	add	r3, pc, #676	; (adr r3, 8014bb0 <__ieee754_rem_pio2+0x2e0>)
 801490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490e:	4639      	mov	r1, r7
 8014910:	dd36      	ble.n	8014980 <__ieee754_rem_pio2+0xb0>
 8014912:	f7f3 fbf1 	bl	80080f8 <__aeabi_dsub>
 8014916:	45a8      	cmp	r8, r5
 8014918:	4606      	mov	r6, r0
 801491a:	460f      	mov	r7, r1
 801491c:	d018      	beq.n	8014950 <__ieee754_rem_pio2+0x80>
 801491e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014bb8 <__ieee754_rem_pio2+0x2e8>)
 8014920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014924:	f7f3 fbe8 	bl	80080f8 <__aeabi_dsub>
 8014928:	4602      	mov	r2, r0
 801492a:	460b      	mov	r3, r1
 801492c:	e9c4 2300 	strd	r2, r3, [r4]
 8014930:	4630      	mov	r0, r6
 8014932:	4639      	mov	r1, r7
 8014934:	f7f3 fbe0 	bl	80080f8 <__aeabi_dsub>
 8014938:	a39f      	add	r3, pc, #636	; (adr r3, 8014bb8 <__ieee754_rem_pio2+0x2e8>)
 801493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493e:	f7f3 fbdb 	bl	80080f8 <__aeabi_dsub>
 8014942:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014946:	2501      	movs	r5, #1
 8014948:	4628      	mov	r0, r5
 801494a:	b00d      	add	sp, #52	; 0x34
 801494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014950:	a39b      	add	r3, pc, #620	; (adr r3, 8014bc0 <__ieee754_rem_pio2+0x2f0>)
 8014952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014956:	f7f3 fbcf 	bl	80080f8 <__aeabi_dsub>
 801495a:	a39b      	add	r3, pc, #620	; (adr r3, 8014bc8 <__ieee754_rem_pio2+0x2f8>)
 801495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014960:	4606      	mov	r6, r0
 8014962:	460f      	mov	r7, r1
 8014964:	f7f3 fbc8 	bl	80080f8 <__aeabi_dsub>
 8014968:	4602      	mov	r2, r0
 801496a:	460b      	mov	r3, r1
 801496c:	e9c4 2300 	strd	r2, r3, [r4]
 8014970:	4630      	mov	r0, r6
 8014972:	4639      	mov	r1, r7
 8014974:	f7f3 fbc0 	bl	80080f8 <__aeabi_dsub>
 8014978:	a393      	add	r3, pc, #588	; (adr r3, 8014bc8 <__ieee754_rem_pio2+0x2f8>)
 801497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497e:	e7de      	b.n	801493e <__ieee754_rem_pio2+0x6e>
 8014980:	f7f3 fbbc 	bl	80080fc <__adddf3>
 8014984:	45a8      	cmp	r8, r5
 8014986:	4606      	mov	r6, r0
 8014988:	460f      	mov	r7, r1
 801498a:	d016      	beq.n	80149ba <__ieee754_rem_pio2+0xea>
 801498c:	a38a      	add	r3, pc, #552	; (adr r3, 8014bb8 <__ieee754_rem_pio2+0x2e8>)
 801498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014992:	f7f3 fbb3 	bl	80080fc <__adddf3>
 8014996:	4602      	mov	r2, r0
 8014998:	460b      	mov	r3, r1
 801499a:	e9c4 2300 	strd	r2, r3, [r4]
 801499e:	4630      	mov	r0, r6
 80149a0:	4639      	mov	r1, r7
 80149a2:	f7f3 fba9 	bl	80080f8 <__aeabi_dsub>
 80149a6:	a384      	add	r3, pc, #528	; (adr r3, 8014bb8 <__ieee754_rem_pio2+0x2e8>)
 80149a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ac:	f7f3 fba6 	bl	80080fc <__adddf3>
 80149b0:	f04f 35ff 	mov.w	r5, #4294967295
 80149b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80149b8:	e7c6      	b.n	8014948 <__ieee754_rem_pio2+0x78>
 80149ba:	a381      	add	r3, pc, #516	; (adr r3, 8014bc0 <__ieee754_rem_pio2+0x2f0>)
 80149bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c0:	f7f3 fb9c 	bl	80080fc <__adddf3>
 80149c4:	a380      	add	r3, pc, #512	; (adr r3, 8014bc8 <__ieee754_rem_pio2+0x2f8>)
 80149c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ca:	4606      	mov	r6, r0
 80149cc:	460f      	mov	r7, r1
 80149ce:	f7f3 fb95 	bl	80080fc <__adddf3>
 80149d2:	4602      	mov	r2, r0
 80149d4:	460b      	mov	r3, r1
 80149d6:	e9c4 2300 	strd	r2, r3, [r4]
 80149da:	4630      	mov	r0, r6
 80149dc:	4639      	mov	r1, r7
 80149de:	f7f3 fb8b 	bl	80080f8 <__aeabi_dsub>
 80149e2:	a379      	add	r3, pc, #484	; (adr r3, 8014bc8 <__ieee754_rem_pio2+0x2f8>)
 80149e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e8:	e7e0      	b.n	80149ac <__ieee754_rem_pio2+0xdc>
 80149ea:	4b82      	ldr	r3, [pc, #520]	; (8014bf4 <__ieee754_rem_pio2+0x324>)
 80149ec:	4598      	cmp	r8, r3
 80149ee:	f300 80d0 	bgt.w	8014b92 <__ieee754_rem_pio2+0x2c2>
 80149f2:	f000 feab 	bl	801574c <fabs>
 80149f6:	ec57 6b10 	vmov	r6, r7, d0
 80149fa:	ee10 0a10 	vmov	r0, s0
 80149fe:	a374      	add	r3, pc, #464	; (adr r3, 8014bd0 <__ieee754_rem_pio2+0x300>)
 8014a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a04:	4639      	mov	r1, r7
 8014a06:	f7f3 fd2f 	bl	8008468 <__aeabi_dmul>
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	4b7a      	ldr	r3, [pc, #488]	; (8014bf8 <__ieee754_rem_pio2+0x328>)
 8014a0e:	f7f3 fb75 	bl	80080fc <__adddf3>
 8014a12:	f7f3 ffd9 	bl	80089c8 <__aeabi_d2iz>
 8014a16:	4605      	mov	r5, r0
 8014a18:	f7f3 fcbc 	bl	8008394 <__aeabi_i2d>
 8014a1c:	a364      	add	r3, pc, #400	; (adr r3, 8014bb0 <__ieee754_rem_pio2+0x2e0>)
 8014a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a26:	f7f3 fd1f 	bl	8008468 <__aeabi_dmul>
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	4630      	mov	r0, r6
 8014a30:	4639      	mov	r1, r7
 8014a32:	f7f3 fb61 	bl	80080f8 <__aeabi_dsub>
 8014a36:	a360      	add	r3, pc, #384	; (adr r3, 8014bb8 <__ieee754_rem_pio2+0x2e8>)
 8014a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3c:	4682      	mov	sl, r0
 8014a3e:	468b      	mov	fp, r1
 8014a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a44:	f7f3 fd10 	bl	8008468 <__aeabi_dmul>
 8014a48:	2d1f      	cmp	r5, #31
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	460f      	mov	r7, r1
 8014a4e:	dc0c      	bgt.n	8014a6a <__ieee754_rem_pio2+0x19a>
 8014a50:	1e6a      	subs	r2, r5, #1
 8014a52:	4b6a      	ldr	r3, [pc, #424]	; (8014bfc <__ieee754_rem_pio2+0x32c>)
 8014a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a58:	4543      	cmp	r3, r8
 8014a5a:	d006      	beq.n	8014a6a <__ieee754_rem_pio2+0x19a>
 8014a5c:	4632      	mov	r2, r6
 8014a5e:	463b      	mov	r3, r7
 8014a60:	4650      	mov	r0, sl
 8014a62:	4659      	mov	r1, fp
 8014a64:	f7f3 fb48 	bl	80080f8 <__aeabi_dsub>
 8014a68:	e00e      	b.n	8014a88 <__ieee754_rem_pio2+0x1b8>
 8014a6a:	4632      	mov	r2, r6
 8014a6c:	463b      	mov	r3, r7
 8014a6e:	4650      	mov	r0, sl
 8014a70:	4659      	mov	r1, fp
 8014a72:	f7f3 fb41 	bl	80080f8 <__aeabi_dsub>
 8014a76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014a7a:	9305      	str	r3, [sp, #20]
 8014a7c:	9a05      	ldr	r2, [sp, #20]
 8014a7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	2b10      	cmp	r3, #16
 8014a86:	dc02      	bgt.n	8014a8e <__ieee754_rem_pio2+0x1be>
 8014a88:	e9c4 0100 	strd	r0, r1, [r4]
 8014a8c:	e039      	b.n	8014b02 <__ieee754_rem_pio2+0x232>
 8014a8e:	a34c      	add	r3, pc, #304	; (adr r3, 8014bc0 <__ieee754_rem_pio2+0x2f0>)
 8014a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a98:	f7f3 fce6 	bl	8008468 <__aeabi_dmul>
 8014a9c:	4606      	mov	r6, r0
 8014a9e:	460f      	mov	r7, r1
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	4650      	mov	r0, sl
 8014aa6:	4659      	mov	r1, fp
 8014aa8:	f7f3 fb26 	bl	80080f8 <__aeabi_dsub>
 8014aac:	4602      	mov	r2, r0
 8014aae:	460b      	mov	r3, r1
 8014ab0:	4680      	mov	r8, r0
 8014ab2:	4689      	mov	r9, r1
 8014ab4:	4650      	mov	r0, sl
 8014ab6:	4659      	mov	r1, fp
 8014ab8:	f7f3 fb1e 	bl	80080f8 <__aeabi_dsub>
 8014abc:	4632      	mov	r2, r6
 8014abe:	463b      	mov	r3, r7
 8014ac0:	f7f3 fb1a 	bl	80080f8 <__aeabi_dsub>
 8014ac4:	a340      	add	r3, pc, #256	; (adr r3, 8014bc8 <__ieee754_rem_pio2+0x2f8>)
 8014ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aca:	4606      	mov	r6, r0
 8014acc:	460f      	mov	r7, r1
 8014ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ad2:	f7f3 fcc9 	bl	8008468 <__aeabi_dmul>
 8014ad6:	4632      	mov	r2, r6
 8014ad8:	463b      	mov	r3, r7
 8014ada:	f7f3 fb0d 	bl	80080f8 <__aeabi_dsub>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	460b      	mov	r3, r1
 8014ae2:	4606      	mov	r6, r0
 8014ae4:	460f      	mov	r7, r1
 8014ae6:	4640      	mov	r0, r8
 8014ae8:	4649      	mov	r1, r9
 8014aea:	f7f3 fb05 	bl	80080f8 <__aeabi_dsub>
 8014aee:	9a05      	ldr	r2, [sp, #20]
 8014af0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014af4:	1ad3      	subs	r3, r2, r3
 8014af6:	2b31      	cmp	r3, #49	; 0x31
 8014af8:	dc20      	bgt.n	8014b3c <__ieee754_rem_pio2+0x26c>
 8014afa:	e9c4 0100 	strd	r0, r1, [r4]
 8014afe:	46c2      	mov	sl, r8
 8014b00:	46cb      	mov	fp, r9
 8014b02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014b06:	4650      	mov	r0, sl
 8014b08:	4642      	mov	r2, r8
 8014b0a:	464b      	mov	r3, r9
 8014b0c:	4659      	mov	r1, fp
 8014b0e:	f7f3 faf3 	bl	80080f8 <__aeabi_dsub>
 8014b12:	463b      	mov	r3, r7
 8014b14:	4632      	mov	r2, r6
 8014b16:	f7f3 faef 	bl	80080f8 <__aeabi_dsub>
 8014b1a:	9b04      	ldr	r3, [sp, #16]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b22:	f6bf af11 	bge.w	8014948 <__ieee754_rem_pio2+0x78>
 8014b26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b2a:	6063      	str	r3, [r4, #4]
 8014b2c:	f8c4 8000 	str.w	r8, [r4]
 8014b30:	60a0      	str	r0, [r4, #8]
 8014b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b36:	60e3      	str	r3, [r4, #12]
 8014b38:	426d      	negs	r5, r5
 8014b3a:	e705      	b.n	8014948 <__ieee754_rem_pio2+0x78>
 8014b3c:	a326      	add	r3, pc, #152	; (adr r3, 8014bd8 <__ieee754_rem_pio2+0x308>)
 8014b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b46:	f7f3 fc8f 	bl	8008468 <__aeabi_dmul>
 8014b4a:	4606      	mov	r6, r0
 8014b4c:	460f      	mov	r7, r1
 8014b4e:	4602      	mov	r2, r0
 8014b50:	460b      	mov	r3, r1
 8014b52:	4640      	mov	r0, r8
 8014b54:	4649      	mov	r1, r9
 8014b56:	f7f3 facf 	bl	80080f8 <__aeabi_dsub>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	4682      	mov	sl, r0
 8014b60:	468b      	mov	fp, r1
 8014b62:	4640      	mov	r0, r8
 8014b64:	4649      	mov	r1, r9
 8014b66:	f7f3 fac7 	bl	80080f8 <__aeabi_dsub>
 8014b6a:	4632      	mov	r2, r6
 8014b6c:	463b      	mov	r3, r7
 8014b6e:	f7f3 fac3 	bl	80080f8 <__aeabi_dsub>
 8014b72:	a31b      	add	r3, pc, #108	; (adr r3, 8014be0 <__ieee754_rem_pio2+0x310>)
 8014b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b78:	4606      	mov	r6, r0
 8014b7a:	460f      	mov	r7, r1
 8014b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b80:	f7f3 fc72 	bl	8008468 <__aeabi_dmul>
 8014b84:	4632      	mov	r2, r6
 8014b86:	463b      	mov	r3, r7
 8014b88:	f7f3 fab6 	bl	80080f8 <__aeabi_dsub>
 8014b8c:	4606      	mov	r6, r0
 8014b8e:	460f      	mov	r7, r1
 8014b90:	e764      	b.n	8014a5c <__ieee754_rem_pio2+0x18c>
 8014b92:	4b1b      	ldr	r3, [pc, #108]	; (8014c00 <__ieee754_rem_pio2+0x330>)
 8014b94:	4598      	cmp	r8, r3
 8014b96:	dd35      	ble.n	8014c04 <__ieee754_rem_pio2+0x334>
 8014b98:	ee10 2a10 	vmov	r2, s0
 8014b9c:	463b      	mov	r3, r7
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	4639      	mov	r1, r7
 8014ba2:	f7f3 faa9 	bl	80080f8 <__aeabi_dsub>
 8014ba6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014baa:	e9c4 0100 	strd	r0, r1, [r4]
 8014bae:	e6a1      	b.n	80148f4 <__ieee754_rem_pio2+0x24>
 8014bb0:	54400000 	.word	0x54400000
 8014bb4:	3ff921fb 	.word	0x3ff921fb
 8014bb8:	1a626331 	.word	0x1a626331
 8014bbc:	3dd0b461 	.word	0x3dd0b461
 8014bc0:	1a600000 	.word	0x1a600000
 8014bc4:	3dd0b461 	.word	0x3dd0b461
 8014bc8:	2e037073 	.word	0x2e037073
 8014bcc:	3ba3198a 	.word	0x3ba3198a
 8014bd0:	6dc9c883 	.word	0x6dc9c883
 8014bd4:	3fe45f30 	.word	0x3fe45f30
 8014bd8:	2e000000 	.word	0x2e000000
 8014bdc:	3ba3198a 	.word	0x3ba3198a
 8014be0:	252049c1 	.word	0x252049c1
 8014be4:	397b839a 	.word	0x397b839a
 8014be8:	3fe921fb 	.word	0x3fe921fb
 8014bec:	4002d97b 	.word	0x4002d97b
 8014bf0:	3ff921fb 	.word	0x3ff921fb
 8014bf4:	413921fb 	.word	0x413921fb
 8014bf8:	3fe00000 	.word	0x3fe00000
 8014bfc:	08029740 	.word	0x08029740
 8014c00:	7fefffff 	.word	0x7fefffff
 8014c04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014c08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014c0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014c10:	4630      	mov	r0, r6
 8014c12:	460f      	mov	r7, r1
 8014c14:	f7f3 fed8 	bl	80089c8 <__aeabi_d2iz>
 8014c18:	f7f3 fbbc 	bl	8008394 <__aeabi_i2d>
 8014c1c:	4602      	mov	r2, r0
 8014c1e:	460b      	mov	r3, r1
 8014c20:	4630      	mov	r0, r6
 8014c22:	4639      	mov	r1, r7
 8014c24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014c28:	f7f3 fa66 	bl	80080f8 <__aeabi_dsub>
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	4b1f      	ldr	r3, [pc, #124]	; (8014cac <__ieee754_rem_pio2+0x3dc>)
 8014c30:	f7f3 fc1a 	bl	8008468 <__aeabi_dmul>
 8014c34:	460f      	mov	r7, r1
 8014c36:	4606      	mov	r6, r0
 8014c38:	f7f3 fec6 	bl	80089c8 <__aeabi_d2iz>
 8014c3c:	f7f3 fbaa 	bl	8008394 <__aeabi_i2d>
 8014c40:	4602      	mov	r2, r0
 8014c42:	460b      	mov	r3, r1
 8014c44:	4630      	mov	r0, r6
 8014c46:	4639      	mov	r1, r7
 8014c48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c4c:	f7f3 fa54 	bl	80080f8 <__aeabi_dsub>
 8014c50:	2200      	movs	r2, #0
 8014c52:	4b16      	ldr	r3, [pc, #88]	; (8014cac <__ieee754_rem_pio2+0x3dc>)
 8014c54:	f7f3 fc08 	bl	8008468 <__aeabi_dmul>
 8014c58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c5c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014c60:	f04f 0803 	mov.w	r8, #3
 8014c64:	2600      	movs	r6, #0
 8014c66:	2700      	movs	r7, #0
 8014c68:	4632      	mov	r2, r6
 8014c6a:	463b      	mov	r3, r7
 8014c6c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8014c74:	f7f3 fe60 	bl	8008938 <__aeabi_dcmpeq>
 8014c78:	b9b0      	cbnz	r0, 8014ca8 <__ieee754_rem_pio2+0x3d8>
 8014c7a:	4b0d      	ldr	r3, [pc, #52]	; (8014cb0 <__ieee754_rem_pio2+0x3e0>)
 8014c7c:	9301      	str	r3, [sp, #4]
 8014c7e:	2302      	movs	r3, #2
 8014c80:	9300      	str	r3, [sp, #0]
 8014c82:	462a      	mov	r2, r5
 8014c84:	4643      	mov	r3, r8
 8014c86:	4621      	mov	r1, r4
 8014c88:	a806      	add	r0, sp, #24
 8014c8a:	f000 f965 	bl	8014f58 <__kernel_rem_pio2>
 8014c8e:	9b04      	ldr	r3, [sp, #16]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	4605      	mov	r5, r0
 8014c94:	f6bf ae58 	bge.w	8014948 <__ieee754_rem_pio2+0x78>
 8014c98:	6863      	ldr	r3, [r4, #4]
 8014c9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c9e:	6063      	str	r3, [r4, #4]
 8014ca0:	68e3      	ldr	r3, [r4, #12]
 8014ca2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014ca6:	e746      	b.n	8014b36 <__ieee754_rem_pio2+0x266>
 8014ca8:	46d0      	mov	r8, sl
 8014caa:	e7dd      	b.n	8014c68 <__ieee754_rem_pio2+0x398>
 8014cac:	41700000 	.word	0x41700000
 8014cb0:	080297c0 	.word	0x080297c0

08014cb4 <__ieee754_fmodf>:
 8014cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cb6:	ee10 6a90 	vmov	r6, s1
 8014cba:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8014cbe:	ee10 3a10 	vmov	r3, s0
 8014cc2:	d009      	beq.n	8014cd8 <__ieee754_fmodf+0x24>
 8014cc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014cc8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014ccc:	ee10 7a10 	vmov	r7, s0
 8014cd0:	da02      	bge.n	8014cd8 <__ieee754_fmodf+0x24>
 8014cd2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014cd6:	dd0a      	ble.n	8014cee <__ieee754_fmodf+0x3a>
 8014cd8:	ee07 3a90 	vmov	s15, r3
 8014cdc:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014ce0:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8014ce4:	ee17 3a90 	vmov	r3, s15
 8014ce8:	ee00 3a10 	vmov	s0, r3
 8014cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cee:	42a9      	cmp	r1, r5
 8014cf0:	dbfa      	blt.n	8014ce8 <__ieee754_fmodf+0x34>
 8014cf2:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8014cf6:	d105      	bne.n	8014d04 <__ieee754_fmodf+0x50>
 8014cf8:	4a30      	ldr	r2, [pc, #192]	; (8014dbc <__ieee754_fmodf+0x108>)
 8014cfa:	0fe3      	lsrs	r3, r4, #31
 8014cfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	e7f1      	b.n	8014ce8 <__ieee754_fmodf+0x34>
 8014d04:	4b2e      	ldr	r3, [pc, #184]	; (8014dc0 <__ieee754_fmodf+0x10c>)
 8014d06:	4299      	cmp	r1, r3
 8014d08:	dc3e      	bgt.n	8014d88 <__ieee754_fmodf+0xd4>
 8014d0a:	020a      	lsls	r2, r1, #8
 8014d0c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8014d10:	2a00      	cmp	r2, #0
 8014d12:	dc36      	bgt.n	8014d82 <__ieee754_fmodf+0xce>
 8014d14:	429d      	cmp	r5, r3
 8014d16:	dc3a      	bgt.n	8014d8e <__ieee754_fmodf+0xda>
 8014d18:	022b      	lsls	r3, r5, #8
 8014d1a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8014d1e:	005b      	lsls	r3, r3, #1
 8014d20:	f102 32ff 	add.w	r2, r2, #4294967295
 8014d24:	d5fb      	bpl.n	8014d1e <__ieee754_fmodf+0x6a>
 8014d26:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8014d2a:	bfbb      	ittet	lt
 8014d2c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8014d30:	1a1b      	sublt	r3, r3, r0
 8014d32:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8014d36:	4099      	lsllt	r1, r3
 8014d38:	bfa8      	it	ge
 8014d3a:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8014d3e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8014d42:	bfb5      	itete	lt
 8014d44:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8014d48:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8014d4c:	1a9b      	sublt	r3, r3, r2
 8014d4e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8014d52:	bfb8      	it	lt
 8014d54:	409d      	lsllt	r5, r3
 8014d56:	1a80      	subs	r0, r0, r2
 8014d58:	1b4b      	subs	r3, r1, r5
 8014d5a:	b9d8      	cbnz	r0, 8014d94 <__ieee754_fmodf+0xe0>
 8014d5c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8014d60:	bf28      	it	cs
 8014d62:	460b      	movcs	r3, r1
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d0c7      	beq.n	8014cf8 <__ieee754_fmodf+0x44>
 8014d68:	4915      	ldr	r1, [pc, #84]	; (8014dc0 <__ieee754_fmodf+0x10c>)
 8014d6a:	428b      	cmp	r3, r1
 8014d6c:	dd1a      	ble.n	8014da4 <__ieee754_fmodf+0xf0>
 8014d6e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8014d72:	db1a      	blt.n	8014daa <__ieee754_fmodf+0xf6>
 8014d74:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8014d78:	4323      	orrs	r3, r4
 8014d7a:	327f      	adds	r2, #127	; 0x7f
 8014d7c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014d80:	e7b2      	b.n	8014ce8 <__ieee754_fmodf+0x34>
 8014d82:	3801      	subs	r0, #1
 8014d84:	0052      	lsls	r2, r2, #1
 8014d86:	e7c3      	b.n	8014d10 <__ieee754_fmodf+0x5c>
 8014d88:	15c8      	asrs	r0, r1, #23
 8014d8a:	387f      	subs	r0, #127	; 0x7f
 8014d8c:	e7c2      	b.n	8014d14 <__ieee754_fmodf+0x60>
 8014d8e:	15ea      	asrs	r2, r5, #23
 8014d90:	3a7f      	subs	r2, #127	; 0x7f
 8014d92:	e7c8      	b.n	8014d26 <__ieee754_fmodf+0x72>
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	da02      	bge.n	8014d9e <__ieee754_fmodf+0xea>
 8014d98:	0049      	lsls	r1, r1, #1
 8014d9a:	3801      	subs	r0, #1
 8014d9c:	e7dc      	b.n	8014d58 <__ieee754_fmodf+0xa4>
 8014d9e:	d0ab      	beq.n	8014cf8 <__ieee754_fmodf+0x44>
 8014da0:	0059      	lsls	r1, r3, #1
 8014da2:	e7fa      	b.n	8014d9a <__ieee754_fmodf+0xe6>
 8014da4:	005b      	lsls	r3, r3, #1
 8014da6:	3a01      	subs	r2, #1
 8014da8:	e7df      	b.n	8014d6a <__ieee754_fmodf+0xb6>
 8014daa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014dae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014db2:	3282      	adds	r2, #130	; 0x82
 8014db4:	4113      	asrs	r3, r2
 8014db6:	4323      	orrs	r3, r4
 8014db8:	e796      	b.n	8014ce8 <__ieee754_fmodf+0x34>
 8014dba:	bf00      	nop
 8014dbc:	080298c8 	.word	0x080298c8
 8014dc0:	007fffff 	.word	0x007fffff
 8014dc4:	00000000 	.word	0x00000000

08014dc8 <__kernel_cos>:
 8014dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	ec59 8b10 	vmov	r8, r9, d0
 8014dd0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014dd4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014dd8:	ed2d 8b02 	vpush	{d8}
 8014ddc:	eeb0 8a41 	vmov.f32	s16, s2
 8014de0:	eef0 8a61 	vmov.f32	s17, s3
 8014de4:	da07      	bge.n	8014df6 <__kernel_cos+0x2e>
 8014de6:	ee10 0a10 	vmov	r0, s0
 8014dea:	4649      	mov	r1, r9
 8014dec:	f7f3 fdec 	bl	80089c8 <__aeabi_d2iz>
 8014df0:	2800      	cmp	r0, #0
 8014df2:	f000 8089 	beq.w	8014f08 <__kernel_cos+0x140>
 8014df6:	4642      	mov	r2, r8
 8014df8:	464b      	mov	r3, r9
 8014dfa:	4640      	mov	r0, r8
 8014dfc:	4649      	mov	r1, r9
 8014dfe:	f7f3 fb33 	bl	8008468 <__aeabi_dmul>
 8014e02:	2200      	movs	r2, #0
 8014e04:	4b4e      	ldr	r3, [pc, #312]	; (8014f40 <__kernel_cos+0x178>)
 8014e06:	4604      	mov	r4, r0
 8014e08:	460d      	mov	r5, r1
 8014e0a:	f7f3 fb2d 	bl	8008468 <__aeabi_dmul>
 8014e0e:	a340      	add	r3, pc, #256	; (adr r3, 8014f10 <__kernel_cos+0x148>)
 8014e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e14:	4682      	mov	sl, r0
 8014e16:	468b      	mov	fp, r1
 8014e18:	4620      	mov	r0, r4
 8014e1a:	4629      	mov	r1, r5
 8014e1c:	f7f3 fb24 	bl	8008468 <__aeabi_dmul>
 8014e20:	a33d      	add	r3, pc, #244	; (adr r3, 8014f18 <__kernel_cos+0x150>)
 8014e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e26:	f7f3 f969 	bl	80080fc <__adddf3>
 8014e2a:	4622      	mov	r2, r4
 8014e2c:	462b      	mov	r3, r5
 8014e2e:	f7f3 fb1b 	bl	8008468 <__aeabi_dmul>
 8014e32:	a33b      	add	r3, pc, #236	; (adr r3, 8014f20 <__kernel_cos+0x158>)
 8014e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e38:	f7f3 f95e 	bl	80080f8 <__aeabi_dsub>
 8014e3c:	4622      	mov	r2, r4
 8014e3e:	462b      	mov	r3, r5
 8014e40:	f7f3 fb12 	bl	8008468 <__aeabi_dmul>
 8014e44:	a338      	add	r3, pc, #224	; (adr r3, 8014f28 <__kernel_cos+0x160>)
 8014e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e4a:	f7f3 f957 	bl	80080fc <__adddf3>
 8014e4e:	4622      	mov	r2, r4
 8014e50:	462b      	mov	r3, r5
 8014e52:	f7f3 fb09 	bl	8008468 <__aeabi_dmul>
 8014e56:	a336      	add	r3, pc, #216	; (adr r3, 8014f30 <__kernel_cos+0x168>)
 8014e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5c:	f7f3 f94c 	bl	80080f8 <__aeabi_dsub>
 8014e60:	4622      	mov	r2, r4
 8014e62:	462b      	mov	r3, r5
 8014e64:	f7f3 fb00 	bl	8008468 <__aeabi_dmul>
 8014e68:	a333      	add	r3, pc, #204	; (adr r3, 8014f38 <__kernel_cos+0x170>)
 8014e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6e:	f7f3 f945 	bl	80080fc <__adddf3>
 8014e72:	4622      	mov	r2, r4
 8014e74:	462b      	mov	r3, r5
 8014e76:	f7f3 faf7 	bl	8008468 <__aeabi_dmul>
 8014e7a:	4622      	mov	r2, r4
 8014e7c:	462b      	mov	r3, r5
 8014e7e:	f7f3 faf3 	bl	8008468 <__aeabi_dmul>
 8014e82:	ec53 2b18 	vmov	r2, r3, d8
 8014e86:	4604      	mov	r4, r0
 8014e88:	460d      	mov	r5, r1
 8014e8a:	4640      	mov	r0, r8
 8014e8c:	4649      	mov	r1, r9
 8014e8e:	f7f3 faeb 	bl	8008468 <__aeabi_dmul>
 8014e92:	460b      	mov	r3, r1
 8014e94:	4602      	mov	r2, r0
 8014e96:	4629      	mov	r1, r5
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f7f3 f92d 	bl	80080f8 <__aeabi_dsub>
 8014e9e:	4b29      	ldr	r3, [pc, #164]	; (8014f44 <__kernel_cos+0x17c>)
 8014ea0:	429e      	cmp	r6, r3
 8014ea2:	4680      	mov	r8, r0
 8014ea4:	4689      	mov	r9, r1
 8014ea6:	dc11      	bgt.n	8014ecc <__kernel_cos+0x104>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	460b      	mov	r3, r1
 8014eac:	4650      	mov	r0, sl
 8014eae:	4659      	mov	r1, fp
 8014eb0:	f7f3 f922 	bl	80080f8 <__aeabi_dsub>
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	4924      	ldr	r1, [pc, #144]	; (8014f48 <__kernel_cos+0x180>)
 8014eb8:	4602      	mov	r2, r0
 8014eba:	2000      	movs	r0, #0
 8014ebc:	f7f3 f91c 	bl	80080f8 <__aeabi_dsub>
 8014ec0:	ecbd 8b02 	vpop	{d8}
 8014ec4:	ec41 0b10 	vmov	d0, r0, r1
 8014ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ecc:	4b1f      	ldr	r3, [pc, #124]	; (8014f4c <__kernel_cos+0x184>)
 8014ece:	491e      	ldr	r1, [pc, #120]	; (8014f48 <__kernel_cos+0x180>)
 8014ed0:	429e      	cmp	r6, r3
 8014ed2:	bfcc      	ite	gt
 8014ed4:	4d1e      	ldrgt	r5, [pc, #120]	; (8014f50 <__kernel_cos+0x188>)
 8014ed6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014eda:	2400      	movs	r4, #0
 8014edc:	4622      	mov	r2, r4
 8014ede:	462b      	mov	r3, r5
 8014ee0:	2000      	movs	r0, #0
 8014ee2:	f7f3 f909 	bl	80080f8 <__aeabi_dsub>
 8014ee6:	4622      	mov	r2, r4
 8014ee8:	4606      	mov	r6, r0
 8014eea:	460f      	mov	r7, r1
 8014eec:	462b      	mov	r3, r5
 8014eee:	4650      	mov	r0, sl
 8014ef0:	4659      	mov	r1, fp
 8014ef2:	f7f3 f901 	bl	80080f8 <__aeabi_dsub>
 8014ef6:	4642      	mov	r2, r8
 8014ef8:	464b      	mov	r3, r9
 8014efa:	f7f3 f8fd 	bl	80080f8 <__aeabi_dsub>
 8014efe:	4602      	mov	r2, r0
 8014f00:	460b      	mov	r3, r1
 8014f02:	4630      	mov	r0, r6
 8014f04:	4639      	mov	r1, r7
 8014f06:	e7d9      	b.n	8014ebc <__kernel_cos+0xf4>
 8014f08:	2000      	movs	r0, #0
 8014f0a:	490f      	ldr	r1, [pc, #60]	; (8014f48 <__kernel_cos+0x180>)
 8014f0c:	e7d8      	b.n	8014ec0 <__kernel_cos+0xf8>
 8014f0e:	bf00      	nop
 8014f10:	be8838d4 	.word	0xbe8838d4
 8014f14:	bda8fae9 	.word	0xbda8fae9
 8014f18:	bdb4b1c4 	.word	0xbdb4b1c4
 8014f1c:	3e21ee9e 	.word	0x3e21ee9e
 8014f20:	809c52ad 	.word	0x809c52ad
 8014f24:	3e927e4f 	.word	0x3e927e4f
 8014f28:	19cb1590 	.word	0x19cb1590
 8014f2c:	3efa01a0 	.word	0x3efa01a0
 8014f30:	16c15177 	.word	0x16c15177
 8014f34:	3f56c16c 	.word	0x3f56c16c
 8014f38:	5555554c 	.word	0x5555554c
 8014f3c:	3fa55555 	.word	0x3fa55555
 8014f40:	3fe00000 	.word	0x3fe00000
 8014f44:	3fd33332 	.word	0x3fd33332
 8014f48:	3ff00000 	.word	0x3ff00000
 8014f4c:	3fe90000 	.word	0x3fe90000
 8014f50:	3fd20000 	.word	0x3fd20000
 8014f54:	00000000 	.word	0x00000000

08014f58 <__kernel_rem_pio2>:
 8014f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	ed2d 8b02 	vpush	{d8}
 8014f60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014f64:	1ed4      	subs	r4, r2, #3
 8014f66:	9308      	str	r3, [sp, #32]
 8014f68:	9101      	str	r1, [sp, #4]
 8014f6a:	4bc5      	ldr	r3, [pc, #788]	; (8015280 <__kernel_rem_pio2+0x328>)
 8014f6c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8014f70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f74:	9304      	str	r3, [sp, #16]
 8014f76:	9b08      	ldr	r3, [sp, #32]
 8014f78:	3b01      	subs	r3, #1
 8014f7a:	9307      	str	r3, [sp, #28]
 8014f7c:	2318      	movs	r3, #24
 8014f7e:	fb94 f4f3 	sdiv	r4, r4, r3
 8014f82:	f06f 0317 	mvn.w	r3, #23
 8014f86:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014f8a:	fb04 3303 	mla	r3, r4, r3, r3
 8014f8e:	eb03 0a02 	add.w	sl, r3, r2
 8014f92:	9b04      	ldr	r3, [sp, #16]
 8014f94:	9a07      	ldr	r2, [sp, #28]
 8014f96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015270 <__kernel_rem_pio2+0x318>
 8014f9a:	eb03 0802 	add.w	r8, r3, r2
 8014f9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014fa0:	1aa7      	subs	r7, r4, r2
 8014fa2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014fa6:	ae22      	add	r6, sp, #136	; 0x88
 8014fa8:	2500      	movs	r5, #0
 8014faa:	4545      	cmp	r5, r8
 8014fac:	dd13      	ble.n	8014fd6 <__kernel_rem_pio2+0x7e>
 8014fae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015270 <__kernel_rem_pio2+0x318>
 8014fb2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014fb6:	2600      	movs	r6, #0
 8014fb8:	9b04      	ldr	r3, [sp, #16]
 8014fba:	429e      	cmp	r6, r3
 8014fbc:	dc32      	bgt.n	8015024 <__kernel_rem_pio2+0xcc>
 8014fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc0:	9302      	str	r3, [sp, #8]
 8014fc2:	9b08      	ldr	r3, [sp, #32]
 8014fc4:	199d      	adds	r5, r3, r6
 8014fc6:	ab22      	add	r3, sp, #136	; 0x88
 8014fc8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fcc:	9306      	str	r3, [sp, #24]
 8014fce:	ec59 8b18 	vmov	r8, r9, d8
 8014fd2:	2700      	movs	r7, #0
 8014fd4:	e01f      	b.n	8015016 <__kernel_rem_pio2+0xbe>
 8014fd6:	42ef      	cmn	r7, r5
 8014fd8:	d407      	bmi.n	8014fea <__kernel_rem_pio2+0x92>
 8014fda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014fde:	f7f3 f9d9 	bl	8008394 <__aeabi_i2d>
 8014fe2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014fe6:	3501      	adds	r5, #1
 8014fe8:	e7df      	b.n	8014faa <__kernel_rem_pio2+0x52>
 8014fea:	ec51 0b18 	vmov	r0, r1, d8
 8014fee:	e7f8      	b.n	8014fe2 <__kernel_rem_pio2+0x8a>
 8014ff0:	9906      	ldr	r1, [sp, #24]
 8014ff2:	9d02      	ldr	r5, [sp, #8]
 8014ff4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014ff8:	9106      	str	r1, [sp, #24]
 8014ffa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014ffe:	9502      	str	r5, [sp, #8]
 8015000:	f7f3 fa32 	bl	8008468 <__aeabi_dmul>
 8015004:	4602      	mov	r2, r0
 8015006:	460b      	mov	r3, r1
 8015008:	4640      	mov	r0, r8
 801500a:	4649      	mov	r1, r9
 801500c:	f7f3 f876 	bl	80080fc <__adddf3>
 8015010:	3701      	adds	r7, #1
 8015012:	4680      	mov	r8, r0
 8015014:	4689      	mov	r9, r1
 8015016:	9b07      	ldr	r3, [sp, #28]
 8015018:	429f      	cmp	r7, r3
 801501a:	dde9      	ble.n	8014ff0 <__kernel_rem_pio2+0x98>
 801501c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015020:	3601      	adds	r6, #1
 8015022:	e7c9      	b.n	8014fb8 <__kernel_rem_pio2+0x60>
 8015024:	9b04      	ldr	r3, [sp, #16]
 8015026:	aa0e      	add	r2, sp, #56	; 0x38
 8015028:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801502c:	930c      	str	r3, [sp, #48]	; 0x30
 801502e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015030:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015034:	9c04      	ldr	r4, [sp, #16]
 8015036:	930b      	str	r3, [sp, #44]	; 0x2c
 8015038:	ab9a      	add	r3, sp, #616	; 0x268
 801503a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801503e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015042:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015046:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801504a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801504e:	ab9a      	add	r3, sp, #616	; 0x268
 8015050:	445b      	add	r3, fp
 8015052:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8015056:	2500      	movs	r5, #0
 8015058:	1b63      	subs	r3, r4, r5
 801505a:	2b00      	cmp	r3, #0
 801505c:	dc78      	bgt.n	8015150 <__kernel_rem_pio2+0x1f8>
 801505e:	4650      	mov	r0, sl
 8015060:	ec49 8b10 	vmov	d0, r8, r9
 8015064:	f000 fc04 	bl	8015870 <scalbn>
 8015068:	ec57 6b10 	vmov	r6, r7, d0
 801506c:	2200      	movs	r2, #0
 801506e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015072:	ee10 0a10 	vmov	r0, s0
 8015076:	4639      	mov	r1, r7
 8015078:	f7f3 f9f6 	bl	8008468 <__aeabi_dmul>
 801507c:	ec41 0b10 	vmov	d0, r0, r1
 8015080:	f000 fb6e 	bl	8015760 <floor>
 8015084:	2200      	movs	r2, #0
 8015086:	ec51 0b10 	vmov	r0, r1, d0
 801508a:	4b7e      	ldr	r3, [pc, #504]	; (8015284 <__kernel_rem_pio2+0x32c>)
 801508c:	f7f3 f9ec 	bl	8008468 <__aeabi_dmul>
 8015090:	4602      	mov	r2, r0
 8015092:	460b      	mov	r3, r1
 8015094:	4630      	mov	r0, r6
 8015096:	4639      	mov	r1, r7
 8015098:	f7f3 f82e 	bl	80080f8 <__aeabi_dsub>
 801509c:	460f      	mov	r7, r1
 801509e:	4606      	mov	r6, r0
 80150a0:	f7f3 fc92 	bl	80089c8 <__aeabi_d2iz>
 80150a4:	9006      	str	r0, [sp, #24]
 80150a6:	f7f3 f975 	bl	8008394 <__aeabi_i2d>
 80150aa:	4602      	mov	r2, r0
 80150ac:	460b      	mov	r3, r1
 80150ae:	4630      	mov	r0, r6
 80150b0:	4639      	mov	r1, r7
 80150b2:	f7f3 f821 	bl	80080f8 <__aeabi_dsub>
 80150b6:	f1ba 0f00 	cmp.w	sl, #0
 80150ba:	4606      	mov	r6, r0
 80150bc:	460f      	mov	r7, r1
 80150be:	dd6c      	ble.n	801519a <__kernel_rem_pio2+0x242>
 80150c0:	1e62      	subs	r2, r4, #1
 80150c2:	ab0e      	add	r3, sp, #56	; 0x38
 80150c4:	f1ca 0118 	rsb	r1, sl, #24
 80150c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80150cc:	9d06      	ldr	r5, [sp, #24]
 80150ce:	fa40 f301 	asr.w	r3, r0, r1
 80150d2:	441d      	add	r5, r3
 80150d4:	408b      	lsls	r3, r1
 80150d6:	1ac0      	subs	r0, r0, r3
 80150d8:	ab0e      	add	r3, sp, #56	; 0x38
 80150da:	9506      	str	r5, [sp, #24]
 80150dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80150e0:	f1ca 0317 	rsb	r3, sl, #23
 80150e4:	fa40 f303 	asr.w	r3, r0, r3
 80150e8:	9302      	str	r3, [sp, #8]
 80150ea:	9b02      	ldr	r3, [sp, #8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	dd62      	ble.n	80151b6 <__kernel_rem_pio2+0x25e>
 80150f0:	9b06      	ldr	r3, [sp, #24]
 80150f2:	2200      	movs	r2, #0
 80150f4:	3301      	adds	r3, #1
 80150f6:	9306      	str	r3, [sp, #24]
 80150f8:	4615      	mov	r5, r2
 80150fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80150fe:	4294      	cmp	r4, r2
 8015100:	f300 8095 	bgt.w	801522e <__kernel_rem_pio2+0x2d6>
 8015104:	f1ba 0f00 	cmp.w	sl, #0
 8015108:	dd07      	ble.n	801511a <__kernel_rem_pio2+0x1c2>
 801510a:	f1ba 0f01 	cmp.w	sl, #1
 801510e:	f000 80a2 	beq.w	8015256 <__kernel_rem_pio2+0x2fe>
 8015112:	f1ba 0f02 	cmp.w	sl, #2
 8015116:	f000 80c1 	beq.w	801529c <__kernel_rem_pio2+0x344>
 801511a:	9b02      	ldr	r3, [sp, #8]
 801511c:	2b02      	cmp	r3, #2
 801511e:	d14a      	bne.n	80151b6 <__kernel_rem_pio2+0x25e>
 8015120:	4632      	mov	r2, r6
 8015122:	463b      	mov	r3, r7
 8015124:	2000      	movs	r0, #0
 8015126:	4958      	ldr	r1, [pc, #352]	; (8015288 <__kernel_rem_pio2+0x330>)
 8015128:	f7f2 ffe6 	bl	80080f8 <__aeabi_dsub>
 801512c:	4606      	mov	r6, r0
 801512e:	460f      	mov	r7, r1
 8015130:	2d00      	cmp	r5, #0
 8015132:	d040      	beq.n	80151b6 <__kernel_rem_pio2+0x25e>
 8015134:	4650      	mov	r0, sl
 8015136:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015278 <__kernel_rem_pio2+0x320>
 801513a:	f000 fb99 	bl	8015870 <scalbn>
 801513e:	4630      	mov	r0, r6
 8015140:	4639      	mov	r1, r7
 8015142:	ec53 2b10 	vmov	r2, r3, d0
 8015146:	f7f2 ffd7 	bl	80080f8 <__aeabi_dsub>
 801514a:	4606      	mov	r6, r0
 801514c:	460f      	mov	r7, r1
 801514e:	e032      	b.n	80151b6 <__kernel_rem_pio2+0x25e>
 8015150:	2200      	movs	r2, #0
 8015152:	4b4e      	ldr	r3, [pc, #312]	; (801528c <__kernel_rem_pio2+0x334>)
 8015154:	4640      	mov	r0, r8
 8015156:	4649      	mov	r1, r9
 8015158:	f7f3 f986 	bl	8008468 <__aeabi_dmul>
 801515c:	f7f3 fc34 	bl	80089c8 <__aeabi_d2iz>
 8015160:	f7f3 f918 	bl	8008394 <__aeabi_i2d>
 8015164:	2200      	movs	r2, #0
 8015166:	4b4a      	ldr	r3, [pc, #296]	; (8015290 <__kernel_rem_pio2+0x338>)
 8015168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801516c:	f7f3 f97c 	bl	8008468 <__aeabi_dmul>
 8015170:	4602      	mov	r2, r0
 8015172:	460b      	mov	r3, r1
 8015174:	4640      	mov	r0, r8
 8015176:	4649      	mov	r1, r9
 8015178:	f7f2 ffbe 	bl	80080f8 <__aeabi_dsub>
 801517c:	f7f3 fc24 	bl	80089c8 <__aeabi_d2iz>
 8015180:	ab0e      	add	r3, sp, #56	; 0x38
 8015182:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8015186:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801518a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801518e:	f7f2 ffb5 	bl	80080fc <__adddf3>
 8015192:	3501      	adds	r5, #1
 8015194:	4680      	mov	r8, r0
 8015196:	4689      	mov	r9, r1
 8015198:	e75e      	b.n	8015058 <__kernel_rem_pio2+0x100>
 801519a:	d105      	bne.n	80151a8 <__kernel_rem_pio2+0x250>
 801519c:	1e63      	subs	r3, r4, #1
 801519e:	aa0e      	add	r2, sp, #56	; 0x38
 80151a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151a4:	15c3      	asrs	r3, r0, #23
 80151a6:	e79f      	b.n	80150e8 <__kernel_rem_pio2+0x190>
 80151a8:	2200      	movs	r2, #0
 80151aa:	4b3a      	ldr	r3, [pc, #232]	; (8015294 <__kernel_rem_pio2+0x33c>)
 80151ac:	f7f3 fbe2 	bl	8008974 <__aeabi_dcmpge>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d139      	bne.n	8015228 <__kernel_rem_pio2+0x2d0>
 80151b4:	9002      	str	r0, [sp, #8]
 80151b6:	2200      	movs	r2, #0
 80151b8:	2300      	movs	r3, #0
 80151ba:	4630      	mov	r0, r6
 80151bc:	4639      	mov	r1, r7
 80151be:	f7f3 fbbb 	bl	8008938 <__aeabi_dcmpeq>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	f000 80c7 	beq.w	8015356 <__kernel_rem_pio2+0x3fe>
 80151c8:	1e65      	subs	r5, r4, #1
 80151ca:	462b      	mov	r3, r5
 80151cc:	2200      	movs	r2, #0
 80151ce:	9904      	ldr	r1, [sp, #16]
 80151d0:	428b      	cmp	r3, r1
 80151d2:	da6a      	bge.n	80152aa <__kernel_rem_pio2+0x352>
 80151d4:	2a00      	cmp	r2, #0
 80151d6:	f000 8088 	beq.w	80152ea <__kernel_rem_pio2+0x392>
 80151da:	ab0e      	add	r3, sp, #56	; 0x38
 80151dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80151e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 80b4 	beq.w	8015352 <__kernel_rem_pio2+0x3fa>
 80151ea:	4650      	mov	r0, sl
 80151ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015278 <__kernel_rem_pio2+0x320>
 80151f0:	f000 fb3e 	bl	8015870 <scalbn>
 80151f4:	00ec      	lsls	r4, r5, #3
 80151f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80151f8:	191e      	adds	r6, r3, r4
 80151fa:	ec59 8b10 	vmov	r8, r9, d0
 80151fe:	f106 0a08 	add.w	sl, r6, #8
 8015202:	462f      	mov	r7, r5
 8015204:	2f00      	cmp	r7, #0
 8015206:	f280 80df 	bge.w	80153c8 <__kernel_rem_pio2+0x470>
 801520a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015270 <__kernel_rem_pio2+0x318>
 801520e:	f04f 0a00 	mov.w	sl, #0
 8015212:	eba5 030a 	sub.w	r3, r5, sl
 8015216:	2b00      	cmp	r3, #0
 8015218:	f2c0 810a 	blt.w	8015430 <__kernel_rem_pio2+0x4d8>
 801521c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015298 <__kernel_rem_pio2+0x340>
 8015220:	ec59 8b18 	vmov	r8, r9, d8
 8015224:	2700      	movs	r7, #0
 8015226:	e0f5      	b.n	8015414 <__kernel_rem_pio2+0x4bc>
 8015228:	2302      	movs	r3, #2
 801522a:	9302      	str	r3, [sp, #8]
 801522c:	e760      	b.n	80150f0 <__kernel_rem_pio2+0x198>
 801522e:	ab0e      	add	r3, sp, #56	; 0x38
 8015230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015234:	b94d      	cbnz	r5, 801524a <__kernel_rem_pio2+0x2f2>
 8015236:	b12b      	cbz	r3, 8015244 <__kernel_rem_pio2+0x2ec>
 8015238:	a80e      	add	r0, sp, #56	; 0x38
 801523a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801523e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015242:	2301      	movs	r3, #1
 8015244:	3201      	adds	r2, #1
 8015246:	461d      	mov	r5, r3
 8015248:	e759      	b.n	80150fe <__kernel_rem_pio2+0x1a6>
 801524a:	a80e      	add	r0, sp, #56	; 0x38
 801524c:	1acb      	subs	r3, r1, r3
 801524e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015252:	462b      	mov	r3, r5
 8015254:	e7f6      	b.n	8015244 <__kernel_rem_pio2+0x2ec>
 8015256:	1e62      	subs	r2, r4, #1
 8015258:	ab0e      	add	r3, sp, #56	; 0x38
 801525a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801525e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015262:	a90e      	add	r1, sp, #56	; 0x38
 8015264:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015268:	e757      	b.n	801511a <__kernel_rem_pio2+0x1c2>
 801526a:	bf00      	nop
 801526c:	f3af 8000 	nop.w
	...
 801527c:	3ff00000 	.word	0x3ff00000
 8015280:	08029910 	.word	0x08029910
 8015284:	40200000 	.word	0x40200000
 8015288:	3ff00000 	.word	0x3ff00000
 801528c:	3e700000 	.word	0x3e700000
 8015290:	41700000 	.word	0x41700000
 8015294:	3fe00000 	.word	0x3fe00000
 8015298:	080298d0 	.word	0x080298d0
 801529c:	1e62      	subs	r2, r4, #1
 801529e:	ab0e      	add	r3, sp, #56	; 0x38
 80152a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80152a8:	e7db      	b.n	8015262 <__kernel_rem_pio2+0x30a>
 80152aa:	a90e      	add	r1, sp, #56	; 0x38
 80152ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80152b0:	3b01      	subs	r3, #1
 80152b2:	430a      	orrs	r2, r1
 80152b4:	e78b      	b.n	80151ce <__kernel_rem_pio2+0x276>
 80152b6:	3301      	adds	r3, #1
 80152b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80152bc:	2900      	cmp	r1, #0
 80152be:	d0fa      	beq.n	80152b6 <__kernel_rem_pio2+0x35e>
 80152c0:	9a08      	ldr	r2, [sp, #32]
 80152c2:	4422      	add	r2, r4
 80152c4:	00d2      	lsls	r2, r2, #3
 80152c6:	a922      	add	r1, sp, #136	; 0x88
 80152c8:	18e3      	adds	r3, r4, r3
 80152ca:	9206      	str	r2, [sp, #24]
 80152cc:	440a      	add	r2, r1
 80152ce:	9302      	str	r3, [sp, #8]
 80152d0:	f10b 0108 	add.w	r1, fp, #8
 80152d4:	f102 0308 	add.w	r3, r2, #8
 80152d8:	1c66      	adds	r6, r4, #1
 80152da:	910a      	str	r1, [sp, #40]	; 0x28
 80152dc:	2500      	movs	r5, #0
 80152de:	930d      	str	r3, [sp, #52]	; 0x34
 80152e0:	9b02      	ldr	r3, [sp, #8]
 80152e2:	42b3      	cmp	r3, r6
 80152e4:	da04      	bge.n	80152f0 <__kernel_rem_pio2+0x398>
 80152e6:	461c      	mov	r4, r3
 80152e8:	e6a6      	b.n	8015038 <__kernel_rem_pio2+0xe0>
 80152ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152ec:	2301      	movs	r3, #1
 80152ee:	e7e3      	b.n	80152b8 <__kernel_rem_pio2+0x360>
 80152f0:	9b06      	ldr	r3, [sp, #24]
 80152f2:	18ef      	adds	r7, r5, r3
 80152f4:	ab22      	add	r3, sp, #136	; 0x88
 80152f6:	441f      	add	r7, r3
 80152f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80152fe:	f7f3 f849 	bl	8008394 <__aeabi_i2d>
 8015302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015304:	461c      	mov	r4, r3
 8015306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015308:	e9c7 0100 	strd	r0, r1, [r7]
 801530c:	eb03 0b05 	add.w	fp, r3, r5
 8015310:	2700      	movs	r7, #0
 8015312:	f04f 0800 	mov.w	r8, #0
 8015316:	f04f 0900 	mov.w	r9, #0
 801531a:	9b07      	ldr	r3, [sp, #28]
 801531c:	429f      	cmp	r7, r3
 801531e:	dd08      	ble.n	8015332 <__kernel_rem_pio2+0x3da>
 8015320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015322:	aa72      	add	r2, sp, #456	; 0x1c8
 8015324:	18eb      	adds	r3, r5, r3
 8015326:	4413      	add	r3, r2
 8015328:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801532c:	3601      	adds	r6, #1
 801532e:	3508      	adds	r5, #8
 8015330:	e7d6      	b.n	80152e0 <__kernel_rem_pio2+0x388>
 8015332:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015336:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801533a:	f7f3 f895 	bl	8008468 <__aeabi_dmul>
 801533e:	4602      	mov	r2, r0
 8015340:	460b      	mov	r3, r1
 8015342:	4640      	mov	r0, r8
 8015344:	4649      	mov	r1, r9
 8015346:	f7f2 fed9 	bl	80080fc <__adddf3>
 801534a:	3701      	adds	r7, #1
 801534c:	4680      	mov	r8, r0
 801534e:	4689      	mov	r9, r1
 8015350:	e7e3      	b.n	801531a <__kernel_rem_pio2+0x3c2>
 8015352:	3d01      	subs	r5, #1
 8015354:	e741      	b.n	80151da <__kernel_rem_pio2+0x282>
 8015356:	f1ca 0000 	rsb	r0, sl, #0
 801535a:	ec47 6b10 	vmov	d0, r6, r7
 801535e:	f000 fa87 	bl	8015870 <scalbn>
 8015362:	ec57 6b10 	vmov	r6, r7, d0
 8015366:	2200      	movs	r2, #0
 8015368:	4b99      	ldr	r3, [pc, #612]	; (80155d0 <__kernel_rem_pio2+0x678>)
 801536a:	ee10 0a10 	vmov	r0, s0
 801536e:	4639      	mov	r1, r7
 8015370:	f7f3 fb00 	bl	8008974 <__aeabi_dcmpge>
 8015374:	b1f8      	cbz	r0, 80153b6 <__kernel_rem_pio2+0x45e>
 8015376:	2200      	movs	r2, #0
 8015378:	4b96      	ldr	r3, [pc, #600]	; (80155d4 <__kernel_rem_pio2+0x67c>)
 801537a:	4630      	mov	r0, r6
 801537c:	4639      	mov	r1, r7
 801537e:	f7f3 f873 	bl	8008468 <__aeabi_dmul>
 8015382:	f7f3 fb21 	bl	80089c8 <__aeabi_d2iz>
 8015386:	4680      	mov	r8, r0
 8015388:	f7f3 f804 	bl	8008394 <__aeabi_i2d>
 801538c:	2200      	movs	r2, #0
 801538e:	4b90      	ldr	r3, [pc, #576]	; (80155d0 <__kernel_rem_pio2+0x678>)
 8015390:	f7f3 f86a 	bl	8008468 <__aeabi_dmul>
 8015394:	460b      	mov	r3, r1
 8015396:	4602      	mov	r2, r0
 8015398:	4639      	mov	r1, r7
 801539a:	4630      	mov	r0, r6
 801539c:	f7f2 feac 	bl	80080f8 <__aeabi_dsub>
 80153a0:	f7f3 fb12 	bl	80089c8 <__aeabi_d2iz>
 80153a4:	1c65      	adds	r5, r4, #1
 80153a6:	ab0e      	add	r3, sp, #56	; 0x38
 80153a8:	f10a 0a18 	add.w	sl, sl, #24
 80153ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80153b4:	e719      	b.n	80151ea <__kernel_rem_pio2+0x292>
 80153b6:	4630      	mov	r0, r6
 80153b8:	4639      	mov	r1, r7
 80153ba:	f7f3 fb05 	bl	80089c8 <__aeabi_d2iz>
 80153be:	ab0e      	add	r3, sp, #56	; 0x38
 80153c0:	4625      	mov	r5, r4
 80153c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153c6:	e710      	b.n	80151ea <__kernel_rem_pio2+0x292>
 80153c8:	ab0e      	add	r3, sp, #56	; 0x38
 80153ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80153ce:	f7f2 ffe1 	bl	8008394 <__aeabi_i2d>
 80153d2:	4642      	mov	r2, r8
 80153d4:	464b      	mov	r3, r9
 80153d6:	f7f3 f847 	bl	8008468 <__aeabi_dmul>
 80153da:	2200      	movs	r2, #0
 80153dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80153e0:	4b7c      	ldr	r3, [pc, #496]	; (80155d4 <__kernel_rem_pio2+0x67c>)
 80153e2:	4640      	mov	r0, r8
 80153e4:	4649      	mov	r1, r9
 80153e6:	f7f3 f83f 	bl	8008468 <__aeabi_dmul>
 80153ea:	3f01      	subs	r7, #1
 80153ec:	4680      	mov	r8, r0
 80153ee:	4689      	mov	r9, r1
 80153f0:	e708      	b.n	8015204 <__kernel_rem_pio2+0x2ac>
 80153f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80153f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80153fe:	f7f3 f833 	bl	8008468 <__aeabi_dmul>
 8015402:	4602      	mov	r2, r0
 8015404:	460b      	mov	r3, r1
 8015406:	4640      	mov	r0, r8
 8015408:	4649      	mov	r1, r9
 801540a:	f7f2 fe77 	bl	80080fc <__adddf3>
 801540e:	3701      	adds	r7, #1
 8015410:	4680      	mov	r8, r0
 8015412:	4689      	mov	r9, r1
 8015414:	9b04      	ldr	r3, [sp, #16]
 8015416:	429f      	cmp	r7, r3
 8015418:	dc01      	bgt.n	801541e <__kernel_rem_pio2+0x4c6>
 801541a:	45ba      	cmp	sl, r7
 801541c:	dae9      	bge.n	80153f2 <__kernel_rem_pio2+0x49a>
 801541e:	ab4a      	add	r3, sp, #296	; 0x128
 8015420:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015424:	e9c3 8900 	strd	r8, r9, [r3]
 8015428:	f10a 0a01 	add.w	sl, sl, #1
 801542c:	3e08      	subs	r6, #8
 801542e:	e6f0      	b.n	8015212 <__kernel_rem_pio2+0x2ba>
 8015430:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015432:	2b03      	cmp	r3, #3
 8015434:	d85b      	bhi.n	80154ee <__kernel_rem_pio2+0x596>
 8015436:	e8df f003 	tbb	[pc, r3]
 801543a:	264a      	.short	0x264a
 801543c:	0226      	.short	0x0226
 801543e:	ab9a      	add	r3, sp, #616	; 0x268
 8015440:	441c      	add	r4, r3
 8015442:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015446:	46a2      	mov	sl, r4
 8015448:	46ab      	mov	fp, r5
 801544a:	f1bb 0f00 	cmp.w	fp, #0
 801544e:	dc6c      	bgt.n	801552a <__kernel_rem_pio2+0x5d2>
 8015450:	46a2      	mov	sl, r4
 8015452:	46ab      	mov	fp, r5
 8015454:	f1bb 0f01 	cmp.w	fp, #1
 8015458:	f300 8086 	bgt.w	8015568 <__kernel_rem_pio2+0x610>
 801545c:	2000      	movs	r0, #0
 801545e:	2100      	movs	r1, #0
 8015460:	2d01      	cmp	r5, #1
 8015462:	f300 80a0 	bgt.w	80155a6 <__kernel_rem_pio2+0x64e>
 8015466:	9b02      	ldr	r3, [sp, #8]
 8015468:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801546c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015470:	2b00      	cmp	r3, #0
 8015472:	f040 809e 	bne.w	80155b2 <__kernel_rem_pio2+0x65a>
 8015476:	9b01      	ldr	r3, [sp, #4]
 8015478:	e9c3 7800 	strd	r7, r8, [r3]
 801547c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015480:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015484:	e033      	b.n	80154ee <__kernel_rem_pio2+0x596>
 8015486:	3408      	adds	r4, #8
 8015488:	ab4a      	add	r3, sp, #296	; 0x128
 801548a:	441c      	add	r4, r3
 801548c:	462e      	mov	r6, r5
 801548e:	2000      	movs	r0, #0
 8015490:	2100      	movs	r1, #0
 8015492:	2e00      	cmp	r6, #0
 8015494:	da3a      	bge.n	801550c <__kernel_rem_pio2+0x5b4>
 8015496:	9b02      	ldr	r3, [sp, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d03d      	beq.n	8015518 <__kernel_rem_pio2+0x5c0>
 801549c:	4602      	mov	r2, r0
 801549e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154a2:	9c01      	ldr	r4, [sp, #4]
 80154a4:	e9c4 2300 	strd	r2, r3, [r4]
 80154a8:	4602      	mov	r2, r0
 80154aa:	460b      	mov	r3, r1
 80154ac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80154b0:	f7f2 fe22 	bl	80080f8 <__aeabi_dsub>
 80154b4:	ae4c      	add	r6, sp, #304	; 0x130
 80154b6:	2401      	movs	r4, #1
 80154b8:	42a5      	cmp	r5, r4
 80154ba:	da30      	bge.n	801551e <__kernel_rem_pio2+0x5c6>
 80154bc:	9b02      	ldr	r3, [sp, #8]
 80154be:	b113      	cbz	r3, 80154c6 <__kernel_rem_pio2+0x56e>
 80154c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154c4:	4619      	mov	r1, r3
 80154c6:	9b01      	ldr	r3, [sp, #4]
 80154c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80154cc:	e00f      	b.n	80154ee <__kernel_rem_pio2+0x596>
 80154ce:	ab9a      	add	r3, sp, #616	; 0x268
 80154d0:	441c      	add	r4, r3
 80154d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80154d6:	2000      	movs	r0, #0
 80154d8:	2100      	movs	r1, #0
 80154da:	2d00      	cmp	r5, #0
 80154dc:	da10      	bge.n	8015500 <__kernel_rem_pio2+0x5a8>
 80154de:	9b02      	ldr	r3, [sp, #8]
 80154e0:	b113      	cbz	r3, 80154e8 <__kernel_rem_pio2+0x590>
 80154e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154e6:	4619      	mov	r1, r3
 80154e8:	9b01      	ldr	r3, [sp, #4]
 80154ea:	e9c3 0100 	strd	r0, r1, [r3]
 80154ee:	9b06      	ldr	r3, [sp, #24]
 80154f0:	f003 0007 	and.w	r0, r3, #7
 80154f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80154f8:	ecbd 8b02 	vpop	{d8}
 80154fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015500:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015504:	f7f2 fdfa 	bl	80080fc <__adddf3>
 8015508:	3d01      	subs	r5, #1
 801550a:	e7e6      	b.n	80154da <__kernel_rem_pio2+0x582>
 801550c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015510:	f7f2 fdf4 	bl	80080fc <__adddf3>
 8015514:	3e01      	subs	r6, #1
 8015516:	e7bc      	b.n	8015492 <__kernel_rem_pio2+0x53a>
 8015518:	4602      	mov	r2, r0
 801551a:	460b      	mov	r3, r1
 801551c:	e7c1      	b.n	80154a2 <__kernel_rem_pio2+0x54a>
 801551e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015522:	f7f2 fdeb 	bl	80080fc <__adddf3>
 8015526:	3401      	adds	r4, #1
 8015528:	e7c6      	b.n	80154b8 <__kernel_rem_pio2+0x560>
 801552a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801552e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015532:	4640      	mov	r0, r8
 8015534:	ec53 2b17 	vmov	r2, r3, d7
 8015538:	4649      	mov	r1, r9
 801553a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801553e:	f7f2 fddd 	bl	80080fc <__adddf3>
 8015542:	4602      	mov	r2, r0
 8015544:	460b      	mov	r3, r1
 8015546:	4606      	mov	r6, r0
 8015548:	460f      	mov	r7, r1
 801554a:	4640      	mov	r0, r8
 801554c:	4649      	mov	r1, r9
 801554e:	f7f2 fdd3 	bl	80080f8 <__aeabi_dsub>
 8015552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015556:	f7f2 fdd1 	bl	80080fc <__adddf3>
 801555a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801555e:	e9ca 0100 	strd	r0, r1, [sl]
 8015562:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015566:	e770      	b.n	801544a <__kernel_rem_pio2+0x4f2>
 8015568:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801556c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015570:	4630      	mov	r0, r6
 8015572:	ec53 2b17 	vmov	r2, r3, d7
 8015576:	4639      	mov	r1, r7
 8015578:	ed8d 7b04 	vstr	d7, [sp, #16]
 801557c:	f7f2 fdbe 	bl	80080fc <__adddf3>
 8015580:	4602      	mov	r2, r0
 8015582:	460b      	mov	r3, r1
 8015584:	4680      	mov	r8, r0
 8015586:	4689      	mov	r9, r1
 8015588:	4630      	mov	r0, r6
 801558a:	4639      	mov	r1, r7
 801558c:	f7f2 fdb4 	bl	80080f8 <__aeabi_dsub>
 8015590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015594:	f7f2 fdb2 	bl	80080fc <__adddf3>
 8015598:	f10b 3bff 	add.w	fp, fp, #4294967295
 801559c:	e9ca 0100 	strd	r0, r1, [sl]
 80155a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80155a4:	e756      	b.n	8015454 <__kernel_rem_pio2+0x4fc>
 80155a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155aa:	f7f2 fda7 	bl	80080fc <__adddf3>
 80155ae:	3d01      	subs	r5, #1
 80155b0:	e756      	b.n	8015460 <__kernel_rem_pio2+0x508>
 80155b2:	9b01      	ldr	r3, [sp, #4]
 80155b4:	9a01      	ldr	r2, [sp, #4]
 80155b6:	601f      	str	r7, [r3, #0]
 80155b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80155bc:	605c      	str	r4, [r3, #4]
 80155be:	609d      	str	r5, [r3, #8]
 80155c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80155c4:	60d3      	str	r3, [r2, #12]
 80155c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155ca:	6110      	str	r0, [r2, #16]
 80155cc:	6153      	str	r3, [r2, #20]
 80155ce:	e78e      	b.n	80154ee <__kernel_rem_pio2+0x596>
 80155d0:	41700000 	.word	0x41700000
 80155d4:	3e700000 	.word	0x3e700000

080155d8 <__kernel_sin>:
 80155d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155dc:	ec55 4b10 	vmov	r4, r5, d0
 80155e0:	b085      	sub	sp, #20
 80155e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80155e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80155ea:	ed8d 1b00 	vstr	d1, [sp]
 80155ee:	9002      	str	r0, [sp, #8]
 80155f0:	da06      	bge.n	8015600 <__kernel_sin+0x28>
 80155f2:	ee10 0a10 	vmov	r0, s0
 80155f6:	4629      	mov	r1, r5
 80155f8:	f7f3 f9e6 	bl	80089c8 <__aeabi_d2iz>
 80155fc:	2800      	cmp	r0, #0
 80155fe:	d051      	beq.n	80156a4 <__kernel_sin+0xcc>
 8015600:	4622      	mov	r2, r4
 8015602:	462b      	mov	r3, r5
 8015604:	4620      	mov	r0, r4
 8015606:	4629      	mov	r1, r5
 8015608:	f7f2 ff2e 	bl	8008468 <__aeabi_dmul>
 801560c:	4682      	mov	sl, r0
 801560e:	468b      	mov	fp, r1
 8015610:	4602      	mov	r2, r0
 8015612:	460b      	mov	r3, r1
 8015614:	4620      	mov	r0, r4
 8015616:	4629      	mov	r1, r5
 8015618:	f7f2 ff26 	bl	8008468 <__aeabi_dmul>
 801561c:	a341      	add	r3, pc, #260	; (adr r3, 8015724 <__kernel_sin+0x14c>)
 801561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015622:	4680      	mov	r8, r0
 8015624:	4689      	mov	r9, r1
 8015626:	4650      	mov	r0, sl
 8015628:	4659      	mov	r1, fp
 801562a:	f7f2 ff1d 	bl	8008468 <__aeabi_dmul>
 801562e:	a33f      	add	r3, pc, #252	; (adr r3, 801572c <__kernel_sin+0x154>)
 8015630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015634:	f7f2 fd60 	bl	80080f8 <__aeabi_dsub>
 8015638:	4652      	mov	r2, sl
 801563a:	465b      	mov	r3, fp
 801563c:	f7f2 ff14 	bl	8008468 <__aeabi_dmul>
 8015640:	a33c      	add	r3, pc, #240	; (adr r3, 8015734 <__kernel_sin+0x15c>)
 8015642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015646:	f7f2 fd59 	bl	80080fc <__adddf3>
 801564a:	4652      	mov	r2, sl
 801564c:	465b      	mov	r3, fp
 801564e:	f7f2 ff0b 	bl	8008468 <__aeabi_dmul>
 8015652:	a33a      	add	r3, pc, #232	; (adr r3, 801573c <__kernel_sin+0x164>)
 8015654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015658:	f7f2 fd4e 	bl	80080f8 <__aeabi_dsub>
 801565c:	4652      	mov	r2, sl
 801565e:	465b      	mov	r3, fp
 8015660:	f7f2 ff02 	bl	8008468 <__aeabi_dmul>
 8015664:	a337      	add	r3, pc, #220	; (adr r3, 8015744 <__kernel_sin+0x16c>)
 8015666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801566a:	f7f2 fd47 	bl	80080fc <__adddf3>
 801566e:	9b02      	ldr	r3, [sp, #8]
 8015670:	4606      	mov	r6, r0
 8015672:	460f      	mov	r7, r1
 8015674:	b9db      	cbnz	r3, 80156ae <__kernel_sin+0xd6>
 8015676:	4602      	mov	r2, r0
 8015678:	460b      	mov	r3, r1
 801567a:	4650      	mov	r0, sl
 801567c:	4659      	mov	r1, fp
 801567e:	f7f2 fef3 	bl	8008468 <__aeabi_dmul>
 8015682:	a325      	add	r3, pc, #148	; (adr r3, 8015718 <__kernel_sin+0x140>)
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f7f2 fd36 	bl	80080f8 <__aeabi_dsub>
 801568c:	4642      	mov	r2, r8
 801568e:	464b      	mov	r3, r9
 8015690:	f7f2 feea 	bl	8008468 <__aeabi_dmul>
 8015694:	4602      	mov	r2, r0
 8015696:	460b      	mov	r3, r1
 8015698:	4620      	mov	r0, r4
 801569a:	4629      	mov	r1, r5
 801569c:	f7f2 fd2e 	bl	80080fc <__adddf3>
 80156a0:	4604      	mov	r4, r0
 80156a2:	460d      	mov	r5, r1
 80156a4:	ec45 4b10 	vmov	d0, r4, r5
 80156a8:	b005      	add	sp, #20
 80156aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ae:	2200      	movs	r2, #0
 80156b0:	4b1b      	ldr	r3, [pc, #108]	; (8015720 <__kernel_sin+0x148>)
 80156b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156b6:	f7f2 fed7 	bl	8008468 <__aeabi_dmul>
 80156ba:	4632      	mov	r2, r6
 80156bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156c0:	463b      	mov	r3, r7
 80156c2:	4640      	mov	r0, r8
 80156c4:	4649      	mov	r1, r9
 80156c6:	f7f2 fecf 	bl	8008468 <__aeabi_dmul>
 80156ca:	4602      	mov	r2, r0
 80156cc:	460b      	mov	r3, r1
 80156ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156d2:	f7f2 fd11 	bl	80080f8 <__aeabi_dsub>
 80156d6:	4652      	mov	r2, sl
 80156d8:	465b      	mov	r3, fp
 80156da:	f7f2 fec5 	bl	8008468 <__aeabi_dmul>
 80156de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156e2:	f7f2 fd09 	bl	80080f8 <__aeabi_dsub>
 80156e6:	a30c      	add	r3, pc, #48	; (adr r3, 8015718 <__kernel_sin+0x140>)
 80156e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ec:	4606      	mov	r6, r0
 80156ee:	460f      	mov	r7, r1
 80156f0:	4640      	mov	r0, r8
 80156f2:	4649      	mov	r1, r9
 80156f4:	f7f2 feb8 	bl	8008468 <__aeabi_dmul>
 80156f8:	4602      	mov	r2, r0
 80156fa:	460b      	mov	r3, r1
 80156fc:	4630      	mov	r0, r6
 80156fe:	4639      	mov	r1, r7
 8015700:	f7f2 fcfc 	bl	80080fc <__adddf3>
 8015704:	4602      	mov	r2, r0
 8015706:	460b      	mov	r3, r1
 8015708:	4620      	mov	r0, r4
 801570a:	4629      	mov	r1, r5
 801570c:	f7f2 fcf4 	bl	80080f8 <__aeabi_dsub>
 8015710:	e7c6      	b.n	80156a0 <__kernel_sin+0xc8>
 8015712:	bf00      	nop
 8015714:	f3af 8000 	nop.w
 8015718:	55555549 	.word	0x55555549
 801571c:	3fc55555 	.word	0x3fc55555
 8015720:	3fe00000 	.word	0x3fe00000
 8015724:	5acfd57c 	.word	0x5acfd57c
 8015728:	3de5d93a 	.word	0x3de5d93a
 801572c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015730:	3e5ae5e6 	.word	0x3e5ae5e6
 8015734:	57b1fe7d 	.word	0x57b1fe7d
 8015738:	3ec71de3 	.word	0x3ec71de3
 801573c:	19c161d5 	.word	0x19c161d5
 8015740:	3f2a01a0 	.word	0x3f2a01a0
 8015744:	1110f8a6 	.word	0x1110f8a6
 8015748:	3f811111 	.word	0x3f811111

0801574c <fabs>:
 801574c:	ec51 0b10 	vmov	r0, r1, d0
 8015750:	ee10 2a10 	vmov	r2, s0
 8015754:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015758:	ec43 2b10 	vmov	d0, r2, r3
 801575c:	4770      	bx	lr
	...

08015760 <floor>:
 8015760:	ec51 0b10 	vmov	r0, r1, d0
 8015764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015768:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801576c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015770:	2e13      	cmp	r6, #19
 8015772:	460c      	mov	r4, r1
 8015774:	ee10 5a10 	vmov	r5, s0
 8015778:	4680      	mov	r8, r0
 801577a:	dc34      	bgt.n	80157e6 <floor+0x86>
 801577c:	2e00      	cmp	r6, #0
 801577e:	da16      	bge.n	80157ae <floor+0x4e>
 8015780:	a335      	add	r3, pc, #212	; (adr r3, 8015858 <floor+0xf8>)
 8015782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015786:	f7f2 fcb9 	bl	80080fc <__adddf3>
 801578a:	2200      	movs	r2, #0
 801578c:	2300      	movs	r3, #0
 801578e:	f7f3 f8fb 	bl	8008988 <__aeabi_dcmpgt>
 8015792:	b148      	cbz	r0, 80157a8 <floor+0x48>
 8015794:	2c00      	cmp	r4, #0
 8015796:	da59      	bge.n	801584c <floor+0xec>
 8015798:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801579c:	4a30      	ldr	r2, [pc, #192]	; (8015860 <floor+0x100>)
 801579e:	432b      	orrs	r3, r5
 80157a0:	2500      	movs	r5, #0
 80157a2:	42ab      	cmp	r3, r5
 80157a4:	bf18      	it	ne
 80157a6:	4614      	movne	r4, r2
 80157a8:	4621      	mov	r1, r4
 80157aa:	4628      	mov	r0, r5
 80157ac:	e025      	b.n	80157fa <floor+0x9a>
 80157ae:	4f2d      	ldr	r7, [pc, #180]	; (8015864 <floor+0x104>)
 80157b0:	4137      	asrs	r7, r6
 80157b2:	ea01 0307 	and.w	r3, r1, r7
 80157b6:	4303      	orrs	r3, r0
 80157b8:	d01f      	beq.n	80157fa <floor+0x9a>
 80157ba:	a327      	add	r3, pc, #156	; (adr r3, 8015858 <floor+0xf8>)
 80157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c0:	f7f2 fc9c 	bl	80080fc <__adddf3>
 80157c4:	2200      	movs	r2, #0
 80157c6:	2300      	movs	r3, #0
 80157c8:	f7f3 f8de 	bl	8008988 <__aeabi_dcmpgt>
 80157cc:	2800      	cmp	r0, #0
 80157ce:	d0eb      	beq.n	80157a8 <floor+0x48>
 80157d0:	2c00      	cmp	r4, #0
 80157d2:	bfbe      	ittt	lt
 80157d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80157d8:	fa43 f606 	asrlt.w	r6, r3, r6
 80157dc:	19a4      	addlt	r4, r4, r6
 80157de:	ea24 0407 	bic.w	r4, r4, r7
 80157e2:	2500      	movs	r5, #0
 80157e4:	e7e0      	b.n	80157a8 <floor+0x48>
 80157e6:	2e33      	cmp	r6, #51	; 0x33
 80157e8:	dd0b      	ble.n	8015802 <floor+0xa2>
 80157ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80157ee:	d104      	bne.n	80157fa <floor+0x9a>
 80157f0:	ee10 2a10 	vmov	r2, s0
 80157f4:	460b      	mov	r3, r1
 80157f6:	f7f2 fc81 	bl	80080fc <__adddf3>
 80157fa:	ec41 0b10 	vmov	d0, r0, r1
 80157fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015802:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015806:	f04f 33ff 	mov.w	r3, #4294967295
 801580a:	fa23 f707 	lsr.w	r7, r3, r7
 801580e:	4207      	tst	r7, r0
 8015810:	d0f3      	beq.n	80157fa <floor+0x9a>
 8015812:	a311      	add	r3, pc, #68	; (adr r3, 8015858 <floor+0xf8>)
 8015814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015818:	f7f2 fc70 	bl	80080fc <__adddf3>
 801581c:	2200      	movs	r2, #0
 801581e:	2300      	movs	r3, #0
 8015820:	f7f3 f8b2 	bl	8008988 <__aeabi_dcmpgt>
 8015824:	2800      	cmp	r0, #0
 8015826:	d0bf      	beq.n	80157a8 <floor+0x48>
 8015828:	2c00      	cmp	r4, #0
 801582a:	da02      	bge.n	8015832 <floor+0xd2>
 801582c:	2e14      	cmp	r6, #20
 801582e:	d103      	bne.n	8015838 <floor+0xd8>
 8015830:	3401      	adds	r4, #1
 8015832:	ea25 0507 	bic.w	r5, r5, r7
 8015836:	e7b7      	b.n	80157a8 <floor+0x48>
 8015838:	2301      	movs	r3, #1
 801583a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801583e:	fa03 f606 	lsl.w	r6, r3, r6
 8015842:	4435      	add	r5, r6
 8015844:	4545      	cmp	r5, r8
 8015846:	bf38      	it	cc
 8015848:	18e4      	addcc	r4, r4, r3
 801584a:	e7f2      	b.n	8015832 <floor+0xd2>
 801584c:	2500      	movs	r5, #0
 801584e:	462c      	mov	r4, r5
 8015850:	e7aa      	b.n	80157a8 <floor+0x48>
 8015852:	bf00      	nop
 8015854:	f3af 8000 	nop.w
 8015858:	8800759c 	.word	0x8800759c
 801585c:	7e37e43c 	.word	0x7e37e43c
 8015860:	bff00000 	.word	0xbff00000
 8015864:	000fffff 	.word	0x000fffff

08015868 <matherr>:
 8015868:	2000      	movs	r0, #0
 801586a:	4770      	bx	lr
 801586c:	0000      	movs	r0, r0
	...

08015870 <scalbn>:
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	ec55 4b10 	vmov	r4, r5, d0
 8015876:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801587a:	4606      	mov	r6, r0
 801587c:	462b      	mov	r3, r5
 801587e:	b9aa      	cbnz	r2, 80158ac <scalbn+0x3c>
 8015880:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015884:	4323      	orrs	r3, r4
 8015886:	d03b      	beq.n	8015900 <scalbn+0x90>
 8015888:	4b31      	ldr	r3, [pc, #196]	; (8015950 <scalbn+0xe0>)
 801588a:	4629      	mov	r1, r5
 801588c:	2200      	movs	r2, #0
 801588e:	ee10 0a10 	vmov	r0, s0
 8015892:	f7f2 fde9 	bl	8008468 <__aeabi_dmul>
 8015896:	4b2f      	ldr	r3, [pc, #188]	; (8015954 <scalbn+0xe4>)
 8015898:	429e      	cmp	r6, r3
 801589a:	4604      	mov	r4, r0
 801589c:	460d      	mov	r5, r1
 801589e:	da12      	bge.n	80158c6 <scalbn+0x56>
 80158a0:	a327      	add	r3, pc, #156	; (adr r3, 8015940 <scalbn+0xd0>)
 80158a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158a6:	f7f2 fddf 	bl	8008468 <__aeabi_dmul>
 80158aa:	e009      	b.n	80158c0 <scalbn+0x50>
 80158ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80158b0:	428a      	cmp	r2, r1
 80158b2:	d10c      	bne.n	80158ce <scalbn+0x5e>
 80158b4:	ee10 2a10 	vmov	r2, s0
 80158b8:	4620      	mov	r0, r4
 80158ba:	4629      	mov	r1, r5
 80158bc:	f7f2 fc1e 	bl	80080fc <__adddf3>
 80158c0:	4604      	mov	r4, r0
 80158c2:	460d      	mov	r5, r1
 80158c4:	e01c      	b.n	8015900 <scalbn+0x90>
 80158c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80158ca:	460b      	mov	r3, r1
 80158cc:	3a36      	subs	r2, #54	; 0x36
 80158ce:	4432      	add	r2, r6
 80158d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80158d4:	428a      	cmp	r2, r1
 80158d6:	dd0b      	ble.n	80158f0 <scalbn+0x80>
 80158d8:	ec45 4b11 	vmov	d1, r4, r5
 80158dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015948 <scalbn+0xd8>
 80158e0:	f000 f83c 	bl	801595c <copysign>
 80158e4:	a318      	add	r3, pc, #96	; (adr r3, 8015948 <scalbn+0xd8>)
 80158e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ea:	ec51 0b10 	vmov	r0, r1, d0
 80158ee:	e7da      	b.n	80158a6 <scalbn+0x36>
 80158f0:	2a00      	cmp	r2, #0
 80158f2:	dd08      	ble.n	8015906 <scalbn+0x96>
 80158f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80158f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80158fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015900:	ec45 4b10 	vmov	d0, r4, r5
 8015904:	bd70      	pop	{r4, r5, r6, pc}
 8015906:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801590a:	da0d      	bge.n	8015928 <scalbn+0xb8>
 801590c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015910:	429e      	cmp	r6, r3
 8015912:	ec45 4b11 	vmov	d1, r4, r5
 8015916:	dce1      	bgt.n	80158dc <scalbn+0x6c>
 8015918:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015940 <scalbn+0xd0>
 801591c:	f000 f81e 	bl	801595c <copysign>
 8015920:	a307      	add	r3, pc, #28	; (adr r3, 8015940 <scalbn+0xd0>)
 8015922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015926:	e7e0      	b.n	80158ea <scalbn+0x7a>
 8015928:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801592c:	3236      	adds	r2, #54	; 0x36
 801592e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015932:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015936:	4620      	mov	r0, r4
 8015938:	4629      	mov	r1, r5
 801593a:	2200      	movs	r2, #0
 801593c:	4b06      	ldr	r3, [pc, #24]	; (8015958 <scalbn+0xe8>)
 801593e:	e7b2      	b.n	80158a6 <scalbn+0x36>
 8015940:	c2f8f359 	.word	0xc2f8f359
 8015944:	01a56e1f 	.word	0x01a56e1f
 8015948:	8800759c 	.word	0x8800759c
 801594c:	7e37e43c 	.word	0x7e37e43c
 8015950:	43500000 	.word	0x43500000
 8015954:	ffff3cb0 	.word	0xffff3cb0
 8015958:	3c900000 	.word	0x3c900000

0801595c <copysign>:
 801595c:	ec51 0b10 	vmov	r0, r1, d0
 8015960:	ee11 0a90 	vmov	r0, s3
 8015964:	ee10 2a10 	vmov	r2, s0
 8015968:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801596c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015970:	ea41 0300 	orr.w	r3, r1, r0
 8015974:	ec43 2b10 	vmov	d0, r2, r3
 8015978:	4770      	bx	lr
	...

0801597c <_init>:
 801597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801597e:	bf00      	nop
 8015980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015982:	bc08      	pop	{r3}
 8015984:	469e      	mov	lr, r3
 8015986:	4770      	bx	lr

08015988 <_fini>:
 8015988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598a:	bf00      	nop
 801598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801598e:	bc08      	pop	{r3}
 8015990:	469e      	mov	lr, r3
 8015992:	4770      	bx	lr
