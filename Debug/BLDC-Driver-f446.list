
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009488  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013968  08009650  08009650  00019650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cfb8  0801cfb8  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801cfb8  0801cfb8  0002cfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cfc0  0801cfc0  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cfc0  0801cfc0  0002cfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cfc4  0801cfc4  0002cfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801cfc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  200000a8  0801d070  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0801d070  000305b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a57  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036d4  00000000  00000000  00048b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  0004c208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  0004d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a9c  00000000  00000000  0004e620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000118aa  00000000  00000000  000740bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9d96  00000000  00000000  00085966  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f6fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c0  00000000  00000000  0015f778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a8 	.word	0x200000a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009638 	.word	0x08009638

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000ac 	.word	0x200000ac
 8000204:	08009638 	.word	0x08009638

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b972 	b.w	8000e7c <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9e08      	ldr	r6, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4688      	mov	r8, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14b      	bne.n	8000c56 <__udivmoddi4+0xa6>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4615      	mov	r5, r2
 8000bc2:	d967      	bls.n	8000c94 <__udivmoddi4+0xe4>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b14a      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bca:	f1c2 0720 	rsb	r7, r2, #32
 8000bce:	fa01 f302 	lsl.w	r3, r1, r2
 8000bd2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd6:	4095      	lsls	r5, r2
 8000bd8:	ea47 0803 	orr.w	r8, r7, r3
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be8:	fa1f fc85 	uxth.w	ip, r5
 8000bec:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bf0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x60>
 8000bfc:	18eb      	adds	r3, r5, r3
 8000bfe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c02:	f080 811b 	bcs.w	8000e3c <__udivmoddi4+0x28c>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 8118 	bls.w	8000e3c <__udivmoddi4+0x28c>
 8000c0c:	3f02      	subs	r7, #2
 8000c0e:	442b      	add	r3, r5
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c24:	45a4      	cmp	ip, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x8c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x290>
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x290>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	442c      	add	r4, r5
 8000c3c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c40:	eba4 040c 	sub.w	r4, r4, ip
 8000c44:	2700      	movs	r7, #0
 8000c46:	b11e      	cbz	r6, 8000c50 <__udivmoddi4+0xa0>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c50:	4639      	mov	r1, r7
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xbe>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	f000 80eb 	beq.w	8000e36 <__udivmoddi4+0x286>
 8000c60:	2700      	movs	r7, #0
 8000c62:	e9c6 0100 	strd	r0, r1, [r6]
 8000c66:	4638      	mov	r0, r7
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f783 	clz	r7, r3
 8000c72:	2f00      	cmp	r7, #0
 8000c74:	d147      	bne.n	8000d06 <__udivmoddi4+0x156>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd0>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80fa 	bhi.w	8000e74 <__udivmoddi4+0x2c4>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	4698      	mov	r8, r3
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa0>
 8000c8e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xe8>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 808f 	bne.w	8000dc0 <__udivmoddi4+0x210>
 8000ca2:	1b49      	subs	r1, r1, r5
 8000ca4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca8:	fa1f f885 	uxth.w	r8, r5
 8000cac:	2701      	movs	r7, #1
 8000cae:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cb2:	0c23      	lsrs	r3, r4, #16
 8000cb4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb08 f10c 	mul.w	r1, r8, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x124>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x122>
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2bc>
 8000cd2:	4684      	mov	ip, r0
 8000cd4:	1a59      	subs	r1, r3, r1
 8000cd6:	b2a3      	uxth	r3, r4
 8000cd8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cdc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ce0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce4:	fb08 f800 	mul.w	r8, r8, r0
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x14c>
 8000cec:	192c      	adds	r4, r5, r4
 8000cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x14a>
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	f200 80b6 	bhi.w	8000e66 <__udivmoddi4+0x2b6>
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	eba4 0408 	sub.w	r4, r4, r8
 8000d00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d04:	e79f      	b.n	8000c46 <__udivmoddi4+0x96>
 8000d06:	f1c7 0c20 	rsb	ip, r7, #32
 8000d0a:	40bb      	lsls	r3, r7
 8000d0c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d10:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d14:	fa01 f407 	lsl.w	r4, r1, r7
 8000d18:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d1c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d20:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d24:	4325      	orrs	r5, r4
 8000d26:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d2a:	0c2c      	lsrs	r4, r5, #16
 8000d2c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d30:	fa1f fa8e 	uxth.w	sl, lr
 8000d34:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d38:	fb09 f40a 	mul.w	r4, r9, sl
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d42:	fa00 f107 	lsl.w	r1, r0, r7
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b0>
 8000d48:	eb1e 0303 	adds.w	r3, lr, r3
 8000d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d50:	f080 8087 	bcs.w	8000e62 <__udivmoddi4+0x2b2>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f240 8084 	bls.w	8000e62 <__udivmoddi4+0x2b2>
 8000d5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5e:	4473      	add	r3, lr
 8000d60:	1b1b      	subs	r3, r3, r4
 8000d62:	b2ad      	uxth	r5, r5
 8000d64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d68:	fb08 3310 	mls	r3, r8, r0, r3
 8000d6c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d70:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d74:	45a2      	cmp	sl, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1da>
 8000d78:	eb1e 0404 	adds.w	r4, lr, r4
 8000d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d80:	d26b      	bcs.n	8000e5a <__udivmoddi4+0x2aa>
 8000d82:	45a2      	cmp	sl, r4
 8000d84:	d969      	bls.n	8000e5a <__udivmoddi4+0x2aa>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4474      	add	r4, lr
 8000d8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d92:	eba4 040a 	sub.w	r4, r4, sl
 8000d96:	454c      	cmp	r4, r9
 8000d98:	46c2      	mov	sl, r8
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	d354      	bcc.n	8000e48 <__udivmoddi4+0x298>
 8000d9e:	d051      	beq.n	8000e44 <__udivmoddi4+0x294>
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d069      	beq.n	8000e78 <__udivmoddi4+0x2c8>
 8000da4:	ebb1 050a 	subs.w	r5, r1, sl
 8000da8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dac:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000db0:	40fd      	lsrs	r5, r7
 8000db2:	40fc      	lsrs	r4, r7
 8000db4:	ea4c 0505 	orr.w	r5, ip, r5
 8000db8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	e747      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000dc0:	f1c2 0320 	rsb	r3, r2, #32
 8000dc4:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc8:	4095      	lsls	r5, r2
 8000dca:	fa01 f002 	lsl.w	r0, r1, r2
 8000dce:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd6:	4338      	orrs	r0, r7
 8000dd8:	0c01      	lsrs	r1, r0, #16
 8000dda:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dde:	fa1f f885 	uxth.w	r8, r5
 8000de2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dea:	fb07 f308 	mul.w	r3, r7, r8
 8000dee:	428b      	cmp	r3, r1
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x256>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dfc:	d22f      	bcs.n	8000e5e <__udivmoddi4+0x2ae>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d92d      	bls.n	8000e5e <__udivmoddi4+0x2ae>
 8000e02:	3f02      	subs	r7, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	b281      	uxth	r1, r0
 8000e0a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb00 f308 	mul.w	r3, r0, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x27e>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e24:	d217      	bcs.n	8000e56 <__udivmoddi4+0x2a6>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d915      	bls.n	8000e56 <__udivmoddi4+0x2a6>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e34:	e73b      	b.n	8000cae <__udivmoddi4+0xfe>
 8000e36:	4637      	mov	r7, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e709      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000e3c:	4607      	mov	r7, r0
 8000e3e:	e6e7      	b.n	8000c10 <__udivmoddi4+0x60>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x8c>
 8000e44:	4541      	cmp	r1, r8
 8000e46:	d2ab      	bcs.n	8000da0 <__udivmoddi4+0x1f0>
 8000e48:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e4c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e50:	3801      	subs	r0, #1
 8000e52:	4613      	mov	r3, r2
 8000e54:	e7a4      	b.n	8000da0 <__udivmoddi4+0x1f0>
 8000e56:	4660      	mov	r0, ip
 8000e58:	e7e9      	b.n	8000e2e <__udivmoddi4+0x27e>
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	e795      	b.n	8000d8a <__udivmoddi4+0x1da>
 8000e5e:	4667      	mov	r7, ip
 8000e60:	e7d1      	b.n	8000e06 <__udivmoddi4+0x256>
 8000e62:	4681      	mov	r9, r0
 8000e64:	e77c      	b.n	8000d60 <__udivmoddi4+0x1b0>
 8000e66:	3802      	subs	r0, #2
 8000e68:	442c      	add	r4, r5
 8000e6a:	e747      	b.n	8000cfc <__udivmoddi4+0x14c>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	442b      	add	r3, r5
 8000e72:	e72f      	b.n	8000cd4 <__udivmoddi4+0x124>
 8000e74:	4638      	mov	r0, r7
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xda>
 8000e78:	4637      	mov	r7, r6
 8000e7a:	e6e9      	b.n	8000c50 <__udivmoddi4+0xa0>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f001 fab5 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f007 f92e 	bl	8008114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 facd 	bl	8002482 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f001 fa95 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000003c 	.word	0x2000003c
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	20000000 	.word	0x20000000

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000004 	.word	0x20000004
 8000f48:	20000200 	.word	0x20000200

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000200 	.word	0x20000200

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_Delay+0x40>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e033      	b.n	8001026 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f005 f97c 	bl	80062c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d118      	bne.n	8001018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fee:	f023 0302 	bic.w	r3, r3, #2
 8000ff2:	f043 0202 	orr.w	r2, r3, #2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fa5a 	bl	80014b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
 8001016:	e001      	b.n	800101c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_ADC_Start_DMA+0x1e>
 800104a:	2302      	movs	r3, #2
 800104c:	e0cc      	b.n	80011e8 <HAL_ADC_Start_DMA+0x1b8>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	d018      	beq.n	8001096 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001074:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <HAL_ADC_Start_DMA+0x1c0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a5e      	ldr	r2, [pc, #376]	; (80011f4 <HAL_ADC_Start_DMA+0x1c4>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9a      	lsrs	r2, r3, #18
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001088:	e002      	b.n	8001090 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	3b01      	subs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f9      	bne.n	800108a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	f040 80a0 	bne.w	80011e6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e4:	d106      	bne.n	80010f4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f023 0206 	bic.w	r2, r3, #6
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
 80010f2:	e002      	b.n	80010fa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_ADC_Start_DMA+0x1c8>)
 8001104:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110a:	4a3c      	ldr	r2, [pc, #240]	; (80011fc <HAL_ADC_Start_DMA+0x1cc>)
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	4a3b      	ldr	r2, [pc, #236]	; (8001200 <HAL_ADC_Start_DMA+0x1d0>)
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111a:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <HAL_ADC_Start_DMA+0x1d4>)
 800111c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001126:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001136:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001146:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	334c      	adds	r3, #76	; 0x4c
 8001152:	4619      	mov	r1, r3
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f001 fa4e 	bl	80025f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	2b00      	cmp	r3, #0
 8001166:	d12a      	bne.n	80011be <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <HAL_ADC_Start_DMA+0x1d8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d015      	beq.n	800119e <HAL_ADC_Start_DMA+0x16e>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <HAL_ADC_Start_DMA+0x1dc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d105      	bne.n	8001188 <HAL_ADC_Start_DMA+0x158>
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_ADC_Start_DMA+0x1c8>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00a      	beq.n	800119e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a20      	ldr	r2, [pc, #128]	; (8001210 <HAL_ADC_Start_DMA+0x1e0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d129      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x1b6>
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_ADC_Start_DMA+0x1c8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b0f      	cmp	r3, #15
 800119c:	d823      	bhi.n	80011e6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d11c      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	e013      	b.n	80011e6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_ADC_Start_DMA+0x1d8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d10e      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x1b6>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d107      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000003c 	.word	0x2000003c
 80011f4:	431bde83 	.word	0x431bde83
 80011f8:	40012300 	.word	0x40012300
 80011fc:	080016ad 	.word	0x080016ad
 8001200:	08001767 	.word	0x08001767
 8001204:	08001783 	.word	0x08001783
 8001208:	40012000 	.word	0x40012000
 800120c:	40012100 	.word	0x40012100
 8001210:	40012200 	.word	0x40012200

08001214 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1c>
 8001268:	2302      	movs	r3, #2
 800126a:	e113      	b.n	8001494 <HAL_ADC_ConfigChannel+0x244>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b09      	cmp	r3, #9
 800127a:	d925      	bls.n	80012c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68d9      	ldr	r1, [r3, #12]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	3b1e      	subs	r3, #30
 8001292:	2207      	movs	r2, #7
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43da      	mvns	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	400a      	ands	r2, r1
 80012a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68d9      	ldr	r1, [r3, #12]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4403      	add	r3, r0
 80012ba:	3b1e      	subs	r3, #30
 80012bc:	409a      	lsls	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	e022      	b.n	800130e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6919      	ldr	r1, [r3, #16]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	2207      	movs	r2, #7
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	400a      	ands	r2, r1
 80012ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6919      	ldr	r1, [r3, #16]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	4603      	mov	r3, r0
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4403      	add	r3, r0
 8001304:	409a      	lsls	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b06      	cmp	r3, #6
 8001314:	d824      	bhi.n	8001360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	3b05      	subs	r3, #5
 8001328:	221f      	movs	r2, #31
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	400a      	ands	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3b05      	subs	r3, #5
 8001352:	fa00 f203 	lsl.w	r2, r0, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
 800135e:	e04c      	b.n	80013fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d824      	bhi.n	80013b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	3b23      	subs	r3, #35	; 0x23
 800137a:	221f      	movs	r2, #31
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43da      	mvns	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	400a      	ands	r2, r1
 8001388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b23      	subs	r3, #35	; 0x23
 80013a4:	fa00 f203 	lsl.w	r2, r0, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
 80013b0:	e023      	b.n	80013fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b41      	subs	r3, #65	; 0x41
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	400a      	ands	r2, r1
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	3b41      	subs	r3, #65	; 0x41
 80013ee:	fa00 f203 	lsl.w	r2, r0, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_ADC_ConfigChannel+0x250>)
 80013fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_ADC_ConfigChannel+0x254>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d10f      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1d8>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b12      	cmp	r3, #18
 800140e:	d10b      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_ADC_ConfigChannel+0x254>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_ADC_ConfigChannel+0x23a>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <HAL_ADC_ConfigChannel+0x258>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_ADC_ConfigChannel+0x1f4>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b11      	cmp	r3, #17
 8001442:	d122      	bne.n	800148a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_ADC_ConfigChannel+0x258>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d111      	bne.n	800148a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_ADC_ConfigChannel+0x25c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_ADC_ConfigChannel+0x260>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9a      	lsrs	r2, r3, #18
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800147c:	e002      	b.n	8001484 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	3b01      	subs	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f9      	bne.n	800147e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40012300 	.word	0x40012300
 80014a4:	40012000 	.word	0x40012000
 80014a8:	10000012 	.word	0x10000012
 80014ac:	2000003c 	.word	0x2000003c
 80014b0:	431bde83 	.word	0x431bde83

080014b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014bc:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <ADC_Init+0x1f0>)
 80014be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	021a      	lsls	r2, r3, #8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800150c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <ADC_Init+0x1f4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d022      	beq.n	8001592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800155a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800157c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	e00f      	b.n	80015b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0202 	bic.w	r2, r2, #2
 80015c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e1b      	ldrb	r3, [r3, #24]
 80015cc:	005a      	lsls	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01b      	beq.n	8001618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	3b01      	subs	r3, #1
 800160c:	035a      	lsls	r2, r3, #13
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	e007      	b.n	8001628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	3b01      	subs	r3, #1
 8001644:	051a      	lsls	r2, r3, #20
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800165c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800166a:	025a      	lsls	r2, r3, #9
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	029a      	lsls	r2, r3, #10
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40012300 	.word	0x40012300
 80016a8:	0f000001 	.word	0x0f000001

080016ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13c      	bne.n	8001740 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d12b      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d127      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001700:	2b00      	cmp	r3, #0
 8001702:	d119      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0220 	bic.w	r2, r2, #32
 8001712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fd6b 	bl	8001214 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800173e:	e00e      	b.n	800175e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fd75 	bl	800123c <HAL_ADC_ErrorCallback>
}
 8001752:	e004      	b.n	800175e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fd57 	bl	8001228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f043 0204 	orr.w	r2, r3, #4
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff fd4a 	bl	800123c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0ed      	b.n	800199e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f005 f92a 	bl	8006a28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0202 	bic.w	r2, r2, #2
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e4:	f7ff fbb2 	bl	8000f4c <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ea:	e012      	b.n	8001812 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ec:	f7ff fbae 	bl	8000f4c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b0a      	cmp	r3, #10
 80017f8:	d90b      	bls.n	8001812 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2205      	movs	r2, #5
 800180a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0c5      	b.n	800199e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e5      	bne.n	80017ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001830:	f7ff fb8c 	bl	8000f4c <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001836:	e012      	b.n	800185e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001838:	f7ff fb88 	bl	8000f4c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d90b      	bls.n	800185e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2205      	movs	r2, #5
 8001856:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e09f      	b.n	800199e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0e5      	beq.n	8001838 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7e1b      	ldrb	r3, [r3, #24]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d108      	bne.n	8001886 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e007      	b.n	8001896 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e5b      	ldrb	r3, [r3, #25]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e007      	b.n	80018c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7e9b      	ldrb	r3, [r3, #26]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0220 	orr.w	r2, r2, #32
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e007      	b.n	80018ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0220 	bic.w	r2, r2, #32
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7edb      	ldrb	r3, [r3, #27]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0210 	bic.w	r2, r2, #16
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e007      	b.n	8001914 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0210 	orr.w	r2, r2, #16
 8001912:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7f1b      	ldrb	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0208 	orr.w	r2, r2, #8
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0208 	bic.w	r2, r2, #8
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7f5b      	ldrb	r3, [r3, #29]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0204 	orr.w	r2, r2, #4
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0204 	bic.w	r2, r2, #4
 8001966:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	ea42 0103 	orr.w	r1, r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_ConfigFilter+0x26>
 80019c6:	7cfb      	ldrb	r3, [r7, #19]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 80be 	bne.w	8001b4a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019ce:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_CAN_ConfigFilter+0x1bc>)
 80019d0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	2201      	movs	r2, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	401a      	ands	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d123      	bne.n	8001a78 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a52:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3248      	adds	r2, #72	; 0x48
 8001a58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a6c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a6e:	6979      	ldr	r1, [r7, #20]
 8001a70:	3348      	adds	r3, #72	; 0x48
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d122      	bne.n	8001ac6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001aa0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3248      	adds	r2, #72	; 0x48
 8001aa6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	3348      	adds	r3, #72	; 0x48
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ae0:	e007      	b.n	8001af2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	401a      	ands	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b0c:	e007      	b.n	8001b1e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b3c:	f023 0201 	bic.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e006      	b.n	8001b58 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40006400 	.word	0x40006400

08001b68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d12e      	bne.n	8001bda <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff f9da 	bl	8000f4c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b9a:	e012      	b.n	8001bc2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b9c:	f7ff f9d6 	bl	8000f4c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d90b      	bls.n	8001bc2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e012      	b.n	8001be8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e5      	bne.n	8001b9c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d003      	beq.n	8001c14 <HAL_CAN_GetRxMessage+0x24>
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 80f4 	bne.w	8001dfc <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10e      	bne.n	8001c38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d116      	bne.n	8001c56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0e8      	b.n	8001e0a <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d107      	bne.n	8001c56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0d9      	b.n	8001e0a <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	331b      	adds	r3, #27
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0204 	and.w	r2, r3, #4
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10c      	bne.n	8001c8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	331b      	adds	r3, #27
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	4413      	add	r3, r2
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0d5b      	lsrs	r3, r3, #21
 8001c84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	331b      	adds	r3, #27
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	331b      	adds	r3, #27
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	331b      	adds	r3, #27
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	331b      	adds	r3, #27
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	331b      	adds	r3, #27
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0c1b      	lsrs	r3, r3, #16
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0a1a      	lsrs	r2, r3, #8
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0c1a      	lsrs	r2, r3, #16
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e1a      	lsrs	r2, r3, #24
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3303      	adds	r3, #3
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0a1a      	lsrs	r2, r3, #8
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3305      	adds	r3, #5
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0c1a      	lsrs	r2, r3, #16
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3306      	adds	r3, #6
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0e1a      	lsrs	r2, r3, #24
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	3307      	adds	r3, #7
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0220 	orr.w	r2, r2, #32
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	e007      	b.n	8001df8 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e006      	b.n	8001e0a <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e26:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d002      	beq.n	8001e34 <HAL_CAN_ActivateNotification+0x1e>
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d109      	bne.n	8001e48 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6959      	ldr	r1, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e006      	b.n	8001e56 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	; 0x28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d07c      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d023      	beq.n	8001efa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f004 fe47 	bl	8006b58 <HAL_CAN_TxMailbox0CompleteCallback>
 8001eca:	e016      	b.n	8001efa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	e00c      	b.n	8001efa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e002      	b.n	8001efa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f965 	bl	80021c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d024      	beq.n	8001f4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f004 fe2d 	bl	8006b78 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f1e:	e016      	b.n	8001f4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	e00c      	b.n	8001f4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e002      	b.n	8001f4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f945 	bl	80021d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d024      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f004 fe13 	bl	8006b98 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f72:	e016      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e00c      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e002      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f925 	bl	80021ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00c      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2208      	movs	r2, #8
 8001fe0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f90c 	bl	8002200 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f004 fdd9 	bl	8006bb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00c      	beq.n	800202a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002020:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2210      	movs	r2, #16
 8002028:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2208      	movs	r2, #8
 8002044:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8ee 	bl	8002228 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8d5 	bl	8002214 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2210      	movs	r2, #16
 8002084:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8d8 	bl	800223c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2208      	movs	r2, #8
 80020a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8d1 	bl	8002250 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d075      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06c      	beq.n	800219c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03d      	beq.n	800219c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d038      	beq.n	800219c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002130:	2b30      	cmp	r3, #48	; 0x30
 8002132:	d017      	beq.n	8002164 <HAL_CAN_IRQHandler+0x302>
 8002134:	2b30      	cmp	r3, #48	; 0x30
 8002136:	d804      	bhi.n	8002142 <HAL_CAN_IRQHandler+0x2e0>
 8002138:	2b10      	cmp	r3, #16
 800213a:	d009      	beq.n	8002150 <HAL_CAN_IRQHandler+0x2ee>
 800213c:	2b20      	cmp	r3, #32
 800213e:	d00c      	beq.n	800215a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002140:	e024      	b.n	800218c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002142:	2b50      	cmp	r3, #80	; 0x50
 8002144:	d018      	beq.n	8002178 <HAL_CAN_IRQHandler+0x316>
 8002146:	2b60      	cmp	r3, #96	; 0x60
 8002148:	d01b      	beq.n	8002182 <HAL_CAN_IRQHandler+0x320>
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d00f      	beq.n	800216e <HAL_CAN_IRQHandler+0x30c>
            break;
 800214e:	e01d      	b.n	800218c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	f043 0308 	orr.w	r3, r3, #8
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002158:	e018      	b.n	800218c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002162:	e013      	b.n	800218c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800216c:	e00e      	b.n	800218c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002176:	e009      	b.n	800218c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002180:	e004      	b.n	800218c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800218a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800219a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2204      	movs	r2, #4
 80021a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f854 	bl	8002264 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff29 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff3e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff31 	bl	80022dc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7fe fd50 	bl	8000f4c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e099      	b.n	80025ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d8:	e00f      	b.n	80024fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024da:	f7fe fd37 	bl	8000f4c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d908      	bls.n	80024fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e078      	b.n	80025ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e8      	bne.n	80024da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_DMA_Init+0x158>)
 8002514:	4013      	ands	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4313      	orrs	r3, r2
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2b04      	cmp	r3, #4
 800258c:	d117      	bne.n	80025be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fa99 	bl	8002ad8 <DMA_CheckFifoParam>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ba:	2301      	movs	r3, #1
 80025bc:	e016      	b.n	80025ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa50 	bl	8002a6c <DMA_CalcBaseAndBitshift>
 80025cc:	4603      	mov	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	223f      	movs	r2, #63	; 0x3f
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	f010803f 	.word	0xf010803f

080025f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_DMA_Start_IT+0x26>
 800261a:	2302      	movs	r3, #2
 800261c:	e048      	b.n	80026b0 <HAL_DMA_Start_IT+0xb8>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d137      	bne.n	80026a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f9e2 	bl	8002a10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	223f      	movs	r2, #63	; 0x3f
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0216 	orr.w	r2, r2, #22
 8002666:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002676:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0208 	orr.w	r2, r2, #8
 800268e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e005      	b.n	80026ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d004      	beq.n	80026d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00c      	b.n	80026f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2205      	movs	r2, #5
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002708:	4b92      	ldr	r3, [pc, #584]	; (8002954 <HAL_DMA_IRQHandler+0x258>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a92      	ldr	r2, [pc, #584]	; (8002958 <HAL_DMA_IRQHandler+0x25c>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a9b      	lsrs	r3, r3, #10
 8002714:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	2208      	movs	r2, #8
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01a      	beq.n	8002768 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0204 	bic.w	r2, r2, #4
 800274e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	2208      	movs	r2, #8
 8002756:	409a      	lsls	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2201      	movs	r2, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d012      	beq.n	800279e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	2201      	movs	r2, #1
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2204      	movs	r2, #4
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	2204      	movs	r2, #4
 80027c2:	409a      	lsls	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	f043 0204 	orr.w	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	2210      	movs	r2, #16
 80027da:	409a      	lsls	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d043      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d03c      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	2210      	movs	r2, #16
 80027f8:	409a      	lsls	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d018      	beq.n	800283e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d024      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
 800282a:	e01f      	b.n	800286c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01b      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e016      	b.n	800286c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0208 	bic.w	r2, r2, #8
 800285a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2220      	movs	r2, #32
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 808e 	beq.w	800299a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8086 	beq.w	800299a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	2220      	movs	r2, #32
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d136      	bne.n	8002914 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0216 	bic.w	r2, r2, #22
 80028b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <HAL_DMA_IRQHandler+0x1da>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0208 	bic.w	r2, r2, #8
 80028e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	223f      	movs	r2, #63	; 0x3f
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	d07d      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
        }
        return;
 8002912:	e078      	b.n	8002a06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01c      	beq.n	800295c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	2b00      	cmp	r3, #0
 8002936:	d030      	beq.n	800299a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
 8002940:	e02b      	b.n	800299a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d027      	beq.n	800299a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
 8002952:	e022      	b.n	800299a <HAL_DMA_IRQHandler+0x29e>
 8002954:	2000003c 	.word	0x2000003c
 8002958:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10f      	bne.n	800298a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0210 	bic.w	r2, r2, #16
 8002978:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d032      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d022      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2205      	movs	r2, #5
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d307      	bcc.n	80029e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f2      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x2ca>
 80029e0:	e000      	b.n	80029e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e000      	b.n	8002a08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a06:	bf00      	nop
    }
  }
}
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop

08002a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d108      	bne.n	8002a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a4e:	e007      	b.n	8002a60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3b10      	subs	r3, #16
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d909      	bls.n	8002aae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	1d1a      	adds	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58
 8002aac:	e007      	b.n	8002abe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	aaaaaaab 	.word	0xaaaaaaab
 8002ad4:	08009658 	.word	0x08009658

08002ad8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11f      	bne.n	8002b32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d855      	bhi.n	8002ba4 <DMA_CheckFifoParam+0xcc>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <DMA_CheckFifoParam+0x28>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b23 	.word	0x08002b23
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002ba5 	.word	0x08002ba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d045      	beq.n	8002ba8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e042      	b.n	8002ba8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b2a:	d13f      	bne.n	8002bac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e03c      	b.n	8002bac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	d121      	bne.n	8002b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d836      	bhi.n	8002bb0 <DMA_CheckFifoParam+0xd8>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <DMA_CheckFifoParam+0x70>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b5f 	.word	0x08002b5f
 8002b50:	08002b59 	.word	0x08002b59
 8002b54:	08002b71 	.word	0x08002b71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e02f      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d024      	beq.n	8002bb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6e:	e021      	b.n	8002bb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b78:	d11e      	bne.n	8002bb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7e:	e01b      	b.n	8002bb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d902      	bls.n	8002b8c <DMA_CheckFifoParam+0xb4>
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d003      	beq.n	8002b92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b8a:	e018      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e015      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba2:	e00b      	b.n	8002bbc <DMA_CheckFifoParam+0xe4>
      break;
 8002ba4:	bf00      	nop
 8002ba6:	e00a      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ba8:	bf00      	nop
 8002baa:	e008      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bac:	bf00      	nop
 8002bae:	e006      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bb0:	bf00      	nop
 8002bb2:	e004      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bb4:	bf00      	nop
 8002bb6:	e002      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;   
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bbc:	bf00      	nop
    }
  } 
  
  return status; 
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	e165      	b.n	8002eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 8154 	bne.w	8002eae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x4a>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d123      	bne.n	8002c5e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	69b9      	ldr	r1, [r7, #24]
 8002c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d00b      	beq.n	8002cb2 <HAL_GPIO_Init+0xe6>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d007      	beq.n	8002cb2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ca6:	2b11      	cmp	r3, #17
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b12      	cmp	r3, #18
 8002cb0:	d130      	bne.n	8002d14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 0201 	and.w	r2, r3, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80ae 	beq.w	8002eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a5b      	ldr	r2, [pc, #364]	; (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6e:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_GPIO_Init+0x300>)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4e      	ldr	r2, [pc, #312]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d025      	beq.n	8002de6 <HAL_GPIO_Init+0x21a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4d      	ldr	r2, [pc, #308]	; (8002ed4 <HAL_GPIO_Init+0x308>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <HAL_GPIO_Init+0x216>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4c      	ldr	r2, [pc, #304]	; (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x212>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_GPIO_Init+0x310>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x20e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <HAL_GPIO_Init+0x314>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x20a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <HAL_GPIO_Init+0x318>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x206>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a48      	ldr	r2, [pc, #288]	; (8002ee8 <HAL_GPIO_Init+0x31c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x202>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x21c>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x21c>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x21c>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x21c>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x21c>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x21c>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x21c>
 8002de6:	2300      	movs	r3, #0
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df8:	4934      	ldr	r1, [pc, #208]	; (8002ecc <HAL_GPIO_Init+0x300>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e2a:	4a30      	ldr	r2, [pc, #192]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e30:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e54:	4a25      	ldr	r2, [pc, #148]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea8:	4a10      	ldr	r2, [pc, #64]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	f67f ae96 	bls.w	8002be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3724      	adds	r7, #36	; 0x24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021400 	.word	0x40021400
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f0c:	e003      	b.n	8002f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	041a      	lsls	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	401a      	ands	r2, r3
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d104      	bne.n	8002f46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	041a      	lsls	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	619a      	str	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0ca      	b.n	8003102 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_ClockConfig+0x1b4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d90c      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <HAL_RCC_ClockConfig+0x1b4>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b62      	ldr	r3, [pc, #392]	; (800310c <HAL_RCC_ClockConfig+0x1b4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b6      	b.n	8003102 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b52      	ldr	r3, [pc, #328]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494c      	ldr	r1, [pc, #304]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d044      	beq.n	8003078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d119      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07d      	b.n	8003102 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d003      	beq.n	8003016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003012:	2b03      	cmp	r3, #3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06d      	b.n	8003102 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e065      	b.n	8003102 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b36      	ldr	r3, [pc, #216]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4933      	ldr	r1, [pc, #204]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003048:	f7fd ff80 	bl	8000f4c <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fd ff7c 	bl	8000f4c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e04d      	b.n	8003102 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d20c      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_RCC_ClockConfig+0x1b4>)
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_RCC_ClockConfig+0x1b4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e030      	b.n	8003102 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4915      	ldr	r1, [pc, #84]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490d      	ldr	r1, [pc, #52]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030de:	f000 f851 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 80030e2:	4601      	mov	r1, r0
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	fa21 f303 	lsr.w	r3, r1, r3
 80030f6:	4a08      	ldr	r2, [pc, #32]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7fd fee2 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023c00 	.word	0x40023c00
 8003110:	40023800 	.word	0x40023800
 8003114:	0801cf18 	.word	0x0801cf18
 8003118:	2000003c 	.word	0x2000003c

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	2000003c 	.word	0x2000003c

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4601      	mov	r1, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4a03      	ldr	r2, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5cd3      	ldrb	r3, [r2, r3]
 800314c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	0801cf28 	.word	0x0801cf28

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffdc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003164:	4601      	mov	r1, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4a03      	ldr	r2, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	0801cf28 	.word	0x0801cf28

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800319e:	4bc6      	ldr	r3, [pc, #792]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	f200 817e 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x324>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	080034a9 	.word	0x080034a9
 80031bc:	080034a9 	.word	0x080034a9
 80031c0:	080034a9 	.word	0x080034a9
 80031c4:	080031ef 	.word	0x080031ef
 80031c8:	080034a9 	.word	0x080034a9
 80031cc:	080034a9 	.word	0x080034a9
 80031d0:	080034a9 	.word	0x080034a9
 80031d4:	080031f5 	.word	0x080031f5
 80031d8:	080034a9 	.word	0x080034a9
 80031dc:	080034a9 	.word	0x080034a9
 80031e0:	080034a9 	.word	0x080034a9
 80031e4:	08003351 	.word	0x08003351
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4bb4      	ldr	r3, [pc, #720]	; (80034bc <HAL_RCC_GetSysClockFreq+0x338>)
 80031ea:	613b      	str	r3, [r7, #16]
       break;
 80031ec:	e15f      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4bb4      	ldr	r3, [pc, #720]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80031f0:	613b      	str	r3, [r7, #16]
      break;
 80031f2:	e15c      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4bb0      	ldr	r3, [pc, #704]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4bae      	ldr	r3, [pc, #696]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d04a      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4bab      	ldr	r3, [pc, #684]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	f04f 0400 	mov.w	r4, #0
 8003214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	ea03 0501 	and.w	r5, r3, r1
 8003220:	ea04 0602 	and.w	r6, r4, r2
 8003224:	4629      	mov	r1, r5
 8003226:	4632      	mov	r2, r6
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	0154      	lsls	r4, r2, #5
 8003232:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003236:	014b      	lsls	r3, r1, #5
 8003238:	4619      	mov	r1, r3
 800323a:	4622      	mov	r2, r4
 800323c:	1b49      	subs	r1, r1, r5
 800323e:	eb62 0206 	sbc.w	r2, r2, r6
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	f04f 0400 	mov.w	r4, #0
 800324a:	0194      	lsls	r4, r2, #6
 800324c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003250:	018b      	lsls	r3, r1, #6
 8003252:	1a5b      	subs	r3, r3, r1
 8003254:	eb64 0402 	sbc.w	r4, r4, r2
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	00e2      	lsls	r2, r4, #3
 8003262:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003266:	00d9      	lsls	r1, r3, #3
 8003268:	460b      	mov	r3, r1
 800326a:	4614      	mov	r4, r2
 800326c:	195b      	adds	r3, r3, r5
 800326e:	eb44 0406 	adc.w	r4, r4, r6
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	0262      	lsls	r2, r4, #9
 800327c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003280:	0259      	lsls	r1, r3, #9
 8003282:	460b      	mov	r3, r1
 8003284:	4614      	mov	r4, r2
 8003286:	4618      	mov	r0, r3
 8003288:	4621      	mov	r1, r4
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	461a      	mov	r2, r3
 8003292:	4623      	mov	r3, r4
 8003294:	f7fd fc74 	bl	8000b80 <__aeabi_uldivmod>
 8003298:	4603      	mov	r3, r0
 800329a:	460c      	mov	r4, r1
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e049      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a0:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	f04f 0400 	mov.w	r4, #0
 80032aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	ea03 0501 	and.w	r5, r3, r1
 80032b6:	ea04 0602 	and.w	r6, r4, r2
 80032ba:	4629      	mov	r1, r5
 80032bc:	4632      	mov	r2, r6
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	0154      	lsls	r4, r2, #5
 80032c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032cc:	014b      	lsls	r3, r1, #5
 80032ce:	4619      	mov	r1, r3
 80032d0:	4622      	mov	r2, r4
 80032d2:	1b49      	subs	r1, r1, r5
 80032d4:	eb62 0206 	sbc.w	r2, r2, r6
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f04f 0400 	mov.w	r4, #0
 80032e0:	0194      	lsls	r4, r2, #6
 80032e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032e6:	018b      	lsls	r3, r1, #6
 80032e8:	1a5b      	subs	r3, r3, r1
 80032ea:	eb64 0402 	sbc.w	r4, r4, r2
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	00e2      	lsls	r2, r4, #3
 80032f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032fc:	00d9      	lsls	r1, r3, #3
 80032fe:	460b      	mov	r3, r1
 8003300:	4614      	mov	r4, r2
 8003302:	195b      	adds	r3, r3, r5
 8003304:	eb44 0406 	adc.w	r4, r4, r6
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	02a2      	lsls	r2, r4, #10
 8003312:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003316:	0299      	lsls	r1, r3, #10
 8003318:	460b      	mov	r3, r1
 800331a:	4614      	mov	r4, r2
 800331c:	4618      	mov	r0, r3
 800331e:	4621      	mov	r1, r4
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f04f 0400 	mov.w	r4, #0
 8003326:	461a      	mov	r2, r3
 8003328:	4623      	mov	r3, r4
 800332a:	f7fd fc29 	bl	8000b80 <__aeabi_uldivmod>
 800332e:	4603      	mov	r3, r0
 8003330:	460c      	mov	r4, r1
 8003332:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003334:	4b60      	ldr	r3, [pc, #384]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	3301      	adds	r3, #1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	613b      	str	r3, [r7, #16]
      break;
 800334e:	e0ae      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003350:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003358:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d04a      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003366:	4b54      	ldr	r3, [pc, #336]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	f04f 0400 	mov.w	r4, #0
 8003370:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	ea03 0501 	and.w	r5, r3, r1
 800337c:	ea04 0602 	and.w	r6, r4, r2
 8003380:	4629      	mov	r1, r5
 8003382:	4632      	mov	r2, r6
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	f04f 0400 	mov.w	r4, #0
 800338c:	0154      	lsls	r4, r2, #5
 800338e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003392:	014b      	lsls	r3, r1, #5
 8003394:	4619      	mov	r1, r3
 8003396:	4622      	mov	r2, r4
 8003398:	1b49      	subs	r1, r1, r5
 800339a:	eb62 0206 	sbc.w	r2, r2, r6
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	f04f 0400 	mov.w	r4, #0
 80033a6:	0194      	lsls	r4, r2, #6
 80033a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033ac:	018b      	lsls	r3, r1, #6
 80033ae:	1a5b      	subs	r3, r3, r1
 80033b0:	eb64 0402 	sbc.w	r4, r4, r2
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	00e2      	lsls	r2, r4, #3
 80033be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033c2:	00d9      	lsls	r1, r3, #3
 80033c4:	460b      	mov	r3, r1
 80033c6:	4614      	mov	r4, r2
 80033c8:	195b      	adds	r3, r3, r5
 80033ca:	eb44 0406 	adc.w	r4, r4, r6
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	0262      	lsls	r2, r4, #9
 80033d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033dc:	0259      	lsls	r1, r3, #9
 80033de:	460b      	mov	r3, r1
 80033e0:	4614      	mov	r4, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	4621      	mov	r1, r4
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	461a      	mov	r2, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	f7fd fbc6 	bl	8000b80 <__aeabi_uldivmod>
 80033f4:	4603      	mov	r3, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e049      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	f04f 0400 	mov.w	r4, #0
 8003406:	f240 11ff 	movw	r1, #511	; 0x1ff
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	ea03 0501 	and.w	r5, r3, r1
 8003412:	ea04 0602 	and.w	r6, r4, r2
 8003416:	4629      	mov	r1, r5
 8003418:	4632      	mov	r2, r6
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	f04f 0400 	mov.w	r4, #0
 8003422:	0154      	lsls	r4, r2, #5
 8003424:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003428:	014b      	lsls	r3, r1, #5
 800342a:	4619      	mov	r1, r3
 800342c:	4622      	mov	r2, r4
 800342e:	1b49      	subs	r1, r1, r5
 8003430:	eb62 0206 	sbc.w	r2, r2, r6
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	0194      	lsls	r4, r2, #6
 800343e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003442:	018b      	lsls	r3, r1, #6
 8003444:	1a5b      	subs	r3, r3, r1
 8003446:	eb64 0402 	sbc.w	r4, r4, r2
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	00e2      	lsls	r2, r4, #3
 8003454:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003458:	00d9      	lsls	r1, r3, #3
 800345a:	460b      	mov	r3, r1
 800345c:	4614      	mov	r4, r2
 800345e:	195b      	adds	r3, r3, r5
 8003460:	eb44 0406 	adc.w	r4, r4, r6
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	02a2      	lsls	r2, r4, #10
 800346e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003472:	0299      	lsls	r1, r3, #10
 8003474:	460b      	mov	r3, r1
 8003476:	4614      	mov	r4, r2
 8003478:	4618      	mov	r0, r3
 800347a:	4621      	mov	r1, r4
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f04f 0400 	mov.w	r4, #0
 8003482:	461a      	mov	r2, r3
 8003484:	4623      	mov	r3, r4
 8003486:	f7fd fb7b 	bl	8000b80 <__aeabi_uldivmod>
 800348a:	4603      	mov	r3, r0
 800348c:	460c      	mov	r4, r1
 800348e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0f1b      	lsrs	r3, r3, #28
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	613b      	str	r3, [r7, #16]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <HAL_RCC_GetSysClockFreq+0x338>)
 80034aa:	613b      	str	r3, [r7, #16]
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	693b      	ldr	r3, [r7, #16]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	007a1200 	.word	0x007a1200

080034c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8083 	beq.w	80035e4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034de:	4b95      	ldr	r3, [pc, #596]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d019      	beq.n	800351e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ea:	4b92      	ldr	r3, [pc, #584]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034f6:	4b8f      	ldr	r3, [pc, #572]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003502:	d00c      	beq.n	800351e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003504:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d112      	bne.n	8003536 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003510:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351c:	d10b      	bne.n	8003536 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d05b      	beq.n	80035e2 <HAL_RCC_OscConfig+0x11e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d157      	bne.n	80035e2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e216      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x8a>
 8003540:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7b      	ldr	r2, [pc, #492]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	e01d      	b.n	800358a <HAL_RCC_OscConfig+0xc6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003556:	d10c      	bne.n	8003572 <HAL_RCC_OscConfig+0xae>
 8003558:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800355e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a72      	ldr	r2, [pc, #456]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e00b      	b.n	800358a <HAL_RCC_OscConfig+0xc6>
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d013      	beq.n	80035ba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fd fcdb 	bl	8000f4c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359a:	f7fd fcd7 	bl	8000f4c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b64      	cmp	r3, #100	; 0x64
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1db      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0xd6>
 80035b8:	e014      	b.n	80035e4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fd fcc7 	bl	8000f4c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c2:	f7fd fcc3 	bl	8000f4c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1c7      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0xfe>
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d06f      	beq.n	80036d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d017      	beq.n	800362c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003604:	2b08      	cmp	r3, #8
 8003606:	d105      	bne.n	8003614 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003614:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d11c      	bne.n	800365a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003620:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362c:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_OscConfig+0x180>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e18f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4938      	ldr	r1, [pc, #224]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003658:	e03a      	b.n	80036d0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d020      	beq.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003662:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fc70 	bl	8000f4c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003670:	f7fd fc6c 	bl	8000f4c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e170      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
 80036a2:	e015      	b.n	80036d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x274>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fd fc4f 	bl	8000f4c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fd fc4b 	bl	8000f4c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e14f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d037      	beq.n	800374c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x278>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd fc2f 	bl	8000f4c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fd fc2b 	bl	8000f4c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e12f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x270>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x22e>
 8003710:	e01c      	b.n	800374c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCC_OscConfig+0x278>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd fc18 	bl	8000f4c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371e:	e00f      	b.n	8003740 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7fd fc14 	bl	8000f4c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d908      	bls.n	8003740 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e118      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b8a      	ldr	r3, [pc, #552]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e9      	bne.n	8003720 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b7f      	ldr	r3, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a7e      	ldr	r2, [pc, #504]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b79      	ldr	r3, [pc, #484]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a75      	ldr	r2, [pc, #468]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fd fbd3 	bl	8000f4c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fd fbcf 	bl	8000f4c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0d3      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x31a>
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x354>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x33c>
 80037e6:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a60      	ldr	r2, [pc, #384]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b5e      	ldr	r3, [pc, #376]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5d      	ldr	r2, [pc, #372]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x354>
 8003800:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a59      	ldr	r2, [pc, #356]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b57      	ldr	r3, [pc, #348]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd fb94 	bl	8000f4c <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fd fb90 	bl	8000f4c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e092      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b4b      	ldr	r3, [pc, #300]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x364>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd fb7e 	bl	8000f4c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fd fb7a 	bl	8000f4c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e07c      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a3a      	ldr	r2, [pc, #232]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d068      	beq.n	8003962 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003890:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d060      	beq.n	800395e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d145      	bne.n	8003930 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a4:	4b33      	ldr	r3, [pc, #204]	; (8003974 <HAL_RCC_OscConfig+0x4b0>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fd fb4f 	bl	8000f4c <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fd fb4b 	bl	8000f4c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e04f      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c4:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	019b      	lsls	r3, r3, #6
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	071b      	lsls	r3, r3, #28
 80038fc:	491b      	ldr	r1, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_RCC_OscConfig+0x4b0>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd fb20 	bl	8000f4c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fb1c 	bl	8000f4c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e020      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x44c>
 800392e:	e018      	b.n	8003962 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCC_OscConfig+0x4b0>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fd fb09 	bl	8000f4c <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393e:	f7fd fb05 	bl	8000f4c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e009      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_OscConfig+0x4a8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x47a>
 800395c:	e001      	b.n	8003962 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	40007000 	.word	0x40007000
 8003974:	42470060 	.word	0x42470060

08003978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e056      	b.n	8003a38 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f004 f945 	bl	8007c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	ea42 0103 	orr.w	r1, r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f003 0104 	and.w	r1, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_SPI_TransmitReceive_IT+0x20>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e075      	b.n	8003b4c <HAL_SPI_TransmitReceive_IT+0x10c>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a6e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a76:	7dbb      	ldrb	r3, [r7, #22]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d00d      	beq.n	8003a98 <HAL_SPI_TransmitReceive_IT+0x58>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a82:	d106      	bne.n	8003a92 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <HAL_SPI_TransmitReceive_IT+0x52>
 8003a8c:	7dbb      	ldrb	r3, [r7, #22]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
 8003a94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a96:	e054      	b.n	8003b42 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_SPI_TransmitReceive_IT+0x6a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_SPI_TransmitReceive_IT+0x6a>
 8003aa4:	887b      	ldrh	r3, [r7, #2]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003aae:	e048      	b.n	8003b42 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d003      	beq.n	8003ac4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2205      	movs	r2, #5
 8003ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	887a      	ldrh	r2, [r7, #2]
 8003ada:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	887a      	ldrh	r2, [r7, #2]
 8003ae6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
 8003b02:	e005      	b.n	8003b10 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <HAL_SPI_TransmitReceive_IT+0x124>)
 8003b0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003b1e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d008      	beq.n	8003b40 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e000      	b.n	8003b42 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003b40:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	08003e91 	.word	0x08003e91
 8003b5c:	08003ef1 	.word	0x08003ef1
 8003b60:	08003dcd 	.word	0x08003dcd
 8003b64:	08003e31 	.word	0x08003e31

08003b68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10f      	bne.n	8003bac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
    return;
 8003baa:	e0d8      	b.n	8003d5e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_SPI_IRQHandler+0x66>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	09db      	lsrs	r3, r3, #7
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
    return;
 8003bcc:	e0c7      	b.n	8003d5e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_SPI_IRQHandler+0x8c>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_SPI_IRQHandler+0x8c>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80b5 	beq.w	8003d5e <HAL_SPI_IRQHandler+0x1f6>
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80ae 	beq.w	8003d5e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d023      	beq.n	8003c56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d011      	beq.n	8003c3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e00b      	b.n	8003c56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]
        return;
 8003c54:	e083      	b.n	8003d5e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00c      	beq.n	8003cb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f043 0208 	orr.w	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d050      	beq.n	8003d5c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <HAL_SPI_IRQHandler+0x17e>
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d034      	beq.n	8003d50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0203 	bic.w	r2, r2, #3
 8003cf4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d011      	beq.n	8003d22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_SPI_IRQHandler+0x1fc>)
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fcd4 	bl	80026b8 <HAL_DMA_Abort_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <HAL_SPI_IRQHandler+0x1fc>)
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fcbe 	bl	80026b8 <HAL_DMA_Abort_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d4e:	e003      	b.n	8003d58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f81d 	bl	8003d90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d56:	e000      	b.n	8003d5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d58:	bf00      	nop
    return;
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
  }
}
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	08003da5 	.word	0x08003da5

08003d68 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff ffe6 	bl	8003d90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f103 020c 	add.w	r2, r3, #12
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10f      	bne.n	8003e28 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f940 	bl	80040a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	7812      	ldrb	r2, [r2, #0]
 8003e44:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10f      	bne.n	8003e88 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e76:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f910 	bl	80040a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	b292      	uxth	r2, r2
 8003ea4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10f      	bne.n	8003ee8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8e0 	bl	80040a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f34:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f8b1 	bl	80040a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5e:	e04c      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d048      	beq.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f68:	f7fc fff0 	bl	8000f4c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d902      	bls.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d13d      	bne.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f96:	d111      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	d004      	beq.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d107      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc4:	d10f      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e00f      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d1a3      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <SPI_EndRxTxTransaction+0x7c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <SPI_EndRxTxTransaction+0x80>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0d5b      	lsrs	r3, r3, #21
 800403c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404e:	d112      	bne.n	8004076 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff ff77 	bl	8003f4e <SPI_WaitFlagStateUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3b01      	subs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d0f2      	beq.n	8004076 <SPI_EndRxTxTransaction+0x52>
 8004090:	e000      	b.n	8004094 <SPI_EndRxTxTransaction+0x70>
        break;
 8004092:	bf00      	nop
  }

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	2000003c 	.word	0x2000003c
 80040a4:	165e9f81 	.word	0x165e9f81

080040a8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <SPI_CloseRxTx_ISR+0xe0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a35      	ldr	r2, [pc, #212]	; (800418c <SPI_CloseRxTx_ISR+0xe4>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0a5b      	lsrs	r3, r3, #9
 80040bc:	2264      	movs	r2, #100	; 0x64
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040c4:	f7fc ff42 	bl	8000f4c <HAL_GetTick>
 80040c8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0220 	bic.w	r2, r2, #32
 80040d8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ec:	e009      	b.n	8004102 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0eb      	beq.n	80040da <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	2164      	movs	r1, #100	; 0x64
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff8c 	bl	8004024 <SPI_EndRxTxTransaction>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	2b00      	cmp	r3, #0
 8004142:	d115      	bne.n	8004170 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b04      	cmp	r3, #4
 800414e:	d107      	bne.n	8004160 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fe05 	bl	8003d68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800415e:	e00e      	b.n	800417e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fe07 	bl	8003d7c <HAL_SPI_TxRxCpltCallback>
}
 800416e:	e006      	b.n	800417e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fe09 	bl	8003d90 <HAL_SPI_ErrorCallback>
}
 800417e:	bf00      	nop
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	2000003c 	.word	0x2000003c
 800418c:	057619f1 	.word	0x057619f1

08004190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e01d      	b.n	80041de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f004 f9be 	bl	8008538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 fb70 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e01d      	b.n	8004234 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f815 	bl	800423c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f000 fb45 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d841      	bhi.n	80042e4 <HAL_TIM_PWM_Start_IT+0x94>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <HAL_TIM_PWM_Start_IT+0x18>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	0800429d 	.word	0x0800429d
 800426c:	080042e5 	.word	0x080042e5
 8004270:	080042e5 	.word	0x080042e5
 8004274:	080042e5 	.word	0x080042e5
 8004278:	080042af 	.word	0x080042af
 800427c:	080042e5 	.word	0x080042e5
 8004280:	080042e5 	.word	0x080042e5
 8004284:	080042e5 	.word	0x080042e5
 8004288:	080042c1 	.word	0x080042c1
 800428c:	080042e5 	.word	0x080042e5
 8004290:	080042e5 	.word	0x080042e5
 8004294:	080042e5 	.word	0x080042e5
 8004298:	080042d3 	.word	0x080042d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0202 	orr.w	r2, r2, #2
 80042aa:	60da      	str	r2, [r3, #12]
      break;
 80042ac:	e01b      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0204 	orr.w	r2, r2, #4
 80042bc:	60da      	str	r2, [r3, #12]
      break;
 80042be:	e012      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0208 	orr.w	r2, r2, #8
 80042ce:	60da      	str	r2, [r3, #12]
      break;
 80042d0:	e009      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0210 	orr.w	r2, r2, #16
 80042e0:	60da      	str	r2, [r3, #12]
      break;
 80042e2:	e000      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80042e4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2201      	movs	r2, #1
 80042ec:	6839      	ldr	r1, [r7, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fdca 	bl	8004e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a15      	ldr	r2, [pc, #84]	; (8004350 <HAL_TIM_PWM_Start_IT+0x100>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_TIM_PWM_Start_IT+0xb8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a14      	ldr	r2, [pc, #80]	; (8004354 <HAL_TIM_PWM_Start_IT+0x104>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_TIM_PWM_Start_IT+0xbc>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_TIM_PWM_Start_IT+0xbe>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b06      	cmp	r3, #6
 8004332:	d007      	beq.n	8004344 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40010400 	.word	0x40010400

08004358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0202 	mvn.w	r2, #2
 8004384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa6b 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa5d 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa6e 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0204 	mvn.w	r2, #4
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa41 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa33 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa44 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b08      	cmp	r3, #8
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0208 	mvn.w	r2, #8
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2204      	movs	r2, #4
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa17 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa09 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa1a 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0210 	mvn.w	r2, #16
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2208      	movs	r2, #8
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9ed 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9df 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f9f0 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10e      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0201 	mvn.w	r2, #1
 80044d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f004 f8fc 	bl	80086d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d10e      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d107      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fddb 	bl	80050be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d10e      	bne.n	8004534 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d107      	bne.n	8004534 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800452c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f9b5 	bl	800489e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d10e      	bne.n	8004560 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b20      	cmp	r3, #32
 800454e:	d107      	bne.n	8004560 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0220 	mvn.w	r2, #32
 8004558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fda5 	bl	80050aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800457e:	2302      	movs	r3, #2
 8004580:	e0b4      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b0c      	cmp	r3, #12
 8004596:	f200 809f 	bhi.w	80046d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045d5 	.word	0x080045d5
 80045a4:	080046d9 	.word	0x080046d9
 80045a8:	080046d9 	.word	0x080046d9
 80045ac:	080046d9 	.word	0x080046d9
 80045b0:	08004615 	.word	0x08004615
 80045b4:	080046d9 	.word	0x080046d9
 80045b8:	080046d9 	.word	0x080046d9
 80045bc:	080046d9 	.word	0x080046d9
 80045c0:	08004657 	.word	0x08004657
 80045c4:	080046d9 	.word	0x080046d9
 80045c8:	080046d9 	.word	0x080046d9
 80045cc:	080046d9 	.word	0x080046d9
 80045d0:	08004697 	.word	0x08004697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fa0a 	bl	80049f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0208 	orr.w	r2, r2, #8
 80045ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0204 	bic.w	r2, r2, #4
 80045fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6999      	ldr	r1, [r3, #24]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	619a      	str	r2, [r3, #24]
      break;
 8004612:	e062      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fa5a 	bl	8004ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	619a      	str	r2, [r3, #24]
      break;
 8004654:	e041      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 faaf 	bl	8004bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0208 	orr.w	r2, r2, #8
 8004670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0204 	bic.w	r2, r2, #4
 8004680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69d9      	ldr	r1, [r3, #28]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	61da      	str	r2, [r3, #28]
      break;
 8004694:	e021      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fb03 	bl	8004ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	021a      	lsls	r2, r3, #8
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	61da      	str	r2, [r3, #28]
      break;
 80046d6:	e000      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80046d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIM_ConfigClockSource+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e0a6      	b.n	800485a <HAL_TIM_ConfigClockSource+0x166>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004732:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d067      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0x120>
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d80b      	bhi.n	8004760 <HAL_TIM_ConfigClockSource+0x6c>
 8004748:	2b10      	cmp	r3, #16
 800474a:	d073      	beq.n	8004834 <HAL_TIM_ConfigClockSource+0x140>
 800474c:	2b10      	cmp	r3, #16
 800474e:	d802      	bhi.n	8004756 <HAL_TIM_ConfigClockSource+0x62>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d06f      	beq.n	8004834 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004754:	e078      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004756:	2b20      	cmp	r3, #32
 8004758:	d06c      	beq.n	8004834 <HAL_TIM_ConfigClockSource+0x140>
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	d06a      	beq.n	8004834 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800475e:	e073      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d00d      	beq.n	8004780 <HAL_TIM_ConfigClockSource+0x8c>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d804      	bhi.n	8004772 <HAL_TIM_ConfigClockSource+0x7e>
 8004768:	2b50      	cmp	r3, #80	; 0x50
 800476a:	d033      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0xe0>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d041      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004770:	e06a      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d066      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x152>
 8004778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477c:	d017      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800477e:	e063      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6899      	ldr	r1, [r3, #8]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f000 fb5a 	bl	8004e48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e04c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 fb43 	bl	8004e48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047d0:	609a      	str	r2, [r3, #8]
      break;
 80047d2:	e039      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	461a      	mov	r2, r3
 80047e2:	f000 fab7 	bl	8004d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2150      	movs	r1, #80	; 0x50
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fb10 	bl	8004e12 <TIM_ITRx_SetConfig>
      break;
 80047f2:	e029      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	461a      	mov	r2, r3
 8004802:	f000 fad6 	bl	8004db2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2160      	movs	r1, #96	; 0x60
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fb00 	bl	8004e12 <TIM_ITRx_SetConfig>
      break;
 8004812:	e019      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	461a      	mov	r2, r3
 8004822:	f000 fa97 	bl	8004d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2140      	movs	r1, #64	; 0x40
 800482c:	4618      	mov	r0, r3
 800482e:	f000 faf0 	bl	8004e12 <TIM_ITRx_SetConfig>
      break;
 8004832:	e009      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 fae7 	bl	8004e12 <TIM_ITRx_SetConfig>
      break;
 8004844:	e000      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d2:	d00f      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3d      	ldr	r2, [pc, #244]	; (80049cc <TIM_Base_SetConfig+0x118>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00b      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <TIM_Base_SetConfig+0x11c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3b      	ldr	r2, [pc, #236]	; (80049d4 <TIM_Base_SetConfig+0x120>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d108      	bne.n	8004906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02b      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d027      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <TIM_Base_SetConfig+0x118>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d023      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2b      	ldr	r2, [pc, #172]	; (80049d0 <TIM_Base_SetConfig+0x11c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01f      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <TIM_Base_SetConfig+0x120>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01b      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d017      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <TIM_Base_SetConfig+0x128>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <TIM_Base_SetConfig+0x12c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00f      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <TIM_Base_SetConfig+0x130>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00b      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <TIM_Base_SetConfig+0x134>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a24      	ldr	r2, [pc, #144]	; (80049ec <TIM_Base_SetConfig+0x138>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <TIM_Base_SetConfig+0x13c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d108      	bne.n	8004978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0c      	ldr	r2, [pc, #48]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d103      	bne.n	80049b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	615a      	str	r2, [r3, #20]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40014400 	.word	0x40014400
 80049e4:	40014800 	.word	0x40014800
 80049e8:	40001800 	.word	0x40001800
 80049ec:	40001c00 	.word	0x40001c00
 80049f0:	40002000 	.word	0x40002000

080049f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f023 0201 	bic.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 0302 	bic.w	r3, r3, #2
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM_OC1_SetConfig+0xd8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC1_SetConfig+0x64>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <TIM_OC1_SetConfig+0xdc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10c      	bne.n	8004a72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0308 	bic.w	r3, r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a15      	ldr	r2, [pc, #84]	; (8004acc <TIM_OC1_SetConfig+0xd8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC1_SetConfig+0x8e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <TIM_OC1_SetConfig+0xdc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d111      	bne.n	8004aa6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	621a      	str	r2, [r3, #32]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 0210 	bic.w	r2, r3, #16
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0320 	bic.w	r3, r3, #32
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <TIM_OC2_SetConfig+0xe4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC2_SetConfig+0x68>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <TIM_OC2_SetConfig+0xe8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d10d      	bne.n	8004b58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <TIM_OC2_SetConfig+0xe4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_OC2_SetConfig+0x94>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <TIM_OC2_SetConfig+0xe8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d113      	bne.n	8004b90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <TIM_OC3_SetConfig+0xe0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC3_SetConfig+0x66>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <TIM_OC3_SetConfig+0xe4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10d      	bne.n	8004c42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <TIM_OC3_SetConfig+0xe0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_OC3_SetConfig+0x92>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <TIM_OC3_SetConfig+0xe4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d113      	bne.n	8004c7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <TIM_OC4_SetConfig+0xa4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC4_SetConfig+0x68>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a11      	ldr	r2, [pc, #68]	; (8004d50 <TIM_OC4_SetConfig+0xa8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d109      	bne.n	8004d24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40010400 	.word	0x40010400

08004d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f023 0201 	bic.w	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 030a 	bic.w	r3, r3, #10
 8004d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	621a      	str	r2, [r3, #32]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b087      	sub	sp, #28
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f023 0210 	bic.w	r2, r3, #16
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	031b      	lsls	r3, r3, #12
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f043 0307 	orr.w	r3, r3, #7
 8004e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	401a      	ands	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1a      	ldr	r2, [r3, #32]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d00d      	beq.n	8004efe <HAL_TIMEx_PWMN_Start_IT+0x2c>
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d014      	beq.n	8004f10 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d000      	beq.n	8004eec <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8004eea:	e01a      	b.n	8004f22 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0202 	orr.w	r2, r2, #2
 8004efa:	60da      	str	r2, [r3, #12]
      break;
 8004efc:	e011      	b.n	8004f22 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0204 	orr.w	r2, r2, #4
 8004f0c:	60da      	str	r2, [r3, #12]
      break;
 8004f0e:	e008      	b.n	8004f22 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	60da      	str	r2, [r3, #12]
      break;
 8004f20:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f30:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2204      	movs	r2, #4
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f8c9 	bl	80050d2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d007      	beq.n	8004f72 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e032      	b.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fcc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800501e:	2302      	movs	r3, #2
 8005020:	e03d      	b.n	800509e <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	2204      	movs	r2, #4
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	401a      	ands	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	431a      	orrs	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e03f      	b.n	80051ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f003 fb08 	bl	8008758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	; 0x24
 800514c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa65 	bl	8005630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_UART_IRQHandler+0x52>
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f992 	bl	800552c <UART_Receive_IT>
      return;
 8005208:	e0cc      	b.n	80053a4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80ab 	beq.w	8005368 <HAL_UART_IRQHandler+0x1b0>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <HAL_UART_IRQHandler+0x70>
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80a0 	beq.w	8005368 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_UART_IRQHandler+0x90>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_UART_IRQHandler+0xb0>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005260:	f043 0202 	orr.w	r2, r3, #2
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_UART_IRQHandler+0xd0>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	f043 0204 	orr.w	r2, r3, #4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_UART_IRQHandler+0xf0>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a0:	f043 0208 	orr.w	r2, r3, #8
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d078      	beq.n	80053a2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_UART_IRQHandler+0x112>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f931 	bl	800552c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <HAL_UART_IRQHandler+0x13a>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d031      	beq.n	8005356 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f87a 	bl	80053ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d123      	bne.n	800534e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005314:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	2b00      	cmp	r3, #0
 800531c:	d013      	beq.n	8005346 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	4a22      	ldr	r2, [pc, #136]	; (80053ac <HAL_UART_IRQHandler+0x1f4>)
 8005324:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	4618      	mov	r0, r3
 800532c:	f7fd f9c4 	bl	80026b8 <HAL_DMA_Abort_IT>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	e00e      	b.n	8005364 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f846 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e00a      	b.n	8005364 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f842 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e006      	b.n	8005364 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f83e 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005362:	e01e      	b.n	80053a2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	bf00      	nop
    return;
 8005366:	e01c      	b.n	80053a2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_UART_IRQHandler+0x1cc>
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f867 	bl	8005450 <UART_Transmit_IT>
    return;
 8005382:	e00f      	b.n	80053a4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_UART_IRQHandler+0x1ec>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8af 	bl	80054fc <UART_EndTransmit_IT>
    return;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80053a2:	bf00      	nop
  }
}
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08005429 	.word	0x08005429

080053b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005402:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ffc8 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b21      	cmp	r3, #33	; 0x21
 8005462:	d144      	bne.n	80054ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d11a      	bne.n	80054a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005482:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	1c9a      	adds	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]
 8005496:	e00e      	b.n	80054b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	621a      	str	r2, [r3, #32]
 80054a2:	e008      	b.n	80054b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	1c59      	adds	r1, r3, #1
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6211      	str	r1, [r2, #32]
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4619      	mov	r1, r3
 80054c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005512:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff47 	bl	80053b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b22      	cmp	r3, #34	; 0x22
 800553e:	d171      	bne.n	8005624 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005548:	d123      	bne.n	8005592 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10e      	bne.n	8005576 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	1c9a      	adds	r2, r3, #2
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28
 8005574:	e029      	b.n	80055ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	b29b      	uxth	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
 8005590:	e01b      	b.n	80055ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6858      	ldr	r0, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	1c59      	adds	r1, r3, #1
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6291      	str	r1, [r2, #40]	; 0x28
 80055aa:	b2c2      	uxtb	r2, r0
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e00c      	b.n	80055ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	1c58      	adds	r0, r3, #1
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	6288      	str	r0, [r1, #40]	; 0x28
 80055c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4619      	mov	r1, r3
 80055d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d120      	bne.n	8005620 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0220 	bic.w	r2, r2, #32
 80055ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fed4 	bl	80053c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e002      	b.n	8005626 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005630:	b5b0      	push	{r4, r5, r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005670:	f023 030c 	bic.w	r3, r3, #12
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	68f9      	ldr	r1, [r7, #12]
 800567a:	430b      	orrs	r3, r1
 800567c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569c:	f040 80e4 	bne.w	8005868 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4aab      	ldr	r2, [pc, #684]	; (8005954 <UART_SetConfig+0x324>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <UART_SetConfig+0x84>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4aaa      	ldr	r2, [pc, #680]	; (8005958 <UART_SetConfig+0x328>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d16c      	bne.n	800578e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80056b4:	f7fd fd52 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80056b8:	4602      	mov	r2, r0
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009a      	lsls	r2, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	4aa3      	ldr	r2, [pc, #652]	; (800595c <UART_SetConfig+0x32c>)
 80056d0:	fba2 2303 	umull	r2, r3, r2, r3
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	011c      	lsls	r4, r3, #4
 80056d8:	f7fd fd40 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	009a      	lsls	r2, r3, #2
 80056e6:	441a      	add	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80056f2:	f7fd fd33 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80056f6:	4602      	mov	r2, r0
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009a      	lsls	r2, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	4a93      	ldr	r2, [pc, #588]	; (800595c <UART_SetConfig+0x32c>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2264      	movs	r2, #100	; 0x64
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	1aeb      	subs	r3, r5, r3
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	3332      	adds	r3, #50	; 0x32
 8005720:	4a8e      	ldr	r2, [pc, #568]	; (800595c <UART_SetConfig+0x32c>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800572e:	441c      	add	r4, r3
 8005730:	f7fd fd14 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8005734:	4602      	mov	r2, r0
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009a      	lsls	r2, r3, #2
 800573e:	441a      	add	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	fbb2 f5f3 	udiv	r5, r2, r3
 800574a:	f7fd fd07 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 800574e:	4602      	mov	r2, r0
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	4a7d      	ldr	r2, [pc, #500]	; (800595c <UART_SetConfig+0x32c>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2264      	movs	r2, #100	; 0x64
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	1aeb      	subs	r3, r5, r3
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	3332      	adds	r3, #50	; 0x32
 8005778:	4a78      	ldr	r2, [pc, #480]	; (800595c <UART_SetConfig+0x32c>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 0207 	and.w	r2, r3, #7
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4422      	add	r2, r4
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e154      	b.n	8005a38 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800578e:	f7fd fcd1 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8005792:	4602      	mov	r2, r0
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	4a6c      	ldr	r2, [pc, #432]	; (800595c <UART_SetConfig+0x32c>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	011c      	lsls	r4, r3, #4
 80057b2:	f7fd fcbf 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80057b6:	4602      	mov	r2, r0
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	009a      	lsls	r2, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80057cc:	f7fd fcb2 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009a      	lsls	r2, r3, #2
 80057da:	441a      	add	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	4a5d      	ldr	r2, [pc, #372]	; (800595c <UART_SetConfig+0x32c>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	2264      	movs	r2, #100	; 0x64
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	1aeb      	subs	r3, r5, r3
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	3332      	adds	r3, #50	; 0x32
 80057fa:	4a58      	ldr	r2, [pc, #352]	; (800595c <UART_SetConfig+0x32c>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005808:	441c      	add	r4, r3
 800580a:	f7fd fc93 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 800580e:	4602      	mov	r2, r0
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009a      	lsls	r2, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fbb2 f5f3 	udiv	r5, r2, r3
 8005824:	f7fd fc86 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8005828:	4602      	mov	r2, r0
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009a      	lsls	r2, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	4a47      	ldr	r2, [pc, #284]	; (800595c <UART_SetConfig+0x32c>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	2264      	movs	r2, #100	; 0x64
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	1aeb      	subs	r3, r5, r3
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	3332      	adds	r3, #50	; 0x32
 8005852:	4a42      	ldr	r2, [pc, #264]	; (800595c <UART_SetConfig+0x32c>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	f003 0207 	and.w	r2, r3, #7
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4422      	add	r2, r4
 8005864:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005866:	e0e7      	b.n	8005a38 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a39      	ldr	r2, [pc, #228]	; (8005954 <UART_SetConfig+0x324>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <UART_SetConfig+0x24c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a38      	ldr	r2, [pc, #224]	; (8005958 <UART_SetConfig+0x328>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d171      	bne.n	8005960 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800587c:	f7fd fc6e 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8005880:	4602      	mov	r2, r0
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009a      	lsls	r2, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	4a31      	ldr	r2, [pc, #196]	; (800595c <UART_SetConfig+0x32c>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	011c      	lsls	r4, r3, #4
 80058a0:	f7fd fc5c 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009a      	lsls	r2, r3, #2
 80058ae:	441a      	add	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80058ba:	f7fd fc4f 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80058be:	4602      	mov	r2, r0
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009a      	lsls	r2, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	4a21      	ldr	r2, [pc, #132]	; (800595c <UART_SetConfig+0x32c>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2264      	movs	r2, #100	; 0x64
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	1aeb      	subs	r3, r5, r3
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	3332      	adds	r3, #50	; 0x32
 80058e8:	4a1c      	ldr	r2, [pc, #112]	; (800595c <UART_SetConfig+0x32c>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f4:	441c      	add	r4, r3
 80058f6:	f7fd fc31 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005910:	f7fd fc24 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8005914:	4602      	mov	r2, r0
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009a      	lsls	r2, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	4a0c      	ldr	r2, [pc, #48]	; (800595c <UART_SetConfig+0x32c>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	2264      	movs	r2, #100	; 0x64
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	1aeb      	subs	r3, r5, r3
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	3332      	adds	r3, #50	; 0x32
 800593e:	4a07      	ldr	r2, [pc, #28]	; (800595c <UART_SetConfig+0x32c>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f003 020f 	and.w	r2, r3, #15
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4422      	add	r2, r4
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	e071      	b.n	8005a38 <UART_SetConfig+0x408>
 8005954:	40011000 	.word	0x40011000
 8005958:	40011400 	.word	0x40011400
 800595c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005960:	f7fd fbe8 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8005964:	4602      	mov	r2, r0
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009a      	lsls	r2, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	4a31      	ldr	r2, [pc, #196]	; (8005a40 <UART_SetConfig+0x410>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	011c      	lsls	r4, r3, #4
 8005984:	f7fd fbd6 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8005988:	4602      	mov	r2, r0
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009a      	lsls	r2, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	fbb2 f5f3 	udiv	r5, r2, r3
 800599e:	f7fd fbc9 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009a      	lsls	r2, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <UART_SetConfig+0x410>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2264      	movs	r2, #100	; 0x64
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	1aeb      	subs	r3, r5, r3
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	3332      	adds	r3, #50	; 0x32
 80059cc:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <UART_SetConfig+0x410>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d8:	441c      	add	r4, r3
 80059da:	f7fd fbab 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80059de:	4602      	mov	r2, r0
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009a      	lsls	r2, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80059f4:	f7fd fb9e 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009a      	lsls	r2, r3, #2
 8005a02:	441a      	add	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <UART_SetConfig+0x410>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	2264      	movs	r2, #100	; 0x64
 8005a18:	fb02 f303 	mul.w	r3, r2, r3
 8005a1c:	1aeb      	subs	r3, r5, r3
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	3332      	adds	r3, #50	; 0x32
 8005a22:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <UART_SetConfig+0x410>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	f003 020f 	and.w	r2, r3, #15
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4422      	add	r2, r4
 8005a34:	609a      	str	r2, [r3, #8]
}
 8005a36:	e7ff      	b.n	8005a38 <UART_SetConfig+0x408>
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a40:	51eb851f 	.word	0x51eb851f
 8005a44:	00000000 	.word	0x00000000

08005a48 <currentControl>:




inline void currentControl(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
	static float Id_error_integ_temp2 = 0.0f;
	static float Iq_error_integ_temp1 = 0.0f;
	static float Iq_error_integ_temp2 = 0.0f;


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2140      	movs	r1, #64	; 0x40
 8005a50:	48ad      	ldr	r0, [pc, #692]	; (8005d08 <currentControl+0x2c0>)
 8005a52:	f7fd fa4d 	bl	8002ef0 <HAL_GPIO_WritePin>

	refreshEncoder();
 8005a56:	f002 fa13 	bl	8007e80 <refreshEncoder>
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
	}
#endif


	get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 8005a5a:	4bac      	ldr	r3, [pc, #688]	; (8005d0c <currentControl+0x2c4>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4bac      	ldr	r3, [pc, #688]	; (8005d10 <currentControl+0x2c8>)
 8005a60:	edd3 7a00 	vldr	s15, [r3]
 8005a64:	4bab      	ldr	r3, [pc, #684]	; (8005d14 <currentControl+0x2cc>)
 8005a66:	ed93 7a00 	vldr	s14, [r3]
 8005a6a:	eef0 0a47 	vmov.f32	s1, s14
 8005a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a72:	49a9      	ldr	r1, [pc, #676]	; (8005d18 <currentControl+0x2d0>)
 8005a74:	48a9      	ldr	r0, [pc, #676]	; (8005d1c <currentControl+0x2d4>)
 8005a76:	f000 fda3 	bl	80065c0 <get_current_dq>


	if(theta_re < M_PI)
 8005a7a:	4ba9      	ldr	r3, [pc, #676]	; (8005d20 <currentControl+0x2d8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fd26 	bl	80004d0 <__aeabi_f2d>
 8005a84:	a39e      	add	r3, pc, #632	; (adr r3, 8005d00 <currentControl+0x2b8>)
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f7fa ffeb 	bl	8000a64 <__aeabi_dcmplt>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <currentControl+0x58>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8005a94:	2200      	movs	r2, #0
 8005a96:	2140      	movs	r1, #64	; 0x40
 8005a98:	48a2      	ldr	r0, [pc, #648]	; (8005d24 <currentControl+0x2dc>)
 8005a9a:	f7fd fa29 	bl	8002ef0 <HAL_GPIO_WritePin>
 8005a9e:	e004      	b.n	8005aaa <currentControl+0x62>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	2140      	movs	r1, #64	; 0x40
 8005aa4:	489f      	ldr	r0, [pc, #636]	; (8005d24 <currentControl+0x2dc>)
 8005aa6:	f7fd fa23 	bl	8002ef0 <HAL_GPIO_WritePin>

	/********** ACR (Auto Current Regulator) **********/

#if _ACR_ENABLE_

	if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 8005aaa:	4b9f      	ldr	r3, [pc, #636]	; (8005d28 <currentControl+0x2e0>)
 8005aac:	edd3 7a00 	vldr	s15, [r3]
 8005ab0:	eeb1 7a67 	vneg.f32	s14, s15
 8005ab4:	4b9d      	ldr	r3, [pc, #628]	; (8005d2c <currentControl+0x2e4>)
 8005ab6:	edd3 7a00 	vldr	s15, [r3]
 8005aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac2:	dd08      	ble.n	8005ad6 <currentControl+0x8e>
 8005ac4:	4b98      	ldr	r3, [pc, #608]	; (8005d28 <currentControl+0x2e0>)
 8005ac6:	edd3 7a00 	vldr	s15, [r3]
 8005aca:	eef1 7a67 	vneg.f32	s15, s15
 8005ace:	4b98      	ldr	r3, [pc, #608]	; (8005d30 <currentControl+0x2e8>)
 8005ad0:	edc3 7a00 	vstr	s15, [r3]
 8005ad4:	e013      	b.n	8005afe <currentControl+0xb6>
	else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 8005ad6:	4b95      	ldr	r3, [pc, #596]	; (8005d2c <currentControl+0x2e4>)
 8005ad8:	ed93 7a00 	vldr	s14, [r3]
 8005adc:	4b92      	ldr	r3, [pc, #584]	; (8005d28 <currentControl+0x2e0>)
 8005ade:	edd3 7a00 	vldr	s15, [r3]
 8005ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aea:	dd04      	ble.n	8005af6 <currentControl+0xae>
 8005aec:	4b8e      	ldr	r3, [pc, #568]	; (8005d28 <currentControl+0x2e0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a8f      	ldr	r2, [pc, #572]	; (8005d30 <currentControl+0x2e8>)
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	e003      	b.n	8005afe <currentControl+0xb6>
	else						_Id_ref = Id_ref;
 8005af6:	4b8d      	ldr	r3, [pc, #564]	; (8005d2c <currentControl+0x2e4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a8d      	ldr	r2, [pc, #564]	; (8005d30 <currentControl+0x2e8>)
 8005afc:	6013      	str	r3, [r2, #0]

	if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 8005afe:	4b8d      	ldr	r3, [pc, #564]	; (8005d34 <currentControl+0x2ec>)
 8005b00:	edd3 7a00 	vldr	s15, [r3]
 8005b04:	eeb1 7a67 	vneg.f32	s14, s15
 8005b08:	4b8b      	ldr	r3, [pc, #556]	; (8005d38 <currentControl+0x2f0>)
 8005b0a:	edd3 7a00 	vldr	s15, [r3]
 8005b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b16:	dd08      	ble.n	8005b2a <currentControl+0xe2>
 8005b18:	4b86      	ldr	r3, [pc, #536]	; (8005d34 <currentControl+0x2ec>)
 8005b1a:	edd3 7a00 	vldr	s15, [r3]
 8005b1e:	eef1 7a67 	vneg.f32	s15, s15
 8005b22:	4b86      	ldr	r3, [pc, #536]	; (8005d3c <currentControl+0x2f4>)
 8005b24:	edc3 7a00 	vstr	s15, [r3]
 8005b28:	e013      	b.n	8005b52 <currentControl+0x10a>
	else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 8005b2a:	4b83      	ldr	r3, [pc, #524]	; (8005d38 <currentControl+0x2f0>)
 8005b2c:	ed93 7a00 	vldr	s14, [r3]
 8005b30:	4b80      	ldr	r3, [pc, #512]	; (8005d34 <currentControl+0x2ec>)
 8005b32:	edd3 7a00 	vldr	s15, [r3]
 8005b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	dd04      	ble.n	8005b4a <currentControl+0x102>
 8005b40:	4b7c      	ldr	r3, [pc, #496]	; (8005d34 <currentControl+0x2ec>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a7d      	ldr	r2, [pc, #500]	; (8005d3c <currentControl+0x2f4>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	e003      	b.n	8005b52 <currentControl+0x10a>
	else						_Iq_ref = Iq_ref;
 8005b4a:	4b7b      	ldr	r3, [pc, #492]	; (8005d38 <currentControl+0x2f0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a7b      	ldr	r2, [pc, #492]	; (8005d3c <currentControl+0x2f4>)
 8005b50:	6013      	str	r3, [r2, #0]
		Iq_error = forced_I_delta_ref - Iq;
	}
	else
	{
#endif
		Id_error = _Id_ref - Id;
 8005b52:	4b77      	ldr	r3, [pc, #476]	; (8005d30 <currentControl+0x2e8>)
 8005b54:	ed93 7a00 	vldr	s14, [r3]
 8005b58:	4b70      	ldr	r3, [pc, #448]	; (8005d1c <currentControl+0x2d4>)
 8005b5a:	edd3 7a00 	vldr	s15, [r3]
 8005b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b62:	4b77      	ldr	r3, [pc, #476]	; (8005d40 <currentControl+0x2f8>)
 8005b64:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 8005b68:	4b74      	ldr	r3, [pc, #464]	; (8005d3c <currentControl+0x2f4>)
 8005b6a:	ed93 7a00 	vldr	s14, [r3]
 8005b6e:	4b6a      	ldr	r3, [pc, #424]	; (8005d18 <currentControl+0x2d0>)
 8005b70:	edd3 7a00 	vldr	s15, [r3]
 8005b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b78:	4b72      	ldr	r3, [pc, #456]	; (8005d44 <currentControl+0x2fc>)
 8005b7a:	edc3 7a00 	vstr	s15, [r3]
	}
#endif


	// integral
	Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 8005b7e:	4b70      	ldr	r3, [pc, #448]	; (8005d40 <currentControl+0x2f8>)
 8005b80:	ed93 7a00 	vldr	s14, [r3]
 8005b84:	4b70      	ldr	r3, [pc, #448]	; (8005d48 <currentControl+0x300>)
 8005b86:	edd3 7a00 	vldr	s15, [r3]
 8005b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8e:	4b6f      	ldr	r3, [pc, #444]	; (8005d4c <currentControl+0x304>)
 8005b90:	edc3 7a00 	vstr	s15, [r3]
	if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 8005b94:	4b6d      	ldr	r3, [pc, #436]	; (8005d4c <currentControl+0x304>)
 8005b96:	edd3 7a00 	vldr	s15, [r3]
 8005b9a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8005d50 <currentControl+0x308>
 8005b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba6:	d503      	bpl.n	8005bb0 <currentControl+0x168>
 8005ba8:	4b68      	ldr	r3, [pc, #416]	; (8005d4c <currentControl+0x304>)
 8005baa:	4a6a      	ldr	r2, [pc, #424]	; (8005d54 <currentControl+0x30c>)
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e00c      	b.n	8005bca <currentControl+0x182>
	else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 8005bb0:	4b66      	ldr	r3, [pc, #408]	; (8005d4c <currentControl+0x304>)
 8005bb2:	edd3 7a00 	vldr	s15, [r3]
 8005bb6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005d58 <currentControl+0x310>
 8005bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	dd02      	ble.n	8005bca <currentControl+0x182>
 8005bc4:	4b61      	ldr	r3, [pc, #388]	; (8005d4c <currentControl+0x304>)
 8005bc6:	4a65      	ldr	r2, [pc, #404]	; (8005d5c <currentControl+0x314>)
 8005bc8:	601a      	str	r2, [r3, #0]
	Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 8005bca:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005d60 <currentControl+0x318>
 8005bce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bd6:	4b5d      	ldr	r3, [pc, #372]	; (8005d4c <currentControl+0x304>)
 8005bd8:	edd3 6a00 	vldr	s13, [r3]
 8005bdc:	4b5a      	ldr	r3, [pc, #360]	; (8005d48 <currentControl+0x300>)
 8005bde:	edd3 7a00 	vldr	s15, [r3]
 8005be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <currentControl+0x31c>)
 8005bec:	edc3 7a00 	vstr	s15, [r3]
	Id_error_integ_temp2 = Id_error_integ_temp1;
 8005bf0:	4b56      	ldr	r3, [pc, #344]	; (8005d4c <currentControl+0x304>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a54      	ldr	r2, [pc, #336]	; (8005d48 <currentControl+0x300>)
 8005bf6:	6013      	str	r3, [r2, #0]

	Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 8005bf8:	4b52      	ldr	r3, [pc, #328]	; (8005d44 <currentControl+0x2fc>)
 8005bfa:	ed93 7a00 	vldr	s14, [r3]
 8005bfe:	4b5a      	ldr	r3, [pc, #360]	; (8005d68 <currentControl+0x320>)
 8005c00:	edd3 7a00 	vldr	s15, [r3]
 8005c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c08:	4b58      	ldr	r3, [pc, #352]	; (8005d6c <currentControl+0x324>)
 8005c0a:	edc3 7a00 	vstr	s15, [r3]
	if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <currentControl+0x324>)
 8005c10:	edd3 7a00 	vldr	s15, [r3]
 8005c14:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005d50 <currentControl+0x308>
 8005c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c20:	d503      	bpl.n	8005c2a <currentControl+0x1e2>
 8005c22:	4b52      	ldr	r3, [pc, #328]	; (8005d6c <currentControl+0x324>)
 8005c24:	4a4b      	ldr	r2, [pc, #300]	; (8005d54 <currentControl+0x30c>)
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e00c      	b.n	8005c44 <currentControl+0x1fc>
	else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 8005c2a:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <currentControl+0x324>)
 8005c2c:	edd3 7a00 	vldr	s15, [r3]
 8005c30:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005d58 <currentControl+0x310>
 8005c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3c:	dd02      	ble.n	8005c44 <currentControl+0x1fc>
 8005c3e:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <currentControl+0x324>)
 8005c40:	4a46      	ldr	r2, [pc, #280]	; (8005d5c <currentControl+0x314>)
 8005c42:	601a      	str	r2, [r3, #0]
	Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 8005c44:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005d60 <currentControl+0x318>
 8005c48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c50:	4b46      	ldr	r3, [pc, #280]	; (8005d6c <currentControl+0x324>)
 8005c52:	edd3 6a00 	vldr	s13, [r3]
 8005c56:	4b44      	ldr	r3, [pc, #272]	; (8005d68 <currentControl+0x320>)
 8005c58:	edd3 7a00 	vldr	s15, [r3]
 8005c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c64:	4b42      	ldr	r3, [pc, #264]	; (8005d70 <currentControl+0x328>)
 8005c66:	edc3 7a00 	vstr	s15, [r3]
	Iq_error_integ_temp2 = Iq_error_integ_temp1;
 8005c6a:	4b40      	ldr	r3, [pc, #256]	; (8005d6c <currentControl+0x324>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a3e      	ldr	r2, [pc, #248]	; (8005d68 <currentControl+0x320>)
 8005c70:	6013      	str	r3, [r2, #0]


	Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <currentControl+0x32c>)
 8005c74:	ed93 7a00 	vldr	s14, [r3]
 8005c78:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <currentControl+0x2f8>)
 8005c7a:	edd3 7a00 	vldr	s15, [r3]
 8005c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c82:	4b3d      	ldr	r3, [pc, #244]	; (8005d78 <currentControl+0x330>)
 8005c84:	edd3 6a00 	vldr	s13, [r3]
 8005c88:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <currentControl+0x31c>)
 8005c8a:	edd3 7a00 	vldr	s15, [r3]
 8005c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c96:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <currentControl+0x334>)
 8005c98:	edc3 7a00 	vstr	s15, [r3]
	Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 8005c9c:	4b35      	ldr	r3, [pc, #212]	; (8005d74 <currentControl+0x32c>)
 8005c9e:	ed93 7a00 	vldr	s14, [r3]
 8005ca2:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <currentControl+0x2fc>)
 8005ca4:	edd3 7a00 	vldr	s15, [r3]
 8005ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cac:	4b32      	ldr	r3, [pc, #200]	; (8005d78 <currentControl+0x330>)
 8005cae:	edd3 6a00 	vldr	s13, [r3]
 8005cb2:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <currentControl+0x328>)
 8005cb4:	edd3 7a00 	vldr	s15, [r3]
 8005cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <currentControl+0x338>)
 8005cc2:	edc3 7a00 	vstr	s15, [r3]
#endif

	/********* end of ACR **********/


	setSVM_dq();
 8005cc6:	f001 fb99 	bl	80073fc <setSVM_dq>

#endif



	requestEncoder();
 8005cca:	f002 f8b9 	bl	8007e40 <requestEncoder>


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 8005cce:	4b2d      	ldr	r3, [pc, #180]	; (8005d84 <currentControl+0x33c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a2b      	ldr	r2, [pc, #172]	; (8005d84 <currentControl+0x33c>)
 8005cd6:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 8005cd8:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <currentControl+0x33c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	dd05      	ble.n	8005cec <currentControl+0x2a4>
	{
		ASR_flg = 1;
 8005ce0:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <currentControl+0x340>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 8005ce6:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <currentControl+0x33c>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8005cec:	2200      	movs	r2, #0
 8005cee:	2140      	movs	r1, #64	; 0x40
 8005cf0:	4805      	ldr	r0, [pc, #20]	; (8005d08 <currentControl+0x2c0>)
 8005cf2:	f7fd f8fd 	bl	8002ef0 <HAL_GPIO_WritePin>

	return;
 8005cf6:	bf00      	nop
}
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	54442d18 	.word	0x54442d18
 8005d04:	400921fb 	.word	0x400921fb
 8005d08:	40020400 	.word	0x40020400
 8005d0c:	20000198 	.word	0x20000198
 8005d10:	20000038 	.word	0x20000038
 8005d14:	200001e4 	.word	0x200001e4
 8005d18:	200000d0 	.word	0x200000d0
 8005d1c:	200000cc 	.word	0x200000cc
 8005d20:	200001e0 	.word	0x200001e0
 8005d24:	40020000 	.word	0x40020000
 8005d28:	20000010 	.word	0x20000010
 8005d2c:	200000c4 	.word	0x200000c4
 8005d30:	200000e4 	.word	0x200000e4
 8005d34:	20000014 	.word	0x20000014
 8005d38:	200000c8 	.word	0x200000c8
 8005d3c:	200000e8 	.word	0x200000e8
 8005d40:	200000d4 	.word	0x200000d4
 8005d44:	200000d8 	.word	0x200000d8
 8005d48:	200000ec 	.word	0x200000ec
 8005d4c:	200000f0 	.word	0x200000f0
 8005d50:	c9742400 	.word	0xc9742400
 8005d54:	c9742400 	.word	0xc9742400
 8005d58:	49742400 	.word	0x49742400
 8005d5c:	49742400 	.word	0x49742400
 8005d60:	38d1b717 	.word	0x38d1b717
 8005d64:	200000dc 	.word	0x200000dc
 8005d68:	200000f4 	.word	0x200000f4
 8005d6c:	200000f8 	.word	0x200000f8
 8005d70:	200000e0 	.word	0x200000e0
 8005d74:	20000008 	.word	0x20000008
 8005d78:	2000000c 	.word	0x2000000c
 8005d7c:	20000190 	.word	0x20000190
 8005d80:	20000194 	.word	0x20000194
 8005d84:	20000114 	.word	0x20000114
 8005d88:	20000110 	.word	0x20000110
 8005d8c:	00000000 	.word	0x00000000

08005d90 <speedControl>:




inline void speedControl()
{
 8005d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d94:	af00      	add	r7, sp, #0



	  if(ASR_steps <= 0)
 8005d96:	4bba      	ldr	r3, [pc, #744]	; (8006080 <speedControl+0x2f0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dc04      	bgt.n	8005da8 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 8005d9e:	4bb9      	ldr	r3, [pc, #740]	; (8006084 <speedControl+0x2f4>)
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e00a      	b.n	8005dbe <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = theta - p_theta;
 8005da8:	4bb7      	ldr	r3, [pc, #732]	; (8006088 <speedControl+0x2f8>)
 8005daa:	ed93 7a00 	vldr	s14, [r3]
 8005dae:	4bb7      	ldr	r3, [pc, #732]	; (800608c <speedControl+0x2fc>)
 8005db0:	edd3 7a00 	vldr	s15, [r3]
 8005db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db8:	4bb2      	ldr	r3, [pc, #712]	; (8006084 <speedControl+0x2f4>)
 8005dba:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 8005dbe:	4bb0      	ldr	r3, [pc, #704]	; (8006080 <speedControl+0x2f0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4aae      	ldr	r2, [pc, #696]	; (8006080 <speedControl+0x2f0>)
 8005dc6:	6013      	str	r3, [r2, #0]

	  p_theta = theta;
 8005dc8:	4baf      	ldr	r3, [pc, #700]	; (8006088 <speedControl+0x2f8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4aaf      	ldr	r2, [pc, #700]	; (800608c <speedControl+0x2fc>)
 8005dce:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 8005dd0:	4bac      	ldr	r3, [pc, #688]	; (8006084 <speedControl+0x2f4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fa fb7b 	bl	80004d0 <__aeabi_f2d>
 8005dda:	a3a1      	add	r3, pc, #644	; (adr r3, 8006060 <speedControl+0x2d0>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fe40 	bl	8000a64 <__aeabi_dcmplt>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d013      	beq.n	8005e12 <speedControl+0x82>
 8005dea:	4ba6      	ldr	r3, [pc, #664]	; (8006084 <speedControl+0x2f4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fa fb6e 	bl	80004d0 <__aeabi_f2d>
 8005df4:	a39c      	add	r3, pc, #624	; (adr r3, 8006068 <speedControl+0x2d8>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa fa0b 	bl	8000214 <__adddf3>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	4618      	mov	r0, r3
 8005e04:	4621      	mov	r1, r4
 8005e06:	f7fa fe6b 	bl	8000ae0 <__aeabi_d2f>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4b9d      	ldr	r3, [pc, #628]	; (8006084 <speedControl+0x2f4>)
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e01f      	b.n	8005e52 <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 8005e12:	4b9c      	ldr	r3, [pc, #624]	; (8006084 <speedControl+0x2f4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa fb5a 	bl	80004d0 <__aeabi_f2d>
 8005e1c:	a394      	add	r3, pc, #592	; (adr r3, 8006070 <speedControl+0x2e0>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f7fa fe3d 	bl	8000aa0 <__aeabi_dcmpgt>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d012      	beq.n	8005e52 <speedControl+0xc2>
 8005e2c:	4b95      	ldr	r3, [pc, #596]	; (8006084 <speedControl+0x2f4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fa fb4d 	bl	80004d0 <__aeabi_f2d>
 8005e36:	a38c      	add	r3, pc, #560	; (adr r3, 8006068 <speedControl+0x2d8>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f7fa f9e8 	bl	8000210 <__aeabi_dsub>
 8005e40:	4603      	mov	r3, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	4618      	mov	r0, r3
 8005e46:	4621      	mov	r1, r4
 8005e48:	f7fa fe4a 	bl	8000ae0 <__aeabi_d2f>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	4b8d      	ldr	r3, [pc, #564]	; (8006084 <speedControl+0x2f4>)
 8005e50:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 8005e52:	4b8f      	ldr	r3, [pc, #572]	; (8006090 <speedControl+0x300>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa fb3a 	bl	80004d0 <__aeabi_f2d>
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	4b8c      	ldr	r3, [pc, #560]	; (8006094 <speedControl+0x304>)
 8005e62:	f7fa fb8d 	bl	8000580 <__aeabi_dmul>
 8005e66:	4603      	mov	r3, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	4625      	mov	r5, r4
 8005e6c:	461c      	mov	r4, r3
 8005e6e:	4b85      	ldr	r3, [pc, #532]	; (8006084 <speedControl+0x2f4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fa fb2c 	bl	80004d0 <__aeabi_f2d>
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	4b85      	ldr	r3, [pc, #532]	; (8006094 <speedControl+0x304>)
 8005e7e:	f7fa fb7f 	bl	8000580 <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4690      	mov	r8, r2
 8005e88:	4699      	mov	r9, r3
 8005e8a:	4b83      	ldr	r3, [pc, #524]	; (8006098 <speedControl+0x308>)
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fa fb1f 	bl	80004d0 <__aeabi_f2d>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f7fa fc9b 	bl	80007d4 <__aeabi_ddiv>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f7fa f9b5 	bl	8000214 <__adddf3>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	4618      	mov	r0, r3
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	f7fa fe15 	bl	8000ae0 <__aeabi_d2f>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b75      	ldr	r3, [pc, #468]	; (8006090 <speedControl+0x300>)
 8005eba:	601a      	str	r2, [r3, #0]


#if _ASR_ENABLE_


	  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 8005ebc:	4b77      	ldr	r3, [pc, #476]	; (800609c <speedControl+0x30c>)
 8005ebe:	edd3 7a00 	vldr	s15, [r3]
 8005ec2:	eeb1 7a67 	vneg.f32	s14, s15
 8005ec6:	4b76      	ldr	r3, [pc, #472]	; (80060a0 <speedControl+0x310>)
 8005ec8:	edd3 7a00 	vldr	s15, [r3]
 8005ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed4:	dd08      	ble.n	8005ee8 <speedControl+0x158>
 8005ed6:	4b71      	ldr	r3, [pc, #452]	; (800609c <speedControl+0x30c>)
 8005ed8:	edd3 7a00 	vldr	s15, [r3]
 8005edc:	eef1 7a67 	vneg.f32	s15, s15
 8005ee0:	4b70      	ldr	r3, [pc, #448]	; (80060a4 <speedControl+0x314>)
 8005ee2:	edc3 7a00 	vstr	s15, [r3]
 8005ee6:	e013      	b.n	8005f10 <speedControl+0x180>
	  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 8005ee8:	4b6d      	ldr	r3, [pc, #436]	; (80060a0 <speedControl+0x310>)
 8005eea:	ed93 7a00 	vldr	s14, [r3]
 8005eee:	4b6b      	ldr	r3, [pc, #428]	; (800609c <speedControl+0x30c>)
 8005ef0:	edd3 7a00 	vldr	s15, [r3]
 8005ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efc:	dd04      	ble.n	8005f08 <speedControl+0x178>
 8005efe:	4b67      	ldr	r3, [pc, #412]	; (800609c <speedControl+0x30c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a68      	ldr	r2, [pc, #416]	; (80060a4 <speedControl+0x314>)
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e003      	b.n	8005f10 <speedControl+0x180>
	  else								_omega_ref = omega_ref;
 8005f08:	4b65      	ldr	r3, [pc, #404]	; (80060a0 <speedControl+0x310>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <speedControl+0x314>)
 8005f0e:	6013      	str	r3, [r2, #0]

	  omega_error = _omega_ref - omega;
 8005f10:	4b64      	ldr	r3, [pc, #400]	; (80060a4 <speedControl+0x314>)
 8005f12:	ed93 7a00 	vldr	s14, [r3]
 8005f16:	4b5e      	ldr	r3, [pc, #376]	; (8006090 <speedControl+0x300>)
 8005f18:	edd3 7a00 	vldr	s15, [r3]
 8005f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f20:	4b61      	ldr	r3, [pc, #388]	; (80060a8 <speedControl+0x318>)
 8005f22:	edc3 7a00 	vstr	s15, [r3]

	  // integral
	  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 8005f26:	4b60      	ldr	r3, [pc, #384]	; (80060a8 <speedControl+0x318>)
 8005f28:	ed93 7a00 	vldr	s14, [r3]
 8005f2c:	4b5f      	ldr	r3, [pc, #380]	; (80060ac <speedControl+0x31c>)
 8005f2e:	edd3 7a00 	vldr	s15, [r3]
 8005f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f36:	4b5e      	ldr	r3, [pc, #376]	; (80060b0 <speedControl+0x320>)
 8005f38:	edc3 7a00 	vstr	s15, [r3]
	  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 8005f3c:	4b5c      	ldr	r3, [pc, #368]	; (80060b0 <speedControl+0x320>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa fac5 	bl	80004d0 <__aeabi_f2d>
 8005f46:	4604      	mov	r4, r0
 8005f48:	460d      	mov	r5, r1
 8005f4a:	4b53      	ldr	r3, [pc, #332]	; (8006098 <speedControl+0x308>)
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fa fabf 	bl	80004d0 <__aeabi_f2d>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	f04f 0000 	mov.w	r0, #0
 8005f5a:	4956      	ldr	r1, [pc, #344]	; (80060b4 <speedControl+0x324>)
 8005f5c:	f7fa fc3a 	bl	80007d4 <__aeabi_ddiv>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7fa fd7c 	bl	8000a64 <__aeabi_dcmplt>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <speedControl+0x1f6>
	  {
		  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 8005f72:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80060b8 <speedControl+0x328>
 8005f76:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 8005f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f7e:	4b4c      	ldr	r3, [pc, #304]	; (80060b0 <speedControl+0x320>)
 8005f80:	edc3 7a00 	vstr	s15, [r3]
 8005f84:	e023      	b.n	8005fce <speedControl+0x23e>
	  }
	  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 8005f86:	4b4a      	ldr	r3, [pc, #296]	; (80060b0 <speedControl+0x320>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fa faa0 	bl	80004d0 <__aeabi_f2d>
 8005f90:	4604      	mov	r4, r0
 8005f92:	460d      	mov	r5, r1
 8005f94:	4b40      	ldr	r3, [pc, #256]	; (8006098 <speedControl+0x308>)
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fa fa9a 	bl	80004d0 <__aeabi_f2d>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	4945      	ldr	r1, [pc, #276]	; (80060bc <speedControl+0x32c>)
 8005fa6:	f7fa fc15 	bl	80007d4 <__aeabi_ddiv>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4620      	mov	r0, r4
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7fa fd75 	bl	8000aa0 <__aeabi_dcmpgt>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <speedControl+0x23e>
	  {
		  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 8005fbc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80060b8 <speedControl+0x328>
 8005fc0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8005fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc8:	4b39      	ldr	r3, [pc, #228]	; (80060b0 <speedControl+0x320>)
 8005fca:	edc3 7a00 	vstr	s15, [r3]
	  }
	  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 8005fce:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80060b8 <speedControl+0x328>
 8005fd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005fd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fda:	4b35      	ldr	r3, [pc, #212]	; (80060b0 <speedControl+0x320>)
 8005fdc:	edd3 6a00 	vldr	s13, [r3]
 8005fe0:	4b32      	ldr	r3, [pc, #200]	; (80060ac <speedControl+0x31c>)
 8005fe2:	edd3 7a00 	vldr	s15, [r3]
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	4b34      	ldr	r3, [pc, #208]	; (80060c0 <speedControl+0x330>)
 8005ff0:	edc3 7a00 	vstr	s15, [r3]
	  omega_error_integ_temp2 = omega_error_integ_temp1;
 8005ff4:	4b2e      	ldr	r3, [pc, #184]	; (80060b0 <speedControl+0x320>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2c      	ldr	r2, [pc, #176]	; (80060ac <speedControl+0x31c>)
 8005ffa:	6013      	str	r3, [r2, #0]


	  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 8005ffc:	4b31      	ldr	r3, [pc, #196]	; (80060c4 <speedControl+0x334>)
 8005ffe:	ed93 7a00 	vldr	s14, [r3]
 8006002:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <speedControl+0x318>)
 8006004:	edd3 7a00 	vldr	s15, [r3]
 8006008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800600c:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <speedControl+0x338>)
 800600e:	edd3 6a00 	vldr	s13, [r3]
 8006012:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <speedControl+0x330>)
 8006014:	edd3 7a00 	vldr	s15, [r3]
 8006018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800601c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006020:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <speedControl+0x33c>)
 8006022:	edc3 7a00 	vstr	s15, [r3]

	  Id_ref = 0.0f;
 8006026:	4b2a      	ldr	r3, [pc, #168]	; (80060d0 <speedControl+0x340>)
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
	  Iq_ref = KT * torque_ref;
 800602e:	4b27      	ldr	r3, [pc, #156]	; (80060cc <speedControl+0x33c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa fa4c 	bl	80004d0 <__aeabi_f2d>
 8006038:	a30f      	add	r3, pc, #60	; (adr r3, 8006078 <speedControl+0x2e8>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa fa9f 	bl	8000580 <__aeabi_dmul>
 8006042:	4603      	mov	r3, r0
 8006044:	460c      	mov	r4, r1
 8006046:	4618      	mov	r0, r3
 8006048:	4621      	mov	r1, r4
 800604a:	f7fa fd49 	bl	8000ae0 <__aeabi_d2f>
 800604e:	4602      	mov	r2, r0
 8006050:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <speedControl+0x344>)
 8006052:	601a      	str	r2, [r3, #0]
#endif




	return;
 8006054:	bf00      	nop
}
 8006056:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w
 8006060:	54442d18 	.word	0x54442d18
 8006064:	c00921fb 	.word	0xc00921fb
 8006068:	54442d18 	.word	0x54442d18
 800606c:	401921fb 	.word	0x401921fb
 8006070:	54442d18 	.word	0x54442d18
 8006074:	400921fb 	.word	0x400921fb
 8006078:	8b6ec798 	.word	0x8b6ec798
 800607c:	3fd22b62 	.word	0x3fd22b62
 8006080:	2000010c 	.word	0x2000010c
 8006084:	20000204 	.word	0x20000204
 8006088:	200001dc 	.word	0x200001dc
 800608c:	2000011c 	.word	0x2000011c
 8006090:	20000118 	.word	0x20000118
 8006094:	3fe00000 	.word	0x3fe00000
 8006098:	3a83126f 	.word	0x3a83126f
 800609c:	20000020 	.word	0x20000020
 80060a0:	200000fc 	.word	0x200000fc
 80060a4:	20000208 	.word	0x20000208
 80060a8:	20000100 	.word	0x20000100
 80060ac:	20000124 	.word	0x20000124
 80060b0:	20000120 	.word	0x20000120
 80060b4:	c0180000 	.word	0xc0180000
 80060b8:	3a83126f 	.word	0x3a83126f
 80060bc:	40180000 	.word	0x40180000
 80060c0:	20000104 	.word	0x20000104
 80060c4:	20000018 	.word	0x20000018
 80060c8:	2000001c 	.word	0x2000001c
 80060cc:	20000108 	.word	0x20000108
 80060d0:	200000c4 	.word	0x200000c4
 80060d4:	200000c8 	.word	0x200000c8

080060d8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80060de:	463b      	mov	r3, r7
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80060ea:	4b22      	ldr	r3, [pc, #136]	; (8006174 <MX_ADC1_Init+0x9c>)
 80060ec:	4a22      	ldr	r2, [pc, #136]	; (8006178 <MX_ADC1_Init+0xa0>)
 80060ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80060f0:	4b20      	ldr	r3, [pc, #128]	; (8006174 <MX_ADC1_Init+0x9c>)
 80060f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <MX_ADC1_Init+0x9c>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80060fe:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <MX_ADC1_Init+0x9c>)
 8006100:	2200      	movs	r2, #0
 8006102:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <MX_ADC1_Init+0x9c>)
 8006106:	2200      	movs	r2, #0
 8006108:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800610a:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <MX_ADC1_Init+0x9c>)
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006112:	4b18      	ldr	r3, [pc, #96]	; (8006174 <MX_ADC1_Init+0x9c>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800611a:	4b16      	ldr	r3, [pc, #88]	; (8006174 <MX_ADC1_Init+0x9c>)
 800611c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006120:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006122:	4b14      	ldr	r3, [pc, #80]	; (8006174 <MX_ADC1_Init+0x9c>)
 8006124:	2200      	movs	r2, #0
 8006126:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006128:	4b12      	ldr	r3, [pc, #72]	; (8006174 <MX_ADC1_Init+0x9c>)
 800612a:	2201      	movs	r2, #1
 800612c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <MX_ADC1_Init+0x9c>)
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006136:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <MX_ADC1_Init+0x9c>)
 8006138:	2201      	movs	r2, #1
 800613a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800613c:	480d      	ldr	r0, [pc, #52]	; (8006174 <MX_ADC1_Init+0x9c>)
 800613e:	f7fa ff33 	bl	8000fa8 <HAL_ADC_Init>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8006148:	f001 f950 	bl	80073ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800614c:	2300      	movs	r3, #0
 800614e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006150:	2301      	movs	r3, #1
 8006152:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006154:	2300      	movs	r3, #0
 8006156:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006158:	463b      	mov	r3, r7
 800615a:	4619      	mov	r1, r3
 800615c:	4805      	ldr	r0, [pc, #20]	; (8006174 <MX_ADC1_Init+0x9c>)
 800615e:	f7fb f877 	bl	8001250 <HAL_ADC_ConfigChannel>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8006168:	f001 f940 	bl	80073ec <Error_Handler>
  }

}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	200002b4 	.word	0x200002b4
 8006178:	40012000 	.word	0x40012000

0800617c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006182:	463b      	mov	r3, r7
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	605a      	str	r2, [r3, #4]
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <MX_ADC2_Init+0x9c>)
 8006190:	4a22      	ldr	r2, [pc, #136]	; (800621c <MX_ADC2_Init+0xa0>)
 8006192:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8006194:	4b20      	ldr	r3, [pc, #128]	; (8006218 <MX_ADC2_Init+0x9c>)
 8006196:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800619a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800619c:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <MX_ADC2_Init+0x9c>)
 800619e:	2200      	movs	r2, #0
 80061a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80061a2:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80061a8:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80061ae:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80061b6:	4b18      	ldr	r3, [pc, #96]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80061be:	4b16      	ldr	r3, [pc, #88]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061c0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80061c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061dc:	2201      	movs	r2, #1
 80061de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80061e0:	480d      	ldr	r0, [pc, #52]	; (8006218 <MX_ADC2_Init+0x9c>)
 80061e2:	f7fa fee1 	bl	8000fa8 <HAL_ADC_Init>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80061ec:	f001 f8fe 	bl	80073ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80061f0:	2304      	movs	r3, #4
 80061f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80061f4:	2301      	movs	r3, #1
 80061f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061fc:	463b      	mov	r3, r7
 80061fe:	4619      	mov	r1, r3
 8006200:	4805      	ldr	r0, [pc, #20]	; (8006218 <MX_ADC2_Init+0x9c>)
 8006202:	f7fb f825 	bl	8001250 <HAL_ADC_ConfigChannel>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800620c:	f001 f8ee 	bl	80073ec <Error_Handler>
  }

}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	2000020c 	.word	0x2000020c
 800621c:	40012100 	.word	0x40012100

08006220 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006226:	463b      	mov	r3, r7
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	605a      	str	r2, [r3, #4]
 800622e:	609a      	str	r2, [r3, #8]
 8006230:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8006232:	4b22      	ldr	r3, [pc, #136]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006234:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <MX_ADC3_Init+0xa0>)
 8006236:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8006238:	4b20      	ldr	r3, [pc, #128]	; (80062bc <MX_ADC3_Init+0x9c>)
 800623a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800623e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006240:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006242:	2200      	movs	r2, #0
 8006244:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8006246:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006248:	2200      	movs	r2, #0
 800624a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <MX_ADC3_Init+0x9c>)
 800624e:	2200      	movs	r2, #0
 8006250:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006252:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800625a:	4b18      	ldr	r3, [pc, #96]	; (80062bc <MX_ADC3_Init+0x9c>)
 800625c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8006262:	4b16      	ldr	r3, [pc, #88]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006264:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006268:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <MX_ADC3_Init+0x9c>)
 800626c:	2200      	movs	r2, #0
 800626e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8006270:	4b12      	ldr	r3, [pc, #72]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006272:	2201      	movs	r2, #1
 8006274:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8006276:	4b11      	ldr	r3, [pc, #68]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800627e:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006280:	2201      	movs	r2, #1
 8006282:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006284:	480d      	ldr	r0, [pc, #52]	; (80062bc <MX_ADC3_Init+0x9c>)
 8006286:	f7fa fe8f 	bl	8000fa8 <HAL_ADC_Init>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8006290:	f001 f8ac 	bl	80073ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006294:	2301      	movs	r3, #1
 8006296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006298:	2301      	movs	r3, #1
 800629a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800629c:	2300      	movs	r3, #0
 800629e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80062a0:	463b      	mov	r3, r7
 80062a2:	4619      	mov	r1, r3
 80062a4:	4805      	ldr	r0, [pc, #20]	; (80062bc <MX_ADC3_Init+0x9c>)
 80062a6:	f7fa ffd3 	bl	8001250 <HAL_ADC_ConfigChannel>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80062b0:	f001 f89c 	bl	80073ec <Error_Handler>
  }

}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	200002fc 	.word	0x200002fc
 80062c0:	40012200 	.word	0x40012200

080062c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	609a      	str	r2, [r3, #8]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a9b      	ldr	r2, [pc, #620]	; (8006550 <HAL_ADC_MspInit+0x28c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d172      	bne.n	80063cc <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	4b9a      	ldr	r3, [pc, #616]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	4a99      	ldr	r2, [pc, #612]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80062f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f4:	6453      	str	r3, [r2, #68]	; 0x44
 80062f6:	4b97      	ldr	r3, [pc, #604]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	623b      	str	r3, [r7, #32]
 8006300:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	4b93      	ldr	r3, [pc, #588]	; (8006554 <HAL_ADC_MspInit+0x290>)
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	4a92      	ldr	r2, [pc, #584]	; (8006554 <HAL_ADC_MspInit+0x290>)
 800630c:	f043 0304 	orr.w	r3, r3, #4
 8006310:	6313      	str	r3, [r2, #48]	; 0x30
 8006312:	4b90      	ldr	r3, [pc, #576]	; (8006554 <HAL_ADC_MspInit+0x290>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	4b8c      	ldr	r3, [pc, #560]	; (8006554 <HAL_ADC_MspInit+0x290>)
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	4a8b      	ldr	r2, [pc, #556]	; (8006554 <HAL_ADC_MspInit+0x290>)
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	6313      	str	r3, [r2, #48]	; 0x30
 800632e:	4b89      	ldr	r3, [pc, #548]	; (8006554 <HAL_ADC_MspInit+0x290>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800633a:	2301      	movs	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800633e:	2303      	movs	r3, #3
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006342:	2300      	movs	r3, #0
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800634a:	4619      	mov	r1, r3
 800634c:	4882      	ldr	r0, [pc, #520]	; (8006558 <HAL_ADC_MspInit+0x294>)
 800634e:	f7fc fc3d 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006352:	2301      	movs	r3, #1
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006356:	2303      	movs	r3, #3
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800635a:	2300      	movs	r3, #0
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800635e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006362:	4619      	mov	r1, r3
 8006364:	487d      	ldr	r0, [pc, #500]	; (800655c <HAL_ADC_MspInit+0x298>)
 8006366:	f7fc fc31 	bl	8002bcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800636a:	4b7d      	ldr	r3, [pc, #500]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 800636c:	4a7d      	ldr	r2, [pc, #500]	; (8006564 <HAL_ADC_MspInit+0x2a0>)
 800636e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006370:	4b7b      	ldr	r3, [pc, #492]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 8006372:	2200      	movs	r2, #0
 8006374:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006376:	4b7a      	ldr	r3, [pc, #488]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800637c:	4b78      	ldr	r3, [pc, #480]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 800637e:	2200      	movs	r2, #0
 8006380:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006382:	4b77      	ldr	r3, [pc, #476]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 8006384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006388:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800638a:	4b75      	ldr	r3, [pc, #468]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 800638c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006390:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006392:	4b73      	ldr	r3, [pc, #460]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 8006394:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006398:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800639a:	4b71      	ldr	r3, [pc, #452]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 800639c:	2200      	movs	r2, #0
 800639e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80063a0:	4b6f      	ldr	r3, [pc, #444]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 80063a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063a8:	4b6d      	ldr	r3, [pc, #436]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80063ae:	486c      	ldr	r0, [pc, #432]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 80063b0:	f7fc f874 	bl	800249c <HAL_DMA_Init>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80063ba:	f001 f817 	bl	80073ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a67      	ldr	r2, [pc, #412]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38
 80063c4:	4a66      	ldr	r2, [pc, #408]	; (8006560 <HAL_ADC_MspInit+0x29c>)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80063ca:	e0bc      	b.n	8006546 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a65      	ldr	r2, [pc, #404]	; (8006568 <HAL_ADC_MspInit+0x2a4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d159      	bne.n	800648a <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	4b5e      	ldr	r3, [pc, #376]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80063e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063e4:	6453      	str	r3, [r2, #68]	; 0x44
 80063e6:	4b5b      	ldr	r3, [pc, #364]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	4b57      	ldr	r3, [pc, #348]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	4a56      	ldr	r2, [pc, #344]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6313      	str	r3, [r2, #48]	; 0x30
 8006402:	4b54      	ldr	r3, [pc, #336]	; (8006554 <HAL_ADC_MspInit+0x290>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800640e:	2310      	movs	r3, #16
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006412:	2303      	movs	r3, #3
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006416:	2300      	movs	r3, #0
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800641a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800641e:	4619      	mov	r1, r3
 8006420:	484e      	ldr	r0, [pc, #312]	; (800655c <HAL_ADC_MspInit+0x298>)
 8006422:	f7fc fbd3 	bl	8002bcc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006426:	4b51      	ldr	r3, [pc, #324]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006428:	4a51      	ldr	r2, [pc, #324]	; (8006570 <HAL_ADC_MspInit+0x2ac>)
 800642a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800642c:	4b4f      	ldr	r3, [pc, #316]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 800642e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006432:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006434:	4b4d      	ldr	r3, [pc, #308]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800643a:	4b4c      	ldr	r3, [pc, #304]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 800643c:	2200      	movs	r2, #0
 800643e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006440:	4b4a      	ldr	r3, [pc, #296]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006446:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006448:	4b48      	ldr	r3, [pc, #288]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 800644a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800644e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006450:	4b46      	ldr	r3, [pc, #280]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006456:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006458:	4b44      	ldr	r3, [pc, #272]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 800645a:	2200      	movs	r2, #0
 800645c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800645e:	4b43      	ldr	r3, [pc, #268]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006460:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006464:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006466:	4b41      	ldr	r3, [pc, #260]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006468:	2200      	movs	r2, #0
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800646c:	483f      	ldr	r0, [pc, #252]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 800646e:	f7fc f815 	bl	800249c <HAL_DMA_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8006478:	f000 ffb8 	bl	80073ec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3b      	ldr	r2, [pc, #236]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
 8006482:	4a3a      	ldr	r2, [pc, #232]	; (800656c <HAL_ADC_MspInit+0x2a8>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006488:	e05d      	b.n	8006546 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a39      	ldr	r2, [pc, #228]	; (8006574 <HAL_ADC_MspInit+0x2b0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d158      	bne.n	8006546 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	4b2e      	ldr	r3, [pc, #184]	; (8006554 <HAL_ADC_MspInit+0x290>)
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	4a2d      	ldr	r2, [pc, #180]	; (8006554 <HAL_ADC_MspInit+0x290>)
 800649e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064a2:	6453      	str	r3, [r2, #68]	; 0x44
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80064a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064b0:	2300      	movs	r3, #0
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	4b27      	ldr	r3, [pc, #156]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	4a26      	ldr	r2, [pc, #152]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6313      	str	r3, [r2, #48]	; 0x30
 80064c0:	4b24      	ldr	r3, [pc, #144]	; (8006554 <HAL_ADC_MspInit+0x290>)
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80064cc:	2302      	movs	r3, #2
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064d0:	2303      	movs	r3, #3
 80064d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064dc:	4619      	mov	r1, r3
 80064de:	481f      	ldr	r0, [pc, #124]	; (800655c <HAL_ADC_MspInit+0x298>)
 80064e0:	f7fc fb74 	bl	8002bcc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80064e4:	4b24      	ldr	r3, [pc, #144]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 80064e6:	4a25      	ldr	r2, [pc, #148]	; (800657c <HAL_ADC_MspInit+0x2b8>)
 80064e8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 80064ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80064f0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064f2:	4b21      	ldr	r3, [pc, #132]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80064f8:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80064fe:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 8006500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006504:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006506:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 8006508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800650e:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 8006510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006514:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006516:	4b18      	ldr	r3, [pc, #96]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 8006518:	2200      	movs	r2, #0
 800651a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800651c:	4b16      	ldr	r3, [pc, #88]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 800651e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006522:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 8006526:	2200      	movs	r2, #0
 8006528:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800652a:	4813      	ldr	r0, [pc, #76]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 800652c:	f7fb ffb6 	bl	800249c <HAL_DMA_Init>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_ADC_MspInit+0x276>
      Error_Handler();
 8006536:	f000 ff59 	bl	80073ec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a0e      	ldr	r2, [pc, #56]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
 8006540:	4a0d      	ldr	r2, [pc, #52]	; (8006578 <HAL_ADC_MspInit+0x2b4>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006546:	bf00      	nop
 8006548:	3738      	adds	r7, #56	; 0x38
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40012000 	.word	0x40012000
 8006554:	40023800 	.word	0x40023800
 8006558:	40020800 	.word	0x40020800
 800655c:	40020000 	.word	0x40020000
 8006560:	20000344 	.word	0x20000344
 8006564:	40026410 	.word	0x40026410
 8006568:	40012100 	.word	0x40012100
 800656c:	200003a4 	.word	0x200003a4
 8006570:	40026440 	.word	0x40026440
 8006574:	40012200 	.word	0x40012200
 8006578:	20000254 	.word	0x20000254
 800657c:	40026428 	.word	0x40026428

08006580 <ADC_Init>:

/* USER CODE BEGIN 1 */


void ADC_Init(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0

	  // ADC Starting
	  HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 8006584:	2201      	movs	r2, #1
 8006586:	4908      	ldr	r1, [pc, #32]	; (80065a8 <ADC_Init+0x28>)
 8006588:	4808      	ldr	r0, [pc, #32]	; (80065ac <ADC_Init+0x2c>)
 800658a:	f7fa fd51 	bl	8001030 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 800658e:	2201      	movs	r2, #1
 8006590:	4907      	ldr	r1, [pc, #28]	; (80065b0 <ADC_Init+0x30>)
 8006592:	4808      	ldr	r0, [pc, #32]	; (80065b4 <ADC_Init+0x34>)
 8006594:	f7fa fd4c 	bl	8001030 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 8006598:	2201      	movs	r2, #1
 800659a:	4907      	ldr	r1, [pc, #28]	; (80065b8 <ADC_Init+0x38>)
 800659c:	4807      	ldr	r0, [pc, #28]	; (80065bc <ADC_Init+0x3c>)
 800659e:	f7fa fd47 	bl	8001030 <HAL_ADC_Start_DMA>

}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000128 	.word	0x20000128
 80065ac:	200002b4 	.word	0x200002b4
 80065b0:	2000012c 	.word	0x2000012c
 80065b4:	2000020c 	.word	0x2000020c
 80065b8:	20000130 	.word	0x20000130
 80065bc:	200002fc 	.word	0x200002fc

080065c0 <get_current_dq>:


void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6178      	str	r0, [r7, #20]
 80065c8:	6139      	str	r1, [r7, #16]
 80065ca:	60fa      	str	r2, [r7, #12]
 80065cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80065d0:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, &AD_Iu, 1);
 80065d4:	2201      	movs	r2, #1
 80065d6:	49bd      	ldr	r1, [pc, #756]	; (80068cc <get_current_dq+0x30c>)
 80065d8:	48bd      	ldr	r0, [pc, #756]	; (80068d0 <get_current_dq+0x310>)
 80065da:	f7fa fd29 	bl	8001030 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &AD_Iv, 1);
 80065de:	2201      	movs	r2, #1
 80065e0:	49bc      	ldr	r1, [pc, #752]	; (80068d4 <get_current_dq+0x314>)
 80065e2:	48bd      	ldr	r0, [pc, #756]	; (80068d8 <get_current_dq+0x318>)
 80065e4:	f7fa fd24 	bl	8001030 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &AD_Iw, 1);
 80065e8:	2201      	movs	r2, #1
 80065ea:	49bc      	ldr	r1, [pc, #752]	; (80068dc <get_current_dq+0x31c>)
 80065ec:	48bc      	ldr	r0, [pc, #752]	; (80068e0 <get_current_dq+0x320>)
 80065ee:	f7fa fd1f 	bl	8001030 <HAL_ADC_Start_DMA>

#endif

#if _MEDF_ENABLE_

	AD_Iu_buf[pos_MEDF_I] = (int32_t)AD_Iu;
 80065f2:	4bb6      	ldr	r3, [pc, #728]	; (80068cc <get_current_dq+0x30c>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4bbb      	ldr	r3, [pc, #748]	; (80068e4 <get_current_dq+0x324>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4611      	mov	r1, r2
 80065fc:	4aba      	ldr	r2, [pc, #744]	; (80068e8 <get_current_dq+0x328>)
 80065fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iv_buf[pos_MEDF_I] = (int32_t)AD_Iv;
 8006602:	4bb4      	ldr	r3, [pc, #720]	; (80068d4 <get_current_dq+0x314>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4bb7      	ldr	r3, [pc, #732]	; (80068e4 <get_current_dq+0x324>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4611      	mov	r1, r2
 800660c:	4ab7      	ldr	r2, [pc, #732]	; (80068ec <get_current_dq+0x32c>)
 800660e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iw_buf[pos_MEDF_I] = (int32_t)AD_Iw;
 8006612:	4bb2      	ldr	r3, [pc, #712]	; (80068dc <get_current_dq+0x31c>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4bb3      	ldr	r3, [pc, #716]	; (80068e4 <get_current_dq+0x324>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4611      	mov	r1, r2
 800661c:	4ab4      	ldr	r2, [pc, #720]	; (80068f0 <get_current_dq+0x330>)
 800661e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	pos_MEDF_I += 1;
 8006622:	4bb0      	ldr	r3, [pc, #704]	; (80068e4 <get_current_dq+0x324>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	4aae      	ldr	r2, [pc, #696]	; (80068e4 <get_current_dq+0x324>)
 800662a:	6013      	str	r3, [r2, #0]
	if(pos_MEDF_I >= N_MEDF_I)
 800662c:	4bad      	ldr	r3, [pc, #692]	; (80068e4 <get_current_dq+0x324>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b02      	cmp	r3, #2
 8006632:	dd02      	ble.n	800663a <get_current_dq+0x7a>
	{
		pos_MEDF_I = 0;
 8006634:	4bab      	ldr	r3, [pc, #684]	; (80068e4 <get_current_dq+0x324>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
	}

	AD_Iu_MEDF = median3(AD_Iu_buf);
 800663a:	48ab      	ldr	r0, [pc, #684]	; (80068e8 <get_current_dq+0x328>)
 800663c:	f000 f97a 	bl	8006934 <median3>
 8006640:	4602      	mov	r2, r0
 8006642:	4bac      	ldr	r3, [pc, #688]	; (80068f4 <get_current_dq+0x334>)
 8006644:	601a      	str	r2, [r3, #0]
	AD_Iv_MEDF = median3(AD_Iv_buf);
 8006646:	48a9      	ldr	r0, [pc, #676]	; (80068ec <get_current_dq+0x32c>)
 8006648:	f000 f974 	bl	8006934 <median3>
 800664c:	4602      	mov	r2, r0
 800664e:	4baa      	ldr	r3, [pc, #680]	; (80068f8 <get_current_dq+0x338>)
 8006650:	601a      	str	r2, [r3, #0]
	AD_Iw_MEDF = median3(AD_Iw_buf);
 8006652:	48a7      	ldr	r0, [pc, #668]	; (80068f0 <get_current_dq+0x330>)
 8006654:	f000 f96e 	bl	8006934 <median3>
 8006658:	4602      	mov	r2, r0
 800665a:	4ba8      	ldr	r3, [pc, #672]	; (80068fc <get_current_dq+0x33c>)
 800665c:	601a      	str	r2, [r3, #0]

	V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - V_Iu_offset;
 800665e:	4ba5      	ldr	r3, [pc, #660]	; (80068f4 <get_current_dq+0x334>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800666a:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8006900 <get_current_dq+0x340>
 800666e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006676:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8006904 <get_current_dq+0x344>
 800667a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800667e:	4ba2      	ldr	r3, [pc, #648]	; (8006908 <get_current_dq+0x348>)
 8006680:	edd3 7a00 	vldr	s15, [r3]
 8006684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006688:	4ba0      	ldr	r3, [pc, #640]	; (800690c <get_current_dq+0x34c>)
 800668a:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - V_Iv_offset;
 800668e:	4b9a      	ldr	r3, [pc, #616]	; (80068f8 <get_current_dq+0x338>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800669a:	eddf 7a99 	vldr	s15, [pc, #612]	; 8006900 <get_current_dq+0x340>
 800669e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8006904 <get_current_dq+0x344>
 80066aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066ae:	4b98      	ldr	r3, [pc, #608]	; (8006910 <get_current_dq+0x350>)
 80066b0:	edd3 7a00 	vldr	s15, [r3]
 80066b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066b8:	4b96      	ldr	r3, [pc, #600]	; (8006914 <get_current_dq+0x354>)
 80066ba:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - V_Iw_offset;
 80066be:	4b8f      	ldr	r3, [pc, #572]	; (80068fc <get_current_dq+0x33c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80066ca:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8006900 <get_current_dq+0x340>
 80066ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066d6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006904 <get_current_dq+0x344>
 80066da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066de:	4b8e      	ldr	r3, [pc, #568]	; (8006918 <get_current_dq+0x358>)
 80066e0:	edd3 7a00 	vldr	s15, [r3]
 80066e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e8:	4b8c      	ldr	r3, [pc, #560]	; (800691c <get_current_dq+0x35c>)
 80066ea:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw / AD_Range * Vref_AD - V_Iw_offset;

#endif


	switch(SVM_sector)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d875      	bhi.n	80067e0 <get_current_dq+0x220>
 80066f4:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <get_current_dq+0x13c>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006715 	.word	0x08006715
 8006700:	08006759 	.word	0x08006759
 8006704:	08006759 	.word	0x08006759
 8006708:	0800679d 	.word	0x0800679d
 800670c:	0800679d 	.word	0x0800679d
 8006710:	08006715 	.word	0x08006715
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 8006714:	4b7f      	ldr	r3, [pc, #508]	; (8006914 <get_current_dq+0x354>)
 8006716:	edd3 7a00 	vldr	s15, [r3]
 800671a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800671e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006722:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <get_current_dq+0x360>)
 8006724:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 8006728:	4b7c      	ldr	r3, [pc, #496]	; (800691c <get_current_dq+0x35c>)
 800672a:	edd3 7a00 	vldr	s15, [r3]
 800672e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006736:	4b7b      	ldr	r3, [pc, #492]	; (8006924 <get_current_dq+0x364>)
 8006738:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 800673c:	4b78      	ldr	r3, [pc, #480]	; (8006920 <get_current_dq+0x360>)
 800673e:	edd3 7a00 	vldr	s15, [r3]
 8006742:	eeb1 7a67 	vneg.f32	s14, s15
 8006746:	4b77      	ldr	r3, [pc, #476]	; (8006924 <get_current_dq+0x364>)
 8006748:	edd3 7a00 	vldr	s15, [r3]
 800674c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006750:	4b75      	ldr	r3, [pc, #468]	; (8006928 <get_current_dq+0x368>)
 8006752:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006756:	e043      	b.n	80067e0 <get_current_dq+0x220>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 8006758:	4b70      	ldr	r3, [pc, #448]	; (800691c <get_current_dq+0x35c>)
 800675a:	edd3 7a00 	vldr	s15, [r3]
 800675e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006766:	4b6f      	ldr	r3, [pc, #444]	; (8006924 <get_current_dq+0x364>)
 8006768:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 800676c:	4b67      	ldr	r3, [pc, #412]	; (800690c <get_current_dq+0x34c>)
 800676e:	edd3 7a00 	vldr	s15, [r3]
 8006772:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800677a:	4b6b      	ldr	r3, [pc, #428]	; (8006928 <get_current_dq+0x368>)
 800677c:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 8006780:	4b68      	ldr	r3, [pc, #416]	; (8006924 <get_current_dq+0x364>)
 8006782:	edd3 7a00 	vldr	s15, [r3]
 8006786:	eeb1 7a67 	vneg.f32	s14, s15
 800678a:	4b67      	ldr	r3, [pc, #412]	; (8006928 <get_current_dq+0x368>)
 800678c:	edd3 7a00 	vldr	s15, [r3]
 8006790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006794:	4b62      	ldr	r3, [pc, #392]	; (8006920 <get_current_dq+0x360>)
 8006796:	edc3 7a00 	vstr	s15, [r3]
		break;
 800679a:	e021      	b.n	80067e0 <get_current_dq+0x220>

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 800679c:	4b5b      	ldr	r3, [pc, #364]	; (800690c <get_current_dq+0x34c>)
 800679e:	edd3 7a00 	vldr	s15, [r3]
 80067a2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80067a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067aa:	4b5f      	ldr	r3, [pc, #380]	; (8006928 <get_current_dq+0x368>)
 80067ac:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 80067b0:	4b58      	ldr	r3, [pc, #352]	; (8006914 <get_current_dq+0x354>)
 80067b2:	edd3 7a00 	vldr	s15, [r3]
 80067b6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80067ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067be:	4b58      	ldr	r3, [pc, #352]	; (8006920 <get_current_dq+0x360>)
 80067c0:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 80067c4:	4b58      	ldr	r3, [pc, #352]	; (8006928 <get_current_dq+0x368>)
 80067c6:	edd3 7a00 	vldr	s15, [r3]
 80067ca:	eeb1 7a67 	vneg.f32	s14, s15
 80067ce:	4b54      	ldr	r3, [pc, #336]	; (8006920 <get_current_dq+0x360>)
 80067d0:	edd3 7a00 	vldr	s15, [r3]
 80067d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067d8:	4b52      	ldr	r3, [pc, #328]	; (8006924 <get_current_dq+0x364>)
 80067da:	edc3 7a00 	vstr	s15, [r3]
		break;
 80067de:	bf00      	nop
	}

	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 80067e0:	4b51      	ldr	r3, [pc, #324]	; (8006928 <get_current_dq+0x368>)
 80067e2:	ed93 7a00 	vldr	s14, [r3]
 80067e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80067ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80067f2:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80067f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80067fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80067fe:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 800692c <get_current_dq+0x36c>
 8006802:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006806:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800680a:	4b45      	ldr	r3, [pc, #276]	; (8006920 <get_current_dq+0x360>)
 800680c:	edd3 7a00 	vldr	s15, [r3]
 8006810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006818:	edd7 7a02 	vldr	s15, [r7, #8]
 800681c:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006820:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006824:	edd7 7a01 	vldr	s15, [r7, #4]
 8006828:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800692c <get_current_dq+0x36c>
 800682c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006830:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006834:	4b3b      	ldr	r3, [pc, #236]	; (8006924 <get_current_dq+0x364>)
 8006836:	edd3 7a00 	vldr	s15, [r3]
 800683a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800683e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006842:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006930 <get_current_dq+0x370>
 8006846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 8006850:	4b35      	ldr	r3, [pc, #212]	; (8006928 <get_current_dq+0x368>)
 8006852:	edd3 7a00 	vldr	s15, [r3]
 8006856:	eeb1 7a67 	vneg.f32	s14, s15
 800685a:	edd7 7a01 	vldr	s15, [r7, #4]
 800685e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006862:	edd7 7a01 	vldr	s15, [r7, #4]
 8006866:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800686a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800686e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006872:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800692c <get_current_dq+0x36c>
 8006876:	ee67 7a86 	vmul.f32	s15, s15, s12
 800687a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800687e:	4b28      	ldr	r3, [pc, #160]	; (8006920 <get_current_dq+0x360>)
 8006880:	edd3 7a00 	vldr	s15, [r3]
 8006884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800688c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006890:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006894:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006898:	edd7 7a02 	vldr	s15, [r7, #8]
 800689c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800692c <get_current_dq+0x36c>
 80068a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80068a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068a8:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <get_current_dq+0x364>)
 80068aa:	edd3 7a00 	vldr	s15, [r3]
 80068ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006930 <get_current_dq+0x370>
 80068ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	edc3 7a00 	vstr	s15, [r3]


	return;
 80068c4:	bf00      	nop

}
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000128 	.word	0x20000128
 80068d0:	200002b4 	.word	0x200002b4
 80068d4:	2000012c 	.word	0x2000012c
 80068d8:	2000020c 	.word	0x2000020c
 80068dc:	20000130 	.word	0x20000130
 80068e0:	200002fc 	.word	0x200002fc
 80068e4:	2000014c 	.word	0x2000014c
 80068e8:	20000150 	.word	0x20000150
 80068ec:	2000015c 	.word	0x2000015c
 80068f0:	20000168 	.word	0x20000168
 80068f4:	20000174 	.word	0x20000174
 80068f8:	20000178 	.word	0x20000178
 80068fc:	2000017c 	.word	0x2000017c
 8006900:	00001000 	.word	0x00001000
 8006904:	40533333 	.word	0x40533333
 8006908:	20000024 	.word	0x20000024
 800690c:	20000134 	.word	0x20000134
 8006910:	20000028 	.word	0x20000028
 8006914:	20000138 	.word	0x20000138
 8006918:	2000002c 	.word	0x2000002c
 800691c:	2000013c 	.word	0x2000013c
 8006920:	20000144 	.word	0x20000144
 8006924:	20000148 	.word	0x20000148
 8006928:	20000140 	.word	0x20000140
 800692c:	3f5ae148 	.word	0x3f5ae148
 8006930:	3f510625 	.word	0x3f510625

08006934 <median3>:



extern int32_t median3(int32_t *buf)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3304      	adds	r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	da17      	bge.n	800697a <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3308      	adds	r3, #8
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	da02      	bge.n	800695e <median3+0x2a>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	e025      	b.n	80069aa <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3308      	adds	r3, #8
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3304      	adds	r3, #4
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	da02      	bge.n	8006974 <median3+0x40>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	e01a      	b.n	80069aa <median3+0x76>
		else						return buf[1];
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	e017      	b.n	80069aa <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3308      	adds	r3, #8
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	da02      	bge.n	8006990 <median3+0x5c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	e00c      	b.n	80069aa <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3308      	adds	r3, #8
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3304      	adds	r3, #4
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	da02      	bge.n	80069a6 <median3+0x72>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	e001      	b.n	80069aa <median3+0x76>
		else						return buf[0];
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80069bc:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069be:	4a19      	ldr	r2, [pc, #100]	; (8006a24 <MX_CAN1_Init+0x6c>)
 80069c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80069c2:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069c4:	2204      	movs	r2, #4
 80069c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80069ce:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80069d6:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069d8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80069dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80069de:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069e4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80069e6:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <MX_CAN1_Init+0x68>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80069fe:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <MX_CAN1_Init+0x68>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <MX_CAN1_Init+0x68>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006a0a:	4805      	ldr	r0, [pc, #20]	; (8006a20 <MX_CAN1_Init+0x68>)
 8006a0c:	f7fa fed0 	bl	80017b0 <HAL_CAN_Init>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8006a16:	f000 fce9 	bl	80073ec <Error_Handler>
  }

}
 8006a1a:	bf00      	nop
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000450 	.word	0x20000450
 8006a24:	40006400 	.word	0x40006400

08006a28 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	609a      	str	r2, [r3, #8]
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a21      	ldr	r2, [pc, #132]	; (8006acc <HAL_CAN_MspInit+0xa4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d13c      	bne.n	8006ac4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <HAL_CAN_MspInit+0xa8>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <HAL_CAN_MspInit+0xa8>)
 8006a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a58:	6413      	str	r3, [r2, #64]	; 0x40
 8006a5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <HAL_CAN_MspInit+0xa8>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <HAL_CAN_MspInit+0xa8>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <HAL_CAN_MspInit+0xa8>)
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	6313      	str	r3, [r2, #48]	; 0x30
 8006a76:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <HAL_CAN_MspInit+0xa8>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a90:	2303      	movs	r3, #3
 8006a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006a94:	2309      	movs	r3, #9
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	480d      	ldr	r0, [pc, #52]	; (8006ad4 <HAL_CAN_MspInit+0xac>)
 8006aa0:	f7fc f894 	bl	8002bcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	2013      	movs	r0, #19
 8006aaa:	f7fb fcc0 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8006aae:	2013      	movs	r0, #19
 8006ab0:	f7fb fcd9 	bl	8002466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	2014      	movs	r0, #20
 8006aba:	f7fb fcb8 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006abe:	2014      	movs	r0, #20
 8006ac0:	f7fb fcd1 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3728      	adds	r7, #40	; 0x28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40006400 	.word	0x40006400
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	40020000 	.word	0x40020000

08006ad8 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0


	  sFilterConfig.FilterBank = 0;
 8006adc:	4b1c      	ldr	r3, [pc, #112]	; (8006b50 <CAN_Init+0x78>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <CAN_Init+0x78>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006ae8:	4b19      	ldr	r3, [pc, #100]	; (8006b50 <CAN_Init+0x78>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <CAN_Init+0x78>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 8006af4:	4b16      	ldr	r3, [pc, #88]	; (8006b50 <CAN_Init+0x78>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8006afa:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <CAN_Init+0x78>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <CAN_Init+0x78>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <CAN_Init+0x78>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 8006b0c:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <CAN_Init+0x78>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	621a      	str	r2, [r3, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 8006b12:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <CAN_Init+0x78>)
 8006b14:	220e      	movs	r2, #14
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24

	  if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8006b18:	490d      	ldr	r1, [pc, #52]	; (8006b50 <CAN_Init+0x78>)
 8006b1a:	480e      	ldr	r0, [pc, #56]	; (8006b54 <CAN_Init+0x7c>)
 8006b1c:	f7fa ff44 	bl	80019a8 <HAL_CAN_ConfigFilter>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <CAN_Init+0x52>
	  {
		  Error_Handler();
 8006b26:	f000 fc61 	bl	80073ec <Error_Handler>
	  }

	  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8006b2a:	480a      	ldr	r0, [pc, #40]	; (8006b54 <CAN_Init+0x7c>)
 8006b2c:	f7fb f81c 	bl	8001b68 <HAL_CAN_Start>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <CAN_Init+0x62>
	  {
		  Error_Handler();
 8006b36:	f000 fc59 	bl	80073ec <Error_Handler>
	  }

	  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8006b3a:	2103      	movs	r1, #3
 8006b3c:	4805      	ldr	r0, [pc, #20]	; (8006b54 <CAN_Init+0x7c>)
 8006b3e:	f7fb f96a 	bl	8001e16 <HAL_CAN_ActivateNotification>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <CAN_Init+0x74>
	  {
		  Error_Handler();
 8006b48:	f000 fc50 	bl	80073ec <Error_Handler>
	  }


}
 8006b4c:	bf00      	nop
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000404 	.word	0x20000404
 8006b54:	20000450 	.word	0x20000450

08006b58 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006b60:	2200      	movs	r2, #0
 8006b62:	2140      	movs	r1, #64	; 0x40
 8006b64:	4803      	ldr	r0, [pc, #12]	; (8006b74 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8006b66:	f7fc f9c3 	bl	8002ef0 <HAL_GPIO_WritePin>

}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	40020400 	.word	0x40020400

08006b78 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006b80:	2200      	movs	r2, #0
 8006b82:	2140      	movs	r1, #64	; 0x40
 8006b84:	4803      	ldr	r0, [pc, #12]	; (8006b94 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8006b86:	f7fc f9b3 	bl	8002ef0 <HAL_GPIO_WritePin>

}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40020400 	.word	0x40020400

08006b98 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2140      	movs	r1, #64	; 0x40
 8006ba4:	4803      	ldr	r0, [pc, #12]	; (8006bb4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8006ba6:	f7fc f9a3 	bl	8002ef0 <HAL_GPIO_WritePin>

}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40020400 	.word	0x40020400

08006bb8 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 8006bc0:	4b14      	ldr	r3, [pc, #80]	; (8006c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fb f812 	bl	8001bf0 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 8006bcc:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	701a      	strb	r2, [r3, #0]

#if _ASR_ENABLE_ && !_APR_ENABLE_
	if(can1RxHeader.StdId == 0x004 && can1RxHeader.DLC == 0x4)
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d112      	bne.n	8006c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8006bda:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d10e      	bne.n	8006c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		controlRef.byte[0] = can1RxData[0];
 8006be2:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 8006bee:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006bf0:	789b      	ldrb	r3, [r3, #2]
 8006bf2:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 8006bf4:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006bf6:	78db      	ldrb	r3, [r3, #3]
 8006bf8:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8006bfe:	6013      	str	r3, [r2, #0]
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8006c00:	2201      	movs	r2, #1
 8006c02:	2140      	movs	r1, #64	; 0x40
 8006c04:	4807      	ldr	r0, [pc, #28]	; (8006c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8006c06:	f7fc f973 	bl	8002ef0 <HAL_GPIO_WritePin>

}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000448 	.word	0x20000448
 8006c18:	2000042c 	.word	0x2000042c
 8006c1c:	20000180 	.word	0x20000180
 8006c20:	200000fc 	.word	0x200000fc
 8006c24:	40020000 	.word	0x40020000

08006c28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006c2e:	2300      	movs	r3, #0
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <MX_DMA_Init+0x5c>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <MX_DMA_Init+0x5c>)
 8006c38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <MX_DMA_Init+0x5c>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	2038      	movs	r0, #56	; 0x38
 8006c50:	f7fb fbed 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006c54:	2038      	movs	r0, #56	; 0x38
 8006c56:	f7fb fc06 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	2039      	movs	r0, #57	; 0x39
 8006c60:	f7fb fbe5 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006c64:	2039      	movs	r0, #57	; 0x39
 8006c66:	f7fb fbfe 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	203a      	movs	r0, #58	; 0x3a
 8006c70:	f7fb fbdd 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006c74:	203a      	movs	r0, #58	; 0x3a
 8006c76:	f7fb fbf6 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40023800 	.word	0x40023800

08006c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c8e:	f107 0314 	add.w	r3, r7, #20
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	605a      	str	r2, [r3, #4]
 8006c98:	609a      	str	r2, [r3, #8]
 8006c9a:	60da      	str	r2, [r3, #12]
 8006c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	4b45      	ldr	r3, [pc, #276]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	4a44      	ldr	r2, [pc, #272]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006ca8:	f043 0304 	orr.w	r3, r3, #4
 8006cac:	6313      	str	r3, [r2, #48]	; 0x30
 8006cae:	4b42      	ldr	r3, [pc, #264]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	4b3e      	ldr	r3, [pc, #248]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	4a3d      	ldr	r2, [pc, #244]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cca:	4b3b      	ldr	r3, [pc, #236]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]
 8006cda:	4b37      	ldr	r3, [pc, #220]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	4a36      	ldr	r2, [pc, #216]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006ce0:	f043 0301 	orr.w	r3, r3, #1
 8006ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce6:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	60bb      	str	r3, [r7, #8]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	607b      	str	r3, [r7, #4]
 8006cf6:	4b30      	ldr	r3, [pc, #192]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	4a2f      	ldr	r2, [pc, #188]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006cfc:	f043 0302 	orr.w	r3, r3, #2
 8006d00:	6313      	str	r3, [r2, #48]	; 0x30
 8006d02:	4b2d      	ldr	r3, [pc, #180]	; (8006db8 <MX_GPIO_Init+0x130>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8006d14:	4829      	ldr	r0, [pc, #164]	; (8006dbc <MX_GPIO_Init+0x134>)
 8006d16:	f7fc f8eb 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f241 0150 	movw	r1, #4176	; 0x1050
 8006d20:	4827      	ldr	r0, [pc, #156]	; (8006dc0 <MX_GPIO_Init+0x138>)
 8006d22:	f7fc f8e5 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006d2c:	4b25      	ldr	r3, [pc, #148]	; (8006dc4 <MX_GPIO_Init+0x13c>)
 8006d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4823      	ldr	r0, [pc, #140]	; (8006dc8 <MX_GPIO_Init+0x140>)
 8006d3c:	f7fb ff46 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 8006d40:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8006d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d46:	2301      	movs	r3, #1
 8006d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d52:	f107 0314 	add.w	r3, r7, #20
 8006d56:	4619      	mov	r1, r3
 8006d58:	4818      	ldr	r0, [pc, #96]	; (8006dbc <MX_GPIO_Init+0x134>)
 8006d5a:	f7fb ff37 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8006d5e:	f241 0350 	movw	r3, #4176	; 0x1050
 8006d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d64:	2301      	movs	r3, #1
 8006d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d70:	f107 0314 	add.w	r3, r7, #20
 8006d74:	4619      	mov	r1, r3
 8006d76:	4812      	ldr	r0, [pc, #72]	; (8006dc0 <MX_GPIO_Init+0x138>)
 8006d78:	f7fb ff28 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 8006d7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d86:	2301      	movs	r3, #1
 8006d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d8a:	f107 0314 	add.w	r3, r7, #20
 8006d8e:	4619      	mov	r1, r3
 8006d90:	480b      	ldr	r0, [pc, #44]	; (8006dc0 <MX_GPIO_Init+0x138>)
 8006d92:	f7fb ff1b 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 8006d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4619      	mov	r1, r3
 8006daa:	4804      	ldr	r0, [pc, #16]	; (8006dbc <MX_GPIO_Init+0x134>)
 8006dac:	f7fb ff0e 	bl	8002bcc <HAL_GPIO_Init>

}
 8006db0:	bf00      	nop
 8006db2:	3728      	adds	r7, #40	; 0x28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	40020000 	.word	0x40020000
 8006dc0:	40020400 	.word	0x40020400
 8006dc4:	10210000 	.word	0x10210000
 8006dc8:	40020800 	.word	0x40020800

08006dcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006dd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006dd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d013      	beq.n	8006e0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006de4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006de8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006dec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006df4:	e000      	b.n	8006df8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8006df6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006df8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0f9      	beq.n	8006df6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006e02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006e0c:	687b      	ldr	r3, [r7, #4]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e009      	b.n	8006e40 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	60ba      	str	r2, [r7, #8]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff ffc9 	bl	8006dcc <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	dbf1      	blt.n	8006e2c <_write+0x12>
  }
  return len;
 8006e48:	687b      	ldr	r3, [r7, #4]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	0000      	movs	r0, r0
 8006e54:	0000      	movs	r0, r0
	...

08006e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006e62:	f7fa f80d 	bl	8000e80 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006e66:	f000 fa55 	bl	8007314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006e6a:	f7ff ff0d 	bl	8006c88 <MX_GPIO_Init>
  MX_DMA_Init();
 8006e6e:	f7ff fedb 	bl	8006c28 <MX_DMA_Init>
  MX_ADC1_Init();
 8006e72:	f7ff f931 	bl	80060d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006e76:	f7ff f981 	bl	800617c <MX_ADC2_Init>
  MX_ADC3_Init();
 8006e7a:	f7ff f9d1 	bl	8006220 <MX_ADC3_Init>
  MX_CAN1_Init();
 8006e7e:	f7ff fd9b 	bl	80069b8 <MX_CAN1_Init>
  MX_SPI2_Init();
 8006e82:	f000 fe69 	bl	8007b58 <MX_SPI2_Init>
  MX_SPI3_Init();
 8006e86:	f000 fe9f 	bl	8007bc8 <MX_SPI3_Init>
  MX_TIM8_Init();
 8006e8a:	f001 fa9d 	bl	80083c8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8006e8e:	f001 fc39 	bl	8008704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  ADC_Init();
 8006e92:	f7ff fb75 	bl	8006580 <ADC_Init>

  /********** CAN Setting **********/


  CAN_Init();
 8006e96:	f7ff fe1f 	bl	8006ad8 <CAN_Init>


  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 8006e9a:	489b      	ldr	r0, [pc, #620]	; (8007108 <main+0x2b0>)
 8006e9c:	f001 fd64 	bl	8008968 <puts>

  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ea6:	4899      	ldr	r0, [pc, #612]	; (800710c <main+0x2b4>)
 8006ea8:	f7fc f822 	bl	8002ef0 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8006eac:	2201      	movs	r2, #1
 8006eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eb2:	4896      	ldr	r0, [pc, #600]	; (800710c <main+0x2b4>)
 8006eb4:	f7fc f81c 	bl	8002ef0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8006eb8:	200a      	movs	r0, #10
 8006eba:	f7fa f853 	bl	8000f64 <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ec4:	4891      	ldr	r0, [pc, #580]	; (800710c <main+0x2b4>)
 8006ec6:	f7fc f813 	bl	8002ef0 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2140      	movs	r1, #64	; 0x40
 8006ece:	488f      	ldr	r0, [pc, #572]	; (800710c <main+0x2b4>)
 8006ed0:	f7fc f80e 	bl	8002ef0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2110      	movs	r1, #16
 8006ed8:	488d      	ldr	r0, [pc, #564]	; (8007110 <main+0x2b8>)
 8006eda:	f7fc f809 	bl	8002ef0 <HAL_GPIO_WritePin>




  TIM_Init();
 8006ede:	f001 fbcd 	bl	800867c <TIM_Init>

  SPI_Init();
 8006ee2:	f000 ff9b 	bl	8007e1c <SPI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ASR_flg == 1)
 8006ee6:	4b8b      	ldr	r3, [pc, #556]	; (8007114 <main+0x2bc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d1fb      	bne.n	8006ee6 <main+0x8e>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 8006eee:	2110      	movs	r1, #16
 8006ef0:	4887      	ldr	r0, [pc, #540]	; (8007110 <main+0x2b8>)
 8006ef2:	f7fc f816 	bl	8002f22 <HAL_GPIO_TogglePin>


		  if(forced_commute_state > 0)
 8006ef6:	4b88      	ldr	r3, [pc, #544]	; (8007118 <main+0x2c0>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 81e0 	beq.w	80072c2 <main+0x46a>
		  {

			  switch(forced_commute_state)
 8006f02:	4b85      	ldr	r3, [pc, #532]	; (8007118 <main+0x2c0>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	f200 81db 	bhi.w	80072c6 <main+0x46e>
 8006f10:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <main+0xc0>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f29 	.word	0x08006f29
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08007065 	.word	0x08007065
 8006f24:	08007089 	.word	0x08007089
			  {
			  case 1:
				  if(forced_commute_count < 500)
 8006f28:	4b7c      	ldr	r3, [pc, #496]	; (800711c <main+0x2c4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006f30:	d205      	bcs.n	8006f3e <main+0xe6>
					  forced_commute_count += 1;
 8006f32:	4b7a      	ldr	r3, [pc, #488]	; (800711c <main+0x2c4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3301      	adds	r3, #1
 8006f38:	4a78      	ldr	r2, [pc, #480]	; (800711c <main+0x2c4>)
 8006f3a:	6013      	str	r3, [r2, #0]
				  else
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 2;
				  }
				  break;
 8006f3c:	e1c4      	b.n	80072c8 <main+0x470>
					  forced_commute_count = 0;
 8006f3e:	4b77      	ldr	r3, [pc, #476]	; (800711c <main+0x2c4>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 2;
 8006f44:	4b74      	ldr	r3, [pc, #464]	; (8007118 <main+0x2c0>)
 8006f46:	2202      	movs	r2, #2
 8006f48:	701a      	strb	r2, [r3, #0]
				  break;
 8006f4a:	e1bd      	b.n	80072c8 <main+0x470>

			  case 2:
				  if(forced_commute_count < FORCED_COMMUTE_STEPS)
 8006f4c:	4b73      	ldr	r3, [pc, #460]	; (800711c <main+0x2c4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f54:	d27f      	bcs.n	8007056 <main+0x1fe>
				  {
#if _FC_DUMP_
					  sensedTheta_f[forced_commute_count] = theta;
#endif
					  sensed_theta_error = forced_theta - theta;
 8006f56:	4b72      	ldr	r3, [pc, #456]	; (8007120 <main+0x2c8>)
 8006f58:	ed93 7a00 	vldr	s14, [r3]
 8006f5c:	4b71      	ldr	r3, [pc, #452]	; (8007124 <main+0x2cc>)
 8006f5e:	edd3 7a00 	vldr	s15, [r3]
 8006f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f66:	4b70      	ldr	r3, [pc, #448]	; (8007128 <main+0x2d0>)
 8006f68:	edc3 7a00 	vstr	s15, [r3]
					  if(sensed_theta_error < -M_PI)		sensed_theta_error += 2.0f * M_PI;
 8006f6c:	4b6e      	ldr	r3, [pc, #440]	; (8007128 <main+0x2d0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7f9 faad 	bl	80004d0 <__aeabi_f2d>
 8006f76:	a35e      	add	r3, pc, #376	; (adr r3, 80070f0 <main+0x298>)
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f7f9 fd72 	bl	8000a64 <__aeabi_dcmplt>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d013      	beq.n	8006fae <main+0x156>
 8006f86:	4b68      	ldr	r3, [pc, #416]	; (8007128 <main+0x2d0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7f9 faa0 	bl	80004d0 <__aeabi_f2d>
 8006f90:	a359      	add	r3, pc, #356	; (adr r3, 80070f8 <main+0x2a0>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 f93d 	bl	8000214 <__adddf3>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	f7f9 fd9d 	bl	8000ae0 <__aeabi_d2f>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <main+0x2d0>)
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e01f      	b.n	8006fee <main+0x196>
					  else if(sensed_theta_error > M_PI)	sensed_theta_error -= 2.0f * M_PI;
 8006fae:	4b5e      	ldr	r3, [pc, #376]	; (8007128 <main+0x2d0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7f9 fa8c 	bl	80004d0 <__aeabi_f2d>
 8006fb8:	a351      	add	r3, pc, #324	; (adr r3, 8007100 <main+0x2a8>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 fd6f 	bl	8000aa0 <__aeabi_dcmpgt>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d012      	beq.n	8006fee <main+0x196>
 8006fc8:	4b57      	ldr	r3, [pc, #348]	; (8007128 <main+0x2d0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7f9 fa7f 	bl	80004d0 <__aeabi_f2d>
 8006fd2:	a349      	add	r3, pc, #292	; (adr r3, 80070f8 <main+0x2a0>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f7f9 f91a 	bl	8000210 <__aeabi_dsub>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	f7f9 fd7c 	bl	8000ae0 <__aeabi_d2f>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b4f      	ldr	r3, [pc, #316]	; (8007128 <main+0x2d0>)
 8006fec:	601a      	str	r2, [r3, #0]
					  sensed_theta_error_sum += sensed_theta_error;
 8006fee:	4b4e      	ldr	r3, [pc, #312]	; (8007128 <main+0x2d0>)
 8006ff0:	ed93 7a00 	vldr	s14, [r3]
 8006ff4:	4b4d      	ldr	r3, [pc, #308]	; (800712c <main+0x2d4>)
 8006ff6:	edd3 7a00 	vldr	s15, [r3]
 8006ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ffe:	4b4b      	ldr	r3, [pc, #300]	; (800712c <main+0x2d4>)
 8007000:	edc3 7a00 	vstr	s15, [r3]
					  forced_theta = forced_commute_count * 2.0f * M_PI / FORCED_COMMUTE_STEPS;
 8007004:	4b45      	ldr	r3, [pc, #276]	; (800711c <main+0x2c4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007010:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007014:	ee17 0a90 	vmov	r0, s15
 8007018:	f7f9 fa5a 	bl	80004d0 <__aeabi_f2d>
 800701c:	a338      	add	r3, pc, #224	; (adr r3, 8007100 <main+0x2a8>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 faad 	bl	8000580 <__aeabi_dmul>
 8007026:	4603      	mov	r3, r0
 8007028:	460c      	mov	r4, r1
 800702a:	4618      	mov	r0, r3
 800702c:	4621      	mov	r1, r4
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	4b3f      	ldr	r3, [pc, #252]	; (8007130 <main+0x2d8>)
 8007034:	f7f9 fbce 	bl	80007d4 <__aeabi_ddiv>
 8007038:	4603      	mov	r3, r0
 800703a:	460c      	mov	r4, r1
 800703c:	4618      	mov	r0, r3
 800703e:	4621      	mov	r1, r4
 8007040:	f7f9 fd4e 	bl	8000ae0 <__aeabi_d2f>
 8007044:	4602      	mov	r2, r0
 8007046:	4b36      	ldr	r3, [pc, #216]	; (8007120 <main+0x2c8>)
 8007048:	601a      	str	r2, [r3, #0]
					  forced_commute_count += 1;
 800704a:	4b34      	ldr	r3, [pc, #208]	; (800711c <main+0x2c4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	4a32      	ldr	r2, [pc, #200]	; (800711c <main+0x2c4>)
 8007052:	6013      	str	r3, [r2, #0]
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 3;
					  break;
				  }
				  break;
 8007054:	e138      	b.n	80072c8 <main+0x470>
					  forced_commute_count = 0;
 8007056:	4b31      	ldr	r3, [pc, #196]	; (800711c <main+0x2c4>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 3;
 800705c:	4b2e      	ldr	r3, [pc, #184]	; (8007118 <main+0x2c0>)
 800705e:	2203      	movs	r2, #3
 8007060:	701a      	strb	r2, [r3, #0]
					  break;
 8007062:	e131      	b.n	80072c8 <main+0x470>

			  case 3:
				  if(forced_commute_count < 500)
 8007064:	4b2d      	ldr	r3, [pc, #180]	; (800711c <main+0x2c4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800706c:	d205      	bcs.n	800707a <main+0x222>
					  forced_commute_count += 1;
 800706e:	4b2b      	ldr	r3, [pc, #172]	; (800711c <main+0x2c4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3301      	adds	r3, #1
 8007074:	4a29      	ldr	r2, [pc, #164]	; (800711c <main+0x2c4>)
 8007076:	6013      	str	r3, [r2, #0]
				  else
				  {
					  forced_commute_count = 0;
					  forced_commute_state = 4;
				  }
				  break;
 8007078:	e126      	b.n	80072c8 <main+0x470>
					  forced_commute_count = 0;
 800707a:	4b28      	ldr	r3, [pc, #160]	; (800711c <main+0x2c4>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 4;
 8007080:	4b25      	ldr	r3, [pc, #148]	; (8007118 <main+0x2c0>)
 8007082:	2204      	movs	r2, #4
 8007084:	701a      	strb	r2, [r3, #0]
				  break;
 8007086:	e11f      	b.n	80072c8 <main+0x470>

			  case 4:
				  if(forced_commute_count < FORCED_COMMUTE_STEPS)
 8007088:	4b24      	ldr	r3, [pc, #144]	; (800711c <main+0x2c4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007090:	f080 80a7 	bcs.w	80071e2 <main+0x38a>
				  {
#if _FC_DUMP_
					  sensedTheta_b[FORCED_COMMUTE_STEPS - forced_commute_count - 1] = theta;
#endif
					  sensed_theta_error = forced_theta - theta;
 8007094:	4b22      	ldr	r3, [pc, #136]	; (8007120 <main+0x2c8>)
 8007096:	ed93 7a00 	vldr	s14, [r3]
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <main+0x2cc>)
 800709c:	edd3 7a00 	vldr	s15, [r3]
 80070a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070a4:	4b20      	ldr	r3, [pc, #128]	; (8007128 <main+0x2d0>)
 80070a6:	edc3 7a00 	vstr	s15, [r3]
					  if(sensed_theta_error < -M_PI)		sensed_theta_error += 2.0f * M_PI;
 80070aa:	4b1f      	ldr	r3, [pc, #124]	; (8007128 <main+0x2d0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 fa0e 	bl	80004d0 <__aeabi_f2d>
 80070b4:	a30e      	add	r3, pc, #56	; (adr r3, 80070f0 <main+0x298>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f7f9 fcd3 	bl	8000a64 <__aeabi_dcmplt>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d037      	beq.n	8007134 <main+0x2dc>
 80070c4:	4b18      	ldr	r3, [pc, #96]	; (8007128 <main+0x2d0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7f9 fa01 	bl	80004d0 <__aeabi_f2d>
 80070ce:	a30a      	add	r3, pc, #40	; (adr r3, 80070f8 <main+0x2a0>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 f89e 	bl	8000214 <__adddf3>
 80070d8:	4603      	mov	r3, r0
 80070da:	460c      	mov	r4, r1
 80070dc:	4618      	mov	r0, r3
 80070de:	4621      	mov	r1, r4
 80070e0:	f7f9 fcfe 	bl	8000ae0 <__aeabi_d2f>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <main+0x2d0>)
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e043      	b.n	8007174 <main+0x31c>
 80070ec:	f3af 8000 	nop.w
 80070f0:	54442d18 	.word	0x54442d18
 80070f4:	c00921fb 	.word	0xc00921fb
 80070f8:	54442d18 	.word	0x54442d18
 80070fc:	401921fb 	.word	0x401921fb
 8007100:	54442d18 	.word	0x54442d18
 8007104:	400921fb 	.word	0x400921fb
 8007108:	08009650 	.word	0x08009650
 800710c:	40020000 	.word	0x40020000
 8007110:	40020400 	.word	0x40020400
 8007114:	20000110 	.word	0x20000110
 8007118:	20000181 	.word	0x20000181
 800711c:	20000188 	.word	0x20000188
 8007120:	20000184 	.word	0x20000184
 8007124:	200001dc 	.word	0x200001dc
 8007128:	20000478 	.word	0x20000478
 800712c:	2000018c 	.word	0x2000018c
 8007130:	409f4000 	.word	0x409f4000
					  else if(sensed_theta_error > M_PI)	sensed_theta_error -= 2.0f * M_PI;
 8007134:	4b6e      	ldr	r3, [pc, #440]	; (80072f0 <main+0x498>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	f7f9 f9c9 	bl	80004d0 <__aeabi_f2d>
 800713e:	a366      	add	r3, pc, #408	; (adr r3, 80072d8 <main+0x480>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f7f9 fcac 	bl	8000aa0 <__aeabi_dcmpgt>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d012      	beq.n	8007174 <main+0x31c>
 800714e:	4b68      	ldr	r3, [pc, #416]	; (80072f0 <main+0x498>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 f9bc 	bl	80004d0 <__aeabi_f2d>
 8007158:	a361      	add	r3, pc, #388	; (adr r3, 80072e0 <main+0x488>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 f857 	bl	8000210 <__aeabi_dsub>
 8007162:	4603      	mov	r3, r0
 8007164:	460c      	mov	r4, r1
 8007166:	4618      	mov	r0, r3
 8007168:	4621      	mov	r1, r4
 800716a:	f7f9 fcb9 	bl	8000ae0 <__aeabi_d2f>
 800716e:	4602      	mov	r2, r0
 8007170:	4b5f      	ldr	r3, [pc, #380]	; (80072f0 <main+0x498>)
 8007172:	601a      	str	r2, [r3, #0]
					  sensed_theta_error_sum += sensed_theta_error;
 8007174:	4b5e      	ldr	r3, [pc, #376]	; (80072f0 <main+0x498>)
 8007176:	ed93 7a00 	vldr	s14, [r3]
 800717a:	4b5e      	ldr	r3, [pc, #376]	; (80072f4 <main+0x49c>)
 800717c:	edd3 7a00 	vldr	s15, [r3]
 8007180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007184:	4b5b      	ldr	r3, [pc, #364]	; (80072f4 <main+0x49c>)
 8007186:	edc3 7a00 	vstr	s15, [r3]
					  forced_theta = (FORCED_COMMUTE_STEPS - forced_commute_count - 1) * 2.0f * M_PI / FORCED_COMMUTE_STEPS;
 800718a:	4b5b      	ldr	r3, [pc, #364]	; (80072f8 <main+0x4a0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 8007192:	3307      	adds	r3, #7
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80071a0:	ee17 0a90 	vmov	r0, s15
 80071a4:	f7f9 f994 	bl	80004d0 <__aeabi_f2d>
 80071a8:	a34b      	add	r3, pc, #300	; (adr r3, 80072d8 <main+0x480>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 f9e7 	bl	8000580 <__aeabi_dmul>
 80071b2:	4603      	mov	r3, r0
 80071b4:	460c      	mov	r4, r1
 80071b6:	4618      	mov	r0, r3
 80071b8:	4621      	mov	r1, r4
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	4b4f      	ldr	r3, [pc, #316]	; (80072fc <main+0x4a4>)
 80071c0:	f7f9 fb08 	bl	80007d4 <__aeabi_ddiv>
 80071c4:	4603      	mov	r3, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	4618      	mov	r0, r3
 80071ca:	4621      	mov	r1, r4
 80071cc:	f7f9 fc88 	bl	8000ae0 <__aeabi_d2f>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b4b      	ldr	r3, [pc, #300]	; (8007300 <main+0x4a8>)
 80071d4:	601a      	str	r2, [r3, #0]
					  forced_commute_count += 1;
 80071d6:	4b48      	ldr	r3, [pc, #288]	; (80072f8 <main+0x4a0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	4a46      	ldr	r2, [pc, #280]	; (80072f8 <main+0x4a0>)
 80071de:	6013      	str	r3, [r2, #0]
					  else if(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
					  forced_commute_count = 0;
					  forced_commute_state = 0;
					  break;
				  }
				  break;
 80071e0:	e072      	b.n	80072c8 <main+0x470>
					  theta_re_offset = fmod(sensed_theta_error_sum * 0.5f / FORCED_COMMUTE_STEPS * POLES / 2, 2.0f * M_PI);
 80071e2:	4b44      	ldr	r3, [pc, #272]	; (80072f4 <main+0x49c>)
 80071e4:	edd3 7a00 	vldr	s15, [r3]
 80071e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071f0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8007304 <main+0x4ac>
 80071f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071f8:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80071fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007200:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007204:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007208:	ee16 0a90 	vmov	r0, s13
 800720c:	f7f9 f960 	bl	80004d0 <__aeabi_f2d>
 8007210:	4603      	mov	r3, r0
 8007212:	460c      	mov	r4, r1
 8007214:	ed9f 1b32 	vldr	d1, [pc, #200]	; 80072e0 <main+0x488>
 8007218:	ec44 3b10 	vmov	d0, r3, r4
 800721c:	f001 ffb0 	bl	8009180 <fmod>
 8007220:	ec54 3b10 	vmov	r3, r4, d0
 8007224:	4618      	mov	r0, r3
 8007226:	4621      	mov	r1, r4
 8007228:	f7f9 fc5a 	bl	8000ae0 <__aeabi_d2f>
 800722c:	4602      	mov	r2, r0
 800722e:	4b36      	ldr	r3, [pc, #216]	; (8007308 <main+0x4b0>)
 8007230:	601a      	str	r2, [r3, #0]
					  if(theta_re_offset < -M_PI)		theta_re_offset += 2.0f * M_PI;
 8007232:	4b35      	ldr	r3, [pc, #212]	; (8007308 <main+0x4b0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7f9 f94a 	bl	80004d0 <__aeabi_f2d>
 800723c:	a32a      	add	r3, pc, #168	; (adr r3, 80072e8 <main+0x490>)
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 fc0f 	bl	8000a64 <__aeabi_dcmplt>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d013      	beq.n	8007274 <main+0x41c>
 800724c:	4b2e      	ldr	r3, [pc, #184]	; (8007308 <main+0x4b0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f7f9 f93d 	bl	80004d0 <__aeabi_f2d>
 8007256:	a322      	add	r3, pc, #136	; (adr r3, 80072e0 <main+0x488>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f8 ffda 	bl	8000214 <__adddf3>
 8007260:	4603      	mov	r3, r0
 8007262:	460c      	mov	r4, r1
 8007264:	4618      	mov	r0, r3
 8007266:	4621      	mov	r1, r4
 8007268:	f7f9 fc3a 	bl	8000ae0 <__aeabi_d2f>
 800726c:	4602      	mov	r2, r0
 800726e:	4b26      	ldr	r3, [pc, #152]	; (8007308 <main+0x4b0>)
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e01f      	b.n	80072b4 <main+0x45c>
					  else if(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
 8007274:	4b24      	ldr	r3, [pc, #144]	; (8007308 <main+0x4b0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7f9 f929 	bl	80004d0 <__aeabi_f2d>
 800727e:	a316      	add	r3, pc, #88	; (adr r3, 80072d8 <main+0x480>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	f7f9 fc0c 	bl	8000aa0 <__aeabi_dcmpgt>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d012      	beq.n	80072b4 <main+0x45c>
 800728e:	4b1e      	ldr	r3, [pc, #120]	; (8007308 <main+0x4b0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7f9 f91c 	bl	80004d0 <__aeabi_f2d>
 8007298:	a311      	add	r3, pc, #68	; (adr r3, 80072e0 <main+0x488>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f8 ffb7 	bl	8000210 <__aeabi_dsub>
 80072a2:	4603      	mov	r3, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	4618      	mov	r0, r3
 80072a8:	4621      	mov	r1, r4
 80072aa:	f7f9 fc19 	bl	8000ae0 <__aeabi_d2f>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b15      	ldr	r3, [pc, #84]	; (8007308 <main+0x4b0>)
 80072b2:	601a      	str	r2, [r3, #0]
					  forced_commute_count = 0;
 80072b4:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <main+0x4a0>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
					  forced_commute_state = 0;
 80072ba:	4b14      	ldr	r3, [pc, #80]	; (800730c <main+0x4b4>)
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
					  break;
 80072c0:	e002      	b.n	80072c8 <main+0x470>
			  }




		  }
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <main+0x470>
				  break;
 80072c6:	bf00      	nop
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 80072c8:	f7fe fd62 	bl	8005d90 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <main+0x4b8>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 80072d2:	e608      	b.n	8006ee6 <main+0x8e>
 80072d4:	f3af 8000 	nop.w
 80072d8:	54442d18 	.word	0x54442d18
 80072dc:	400921fb 	.word	0x400921fb
 80072e0:	54442d18 	.word	0x54442d18
 80072e4:	401921fb 	.word	0x401921fb
 80072e8:	54442d18 	.word	0x54442d18
 80072ec:	c00921fb 	.word	0xc00921fb
 80072f0:	20000478 	.word	0x20000478
 80072f4:	2000018c 	.word	0x2000018c
 80072f8:	20000188 	.word	0x20000188
 80072fc:	409f4000 	.word	0x409f4000
 8007300:	20000184 	.word	0x20000184
 8007304:	44fa0000 	.word	0x44fa0000
 8007308:	20000034 	.word	0x20000034
 800730c:	20000181 	.word	0x20000181
 8007310:	20000110 	.word	0x20000110

08007314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b094      	sub	sp, #80	; 0x50
 8007318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800731a:	f107 031c 	add.w	r3, r7, #28
 800731e:	2234      	movs	r2, #52	; 0x34
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f001 fabc 	bl	80088a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	60da      	str	r2, [r3, #12]
 8007336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007338:	2300      	movs	r3, #0
 800733a:	607b      	str	r3, [r7, #4]
 800733c:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <SystemClock_Config+0xd0>)
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	4a28      	ldr	r2, [pc, #160]	; (80073e4 <SystemClock_Config+0xd0>)
 8007342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007346:	6413      	str	r3, [r2, #64]	; 0x40
 8007348:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <SystemClock_Config+0xd0>)
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <SystemClock_Config+0xd4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <SystemClock_Config+0xd4>)
 800735e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	4b20      	ldr	r3, [pc, #128]	; (80073e8 <SystemClock_Config+0xd4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007370:	2302      	movs	r3, #2
 8007372:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007374:	2301      	movs	r3, #1
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007378:	2310      	movs	r3, #16
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800737c:	2302      	movs	r3, #2
 800737e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007380:	2300      	movs	r3, #0
 8007382:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8007384:	2310      	movs	r3, #16
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8007388:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800738c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800738e:	2302      	movs	r3, #2
 8007390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007392:	2302      	movs	r3, #2
 8007394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007396:	2302      	movs	r3, #2
 8007398:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800739a:	f107 031c 	add.w	r3, r7, #28
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fc f890 	bl	80034c4 <HAL_RCC_OscConfig>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80073aa:	f000 f81f 	bl	80073ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073ae:	230f      	movs	r3, #15
 80073b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073b2:	2302      	movs	r3, #2
 80073b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80073ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80073be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80073c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80073c6:	f107 0308 	add.w	r3, r7, #8
 80073ca:	2105      	movs	r1, #5
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fb fdc3 	bl	8002f58 <HAL_RCC_ClockConfig>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80073d8:	f000 f808 	bl	80073ec <Error_Handler>
  }
}
 80073dc:	bf00      	nop
 80073de:	3750      	adds	r7, #80	; 0x50
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40007000 	.word	0x40007000

080073ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80073f0:	bf00      	nop
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <setSVM_dq>:
volatile int sector_SVM = 0;



inline void setSVM_dq()
{
 80073fc:	b5b0      	push	{r4, r5, r7, lr}
 80073fe:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 8007400:	4bb8      	ldr	r3, [pc, #736]	; (80076e4 <setSVM_dq+0x2e8>)
 8007402:	ed93 7a00 	vldr	s14, [r3]
 8007406:	4bb8      	ldr	r3, [pc, #736]	; (80076e8 <setSVM_dq+0x2ec>)
 8007408:	edd3 7a00 	vldr	s15, [r3]
 800740c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007410:	4bb6      	ldr	r3, [pc, #728]	; (80076ec <setSVM_dq+0x2f0>)
 8007412:	edd3 6a00 	vldr	s13, [r3]
 8007416:	4bb6      	ldr	r3, [pc, #728]	; (80076f0 <setSVM_dq+0x2f4>)
 8007418:	edd3 7a00 	vldr	s15, [r3]
 800741c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007424:	4bb3      	ldr	r3, [pc, #716]	; (80076f4 <setSVM_dq+0x2f8>)
 8007426:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 800742a:	4bae      	ldr	r3, [pc, #696]	; (80076e4 <setSVM_dq+0x2e8>)
 800742c:	ed93 7a00 	vldr	s14, [r3]
 8007430:	4baf      	ldr	r3, [pc, #700]	; (80076f0 <setSVM_dq+0x2f4>)
 8007432:	edd3 7a00 	vldr	s15, [r3]
 8007436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800743a:	4bac      	ldr	r3, [pc, #688]	; (80076ec <setSVM_dq+0x2f0>)
 800743c:	edd3 6a00 	vldr	s13, [r3]
 8007440:	4ba9      	ldr	r3, [pc, #676]	; (80076e8 <setSVM_dq+0x2ec>)
 8007442:	edd3 7a00 	vldr	s15, [r3]
 8007446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800744a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800744e:	4baa      	ldr	r3, [pc, #680]	; (80076f8 <setSVM_dq+0x2fc>)
 8007450:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 8007454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007458:	4ba7      	ldr	r3, [pc, #668]	; (80076f8 <setSVM_dq+0x2fc>)
 800745a:	edd3 7a00 	vldr	s15, [r3]
 800745e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007462:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80076fc <setSVM_dq+0x300>
 8007466:	4ba3      	ldr	r3, [pc, #652]	; (80076f4 <setSVM_dq+0x2f8>)
 8007468:	edd3 7a00 	vldr	s15, [r3]
 800746c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007474:	4ba2      	ldr	r3, [pc, #648]	; (8007700 <setSVM_dq+0x304>)
 8007476:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 800747a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800747e:	4b9e      	ldr	r3, [pc, #632]	; (80076f8 <setSVM_dq+0x2fc>)
 8007480:	edd3 7a00 	vldr	s15, [r3]
 8007484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007488:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8007704 <setSVM_dq+0x308>
 800748c:	4b99      	ldr	r3, [pc, #612]	; (80076f4 <setSVM_dq+0x2f8>)
 800748e:	edd3 7a00 	vldr	s15, [r3]
 8007492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800749a:	4b9b      	ldr	r3, [pc, #620]	; (8007708 <setSVM_dq+0x30c>)
 800749c:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 80074a0:	4b97      	ldr	r3, [pc, #604]	; (8007700 <setSVM_dq+0x304>)
 80074a2:	edd3 7a00 	vldr	s15, [r3]
 80074a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ae:	db1e      	blt.n	80074ee <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 80074b0:	4b95      	ldr	r3, [pc, #596]	; (8007708 <setSVM_dq+0x30c>)
 80074b2:	edd3 7a00 	vldr	s15, [r3]
 80074b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074be:	d803      	bhi.n	80074c8 <setSVM_dq+0xcc>
 80074c0:	4b92      	ldr	r3, [pc, #584]	; (800770c <setSVM_dq+0x310>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	e030      	b.n	800752a <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 80074c8:	4b8d      	ldr	r3, [pc, #564]	; (8007700 <setSVM_dq+0x304>)
 80074ca:	ed93 7a00 	vldr	s14, [r3]
 80074ce:	4b8e      	ldr	r3, [pc, #568]	; (8007708 <setSVM_dq+0x30c>)
 80074d0:	edd3 7a00 	vldr	s15, [r3]
 80074d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074dc:	db03      	blt.n	80074e6 <setSVM_dq+0xea>
 80074de:	4b8b      	ldr	r3, [pc, #556]	; (800770c <setSVM_dq+0x310>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e021      	b.n	800752a <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 80074e6:	4b89      	ldr	r3, [pc, #548]	; (800770c <setSVM_dq+0x310>)
 80074e8:	2202      	movs	r2, #2
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	e01d      	b.n	800752a <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 80074ee:	4b86      	ldr	r3, [pc, #536]	; (8007708 <setSVM_dq+0x30c>)
 80074f0:	edd3 7a00 	vldr	s15, [r3]
 80074f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fc:	db03      	blt.n	8007506 <setSVM_dq+0x10a>
 80074fe:	4b83      	ldr	r3, [pc, #524]	; (800770c <setSVM_dq+0x310>)
 8007500:	2203      	movs	r2, #3
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	e011      	b.n	800752a <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 8007506:	4b7e      	ldr	r3, [pc, #504]	; (8007700 <setSVM_dq+0x304>)
 8007508:	ed93 7a00 	vldr	s14, [r3]
 800750c:	4b7e      	ldr	r3, [pc, #504]	; (8007708 <setSVM_dq+0x30c>)
 800750e:	edd3 7a00 	vldr	s15, [r3]
 8007512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	d803      	bhi.n	8007524 <setSVM_dq+0x128>
 800751c:	4b7b      	ldr	r3, [pc, #492]	; (800770c <setSVM_dq+0x310>)
 800751e:	2204      	movs	r2, #4
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e002      	b.n	800752a <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 8007524:	4b79      	ldr	r3, [pc, #484]	; (800770c <setSVM_dq+0x310>)
 8007526:	2205      	movs	r2, #5
 8007528:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 800752a:	4b78      	ldr	r3, [pc, #480]	; (800770c <setSVM_dq+0x310>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a78      	ldr	r2, [pc, #480]	; (8007710 <setSVM_dq+0x314>)
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4413      	add	r3, r2
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a77      	ldr	r2, [pc, #476]	; (8007714 <setSVM_dq+0x318>)
 8007538:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 800753a:	4b74      	ldr	r3, [pc, #464]	; (800770c <setSVM_dq+0x310>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a74      	ldr	r2, [pc, #464]	; (8007710 <setSVM_dq+0x314>)
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a73      	ldr	r2, [pc, #460]	; (8007718 <setSVM_dq+0x31c>)
 800754a:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 800754c:	4b6f      	ldr	r3, [pc, #444]	; (800770c <setSVM_dq+0x310>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a6f      	ldr	r2, [pc, #444]	; (8007710 <setSVM_dq+0x314>)
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	4413      	add	r3, r2
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a70      	ldr	r2, [pc, #448]	; (800771c <setSVM_dq+0x320>)
 800755c:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 800755e:	4b6b      	ldr	r3, [pc, #428]	; (800770c <setSVM_dq+0x310>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a6a      	ldr	r2, [pc, #424]	; (8007710 <setSVM_dq+0x314>)
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a6c      	ldr	r2, [pc, #432]	; (8007720 <setSVM_dq+0x324>)
 8007570:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8007572:	4b6b      	ldr	r3, [pc, #428]	; (8007720 <setSVM_dq+0x324>)
 8007574:	ed93 7a00 	vldr	s14, [r3]
 8007578:	4b5e      	ldr	r3, [pc, #376]	; (80076f4 <setSVM_dq+0x2f8>)
 800757a:	edd3 7a00 	vldr	s15, [r3]
 800757e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007582:	4b66      	ldr	r3, [pc, #408]	; (800771c <setSVM_dq+0x320>)
 8007584:	edd3 6a00 	vldr	s13, [r3]
 8007588:	4b5b      	ldr	r3, [pc, #364]	; (80076f8 <setSVM_dq+0x2fc>)
 800758a:	edd3 7a00 	vldr	s15, [r3]
 800758e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007592:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007596:	4b5f      	ldr	r3, [pc, #380]	; (8007714 <setSVM_dq+0x318>)
 8007598:	ed93 7a00 	vldr	s14, [r3]
 800759c:	4b60      	ldr	r3, [pc, #384]	; (8007720 <setSVM_dq+0x324>)
 800759e:	edd3 7a00 	vldr	s15, [r3]
 80075a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075a6:	4b5c      	ldr	r3, [pc, #368]	; (8007718 <setSVM_dq+0x31c>)
 80075a8:	ed93 6a00 	vldr	s12, [r3]
 80075ac:	4b5b      	ldr	r3, [pc, #364]	; (800771c <setSVM_dq+0x320>)
 80075ae:	edd3 7a00 	vldr	s15, [r3]
 80075b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80075b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075ba:	4b5a      	ldr	r3, [pc, #360]	; (8007724 <setSVM_dq+0x328>)
 80075bc:	edd3 7a00 	vldr	s15, [r3]
 80075c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c8:	4b57      	ldr	r3, [pc, #348]	; (8007728 <setSVM_dq+0x32c>)
 80075ca:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 80075ce:	4b52      	ldr	r3, [pc, #328]	; (8007718 <setSVM_dq+0x31c>)
 80075d0:	edd3 7a00 	vldr	s15, [r3]
 80075d4:	eeb1 7a67 	vneg.f32	s14, s15
 80075d8:	4b46      	ldr	r3, [pc, #280]	; (80076f4 <setSVM_dq+0x2f8>)
 80075da:	edd3 7a00 	vldr	s15, [r3]
 80075de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075e2:	4b4c      	ldr	r3, [pc, #304]	; (8007714 <setSVM_dq+0x318>)
 80075e4:	edd3 6a00 	vldr	s13, [r3]
 80075e8:	4b43      	ldr	r3, [pc, #268]	; (80076f8 <setSVM_dq+0x2fc>)
 80075ea:	edd3 7a00 	vldr	s15, [r3]
 80075ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075f2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <setSVM_dq+0x318>)
 80075f8:	ed93 7a00 	vldr	s14, [r3]
 80075fc:	4b48      	ldr	r3, [pc, #288]	; (8007720 <setSVM_dq+0x324>)
 80075fe:	edd3 7a00 	vldr	s15, [r3]
 8007602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007606:	4b44      	ldr	r3, [pc, #272]	; (8007718 <setSVM_dq+0x31c>)
 8007608:	ed93 6a00 	vldr	s12, [r3]
 800760c:	4b43      	ldr	r3, [pc, #268]	; (800771c <setSVM_dq+0x320>)
 800760e:	edd3 7a00 	vldr	s15, [r3]
 8007612:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800761a:	4b42      	ldr	r3, [pc, #264]	; (8007724 <setSVM_dq+0x328>)
 800761c:	edd3 7a00 	vldr	s15, [r3]
 8007620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007628:	4b40      	ldr	r3, [pc, #256]	; (800772c <setSVM_dq+0x330>)
 800762a:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 800762e:	4b37      	ldr	r3, [pc, #220]	; (800770c <setSVM_dq+0x310>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b05      	cmp	r3, #5
 8007634:	f200 81e0 	bhi.w	80079f8 <setSVM_dq+0x5fc>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <setSVM_dq+0x244>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007659 	.word	0x08007659
 8007644:	0800773d 	.word	0x0800773d
 8007648:	080077c9 	.word	0x080077c9
 800764c:	08007855 	.word	0x08007855
 8007650:	080078e1 	.word	0x080078e1
 8007654:	0800796d 	.word	0x0800796d
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8007658:	4b33      	ldr	r3, [pc, #204]	; (8007728 <setSVM_dq+0x32c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f7f8 ff37 	bl	80004d0 <__aeabi_f2d>
 8007662:	4603      	mov	r3, r0
 8007664:	460c      	mov	r4, r1
 8007666:	461a      	mov	r2, r3
 8007668:	4623      	mov	r3, r4
 800766a:	f04f 0000 	mov.w	r0, #0
 800766e:	4930      	ldr	r1, [pc, #192]	; (8007730 <setSVM_dq+0x334>)
 8007670:	f7f8 fdce 	bl	8000210 <__aeabi_dsub>
 8007674:	4603      	mov	r3, r0
 8007676:	460c      	mov	r4, r1
 8007678:	4625      	mov	r5, r4
 800767a:	461c      	mov	r4, r3
 800767c:	4b2b      	ldr	r3, [pc, #172]	; (800772c <setSVM_dq+0x330>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f7f8 ff25 	bl	80004d0 <__aeabi_f2d>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4620      	mov	r0, r4
 800768c:	4629      	mov	r1, r5
 800768e:	f7f8 fdbf 	bl	8000210 <__aeabi_dsub>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	4618      	mov	r0, r3
 8007698:	4621      	mov	r1, r4
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	4b25      	ldr	r3, [pc, #148]	; (8007734 <setSVM_dq+0x338>)
 80076a0:	f7f8 ff6e 	bl	8000580 <__aeabi_dmul>
 80076a4:	4603      	mov	r3, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	4618      	mov	r0, r3
 80076aa:	4621      	mov	r1, r4
 80076ac:	f7f9 fa18 	bl	8000ae0 <__aeabi_d2f>
 80076b0:	4602      	mov	r2, r0
 80076b2:	4b21      	ldr	r3, [pc, #132]	; (8007738 <setSVM_dq+0x33c>)
 80076b4:	609a      	str	r2, [r3, #8]
 80076b6:	4b20      	ldr	r3, [pc, #128]	; (8007738 <setSVM_dq+0x33c>)
 80076b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80076bc:	4b1b      	ldr	r3, [pc, #108]	; (800772c <setSVM_dq+0x330>)
 80076be:	edd3 7a00 	vldr	s15, [r3]
 80076c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076c6:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <setSVM_dq+0x33c>)
 80076c8:	edc3 7a01 	vstr	s15, [r3, #4]
 80076cc:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <setSVM_dq+0x33c>)
 80076ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <setSVM_dq+0x32c>)
 80076d4:	edd3 7a00 	vldr	s15, [r3]
 80076d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076dc:	4b16      	ldr	r3, [pc, #88]	; (8007738 <setSVM_dq+0x33c>)
 80076de:	edc3 7a00 	vstr	s15, [r3]
 80076e2:	e189      	b.n	80079f8 <setSVM_dq+0x5fc>
 80076e4:	20000190 	.word	0x20000190
 80076e8:	20000038 	.word	0x20000038
 80076ec:	20000194 	.word	0x20000194
 80076f0:	200001e4 	.word	0x200001e4
 80076f4:	2000019c 	.word	0x2000019c
 80076f8:	200001a0 	.word	0x200001a0
 80076fc:	00000000 	.word	0x00000000
 8007700:	200001a4 	.word	0x200001a4
 8007704:	3f5db22d 	.word	0x3f5db22d
 8007708:	200001a8 	.word	0x200001a8
 800770c:	20000198 	.word	0x20000198
 8007710:	08009660 	.word	0x08009660
 8007714:	200001ac 	.word	0x200001ac
 8007718:	200001b0 	.word	0x200001b0
 800771c:	200001b4 	.word	0x200001b4
 8007720:	200001b8 	.word	0x200001b8
 8007724:	20000030 	.word	0x20000030
 8007728:	200001bc 	.word	0x200001bc
 800772c:	200001c0 	.word	0x200001c0
 8007730:	3ff00000 	.word	0x3ff00000
 8007734:	3fe00000 	.word	0x3fe00000
 8007738:	200001c4 	.word	0x200001c4
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 800773c:	4bc3      	ldr	r3, [pc, #780]	; (8007a4c <setSVM_dq+0x650>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f7f8 fec5 	bl	80004d0 <__aeabi_f2d>
 8007746:	4603      	mov	r3, r0
 8007748:	460c      	mov	r4, r1
 800774a:	461a      	mov	r2, r3
 800774c:	4623      	mov	r3, r4
 800774e:	f04f 0000 	mov.w	r0, #0
 8007752:	49bf      	ldr	r1, [pc, #764]	; (8007a50 <setSVM_dq+0x654>)
 8007754:	f7f8 fd5c 	bl	8000210 <__aeabi_dsub>
 8007758:	4603      	mov	r3, r0
 800775a:	460c      	mov	r4, r1
 800775c:	4625      	mov	r5, r4
 800775e:	461c      	mov	r4, r3
 8007760:	4bbc      	ldr	r3, [pc, #752]	; (8007a54 <setSVM_dq+0x658>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f7f8 feb3 	bl	80004d0 <__aeabi_f2d>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f8 fd4d 	bl	8000210 <__aeabi_dsub>
 8007776:	4603      	mov	r3, r0
 8007778:	460c      	mov	r4, r1
 800777a:	4618      	mov	r0, r3
 800777c:	4621      	mov	r1, r4
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	4bb5      	ldr	r3, [pc, #724]	; (8007a58 <setSVM_dq+0x65c>)
 8007784:	f7f8 fefc 	bl	8000580 <__aeabi_dmul>
 8007788:	4603      	mov	r3, r0
 800778a:	460c      	mov	r4, r1
 800778c:	4618      	mov	r0, r3
 800778e:	4621      	mov	r1, r4
 8007790:	f7f9 f9a6 	bl	8000ae0 <__aeabi_d2f>
 8007794:	4602      	mov	r2, r0
 8007796:	4bb1      	ldr	r3, [pc, #708]	; (8007a5c <setSVM_dq+0x660>)
 8007798:	609a      	str	r2, [r3, #8]
 800779a:	4bb0      	ldr	r3, [pc, #704]	; (8007a5c <setSVM_dq+0x660>)
 800779c:	ed93 7a02 	vldr	s14, [r3, #8]
 80077a0:	4baa      	ldr	r3, [pc, #680]	; (8007a4c <setSVM_dq+0x650>)
 80077a2:	edd3 7a00 	vldr	s15, [r3]
 80077a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077aa:	4bac      	ldr	r3, [pc, #688]	; (8007a5c <setSVM_dq+0x660>)
 80077ac:	edc3 7a00 	vstr	s15, [r3]
 80077b0:	4baa      	ldr	r3, [pc, #680]	; (8007a5c <setSVM_dq+0x660>)
 80077b2:	ed93 7a00 	vldr	s14, [r3]
 80077b6:	4ba7      	ldr	r3, [pc, #668]	; (8007a54 <setSVM_dq+0x658>)
 80077b8:	edd3 7a00 	vldr	s15, [r3]
 80077bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c0:	4ba6      	ldr	r3, [pc, #664]	; (8007a5c <setSVM_dq+0x660>)
 80077c2:	edc3 7a01 	vstr	s15, [r3, #4]
 80077c6:	e117      	b.n	80079f8 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 80077c8:	4ba0      	ldr	r3, [pc, #640]	; (8007a4c <setSVM_dq+0x650>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7f8 fe7f 	bl	80004d0 <__aeabi_f2d>
 80077d2:	4603      	mov	r3, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	461a      	mov	r2, r3
 80077d8:	4623      	mov	r3, r4
 80077da:	f04f 0000 	mov.w	r0, #0
 80077de:	499c      	ldr	r1, [pc, #624]	; (8007a50 <setSVM_dq+0x654>)
 80077e0:	f7f8 fd16 	bl	8000210 <__aeabi_dsub>
 80077e4:	4603      	mov	r3, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4625      	mov	r5, r4
 80077ea:	461c      	mov	r4, r3
 80077ec:	4b99      	ldr	r3, [pc, #612]	; (8007a54 <setSVM_dq+0x658>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7f8 fe6d 	bl	80004d0 <__aeabi_f2d>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	4620      	mov	r0, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	f7f8 fd07 	bl	8000210 <__aeabi_dsub>
 8007802:	4603      	mov	r3, r0
 8007804:	460c      	mov	r4, r1
 8007806:	4618      	mov	r0, r3
 8007808:	4621      	mov	r1, r4
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	4b92      	ldr	r3, [pc, #584]	; (8007a58 <setSVM_dq+0x65c>)
 8007810:	f7f8 feb6 	bl	8000580 <__aeabi_dmul>
 8007814:	4603      	mov	r3, r0
 8007816:	460c      	mov	r4, r1
 8007818:	4618      	mov	r0, r3
 800781a:	4621      	mov	r1, r4
 800781c:	f7f9 f960 	bl	8000ae0 <__aeabi_d2f>
 8007820:	4602      	mov	r2, r0
 8007822:	4b8e      	ldr	r3, [pc, #568]	; (8007a5c <setSVM_dq+0x660>)
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	4b8d      	ldr	r3, [pc, #564]	; (8007a5c <setSVM_dq+0x660>)
 8007828:	ed93 7a00 	vldr	s14, [r3]
 800782c:	4b89      	ldr	r3, [pc, #548]	; (8007a54 <setSVM_dq+0x658>)
 800782e:	edd3 7a00 	vldr	s15, [r3]
 8007832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007836:	4b89      	ldr	r3, [pc, #548]	; (8007a5c <setSVM_dq+0x660>)
 8007838:	edc3 7a02 	vstr	s15, [r3, #8]
 800783c:	4b87      	ldr	r3, [pc, #540]	; (8007a5c <setSVM_dq+0x660>)
 800783e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007842:	4b82      	ldr	r3, [pc, #520]	; (8007a4c <setSVM_dq+0x650>)
 8007844:	edd3 7a00 	vldr	s15, [r3]
 8007848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800784c:	4b83      	ldr	r3, [pc, #524]	; (8007a5c <setSVM_dq+0x660>)
 800784e:	edc3 7a01 	vstr	s15, [r3, #4]
 8007852:	e0d1      	b.n	80079f8 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 8007854:	4b7d      	ldr	r3, [pc, #500]	; (8007a4c <setSVM_dq+0x650>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f7f8 fe39 	bl	80004d0 <__aeabi_f2d>
 800785e:	4603      	mov	r3, r0
 8007860:	460c      	mov	r4, r1
 8007862:	461a      	mov	r2, r3
 8007864:	4623      	mov	r3, r4
 8007866:	f04f 0000 	mov.w	r0, #0
 800786a:	4979      	ldr	r1, [pc, #484]	; (8007a50 <setSVM_dq+0x654>)
 800786c:	f7f8 fcd0 	bl	8000210 <__aeabi_dsub>
 8007870:	4603      	mov	r3, r0
 8007872:	460c      	mov	r4, r1
 8007874:	4625      	mov	r5, r4
 8007876:	461c      	mov	r4, r3
 8007878:	4b76      	ldr	r3, [pc, #472]	; (8007a54 <setSVM_dq+0x658>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f7f8 fe27 	bl	80004d0 <__aeabi_f2d>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f8 fcc1 	bl	8000210 <__aeabi_dsub>
 800788e:	4603      	mov	r3, r0
 8007890:	460c      	mov	r4, r1
 8007892:	4618      	mov	r0, r3
 8007894:	4621      	mov	r1, r4
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	4b6f      	ldr	r3, [pc, #444]	; (8007a58 <setSVM_dq+0x65c>)
 800789c:	f7f8 fe70 	bl	8000580 <__aeabi_dmul>
 80078a0:	4603      	mov	r3, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	4618      	mov	r0, r3
 80078a6:	4621      	mov	r1, r4
 80078a8:	f7f9 f91a 	bl	8000ae0 <__aeabi_d2f>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b6b      	ldr	r3, [pc, #428]	; (8007a5c <setSVM_dq+0x660>)
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	4b6a      	ldr	r3, [pc, #424]	; (8007a5c <setSVM_dq+0x660>)
 80078b4:	ed93 7a00 	vldr	s14, [r3]
 80078b8:	4b64      	ldr	r3, [pc, #400]	; (8007a4c <setSVM_dq+0x650>)
 80078ba:	edd3 7a00 	vldr	s15, [r3]
 80078be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078c2:	4b66      	ldr	r3, [pc, #408]	; (8007a5c <setSVM_dq+0x660>)
 80078c4:	edc3 7a01 	vstr	s15, [r3, #4]
 80078c8:	4b64      	ldr	r3, [pc, #400]	; (8007a5c <setSVM_dq+0x660>)
 80078ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80078ce:	4b61      	ldr	r3, [pc, #388]	; (8007a54 <setSVM_dq+0x658>)
 80078d0:	edd3 7a00 	vldr	s15, [r3]
 80078d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078d8:	4b60      	ldr	r3, [pc, #384]	; (8007a5c <setSVM_dq+0x660>)
 80078da:	edc3 7a02 	vstr	s15, [r3, #8]
 80078de:	e08b      	b.n	80079f8 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 80078e0:	4b5a      	ldr	r3, [pc, #360]	; (8007a4c <setSVM_dq+0x650>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7f8 fdf3 	bl	80004d0 <__aeabi_f2d>
 80078ea:	4603      	mov	r3, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	461a      	mov	r2, r3
 80078f0:	4623      	mov	r3, r4
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	4956      	ldr	r1, [pc, #344]	; (8007a50 <setSVM_dq+0x654>)
 80078f8:	f7f8 fc8a 	bl	8000210 <__aeabi_dsub>
 80078fc:	4603      	mov	r3, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	4625      	mov	r5, r4
 8007902:	461c      	mov	r4, r3
 8007904:	4b53      	ldr	r3, [pc, #332]	; (8007a54 <setSVM_dq+0x658>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f7f8 fde1 	bl	80004d0 <__aeabi_f2d>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f7f8 fc7b 	bl	8000210 <__aeabi_dsub>
 800791a:	4603      	mov	r3, r0
 800791c:	460c      	mov	r4, r1
 800791e:	4618      	mov	r0, r3
 8007920:	4621      	mov	r1, r4
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	4b4c      	ldr	r3, [pc, #304]	; (8007a58 <setSVM_dq+0x65c>)
 8007928:	f7f8 fe2a 	bl	8000580 <__aeabi_dmul>
 800792c:	4603      	mov	r3, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4618      	mov	r0, r3
 8007932:	4621      	mov	r1, r4
 8007934:	f7f9 f8d4 	bl	8000ae0 <__aeabi_d2f>
 8007938:	4602      	mov	r2, r0
 800793a:	4b48      	ldr	r3, [pc, #288]	; (8007a5c <setSVM_dq+0x660>)
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	4b47      	ldr	r3, [pc, #284]	; (8007a5c <setSVM_dq+0x660>)
 8007940:	ed93 7a01 	vldr	s14, [r3, #4]
 8007944:	4b43      	ldr	r3, [pc, #268]	; (8007a54 <setSVM_dq+0x658>)
 8007946:	edd3 7a00 	vldr	s15, [r3]
 800794a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800794e:	4b43      	ldr	r3, [pc, #268]	; (8007a5c <setSVM_dq+0x660>)
 8007950:	edc3 7a00 	vstr	s15, [r3]
 8007954:	4b41      	ldr	r3, [pc, #260]	; (8007a5c <setSVM_dq+0x660>)
 8007956:	ed93 7a00 	vldr	s14, [r3]
 800795a:	4b3c      	ldr	r3, [pc, #240]	; (8007a4c <setSVM_dq+0x650>)
 800795c:	edd3 7a00 	vldr	s15, [r3]
 8007960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007964:	4b3d      	ldr	r3, [pc, #244]	; (8007a5c <setSVM_dq+0x660>)
 8007966:	edc3 7a02 	vstr	s15, [r3, #8]
 800796a:	e045      	b.n	80079f8 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 800796c:	4b37      	ldr	r3, [pc, #220]	; (8007a4c <setSVM_dq+0x650>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f7f8 fdad 	bl	80004d0 <__aeabi_f2d>
 8007976:	4603      	mov	r3, r0
 8007978:	460c      	mov	r4, r1
 800797a:	461a      	mov	r2, r3
 800797c:	4623      	mov	r3, r4
 800797e:	f04f 0000 	mov.w	r0, #0
 8007982:	4933      	ldr	r1, [pc, #204]	; (8007a50 <setSVM_dq+0x654>)
 8007984:	f7f8 fc44 	bl	8000210 <__aeabi_dsub>
 8007988:	4603      	mov	r3, r0
 800798a:	460c      	mov	r4, r1
 800798c:	4625      	mov	r5, r4
 800798e:	461c      	mov	r4, r3
 8007990:	4b30      	ldr	r3, [pc, #192]	; (8007a54 <setSVM_dq+0x658>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f7f8 fd9b 	bl	80004d0 <__aeabi_f2d>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f8 fc35 	bl	8000210 <__aeabi_dsub>
 80079a6:	4603      	mov	r3, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	4618      	mov	r0, r3
 80079ac:	4621      	mov	r1, r4
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <setSVM_dq+0x65c>)
 80079b4:	f7f8 fde4 	bl	8000580 <__aeabi_dmul>
 80079b8:	4603      	mov	r3, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	4618      	mov	r0, r3
 80079be:	4621      	mov	r1, r4
 80079c0:	f7f9 f88e 	bl	8000ae0 <__aeabi_d2f>
 80079c4:	4602      	mov	r2, r0
 80079c6:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <setSVM_dq+0x660>)
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <setSVM_dq+0x660>)
 80079cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80079d0:	4b1e      	ldr	r3, [pc, #120]	; (8007a4c <setSVM_dq+0x650>)
 80079d2:	edd3 7a00 	vldr	s15, [r3]
 80079d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079da:	4b20      	ldr	r3, [pc, #128]	; (8007a5c <setSVM_dq+0x660>)
 80079dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80079e0:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <setSVM_dq+0x660>)
 80079e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80079e6:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <setSVM_dq+0x658>)
 80079e8:	edd3 7a00 	vldr	s15, [r3]
 80079ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079f0:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <setSVM_dq+0x660>)
 80079f2:	edc3 7a00 	vstr	s15, [r3]
 80079f6:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 80079f8:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <setSVM_dq+0x660>)
 80079fa:	edd3 7a00 	vldr	s15, [r3]
 80079fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a0a:	d503      	bpl.n	8007a14 <setSVM_dq+0x618>
 8007a0c:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <setSVM_dq+0x660>)
 8007a0e:	4a14      	ldr	r2, [pc, #80]	; (8007a60 <setSVM_dq+0x664>)
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e00d      	b.n	8007a30 <setSVM_dq+0x634>
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <setSVM_dq+0x660>)
 8007a16:	edd3 7a00 	vldr	s15, [r3]
 8007a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a26:	dd03      	ble.n	8007a30 <setSVM_dq+0x634>
 8007a28:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <setSVM_dq+0x660>)
 8007a2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007a2e:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <setSVM_dq+0x660>)
 8007a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a36:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a42:	d50f      	bpl.n	8007a64 <setSVM_dq+0x668>
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <setSVM_dq+0x660>)
 8007a46:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <setSVM_dq+0x664>)
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	e019      	b.n	8007a80 <setSVM_dq+0x684>
 8007a4c:	200001bc 	.word	0x200001bc
 8007a50:	3ff00000 	.word	0x3ff00000
 8007a54:	200001c0 	.word	0x200001c0
 8007a58:	3fe00000 	.word	0x3fe00000
 8007a5c:	200001c4 	.word	0x200001c4
 8007a60:	bf800000 	.word	0xbf800000
 8007a64:	4b35      	ldr	r3, [pc, #212]	; (8007b3c <setSVM_dq+0x740>)
 8007a66:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a76:	dd03      	ble.n	8007a80 <setSVM_dq+0x684>
 8007a78:	4b30      	ldr	r3, [pc, #192]	; (8007b3c <setSVM_dq+0x740>)
 8007a7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007a7e:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8007a80:	4b2e      	ldr	r3, [pc, #184]	; (8007b3c <setSVM_dq+0x740>)
 8007a82:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a92:	d503      	bpl.n	8007a9c <setSVM_dq+0x6a0>
 8007a94:	4b29      	ldr	r3, [pc, #164]	; (8007b3c <setSVM_dq+0x740>)
 8007a96:	4a2a      	ldr	r2, [pc, #168]	; (8007b40 <setSVM_dq+0x744>)
 8007a98:	609a      	str	r2, [r3, #8]
 8007a9a:	e00d      	b.n	8007ab8 <setSVM_dq+0x6bc>
 8007a9c:	4b27      	ldr	r3, [pc, #156]	; (8007b3c <setSVM_dq+0x740>)
 8007a9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aae:	dd03      	ble.n	8007ab8 <setSVM_dq+0x6bc>
 8007ab0:	4b22      	ldr	r3, [pc, #136]	; (8007b3c <setSVM_dq+0x740>)
 8007ab2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007ab6:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 8007ab8:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <setSVM_dq+0x740>)
 8007aba:	edd3 7a00 	vldr	s15, [r3]
 8007abe:	4b21      	ldr	r3, [pc, #132]	; (8007b44 <setSVM_dq+0x748>)
 8007ac0:	edc3 7a00 	vstr	s15, [r3]
 8007ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007acc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007b48 <setSVM_dq+0x74c>
 8007ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	; (8007b4c <setSVM_dq+0x750>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007adc:	ee17 2a90 	vmov	r2, s15
 8007ae0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 8007ae2:	4b16      	ldr	r3, [pc, #88]	; (8007b3c <setSVM_dq+0x740>)
 8007ae4:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ae8:	4b19      	ldr	r3, [pc, #100]	; (8007b50 <setSVM_dq+0x754>)
 8007aea:	edc3 7a00 	vstr	s15, [r3]
 8007aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007af6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007b48 <setSVM_dq+0x74c>
 8007afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <setSVM_dq+0x750>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b06:	ee17 2a90 	vmov	r2, s15
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <setSVM_dq+0x740>)
 8007b0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <setSVM_dq+0x758>)
 8007b14:	edc3 7a00 	vstr	s15, [r3]
 8007b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b20:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007b48 <setSVM_dq+0x74c>
 8007b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <setSVM_dq+0x750>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b30:	ee17 2a90 	vmov	r2, s15
 8007b34:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 8007b36:	bf00      	nop
}
 8007b38:	bdb0      	pop	{r4, r5, r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200001c4 	.word	0x200001c4
 8007b40:	bf800000 	.word	0xbf800000
 8007b44:	200001ec 	.word	0x200001ec
 8007b48:	45fa0000 	.word	0x45fa0000
 8007b4c:	2000052c 	.word	0x2000052c
 8007b50:	200001f0 	.word	0x200001f0
 8007b54:	200001f4 	.word	0x200001f4

08007b58 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8007b5c:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b5e:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <MX_SPI2_Init+0x6c>)
 8007b60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007b62:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007b68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007b6a:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007b7e:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b8e:	2218      	movs	r2, #24
 8007b90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b9e:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007ba6:	220a      	movs	r2, #10
 8007ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007baa:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <MX_SPI2_Init+0x68>)
 8007bac:	f7fb fee4 	bl	8003978 <HAL_SPI_Init>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007bb6:	f7ff fc19 	bl	80073ec <Error_Handler>
  }

}
 8007bba:	bf00      	nop
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	2000047c 	.word	0x2000047c
 8007bc4:	40003800 	.word	0x40003800

08007bc8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007bcc:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007bce:	4a18      	ldr	r2, [pc, #96]	; (8007c30 <MX_SPI3_Init+0x68>)
 8007bd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007bd2:	4b16      	ldr	r3, [pc, #88]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007bd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007bda:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007be0:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007be6:	4b11      	ldr	r3, [pc, #68]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007bec:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007bf4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007bf8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bfa:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c06:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0c:	4b07      	ldr	r3, [pc, #28]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007c12:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007c14:	220a      	movs	r2, #10
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007c18:	4804      	ldr	r0, [pc, #16]	; (8007c2c <MX_SPI3_Init+0x64>)
 8007c1a:	f7fb fead 	bl	8003978 <HAL_SPI_Init>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007c24:	f7ff fbe2 	bl	80073ec <Error_Handler>
  }

}
 8007c28:	bf00      	nop
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	200004d4 	.word	0x200004d4
 8007c30:	40003c00 	.word	0x40003c00

08007c34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08e      	sub	sp, #56	; 0x38
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	60da      	str	r2, [r3, #12]
 8007c4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a6c      	ldr	r2, [pc, #432]	; (8007e04 <HAL_SPI_MspInit+0x1d0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d163      	bne.n	8007d1e <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007c56:	2300      	movs	r3, #0
 8007c58:	623b      	str	r3, [r7, #32]
 8007c5a:	4b6b      	ldr	r3, [pc, #428]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	4a6a      	ldr	r2, [pc, #424]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c64:	6413      	str	r3, [r2, #64]	; 0x40
 8007c66:	4b68      	ldr	r3, [pc, #416]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c6e:	623b      	str	r3, [r7, #32]
 8007c70:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	4b64      	ldr	r3, [pc, #400]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	4a63      	ldr	r2, [pc, #396]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c7c:	f043 0304 	orr.w	r3, r3, #4
 8007c80:	6313      	str	r3, [r2, #48]	; 0x30
 8007c82:	4b61      	ldr	r3, [pc, #388]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	4b5d      	ldr	r3, [pc, #372]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	4a5c      	ldr	r2, [pc, #368]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007c98:	f043 0302 	orr.w	r3, r3, #2
 8007c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9e:	4b5a      	ldr	r3, [pc, #360]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007caa:	2302      	movs	r3, #2
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8007cba:	2307      	movs	r3, #7
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4851      	ldr	r0, [pc, #324]	; (8007e0c <HAL_SPI_MspInit+0x1d8>)
 8007cc6:	f7fa ff81 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007cca:	2304      	movs	r3, #4
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cce:	2302      	movs	r3, #2
 8007cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007cda:	2305      	movs	r3, #5
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4849      	ldr	r0, [pc, #292]	; (8007e0c <HAL_SPI_MspInit+0x1d8>)
 8007ce6:	f7fa ff71 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007cfc:	2305      	movs	r3, #5
 8007cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d04:	4619      	mov	r1, r3
 8007d06:	4842      	ldr	r0, [pc, #264]	; (8007e10 <HAL_SPI_MspInit+0x1dc>)
 8007d08:	f7fa ff60 	bl	8002bcc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	2024      	movs	r0, #36	; 0x24
 8007d12:	f7fa fb8c 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007d16:	2024      	movs	r0, #36	; 0x24
 8007d18:	f7fa fba5 	bl	8002466 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007d1c:	e06e      	b.n	8007dfc <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3c      	ldr	r2, [pc, #240]	; (8007e14 <HAL_SPI_MspInit+0x1e0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d169      	bne.n	8007dfc <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	4b36      	ldr	r3, [pc, #216]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	4a35      	ldr	r2, [pc, #212]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d36:	6413      	str	r3, [r2, #64]	; 0x40
 8007d38:	4b33      	ldr	r3, [pc, #204]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d44:	2300      	movs	r3, #0
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	4b2f      	ldr	r3, [pc, #188]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	4a2e      	ldr	r2, [pc, #184]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d4e:	f043 0302 	orr.w	r3, r3, #2
 8007d52:	6313      	str	r3, [r2, #48]	; 0x30
 8007d54:	4b2c      	ldr	r3, [pc, #176]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	4b28      	ldr	r3, [pc, #160]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8007d70:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60bb      	str	r3, [r7, #8]
 8007d80:	4b21      	ldr	r3, [pc, #132]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d86:	f043 0304 	orr.w	r3, r3, #4
 8007d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007d8c:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <HAL_SPI_MspInit+0x1d4>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	60bb      	str	r3, [r7, #8]
 8007d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007d98:	2304      	movs	r3, #4
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007da4:	2303      	movs	r3, #3
 8007da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007da8:	2307      	movs	r3, #7
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007db0:	4619      	mov	r1, r3
 8007db2:	4817      	ldr	r0, [pc, #92]	; (8007e10 <HAL_SPI_MspInit+0x1dc>)
 8007db4:	f7fa ff0a 	bl	8002bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007dca:	2306      	movs	r3, #6
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4810      	ldr	r0, [pc, #64]	; (8007e18 <HAL_SPI_MspInit+0x1e4>)
 8007dd6:	f7fa fef9 	bl	8002bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007dda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007de0:	2302      	movs	r3, #2
 8007de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007de8:	2303      	movs	r3, #3
 8007dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007dec:	2306      	movs	r3, #6
 8007dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df4:	4619      	mov	r1, r3
 8007df6:	4805      	ldr	r0, [pc, #20]	; (8007e0c <HAL_SPI_MspInit+0x1d8>)
 8007df8:	f7fa fee8 	bl	8002bcc <HAL_GPIO_Init>
}
 8007dfc:	bf00      	nop
 8007dfe:	3738      	adds	r7, #56	; 0x38
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40003800 	.word	0x40003800
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	40020800 	.word	0x40020800
 8007e10:	40020400 	.word	0x40020400
 8007e14:	40003c00 	.word	0x40003c00
 8007e18:	40020000 	.word	0x40020000

08007e1c <SPI_Init>:
} 

/* USER CODE BEGIN 1 */

void SPI_Init()
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0


	  // SPI Interrupt Setting
	  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 8007e20:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <SPI_Init+0x20>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <SPI_Init+0x20>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007e2e:	605a      	str	r2, [r3, #4]

}
 8007e30:	bf00      	nop
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	2000047c 	.word	0x2000047c

08007e40 <requestEncoder>:

inline void requestEncoder()
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 8007e44:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <requestEncoder+0x2c>)
 8007e46:	22ff      	movs	r2, #255	; 0xff
 8007e48:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 8007e4a:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <requestEncoder+0x2c>)
 8007e4c:	22ff      	movs	r2, #255	; 0xff
 8007e4e:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8007e50:	2200      	movs	r2, #0
 8007e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e56:	4806      	ldr	r0, [pc, #24]	; (8007e70 <requestEncoder+0x30>)
 8007e58:	f7fb f84a 	bl	8002ef0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4a05      	ldr	r2, [pc, #20]	; (8007e74 <requestEncoder+0x34>)
 8007e60:	4902      	ldr	r1, [pc, #8]	; (8007e6c <requestEncoder+0x2c>)
 8007e62:	4805      	ldr	r0, [pc, #20]	; (8007e78 <requestEncoder+0x38>)
 8007e64:	f7fb fdec 	bl	8003a40 <HAL_SPI_TransmitReceive_IT>


}
 8007e68:	bf00      	nop
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	200001d0 	.word	0x200001d0
 8007e70:	40020400 	.word	0x40020400
 8007e74:	200001d4 	.word	0x200001d4
 8007e78:	2000047c 	.word	0x2000047c
 8007e7c:	00000000 	.word	0x00000000

08007e80 <refreshEncoder>:


inline int refreshEncoder()
{
 8007e80:	b5b0      	push	{r4, r5, r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
	uint16_t angle_raw = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	81fb      	strh	r3, [r7, #14]
	float _theta;
	float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e90:	4891      	ldr	r0, [pc, #580]	; (80080d8 <refreshEncoder+0x258>)
 8007e92:	f7fb f82d 	bl	8002ef0 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 8007e96:	4b91      	ldr	r3, [pc, #580]	; (80080dc <refreshEncoder+0x25c>)
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	b21b      	sxth	r3, r3
 8007ea0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8007ea4:	b21a      	sxth	r2, r3
 8007ea6:	4b8d      	ldr	r3, [pc, #564]	; (80080dc <refreshEncoder+0x25c>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	b21b      	sxth	r3, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	b21b      	sxth	r3, r3
 8007eb2:	81fb      	strh	r3, [r7, #14]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 8007eb4:	89fb      	ldrh	r3, [r7, #14]
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ebe:	eddf 6a88 	vldr	s13, [pc, #544]	; 80080e0 <refreshEncoder+0x260>
 8007ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ec6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007eca:	ee17 0a90 	vmov	r0, s15
 8007ece:	f7f8 faff 	bl	80004d0 <__aeabi_f2d>
 8007ed2:	a37d      	add	r3, pc, #500	; (adr r3, 80080c8 <refreshEncoder+0x248>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 fb52 	bl	8000580 <__aeabi_dmul>
 8007edc:	4603      	mov	r3, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	4625      	mov	r5, r4
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	4b7f      	ldr	r3, [pc, #508]	; (80080e4 <refreshEncoder+0x264>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7f8 faf1 	bl	80004d0 <__aeabi_f2d>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7f8 f98d 	bl	8000214 <__adddf3>
 8007efa:	4603      	mov	r3, r0
 8007efc:	460c      	mov	r4, r1
 8007efe:	4618      	mov	r0, r3
 8007f00:	4621      	mov	r1, r4
 8007f02:	f7f8 fded 	bl	8000ae0 <__aeabi_d2f>
 8007f06:	4603      	mov	r3, r0
 8007f08:	60bb      	str	r3, [r7, #8]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 8007f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f16:	d511      	bpl.n	8007f3c <refreshEncoder+0xbc>
 8007f18:	68b8      	ldr	r0, [r7, #8]
 8007f1a:	f7f8 fad9 	bl	80004d0 <__aeabi_f2d>
 8007f1e:	a36c      	add	r3, pc, #432	; (adr r3, 80080d0 <refreshEncoder+0x250>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 f976 	bl	8000214 <__adddf3>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	4621      	mov	r1, r4
 8007f30:	f7f8 fdd6 	bl	8000ae0 <__aeabi_d2f>
 8007f34:	4602      	mov	r2, r0
 8007f36:	4b6c      	ldr	r3, [pc, #432]	; (80080e8 <refreshEncoder+0x268>)
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e01f      	b.n	8007f7c <refreshEncoder+0xfc>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 8007f3c:	68b8      	ldr	r0, [r7, #8]
 8007f3e:	f7f8 fac7 	bl	80004d0 <__aeabi_f2d>
 8007f42:	a363      	add	r3, pc, #396	; (adr r3, 80080d0 <refreshEncoder+0x250>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f7f8 fda0 	bl	8000a8c <__aeabi_dcmpge>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d011      	beq.n	8007f76 <refreshEncoder+0xf6>
 8007f52:	68b8      	ldr	r0, [r7, #8]
 8007f54:	f7f8 fabc 	bl	80004d0 <__aeabi_f2d>
 8007f58:	a35d      	add	r3, pc, #372	; (adr r3, 80080d0 <refreshEncoder+0x250>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 f957 	bl	8000210 <__aeabi_dsub>
 8007f62:	4603      	mov	r3, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	4618      	mov	r0, r3
 8007f68:	4621      	mov	r1, r4
 8007f6a:	f7f8 fdb9 	bl	8000ae0 <__aeabi_d2f>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4b5d      	ldr	r3, [pc, #372]	; (80080e8 <refreshEncoder+0x268>)
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e002      	b.n	8007f7c <refreshEncoder+0xfc>
	else						theta = _theta;
 8007f76:	4a5c      	ldr	r2, [pc, #368]	; (80080e8 <refreshEncoder+0x268>)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	6013      	str	r3, [r2, #0]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 8007f7c:	89fb      	ldrh	r3, [r7, #14]
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f86:	eddf 6a56 	vldr	s13, [pc, #344]	; 80080e0 <refreshEncoder+0x260>
 8007f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007f92:	ee17 0a90 	vmov	r0, s15
 8007f96:	f7f8 fa9b 	bl	80004d0 <__aeabi_f2d>
 8007f9a:	a34b      	add	r3, pc, #300	; (adr r3, 80080c8 <refreshEncoder+0x248>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 faee 	bl	8000580 <__aeabi_dmul>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	4618      	mov	r0, r3
 8007faa:	4621      	mov	r1, r4
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	4b4e      	ldr	r3, [pc, #312]	; (80080ec <refreshEncoder+0x26c>)
 8007fb2:	f7f8 fae5 	bl	8000580 <__aeabi_dmul>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	4618      	mov	r0, r3
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc6:	f7f8 fc05 	bl	80007d4 <__aeabi_ddiv>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	f7f8 fd85 	bl	8000ae0 <__aeabi_d2f>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	eddf 0a45 	vldr	s1, [pc, #276]	; 80080f0 <refreshEncoder+0x270>
 8007fdc:	ee00 3a10 	vmov	s0, r3
 8007fe0:	f001 f932 	bl	8009248 <fmodf>
 8007fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8007fe8:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <refreshEncoder+0x274>)
 8007fea:	edd3 7a00 	vldr	s15, [r3]
 8007fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ff2:	edc7 7a01 	vstr	s15, [r7, #4]

	if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 8007ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008002:	d511      	bpl.n	8008028 <refreshEncoder+0x1a8>
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7f8 fa63 	bl	80004d0 <__aeabi_f2d>
 800800a:	a331      	add	r3, pc, #196	; (adr r3, 80080d0 <refreshEncoder+0x250>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 f900 	bl	8000214 <__adddf3>
 8008014:	4603      	mov	r3, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4618      	mov	r0, r3
 800801a:	4621      	mov	r1, r4
 800801c:	f7f8 fd60 	bl	8000ae0 <__aeabi_d2f>
 8008020:	4602      	mov	r2, r0
 8008022:	4b35      	ldr	r3, [pc, #212]	; (80080f8 <refreshEncoder+0x278>)
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e01f      	b.n	8008068 <refreshEncoder+0x1e8>
	else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7f8 fa51 	bl	80004d0 <__aeabi_f2d>
 800802e:	a328      	add	r3, pc, #160	; (adr r3, 80080d0 <refreshEncoder+0x250>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 fd2a 	bl	8000a8c <__aeabi_dcmpge>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d011      	beq.n	8008062 <refreshEncoder+0x1e2>
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7f8 fa46 	bl	80004d0 <__aeabi_f2d>
 8008044:	a322      	add	r3, pc, #136	; (adr r3, 80080d0 <refreshEncoder+0x250>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f8e1 	bl	8000210 <__aeabi_dsub>
 800804e:	4603      	mov	r3, r0
 8008050:	460c      	mov	r4, r1
 8008052:	4618      	mov	r0, r3
 8008054:	4621      	mov	r1, r4
 8008056:	f7f8 fd43 	bl	8000ae0 <__aeabi_d2f>
 800805a:	4602      	mov	r2, r0
 800805c:	4b26      	ldr	r3, [pc, #152]	; (80080f8 <refreshEncoder+0x278>)
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	e002      	b.n	8008068 <refreshEncoder+0x1e8>
	else							theta_re = _theta_re;
 8008062:	4a25      	ldr	r2, [pc, #148]	; (80080f8 <refreshEncoder+0x278>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6013      	str	r3, [r2, #0]

	cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 8008068:	4b23      	ldr	r3, [pc, #140]	; (80080f8 <refreshEncoder+0x278>)
 800806a:	edd3 7a00 	vldr	s15, [r3]
 800806e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80080fc <refreshEncoder+0x27c>
 8008072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008076:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800807a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800807e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008100 <refreshEncoder+0x280>
 8008082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800808a:	ee17 3a90 	vmov	r3, s15
 800808e:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <refreshEncoder+0x284>)
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1c      	ldr	r2, [pc, #112]	; (8008108 <refreshEncoder+0x288>)
 8008098:	6013      	str	r3, [r2, #0]
	sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 800809a:	4b17      	ldr	r3, [pc, #92]	; (80080f8 <refreshEncoder+0x278>)
 800809c:	edd3 7a00 	vldr	s15, [r3]
 80080a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800810c <refreshEncoder+0x28c>
 80080a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080ac:	ee17 3a90 	vmov	r3, s15
 80080b0:	4a14      	ldr	r2, [pc, #80]	; (8008104 <refreshEncoder+0x284>)
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a15      	ldr	r2, [pc, #84]	; (8008110 <refreshEncoder+0x290>)
 80080ba:	6013      	str	r3, [r2, #0]


	return 0;
 80080bc:	2300      	movs	r3, #0

}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bdb0      	pop	{r4, r5, r7, pc}
 80080c6:	bf00      	nop
 80080c8:	54442d18 	.word	0x54442d18
 80080cc:	400921fb 	.word	0x400921fb
 80080d0:	54442d18 	.word	0x54442d18
 80080d4:	401921fb 	.word	0x401921fb
 80080d8:	40020400 	.word	0x40020400
 80080dc:	200001d4 	.word	0x200001d4
 80080e0:	46800000 	.word	0x46800000
 80080e4:	200001d8 	.word	0x200001d8
 80080e8:	200001dc 	.word	0x200001dc
 80080ec:	40360000 	.word	0x40360000
 80080f0:	40c90fdb 	.word	0x40c90fdb
 80080f4:	20000034 	.word	0x20000034
 80080f8:	200001e0 	.word	0x200001e0
 80080fc:	3ea2f838 	.word	0x3ea2f838
 8008100:	459c4000 	.word	0x459c4000
 8008104:	08009698 	.word	0x08009698
 8008108:	20000038 	.word	0x20000038
 800810c:	44c6f195 	.word	0x44c6f195
 8008110:	200001e4 	.word	0x200001e4

08008114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	4b10      	ldr	r3, [pc, #64]	; (8008160 <HAL_MspInit+0x4c>)
 8008120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008122:	4a0f      	ldr	r2, [pc, #60]	; (8008160 <HAL_MspInit+0x4c>)
 8008124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008128:	6453      	str	r3, [r2, #68]	; 0x44
 800812a:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <HAL_MspInit+0x4c>)
 800812c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008136:	2300      	movs	r3, #0
 8008138:	603b      	str	r3, [r7, #0]
 800813a:	4b09      	ldr	r3, [pc, #36]	; (8008160 <HAL_MspInit+0x4c>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	4a08      	ldr	r2, [pc, #32]	; (8008160 <HAL_MspInit+0x4c>)
 8008140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008144:	6413      	str	r3, [r2, #64]	; 0x40
 8008146:	4b06      	ldr	r3, [pc, #24]	; (8008160 <HAL_MspInit+0x4c>)
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008152:	2007      	movs	r0, #7
 8008154:	f7fa f960 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40023800 	.word	0x40023800

08008164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008168:	bf00      	nop
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008172:	b480      	push	{r7}
 8008174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008176:	e7fe      	b.n	8008176 <HardFault_Handler+0x4>

08008178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800817c:	e7fe      	b.n	800817c <MemManage_Handler+0x4>

0800817e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800817e:	b480      	push	{r7}
 8008180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008182:	e7fe      	b.n	8008182 <BusFault_Handler+0x4>

08008184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008188:	e7fe      	b.n	8008188 <UsageFault_Handler+0x4>

0800818a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800818a:	b480      	push	{r7}
 800818c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800818e:	bf00      	nop
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800819c:	bf00      	nop
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081a6:	b480      	push	{r7}
 80081a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081aa:	bf00      	nop
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081b8:	f7f8 feb4 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081bc:	bf00      	nop
 80081be:	bd80      	pop	{r7, pc}

080081c0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80081c4:	4802      	ldr	r0, [pc, #8]	; (80081d0 <CAN1_TX_IRQHandler+0x10>)
 80081c6:	f7f9 fe4c 	bl	8001e62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80081ca:	bf00      	nop
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000450 	.word	0x20000450

080081d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80081d8:	4802      	ldr	r0, [pc, #8]	; (80081e4 <CAN1_RX0_IRQHandler+0x10>)
 80081da:	f7f9 fe42 	bl	8001e62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000450 	.word	0x20000450

080081e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80081ec:	4802      	ldr	r0, [pc, #8]	; (80081f8 <SPI2_IRQHandler+0x10>)
 80081ee:	f7fb fcbb 	bl	8003b68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	2000047c 	.word	0x2000047c

080081fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008200:	4802      	ldr	r0, [pc, #8]	; (800820c <USART2_IRQHandler+0x10>)
 8008202:	f7fc ffd9 	bl	80051b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	2000056c 	.word	0x2000056c

08008210 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008214:	4802      	ldr	r0, [pc, #8]	; (8008220 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8008216:	f7fc f89f 	bl	8004358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800821a:	bf00      	nop
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	2000052c 	.word	0x2000052c

08008224 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008228:	4802      	ldr	r0, [pc, #8]	; (8008234 <DMA2_Stream0_IRQHandler+0x10>)
 800822a:	f7fa fa67 	bl	80026fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800822e:	bf00      	nop
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000344 	.word	0x20000344

08008238 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800823c:	4802      	ldr	r0, [pc, #8]	; (8008248 <DMA2_Stream1_IRQHandler+0x10>)
 800823e:	f7fa fa5d 	bl	80026fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008242:	bf00      	nop
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000254 	.word	0x20000254

0800824c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008250:	4802      	ldr	r0, [pc, #8]	; (800825c <DMA2_Stream2_IRQHandler+0x10>)
 8008252:	f7fa fa53 	bl	80026fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008256:	bf00      	nop
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200003a4 	.word	0x200003a4

08008260 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	e00a      	b.n	8008288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008272:	f3af 8000 	nop.w
 8008276:	4601      	mov	r1, r0
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	60ba      	str	r2, [r7, #8]
 800827e:	b2ca      	uxtb	r2, r1
 8008280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	3301      	adds	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	dbf0      	blt.n	8008272 <_read+0x12>
	}

return len;
 8008290:	687b      	ldr	r3, [r7, #4]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <_close>:
	}
	return len;
}

int _close(int file)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
	return -1;
 80082a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80082c2:	605a      	str	r2, [r3, #4]
	return 0;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <_isatty>:

int _isatty(int file)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
	return 1;
 80082da:	2301      	movs	r3, #1
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	return 0;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <_sbrk+0x50>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <_sbrk+0x16>
		heap_end = &end;
 8008314:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <_sbrk+0x50>)
 8008316:	4a10      	ldr	r2, [pc, #64]	; (8008358 <_sbrk+0x54>)
 8008318:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800831a:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <_sbrk+0x50>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <_sbrk+0x50>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	466a      	mov	r2, sp
 800832a:	4293      	cmp	r3, r2
 800832c:	d907      	bls.n	800833e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800832e:	f000 fa8d 	bl	800884c <__errno>
 8008332:	4602      	mov	r2, r0
 8008334:	230c      	movs	r3, #12
 8008336:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008338:	f04f 33ff 	mov.w	r3, #4294967295
 800833c:	e006      	b.n	800834c <_sbrk+0x48>
	}

	heap_end += incr;
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <_sbrk+0x50>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4413      	add	r3, r2
 8008346:	4a03      	ldr	r2, [pc, #12]	; (8008354 <_sbrk+0x50>)
 8008348:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800834a:	68fb      	ldr	r3, [r7, #12]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	200001e8 	.word	0x200001e8
 8008358:	200005b0 	.word	0x200005b0

0800835c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008360:	4b16      	ldr	r3, [pc, #88]	; (80083bc <SystemInit+0x60>)
 8008362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008366:	4a15      	ldr	r2, [pc, #84]	; (80083bc <SystemInit+0x60>)
 8008368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800836c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008370:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <SystemInit+0x64>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a12      	ldr	r2, [pc, #72]	; (80083c0 <SystemInit+0x64>)
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800837c:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <SystemInit+0x64>)
 800837e:	2200      	movs	r2, #0
 8008380:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <SystemInit+0x64>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a0e      	ldr	r2, [pc, #56]	; (80083c0 <SystemInit+0x64>)
 8008388:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800838c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008390:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008392:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <SystemInit+0x64>)
 8008394:	4a0b      	ldr	r2, [pc, #44]	; (80083c4 <SystemInit+0x68>)
 8008396:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <SystemInit+0x64>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <SystemInit+0x64>)
 800839e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80083a4:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <SystemInit+0x64>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80083aa:	4b04      	ldr	r3, [pc, #16]	; (80083bc <SystemInit+0x60>)
 80083ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083b0:	609a      	str	r2, [r3, #8]
#endif
}
 80083b2:	bf00      	nop
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	e000ed00 	.word	0xe000ed00
 80083c0:	40023800 	.word	0x40023800
 80083c4:	24003010 	.word	0x24003010

080083c8 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b096      	sub	sp, #88	; 0x58
 80083cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	605a      	str	r2, [r3, #4]
 80083d8:	609a      	str	r2, [r3, #8]
 80083da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	605a      	str	r2, [r3, #4]
 80083f0:	609a      	str	r2, [r3, #8]
 80083f2:	60da      	str	r2, [r3, #12]
 80083f4:	611a      	str	r2, [r3, #16]
 80083f6:	615a      	str	r2, [r3, #20]
 80083f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80083fa:	1d3b      	adds	r3, r7, #4
 80083fc:	2220      	movs	r2, #32
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fa4d 	bl	80088a0 <memset>

  htim8.Instance = TIM8;
 8008406:	4b4a      	ldr	r3, [pc, #296]	; (8008530 <MX_TIM8_Init+0x168>)
 8008408:	4a4a      	ldr	r2, [pc, #296]	; (8008534 <MX_TIM8_Init+0x16c>)
 800840a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800840c:	4b48      	ldr	r3, [pc, #288]	; (8008530 <MX_TIM8_Init+0x168>)
 800840e:	2200      	movs	r2, #0
 8008410:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8008412:	4b47      	ldr	r3, [pc, #284]	; (8008530 <MX_TIM8_Init+0x168>)
 8008414:	2220      	movs	r2, #32
 8008416:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8008418:	4b45      	ldr	r3, [pc, #276]	; (8008530 <MX_TIM8_Init+0x168>)
 800841a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800841e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008420:	4b43      	ldr	r3, [pc, #268]	; (8008530 <MX_TIM8_Init+0x168>)
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008426:	4b42      	ldr	r3, [pc, #264]	; (8008530 <MX_TIM8_Init+0x168>)
 8008428:	2200      	movs	r2, #0
 800842a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800842c:	4b40      	ldr	r3, [pc, #256]	; (8008530 <MX_TIM8_Init+0x168>)
 800842e:	2280      	movs	r2, #128	; 0x80
 8008430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008432:	483f      	ldr	r0, [pc, #252]	; (8008530 <MX_TIM8_Init+0x168>)
 8008434:	f7fb feac 	bl	8004190 <HAL_TIM_Base_Init>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800843e:	f7fe ffd5 	bl	80073ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008446:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800844c:	4619      	mov	r1, r3
 800844e:	4838      	ldr	r0, [pc, #224]	; (8008530 <MX_TIM8_Init+0x168>)
 8008450:	f7fc f950 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800845a:	f7fe ffc7 	bl	80073ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800845e:	4834      	ldr	r0, [pc, #208]	; (8008530 <MX_TIM8_Init+0x168>)
 8008460:	f7fb fec1 	bl	80041e6 <HAL_TIM_PWM_Init>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800846a:	f7fe ffbf 	bl	80073ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800846e:	2320      	movs	r3, #32
 8008470:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008472:	2300      	movs	r3, #0
 8008474:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800847a:	4619      	mov	r1, r3
 800847c:	482c      	ldr	r0, [pc, #176]	; (8008530 <MX_TIM8_Init+0x168>)
 800847e:	f7fc fd7d 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8008488:	f7fe ffb0 	bl	80073ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800848c:	2360      	movs	r3, #96	; 0x60
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8008490:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008496:	2300      	movs	r3, #0
 8008498:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800849a:	2300      	movs	r3, #0
 800849c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800849e:	2300      	movs	r3, #0
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80084a2:	2300      	movs	r3, #0
 80084a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ae:	2200      	movs	r2, #0
 80084b0:	4619      	mov	r1, r3
 80084b2:	481f      	ldr	r0, [pc, #124]	; (8008530 <MX_TIM8_Init+0x168>)
 80084b4:	f7fc f858 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80084be:	f7fe ff95 	bl	80073ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80084c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084c6:	2204      	movs	r2, #4
 80084c8:	4619      	mov	r1, r3
 80084ca:	4819      	ldr	r0, [pc, #100]	; (8008530 <MX_TIM8_Init+0x168>)
 80084cc:	f7fc f84c 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80084d6:	f7fe ff89 	bl	80073ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80084da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084de:	2208      	movs	r2, #8
 80084e0:	4619      	mov	r1, r3
 80084e2:	4813      	ldr	r0, [pc, #76]	; (8008530 <MX_TIM8_Init+0x168>)
 80084e4:	f7fc f840 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80084ee:	f7fe ff7d 	bl	80073ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 80084fe:	2328      	movs	r3, #40	; 0x28
 8008500:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8008506:	2300      	movs	r3, #0
 8008508:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800850a:	2300      	movs	r3, #0
 800850c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4807      	ldr	r0, [pc, #28]	; (8008530 <MX_TIM8_Init+0x168>)
 8008514:	f7fc fd77 	bl	8005006 <HAL_TIMEx_ConfigBreakDeadTime>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800851e:	f7fe ff65 	bl	80073ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8008522:	4803      	ldr	r0, [pc, #12]	; (8008530 <MX_TIM8_Init+0x168>)
 8008524:	f000 f830 	bl	8008588 <HAL_TIM_MspPostInit>

}
 8008528:	bf00      	nop
 800852a:	3758      	adds	r7, #88	; 0x58
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	2000052c 	.word	0x2000052c
 8008534:	40010400 	.word	0x40010400

08008538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <HAL_TIM_Base_MspInit+0x48>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d115      	bne.n	8008576 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <HAL_TIM_Base_MspInit+0x4c>)
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	4a0c      	ldr	r2, [pc, #48]	; (8008584 <HAL_TIM_Base_MspInit+0x4c>)
 8008554:	f043 0302 	orr.w	r3, r3, #2
 8008558:	6453      	str	r3, [r2, #68]	; 0x44
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <HAL_TIM_Base_MspInit+0x4c>)
 800855c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8008566:	2200      	movs	r2, #0
 8008568:	2100      	movs	r1, #0
 800856a:	202c      	movs	r0, #44	; 0x2c
 800856c:	f7f9 ff5f 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8008570:	202c      	movs	r0, #44	; 0x2c
 8008572:	f7f9 ff78 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40010400 	.word	0x40010400
 8008584:	40023800 	.word	0x40023800

08008588 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	; 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008590:	f107 0314 	add.w	r3, r7, #20
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	605a      	str	r2, [r3, #4]
 800859a:	609a      	str	r2, [r3, #8]
 800859c:	60da      	str	r2, [r3, #12]
 800859e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a30      	ldr	r2, [pc, #192]	; (8008668 <HAL_TIM_MspPostInit+0xe0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d15a      	bne.n	8008660 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085aa:	2300      	movs	r3, #0
 80085ac:	613b      	str	r3, [r7, #16]
 80085ae:	4b2f      	ldr	r3, [pc, #188]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	4a2e      	ldr	r2, [pc, #184]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	6313      	str	r3, [r2, #48]	; 0x30
 80085ba:	4b2c      	ldr	r3, [pc, #176]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	613b      	str	r3, [r7, #16]
 80085c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	4b28      	ldr	r3, [pc, #160]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	4a27      	ldr	r2, [pc, #156]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085d0:	f043 0302 	orr.w	r3, r3, #2
 80085d4:	6313      	str	r3, [r2, #48]	; 0x30
 80085d6:	4b25      	ldr	r3, [pc, #148]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085e2:	2300      	movs	r3, #0
 80085e4:	60bb      	str	r3, [r7, #8]
 80085e6:	4b21      	ldr	r3, [pc, #132]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ea:	4a20      	ldr	r2, [pc, #128]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085ec:	f043 0304 	orr.w	r3, r3, #4
 80085f0:	6313      	str	r3, [r2, #48]	; 0x30
 80085f2:	4b1e      	ldr	r3, [pc, #120]	; (800866c <HAL_TIM_MspPostInit+0xe4>)
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	60bb      	str	r3, [r7, #8]
 80085fc:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80085fe:	2380      	movs	r3, #128	; 0x80
 8008600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008602:	2302      	movs	r3, #2
 8008604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800860a:	2300      	movs	r3, #0
 800860c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800860e:	2303      	movs	r3, #3
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008612:	f107 0314 	add.w	r3, r7, #20
 8008616:	4619      	mov	r1, r3
 8008618:	4815      	ldr	r0, [pc, #84]	; (8008670 <HAL_TIM_MspPostInit+0xe8>)
 800861a:	f7fa fad7 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800861e:	2303      	movs	r3, #3
 8008620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008622:	2302      	movs	r3, #2
 8008624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800862a:	2300      	movs	r3, #0
 800862c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800862e:	2303      	movs	r3, #3
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008632:	f107 0314 	add.w	r3, r7, #20
 8008636:	4619      	mov	r1, r3
 8008638:	480e      	ldr	r0, [pc, #56]	; (8008674 <HAL_TIM_MspPostInit+0xec>)
 800863a:	f7fa fac7 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800863e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8008642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008644:	2302      	movs	r3, #2
 8008646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008648:	2300      	movs	r3, #0
 800864a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800864c:	2300      	movs	r3, #0
 800864e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008650:	2303      	movs	r3, #3
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008654:	f107 0314 	add.w	r3, r7, #20
 8008658:	4619      	mov	r1, r3
 800865a:	4807      	ldr	r0, [pc, #28]	; (8008678 <HAL_TIM_MspPostInit+0xf0>)
 800865c:	f7fa fab6 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8008660:	bf00      	nop
 8008662:	3728      	adds	r7, #40	; 0x28
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	40010400 	.word	0x40010400
 800866c:	40023800 	.word	0x40023800
 8008670:	40020000 	.word	0x40020000
 8008674:	40020400 	.word	0x40020400
 8008678:	40020800 	.word	0x40020800

0800867c <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8008680:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <TIM_Init+0x54>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0201 	mvn.w	r2, #1
 8008688:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 800868a:	4b11      	ldr	r3, [pc, #68]	; (80086d0 <TIM_Init+0x54>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <TIM_Init+0x54>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0201 	orr.w	r2, r2, #1
 8008698:	60da      	str	r2, [r3, #12]



	  // 3phase PWM Starting
	  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 800869a:	2100      	movs	r1, #0
 800869c:	480c      	ldr	r0, [pc, #48]	; (80086d0 <TIM_Init+0x54>)
 800869e:	f7fb fdd7 	bl	8004250 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 80086a2:	2104      	movs	r1, #4
 80086a4:	480a      	ldr	r0, [pc, #40]	; (80086d0 <TIM_Init+0x54>)
 80086a6:	f7fb fdd3 	bl	8004250 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 80086aa:	2108      	movs	r1, #8
 80086ac:	4808      	ldr	r0, [pc, #32]	; (80086d0 <TIM_Init+0x54>)
 80086ae:	f7fb fdcf 	bl	8004250 <HAL_TIM_PWM_Start_IT>

	  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 80086b2:	2100      	movs	r1, #0
 80086b4:	4806      	ldr	r0, [pc, #24]	; (80086d0 <TIM_Init+0x54>)
 80086b6:	f7fc fc0c 	bl	8004ed2 <HAL_TIMEx_PWMN_Start_IT>
	  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 80086ba:	2104      	movs	r1, #4
 80086bc:	4804      	ldr	r0, [pc, #16]	; (80086d0 <TIM_Init+0x54>)
 80086be:	f7fc fc08 	bl	8004ed2 <HAL_TIMEx_PWMN_Start_IT>
	  HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 80086c2:	2108      	movs	r1, #8
 80086c4:	4802      	ldr	r0, [pc, #8]	; (80086d0 <TIM_Init+0x54>)
 80086c6:	f7fc fc04 	bl	8004ed2 <HAL_TIMEx_PWMN_Start_IT>



}
 80086ca:	bf00      	nop
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	2000052c 	.word	0x2000052c

080086d4 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a07      	ldr	r2, [pc, #28]	; (8008700 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d108      	bne.n	80086f8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d001      	beq.n	80086f8 <HAL_TIM_PeriodElapsedCallback+0x24>
		{

			currentControl();
 80086f4:	f7fd f9a8 	bl	8005a48 <currentControl>
		}


	}

}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40010400 	.word	0x40010400

08008704 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008708:	4b11      	ldr	r3, [pc, #68]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 800870a:	4a12      	ldr	r2, [pc, #72]	; (8008754 <MX_USART2_UART_Init+0x50>)
 800870c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800870e:	4b10      	ldr	r3, [pc, #64]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 8008710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008716:	4b0e      	ldr	r3, [pc, #56]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 8008718:	2200      	movs	r2, #0
 800871a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 800871e:	2200      	movs	r2, #0
 8008720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008722:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 8008724:	2200      	movs	r2, #0
 8008726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008728:	4b09      	ldr	r3, [pc, #36]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 800872a:	220c      	movs	r2, #12
 800872c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800872e:	4b08      	ldr	r3, [pc, #32]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 8008730:	2200      	movs	r2, #0
 8008732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 8008736:	2200      	movs	r2, #0
 8008738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800873a:	4805      	ldr	r0, [pc, #20]	; (8008750 <MX_USART2_UART_Init+0x4c>)
 800873c:	f7fc fcee 	bl	800511c <HAL_UART_Init>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008746:	f7fe fe51 	bl	80073ec <Error_Handler>
  }

}
 800874a:	bf00      	nop
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	2000056c 	.word	0x2000056c
 8008754:	40004400 	.word	0x40004400

08008758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008760:	f107 0314 	add.w	r3, r7, #20
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	609a      	str	r2, [r3, #8]
 800876c:	60da      	str	r2, [r3, #12]
 800876e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1d      	ldr	r2, [pc, #116]	; (80087ec <HAL_UART_MspInit+0x94>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d133      	bne.n	80087e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <HAL_UART_MspInit+0x98>)
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	4a1b      	ldr	r2, [pc, #108]	; (80087f0 <HAL_UART_MspInit+0x98>)
 8008784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008788:	6413      	str	r3, [r2, #64]	; 0x40
 800878a:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <HAL_UART_MspInit+0x98>)
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <HAL_UART_MspInit+0x98>)
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	4a14      	ldr	r2, [pc, #80]	; (80087f0 <HAL_UART_MspInit+0x98>)
 80087a0:	f043 0301 	orr.w	r3, r3, #1
 80087a4:	6313      	str	r3, [r2, #48]	; 0x30
 80087a6:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <HAL_UART_MspInit+0x98>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80087b2:	230c      	movs	r3, #12
 80087b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b6:	2302      	movs	r3, #2
 80087b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087ba:	2301      	movs	r3, #1
 80087bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087be:	2303      	movs	r3, #3
 80087c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80087c2:	2307      	movs	r3, #7
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087c6:	f107 0314 	add.w	r3, r7, #20
 80087ca:	4619      	mov	r1, r3
 80087cc:	4809      	ldr	r0, [pc, #36]	; (80087f4 <HAL_UART_MspInit+0x9c>)
 80087ce:	f7fa f9fd 	bl	8002bcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80087d2:	2200      	movs	r2, #0
 80087d4:	2100      	movs	r1, #0
 80087d6:	2026      	movs	r0, #38	; 0x26
 80087d8:	f7f9 fe29 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80087dc:	2026      	movs	r0, #38	; 0x26
 80087de:	f7f9 fe42 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80087e2:	bf00      	nop
 80087e4:	3728      	adds	r7, #40	; 0x28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40004400 	.word	0x40004400
 80087f0:	40023800 	.word	0x40023800
 80087f4:	40020000 	.word	0x40020000

080087f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80087f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008830 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80087fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80087fe:	e003      	b.n	8008808 <LoopCopyDataInit>

08008800 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008800:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008802:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008804:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008806:	3104      	adds	r1, #4

08008808 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008808:	480b      	ldr	r0, [pc, #44]	; (8008838 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800880a:	4b0c      	ldr	r3, [pc, #48]	; (800883c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800880c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800880e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008810:	d3f6      	bcc.n	8008800 <CopyDataInit>
  ldr  r2, =_sbss
 8008812:	4a0b      	ldr	r2, [pc, #44]	; (8008840 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008814:	e002      	b.n	800881c <LoopFillZerobss>

08008816 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008816:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008818:	f842 3b04 	str.w	r3, [r2], #4

0800881c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800881c:	4b09      	ldr	r3, [pc, #36]	; (8008844 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800881e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008820:	d3f9      	bcc.n	8008816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008822:	f7ff fd9b 	bl	800835c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008826:	f000 f817 	bl	8008858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800882a:	f7fe fb15 	bl	8006e58 <main>
  bx  lr    
 800882e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008830:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008834:	0801cfc8 	.word	0x0801cfc8
  ldr  r0, =_sdata
 8008838:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800883c:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8008840:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8008844:	200005b0 	.word	0x200005b0

08008848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008848:	e7fe      	b.n	8008848 <ADC_IRQHandler>
	...

0800884c <__errno>:
 800884c:	4b01      	ldr	r3, [pc, #4]	; (8008854 <__errno+0x8>)
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20000040 	.word	0x20000040

08008858 <__libc_init_array>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	4e0d      	ldr	r6, [pc, #52]	; (8008890 <__libc_init_array+0x38>)
 800885c:	4c0d      	ldr	r4, [pc, #52]	; (8008894 <__libc_init_array+0x3c>)
 800885e:	1ba4      	subs	r4, r4, r6
 8008860:	10a4      	asrs	r4, r4, #2
 8008862:	2500      	movs	r5, #0
 8008864:	42a5      	cmp	r5, r4
 8008866:	d109      	bne.n	800887c <__libc_init_array+0x24>
 8008868:	4e0b      	ldr	r6, [pc, #44]	; (8008898 <__libc_init_array+0x40>)
 800886a:	4c0c      	ldr	r4, [pc, #48]	; (800889c <__libc_init_array+0x44>)
 800886c:	f000 fee4 	bl	8009638 <_init>
 8008870:	1ba4      	subs	r4, r4, r6
 8008872:	10a4      	asrs	r4, r4, #2
 8008874:	2500      	movs	r5, #0
 8008876:	42a5      	cmp	r5, r4
 8008878:	d105      	bne.n	8008886 <__libc_init_array+0x2e>
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008880:	4798      	blx	r3
 8008882:	3501      	adds	r5, #1
 8008884:	e7ee      	b.n	8008864 <__libc_init_array+0xc>
 8008886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800888a:	4798      	blx	r3
 800888c:	3501      	adds	r5, #1
 800888e:	e7f2      	b.n	8008876 <__libc_init_array+0x1e>
 8008890:	0801cfc0 	.word	0x0801cfc0
 8008894:	0801cfc0 	.word	0x0801cfc0
 8008898:	0801cfc0 	.word	0x0801cfc0
 800889c:	0801cfc4 	.word	0x0801cfc4

080088a0 <memset>:
 80088a0:	4402      	add	r2, r0
 80088a2:	4603      	mov	r3, r0
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d100      	bne.n	80088aa <memset+0xa>
 80088a8:	4770      	bx	lr
 80088aa:	f803 1b01 	strb.w	r1, [r3], #1
 80088ae:	e7f9      	b.n	80088a4 <memset+0x4>

080088b0 <_puts_r>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	460e      	mov	r6, r1
 80088b4:	4605      	mov	r5, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_puts_r+0x10>
 80088b8:	6983      	ldr	r3, [r0, #24]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_puts_r+0x10>
 80088bc:	f000 fa0c 	bl	8008cd8 <__sinit>
 80088c0:	69ab      	ldr	r3, [r5, #24]
 80088c2:	68ac      	ldr	r4, [r5, #8]
 80088c4:	b913      	cbnz	r3, 80088cc <_puts_r+0x1c>
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 fa06 	bl	8008cd8 <__sinit>
 80088cc:	4b23      	ldr	r3, [pc, #140]	; (800895c <_puts_r+0xac>)
 80088ce:	429c      	cmp	r4, r3
 80088d0:	d117      	bne.n	8008902 <_puts_r+0x52>
 80088d2:	686c      	ldr	r4, [r5, #4]
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	071b      	lsls	r3, r3, #28
 80088d8:	d51d      	bpl.n	8008916 <_puts_r+0x66>
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	b1db      	cbz	r3, 8008916 <_puts_r+0x66>
 80088de:	3e01      	subs	r6, #1
 80088e0:	68a3      	ldr	r3, [r4, #8]
 80088e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088e6:	3b01      	subs	r3, #1
 80088e8:	60a3      	str	r3, [r4, #8]
 80088ea:	b9e9      	cbnz	r1, 8008928 <_puts_r+0x78>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da2e      	bge.n	800894e <_puts_r+0x9e>
 80088f0:	4622      	mov	r2, r4
 80088f2:	210a      	movs	r1, #10
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 f83f 	bl	8008978 <__swbuf_r>
 80088fa:	3001      	adds	r0, #1
 80088fc:	d011      	beq.n	8008922 <_puts_r+0x72>
 80088fe:	200a      	movs	r0, #10
 8008900:	e011      	b.n	8008926 <_puts_r+0x76>
 8008902:	4b17      	ldr	r3, [pc, #92]	; (8008960 <_puts_r+0xb0>)
 8008904:	429c      	cmp	r4, r3
 8008906:	d101      	bne.n	800890c <_puts_r+0x5c>
 8008908:	68ac      	ldr	r4, [r5, #8]
 800890a:	e7e3      	b.n	80088d4 <_puts_r+0x24>
 800890c:	4b15      	ldr	r3, [pc, #84]	; (8008964 <_puts_r+0xb4>)
 800890e:	429c      	cmp	r4, r3
 8008910:	bf08      	it	eq
 8008912:	68ec      	ldreq	r4, [r5, #12]
 8008914:	e7de      	b.n	80088d4 <_puts_r+0x24>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f87f 	bl	8008a1c <__swsetup_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	d0dd      	beq.n	80088de <_puts_r+0x2e>
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	2b00      	cmp	r3, #0
 800892a:	da04      	bge.n	8008936 <_puts_r+0x86>
 800892c:	69a2      	ldr	r2, [r4, #24]
 800892e:	429a      	cmp	r2, r3
 8008930:	dc06      	bgt.n	8008940 <_puts_r+0x90>
 8008932:	290a      	cmp	r1, #10
 8008934:	d004      	beq.n	8008940 <_puts_r+0x90>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	6022      	str	r2, [r4, #0]
 800893c:	7019      	strb	r1, [r3, #0]
 800893e:	e7cf      	b.n	80088e0 <_puts_r+0x30>
 8008940:	4622      	mov	r2, r4
 8008942:	4628      	mov	r0, r5
 8008944:	f000 f818 	bl	8008978 <__swbuf_r>
 8008948:	3001      	adds	r0, #1
 800894a:	d1c9      	bne.n	80088e0 <_puts_r+0x30>
 800894c:	e7e9      	b.n	8008922 <_puts_r+0x72>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	200a      	movs	r0, #10
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	6022      	str	r2, [r4, #0]
 8008956:	7018      	strb	r0, [r3, #0]
 8008958:	e7e5      	b.n	8008926 <_puts_r+0x76>
 800895a:	bf00      	nop
 800895c:	0801cf54 	.word	0x0801cf54
 8008960:	0801cf74 	.word	0x0801cf74
 8008964:	0801cf34 	.word	0x0801cf34

08008968 <puts>:
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <puts+0xc>)
 800896a:	4601      	mov	r1, r0
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	f7ff bf9f 	b.w	80088b0 <_puts_r>
 8008972:	bf00      	nop
 8008974:	20000040 	.word	0x20000040

08008978 <__swbuf_r>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	460e      	mov	r6, r1
 800897c:	4614      	mov	r4, r2
 800897e:	4605      	mov	r5, r0
 8008980:	b118      	cbz	r0, 800898a <__swbuf_r+0x12>
 8008982:	6983      	ldr	r3, [r0, #24]
 8008984:	b90b      	cbnz	r3, 800898a <__swbuf_r+0x12>
 8008986:	f000 f9a7 	bl	8008cd8 <__sinit>
 800898a:	4b21      	ldr	r3, [pc, #132]	; (8008a10 <__swbuf_r+0x98>)
 800898c:	429c      	cmp	r4, r3
 800898e:	d12a      	bne.n	80089e6 <__swbuf_r+0x6e>
 8008990:	686c      	ldr	r4, [r5, #4]
 8008992:	69a3      	ldr	r3, [r4, #24]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	071a      	lsls	r2, r3, #28
 800899a:	d52e      	bpl.n	80089fa <__swbuf_r+0x82>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b363      	cbz	r3, 80089fa <__swbuf_r+0x82>
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	1ac0      	subs	r0, r0, r3
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	b2f6      	uxtb	r6, r6
 80089aa:	4283      	cmp	r3, r0
 80089ac:	4637      	mov	r7, r6
 80089ae:	dc04      	bgt.n	80089ba <__swbuf_r+0x42>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 f926 	bl	8008c04 <_fflush_r>
 80089b8:	bb28      	cbnz	r0, 8008a06 <__swbuf_r+0x8e>
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	3b01      	subs	r3, #1
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	701e      	strb	r6, [r3, #0]
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	3001      	adds	r0, #1
 80089cc:	4283      	cmp	r3, r0
 80089ce:	d004      	beq.n	80089da <__swbuf_r+0x62>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	07db      	lsls	r3, r3, #31
 80089d4:	d519      	bpl.n	8008a0a <__swbuf_r+0x92>
 80089d6:	2e0a      	cmp	r6, #10
 80089d8:	d117      	bne.n	8008a0a <__swbuf_r+0x92>
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 f911 	bl	8008c04 <_fflush_r>
 80089e2:	b190      	cbz	r0, 8008a0a <__swbuf_r+0x92>
 80089e4:	e00f      	b.n	8008a06 <__swbuf_r+0x8e>
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <__swbuf_r+0x9c>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d101      	bne.n	80089f0 <__swbuf_r+0x78>
 80089ec:	68ac      	ldr	r4, [r5, #8]
 80089ee:	e7d0      	b.n	8008992 <__swbuf_r+0x1a>
 80089f0:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <__swbuf_r+0xa0>)
 80089f2:	429c      	cmp	r4, r3
 80089f4:	bf08      	it	eq
 80089f6:	68ec      	ldreq	r4, [r5, #12]
 80089f8:	e7cb      	b.n	8008992 <__swbuf_r+0x1a>
 80089fa:	4621      	mov	r1, r4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f000 f80d 	bl	8008a1c <__swsetup_r>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d0cc      	beq.n	80089a0 <__swbuf_r+0x28>
 8008a06:	f04f 37ff 	mov.w	r7, #4294967295
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	0801cf54 	.word	0x0801cf54
 8008a14:	0801cf74 	.word	0x0801cf74
 8008a18:	0801cf34 	.word	0x0801cf34

08008a1c <__swsetup_r>:
 8008a1c:	4b32      	ldr	r3, [pc, #200]	; (8008ae8 <__swsetup_r+0xcc>)
 8008a1e:	b570      	push	{r4, r5, r6, lr}
 8008a20:	681d      	ldr	r5, [r3, #0]
 8008a22:	4606      	mov	r6, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	b125      	cbz	r5, 8008a32 <__swsetup_r+0x16>
 8008a28:	69ab      	ldr	r3, [r5, #24]
 8008a2a:	b913      	cbnz	r3, 8008a32 <__swsetup_r+0x16>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f953 	bl	8008cd8 <__sinit>
 8008a32:	4b2e      	ldr	r3, [pc, #184]	; (8008aec <__swsetup_r+0xd0>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d10f      	bne.n	8008a58 <__swsetup_r+0x3c>
 8008a38:	686c      	ldr	r4, [r5, #4]
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	0715      	lsls	r5, r2, #28
 8008a42:	d42c      	bmi.n	8008a9e <__swsetup_r+0x82>
 8008a44:	06d0      	lsls	r0, r2, #27
 8008a46:	d411      	bmi.n	8008a6c <__swsetup_r+0x50>
 8008a48:	2209      	movs	r2, #9
 8008a4a:	6032      	str	r2, [r6, #0]
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295
 8008a56:	e03e      	b.n	8008ad6 <__swsetup_r+0xba>
 8008a58:	4b25      	ldr	r3, [pc, #148]	; (8008af0 <__swsetup_r+0xd4>)
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	d101      	bne.n	8008a62 <__swsetup_r+0x46>
 8008a5e:	68ac      	ldr	r4, [r5, #8]
 8008a60:	e7eb      	b.n	8008a3a <__swsetup_r+0x1e>
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <__swsetup_r+0xd8>)
 8008a64:	429c      	cmp	r4, r3
 8008a66:	bf08      	it	eq
 8008a68:	68ec      	ldreq	r4, [r5, #12]
 8008a6a:	e7e6      	b.n	8008a3a <__swsetup_r+0x1e>
 8008a6c:	0751      	lsls	r1, r2, #29
 8008a6e:	d512      	bpl.n	8008a96 <__swsetup_r+0x7a>
 8008a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a72:	b141      	cbz	r1, 8008a86 <__swsetup_r+0x6a>
 8008a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	d002      	beq.n	8008a82 <__swsetup_r+0x66>
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f000 fa19 	bl	8008eb4 <_free_r>
 8008a82:	2300      	movs	r3, #0
 8008a84:	6363      	str	r3, [r4, #52]	; 0x34
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	6063      	str	r3, [r4, #4]
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	f043 0308 	orr.w	r3, r3, #8
 8008a9c:	81a3      	strh	r3, [r4, #12]
 8008a9e:	6923      	ldr	r3, [r4, #16]
 8008aa0:	b94b      	cbnz	r3, 8008ab6 <__swsetup_r+0x9a>
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aac:	d003      	beq.n	8008ab6 <__swsetup_r+0x9a>
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f000 f9bf 	bl	8008e34 <__smakebuf_r>
 8008ab6:	89a2      	ldrh	r2, [r4, #12]
 8008ab8:	f012 0301 	ands.w	r3, r2, #1
 8008abc:	d00c      	beq.n	8008ad8 <__swsetup_r+0xbc>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	6963      	ldr	r3, [r4, #20]
 8008ac4:	425b      	negs	r3, r3
 8008ac6:	61a3      	str	r3, [r4, #24]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	b953      	cbnz	r3, 8008ae2 <__swsetup_r+0xc6>
 8008acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008ad4:	d1ba      	bne.n	8008a4c <__swsetup_r+0x30>
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}
 8008ad8:	0792      	lsls	r2, r2, #30
 8008ada:	bf58      	it	pl
 8008adc:	6963      	ldrpl	r3, [r4, #20]
 8008ade:	60a3      	str	r3, [r4, #8]
 8008ae0:	e7f2      	b.n	8008ac8 <__swsetup_r+0xac>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e7f7      	b.n	8008ad6 <__swsetup_r+0xba>
 8008ae6:	bf00      	nop
 8008ae8:	20000040 	.word	0x20000040
 8008aec:	0801cf54 	.word	0x0801cf54
 8008af0:	0801cf74 	.word	0x0801cf74
 8008af4:	0801cf34 	.word	0x0801cf34

08008af8 <__sflush_r>:
 8008af8:	898a      	ldrh	r2, [r1, #12]
 8008afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afe:	4605      	mov	r5, r0
 8008b00:	0710      	lsls	r0, r2, #28
 8008b02:	460c      	mov	r4, r1
 8008b04:	d458      	bmi.n	8008bb8 <__sflush_r+0xc0>
 8008b06:	684b      	ldr	r3, [r1, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc05      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dc02      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b12:	2000      	movs	r0, #0
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d0f9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b24:	682f      	ldr	r7, [r5, #0]
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	d032      	beq.n	8008b92 <__sflush_r+0x9a>
 8008b2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	075a      	lsls	r2, r3, #29
 8008b32:	d505      	bpl.n	8008b40 <__sflush_r+0x48>
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	1ac0      	subs	r0, r0, r3
 8008b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b3a:	b10b      	cbz	r3, 8008b40 <__sflush_r+0x48>
 8008b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b3e:	1ac0      	subs	r0, r0, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	4602      	mov	r2, r0
 8008b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b46:	6a21      	ldr	r1, [r4, #32]
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b0      	blx	r6
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	d106      	bne.n	8008b60 <__sflush_r+0x68>
 8008b52:	6829      	ldr	r1, [r5, #0]
 8008b54:	291d      	cmp	r1, #29
 8008b56:	d848      	bhi.n	8008bea <__sflush_r+0xf2>
 8008b58:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <__sflush_r+0x108>)
 8008b5a:	40ca      	lsrs	r2, r1
 8008b5c:	07d6      	lsls	r6, r2, #31
 8008b5e:	d544      	bpl.n	8008bea <__sflush_r+0xf2>
 8008b60:	2200      	movs	r2, #0
 8008b62:	6062      	str	r2, [r4, #4]
 8008b64:	04d9      	lsls	r1, r3, #19
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	d504      	bpl.n	8008b76 <__sflush_r+0x7e>
 8008b6c:	1c42      	adds	r2, r0, #1
 8008b6e:	d101      	bne.n	8008b74 <__sflush_r+0x7c>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b903      	cbnz	r3, 8008b76 <__sflush_r+0x7e>
 8008b74:	6560      	str	r0, [r4, #84]	; 0x54
 8008b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b78:	602f      	str	r7, [r5, #0]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d0c9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d002      	beq.n	8008b8c <__sflush_r+0x94>
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 f994 	bl	8008eb4 <_free_r>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b90:	e7c0      	b.n	8008b14 <__sflush_r+0x1c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b0      	blx	r6
 8008b98:	1c41      	adds	r1, r0, #1
 8008b9a:	d1c8      	bne.n	8008b2e <__sflush_r+0x36>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0c5      	beq.n	8008b2e <__sflush_r+0x36>
 8008ba2:	2b1d      	cmp	r3, #29
 8008ba4:	d001      	beq.n	8008baa <__sflush_r+0xb2>
 8008ba6:	2b16      	cmp	r3, #22
 8008ba8:	d101      	bne.n	8008bae <__sflush_r+0xb6>
 8008baa:	602f      	str	r7, [r5, #0]
 8008bac:	e7b1      	b.n	8008b12 <__sflush_r+0x1a>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	e7ad      	b.n	8008b14 <__sflush_r+0x1c>
 8008bb8:	690f      	ldr	r7, [r1, #16]
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	d0a9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008bbe:	0793      	lsls	r3, r2, #30
 8008bc0:	680e      	ldr	r6, [r1, #0]
 8008bc2:	bf08      	it	eq
 8008bc4:	694b      	ldreq	r3, [r1, #20]
 8008bc6:	600f      	str	r7, [r1, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	2300      	movne	r3, #0
 8008bcc:	eba6 0807 	sub.w	r8, r6, r7
 8008bd0:	608b      	str	r3, [r1, #8]
 8008bd2:	f1b8 0f00 	cmp.w	r8, #0
 8008bd6:	dd9c      	ble.n	8008b12 <__sflush_r+0x1a>
 8008bd8:	4643      	mov	r3, r8
 8008bda:	463a      	mov	r2, r7
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b0      	blx	r6
 8008be4:	2800      	cmp	r0, #0
 8008be6:	dc06      	bgt.n	8008bf6 <__sflush_r+0xfe>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e78e      	b.n	8008b14 <__sflush_r+0x1c>
 8008bf6:	4407      	add	r7, r0
 8008bf8:	eba8 0800 	sub.w	r8, r8, r0
 8008bfc:	e7e9      	b.n	8008bd2 <__sflush_r+0xda>
 8008bfe:	bf00      	nop
 8008c00:	20400001 	.word	0x20400001

08008c04 <_fflush_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	690b      	ldr	r3, [r1, #16]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b1db      	cbz	r3, 8008c46 <_fflush_r+0x42>
 8008c0e:	b118      	cbz	r0, 8008c18 <_fflush_r+0x14>
 8008c10:	6983      	ldr	r3, [r0, #24]
 8008c12:	b90b      	cbnz	r3, 8008c18 <_fflush_r+0x14>
 8008c14:	f000 f860 	bl	8008cd8 <__sinit>
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <_fflush_r+0x48>)
 8008c1a:	429c      	cmp	r4, r3
 8008c1c:	d109      	bne.n	8008c32 <_fflush_r+0x2e>
 8008c1e:	686c      	ldr	r4, [r5, #4]
 8008c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c24:	b17b      	cbz	r3, 8008c46 <_fflush_r+0x42>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c2e:	f7ff bf63 	b.w	8008af8 <__sflush_r>
 8008c32:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <_fflush_r+0x4c>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	d101      	bne.n	8008c3c <_fflush_r+0x38>
 8008c38:	68ac      	ldr	r4, [r5, #8]
 8008c3a:	e7f1      	b.n	8008c20 <_fflush_r+0x1c>
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <_fflush_r+0x50>)
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	bf08      	it	eq
 8008c42:	68ec      	ldreq	r4, [r5, #12]
 8008c44:	e7ec      	b.n	8008c20 <_fflush_r+0x1c>
 8008c46:	2000      	movs	r0, #0
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	bf00      	nop
 8008c4c:	0801cf54 	.word	0x0801cf54
 8008c50:	0801cf74 	.word	0x0801cf74
 8008c54:	0801cf34 	.word	0x0801cf34

08008c58 <std>:
 8008c58:	2300      	movs	r3, #0
 8008c5a:	b510      	push	{r4, lr}
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c62:	6083      	str	r3, [r0, #8]
 8008c64:	8181      	strh	r1, [r0, #12]
 8008c66:	6643      	str	r3, [r0, #100]	; 0x64
 8008c68:	81c2      	strh	r2, [r0, #14]
 8008c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c6e:	6183      	str	r3, [r0, #24]
 8008c70:	4619      	mov	r1, r3
 8008c72:	2208      	movs	r2, #8
 8008c74:	305c      	adds	r0, #92	; 0x5c
 8008c76:	f7ff fe13 	bl	80088a0 <memset>
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <std+0x38>)
 8008c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c7e:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <std+0x3c>)
 8008c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <std+0x40>)
 8008c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <std+0x44>)
 8008c88:	6224      	str	r4, [r4, #32]
 8008c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	bf00      	nop
 8008c90:	08009025 	.word	0x08009025
 8008c94:	08009047 	.word	0x08009047
 8008c98:	0800907f 	.word	0x0800907f
 8008c9c:	080090a3 	.word	0x080090a3

08008ca0 <_cleanup_r>:
 8008ca0:	4901      	ldr	r1, [pc, #4]	; (8008ca8 <_cleanup_r+0x8>)
 8008ca2:	f000 b885 	b.w	8008db0 <_fwalk_reent>
 8008ca6:	bf00      	nop
 8008ca8:	08008c05 	.word	0x08008c05

08008cac <__sfmoreglue>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	1e4a      	subs	r2, r1, #1
 8008cb0:	2568      	movs	r5, #104	; 0x68
 8008cb2:	4355      	muls	r5, r2
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cba:	f000 f949 	bl	8008f50 <_malloc_r>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	b140      	cbz	r0, 8008cd4 <__sfmoreglue+0x28>
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8008cc8:	300c      	adds	r0, #12
 8008cca:	60a0      	str	r0, [r4, #8]
 8008ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cd0:	f7ff fde6 	bl	80088a0 <memset>
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}

08008cd8 <__sinit>:
 8008cd8:	6983      	ldr	r3, [r0, #24]
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	4604      	mov	r4, r0
 8008cde:	bb33      	cbnz	r3, 8008d2e <__sinit+0x56>
 8008ce0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008ce4:	6503      	str	r3, [r0, #80]	; 0x50
 8008ce6:	4b12      	ldr	r3, [pc, #72]	; (8008d30 <__sinit+0x58>)
 8008ce8:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <__sinit+0x5c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6282      	str	r2, [r0, #40]	; 0x28
 8008cee:	4298      	cmp	r0, r3
 8008cf0:	bf04      	itt	eq
 8008cf2:	2301      	moveq	r3, #1
 8008cf4:	6183      	streq	r3, [r0, #24]
 8008cf6:	f000 f81f 	bl	8008d38 <__sfp>
 8008cfa:	6060      	str	r0, [r4, #4]
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 f81b 	bl	8008d38 <__sfp>
 8008d02:	60a0      	str	r0, [r4, #8]
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 f817 	bl	8008d38 <__sfp>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	60e0      	str	r0, [r4, #12]
 8008d0e:	2104      	movs	r1, #4
 8008d10:	6860      	ldr	r0, [r4, #4]
 8008d12:	f7ff ffa1 	bl	8008c58 <std>
 8008d16:	2201      	movs	r2, #1
 8008d18:	2109      	movs	r1, #9
 8008d1a:	68a0      	ldr	r0, [r4, #8]
 8008d1c:	f7ff ff9c 	bl	8008c58 <std>
 8008d20:	2202      	movs	r2, #2
 8008d22:	2112      	movs	r1, #18
 8008d24:	68e0      	ldr	r0, [r4, #12]
 8008d26:	f7ff ff97 	bl	8008c58 <std>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61a3      	str	r3, [r4, #24]
 8008d2e:	bd10      	pop	{r4, pc}
 8008d30:	0801cf30 	.word	0x0801cf30
 8008d34:	08008ca1 	.word	0x08008ca1

08008d38 <__sfp>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <__sfp+0x70>)
 8008d3c:	681e      	ldr	r6, [r3, #0]
 8008d3e:	69b3      	ldr	r3, [r6, #24]
 8008d40:	4607      	mov	r7, r0
 8008d42:	b913      	cbnz	r3, 8008d4a <__sfp+0x12>
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7ff ffc7 	bl	8008cd8 <__sinit>
 8008d4a:	3648      	adds	r6, #72	; 0x48
 8008d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	d503      	bpl.n	8008d5c <__sfp+0x24>
 8008d54:	6833      	ldr	r3, [r6, #0]
 8008d56:	b133      	cbz	r3, 8008d66 <__sfp+0x2e>
 8008d58:	6836      	ldr	r6, [r6, #0]
 8008d5a:	e7f7      	b.n	8008d4c <__sfp+0x14>
 8008d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d60:	b16d      	cbz	r5, 8008d7e <__sfp+0x46>
 8008d62:	3468      	adds	r4, #104	; 0x68
 8008d64:	e7f4      	b.n	8008d50 <__sfp+0x18>
 8008d66:	2104      	movs	r1, #4
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ff9f 	bl	8008cac <__sfmoreglue>
 8008d6e:	6030      	str	r0, [r6, #0]
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d1f1      	bne.n	8008d58 <__sfp+0x20>
 8008d74:	230c      	movs	r3, #12
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	4604      	mov	r4, r0
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <__sfp+0x74>)
 8008d80:	6665      	str	r5, [r4, #100]	; 0x64
 8008d82:	e9c4 5500 	strd	r5, r5, [r4]
 8008d86:	60a5      	str	r5, [r4, #8]
 8008d88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008d8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008d90:	2208      	movs	r2, #8
 8008d92:	4629      	mov	r1, r5
 8008d94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d98:	f7ff fd82 	bl	80088a0 <memset>
 8008d9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008da0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008da4:	e7e9      	b.n	8008d7a <__sfp+0x42>
 8008da6:	bf00      	nop
 8008da8:	0801cf30 	.word	0x0801cf30
 8008dac:	ffff0001 	.word	0xffff0001

08008db0 <_fwalk_reent>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	4680      	mov	r8, r0
 8008db6:	4689      	mov	r9, r1
 8008db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	b914      	cbnz	r4, 8008dc6 <_fwalk_reent+0x16>
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008dca:	3f01      	subs	r7, #1
 8008dcc:	d501      	bpl.n	8008dd2 <_fwalk_reent+0x22>
 8008dce:	6824      	ldr	r4, [r4, #0]
 8008dd0:	e7f5      	b.n	8008dbe <_fwalk_reent+0xe>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d907      	bls.n	8008de8 <_fwalk_reent+0x38>
 8008dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	d003      	beq.n	8008de8 <_fwalk_reent+0x38>
 8008de0:	4629      	mov	r1, r5
 8008de2:	4640      	mov	r0, r8
 8008de4:	47c8      	blx	r9
 8008de6:	4306      	orrs	r6, r0
 8008de8:	3568      	adds	r5, #104	; 0x68
 8008dea:	e7ee      	b.n	8008dca <_fwalk_reent+0x1a>

08008dec <__swhatbuf_r>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	460e      	mov	r6, r1
 8008df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df4:	2900      	cmp	r1, #0
 8008df6:	b096      	sub	sp, #88	; 0x58
 8008df8:	4614      	mov	r4, r2
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	da07      	bge.n	8008e0e <__swhatbuf_r+0x22>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	602b      	str	r3, [r5, #0]
 8008e02:	89b3      	ldrh	r3, [r6, #12]
 8008e04:	061a      	lsls	r2, r3, #24
 8008e06:	d410      	bmi.n	8008e2a <__swhatbuf_r+0x3e>
 8008e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e0c:	e00e      	b.n	8008e2c <__swhatbuf_r+0x40>
 8008e0e:	466a      	mov	r2, sp
 8008e10:	f000 f96e 	bl	80090f0 <_fstat_r>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	dbf2      	blt.n	8008dfe <__swhatbuf_r+0x12>
 8008e18:	9a01      	ldr	r2, [sp, #4]
 8008e1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e22:	425a      	negs	r2, r3
 8008e24:	415a      	adcs	r2, r3
 8008e26:	602a      	str	r2, [r5, #0]
 8008e28:	e7ee      	b.n	8008e08 <__swhatbuf_r+0x1c>
 8008e2a:	2340      	movs	r3, #64	; 0x40
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	b016      	add	sp, #88	; 0x58
 8008e32:	bd70      	pop	{r4, r5, r6, pc}

08008e34 <__smakebuf_r>:
 8008e34:	898b      	ldrh	r3, [r1, #12]
 8008e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e38:	079d      	lsls	r5, r3, #30
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	d507      	bpl.n	8008e50 <__smakebuf_r+0x1c>
 8008e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	6123      	str	r3, [r4, #16]
 8008e48:	2301      	movs	r3, #1
 8008e4a:	6163      	str	r3, [r4, #20]
 8008e4c:	b002      	add	sp, #8
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	ab01      	add	r3, sp, #4
 8008e52:	466a      	mov	r2, sp
 8008e54:	f7ff ffca 	bl	8008dec <__swhatbuf_r>
 8008e58:	9900      	ldr	r1, [sp, #0]
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f000 f877 	bl	8008f50 <_malloc_r>
 8008e62:	b948      	cbnz	r0, 8008e78 <__smakebuf_r+0x44>
 8008e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e68:	059a      	lsls	r2, r3, #22
 8008e6a:	d4ef      	bmi.n	8008e4c <__smakebuf_r+0x18>
 8008e6c:	f023 0303 	bic.w	r3, r3, #3
 8008e70:	f043 0302 	orr.w	r3, r3, #2
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	e7e3      	b.n	8008e40 <__smakebuf_r+0xc>
 8008e78:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <__smakebuf_r+0x7c>)
 8008e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	6020      	str	r0, [r4, #0]
 8008e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	9b00      	ldr	r3, [sp, #0]
 8008e88:	6163      	str	r3, [r4, #20]
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	6120      	str	r0, [r4, #16]
 8008e8e:	b15b      	cbz	r3, 8008ea8 <__smakebuf_r+0x74>
 8008e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 f93d 	bl	8009114 <_isatty_r>
 8008e9a:	b128      	cbz	r0, 8008ea8 <__smakebuf_r+0x74>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	431d      	orrs	r5, r3
 8008eac:	81a5      	strh	r5, [r4, #12]
 8008eae:	e7cd      	b.n	8008e4c <__smakebuf_r+0x18>
 8008eb0:	08008ca1 	.word	0x08008ca1

08008eb4 <_free_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d045      	beq.n	8008f48 <_free_r+0x94>
 8008ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec0:	1f0c      	subs	r4, r1, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfb8      	it	lt
 8008ec6:	18e4      	addlt	r4, r4, r3
 8008ec8:	f000 f946 	bl	8009158 <__malloc_lock>
 8008ecc:	4a1f      	ldr	r2, [pc, #124]	; (8008f4c <_free_r+0x98>)
 8008ece:	6813      	ldr	r3, [r2, #0]
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	b933      	cbnz	r3, 8008ee2 <_free_r+0x2e>
 8008ed4:	6063      	str	r3, [r4, #4]
 8008ed6:	6014      	str	r4, [r2, #0]
 8008ed8:	4628      	mov	r0, r5
 8008eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ede:	f000 b93c 	b.w	800915a <__malloc_unlock>
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	d90c      	bls.n	8008f00 <_free_r+0x4c>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	1862      	adds	r2, r4, r1
 8008eea:	4293      	cmp	r3, r2
 8008eec:	bf04      	itt	eq
 8008eee:	681a      	ldreq	r2, [r3, #0]
 8008ef0:	685b      	ldreq	r3, [r3, #4]
 8008ef2:	6063      	str	r3, [r4, #4]
 8008ef4:	bf04      	itt	eq
 8008ef6:	1852      	addeq	r2, r2, r1
 8008ef8:	6022      	streq	r2, [r4, #0]
 8008efa:	6004      	str	r4, [r0, #0]
 8008efc:	e7ec      	b.n	8008ed8 <_free_r+0x24>
 8008efe:	4613      	mov	r3, r2
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	b10a      	cbz	r2, 8008f08 <_free_r+0x54>
 8008f04:	42a2      	cmp	r2, r4
 8008f06:	d9fa      	bls.n	8008efe <_free_r+0x4a>
 8008f08:	6819      	ldr	r1, [r3, #0]
 8008f0a:	1858      	adds	r0, r3, r1
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d10b      	bne.n	8008f28 <_free_r+0x74>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	4401      	add	r1, r0
 8008f14:	1858      	adds	r0, r3, r1
 8008f16:	4282      	cmp	r2, r0
 8008f18:	6019      	str	r1, [r3, #0]
 8008f1a:	d1dd      	bne.n	8008ed8 <_free_r+0x24>
 8008f1c:	6810      	ldr	r0, [r2, #0]
 8008f1e:	6852      	ldr	r2, [r2, #4]
 8008f20:	605a      	str	r2, [r3, #4]
 8008f22:	4401      	add	r1, r0
 8008f24:	6019      	str	r1, [r3, #0]
 8008f26:	e7d7      	b.n	8008ed8 <_free_r+0x24>
 8008f28:	d902      	bls.n	8008f30 <_free_r+0x7c>
 8008f2a:	230c      	movs	r3, #12
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	e7d3      	b.n	8008ed8 <_free_r+0x24>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	1821      	adds	r1, r4, r0
 8008f34:	428a      	cmp	r2, r1
 8008f36:	bf04      	itt	eq
 8008f38:	6811      	ldreq	r1, [r2, #0]
 8008f3a:	6852      	ldreq	r2, [r2, #4]
 8008f3c:	6062      	str	r2, [r4, #4]
 8008f3e:	bf04      	itt	eq
 8008f40:	1809      	addeq	r1, r1, r0
 8008f42:	6021      	streq	r1, [r4, #0]
 8008f44:	605c      	str	r4, [r3, #4]
 8008f46:	e7c7      	b.n	8008ed8 <_free_r+0x24>
 8008f48:	bd38      	pop	{r3, r4, r5, pc}
 8008f4a:	bf00      	nop
 8008f4c:	200001f8 	.word	0x200001f8

08008f50 <_malloc_r>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	1ccd      	adds	r5, r1, #3
 8008f54:	f025 0503 	bic.w	r5, r5, #3
 8008f58:	3508      	adds	r5, #8
 8008f5a:	2d0c      	cmp	r5, #12
 8008f5c:	bf38      	it	cc
 8008f5e:	250c      	movcc	r5, #12
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	4606      	mov	r6, r0
 8008f64:	db01      	blt.n	8008f6a <_malloc_r+0x1a>
 8008f66:	42a9      	cmp	r1, r5
 8008f68:	d903      	bls.n	8008f72 <_malloc_r+0x22>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	6033      	str	r3, [r6, #0]
 8008f6e:	2000      	movs	r0, #0
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	f000 f8f1 	bl	8009158 <__malloc_lock>
 8008f76:	4a21      	ldr	r2, [pc, #132]	; (8008ffc <_malloc_r+0xac>)
 8008f78:	6814      	ldr	r4, [r2, #0]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	b991      	cbnz	r1, 8008fa4 <_malloc_r+0x54>
 8008f7e:	4c20      	ldr	r4, [pc, #128]	; (8009000 <_malloc_r+0xb0>)
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	b91b      	cbnz	r3, 8008f8c <_malloc_r+0x3c>
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 f83d 	bl	8009004 <_sbrk_r>
 8008f8a:	6020      	str	r0, [r4, #0]
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f000 f838 	bl	8009004 <_sbrk_r>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d124      	bne.n	8008fe2 <_malloc_r+0x92>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	6033      	str	r3, [r6, #0]
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f000 f8dc 	bl	800915a <__malloc_unlock>
 8008fa2:	e7e4      	b.n	8008f6e <_malloc_r+0x1e>
 8008fa4:	680b      	ldr	r3, [r1, #0]
 8008fa6:	1b5b      	subs	r3, r3, r5
 8008fa8:	d418      	bmi.n	8008fdc <_malloc_r+0x8c>
 8008faa:	2b0b      	cmp	r3, #11
 8008fac:	d90f      	bls.n	8008fce <_malloc_r+0x7e>
 8008fae:	600b      	str	r3, [r1, #0]
 8008fb0:	50cd      	str	r5, [r1, r3]
 8008fb2:	18cc      	adds	r4, r1, r3
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 f8d0 	bl	800915a <__malloc_unlock>
 8008fba:	f104 000b 	add.w	r0, r4, #11
 8008fbe:	1d23      	adds	r3, r4, #4
 8008fc0:	f020 0007 	bic.w	r0, r0, #7
 8008fc4:	1ac3      	subs	r3, r0, r3
 8008fc6:	d0d3      	beq.n	8008f70 <_malloc_r+0x20>
 8008fc8:	425a      	negs	r2, r3
 8008fca:	50e2      	str	r2, [r4, r3]
 8008fcc:	e7d0      	b.n	8008f70 <_malloc_r+0x20>
 8008fce:	428c      	cmp	r4, r1
 8008fd0:	684b      	ldr	r3, [r1, #4]
 8008fd2:	bf16      	itet	ne
 8008fd4:	6063      	strne	r3, [r4, #4]
 8008fd6:	6013      	streq	r3, [r2, #0]
 8008fd8:	460c      	movne	r4, r1
 8008fda:	e7eb      	b.n	8008fb4 <_malloc_r+0x64>
 8008fdc:	460c      	mov	r4, r1
 8008fde:	6849      	ldr	r1, [r1, #4]
 8008fe0:	e7cc      	b.n	8008f7c <_malloc_r+0x2c>
 8008fe2:	1cc4      	adds	r4, r0, #3
 8008fe4:	f024 0403 	bic.w	r4, r4, #3
 8008fe8:	42a0      	cmp	r0, r4
 8008fea:	d005      	beq.n	8008ff8 <_malloc_r+0xa8>
 8008fec:	1a21      	subs	r1, r4, r0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f000 f808 	bl	8009004 <_sbrk_r>
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d0cf      	beq.n	8008f98 <_malloc_r+0x48>
 8008ff8:	6025      	str	r5, [r4, #0]
 8008ffa:	e7db      	b.n	8008fb4 <_malloc_r+0x64>
 8008ffc:	200001f8 	.word	0x200001f8
 8009000:	200001fc 	.word	0x200001fc

08009004 <_sbrk_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4c06      	ldr	r4, [pc, #24]	; (8009020 <_sbrk_r+0x1c>)
 8009008:	2300      	movs	r3, #0
 800900a:	4605      	mov	r5, r0
 800900c:	4608      	mov	r0, r1
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	f7ff f978 	bl	8008304 <_sbrk>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_sbrk_r+0x1a>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	b103      	cbz	r3, 800901e <_sbrk_r+0x1a>
 800901c:	602b      	str	r3, [r5, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	200005ac 	.word	0x200005ac

08009024 <__sread>:
 8009024:	b510      	push	{r4, lr}
 8009026:	460c      	mov	r4, r1
 8009028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902c:	f000 f896 	bl	800915c <_read_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	bfab      	itete	ge
 8009034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009036:	89a3      	ldrhlt	r3, [r4, #12]
 8009038:	181b      	addge	r3, r3, r0
 800903a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800903e:	bfac      	ite	ge
 8009040:	6563      	strge	r3, [r4, #84]	; 0x54
 8009042:	81a3      	strhlt	r3, [r4, #12]
 8009044:	bd10      	pop	{r4, pc}

08009046 <__swrite>:
 8009046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904a:	461f      	mov	r7, r3
 800904c:	898b      	ldrh	r3, [r1, #12]
 800904e:	05db      	lsls	r3, r3, #23
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	4616      	mov	r6, r2
 8009056:	d505      	bpl.n	8009064 <__swrite+0x1e>
 8009058:	2302      	movs	r3, #2
 800905a:	2200      	movs	r2, #0
 800905c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009060:	f000 f868 	bl	8009134 <_lseek_r>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800906a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	4632      	mov	r2, r6
 8009072:	463b      	mov	r3, r7
 8009074:	4628      	mov	r0, r5
 8009076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800907a:	f000 b817 	b.w	80090ac <_write_r>

0800907e <__sseek>:
 800907e:	b510      	push	{r4, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009086:	f000 f855 	bl	8009134 <_lseek_r>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	bf15      	itete	ne
 8009090:	6560      	strne	r0, [r4, #84]	; 0x54
 8009092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800909a:	81a3      	strheq	r3, [r4, #12]
 800909c:	bf18      	it	ne
 800909e:	81a3      	strhne	r3, [r4, #12]
 80090a0:	bd10      	pop	{r4, pc}

080090a2 <__sclose>:
 80090a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a6:	f000 b813 	b.w	80090d0 <_close_r>
	...

080090ac <_write_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4c07      	ldr	r4, [pc, #28]	; (80090cc <_write_r+0x20>)
 80090b0:	4605      	mov	r5, r0
 80090b2:	4608      	mov	r0, r1
 80090b4:	4611      	mov	r1, r2
 80090b6:	2200      	movs	r2, #0
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	f7fd fead 	bl	8006e1a <_write>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_write_r+0x1e>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_write_r+0x1e>
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	200005ac 	.word	0x200005ac

080090d0 <_close_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4c06      	ldr	r4, [pc, #24]	; (80090ec <_close_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4605      	mov	r5, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	f7ff f8dd 	bl	800829a <_close>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_close_r+0x1a>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_close_r+0x1a>
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	200005ac 	.word	0x200005ac

080090f0 <_fstat_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4c07      	ldr	r4, [pc, #28]	; (8009110 <_fstat_r+0x20>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4605      	mov	r5, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	4611      	mov	r1, r2
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	f7ff f8d8 	bl	80082b2 <_fstat>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d102      	bne.n	800910c <_fstat_r+0x1c>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	b103      	cbz	r3, 800910c <_fstat_r+0x1c>
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	bd38      	pop	{r3, r4, r5, pc}
 800910e:	bf00      	nop
 8009110:	200005ac 	.word	0x200005ac

08009114 <_isatty_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4c06      	ldr	r4, [pc, #24]	; (8009130 <_isatty_r+0x1c>)
 8009118:	2300      	movs	r3, #0
 800911a:	4605      	mov	r5, r0
 800911c:	4608      	mov	r0, r1
 800911e:	6023      	str	r3, [r4, #0]
 8009120:	f7ff f8d7 	bl	80082d2 <_isatty>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_isatty_r+0x1a>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	b103      	cbz	r3, 800912e <_isatty_r+0x1a>
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	200005ac 	.word	0x200005ac

08009134 <_lseek_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4c07      	ldr	r4, [pc, #28]	; (8009154 <_lseek_r+0x20>)
 8009138:	4605      	mov	r5, r0
 800913a:	4608      	mov	r0, r1
 800913c:	4611      	mov	r1, r2
 800913e:	2200      	movs	r2, #0
 8009140:	6022      	str	r2, [r4, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f7ff f8d0 	bl	80082e8 <_lseek>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_lseek_r+0x1e>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	b103      	cbz	r3, 8009152 <_lseek_r+0x1e>
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	200005ac 	.word	0x200005ac

08009158 <__malloc_lock>:
 8009158:	4770      	bx	lr

0800915a <__malloc_unlock>:
 800915a:	4770      	bx	lr

0800915c <_read_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4c07      	ldr	r4, [pc, #28]	; (800917c <_read_r+0x20>)
 8009160:	4605      	mov	r5, r0
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	2200      	movs	r2, #0
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f7ff f878 	bl	8008260 <_read>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_read_r+0x1e>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	b103      	cbz	r3, 800917a <_read_r+0x1e>
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	200005ac 	.word	0x200005ac

08009180 <fmod>:
 8009180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009184:	ed2d 8b02 	vpush	{d8}
 8009188:	b08b      	sub	sp, #44	; 0x2c
 800918a:	ec55 4b10 	vmov	r4, r5, d0
 800918e:	ec57 6b11 	vmov	r6, r7, d1
 8009192:	f000 f8b5 	bl	8009300 <__ieee754_fmod>
 8009196:	4b2a      	ldr	r3, [pc, #168]	; (8009240 <fmod+0xc0>)
 8009198:	eeb0 8a40 	vmov.f32	s16, s0
 800919c:	eef0 8a60 	vmov.f32	s17, s1
 80091a0:	f993 8000 	ldrsb.w	r8, [r3]
 80091a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80091a8:	d030      	beq.n	800920c <fmod+0x8c>
 80091aa:	4632      	mov	r2, r6
 80091ac:	463b      	mov	r3, r7
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	f7f7 fc7f 	bl	8000ab4 <__aeabi_dcmpun>
 80091b6:	bb48      	cbnz	r0, 800920c <fmod+0x8c>
 80091b8:	4622      	mov	r2, r4
 80091ba:	462b      	mov	r3, r5
 80091bc:	4620      	mov	r0, r4
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 fc78 	bl	8000ab4 <__aeabi_dcmpun>
 80091c4:	4681      	mov	r9, r0
 80091c6:	bb08      	cbnz	r0, 800920c <fmod+0x8c>
 80091c8:	2200      	movs	r2, #0
 80091ca:	2300      	movs	r3, #0
 80091cc:	4630      	mov	r0, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f7 fc3e 	bl	8000a50 <__aeabi_dcmpeq>
 80091d4:	b1d0      	cbz	r0, 800920c <fmod+0x8c>
 80091d6:	2301      	movs	r3, #1
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	4b1a      	ldr	r3, [pc, #104]	; (8009244 <fmod+0xc4>)
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80091e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80091e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80091ea:	f1b8 0f00 	cmp.w	r8, #0
 80091ee:	d116      	bne.n	800921e <fmod+0x9e>
 80091f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80091f4:	4668      	mov	r0, sp
 80091f6:	f000 fa1d 	bl	8009634 <matherr>
 80091fa:	b1d8      	cbz	r0, 8009234 <fmod+0xb4>
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	b11b      	cbz	r3, 8009208 <fmod+0x88>
 8009200:	f7ff fb24 	bl	800884c <__errno>
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	6003      	str	r3, [r0, #0]
 8009208:	ed9d 8b06 	vldr	d8, [sp, #24]
 800920c:	eeb0 0a48 	vmov.f32	s0, s16
 8009210:	eef0 0a68 	vmov.f32	s1, s17
 8009214:	b00b      	add	sp, #44	; 0x2c
 8009216:	ecbd 8b02 	vpop	{d8}
 800921a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800921e:	2200      	movs	r2, #0
 8009220:	2300      	movs	r3, #0
 8009222:	4610      	mov	r0, r2
 8009224:	4619      	mov	r1, r3
 8009226:	f7f7 fad5 	bl	80007d4 <__aeabi_ddiv>
 800922a:	f1b8 0f02 	cmp.w	r8, #2
 800922e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009232:	d1df      	bne.n	80091f4 <fmod+0x74>
 8009234:	f7ff fb0a 	bl	800884c <__errno>
 8009238:	2321      	movs	r3, #33	; 0x21
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	e7de      	b.n	80091fc <fmod+0x7c>
 800923e:	bf00      	nop
 8009240:	200000a4 	.word	0x200000a4
 8009244:	0801cf94 	.word	0x0801cf94

08009248 <fmodf>:
 8009248:	b5d0      	push	{r4, r6, r7, lr}
 800924a:	ed2d 8b02 	vpush	{d8}
 800924e:	b08a      	sub	sp, #40	; 0x28
 8009250:	eef0 8a40 	vmov.f32	s17, s0
 8009254:	eeb0 8a60 	vmov.f32	s16, s1
 8009258:	f000 f964 	bl	8009524 <__ieee754_fmodf>
 800925c:	4b26      	ldr	r3, [pc, #152]	; (80092f8 <fmodf+0xb0>)
 800925e:	f993 4000 	ldrsb.w	r4, [r3]
 8009262:	1c63      	adds	r3, r4, #1
 8009264:	d035      	beq.n	80092d2 <fmodf+0x8a>
 8009266:	eeb4 8a48 	vcmp.f32	s16, s16
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	d630      	bvs.n	80092d2 <fmodf+0x8a>
 8009270:	eef4 8a68 	vcmp.f32	s17, s17
 8009274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009278:	d62b      	bvs.n	80092d2 <fmodf+0x8a>
 800927a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800927e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009282:	d126      	bne.n	80092d2 <fmodf+0x8a>
 8009284:	2301      	movs	r3, #1
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	4b1c      	ldr	r3, [pc, #112]	; (80092fc <fmodf+0xb4>)
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	ee18 0a90 	vmov	r0, s17
 8009290:	2300      	movs	r3, #0
 8009292:	9308      	str	r3, [sp, #32]
 8009294:	f7f7 f91c 	bl	80004d0 <__aeabi_f2d>
 8009298:	4606      	mov	r6, r0
 800929a:	460f      	mov	r7, r1
 800929c:	ee18 0a10 	vmov	r0, s16
 80092a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80092a4:	f7f7 f914 	bl	80004d0 <__aeabi_f2d>
 80092a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ac:	b9ac      	cbnz	r4, 80092da <fmodf+0x92>
 80092ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80092b2:	4668      	mov	r0, sp
 80092b4:	f000 f9be 	bl	8009634 <matherr>
 80092b8:	b1c8      	cbz	r0, 80092ee <fmodf+0xa6>
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	b11b      	cbz	r3, 80092c6 <fmodf+0x7e>
 80092be:	f7ff fac5 	bl	800884c <__errno>
 80092c2:	9b08      	ldr	r3, [sp, #32]
 80092c4:	6003      	str	r3, [r0, #0]
 80092c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092ca:	f7f7 fc09 	bl	8000ae0 <__aeabi_d2f>
 80092ce:	ee00 0a10 	vmov	s0, r0
 80092d2:	b00a      	add	sp, #40	; 0x28
 80092d4:	ecbd 8b02 	vpop	{d8}
 80092d8:	bdd0      	pop	{r4, r6, r7, pc}
 80092da:	2200      	movs	r2, #0
 80092dc:	2300      	movs	r3, #0
 80092de:	4610      	mov	r0, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	f7f7 fa77 	bl	80007d4 <__aeabi_ddiv>
 80092e6:	2c02      	cmp	r4, #2
 80092e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80092ec:	d1e1      	bne.n	80092b2 <fmodf+0x6a>
 80092ee:	f7ff faad 	bl	800884c <__errno>
 80092f2:	2321      	movs	r3, #33	; 0x21
 80092f4:	6003      	str	r3, [r0, #0]
 80092f6:	e7e0      	b.n	80092ba <fmodf+0x72>
 80092f8:	200000a4 	.word	0x200000a4
 80092fc:	0801cf99 	.word	0x0801cf99

08009300 <__ieee754_fmod>:
 8009300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009304:	ec53 2b11 	vmov	r2, r3, d1
 8009308:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800930c:	ea5e 0402 	orrs.w	r4, lr, r2
 8009310:	ec51 0b10 	vmov	r0, r1, d0
 8009314:	461e      	mov	r6, r3
 8009316:	ee11 5a10 	vmov	r5, s2
 800931a:	4694      	mov	ip, r2
 800931c:	d00c      	beq.n	8009338 <__ieee754_fmod+0x38>
 800931e:	4c7a      	ldr	r4, [pc, #488]	; (8009508 <__ieee754_fmod+0x208>)
 8009320:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009324:	45a0      	cmp	r8, r4
 8009326:	4689      	mov	r9, r1
 8009328:	dc06      	bgt.n	8009338 <__ieee754_fmod+0x38>
 800932a:	4254      	negs	r4, r2
 800932c:	4314      	orrs	r4, r2
 800932e:	4f77      	ldr	r7, [pc, #476]	; (800950c <__ieee754_fmod+0x20c>)
 8009330:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009334:	42bc      	cmp	r4, r7
 8009336:	d909      	bls.n	800934c <__ieee754_fmod+0x4c>
 8009338:	f7f7 f922 	bl	8000580 <__aeabi_dmul>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	f7f7 fa48 	bl	80007d4 <__aeabi_ddiv>
 8009344:	ec41 0b10 	vmov	d0, r0, r1
 8009348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800934c:	45f0      	cmp	r8, lr
 800934e:	ee10 2a10 	vmov	r2, s0
 8009352:	4607      	mov	r7, r0
 8009354:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8009358:	dc0a      	bgt.n	8009370 <__ieee754_fmod+0x70>
 800935a:	dbf3      	blt.n	8009344 <__ieee754_fmod+0x44>
 800935c:	42a8      	cmp	r0, r5
 800935e:	d3f1      	bcc.n	8009344 <__ieee754_fmod+0x44>
 8009360:	d106      	bne.n	8009370 <__ieee754_fmod+0x70>
 8009362:	496b      	ldr	r1, [pc, #428]	; (8009510 <__ieee754_fmod+0x210>)
 8009364:	0fe4      	lsrs	r4, r4, #31
 8009366:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800936a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800936e:	e7e9      	b.n	8009344 <__ieee754_fmod+0x44>
 8009370:	4b68      	ldr	r3, [pc, #416]	; (8009514 <__ieee754_fmod+0x214>)
 8009372:	4598      	cmp	r8, r3
 8009374:	dc49      	bgt.n	800940a <__ieee754_fmod+0x10a>
 8009376:	f1b8 0f00 	cmp.w	r8, #0
 800937a:	d13d      	bne.n	80093f8 <__ieee754_fmod+0xf8>
 800937c:	4866      	ldr	r0, [pc, #408]	; (8009518 <__ieee754_fmod+0x218>)
 800937e:	4611      	mov	r1, r2
 8009380:	2900      	cmp	r1, #0
 8009382:	dc36      	bgt.n	80093f2 <__ieee754_fmod+0xf2>
 8009384:	459e      	cmp	lr, r3
 8009386:	dc51      	bgt.n	800942c <__ieee754_fmod+0x12c>
 8009388:	f1be 0f00 	cmp.w	lr, #0
 800938c:	d145      	bne.n	800941a <__ieee754_fmod+0x11a>
 800938e:	4b62      	ldr	r3, [pc, #392]	; (8009518 <__ieee754_fmod+0x218>)
 8009390:	4629      	mov	r1, r5
 8009392:	2900      	cmp	r1, #0
 8009394:	dc3e      	bgt.n	8009414 <__ieee754_fmod+0x114>
 8009396:	4961      	ldr	r1, [pc, #388]	; (800951c <__ieee754_fmod+0x21c>)
 8009398:	4288      	cmp	r0, r1
 800939a:	db4c      	blt.n	8009436 <__ieee754_fmod+0x136>
 800939c:	f3c9 0113 	ubfx	r1, r9, #0, #20
 80093a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80093a4:	4a5d      	ldr	r2, [pc, #372]	; (800951c <__ieee754_fmod+0x21c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	db59      	blt.n	800945e <__ieee754_fmod+0x15e>
 80093aa:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80093ae:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80093b2:	1ac0      	subs	r0, r0, r3
 80093b4:	1b8a      	subs	r2, r1, r6
 80093b6:	eba7 050c 	sub.w	r5, r7, ip
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d166      	bne.n	800948c <__ieee754_fmod+0x18c>
 80093be:	4567      	cmp	r7, ip
 80093c0:	bf38      	it	cc
 80093c2:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80093c6:	2a00      	cmp	r2, #0
 80093c8:	bfbc      	itt	lt
 80093ca:	463d      	movlt	r5, r7
 80093cc:	460a      	movlt	r2, r1
 80093ce:	ea52 0105 	orrs.w	r1, r2, r5
 80093d2:	d0c6      	beq.n	8009362 <__ieee754_fmod+0x62>
 80093d4:	494f      	ldr	r1, [pc, #316]	; (8009514 <__ieee754_fmod+0x214>)
 80093d6:	428a      	cmp	r2, r1
 80093d8:	dd6d      	ble.n	80094b6 <__ieee754_fmod+0x1b6>
 80093da:	4950      	ldr	r1, [pc, #320]	; (800951c <__ieee754_fmod+0x21c>)
 80093dc:	428b      	cmp	r3, r1
 80093de:	db70      	blt.n	80094c2 <__ieee754_fmod+0x1c2>
 80093e0:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80093e4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80093e8:	4314      	orrs	r4, r2
 80093ea:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80093ee:	4628      	mov	r0, r5
 80093f0:	e7a8      	b.n	8009344 <__ieee754_fmod+0x44>
 80093f2:	3801      	subs	r0, #1
 80093f4:	0049      	lsls	r1, r1, #1
 80093f6:	e7c3      	b.n	8009380 <__ieee754_fmod+0x80>
 80093f8:	4848      	ldr	r0, [pc, #288]	; (800951c <__ieee754_fmod+0x21c>)
 80093fa:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80093fe:	0049      	lsls	r1, r1, #1
 8009400:	2900      	cmp	r1, #0
 8009402:	f100 30ff 	add.w	r0, r0, #4294967295
 8009406:	dcfa      	bgt.n	80093fe <__ieee754_fmod+0xfe>
 8009408:	e7bc      	b.n	8009384 <__ieee754_fmod+0x84>
 800940a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800940e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009412:	e7b7      	b.n	8009384 <__ieee754_fmod+0x84>
 8009414:	3b01      	subs	r3, #1
 8009416:	0049      	lsls	r1, r1, #1
 8009418:	e7bb      	b.n	8009392 <__ieee754_fmod+0x92>
 800941a:	4b40      	ldr	r3, [pc, #256]	; (800951c <__ieee754_fmod+0x21c>)
 800941c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8009420:	0049      	lsls	r1, r1, #1
 8009422:	2900      	cmp	r1, #0
 8009424:	f103 33ff 	add.w	r3, r3, #4294967295
 8009428:	dcfa      	bgt.n	8009420 <__ieee754_fmod+0x120>
 800942a:	e7b4      	b.n	8009396 <__ieee754_fmod+0x96>
 800942c:	ea4f 532e 	mov.w	r3, lr, asr #20
 8009430:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009434:	e7af      	b.n	8009396 <__ieee754_fmod+0x96>
 8009436:	1a0f      	subs	r7, r1, r0
 8009438:	2f1f      	cmp	r7, #31
 800943a:	dc0a      	bgt.n	8009452 <__ieee754_fmod+0x152>
 800943c:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009440:	fa08 f807 	lsl.w	r8, r8, r7
 8009444:	fa22 f101 	lsr.w	r1, r2, r1
 8009448:	ea41 0108 	orr.w	r1, r1, r8
 800944c:	fa02 f707 	lsl.w	r7, r2, r7
 8009450:	e7a8      	b.n	80093a4 <__ieee754_fmod+0xa4>
 8009452:	4933      	ldr	r1, [pc, #204]	; (8009520 <__ieee754_fmod+0x220>)
 8009454:	1a09      	subs	r1, r1, r0
 8009456:	fa02 f101 	lsl.w	r1, r2, r1
 800945a:	2700      	movs	r7, #0
 800945c:	e7a2      	b.n	80093a4 <__ieee754_fmod+0xa4>
 800945e:	eba2 0c03 	sub.w	ip, r2, r3
 8009462:	f1bc 0f1f 	cmp.w	ip, #31
 8009466:	dc0a      	bgt.n	800947e <__ieee754_fmod+0x17e>
 8009468:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800946c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009470:	fa25 f606 	lsr.w	r6, r5, r6
 8009474:	ea46 060e 	orr.w	r6, r6, lr
 8009478:	fa05 fc0c 	lsl.w	ip, r5, ip
 800947c:	e799      	b.n	80093b2 <__ieee754_fmod+0xb2>
 800947e:	4e28      	ldr	r6, [pc, #160]	; (8009520 <__ieee754_fmod+0x220>)
 8009480:	1af6      	subs	r6, r6, r3
 8009482:	fa05 f606 	lsl.w	r6, r5, r6
 8009486:	f04f 0c00 	mov.w	ip, #0
 800948a:	e792      	b.n	80093b2 <__ieee754_fmod+0xb2>
 800948c:	4567      	cmp	r7, ip
 800948e:	bf38      	it	cc
 8009490:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009494:	2a00      	cmp	r2, #0
 8009496:	da05      	bge.n	80094a4 <__ieee754_fmod+0x1a4>
 8009498:	0ffa      	lsrs	r2, r7, #31
 800949a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800949e:	007f      	lsls	r7, r7, #1
 80094a0:	3801      	subs	r0, #1
 80094a2:	e787      	b.n	80093b4 <__ieee754_fmod+0xb4>
 80094a4:	ea52 0105 	orrs.w	r1, r2, r5
 80094a8:	f43f af5b 	beq.w	8009362 <__ieee754_fmod+0x62>
 80094ac:	0fe9      	lsrs	r1, r5, #31
 80094ae:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80094b2:	006f      	lsls	r7, r5, #1
 80094b4:	e7f4      	b.n	80094a0 <__ieee754_fmod+0x1a0>
 80094b6:	0fe8      	lsrs	r0, r5, #31
 80094b8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80094bc:	006d      	lsls	r5, r5, #1
 80094be:	3b01      	subs	r3, #1
 80094c0:	e789      	b.n	80093d6 <__ieee754_fmod+0xd6>
 80094c2:	1ac9      	subs	r1, r1, r3
 80094c4:	2914      	cmp	r1, #20
 80094c6:	dc0a      	bgt.n	80094de <__ieee754_fmod+0x1de>
 80094c8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	40cd      	lsrs	r5, r1
 80094d2:	432b      	orrs	r3, r5
 80094d4:	410a      	asrs	r2, r1
 80094d6:	ea42 0104 	orr.w	r1, r2, r4
 80094da:	4618      	mov	r0, r3
 80094dc:	e732      	b.n	8009344 <__ieee754_fmod+0x44>
 80094de:	291f      	cmp	r1, #31
 80094e0:	dc07      	bgt.n	80094f2 <__ieee754_fmod+0x1f2>
 80094e2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80094e6:	40cd      	lsrs	r5, r1
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	432b      	orrs	r3, r5
 80094ee:	4622      	mov	r2, r4
 80094f0:	e7f1      	b.n	80094d6 <__ieee754_fmod+0x1d6>
 80094f2:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80094f6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80094fa:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80094fe:	33e2      	adds	r3, #226	; 0xe2
 8009500:	fa42 f303 	asr.w	r3, r2, r3
 8009504:	e7f3      	b.n	80094ee <__ieee754_fmod+0x1ee>
 8009506:	bf00      	nop
 8009508:	7fefffff 	.word	0x7fefffff
 800950c:	7ff00000 	.word	0x7ff00000
 8009510:	0801cfa0 	.word	0x0801cfa0
 8009514:	000fffff 	.word	0x000fffff
 8009518:	fffffbed 	.word	0xfffffbed
 800951c:	fffffc02 	.word	0xfffffc02
 8009520:	fffffbe2 	.word	0xfffffbe2

08009524 <__ieee754_fmodf>:
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	ee10 6a90 	vmov	r6, s1
 800952a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800952e:	ee10 3a10 	vmov	r3, s0
 8009532:	d009      	beq.n	8009548 <__ieee754_fmodf+0x24>
 8009534:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009538:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800953c:	ee10 7a10 	vmov	r7, s0
 8009540:	da02      	bge.n	8009548 <__ieee754_fmodf+0x24>
 8009542:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009546:	dd0a      	ble.n	800955e <__ieee754_fmodf+0x3a>
 8009548:	ee07 3a90 	vmov	s15, r3
 800954c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009550:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009554:	ee17 3a90 	vmov	r3, s15
 8009558:	ee00 3a10 	vmov	s0, r3
 800955c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955e:	42a9      	cmp	r1, r5
 8009560:	dbfa      	blt.n	8009558 <__ieee754_fmodf+0x34>
 8009562:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009566:	d105      	bne.n	8009574 <__ieee754_fmodf+0x50>
 8009568:	4a30      	ldr	r2, [pc, #192]	; (800962c <__ieee754_fmodf+0x108>)
 800956a:	0fe3      	lsrs	r3, r4, #31
 800956c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	e7f1      	b.n	8009558 <__ieee754_fmodf+0x34>
 8009574:	4b2e      	ldr	r3, [pc, #184]	; (8009630 <__ieee754_fmodf+0x10c>)
 8009576:	4299      	cmp	r1, r3
 8009578:	dc3e      	bgt.n	80095f8 <__ieee754_fmodf+0xd4>
 800957a:	020a      	lsls	r2, r1, #8
 800957c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009580:	2a00      	cmp	r2, #0
 8009582:	dc36      	bgt.n	80095f2 <__ieee754_fmodf+0xce>
 8009584:	429d      	cmp	r5, r3
 8009586:	dc3a      	bgt.n	80095fe <__ieee754_fmodf+0xda>
 8009588:	022b      	lsls	r3, r5, #8
 800958a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	f102 32ff 	add.w	r2, r2, #4294967295
 8009594:	d5fb      	bpl.n	800958e <__ieee754_fmodf+0x6a>
 8009596:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800959a:	bfbb      	ittet	lt
 800959c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80095a0:	1a1b      	sublt	r3, r3, r0
 80095a2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80095a6:	4099      	lsllt	r1, r3
 80095a8:	bfa8      	it	ge
 80095aa:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80095ae:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80095b2:	bfb5      	itete	lt
 80095b4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80095b8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80095bc:	1a9b      	sublt	r3, r3, r2
 80095be:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80095c2:	bfb8      	it	lt
 80095c4:	409d      	lsllt	r5, r3
 80095c6:	1a80      	subs	r0, r0, r2
 80095c8:	1b4b      	subs	r3, r1, r5
 80095ca:	b9d8      	cbnz	r0, 8009604 <__ieee754_fmodf+0xe0>
 80095cc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80095d0:	bf28      	it	cs
 80095d2:	460b      	movcs	r3, r1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0c7      	beq.n	8009568 <__ieee754_fmodf+0x44>
 80095d8:	4915      	ldr	r1, [pc, #84]	; (8009630 <__ieee754_fmodf+0x10c>)
 80095da:	428b      	cmp	r3, r1
 80095dc:	dd1a      	ble.n	8009614 <__ieee754_fmodf+0xf0>
 80095de:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80095e2:	db1a      	blt.n	800961a <__ieee754_fmodf+0xf6>
 80095e4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80095e8:	4323      	orrs	r3, r4
 80095ea:	327f      	adds	r2, #127	; 0x7f
 80095ec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80095f0:	e7b2      	b.n	8009558 <__ieee754_fmodf+0x34>
 80095f2:	3801      	subs	r0, #1
 80095f4:	0052      	lsls	r2, r2, #1
 80095f6:	e7c3      	b.n	8009580 <__ieee754_fmodf+0x5c>
 80095f8:	15c8      	asrs	r0, r1, #23
 80095fa:	387f      	subs	r0, #127	; 0x7f
 80095fc:	e7c2      	b.n	8009584 <__ieee754_fmodf+0x60>
 80095fe:	15ea      	asrs	r2, r5, #23
 8009600:	3a7f      	subs	r2, #127	; 0x7f
 8009602:	e7c8      	b.n	8009596 <__ieee754_fmodf+0x72>
 8009604:	2b00      	cmp	r3, #0
 8009606:	da02      	bge.n	800960e <__ieee754_fmodf+0xea>
 8009608:	0049      	lsls	r1, r1, #1
 800960a:	3801      	subs	r0, #1
 800960c:	e7dc      	b.n	80095c8 <__ieee754_fmodf+0xa4>
 800960e:	d0ab      	beq.n	8009568 <__ieee754_fmodf+0x44>
 8009610:	0059      	lsls	r1, r3, #1
 8009612:	e7fa      	b.n	800960a <__ieee754_fmodf+0xe6>
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	3a01      	subs	r2, #1
 8009618:	e7df      	b.n	80095da <__ieee754_fmodf+0xb6>
 800961a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800961e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009622:	3282      	adds	r2, #130	; 0x82
 8009624:	4113      	asrs	r3, r2
 8009626:	4323      	orrs	r3, r4
 8009628:	e796      	b.n	8009558 <__ieee754_fmodf+0x34>
 800962a:	bf00      	nop
 800962c:	0801cfb0 	.word	0x0801cfb0
 8009630:	007fffff 	.word	0x007fffff

08009634 <matherr>:
 8009634:	2000      	movs	r0, #0
 8009636:	4770      	bx	lr

08009638 <_init>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr

08009644 <_fini>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr
